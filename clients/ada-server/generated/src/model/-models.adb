--  Pinterest REST API
--  Pinterest's REST API
--
--  The version of the OpenAPI document: 5.14.0
--  Contact: blah+oapicf@cliffano.com
--
--  NOTE: This package is auto generated by OpenAPI-Generator 7.9.0.
--  https://openapi-generator.tech
--  Do not edit the class manually.

package body .Models is
   pragma Style_Checks ("-bmrIu");

   pragma Warnings (Off, "*use clause for package*");

   use Swagger.Streams;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Account_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Account_Type.Is_Null then
         Into.Write_Entity ("account_type", Value.Account_Type);
      end if;
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Profile_Image.Is_Null then
         Into.Write_Entity ("profile_image", Value.Profile_Image);
      end if;
      if not Value.Website_Url.Is_Null then
         Into.Write_Entity ("website_url", Value.Website_Url);
      end if;
      if not Value.Username.Is_Null then
         Into.Write_Entity ("username", Value.Username);
      end if;
      if not Value.About.Is_Null then
         Into.Write_Entity ("about", Value.About);
      end if;
      Into.Write_Entity ("business_name", Value.Business_Name);
      Into.Write_Entity ("board_count", Value.Board_Count);
      Into.Write_Entity ("pin_count", Value.Pin_Count);
      Into.Write_Entity ("follower_count", Value.Follower_Count);
      Into.Write_Entity ("following_count", Value.Following_Count);
      Into.Write_Entity ("monthly_views", Value.Monthly_Views);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Account_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Account_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "account_type", Value.Account_Type);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "profile_image", Value.Profile_Image);
      Swagger.Streams.Deserialize (Object, "website_url", Value.Website_Url);
      Swagger.Streams.Deserialize (Object, "username", Value.Username);
      Swagger.Streams.Deserialize (Object, "about", Value.About);
      Swagger.Streams.Deserialize (Object, "business_name", Value.Business_Name);
      Swagger.Streams.Deserialize (Object, "board_count", Value.Board_Count);
      Swagger.Streams.Deserialize (Object, "pin_count", Value.Pin_Count);
      Swagger.Streams.Deserialize (Object, "follower_count", Value.Follower_Count);
      Swagger.Streams.Deserialize (Object, "following_count", Value.Following_Count);
      Swagger.Streams.Deserialize (Object, "monthly_views", Value.Monthly_Views);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Account_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Account_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ActionType_Type (Value : in String) return .Models.ActionType_Type is
   begin
      if Value = "CLICKTHROUGH" then
         return CLICKTHROUGH;
      end if;
      if Value = "IMPRESSION" then
         return IMPRESSION;
      end if;
      if Value = "VIDEO_V_50_MRC" then
         return VIDEO_V_50_MRC;
      end if;
      raise Constraint_Error;
   end To_ActionType_Type;

   function To_String (Value : in .Models.ActionType_Type) return String is
   begin
      case Value is
         when CLICKTHROUGH =>
            return "CLICKTHROUGH";

         when IMPRESSION =>
            return "IMPRESSION";

         when VIDEO_V_50_MRC =>
            return "VIDEO_V_50_MRC";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ActionType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ActionType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ActionType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ActionType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ActionType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ActionType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdAccountAnalyticsResponseInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("AD_ACCOUNT_ID", Value.AD_ACCOUNT_ID);
      if not Value.DATE.Is_Null then
         Into.Write_Entity ("DATE", Value.DATE);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdAccountAnalyticsResponseInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdAccountAnalyticsResponseInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "AD_ACCOUNT_ID", Value.AD_ACCOUNT_ID);
      Swagger.Streams.Deserialize (Object, "DATE", Value.DATE);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdAccountAnalyticsResponseInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdAccountAnalyticsResponseInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdAccountCreateSubscriptionRequestPartnerMetadata_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Subscriber_Key.Is_Null then
         Into.Write_Entity ("subscriber_key", Value.Subscriber_Key);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdAccountCreateSubscriptionRequestPartnerMetadata_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdAccountCreateSubscriptionRequestPartnerMetadata_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "subscriber_key", Value.Subscriber_Key);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdAccountCreateSubscriptionRequestPartnerMetadata_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdAccountCreateSubscriptionRequestPartnerMetadata_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdAccountCreateSubscriptionResponse_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Into.Write_Entity ("cryptographic_key", Value.Cryptographic_Key);
      Into.Write_Entity ("cryptographic_algorithm", Value.Cryptographic_Algorithm);
      if not Value.Created_Time.Is_Null then
         Into.Write_Entity ("created_time", Value.Created_Time);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdAccountCreateSubscriptionResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdAccountCreateSubscriptionResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "cryptographic_key", Value.Cryptographic_Key);
      Swagger.Streams.Deserialize (Object, "cryptographic_algorithm", Value.Cryptographic_Algorithm);
      Swagger.Streams.Deserialize (Object, "created_time", Value.Created_Time);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdAccountCreateSubscriptionResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdAccountCreateSubscriptionResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdAccountGetSubscriptionResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("lead_form_id", Value.Lead_Form_Id);
      if not Value.Webhook_Url.Is_Null then
         Into.Write_Entity ("webhook_url", Value.Webhook_Url);
      end if;
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.User_Account_Id.Is_Null then
         Into.Write_Entity ("user_account_id", Value.User_Account_Id);
      end if;
      if not Value.Ad_Account_Id.Is_Null then
         Into.Write_Entity ("ad_account_id", Value.Ad_Account_Id);
      end if;
      if not Value.Api_Version.Is_Null then
         Into.Write_Entity ("api_version", Value.Api_Version);
      end if;
      Into.Write_Entity ("cryptographic_key", Value.Cryptographic_Key);
      Into.Write_Entity ("cryptographic_algorithm", Value.Cryptographic_Algorithm);
      if not Value.Created_Time.Is_Null then
         Into.Write_Entity ("created_time", Value.Created_Time);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdAccountGetSubscriptionResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdAccountGetSubscriptionResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "lead_form_id", Value.Lead_Form_Id);
      Swagger.Streams.Deserialize (Object, "webhook_url", Value.Webhook_Url);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "user_account_id", Value.User_Account_Id);
      Swagger.Streams.Deserialize (Object, "ad_account_id", Value.Ad_Account_Id);
      Swagger.Streams.Deserialize (Object, "api_version", Value.Api_Version);
      Swagger.Streams.Deserialize (Object, "cryptographic_key", Value.Cryptographic_Key);
      Swagger.Streams.Deserialize (Object, "cryptographic_algorithm", Value.Cryptographic_Algorithm);
      Swagger.Streams.Deserialize (Object, "created_time", Value.Created_Time);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdAccountGetSubscriptionResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdAccountGetSubscriptionResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdAccountOwner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Username.Is_Null then
         Into.Write_Entity ("username", Value.Username);
      end if;
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdAccountOwner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdAccountOwner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "username", Value.Username);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdAccountOwner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdAccountOwner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdAccountsCountryResponseData_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("code", Value.Code);
      if not Value.Currency.Is_Null then
         Into.Write_Entity ("currency", Value.Currency);
      end if;
      Serialize (Into, "index", Value.Index);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdAccountsCountryResponseData_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdAccountsCountryResponseData_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "currency", Value.Currency);
      Swagger.Streams.Deserialize (Object, "index", Value.Index);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdAccountsCountryResponseData_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdAccountsCountryResponseData_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_AdCountry_Type (Value : in String) return .Models.AdCountry_Type is
   begin
      if Value = "AD" then
         return AD;
      end if;
      if Value = "AE" then
         return AE;
      end if;
      if Value = "AF" then
         return AF;
      end if;
      if Value = "AG" then
         return AG;
      end if;
      if Value = "AI" then
         return AI;
      end if;
      if Value = "AL" then
         return AL;
      end if;
      if Value = "AM" then
         return AM;
      end if;
      if Value = "AO" then
         return AO;
      end if;
      if Value = "AQ" then
         return AQ;
      end if;
      if Value = "AR" then
         return AR;
      end if;
      if Value = "AS" then
         return AS;
      end if;
      if Value = "AT" then
         return AT;
      end if;
      if Value = "AU" then
         return AU;
      end if;
      if Value = "AW" then
         return AW;
      end if;
      if Value = "AX" then
         return AX;
      end if;
      if Value = "AZ" then
         return AZ;
      end if;
      if Value = "BA" then
         return BA;
      end if;
      if Value = "BB" then
         return BB;
      end if;
      if Value = "BD" then
         return BD;
      end if;
      if Value = "BE" then
         return BE;
      end if;
      if Value = "BF" then
         return BF;
      end if;
      if Value = "BG" then
         return BG;
      end if;
      if Value = "BH" then
         return BH;
      end if;
      if Value = "BI" then
         return BI;
      end if;
      if Value = "BJ" then
         return BJ;
      end if;
      if Value = "BL" then
         return BL;
      end if;
      if Value = "BM" then
         return BM;
      end if;
      if Value = "BN" then
         return BN;
      end if;
      if Value = "BO" then
         return BO;
      end if;
      if Value = "BQ" then
         return BQ;
      end if;
      if Value = "BR" then
         return BR;
      end if;
      if Value = "BS" then
         return BS;
      end if;
      if Value = "BT" then
         return BT;
      end if;
      if Value = "BV" then
         return BV;
      end if;
      if Value = "BW" then
         return BW;
      end if;
      if Value = "BY" then
         return BY;
      end if;
      if Value = "BZ" then
         return BZ;
      end if;
      if Value = "CA" then
         return CA;
      end if;
      if Value = "CC" then
         return CC;
      end if;
      if Value = "CD" then
         return CD;
      end if;
      if Value = "CF" then
         return CF;
      end if;
      if Value = "CG" then
         return CG;
      end if;
      if Value = "CH" then
         return CH;
      end if;
      if Value = "CI" then
         return CI;
      end if;
      if Value = "CK" then
         return CK;
      end if;
      if Value = "CL" then
         return CL;
      end if;
      if Value = "CM" then
         return CM;
      end if;
      if Value = "CN" then
         return CN;
      end if;
      if Value = "CO" then
         return CO;
      end if;
      if Value = "CR" then
         return CR;
      end if;
      if Value = "CU" then
         return CU;
      end if;
      if Value = "CV" then
         return CV;
      end if;
      if Value = "CW" then
         return CW;
      end if;
      if Value = "CX" then
         return CX;
      end if;
      if Value = "CY" then
         return CY;
      end if;
      if Value = "CZ" then
         return CZ;
      end if;
      if Value = "DE" then
         return DE;
      end if;
      if Value = "DJ" then
         return DJ;
      end if;
      if Value = "DK" then
         return DK;
      end if;
      if Value = "DM" then
         return DM;
      end if;
      if Value = "DO" then
         return DO;
      end if;
      if Value = "DZ" then
         return DZ;
      end if;
      if Value = "EC" then
         return EC;
      end if;
      if Value = "EE" then
         return EE;
      end if;
      if Value = "EG" then
         return EG;
      end if;
      if Value = "EH" then
         return EH;
      end if;
      if Value = "ER" then
         return ER;
      end if;
      if Value = "ES" then
         return ES;
      end if;
      if Value = "ET" then
         return ET;
      end if;
      if Value = "FI" then
         return FI;
      end if;
      if Value = "FJ" then
         return FJ;
      end if;
      if Value = "FK" then
         return FK;
      end if;
      if Value = "FM" then
         return FM;
      end if;
      if Value = "FO" then
         return FO;
      end if;
      if Value = "FR" then
         return FR;
      end if;
      if Value = "GA" then
         return GA;
      end if;
      if Value = "GB" then
         return GB;
      end if;
      if Value = "GD" then
         return GD;
      end if;
      if Value = "GE" then
         return GE;
      end if;
      if Value = "GF" then
         return GF;
      end if;
      if Value = "GG" then
         return GG;
      end if;
      if Value = "GH" then
         return GH;
      end if;
      if Value = "GI" then
         return GI;
      end if;
      if Value = "GL" then
         return GL;
      end if;
      if Value = "GM" then
         return GM;
      end if;
      if Value = "GN" then
         return GN;
      end if;
      if Value = "GP" then
         return GP;
      end if;
      if Value = "GQ" then
         return GQ;
      end if;
      if Value = "GR" then
         return GR;
      end if;
      if Value = "GS" then
         return GS;
      end if;
      if Value = "GT" then
         return GT;
      end if;
      if Value = "GU" then
         return GU;
      end if;
      if Value = "GW" then
         return GW;
      end if;
      if Value = "GY" then
         return GY;
      end if;
      if Value = "HK" then
         return HK;
      end if;
      if Value = "HM" then
         return HM;
      end if;
      if Value = "HN" then
         return HN;
      end if;
      if Value = "HR" then
         return HR;
      end if;
      if Value = "HT" then
         return HT;
      end if;
      if Value = "HU" then
         return HU;
      end if;
      if Value = "ID" then
         return ID;
      end if;
      if Value = "IE" then
         return IE;
      end if;
      if Value = "IL" then
         return IL;
      end if;
      if Value = "IM" then
         return IM;
      end if;
      if Value = "IN" then
         return IN;
      end if;
      if Value = "IO" then
         return IO;
      end if;
      if Value = "IQ" then
         return IQ;
      end if;
      if Value = "IR" then
         return IR;
      end if;
      if Value = "IS" then
         return IS;
      end if;
      if Value = "IT" then
         return IT;
      end if;
      if Value = "JE" then
         return JE;
      end if;
      if Value = "JM" then
         return JM;
      end if;
      if Value = "JO" then
         return JO;
      end if;
      if Value = "JP" then
         return JP;
      end if;
      if Value = "KE" then
         return KE;
      end if;
      if Value = "KG" then
         return KG;
      end if;
      if Value = "KH" then
         return KH;
      end if;
      if Value = "KI" then
         return KI;
      end if;
      if Value = "KM" then
         return KM;
      end if;
      if Value = "KN" then
         return KN;
      end if;
      if Value = "KR" then
         return KR;
      end if;
      if Value = "KW" then
         return KW;
      end if;
      if Value = "KY" then
         return KY;
      end if;
      if Value = "KZ" then
         return KZ;
      end if;
      if Value = "LA" then
         return LA;
      end if;
      if Value = "LB" then
         return LB;
      end if;
      if Value = "LC" then
         return LC;
      end if;
      if Value = "LI" then
         return LI;
      end if;
      if Value = "LK" then
         return LK;
      end if;
      if Value = "LR" then
         return LR;
      end if;
      if Value = "LS" then
         return LS;
      end if;
      if Value = "LT" then
         return LT;
      end if;
      if Value = "LU" then
         return LU;
      end if;
      if Value = "LV" then
         return LV;
      end if;
      if Value = "LY" then
         return LY;
      end if;
      if Value = "MA" then
         return MA;
      end if;
      if Value = "MC" then
         return MC;
      end if;
      if Value = "MD" then
         return MD;
      end if;
      if Value = "ME" then
         return ME;
      end if;
      if Value = "MF" then
         return MF;
      end if;
      if Value = "MG" then
         return MG;
      end if;
      if Value = "MH" then
         return MH;
      end if;
      if Value = "MK" then
         return MK;
      end if;
      if Value = "ML" then
         return ML;
      end if;
      if Value = "MM" then
         return MM;
      end if;
      if Value = "MN" then
         return MN;
      end if;
      if Value = "MO" then
         return MO;
      end if;
      if Value = "MP" then
         return MP;
      end if;
      if Value = "MQ" then
         return MQ;
      end if;
      if Value = "MR" then
         return MR;
      end if;
      if Value = "MS" then
         return MS;
      end if;
      if Value = "MT" then
         return MT;
      end if;
      if Value = "MU" then
         return MU;
      end if;
      if Value = "MV" then
         return MV;
      end if;
      if Value = "MW" then
         return MW;
      end if;
      if Value = "MX" then
         return MX;
      end if;
      if Value = "MY" then
         return MY;
      end if;
      if Value = "MZ" then
         return MZ;
      end if;
      if Value = "NA" then
         return NA;
      end if;
      if Value = "NC" then
         return NC;
      end if;
      if Value = "NE" then
         return NE;
      end if;
      if Value = "NF" then
         return NF;
      end if;
      if Value = "NG" then
         return NG;
      end if;
      if Value = "NI" then
         return NI;
      end if;
      if Value = "NL" then
         return NL;
      end if;
      if Value = "NO" then
         return NO;
      end if;
      if Value = "NP" then
         return NP;
      end if;
      if Value = "NR" then
         return NR;
      end if;
      if Value = "NU" then
         return NU;
      end if;
      if Value = "NZ" then
         return NZ;
      end if;
      if Value = "OM" then
         return OM;
      end if;
      if Value = "PA" then
         return PA;
      end if;
      if Value = "PE" then
         return PE;
      end if;
      if Value = "PF" then
         return PF;
      end if;
      if Value = "PG" then
         return PG;
      end if;
      if Value = "PH" then
         return PH;
      end if;
      if Value = "PK" then
         return PK;
      end if;
      if Value = "PL" then
         return PL;
      end if;
      if Value = "PM" then
         return PM;
      end if;
      if Value = "PN" then
         return PN;
      end if;
      if Value = "PR" then
         return PR;
      end if;
      if Value = "PS" then
         return PS;
      end if;
      if Value = "PT" then
         return PT;
      end if;
      if Value = "PW" then
         return PW;
      end if;
      if Value = "PY" then
         return PY;
      end if;
      if Value = "QA" then
         return QA;
      end if;
      if Value = "RE" then
         return RE;
      end if;
      if Value = "RO" then
         return RO;
      end if;
      if Value = "RS" then
         return RS;
      end if;
      if Value = "RU" then
         return RU;
      end if;
      if Value = "RW" then
         return RW;
      end if;
      if Value = "SA" then
         return SA;
      end if;
      if Value = "SB" then
         return SB;
      end if;
      if Value = "SC" then
         return SC;
      end if;
      if Value = "SD" then
         return SD;
      end if;
      if Value = "SE" then
         return SE;
      end if;
      if Value = "SG" then
         return SG;
      end if;
      if Value = "SH" then
         return SH;
      end if;
      if Value = "SI" then
         return SI;
      end if;
      if Value = "SJ" then
         return SJ;
      end if;
      if Value = "SK" then
         return SK;
      end if;
      if Value = "SL" then
         return SL;
      end if;
      if Value = "SM" then
         return SM;
      end if;
      if Value = "SN" then
         return SN;
      end if;
      if Value = "SO" then
         return SO;
      end if;
      if Value = "SR" then
         return SR;
      end if;
      if Value = "SS" then
         return SS;
      end if;
      if Value = "ST" then
         return ST;
      end if;
      if Value = "SV" then
         return SV;
      end if;
      if Value = "SX" then
         return SX;
      end if;
      if Value = "SY" then
         return SY;
      end if;
      if Value = "SZ" then
         return SZ;
      end if;
      if Value = "TC" then
         return TC;
      end if;
      if Value = "TD" then
         return TD;
      end if;
      if Value = "TF" then
         return TF;
      end if;
      if Value = "TG" then
         return TG;
      end if;
      if Value = "TH" then
         return TH;
      end if;
      if Value = "TJ" then
         return TJ;
      end if;
      if Value = "TK" then
         return TK;
      end if;
      if Value = "TL" then
         return TL;
      end if;
      if Value = "TM" then
         return TM;
      end if;
      if Value = "TN" then
         return TN;
      end if;
      if Value = "TO" then
         return TO;
      end if;
      if Value = "TR" then
         return TR;
      end if;
      if Value = "TT" then
         return TT;
      end if;
      if Value = "TV" then
         return TV;
      end if;
      if Value = "TW" then
         return TW;
      end if;
      if Value = "TZ" then
         return TZ;
      end if;
      if Value = "UA" then
         return UA;
      end if;
      if Value = "UG" then
         return UG;
      end if;
      if Value = "UM" then
         return UM;
      end if;
      if Value = "US" then
         return US;
      end if;
      if Value = "UY" then
         return UY;
      end if;
      if Value = "UZ" then
         return UZ;
      end if;
      if Value = "VA" then
         return VA;
      end if;
      if Value = "VC" then
         return VC;
      end if;
      if Value = "VE" then
         return VE;
      end if;
      if Value = "VG" then
         return VG;
      end if;
      if Value = "VI" then
         return VI;
      end if;
      if Value = "VN" then
         return VN;
      end if;
      if Value = "VU" then
         return VU;
      end if;
      if Value = "WF" then
         return WF;
      end if;
      if Value = "WS" then
         return WS;
      end if;
      if Value = "YE" then
         return YE;
      end if;
      if Value = "YT" then
         return YT;
      end if;
      if Value = "ZA" then
         return ZA;
      end if;
      if Value = "ZM" then
         return ZM;
      end if;
      if Value = "ZW" then
         return ZW;
      end if;
      raise Constraint_Error;
   end To_AdCountry_Type;

   function To_String (Value : in .Models.AdCountry_Type) return String is
   begin
      case Value is
         when AD =>
            return "AD";

         when AE =>
            return "AE";

         when AF =>
            return "AF";

         when AG =>
            return "AG";

         when AI =>
            return "AI";

         when AL =>
            return "AL";

         when AM =>
            return "AM";

         when AO =>
            return "AO";

         when AQ =>
            return "AQ";

         when AR =>
            return "AR";

         when AS =>
            return "AS";

         when AT =>
            return "AT";

         when AU =>
            return "AU";

         when AW =>
            return "AW";

         when AX =>
            return "AX";

         when AZ =>
            return "AZ";

         when BA =>
            return "BA";

         when BB =>
            return "BB";

         when BD =>
            return "BD";

         when BE =>
            return "BE";

         when BF =>
            return "BF";

         when BG =>
            return "BG";

         when BH =>
            return "BH";

         when BI =>
            return "BI";

         when BJ =>
            return "BJ";

         when BL =>
            return "BL";

         when BM =>
            return "BM";

         when BN =>
            return "BN";

         when BO =>
            return "BO";

         when BQ =>
            return "BQ";

         when BR =>
            return "BR";

         when BS =>
            return "BS";

         when BT =>
            return "BT";

         when BV =>
            return "BV";

         when BW =>
            return "BW";

         when BY =>
            return "BY";

         when BZ =>
            return "BZ";

         when CA =>
            return "CA";

         when CC =>
            return "CC";

         when CD =>
            return "CD";

         when CF =>
            return "CF";

         when CG =>
            return "CG";

         when CH =>
            return "CH";

         when CI =>
            return "CI";

         when CK =>
            return "CK";

         when CL =>
            return "CL";

         when CM =>
            return "CM";

         when CN =>
            return "CN";

         when CO =>
            return "CO";

         when CR =>
            return "CR";

         when CU =>
            return "CU";

         when CV =>
            return "CV";

         when CW =>
            return "CW";

         when CX =>
            return "CX";

         when CY =>
            return "CY";

         when CZ =>
            return "CZ";

         when DE =>
            return "DE";

         when DJ =>
            return "DJ";

         when DK =>
            return "DK";

         when DM =>
            return "DM";

         when DO =>
            return "DO";

         when DZ =>
            return "DZ";

         when EC =>
            return "EC";

         when EE =>
            return "EE";

         when EG =>
            return "EG";

         when EH =>
            return "EH";

         when ER =>
            return "ER";

         when ES =>
            return "ES";

         when ET =>
            return "ET";

         when FI =>
            return "FI";

         when FJ =>
            return "FJ";

         when FK =>
            return "FK";

         when FM =>
            return "FM";

         when FO =>
            return "FO";

         when FR =>
            return "FR";

         when GA =>
            return "GA";

         when GB =>
            return "GB";

         when GD =>
            return "GD";

         when GE =>
            return "GE";

         when GF =>
            return "GF";

         when GG =>
            return "GG";

         when GH =>
            return "GH";

         when GI =>
            return "GI";

         when GL =>
            return "GL";

         when GM =>
            return "GM";

         when GN =>
            return "GN";

         when GP =>
            return "GP";

         when GQ =>
            return "GQ";

         when GR =>
            return "GR";

         when GS =>
            return "GS";

         when GT =>
            return "GT";

         when GU =>
            return "GU";

         when GW =>
            return "GW";

         when GY =>
            return "GY";

         when HK =>
            return "HK";

         when HM =>
            return "HM";

         when HN =>
            return "HN";

         when HR =>
            return "HR";

         when HT =>
            return "HT";

         when HU =>
            return "HU";

         when ID =>
            return "ID";

         when IE =>
            return "IE";

         when IL =>
            return "IL";

         when IM =>
            return "IM";

         when IN =>
            return "IN";

         when IO =>
            return "IO";

         when IQ =>
            return "IQ";

         when IR =>
            return "IR";

         when IS =>
            return "IS";

         when IT =>
            return "IT";

         when JE =>
            return "JE";

         when JM =>
            return "JM";

         when JO =>
            return "JO";

         when JP =>
            return "JP";

         when KE =>
            return "KE";

         when KG =>
            return "KG";

         when KH =>
            return "KH";

         when KI =>
            return "KI";

         when KM =>
            return "KM";

         when KN =>
            return "KN";

         when KR =>
            return "KR";

         when KW =>
            return "KW";

         when KY =>
            return "KY";

         when KZ =>
            return "KZ";

         when LA =>
            return "LA";

         when LB =>
            return "LB";

         when LC =>
            return "LC";

         when LI =>
            return "LI";

         when LK =>
            return "LK";

         when LR =>
            return "LR";

         when LS =>
            return "LS";

         when LT =>
            return "LT";

         when LU =>
            return "LU";

         when LV =>
            return "LV";

         when LY =>
            return "LY";

         when MA =>
            return "MA";

         when MC =>
            return "MC";

         when MD =>
            return "MD";

         when ME =>
            return "ME";

         when MF =>
            return "MF";

         when MG =>
            return "MG";

         when MH =>
            return "MH";

         when MK =>
            return "MK";

         when ML =>
            return "ML";

         when MM =>
            return "MM";

         when MN =>
            return "MN";

         when MO =>
            return "MO";

         when MP =>
            return "MP";

         when MQ =>
            return "MQ";

         when MR =>
            return "MR";

         when MS =>
            return "MS";

         when MT =>
            return "MT";

         when MU =>
            return "MU";

         when MV =>
            return "MV";

         when MW =>
            return "MW";

         when MX =>
            return "MX";

         when MY =>
            return "MY";

         when MZ =>
            return "MZ";

         when NA =>
            return "NA";

         when NC =>
            return "NC";

         when NE =>
            return "NE";

         when NF =>
            return "NF";

         when NG =>
            return "NG";

         when NI =>
            return "NI";

         when NL =>
            return "NL";

         when NO =>
            return "NO";

         when NP =>
            return "NP";

         when NR =>
            return "NR";

         when NU =>
            return "NU";

         when NZ =>
            return "NZ";

         when OM =>
            return "OM";

         when PA =>
            return "PA";

         when PE =>
            return "PE";

         when PF =>
            return "PF";

         when PG =>
            return "PG";

         when PH =>
            return "PH";

         when PK =>
            return "PK";

         when PL =>
            return "PL";

         when PM =>
            return "PM";

         when PN =>
            return "PN";

         when PR =>
            return "PR";

         when PS =>
            return "PS";

         when PT =>
            return "PT";

         when PW =>
            return "PW";

         when PY =>
            return "PY";

         when QA =>
            return "QA";

         when RE =>
            return "RE";

         when RO =>
            return "RO";

         when RS =>
            return "RS";

         when RU =>
            return "RU";

         when RW =>
            return "RW";

         when SA =>
            return "SA";

         when SB =>
            return "SB";

         when SC =>
            return "SC";

         when SD =>
            return "SD";

         when SE =>
            return "SE";

         when SG =>
            return "SG";

         when SH =>
            return "SH";

         when SI =>
            return "SI";

         when SJ =>
            return "SJ";

         when SK =>
            return "SK";

         when SL =>
            return "SL";

         when SM =>
            return "SM";

         when SN =>
            return "SN";

         when SO =>
            return "SO";

         when SR =>
            return "SR";

         when SS =>
            return "SS";

         when ST =>
            return "ST";

         when SV =>
            return "SV";

         when SX =>
            return "SX";

         when SY =>
            return "SY";

         when SZ =>
            return "SZ";

         when TC =>
            return "TC";

         when TD =>
            return "TD";

         when TF =>
            return "TF";

         when TG =>
            return "TG";

         when TH =>
            return "TH";

         when TJ =>
            return "TJ";

         when TK =>
            return "TK";

         when TL =>
            return "TL";

         when TM =>
            return "TM";

         when TN =>
            return "TN";

         when TO =>
            return "TO";

         when TR =>
            return "TR";

         when TT =>
            return "TT";

         when TV =>
            return "TV";

         when TW =>
            return "TW";

         when TZ =>
            return "TZ";

         when UA =>
            return "UA";

         when UG =>
            return "UG";

         when UM =>
            return "UM";

         when US =>
            return "US";

         when UY =>
            return "UY";

         when UZ =>
            return "UZ";

         when VA =>
            return "VA";

         when VC =>
            return "VC";

         when VE =>
            return "VE";

         when VG =>
            return "VG";

         when VI =>
            return "VI";

         when VN =>
            return "VN";

         when VU =>
            return "VU";

         when WF =>
            return "WF";

         when WS =>
            return "WS";

         when YE =>
            return "YE";

         when YT =>
            return "YT";

         when ZA =>
            return "ZA";

         when ZM =>
            return "ZM";

         when ZW =>
            return "ZW";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdCountry_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdCountry_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdCountry_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_AdCountry_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdCountry_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdCountry_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdGroupAudienceSizingResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "audience_size_lower_bound", Value.Audience_Size_Lower_Bound);
      Serialize (Into, "audience_size_upper_bound", Value.Audience_Size_Upper_Bound);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdGroupAudienceSizingResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdGroupAudienceSizingResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "audience_size_lower_bound", Value.Audience_Size_Lower_Bound);
      Swagger.Streams.Deserialize (Object, "audience_size_upper_bound", Value.Audience_Size_Upper_Bound);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdGroupAudienceSizingResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdGroupAudienceSizingResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_AdGroupSummaryStatus_Type (Value : in String) return .Models.AdGroupSummaryStatus_Type is
   begin
      if Value = "RUNNING" then
         return RUNNING;
      end if;
      if Value = "PAUSED" then
         return PAUSED;
      end if;
      if Value = "NOT_STARTED" then
         return NOT_STARTED;
      end if;
      if Value = "COMPLETED" then
         return COMPLETED;
      end if;
      if Value = "ADVERTISER_DISABLED" then
         return ADVERTISER_DISABLED;
      end if;
      if Value = "ARCHIVED" then
         return ARCHIVED;
      end if;
      if Value = "DRAFT" then
         return DRAFT;
      end if;
      if Value = "DELETED_DRAFT" then
         return DELETED_DRAFT;
      end if;
      raise Constraint_Error;
   end To_AdGroupSummaryStatus_Type;

   function To_String (Value : in .Models.AdGroupSummaryStatus_Type) return String is
   begin
      case Value is
         when RUNNING =>
            return "RUNNING";

         when PAUSED =>
            return "PAUSED";

         when NOT_STARTED =>
            return "NOT_STARTED";

         when COMPLETED =>
            return "COMPLETED";

         when ADVERTISER_DISABLED =>
            return "ADVERTISER_DISABLED";

         when ARCHIVED =>
            return "ARCHIVED";

         when DRAFT =>
            return "DRAFT";

         when DELETED_DRAFT =>
            return "DELETED_DRAFT";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdGroupSummaryStatus_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdGroupSummaryStatus_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdGroupSummaryStatus_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_AdGroupSummaryStatus_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdGroupSummaryStatus_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdGroupSummaryStatus_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdGroupsAnalyticsResponseInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("AD_GROUP_ID", Value.AD_GROUP_ID);
      if not Value.DATE.Is_Null then
         Into.Write_Entity ("DATE", Value.DATE);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdGroupsAnalyticsResponseInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdGroupsAnalyticsResponseInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "AD_GROUP_ID", Value.AD_GROUP_ID);
      Swagger.Streams.Deserialize (Object, "DATE", Value.DATE);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdGroupsAnalyticsResponseInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdGroupsAnalyticsResponseInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdPinId_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Pin_Id.Is_Null then
         Into.Write_Entity ("pin_id", Value.Pin_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdPinId_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdPinId_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "pin_id", Value.Pin_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdPinId_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdPinId_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdPreviewCreateFromImage_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("image_url", Value.Image_Url);
      Into.Write_Entity ("title", Value.Title);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdPreviewCreateFromImage_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdPreviewCreateFromImage_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "image_url", Value.Image_Url);
      Swagger.Streams.Deserialize (Object, "title", Value.Title);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdPreviewCreateFromImage_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdPreviewCreateFromImage_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdPreviewCreateFromPin_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("pin_id", Value.Pin_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdPreviewCreateFromPin_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdPreviewCreateFromPin_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "pin_id", Value.Pin_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdPreviewCreateFromPin_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdPreviewCreateFromPin_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdPreviewRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("image_url", Value.Image_Url);
      Into.Write_Entity ("title", Value.Title);
      Into.Write_Entity ("pin_id", Value.Pin_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdPreviewRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdPreviewRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "image_url", Value.Image_Url);
      Swagger.Streams.Deserialize (Object, "title", Value.Title);
      Swagger.Streams.Deserialize (Object, "pin_id", Value.Pin_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdPreviewRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdPreviewRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdPreviewURLResponse_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Url.Is_Null then
         Into.Write_Entity ("url", Value.Url);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdPreviewURLResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdPreviewURLResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdPreviewURLResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdPreviewURLResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_AdsAnalyticsAdTargetingType_Type (Value : in String) return .Models.AdsAnalyticsAdTargetingType_Type is
   begin
      if Value = "KEYWORD" then
         return KEYWORD;
      end if;
      if Value = "APPTYPE" then
         return APPTYPE;
      end if;
      if Value = "GENDER" then
         return GENDER;
      end if;
      if Value = "LOCATION" then
         return LOCATION;
      end if;
      if Value = "PLACEMENT" then
         return PLACEMENT;
      end if;
      if Value = "COUNTRY" then
         return COUNTRY;
      end if;
      if Value = "TARGETED_INTEREST" then
         return TARGETED_INTEREST;
      end if;
      if Value = "PINNER_INTEREST" then
         return PINNER_INTEREST;
      end if;
      if Value = "AUDIENCE_INCLUDE" then
         return AUDIENCE_INCLUDE;
      end if;
      if Value = "GEO" then
         return GEO;
      end if;
      if Value = "AGE_BUCKET" then
         return AGE_BUCKET;
      end if;
      if Value = "REGION" then
         return REGION;
      end if;
      if Value = "QUIZ_RESULT" then
         return QUIZ_RESULT;
      end if;
      if Value = "AGE_BUCKET_AND_GENDER" then
         return AGE_BUCKET_AND_GENDER;
      end if;
      raise Constraint_Error;
   end To_AdsAnalyticsAdTargetingType_Type;

   function To_String (Value : in .Models.AdsAnalyticsAdTargetingType_Type) return String is
   begin
      case Value is
         when KEYWORD =>
            return "KEYWORD";

         when APPTYPE =>
            return "APPTYPE";

         when GENDER =>
            return "GENDER";

         when LOCATION =>
            return "LOCATION";

         when PLACEMENT =>
            return "PLACEMENT";

         when COUNTRY =>
            return "COUNTRY";

         when TARGETED_INTEREST =>
            return "TARGETED_INTEREST";

         when PINNER_INTEREST =>
            return "PINNER_INTEREST";

         when AUDIENCE_INCLUDE =>
            return "AUDIENCE_INCLUDE";

         when GEO =>
            return "GEO";

         when AGE_BUCKET =>
            return "AGE_BUCKET";

         when REGION =>
            return "REGION";

         when QUIZ_RESULT =>
            return "QUIZ_RESULT";

         when AGE_BUCKET_AND_GENDER =>
            return "AGE_BUCKET_AND_GENDER";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdsAnalyticsAdTargetingType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdsAnalyticsAdTargetingType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdsAnalyticsAdTargetingType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_AdsAnalyticsAdTargetingType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdsAnalyticsAdTargetingType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdsAnalyticsAdTargetingType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_AdsAnalyticsCampaignTargetingType_Type (Value : in String) return .Models.AdsAnalyticsCampaignTargetingType_Type is
   begin
      if Value = "KEYWORD" then
         return KEYWORD;
      end if;
      if Value = "APPTYPE" then
         return APPTYPE;
      end if;
      if Value = "GENDER" then
         return GENDER;
      end if;
      if Value = "LOCATION" then
         return LOCATION;
      end if;
      if Value = "PLACEMENT" then
         return PLACEMENT;
      end if;
      if Value = "COUNTRY" then
         return COUNTRY;
      end if;
      if Value = "TARGETED_INTEREST" then
         return TARGETED_INTEREST;
      end if;
      if Value = "PINNER_INTEREST" then
         return PINNER_INTEREST;
      end if;
      if Value = "AUDIENCE_INCLUDE" then
         return AUDIENCE_INCLUDE;
      end if;
      if Value = "GEO" then
         return GEO;
      end if;
      if Value = "AGE_BUCKET" then
         return AGE_BUCKET;
      end if;
      if Value = "REGION" then
         return REGION;
      end if;
      if Value = "CREATIVE_TYPE" then
         return CREATIVE_TYPE;
      end if;
      if Value = "AGE_BUCKET_AND_GENDER" then
         return AGE_BUCKET_AND_GENDER;
      end if;
      raise Constraint_Error;
   end To_AdsAnalyticsCampaignTargetingType_Type;

   function To_String (Value : in .Models.AdsAnalyticsCampaignTargetingType_Type) return String is
   begin
      case Value is
         when KEYWORD =>
            return "KEYWORD";

         when APPTYPE =>
            return "APPTYPE";

         when GENDER =>
            return "GENDER";

         when LOCATION =>
            return "LOCATION";

         when PLACEMENT =>
            return "PLACEMENT";

         when COUNTRY =>
            return "COUNTRY";

         when TARGETED_INTEREST =>
            return "TARGETED_INTEREST";

         when PINNER_INTEREST =>
            return "PINNER_INTEREST";

         when AUDIENCE_INCLUDE =>
            return "AUDIENCE_INCLUDE";

         when GEO =>
            return "GEO";

         when AGE_BUCKET =>
            return "AGE_BUCKET";

         when REGION =>
            return "REGION";

         when CREATIVE_TYPE =>
            return "CREATIVE_TYPE";

         when AGE_BUCKET_AND_GENDER =>
            return "AGE_BUCKET_AND_GENDER";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdsAnalyticsCampaignTargetingType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdsAnalyticsCampaignTargetingType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdsAnalyticsCampaignTargetingType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_AdsAnalyticsCampaignTargetingType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdsAnalyticsCampaignTargetingType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdsAnalyticsCampaignTargetingType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_AdsAnalyticsFilterColumn_Type (Value : in String) return .Models.AdsAnalyticsFilterColumn_Type is
   begin
      if Value = "SPEND_IN_DOLLAR" then
         return SPEND_IN_DOLLAR;
      end if;
      if Value = "TOTAL_IMPRESSION" then
         return TOTAL_IMPRESSION;
      end if;
      raise Constraint_Error;
   end To_AdsAnalyticsFilterColumn_Type;

   function To_String (Value : in .Models.AdsAnalyticsFilterColumn_Type) return String is
   begin
      case Value is
         when SPEND_IN_DOLLAR =>
            return "SPEND_IN_DOLLAR";

         when TOTAL_IMPRESSION =>
            return "TOTAL_IMPRESSION";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdsAnalyticsFilterColumn_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdsAnalyticsFilterColumn_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdsAnalyticsFilterColumn_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_AdsAnalyticsFilterColumn_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdsAnalyticsFilterColumn_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdsAnalyticsFilterColumn_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_AdsAnalyticsFilterOperator_Type (Value : in String) return .Models.AdsAnalyticsFilterOperator_Type is
   begin
      if Value = "LESS_THAN" then
         return LESS_THAN;
      end if;
      if Value = "GREATER_THAN" then
         return GREATER_THAN;
      end if;
      raise Constraint_Error;
   end To_AdsAnalyticsFilterOperator_Type;

   function To_String (Value : in .Models.AdsAnalyticsFilterOperator_Type) return String is
   begin
      case Value is
         when LESS_THAN =>
            return "LESS_THAN";

         when GREATER_THAN =>
            return "GREATER_THAN";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdsAnalyticsFilterOperator_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdsAnalyticsFilterOperator_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdsAnalyticsFilterOperator_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_AdsAnalyticsFilterOperator_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdsAnalyticsFilterOperator_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdsAnalyticsFilterOperator_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdsAnalyticsResponseInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("AD_ID", Value.AD_ID);
      if not Value.DATE.Is_Null then
         Into.Write_Entity ("DATE", Value.DATE);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdsAnalyticsResponseInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdsAnalyticsResponseInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "AD_ID", Value.AD_ID);
      Swagger.Streams.Deserialize (Object, "DATE", Value.DATE);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdsAnalyticsResponseInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdsAnalyticsResponseInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_AdsAnalyticsTargetingType_Type (Value : in String) return .Models.AdsAnalyticsTargetingType_Type is
   begin
      if Value = "KEYWORD" then
         return KEYWORD;
      end if;
      if Value = "APPTYPE" then
         return APPTYPE;
      end if;
      if Value = "GENDER" then
         return GENDER;
      end if;
      if Value = "LOCATION" then
         return LOCATION;
      end if;
      if Value = "PLACEMENT" then
         return PLACEMENT;
      end if;
      if Value = "COUNTRY" then
         return COUNTRY;
      end if;
      if Value = "TARGETED_INTEREST" then
         return TARGETED_INTEREST;
      end if;
      if Value = "PINNER_INTEREST" then
         return PINNER_INTEREST;
      end if;
      if Value = "AUDIENCE_INCLUDE" then
         return AUDIENCE_INCLUDE;
      end if;
      if Value = "GEO" then
         return GEO;
      end if;
      if Value = "AGE_BUCKET" then
         return AGE_BUCKET;
      end if;
      if Value = "REGION" then
         return REGION;
      end if;
      if Value = "AGE_BUCKET_AND_GENDER" then
         return AGE_BUCKET_AND_GENDER;
      end if;
      raise Constraint_Error;
   end To_AdsAnalyticsTargetingType_Type;

   function To_String (Value : in .Models.AdsAnalyticsTargetingType_Type) return String is
   begin
      case Value is
         when KEYWORD =>
            return "KEYWORD";

         when APPTYPE =>
            return "APPTYPE";

         when GENDER =>
            return "GENDER";

         when LOCATION =>
            return "LOCATION";

         when PLACEMENT =>
            return "PLACEMENT";

         when COUNTRY =>
            return "COUNTRY";

         when TARGETED_INTEREST =>
            return "TARGETED_INTEREST";

         when PINNER_INTEREST =>
            return "PINNER_INTEREST";

         when AUDIENCE_INCLUDE =>
            return "AUDIENCE_INCLUDE";

         when GEO =>
            return "GEO";

         when AGE_BUCKET =>
            return "AGE_BUCKET";

         when REGION =>
            return "REGION";

         when AGE_BUCKET_AND_GENDER =>
            return "AGE_BUCKET_AND_GENDER";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdsAnalyticsTargetingType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdsAnalyticsTargetingType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdsAnalyticsTargetingType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_AdsAnalyticsTargetingType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdsAnalyticsTargetingType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdsAnalyticsTargetingType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdsCreditDiscountsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Active.Is_Null then
         Into.Write_Entity ("active", Value.Active);
      end if;
      if not Value.Advertiser_Id.Is_Null then
         Into.Write_Entity ("advertiser_id", Value.Advertiser_Id);
      end if;
      Into.Write_Entity ("discountType", Value.Discount_Type);
      Serialize (Into, "discountInMicroCurrency", Value.Discount_In_Micro_Currency);
      Into.Write_Entity ("discountCurrency", Value.Discount_Currency);
      Into.Write_Entity ("title", Value.Title);
      Serialize (Into, "remainingDiscountInMicroCurrency", Value.Remaining_Discount_In_Micro_Currency);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdsCreditDiscountsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdsCreditDiscountsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "active", Value.Active);
      Swagger.Streams.Deserialize (Object, "advertiser_id", Value.Advertiser_Id);
      Swagger.Streams.Deserialize (Object, "discountType", Value.Discount_Type);
      Swagger.Streams.Deserialize (Object, "discountInMicroCurrency", Value.Discount_In_Micro_Currency);
      Swagger.Streams.Deserialize (Object, "discountCurrency", Value.Discount_Currency);
      Swagger.Streams.Deserialize (Object, "title", Value.Title);
      Swagger.Streams.Deserialize (Object, "remainingDiscountInMicroCurrency", Value.Remaining_Discount_In_Micro_Currency);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdsCreditDiscountsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdsCreditDiscountsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdsCreditRedeemRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("offerCodeHash", Value.Offer_Code_Hash);
      Into.Write_Entity ("validateOnly", Value.Validate_Only);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdsCreditRedeemRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdsCreditRedeemRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerCodeHash", Value.Offer_Code_Hash);
      Swagger.Streams.Deserialize (Object, "validateOnly", Value.Validate_Only);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdsCreditRedeemRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdsCreditRedeemRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdsCreditRedeemResponse_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Success.Is_Null then
         Into.Write_Entity ("success", Value.Success);
      end if;
      Into.Write_Entity ("errorCode", Value.Error_Code);
      Into.Write_Entity ("errorMessage", Value.Error_Message);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdsCreditRedeemResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdsCreditRedeemResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "success", Value.Success);
      Swagger.Streams.Deserialize (Object, "errorCode", Value.Error_Code);
      Swagger.Streams.Deserialize (Object, "errorMessage", Value.Error_Message);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdsCreditRedeemResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdsCreditRedeemResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdvancedAuctionOperationError_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Code.Is_Null then
         Into.Write_Entity ("code", Value.Code);
      end if;
      if not Value.Message.Is_Null then
         Into.Write_Entity ("message", Value.Message);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdvancedAuctionOperationError_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdvancedAuctionOperationError_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "message", Value.Message);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdvancedAuctionOperationError_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdvancedAuctionOperationError_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_AdvancedAuctionOperation_Type (Value : in String) return .Models.AdvancedAuctionOperation_Type is
   begin
      if Value = "UPSERT" then
         return UPSERT;
      end if;
      if Value = "DELETE" then
         return DELETE;
      end if;
      raise Constraint_Error;
   end To_AdvancedAuctionOperation_Type;

   function To_String (Value : in .Models.AdvancedAuctionOperation_Type) return String is
   begin
      case Value is
         when UPSERT =>
            return "UPSERT";

         when DELETE =>
            return "DELETE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdvancedAuctionOperation_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdvancedAuctionOperation_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdvancedAuctionOperation_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_AdvancedAuctionOperation_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdvancedAuctionOperation_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdvancedAuctionOperation_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_AssetGroupType_Type (Value : in String) return .Models.AssetGroupType_Type is
   begin
      if Value = "BRAND" then
         return BRAND;
      end if;
      if Value = "LOCATION_OR_LANGUAGE" then
         return LOCATION_OR_LANGUAGE;
      end if;
      if Value = "PRODUCT_LINE" then
         return PRODUCT_LINE;
      end if;
      if Value = "OTHER" then
         return OTHER;
      end if;
      raise Constraint_Error;
   end To_AssetGroupType_Type;

   function To_String (Value : in .Models.AssetGroupType_Type) return String is
   begin
      case Value is
         when BRAND =>
            return "BRAND";

         when LOCATION_OR_LANGUAGE =>
            return "LOCATION_OR_LANGUAGE";

         when PRODUCT_LINE =>
            return "PRODUCT_LINE";

         when OTHER =>
            return "OTHER";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AssetGroupType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AssetGroupType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AssetGroupType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_AssetGroupType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AssetGroupType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AssetGroupType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AssetTypeResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AssetTypeResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AssetTypeResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AssetTypeResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AssetTypeResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_AudienceAccountType_Type (Value : in String) return .Models.AudienceAccountType_Type is
   begin
      if Value = "AD_ACCOUNT" then
         return AD_ACCOUNT;
      end if;
      if Value = "BUSINESS_ACCOUNT" then
         return BUSINESS_ACCOUNT;
      end if;
      raise Constraint_Error;
   end To_AudienceAccountType_Type;

   function To_String (Value : in .Models.AudienceAccountType_Type) return String is
   begin
      case Value is
         when AD_ACCOUNT =>
            return "AD_ACCOUNT";

         when BUSINESS_ACCOUNT =>
            return "BUSINESS_ACCOUNT";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AudienceAccountType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AudienceAccountType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AudienceAccountType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_AudienceAccountType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AudienceAccountType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AudienceAccountType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AudienceCreateRequest1AudienceType_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AudienceCreateRequest1AudienceType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AudienceCreateRequest1AudienceType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AudienceCreateRequest1AudienceType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AudienceCreateRequest1AudienceType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_AudienceDataParty_Type (Value : in String) return .Models.AudienceDataParty_Type is
   begin
      if Value = "1p" then
         return _1P;
      end if;
      if Value = "3p" then
         return _3P;
      end if;
      raise Constraint_Error;
   end To_AudienceDataParty_Type;

   function To_String (Value : in .Models.AudienceDataParty_Type) return String is
   begin
      case Value is
         when _1P =>
            return "1p";

         when _3P =>
            return "3p";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AudienceDataParty_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AudienceDataParty_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AudienceDataParty_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_AudienceDataParty_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AudienceDataParty_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AudienceDataParty_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AudienceDefinitionScope_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AudienceDefinitionScope_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AudienceDefinitionScope_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AudienceDefinitionScope_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AudienceDefinitionScope_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AudienceDefinitionType_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AudienceDefinitionType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AudienceDefinitionType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AudienceDefinitionType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AudienceDefinitionType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AudienceDefinition_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("date", Value.Date);
      Serialize (Into, "type", Value.P_Type);
      Serialize (Into, "scope", Value.Scope);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AudienceDefinition_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AudienceDefinition_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "date", Value.Date);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "scope", Value.Scope);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AudienceDefinition_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AudienceDefinition_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AudienceDemographicValue_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Key.Is_Null then
         Into.Write_Entity ("key", Value.Key);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "ratio", Value.Ratio);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AudienceDemographicValue_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AudienceDemographicValue_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "key", Value.Key);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "ratio", Value.Ratio);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AudienceDemographicValue_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AudienceDemographicValue_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AudienceDescription_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AudienceDescription_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AudienceDescription_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AudienceDescription_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AudienceDescription_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AudienceInsightCategoryCommon_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Key.Is_Null then
         Into.Write_Entity ("key", Value.Key);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "ratio", Value.Ratio);
      Serialize (Into, "index", Value.Index);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AudienceInsightCategoryCommon_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AudienceInsightCategoryCommon_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "key", Value.Key);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "ratio", Value.Ratio);
      Swagger.Streams.Deserialize (Object, "index", Value.Index);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AudienceInsightCategoryCommon_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AudienceInsightCategoryCommon_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_AudienceInsightType_Type (Value : in String) return .Models.AudienceInsightType_Type is
   begin
      if Value = "YOUR_TOTAL_AUDIENCE" then
         return YOUR_TOTAL_AUDIENCE;
      end if;
      if Value = "YOUR_ENGAGED_AUDIENCE" then
         return YOUR_ENGAGED_AUDIENCE;
      end if;
      if Value = "PINTEREST_TOTAL_AUDIENCE" then
         return PINTEREST_TOTAL_AUDIENCE;
      end if;
      raise Constraint_Error;
   end To_AudienceInsightType_Type;

   function To_String (Value : in .Models.AudienceInsightType_Type) return String is
   begin
      case Value is
         when YOUR_TOTAL_AUDIENCE =>
            return "YOUR_TOTAL_AUDIENCE";

         when YOUR_ENGAGED_AUDIENCE =>
            return "YOUR_ENGAGED_AUDIENCE";

         when PINTEREST_TOTAL_AUDIENCE =>
            return "PINTEREST_TOTAL_AUDIENCE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AudienceInsightType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AudienceInsightType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AudienceInsightType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_AudienceInsightType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AudienceInsightType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AudienceInsightType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_AudienceShareType_Type (Value : in String) return .Models.AudienceShareType_Type is
   begin
      if Value = "SHARED" then
         return SHARED;
      end if;
      if Value = "RECEIVED" then
         return RECEIVED;
      end if;
      raise Constraint_Error;
   end To_AudienceShareType_Type;

   function To_String (Value : in .Models.AudienceShareType_Type) return String is
   begin
      case Value is
         when SHARED =>
            return "SHARED";

         when RECEIVED =>
            return "RECEIVED";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AudienceShareType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AudienceShareType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AudienceShareType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_AudienceShareType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AudienceShareType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AudienceShareType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_AudienceSharingType_Type (Value : in String) return .Models.AudienceSharingType_Type is
   begin
      if Value = "CUSTOM" then
         return CUSTOM;
      end if;
      if Value = "SYNDICATED" then
         return SYNDICATED;
      end if;
      raise Constraint_Error;
   end To_AudienceSharingType_Type;

   function To_String (Value : in .Models.AudienceSharingType_Type) return String is
   begin
      case Value is
         when CUSTOM =>
            return "CUSTOM";

         when SYNDICATED =>
            return "SYNDICATED";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AudienceSharingType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AudienceSharingType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AudienceSharingType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_AudienceSharingType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AudienceSharingType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AudienceSharingType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AudienceSubcategory_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Key.Is_Null then
         Into.Write_Entity ("key", Value.Key);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "ratio", Value.Ratio);
      Serialize (Into, "index", Value.Index);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AudienceSubcategory_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AudienceSubcategory_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "key", Value.Key);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "ratio", Value.Ratio);
      Swagger.Streams.Deserialize (Object, "index", Value.Index);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AudienceSubcategory_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AudienceSubcategory_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_AudienceType_Type (Value : in String) return .Models.AudienceType_Type is
   begin
      if Value = "CUSTOMER_LIST" then
         return CUSTOMER_LIST;
      end if;
      if Value = "VISITOR" then
         return VISITOR;
      end if;
      if Value = "ENGAGEMENT" then
         return ENGAGEMENT;
      end if;
      if Value = "ACTALIKE" then
         return ACTALIKE;
      end if;
      if Value = "PERSONA" then
         return PERSONA;
      end if;
      raise Constraint_Error;
   end To_AudienceType_Type;

   function To_String (Value : in .Models.AudienceType_Type) return String is
   begin
      case Value is
         when CUSTOMER_LIST =>
            return "CUSTOMER_LIST";

         when VISITOR =>
            return "VISITOR";

         when ENGAGEMENT =>
            return "ENGAGEMENT";

         when ACTALIKE =>
            return "ACTALIKE";

         when PERSONA =>
            return "PERSONA";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AudienceType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AudienceType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AudienceType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_AudienceType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AudienceType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AudienceType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_AudienceUpdateOperationType_Type (Value : in String) return .Models.AudienceUpdateOperationType_Type is
   begin
      if Value = "UPDATE" then
         return UPDATE;
      end if;
      if Value = "REMOVE" then
         return REMOVE;
      end if;
      raise Constraint_Error;
   end To_AudienceUpdateOperationType_Type;

   function To_String (Value : in .Models.AudienceUpdateOperationType_Type) return String is
   begin
      case Value is
         when UPDATE =>
            return "UPDATE";

         when REMOVE =>
            return "REMOVE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AudienceUpdateOperationType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AudienceUpdateOperationType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AudienceUpdateOperationType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_AudienceUpdateOperationType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AudienceUpdateOperationType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AudienceUpdateOperationType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AuthRespondInvitesBodyInvitesInnerAction_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("accept_invite", Value.Accept_Invite);
      Serialize (Into, "asset_id_to_permissions", Value.Asset_Id_To_Permissions);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AuthRespondInvitesBodyInvitesInnerAction_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AuthRespondInvitesBodyInvitesInnerAction_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "accept_invite", Value.Accept_Invite);
      Swagger.Streams.Deserialize (Object, "asset_id_to_permissions", Value.Asset_Id_To_Permissions);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AuthRespondInvitesBodyInvitesInnerAction_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AuthRespondInvitesBodyInvitesInnerAction_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AvailabilityFilter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("AVAILABILITY", Value.AVAILABILITY);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AvailabilityFilter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AvailabilityFilter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "AVAILABILITY", Value.AVAILABILITY);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AvailabilityFilter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AvailabilityFilter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BaseInviteDataResponseInviteData_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Invite_Expiration.Is_Null then
         Into.Write_Entity ("invite_expiration", Value.Invite_Expiration);
      end if;
      if not Value.Invite_Status.Is_Null then
         Into.Write_Entity ("invite_status", Value.Invite_Status);
      end if;
      if not Value.Invite_Type.Is_Null then
         Into.Write_Entity ("invite_type", Value.Invite_Type);
      end if;
      if not Value.Last_Updated_Time.Is_Null then
         Into.Write_Entity ("last_updated_time", Value.Last_Updated_Time);
      end if;
      if not Value.Sent_At.Is_Null then
         Into.Write_Entity ("sent_at", Value.Sent_At);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BaseInviteDataResponseInviteData_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BaseInviteDataResponseInviteData_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "invite_expiration", Value.Invite_Expiration);
      Swagger.Streams.Deserialize (Object, "invite_status", Value.Invite_Status);
      Swagger.Streams.Deserialize (Object, "invite_type", Value.Invite_Type);
      Swagger.Streams.Deserialize (Object, "last_updated_time", Value.Last_Updated_Time);
      Swagger.Streams.Deserialize (Object, "sent_at", Value.Sent_At);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BaseInviteDataResponseInviteData_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BaseInviteDataResponseInviteData_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_BatchOperationStatus_Type (Value : in String) return .Models.BatchOperationStatus_Type is
   begin
      if Value = "PROCESSING" then
         return PROCESSING;
      end if;
      if Value = "COMPLETED" then
         return COMPLETED;
      end if;
      if Value = "FAILED" then
         return FAILED;
      end if;
      raise Constraint_Error;
   end To_BatchOperationStatus_Type;

   function To_String (Value : in .Models.BatchOperationStatus_Type) return String is
   begin
      case Value is
         when PROCESSING =>
            return "PROCESSING";

         when COMPLETED =>
            return "COMPLETED";

         when FAILED =>
            return "FAILED";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BatchOperationStatus_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BatchOperationStatus_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BatchOperationStatus_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_BatchOperationStatus_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BatchOperationStatus_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BatchOperationStatus_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_BatchOperation_Type (Value : in String) return .Models.BatchOperation_Type is
   begin
      if Value = "UPDATE" then
         return UPDATE;
      end if;
      if Value = "UPSERT" then
         return UPSERT;
      end if;
      if Value = "CREATE" then
         return CREATE;
      end if;
      if Value = "DELETE_DISCONTINUED" then
         return DELETE_DISCONTINUED;
      end if;
      if Value = "DELETE" then
         return DELETE;
      end if;
      raise Constraint_Error;
   end To_BatchOperation_Type;

   function To_String (Value : in .Models.BatchOperation_Type) return String is
   begin
      case Value is
         when UPDATE =>
            return "UPDATE";

         when UPSERT =>
            return "UPSERT";

         when CREATE =>
            return "CREATE";

         when DELETE_DISCONTINUED =>
            return "DELETE_DISCONTINUED";

         when DELETE =>
            return "DELETE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BatchOperation_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BatchOperation_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BatchOperation_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_BatchOperation_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BatchOperation_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BatchOperation_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BidFloor_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "bid_floors", Value.Bid_Floors);
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BidFloor_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BidFloor_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "bid_floors", Value.Bid_Floors);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BidFloor_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BidFloor_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BidInMicroCurrency_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BidInMicroCurrency_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BidInMicroCurrency_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BidInMicroCurrency_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BidInMicroCurrency_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BillingProfilesResponse_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Card_Type.Is_Null then
         Into.Write_Entity ("card_type", Value.Card_Type);
      end if;
      if not Value.Status.Is_Null then
         Into.Write_Entity ("status", Value.Status);
      end if;
      if not Value.Advertiser_Id.Is_Null then
         Into.Write_Entity ("advertiser_id", Value.Advertiser_Id);
      end if;
      if not Value.Payment_Method_Brand.Is_Null then
         Into.Write_Entity ("payment_method_brand", Value.Payment_Method_Brand);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BillingProfilesResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BillingProfilesResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "card_type", Value.Card_Type);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "advertiser_id", Value.Advertiser_Id);
      Swagger.Streams.Deserialize (Object, "payment_method_brand", Value.Payment_Method_Brand);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BillingProfilesResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BillingProfilesResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BoardMedia_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("image_cover_url", Value.Image_Cover_Url);
      Serialize (Into, "pin_thumbnail_urls", Value.Pin_Thumbnail_Urls);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BoardMedia_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BoardMedia_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "image_cover_url", Value.Image_Cover_Url);
      Swagger.Streams.Deserialize (Object, "pin_thumbnail_urls", Value.Pin_Thumbnail_Urls);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BoardMedia_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BoardMedia_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BoardOwner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Username.Is_Null then
         Into.Write_Entity ("username", Value.Username);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BoardOwner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BoardOwner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "username", Value.Username);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BoardOwner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BoardOwner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BoardSection_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Into.Write_Entity ("name", Value.Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BoardSection_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BoardSection_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BoardSection_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BoardSection_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BoardUpdate_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Into.Write_Entity ("description", Value.Description);
      if not Value.Privacy.Is_Null then
         Into.Write_Entity ("privacy", Value.Privacy);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BoardUpdate_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BoardUpdate_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "privacy", Value.Privacy);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BoardUpdate_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BoardUpdate_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BookClosedResponse_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Conversion_Metrics_Ready.Is_Null then
         Into.Write_Entity ("conversion_metrics_ready", Value.Conversion_Metrics_Ready);
      end if;
      if not Value.Non_Conversion_Metrics_Ready.Is_Null then
         Into.Write_Entity ("non_conversion_metrics_ready", Value.Non_Conversion_Metrics_Ready);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BookClosedResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BookClosedResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "conversion_metrics_ready", Value.Conversion_Metrics_Ready);
      Swagger.Streams.Deserialize (Object, "non_conversion_metrics_ready", Value.Non_Conversion_Metrics_Ready);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BookClosedResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BookClosedResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BrandFilter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("BRAND", Value.BRAND);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BrandFilter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BrandFilter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "BRAND", Value.BRAND);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BrandFilter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BrandFilter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_BudgetType_Type (Value : in String) return .Models.BudgetType_Type is
   begin
      if Value = "DAILY" then
         return DAILY;
      end if;
      if Value = "LIFETIME" then
         return LIFETIME;
      end if;
      if Value = "CBO_ADGROUP" then
         return CBO_ADGROUP;
      end if;
      raise Constraint_Error;
   end To_BudgetType_Type;

   function To_String (Value : in .Models.BudgetType_Type) return String is
   begin
      case Value is
         when DAILY =>
            return "DAILY";

         when LIFETIME =>
            return "LIFETIME";

         when CBO_ADGROUP =>
            return "CBO_ADGROUP";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BudgetType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BudgetType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BudgetType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_BudgetType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BudgetType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BudgetType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BulkDownloadResponse_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Request_Id.Is_Null then
         Into.Write_Entity ("request_id", Value.Request_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BulkDownloadResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BulkDownloadResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "request_id", Value.Request_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BulkDownloadResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BulkDownloadResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_BulkEntityType_Type (Value : in String) return .Models.BulkEntityType_Type is
   begin
      if Value = "CAMPAIGN" then
         return CAMPAIGN;
      end if;
      if Value = "AD_GROUP" then
         return AD_GROUP;
      end if;
      if Value = "PRODUCT_GROUP" then
         return PRODUCT_GROUP;
      end if;
      if Value = "AD" then
         return AD;
      end if;
      if Value = "KEYWORD" then
         return KEYWORD;
      end if;
      raise Constraint_Error;
   end To_BulkEntityType_Type;

   function To_String (Value : in .Models.BulkEntityType_Type) return String is
   begin
      case Value is
         when CAMPAIGN =>
            return "CAMPAIGN";

         when AD_GROUP =>
            return "AD_GROUP";

         when PRODUCT_GROUP =>
            return "PRODUCT_GROUP";

         when AD =>
            return "AD";

         when KEYWORD =>
            return "KEYWORD";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BulkEntityType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BulkEntityType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BulkEntityType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_BulkEntityType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BulkEntityType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BulkEntityType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_BulkOutputFormat_Type (Value : in String) return .Models.BulkOutputFormat_Type is
   begin
      if Value = "CSV" then
         return CSV;
      end if;
      if Value = "JSON" then
         return JSON;
      end if;
      raise Constraint_Error;
   end To_BulkOutputFormat_Type;

   function To_String (Value : in .Models.BulkOutputFormat_Type) return String is
   begin
      case Value is
         when CSV =>
            return "CSV";

         when JSON =>
            return "JSON";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BulkOutputFormat_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BulkOutputFormat_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BulkOutputFormat_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_BulkOutputFormat_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BulkOutputFormat_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BulkOutputFormat_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_BulkReportingJobStatus_Type (Value : in String) return .Models.BulkReportingJobStatus_Type is
   begin
      if Value = "DOES_NOT_EXIST" then
         return DOES_NOT_EXIST;
      end if;
      if Value = "FINISHED" then
         return FINISHED;
      end if;
      if Value = "IN_PROGRESS" then
         return IN_PROGRESS;
      end if;
      if Value = "EXPIRED" then
         return EXPIRED;
      end if;
      if Value = "FAILED" then
         return FAILED;
      end if;
      if Value = "CANCELLED" then
         return CANCELLED;
      end if;
      raise Constraint_Error;
   end To_BulkReportingJobStatus_Type;

   function To_String (Value : in .Models.BulkReportingJobStatus_Type) return String is
   begin
      case Value is
         when DOES_NOT_EXIST =>
            return "DOES_NOT_EXIST";

         when FINISHED =>
            return "FINISHED";

         when IN_PROGRESS =>
            return "IN_PROGRESS";

         when EXPIRED =>
            return "EXPIRED";

         when FAILED =>
            return "FAILED";

         when CANCELLED =>
            return "CANCELLED";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BulkReportingJobStatus_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BulkReportingJobStatus_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BulkReportingJobStatus_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_BulkReportingJobStatus_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BulkReportingJobStatus_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BulkReportingJobStatus_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BulkUpsertResponse_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Request_Id.Is_Null then
         Into.Write_Entity ("request_id", Value.Request_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BulkUpsertResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BulkUpsertResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "request_id", Value.Request_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BulkUpsertResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BulkUpsertResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_BulkUpsertStatus_Type (Value : in String) return .Models.BulkUpsertStatus_Type is
   begin
      if Value = "RUNNING" then
         return RUNNING;
      end if;
      if Value = "SUCCEEDED" then
         return SUCCEEDED;
      end if;
      if Value = "FAILED" then
         return FAILED;
      end if;
      raise Constraint_Error;
   end To_BulkUpsertStatus_Type;

   function To_String (Value : in .Models.BulkUpsertStatus_Type) return String is
   begin
      case Value is
         when RUNNING =>
            return "RUNNING";

         when SUCCEEDED =>
            return "SUCCEEDED";

         when FAILED =>
            return "FAILED";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BulkUpsertStatus_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BulkUpsertStatus_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BulkUpsertStatus_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_BulkUpsertStatus_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BulkUpsertStatus_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BulkUpsertStatus_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BusinessAccessError_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("code", Value.Code);
      Into.Write_Entity ("message", Value.Message);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BusinessAccessError_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BusinessAccessError_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "message", Value.Message);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BusinessAccessError_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BusinessAccessError_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_BusinessAccessRole_Type (Value : in String) return .Models.BusinessAccessRole_Type is
   begin
      if Value = "OWNER" then
         return OWNER;
      end if;
      if Value = "ADMIN" then
         return ADMIN;
      end if;
      if Value = "ANALYST" then
         return ANALYST;
      end if;
      if Value = "SOS_READER" then
         return SOS_READER;
      end if;
      if Value = "FINANCE_MANAGER" then
         return FINANCE_MANAGER;
      end if;
      if Value = "AUDIENCE_MANAGER" then
         return AUDIENCE_MANAGER;
      end if;
      if Value = "CAMPAIGN_MANAGER" then
         return CAMPAIGN_MANAGER;
      end if;
      if Value = "CATALOGS_MANAGER" then
         return CATALOGS_MANAGER;
      end if;
      if Value = "RESTRICTED_OWNER" then
         return RESTRICTED_OWNER;
      end if;
      if Value = "PROFILE_MANAGER" then
         return PROFILE_MANAGER;
      end if;
      if Value = "PROFILE_PUBLISHER" then
         return PROFILE_PUBLISHER;
      end if;
      if Value = "RESOURCE_PINNER_LIST_OWNER" then
         return RESOURCE_PINNER_LIST_OWNER;
      end if;
      if Value = "RESOURCE_PINNER_LIST_READER" then
         return RESOURCE_PINNER_LIST_READER;
      end if;
      if Value = "BIZ_PINNER_LIST_SHARER" then
         return BIZ_PINNER_LIST_SHARER;
      end if;
      if Value = "RESOURCE_CONVERSION_TAGS_READER" then
         return RESOURCE_CONVERSION_TAGS_READER;
      end if;
      raise Constraint_Error;
   end To_BusinessAccessRole_Type;

   function To_String (Value : in .Models.BusinessAccessRole_Type) return String is
   begin
      case Value is
         when OWNER =>
            return "OWNER";

         when ADMIN =>
            return "ADMIN";

         when ANALYST =>
            return "ANALYST";

         when SOS_READER =>
            return "SOS_READER";

         when FINANCE_MANAGER =>
            return "FINANCE_MANAGER";

         when AUDIENCE_MANAGER =>
            return "AUDIENCE_MANAGER";

         when CAMPAIGN_MANAGER =>
            return "CAMPAIGN_MANAGER";

         when CATALOGS_MANAGER =>
            return "CATALOGS_MANAGER";

         when RESTRICTED_OWNER =>
            return "RESTRICTED_OWNER";

         when PROFILE_MANAGER =>
            return "PROFILE_MANAGER";

         when PROFILE_PUBLISHER =>
            return "PROFILE_PUBLISHER";

         when RESOURCE_PINNER_LIST_OWNER =>
            return "RESOURCE_PINNER_LIST_OWNER";

         when RESOURCE_PINNER_LIST_READER =>
            return "RESOURCE_PINNER_LIST_READER";

         when BIZ_PINNER_LIST_SHARER =>
            return "BIZ_PINNER_LIST_SHARER";

         when RESOURCE_CONVERSION_TAGS_READER =>
            return "RESOURCE_CONVERSION_TAGS_READER";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BusinessAccessRole_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BusinessAccessRole_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BusinessAccessRole_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_BusinessAccessRole_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BusinessAccessRole_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BusinessAccessRole_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BusinessAccessUserSummary_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("email", Value.Email);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("username", Value.Username);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BusinessAccessUserSummary_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BusinessAccessUserSummary_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "email", Value.Email);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "username", Value.Username);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BusinessAccessUserSummary_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BusinessAccessUserSummary_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BusinessMemberAssetsSummaryAdAccountsInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Serialize (Into, "permissions", Value.Permissions);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BusinessMemberAssetsSummaryAdAccountsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BusinessMemberAssetsSummaryAdAccountsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "permissions", Value.Permissions);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BusinessMemberAssetsSummaryAdAccountsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BusinessMemberAssetsSummaryAdAccountsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BusinessMemberAssetsSummaryProfilesInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Serialize (Into, "permissions", Value.Permissions);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BusinessMemberAssetsSummaryProfilesInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BusinessMemberAssetsSummaryProfilesInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "permissions", Value.Permissions);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BusinessMemberAssetsSummaryProfilesInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BusinessMemberAssetsSummaryProfilesInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BusinessMembersAssetAccessDeleteRequestAccessesInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("asset_id", Value.Asset_Id);
      Into.Write_Entity ("member_id", Value.Member_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BusinessMembersAssetAccessDeleteRequestAccessesInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BusinessMembersAssetAccessDeleteRequestAccessesInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "asset_id", Value.Asset_Id);
      Swagger.Streams.Deserialize (Object, "member_id", Value.Member_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BusinessMembersAssetAccessDeleteRequestAccessesInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BusinessMembersAssetAccessDeleteRequestAccessesInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_BusinessRoleCheckMode_Type (Value : in String) return .Models.BusinessRoleCheckMode_Type is
   begin
      if Value = "INTERNAL" then
         return INTERNAL;
      end if;
      if Value = "EXTERNAL" then
         return EXTERNAL;
      end if;
      raise Constraint_Error;
   end To_BusinessRoleCheckMode_Type;

   function To_String (Value : in .Models.BusinessRoleCheckMode_Type) return String is
   begin
      case Value is
         when INTERNAL =>
            return "INTERNAL";

         when EXTERNAL =>
            return "EXTERNAL";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BusinessRoleCheckMode_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BusinessRoleCheckMode_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BusinessRoleCheckMode_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_BusinessRoleCheckMode_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BusinessRoleCheckMode_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BusinessRoleCheckMode_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_BusinessRoleForMembers_Type (Value : in String) return .Models.BusinessRoleForMembers_Type is
   begin
      if Value = "EMPLOYEE" then
         return EMPLOYEE;
      end if;
      if Value = "BIZ_ADMIN" then
         return BIZ_ADMIN;
      end if;
      raise Constraint_Error;
   end To_BusinessRoleForMembers_Type;

   function To_String (Value : in .Models.BusinessRoleForMembers_Type) return String is
   begin
      case Value is
         when EMPLOYEE =>
            return "EMPLOYEE";

         when BIZ_ADMIN =>
            return "BIZ_ADMIN";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BusinessRoleForMembers_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BusinessRoleForMembers_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BusinessRoleForMembers_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_BusinessRoleForMembers_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BusinessRoleForMembers_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BusinessRoleForMembers_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BusinessRoleResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BusinessRoleResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BusinessRoleResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BusinessRoleResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BusinessRoleResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_BusinessRole_Type (Value : in String) return .Models.BusinessRole_Type is
   begin
      if Value = "EMPLOYEE" then
         return EMPLOYEE;
      end if;
      if Value = "BIZ_ADMIN" then
         return BIZ_ADMIN;
      end if;
      if Value = "PARTNER" then
         return PARTNER;
      end if;
      raise Constraint_Error;
   end To_BusinessRole_Type;

   function To_String (Value : in .Models.BusinessRole_Type) return String is
   begin
      case Value is
         when EMPLOYEE =>
            return "EMPLOYEE";

         when BIZ_ADMIN =>
            return "BIZ_ADMIN";

         when PARTNER =>
            return "PARTNER";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BusinessRole_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BusinessRole_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BusinessRole_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_BusinessRole_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BusinessRole_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BusinessRole_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CampaignId_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CampaignId_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CampaignId_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CampaignId_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CampaignId_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CampaignIsAutomatedCampaign_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CampaignIsAutomatedCampaign_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CampaignIsAutomatedCampaign_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CampaignIsAutomatedCampaign_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CampaignIsAutomatedCampaign_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CampaignIsCampaignBudgetOptimization_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CampaignIsCampaignBudgetOptimization_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CampaignIsCampaignBudgetOptimization_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CampaignIsCampaignBudgetOptimization_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CampaignIsCampaignBudgetOptimization_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CampaignIsFlexibleDailyBudgets_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CampaignIsFlexibleDailyBudgets_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CampaignIsFlexibleDailyBudgets_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CampaignIsFlexibleDailyBudgets_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CampaignIsFlexibleDailyBudgets_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_CampaignSummaryStatus_Type (Value : in String) return .Models.CampaignSummaryStatus_Type is
   begin
      if Value = "RUNNING" then
         return RUNNING;
      end if;
      if Value = "PAUSED" then
         return PAUSED;
      end if;
      if Value = "NOT_STARTED" then
         return NOT_STARTED;
      end if;
      if Value = "COMPLETED" then
         return COMPLETED;
      end if;
      if Value = "ADVERTISER_DISABLED" then
         return ADVERTISER_DISABLED;
      end if;
      if Value = "ARCHIVED" then
         return ARCHIVED;
      end if;
      if Value = "DRAFT" then
         return DRAFT;
      end if;
      if Value = "DELETED_DRAFT" then
         return DELETED_DRAFT;
      end if;
      raise Constraint_Error;
   end To_CampaignSummaryStatus_Type;

   function To_String (Value : in .Models.CampaignSummaryStatus_Type) return String is
   begin
      case Value is
         when RUNNING =>
            return "RUNNING";

         when PAUSED =>
            return "PAUSED";

         when NOT_STARTED =>
            return "NOT_STARTED";

         when COMPLETED =>
            return "COMPLETED";

         when ADVERTISER_DISABLED =>
            return "ADVERTISER_DISABLED";

         when ARCHIVED =>
            return "ARCHIVED";

         when DRAFT =>
            return "DRAFT";

         when DELETED_DRAFT =>
            return "DELETED_DRAFT";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CampaignSummaryStatus_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CampaignSummaryStatus_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CampaignSummaryStatus_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_CampaignSummaryStatus_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CampaignSummaryStatus_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CampaignSummaryStatus_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CampaignsAnalyticsResponseInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("CAMPAIGN_ID", Value.CAMPAIGN_ID);
      if not Value.DATE.Is_Null then
         Into.Write_Entity ("DATE", Value.DATE);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CampaignsAnalyticsResponseInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CampaignsAnalyticsResponseInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "CAMPAIGN_ID", Value.CAMPAIGN_ID);
      Swagger.Streams.Deserialize (Object, "DATE", Value.DATE);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CampaignsAnalyticsResponseInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CampaignsAnalyticsResponseInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CancelInvitesBody_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "invite_ids", Value.Invite_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CancelInvitesBody_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CancelInvitesBody_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "invite_ids", Value.Invite_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CancelInvitesBody_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CancelInvitesBody_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsCreateReportResponse_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Token.Is_Null then
         Into.Write_Entity ("token", Value.Token);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsCreateReportResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsCreateReportResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "token", Value.Token);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsCreateReportResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsCreateReportResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsCreateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Into.Write_Entity ("name", Value.Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsCreateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsCreateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsCreateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsCreateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsCreativeAssetsAttributes_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Title.Is_Null then
         Into.Write_Entity ("title", Value.Title);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Link.Is_Null then
         Into.Write_Entity ("link", Value.Link);
      end if;
      Into.Write_Entity ("ios_deep_link", Value.Ios_Deep_Link);
      Into.Write_Entity ("android_deep_link", Value.Android_Deep_Link);
      Into.Write_Entity ("google_product_category", Value.Google_Product_Category);
      Into.Write_Entity ("custom_label_0", Value.Custom_Label_0);
      Into.Write_Entity ("custom_label_1", Value.Custom_Label_1);
      Into.Write_Entity ("custom_label_2", Value.Custom_Label_2);
      Into.Write_Entity ("custom_label_3", Value.Custom_Label_3);
      Into.Write_Entity ("custom_label_4", Value.Custom_Label_4);
      Into.Write_Entity ("visibility", Value.Visibility);
      if not Value.Image_Link.Is_Null then
         Into.Write_Entity ("image_link", Value.Image_Link);
      end if;
      if not Value.Video_Link.Is_Null then
         Into.Write_Entity ("video_link", Value.Video_Link);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsCreativeAssetsAttributes_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsCreativeAssetsAttributes_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "title", Value.Title);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "link", Value.Link);
      Swagger.Streams.Deserialize (Object, "ios_deep_link", Value.Ios_Deep_Link);
      Swagger.Streams.Deserialize (Object, "android_deep_link", Value.Android_Deep_Link);
      Swagger.Streams.Deserialize (Object, "google_product_category", Value.Google_Product_Category);
      Swagger.Streams.Deserialize (Object, "custom_label_0", Value.Custom_Label_0);
      Swagger.Streams.Deserialize (Object, "custom_label_1", Value.Custom_Label_1);
      Swagger.Streams.Deserialize (Object, "custom_label_2", Value.Custom_Label_2);
      Swagger.Streams.Deserialize (Object, "custom_label_3", Value.Custom_Label_3);
      Swagger.Streams.Deserialize (Object, "custom_label_4", Value.Custom_Label_4);
      Swagger.Streams.Deserialize (Object, "visibility", Value.Visibility);
      Swagger.Streams.Deserialize (Object, "image_link", Value.Image_Link);
      Swagger.Streams.Deserialize (Object, "video_link", Value.Video_Link);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsCreativeAssetsAttributes_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsCreativeAssetsAttributes_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsCreativeAssetsItemsFilter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Serialize (Into, "creative_assets_ids", Value.Creative_Assets_Ids);
      if not Value.Catalog_Id.Is_Null then
         Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsCreativeAssetsItemsFilter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsCreativeAssetsItemsFilter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "creative_assets_ids", Value.Creative_Assets_Ids);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsCreativeAssetsItemsFilter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsCreativeAssetsItemsFilter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsCreativeAssetsItemsPostFilter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Serialize (Into, "creative_assets_ids", Value.Creative_Assets_Ids);
      if not Value.Catalog_Id.Is_Null then
         Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsCreativeAssetsItemsPostFilter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsCreativeAssetsItemsPostFilter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "creative_assets_ids", Value.Creative_Assets_Ids);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsCreativeAssetsItemsPostFilter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsCreativeAssetsItemsPostFilter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsCreativeAssetsProductGroupFilterKeys_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("CREATIVE_ASSETS_ID", Value.CREATIVE_ASSETS_ID);
      Into.Write_Entity ("CUSTOM_LABEL_0", Value.CUSTOM_LABEL_0);
      Into.Write_Entity ("CUSTOM_LABEL_1", Value.CUSTOM_LABEL_1);
      Into.Write_Entity ("CUSTOM_LABEL_2", Value.CUSTOM_LABEL_2);
      Into.Write_Entity ("CUSTOM_LABEL_3", Value.CUSTOM_LABEL_3);
      Into.Write_Entity ("CUSTOM_LABEL_4", Value.CUSTOM_LABEL_4);
      Into.Write_Entity ("GOOGLE_PRODUCT_CATEGORY_6", Value.GOOGLE_PRODUCT_CATEGORY_6);
      Into.Write_Entity ("GOOGLE_PRODUCT_CATEGORY_5", Value.GOOGLE_PRODUCT_CATEGORY_5);
      Into.Write_Entity ("GOOGLE_PRODUCT_CATEGORY_4", Value.GOOGLE_PRODUCT_CATEGORY_4);
      Into.Write_Entity ("GOOGLE_PRODUCT_CATEGORY_3", Value.GOOGLE_PRODUCT_CATEGORY_3);
      Into.Write_Entity ("GOOGLE_PRODUCT_CATEGORY_2", Value.GOOGLE_PRODUCT_CATEGORY_2);
      Into.Write_Entity ("GOOGLE_PRODUCT_CATEGORY_1", Value.GOOGLE_PRODUCT_CATEGORY_1);
      Into.Write_Entity ("GOOGLE_PRODUCT_CATEGORY_0", Value.GOOGLE_PRODUCT_CATEGORY_0);
      Into.Write_Entity ("MEDIA_TYPE", Value.MEDIA_TYPE);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsCreativeAssetsProductGroupFilterKeys_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsCreativeAssetsProductGroupFilterKeys_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "CREATIVE_ASSETS_ID", Value.CREATIVE_ASSETS_ID);
      Swagger.Streams.Deserialize (Object, "CUSTOM_LABEL_0", Value.CUSTOM_LABEL_0);
      Swagger.Streams.Deserialize (Object, "CUSTOM_LABEL_1", Value.CUSTOM_LABEL_1);
      Swagger.Streams.Deserialize (Object, "CUSTOM_LABEL_2", Value.CUSTOM_LABEL_2);
      Swagger.Streams.Deserialize (Object, "CUSTOM_LABEL_3", Value.CUSTOM_LABEL_3);
      Swagger.Streams.Deserialize (Object, "CUSTOM_LABEL_4", Value.CUSTOM_LABEL_4);
      Swagger.Streams.Deserialize (Object, "GOOGLE_PRODUCT_CATEGORY_6", Value.GOOGLE_PRODUCT_CATEGORY_6);
      Swagger.Streams.Deserialize (Object, "GOOGLE_PRODUCT_CATEGORY_5", Value.GOOGLE_PRODUCT_CATEGORY_5);
      Swagger.Streams.Deserialize (Object, "GOOGLE_PRODUCT_CATEGORY_4", Value.GOOGLE_PRODUCT_CATEGORY_4);
      Swagger.Streams.Deserialize (Object, "GOOGLE_PRODUCT_CATEGORY_3", Value.GOOGLE_PRODUCT_CATEGORY_3);
      Swagger.Streams.Deserialize (Object, "GOOGLE_PRODUCT_CATEGORY_2", Value.GOOGLE_PRODUCT_CATEGORY_2);
      Swagger.Streams.Deserialize (Object, "GOOGLE_PRODUCT_CATEGORY_1", Value.GOOGLE_PRODUCT_CATEGORY_1);
      Swagger.Streams.Deserialize (Object, "GOOGLE_PRODUCT_CATEGORY_0", Value.GOOGLE_PRODUCT_CATEGORY_0);
      Swagger.Streams.Deserialize (Object, "MEDIA_TYPE", Value.MEDIA_TYPE);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsCreativeAssetsProductGroupFilterKeys_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsCreativeAssetsProductGroupFilterKeys_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsCreativeAssetsProductGroupProductCounts_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Serialize (Into, "total", Value.Total);
      Serialize (Into, "videos", Value.Videos);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsCreativeAssetsProductGroupProductCounts_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsCreativeAssetsProductGroupProductCounts_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "total", Value.Total);
      Swagger.Streams.Deserialize (Object, "videos", Value.Videos);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsCreativeAssetsProductGroupProductCounts_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsCreativeAssetsProductGroupProductCounts_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsDbItem_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("created_at", Value.Created_At);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("updated_at", Value.Updated_At);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsDbItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsDbItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "created_at", Value.Created_At);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "updated_at", Value.Updated_At);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsDbItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsDbItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsDeleteCreativeAssetsItem_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("creative_assets_id", Value.Creative_Assets_Id);
      Into.Write_Entity ("operation", Value.Operation);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsDeleteCreativeAssetsItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsDeleteCreativeAssetsItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "creative_assets_id", Value.Creative_Assets_Id);
      Swagger.Streams.Deserialize (Object, "operation", Value.Operation);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsDeleteCreativeAssetsItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsDeleteCreativeAssetsItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsDeleteHotelItem_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("hotel_id", Value.Hotel_Id);
      Into.Write_Entity ("operation", Value.Operation);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsDeleteHotelItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsDeleteHotelItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "hotel_id", Value.Hotel_Id);
      Swagger.Streams.Deserialize (Object, "operation", Value.Operation);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsDeleteHotelItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsDeleteHotelItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsDeleteRetailItem_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("item_id", Value.Item_Id);
      Into.Write_Entity ("operation", Value.Operation);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsDeleteRetailItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsDeleteRetailItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "item_id", Value.Item_Id);
      Swagger.Streams.Deserialize (Object, "operation", Value.Operation);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsDeleteRetailItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsDeleteRetailItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsFeedCredentials_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("password", Value.Password);
      Into.Write_Entity ("username", Value.Username);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsFeedCredentials_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsFeedCredentials_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "password", Value.Password);
      Swagger.Streams.Deserialize (Object, "username", Value.Username);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsFeedCredentials_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsFeedCredentials_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsFeedIngestionErrors_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.LINE_LEVEL_INTERNAL_ERROR.Is_Null then
         Into.Write_Entity ("LINE_LEVEL_INTERNAL_ERROR", Value.LINE_LEVEL_INTERNAL_ERROR);
      end if;
      if not Value.LARGE_PRODUCT_COUNT_DECREASE.Is_Null then
         Into.Write_Entity ("LARGE_PRODUCT_COUNT_DECREASE", Value.LARGE_PRODUCT_COUNT_DECREASE);
      end if;
      if not Value.ACCOUNT_FLAGGED.Is_Null then
         Into.Write_Entity ("ACCOUNT_FLAGGED", Value.ACCOUNT_FLAGGED);
      end if;
      if not Value.IMAGE_LEVEL_INTERNAL_ERROR.Is_Null then
         Into.Write_Entity ("IMAGE_LEVEL_INTERNAL_ERROR", Value.IMAGE_LEVEL_INTERNAL_ERROR);
      end if;
      if not Value.IMAGE_FILE_NOT_ACCESSIBLE.Is_Null then
         Into.Write_Entity ("IMAGE_FILE_NOT_ACCESSIBLE", Value.IMAGE_FILE_NOT_ACCESSIBLE);
      end if;
      if not Value.IMAGE_MALFORMED_URL.Is_Null then
         Into.Write_Entity ("IMAGE_MALFORMED_URL", Value.IMAGE_MALFORMED_URL);
      end if;
      if not Value.IMAGE_FILE_NOT_FOUND.Is_Null then
         Into.Write_Entity ("IMAGE_FILE_NOT_FOUND", Value.IMAGE_FILE_NOT_FOUND);
      end if;
      if not Value.IMAGE_INVALID_FILE.Is_Null then
         Into.Write_Entity ("IMAGE_INVALID_FILE", Value.IMAGE_INVALID_FILE);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsFeedIngestionErrors_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsFeedIngestionErrors_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "LINE_LEVEL_INTERNAL_ERROR", Value.LINE_LEVEL_INTERNAL_ERROR);
      Swagger.Streams.Deserialize (Object, "LARGE_PRODUCT_COUNT_DECREASE", Value.LARGE_PRODUCT_COUNT_DECREASE);
      Swagger.Streams.Deserialize (Object, "ACCOUNT_FLAGGED", Value.ACCOUNT_FLAGGED);
      Swagger.Streams.Deserialize (Object, "IMAGE_LEVEL_INTERNAL_ERROR", Value.IMAGE_LEVEL_INTERNAL_ERROR);
      Swagger.Streams.Deserialize (Object, "IMAGE_FILE_NOT_ACCESSIBLE", Value.IMAGE_FILE_NOT_ACCESSIBLE);
      Swagger.Streams.Deserialize (Object, "IMAGE_MALFORMED_URL", Value.IMAGE_MALFORMED_URL);
      Swagger.Streams.Deserialize (Object, "IMAGE_FILE_NOT_FOUND", Value.IMAGE_FILE_NOT_FOUND);
      Swagger.Streams.Deserialize (Object, "IMAGE_INVALID_FILE", Value.IMAGE_INVALID_FILE);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsFeedIngestionErrors_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsFeedIngestionErrors_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsFeedIngestionInfo_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.IN_STOCK.Is_Null then
         Into.Write_Entity ("IN_STOCK", Value.IN_STOCK);
      end if;
      if not Value.OUT_OF_STOCK.Is_Null then
         Into.Write_Entity ("OUT_OF_STOCK", Value.OUT_OF_STOCK);
      end if;
      if not Value.PREORDER.Is_Null then
         Into.Write_Entity ("PREORDER", Value.PREORDER);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsFeedIngestionInfo_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsFeedIngestionInfo_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "IN_STOCK", Value.IN_STOCK);
      Swagger.Streams.Deserialize (Object, "OUT_OF_STOCK", Value.OUT_OF_STOCK);
      Swagger.Streams.Deserialize (Object, "PREORDER", Value.PREORDER);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsFeedIngestionInfo_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsFeedIngestionInfo_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsFeedIngestionWarnings_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERROR.Is_Null then
         Into.Write_Entity ("ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERROR", Value.ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERROR);
      end if;
      if not Value.ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLE.Is_Null then
         Into.Write_Entity ("ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLE", Value.ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLE);
      end if;
      if not Value.ADDITIONAL_IMAGE_MALFORMED_URL.Is_Null then
         Into.Write_Entity ("ADDITIONAL_IMAGE_MALFORMED_URL", Value.ADDITIONAL_IMAGE_MALFORMED_URL);
      end if;
      if not Value.ADDITIONAL_IMAGE_FILE_NOT_FOUND.Is_Null then
         Into.Write_Entity ("ADDITIONAL_IMAGE_FILE_NOT_FOUND", Value.ADDITIONAL_IMAGE_FILE_NOT_FOUND);
      end if;
      if not Value.ADDITIONAL_IMAGE_INVALID_FILE.Is_Null then
         Into.Write_Entity ("ADDITIONAL_IMAGE_INVALID_FILE", Value.ADDITIONAL_IMAGE_INVALID_FILE);
      end if;
      if not Value.HOTEL_PRICE_HEADER_IS_PRESENT.Is_Null then
         Into.Write_Entity ("HOTEL_PRICE_HEADER_IS_PRESENT", Value.HOTEL_PRICE_HEADER_IS_PRESENT);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsFeedIngestionWarnings_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsFeedIngestionWarnings_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERROR", Value.ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERROR);
      Swagger.Streams.Deserialize (Object, "ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLE", Value.ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLE);
      Swagger.Streams.Deserialize (Object, "ADDITIONAL_IMAGE_MALFORMED_URL", Value.ADDITIONAL_IMAGE_MALFORMED_URL);
      Swagger.Streams.Deserialize (Object, "ADDITIONAL_IMAGE_FILE_NOT_FOUND", Value.ADDITIONAL_IMAGE_FILE_NOT_FOUND);
      Swagger.Streams.Deserialize (Object, "ADDITIONAL_IMAGE_INVALID_FILE", Value.ADDITIONAL_IMAGE_INVALID_FILE);
      Swagger.Streams.Deserialize (Object, "HOTEL_PRICE_HEADER_IS_PRESENT", Value.HOTEL_PRICE_HEADER_IS_PRESENT);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsFeedIngestionWarnings_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsFeedIngestionWarnings_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsFeedProcessingSchedule_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("time", Value.Time);
      Into.Write_Entity ("timezone", Value.Timezone);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsFeedProcessingSchedule_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsFeedProcessingSchedule_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "time", Value.Time);
      Swagger.Streams.Deserialize (Object, "timezone", Value.Timezone);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsFeedProcessingSchedule_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsFeedProcessingSchedule_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_CatalogsFeedProcessingStatus_Type (Value : in String) return .Models.CatalogsFeedProcessingStatus_Type is
   begin
      if Value = "COMPLETED" then
         return COMPLETED;
      end if;
      if Value = "FAILED" then
         return FAILED;
      end if;
      if Value = "PROCESSING" then
         return PROCESSING;
      end if;
      raise Constraint_Error;
   end To_CatalogsFeedProcessingStatus_Type;

   function To_String (Value : in .Models.CatalogsFeedProcessingStatus_Type) return String is
   begin
      case Value is
         when COMPLETED =>
            return "COMPLETED";

         when FAILED =>
            return "FAILED";

         when PROCESSING =>
            return "PROCESSING";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsFeedProcessingStatus_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsFeedProcessingStatus_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsFeedProcessingStatus_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_CatalogsFeedProcessingStatus_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsFeedProcessingStatus_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsFeedProcessingStatus_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsFeedProductCounts_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Original.Is_Null then
         Into.Write_Entity ("original", Value.Original);
      end if;
      if not Value.Ingested.Is_Null then
         Into.Write_Entity ("ingested", Value.Ingested);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsFeedProductCounts_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsFeedProductCounts_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "original", Value.Original);
      Swagger.Streams.Deserialize (Object, "ingested", Value.Ingested);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsFeedProductCounts_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsFeedProductCounts_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsFeedValidationErrors_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.FETCH_ERROR.Is_Null then
         Into.Write_Entity ("FETCH_ERROR", Value.FETCH_ERROR);
      end if;
      if not Value.FETCH_INACTIVE_FEED_ERROR.Is_Null then
         Into.Write_Entity ("FETCH_INACTIVE_FEED_ERROR", Value.FETCH_INACTIVE_FEED_ERROR);
      end if;
      if not Value.ENCODING_ERROR.Is_Null then
         Into.Write_Entity ("ENCODING_ERROR", Value.ENCODING_ERROR);
      end if;
      if not Value.DELIMITER_ERROR.Is_Null then
         Into.Write_Entity ("DELIMITER_ERROR", Value.DELIMITER_ERROR);
      end if;
      if not Value.REQUIRED_COLUMNS_MISSING.Is_Null then
         Into.Write_Entity ("REQUIRED_COLUMNS_MISSING", Value.REQUIRED_COLUMNS_MISSING);
      end if;
      if not Value.DUPLICATE_PRODUCTS.Is_Null then
         Into.Write_Entity ("DUPLICATE_PRODUCTS", Value.DUPLICATE_PRODUCTS);
      end if;
      if not Value.IMAGE_LINK_INVALID.Is_Null then
         Into.Write_Entity ("IMAGE_LINK_INVALID", Value.IMAGE_LINK_INVALID);
      end if;
      if not Value.ITEMID_MISSING.Is_Null then
         Into.Write_Entity ("ITEMID_MISSING", Value.ITEMID_MISSING);
      end if;
      if not Value.TITLE_MISSING.Is_Null then
         Into.Write_Entity ("TITLE_MISSING", Value.TITLE_MISSING);
      end if;
      if not Value.DESCRIPTION_MISSING.Is_Null then
         Into.Write_Entity ("DESCRIPTION_MISSING", Value.DESCRIPTION_MISSING);
      end if;
      if not Value.PRODUCT_LINK_MISSING.Is_Null then
         Into.Write_Entity ("PRODUCT_LINK_MISSING", Value.PRODUCT_LINK_MISSING);
      end if;
      if not Value.IMAGE_LINK_MISSING.Is_Null then
         Into.Write_Entity ("IMAGE_LINK_MISSING", Value.IMAGE_LINK_MISSING);
      end if;
      if not Value.AVAILABILITY_INVALID.Is_Null then
         Into.Write_Entity ("AVAILABILITY_INVALID", Value.AVAILABILITY_INVALID);
      end if;
      if not Value.PRODUCT_PRICE_INVALID.Is_Null then
         Into.Write_Entity ("PRODUCT_PRICE_INVALID", Value.PRODUCT_PRICE_INVALID);
      end if;
      if not Value.LINK_FORMAT_INVALID.Is_Null then
         Into.Write_Entity ("LINK_FORMAT_INVALID", Value.LINK_FORMAT_INVALID);
      end if;
      if not Value.PARSE_LINE_ERROR.Is_Null then
         Into.Write_Entity ("PARSE_LINE_ERROR", Value.PARSE_LINE_ERROR);
      end if;
      if not Value.ADWORDS_FORMAT_INVALID.Is_Null then
         Into.Write_Entity ("ADWORDS_FORMAT_INVALID", Value.ADWORDS_FORMAT_INVALID);
      end if;
      if not Value.INTERNAL_SERVICE_ERROR.Is_Null then
         Into.Write_Entity ("INTERNAL_SERVICE_ERROR", Value.INTERNAL_SERVICE_ERROR);
      end if;
      if not Value.NO_VERIFIED_DOMAIN.Is_Null then
         Into.Write_Entity ("NO_VERIFIED_DOMAIN", Value.NO_VERIFIED_DOMAIN);
      end if;
      if not Value.ADULT_INVALID.Is_Null then
         Into.Write_Entity ("ADULT_INVALID", Value.ADULT_INVALID);
      end if;
      if not Value.IMAGE_LINK_LENGTH_TOO_LONG.Is_Null then
         Into.Write_Entity ("IMAGE_LINK_LENGTH_TOO_LONG", Value.IMAGE_LINK_LENGTH_TOO_LONG);
      end if;
      if not Value.INVALID_DOMAIN.Is_Null then
         Into.Write_Entity ("INVALID_DOMAIN", Value.INVALID_DOMAIN);
      end if;
      if not Value.FEED_LENGTH_TOO_LONG.Is_Null then
         Into.Write_Entity ("FEED_LENGTH_TOO_LONG", Value.FEED_LENGTH_TOO_LONG);
      end if;
      if not Value.LINK_LENGTH_TOO_LONG.Is_Null then
         Into.Write_Entity ("LINK_LENGTH_TOO_LONG", Value.LINK_LENGTH_TOO_LONG);
      end if;
      if not Value.MALFORMED_XML.Is_Null then
         Into.Write_Entity ("MALFORMED_XML", Value.MALFORMED_XML);
      end if;
      if not Value.PRICE_MISSING.Is_Null then
         Into.Write_Entity ("PRICE_MISSING", Value.PRICE_MISSING);
      end if;
      if not Value.FEED_TOO_SMALL.Is_Null then
         Into.Write_Entity ("FEED_TOO_SMALL", Value.FEED_TOO_SMALL);
      end if;
      if not Value.MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED.Is_Null then
         Into.Write_Entity ("MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED", Value.MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED);
      end if;
      if not Value.ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE.Is_Null then
         Into.Write_Entity ("ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE", Value.ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE);
      end if;
      if not Value.PINJOIN_CONTENT_UNSAFE.Is_Null then
         Into.Write_Entity ("PINJOIN_CONTENT_UNSAFE", Value.PINJOIN_CONTENT_UNSAFE);
      end if;
      if not Value.BLOCKLISTED_IMAGE_SIGNATURE.Is_Null then
         Into.Write_Entity ("BLOCKLISTED_IMAGE_SIGNATURE", Value.BLOCKLISTED_IMAGE_SIGNATURE);
      end if;
      if not Value.LIST_PRICE_INVALID.Is_Null then
         Into.Write_Entity ("LIST_PRICE_INVALID", Value.LIST_PRICE_INVALID);
      end if;
      if not Value.PRICE_CANNOT_BE_DETERMINED.Is_Null then
         Into.Write_Entity ("PRICE_CANNOT_BE_DETERMINED", Value.PRICE_CANNOT_BE_DETERMINED);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsFeedValidationErrors_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsFeedValidationErrors_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "FETCH_ERROR", Value.FETCH_ERROR);
      Swagger.Streams.Deserialize (Object, "FETCH_INACTIVE_FEED_ERROR", Value.FETCH_INACTIVE_FEED_ERROR);
      Swagger.Streams.Deserialize (Object, "ENCODING_ERROR", Value.ENCODING_ERROR);
      Swagger.Streams.Deserialize (Object, "DELIMITER_ERROR", Value.DELIMITER_ERROR);
      Swagger.Streams.Deserialize (Object, "REQUIRED_COLUMNS_MISSING", Value.REQUIRED_COLUMNS_MISSING);
      Swagger.Streams.Deserialize (Object, "DUPLICATE_PRODUCTS", Value.DUPLICATE_PRODUCTS);
      Swagger.Streams.Deserialize (Object, "IMAGE_LINK_INVALID", Value.IMAGE_LINK_INVALID);
      Swagger.Streams.Deserialize (Object, "ITEMID_MISSING", Value.ITEMID_MISSING);
      Swagger.Streams.Deserialize (Object, "TITLE_MISSING", Value.TITLE_MISSING);
      Swagger.Streams.Deserialize (Object, "DESCRIPTION_MISSING", Value.DESCRIPTION_MISSING);
      Swagger.Streams.Deserialize (Object, "PRODUCT_LINK_MISSING", Value.PRODUCT_LINK_MISSING);
      Swagger.Streams.Deserialize (Object, "IMAGE_LINK_MISSING", Value.IMAGE_LINK_MISSING);
      Swagger.Streams.Deserialize (Object, "AVAILABILITY_INVALID", Value.AVAILABILITY_INVALID);
      Swagger.Streams.Deserialize (Object, "PRODUCT_PRICE_INVALID", Value.PRODUCT_PRICE_INVALID);
      Swagger.Streams.Deserialize (Object, "LINK_FORMAT_INVALID", Value.LINK_FORMAT_INVALID);
      Swagger.Streams.Deserialize (Object, "PARSE_LINE_ERROR", Value.PARSE_LINE_ERROR);
      Swagger.Streams.Deserialize (Object, "ADWORDS_FORMAT_INVALID", Value.ADWORDS_FORMAT_INVALID);
      Swagger.Streams.Deserialize (Object, "INTERNAL_SERVICE_ERROR", Value.INTERNAL_SERVICE_ERROR);
      Swagger.Streams.Deserialize (Object, "NO_VERIFIED_DOMAIN", Value.NO_VERIFIED_DOMAIN);
      Swagger.Streams.Deserialize (Object, "ADULT_INVALID", Value.ADULT_INVALID);
      Swagger.Streams.Deserialize (Object, "IMAGE_LINK_LENGTH_TOO_LONG", Value.IMAGE_LINK_LENGTH_TOO_LONG);
      Swagger.Streams.Deserialize (Object, "INVALID_DOMAIN", Value.INVALID_DOMAIN);
      Swagger.Streams.Deserialize (Object, "FEED_LENGTH_TOO_LONG", Value.FEED_LENGTH_TOO_LONG);
      Swagger.Streams.Deserialize (Object, "LINK_LENGTH_TOO_LONG", Value.LINK_LENGTH_TOO_LONG);
      Swagger.Streams.Deserialize (Object, "MALFORMED_XML", Value.MALFORMED_XML);
      Swagger.Streams.Deserialize (Object, "PRICE_MISSING", Value.PRICE_MISSING);
      Swagger.Streams.Deserialize (Object, "FEED_TOO_SMALL", Value.FEED_TOO_SMALL);
      Swagger.Streams.Deserialize (Object, "MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED", Value.MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED);
      Swagger.Streams.Deserialize (Object, "ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE", Value.ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE);
      Swagger.Streams.Deserialize (Object, "PINJOIN_CONTENT_UNSAFE", Value.PINJOIN_CONTENT_UNSAFE);
      Swagger.Streams.Deserialize (Object, "BLOCKLISTED_IMAGE_SIGNATURE", Value.BLOCKLISTED_IMAGE_SIGNATURE);
      Swagger.Streams.Deserialize (Object, "LIST_PRICE_INVALID", Value.LIST_PRICE_INVALID);
      Swagger.Streams.Deserialize (Object, "PRICE_CANNOT_BE_DETERMINED", Value.PRICE_CANNOT_BE_DETERMINED);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsFeedValidationErrors_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsFeedValidationErrors_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsFeedValidationWarnings_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.AD_LINK_FORMAT_WARNING.Is_Null then
         Into.Write_Entity ("AD_LINK_FORMAT_WARNING", Value.AD_LINK_FORMAT_WARNING);
      end if;
      if not Value.AD_LINK_SAME_AS_LINK.Is_Null then
         Into.Write_Entity ("AD_LINK_SAME_AS_LINK", Value.AD_LINK_SAME_AS_LINK);
      end if;
      if not Value.TITLE_LENGTH_TOO_LONG.Is_Null then
         Into.Write_Entity ("TITLE_LENGTH_TOO_LONG", Value.TITLE_LENGTH_TOO_LONG);
      end if;
      if not Value.DESCRIPTION_LENGTH_TOO_LONG.Is_Null then
         Into.Write_Entity ("DESCRIPTION_LENGTH_TOO_LONG", Value.DESCRIPTION_LENGTH_TOO_LONG);
      end if;
      if not Value.GENDER_INVALID.Is_Null then
         Into.Write_Entity ("GENDER_INVALID", Value.GENDER_INVALID);
      end if;
      if not Value.AGE_GROUP_INVALID.Is_Null then
         Into.Write_Entity ("AGE_GROUP_INVALID", Value.AGE_GROUP_INVALID);
      end if;
      if not Value.SIZE_TYPE_INVALID.Is_Null then
         Into.Write_Entity ("SIZE_TYPE_INVALID", Value.SIZE_TYPE_INVALID);
      end if;
      if not Value.SIZE_SYSTEM_INVALID.Is_Null then
         Into.Write_Entity ("SIZE_SYSTEM_INVALID", Value.SIZE_SYSTEM_INVALID);
      end if;
      if not Value.LINK_FORMAT_WARNING.Is_Null then
         Into.Write_Entity ("LINK_FORMAT_WARNING", Value.LINK_FORMAT_WARNING);
      end if;
      if not Value.SALES_PRICE_INVALID.Is_Null then
         Into.Write_Entity ("SALES_PRICE_INVALID", Value.SALES_PRICE_INVALID);
      end if;
      if not Value.PRODUCT_CATEGORY_DEPTH_WARNING.Is_Null then
         Into.Write_Entity ("PRODUCT_CATEGORY_DEPTH_WARNING", Value.PRODUCT_CATEGORY_DEPTH_WARNING);
      end if;
      if not Value.ADWORDS_FORMAT_WARNING.Is_Null then
         Into.Write_Entity ("ADWORDS_FORMAT_WARNING", Value.ADWORDS_FORMAT_WARNING);
      end if;
      if not Value.ADWORDS_SAME_AS_LINK.Is_Null then
         Into.Write_Entity ("ADWORDS_SAME_AS_LINK", Value.ADWORDS_SAME_AS_LINK);
      end if;
      if not Value.DUPLICATE_HEADERS.Is_Null then
         Into.Write_Entity ("DUPLICATE_HEADERS", Value.DUPLICATE_HEADERS);
      end if;
      if not Value.FETCH_SAME_SIGNATURE.Is_Null then
         Into.Write_Entity ("FETCH_SAME_SIGNATURE", Value.FETCH_SAME_SIGNATURE);
      end if;
      if not Value.ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG.Is_Null then
         Into.Write_Entity ("ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG", Value.ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG);
      end if;
      if not Value.ADDITIONAL_IMAGE_LINK_WARNING.Is_Null then
         Into.Write_Entity ("ADDITIONAL_IMAGE_LINK_WARNING", Value.ADDITIONAL_IMAGE_LINK_WARNING);
      end if;
      if not Value.IMAGE_LINK_WARNING.Is_Null then
         Into.Write_Entity ("IMAGE_LINK_WARNING", Value.IMAGE_LINK_WARNING);
      end if;
      if not Value.SHIPPING_INVALID.Is_Null then
         Into.Write_Entity ("SHIPPING_INVALID", Value.SHIPPING_INVALID);
      end if;
      if not Value.TAX_INVALID.Is_Null then
         Into.Write_Entity ("TAX_INVALID", Value.TAX_INVALID);
      end if;
      if not Value.SHIPPING_WEIGHT_INVALID.Is_Null then
         Into.Write_Entity ("SHIPPING_WEIGHT_INVALID", Value.SHIPPING_WEIGHT_INVALID);
      end if;
      if not Value.EXPIRATION_DATE_INVALID.Is_Null then
         Into.Write_Entity ("EXPIRATION_DATE_INVALID", Value.EXPIRATION_DATE_INVALID);
      end if;
      if not Value.AVAILABILITY_DATE_INVALID.Is_Null then
         Into.Write_Entity ("AVAILABILITY_DATE_INVALID", Value.AVAILABILITY_DATE_INVALID);
      end if;
      if not Value.SALE_DATE_INVALID.Is_Null then
         Into.Write_Entity ("SALE_DATE_INVALID", Value.SALE_DATE_INVALID);
      end if;
      if not Value.WEIGHT_UNIT_INVALID.Is_Null then
         Into.Write_Entity ("WEIGHT_UNIT_INVALID", Value.WEIGHT_UNIT_INVALID);
      end if;
      if not Value.IS_BUNDLE_INVALID.Is_Null then
         Into.Write_Entity ("IS_BUNDLE_INVALID", Value.IS_BUNDLE_INVALID);
      end if;
      if not Value.UPDATED_TIME_INVALID.Is_Null then
         Into.Write_Entity ("UPDATED_TIME_INVALID", Value.UPDATED_TIME_INVALID);
      end if;
      if not Value.CUSTOM_LABEL_LENGTH_TOO_LONG.Is_Null then
         Into.Write_Entity ("CUSTOM_LABEL_LENGTH_TOO_LONG", Value.CUSTOM_LABEL_LENGTH_TOO_LONG);
      end if;
      if not Value.PRODUCT_TYPE_LENGTH_TOO_LONG.Is_Null then
         Into.Write_Entity ("PRODUCT_TYPE_LENGTH_TOO_LONG", Value.PRODUCT_TYPE_LENGTH_TOO_LONG);
      end if;
      if not Value.TOO_MANY_ADDITIONAL_IMAGE_LINKS.Is_Null then
         Into.Write_Entity ("TOO_MANY_ADDITIONAL_IMAGE_LINKS", Value.TOO_MANY_ADDITIONAL_IMAGE_LINKS);
      end if;
      if not Value.MULTIPACK_INVALID.Is_Null then
         Into.Write_Entity ("MULTIPACK_INVALID", Value.MULTIPACK_INVALID);
      end if;
      if not Value.INDEXED_PRODUCT_COUNT_LARGE_DELTA.Is_Null then
         Into.Write_Entity ("INDEXED_PRODUCT_COUNT_LARGE_DELTA", Value.INDEXED_PRODUCT_COUNT_LARGE_DELTA);
      end if;
      if not Value.ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE.Is_Null then
         Into.Write_Entity ("ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE", Value.ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE);
      end if;
      if not Value.OPTIONAL_PRODUCT_CATEGORY_MISSING.Is_Null then
         Into.Write_Entity ("OPTIONAL_PRODUCT_CATEGORY_MISSING", Value.OPTIONAL_PRODUCT_CATEGORY_MISSING);
      end if;
      if not Value.OPTIONAL_PRODUCT_CATEGORY_INVALID.Is_Null then
         Into.Write_Entity ("OPTIONAL_PRODUCT_CATEGORY_INVALID", Value.OPTIONAL_PRODUCT_CATEGORY_INVALID);
      end if;
      if not Value.OPTIONAL_CONDITION_MISSING.Is_Null then
         Into.Write_Entity ("OPTIONAL_CONDITION_MISSING", Value.OPTIONAL_CONDITION_MISSING);
      end if;
      if not Value.OPTIONAL_CONDITION_INVALID.Is_Null then
         Into.Write_Entity ("OPTIONAL_CONDITION_INVALID", Value.OPTIONAL_CONDITION_INVALID);
      end if;
      if not Value.IOS_DEEP_LINK_INVALID.Is_Null then
         Into.Write_Entity ("IOS_DEEP_LINK_INVALID", Value.IOS_DEEP_LINK_INVALID);
      end if;
      if not Value.ANDROID_DEEP_LINK_INVALID.Is_Null then
         Into.Write_Entity ("ANDROID_DEEP_LINK_INVALID", Value.ANDROID_DEEP_LINK_INVALID);
      end if;
      if not Value.UTM_SOURCE_AUTO_CORRECTED.Is_Null then
         Into.Write_Entity ("UTM_SOURCE_AUTO_CORRECTED", Value.UTM_SOURCE_AUTO_CORRECTED);
      end if;
      if not Value.COUNTRY_DOES_NOT_MAP_TO_CURRENCY.Is_Null then
         Into.Write_Entity ("COUNTRY_DOES_NOT_MAP_TO_CURRENCY", Value.COUNTRY_DOES_NOT_MAP_TO_CURRENCY);
      end if;
      if not Value.MIN_AD_PRICE_INVALID.Is_Null then
         Into.Write_Entity ("MIN_AD_PRICE_INVALID", Value.MIN_AD_PRICE_INVALID);
      end if;
      if not Value.GTIN_INVALID.Is_Null then
         Into.Write_Entity ("GTIN_INVALID", Value.GTIN_INVALID);
      end if;
      if not Value.INCONSISTENT_CURRENCY_VALUES.Is_Null then
         Into.Write_Entity ("INCONSISTENT_CURRENCY_VALUES", Value.INCONSISTENT_CURRENCY_VALUES);
      end if;
      if not Value.SALES_PRICE_TOO_LOW.Is_Null then
         Into.Write_Entity ("SALES_PRICE_TOO_LOW", Value.SALES_PRICE_TOO_LOW);
      end if;
      if not Value.SHIPPING_WIDTH_INVALID.Is_Null then
         Into.Write_Entity ("SHIPPING_WIDTH_INVALID", Value.SHIPPING_WIDTH_INVALID);
      end if;
      if not Value.SHIPPING_HEIGHT_INVALID.Is_Null then
         Into.Write_Entity ("SHIPPING_HEIGHT_INVALID", Value.SHIPPING_HEIGHT_INVALID);
      end if;
      if not Value.SALES_PRICE_TOO_HIGH.Is_Null then
         Into.Write_Entity ("SALES_PRICE_TOO_HIGH", Value.SALES_PRICE_TOO_HIGH);
      end if;
      if not Value.MPN_INVALID.Is_Null then
         Into.Write_Entity ("MPN_INVALID", Value.MPN_INVALID);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsFeedValidationWarnings_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsFeedValidationWarnings_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "AD_LINK_FORMAT_WARNING", Value.AD_LINK_FORMAT_WARNING);
      Swagger.Streams.Deserialize (Object, "AD_LINK_SAME_AS_LINK", Value.AD_LINK_SAME_AS_LINK);
      Swagger.Streams.Deserialize (Object, "TITLE_LENGTH_TOO_LONG", Value.TITLE_LENGTH_TOO_LONG);
      Swagger.Streams.Deserialize (Object, "DESCRIPTION_LENGTH_TOO_LONG", Value.DESCRIPTION_LENGTH_TOO_LONG);
      Swagger.Streams.Deserialize (Object, "GENDER_INVALID", Value.GENDER_INVALID);
      Swagger.Streams.Deserialize (Object, "AGE_GROUP_INVALID", Value.AGE_GROUP_INVALID);
      Swagger.Streams.Deserialize (Object, "SIZE_TYPE_INVALID", Value.SIZE_TYPE_INVALID);
      Swagger.Streams.Deserialize (Object, "SIZE_SYSTEM_INVALID", Value.SIZE_SYSTEM_INVALID);
      Swagger.Streams.Deserialize (Object, "LINK_FORMAT_WARNING", Value.LINK_FORMAT_WARNING);
      Swagger.Streams.Deserialize (Object, "SALES_PRICE_INVALID", Value.SALES_PRICE_INVALID);
      Swagger.Streams.Deserialize (Object, "PRODUCT_CATEGORY_DEPTH_WARNING", Value.PRODUCT_CATEGORY_DEPTH_WARNING);
      Swagger.Streams.Deserialize (Object, "ADWORDS_FORMAT_WARNING", Value.ADWORDS_FORMAT_WARNING);
      Swagger.Streams.Deserialize (Object, "ADWORDS_SAME_AS_LINK", Value.ADWORDS_SAME_AS_LINK);
      Swagger.Streams.Deserialize (Object, "DUPLICATE_HEADERS", Value.DUPLICATE_HEADERS);
      Swagger.Streams.Deserialize (Object, "FETCH_SAME_SIGNATURE", Value.FETCH_SAME_SIGNATURE);
      Swagger.Streams.Deserialize (Object, "ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG", Value.ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG);
      Swagger.Streams.Deserialize (Object, "ADDITIONAL_IMAGE_LINK_WARNING", Value.ADDITIONAL_IMAGE_LINK_WARNING);
      Swagger.Streams.Deserialize (Object, "IMAGE_LINK_WARNING", Value.IMAGE_LINK_WARNING);
      Swagger.Streams.Deserialize (Object, "SHIPPING_INVALID", Value.SHIPPING_INVALID);
      Swagger.Streams.Deserialize (Object, "TAX_INVALID", Value.TAX_INVALID);
      Swagger.Streams.Deserialize (Object, "SHIPPING_WEIGHT_INVALID", Value.SHIPPING_WEIGHT_INVALID);
      Swagger.Streams.Deserialize (Object, "EXPIRATION_DATE_INVALID", Value.EXPIRATION_DATE_INVALID);
      Swagger.Streams.Deserialize (Object, "AVAILABILITY_DATE_INVALID", Value.AVAILABILITY_DATE_INVALID);
      Swagger.Streams.Deserialize (Object, "SALE_DATE_INVALID", Value.SALE_DATE_INVALID);
      Swagger.Streams.Deserialize (Object, "WEIGHT_UNIT_INVALID", Value.WEIGHT_UNIT_INVALID);
      Swagger.Streams.Deserialize (Object, "IS_BUNDLE_INVALID", Value.IS_BUNDLE_INVALID);
      Swagger.Streams.Deserialize (Object, "UPDATED_TIME_INVALID", Value.UPDATED_TIME_INVALID);
      Swagger.Streams.Deserialize (Object, "CUSTOM_LABEL_LENGTH_TOO_LONG", Value.CUSTOM_LABEL_LENGTH_TOO_LONG);
      Swagger.Streams.Deserialize (Object, "PRODUCT_TYPE_LENGTH_TOO_LONG", Value.PRODUCT_TYPE_LENGTH_TOO_LONG);
      Swagger.Streams.Deserialize (Object, "TOO_MANY_ADDITIONAL_IMAGE_LINKS", Value.TOO_MANY_ADDITIONAL_IMAGE_LINKS);
      Swagger.Streams.Deserialize (Object, "MULTIPACK_INVALID", Value.MULTIPACK_INVALID);
      Swagger.Streams.Deserialize (Object, "INDEXED_PRODUCT_COUNT_LARGE_DELTA", Value.INDEXED_PRODUCT_COUNT_LARGE_DELTA);
      Swagger.Streams.Deserialize (Object, "ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE", Value.ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE);
      Swagger.Streams.Deserialize (Object, "OPTIONAL_PRODUCT_CATEGORY_MISSING", Value.OPTIONAL_PRODUCT_CATEGORY_MISSING);
      Swagger.Streams.Deserialize (Object, "OPTIONAL_PRODUCT_CATEGORY_INVALID", Value.OPTIONAL_PRODUCT_CATEGORY_INVALID);
      Swagger.Streams.Deserialize (Object, "OPTIONAL_CONDITION_MISSING", Value.OPTIONAL_CONDITION_MISSING);
      Swagger.Streams.Deserialize (Object, "OPTIONAL_CONDITION_INVALID", Value.OPTIONAL_CONDITION_INVALID);
      Swagger.Streams.Deserialize (Object, "IOS_DEEP_LINK_INVALID", Value.IOS_DEEP_LINK_INVALID);
      Swagger.Streams.Deserialize (Object, "ANDROID_DEEP_LINK_INVALID", Value.ANDROID_DEEP_LINK_INVALID);
      Swagger.Streams.Deserialize (Object, "UTM_SOURCE_AUTO_CORRECTED", Value.UTM_SOURCE_AUTO_CORRECTED);
      Swagger.Streams.Deserialize (Object, "COUNTRY_DOES_NOT_MAP_TO_CURRENCY", Value.COUNTRY_DOES_NOT_MAP_TO_CURRENCY);
      Swagger.Streams.Deserialize (Object, "MIN_AD_PRICE_INVALID", Value.MIN_AD_PRICE_INVALID);
      Swagger.Streams.Deserialize (Object, "GTIN_INVALID", Value.GTIN_INVALID);
      Swagger.Streams.Deserialize (Object, "INCONSISTENT_CURRENCY_VALUES", Value.INCONSISTENT_CURRENCY_VALUES);
      Swagger.Streams.Deserialize (Object, "SALES_PRICE_TOO_LOW", Value.SALES_PRICE_TOO_LOW);
      Swagger.Streams.Deserialize (Object, "SHIPPING_WIDTH_INVALID", Value.SHIPPING_WIDTH_INVALID);
      Swagger.Streams.Deserialize (Object, "SHIPPING_HEIGHT_INVALID", Value.SHIPPING_HEIGHT_INVALID);
      Swagger.Streams.Deserialize (Object, "SALES_PRICE_TOO_HIGH", Value.SALES_PRICE_TOO_HIGH);
      Swagger.Streams.Deserialize (Object, "MPN_INVALID", Value.MPN_INVALID);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsFeedValidationWarnings_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsFeedValidationWarnings_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsFeedsCreateRequestDefaultLocale_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsFeedsCreateRequestDefaultLocale_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsFeedsCreateRequestDefaultLocale_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsFeedsCreateRequestDefaultLocale_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsFeedsCreateRequestDefaultLocale_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_CatalogsFormat_Type (Value : in String) return .Models.CatalogsFormat_Type is
   begin
      if Value = "TSV" then
         return TSV;
      end if;
      if Value = "CSV" then
         return CSV;
      end if;
      if Value = "XML" then
         return XML;
      end if;
      raise Constraint_Error;
   end To_CatalogsFormat_Type;

   function To_String (Value : in .Models.CatalogsFormat_Type) return String is
   begin
      case Value is
         when TSV =>
            return "TSV";

         when CSV =>
            return "CSV";

         when XML =>
            return "XML";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsFormat_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsFormat_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsFormat_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_CatalogsFormat_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsFormat_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsFormat_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsHotelAddress_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Addr_1.Is_Null then
         Into.Write_Entity ("addr1", Value.Addr_1);
      end if;
      if not Value.City.Is_Null then
         Into.Write_Entity ("city", Value.City);
      end if;
      if not Value.Region.Is_Null then
         Into.Write_Entity ("region", Value.Region);
      end if;
      if not Value.Country.Is_Null then
         Into.Write_Entity ("country", Value.Country);
      end if;
      if not Value.Postal_Code.Is_Null then
         Into.Write_Entity ("postal_code", Value.Postal_Code);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsHotelAddress_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsHotelAddress_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "addr1", Value.Addr_1);
      Swagger.Streams.Deserialize (Object, "city", Value.City);
      Swagger.Streams.Deserialize (Object, "region", Value.Region);
      Swagger.Streams.Deserialize (Object, "country", Value.Country);
      Swagger.Streams.Deserialize (Object, "postal_code", Value.Postal_Code);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsHotelAddress_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsHotelAddress_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsHotelAttributesAllOfMainImage_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Link.Is_Null then
         Into.Write_Entity ("link", Value.Link);
      end if;
      Serialize (Into, "tag", Value.Tag);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsHotelAttributesAllOfMainImage_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsHotelAttributesAllOfMainImage_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "link", Value.Link);
      Swagger.Streams.Deserialize (Object, "tag", Value.Tag);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsHotelAttributesAllOfMainImage_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsHotelAttributesAllOfMainImage_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsHotelGuestRatings_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "score", Value.Score);
      if not Value.Number_Of_Reviewers.Is_Null then
         Into.Write_Entity ("number_of_reviewers", Value.Number_Of_Reviewers);
      end if;
      Serialize (Into, "max_score", Value.Max_Score);
      if not Value.Rating_System.Is_Null then
         Into.Write_Entity ("rating_system", Value.Rating_System);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsHotelGuestRatings_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsHotelGuestRatings_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "score", Value.Score);
      Swagger.Streams.Deserialize (Object, "number_of_reviewers", Value.Number_Of_Reviewers);
      Swagger.Streams.Deserialize (Object, "max_score", Value.Max_Score);
      Swagger.Streams.Deserialize (Object, "rating_system", Value.Rating_System);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsHotelGuestRatings_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsHotelGuestRatings_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsHotelItemsFilter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Serialize (Into, "hotel_ids", Value.Hotel_Ids);
      if not Value.Catalog_Id.Is_Null then
         Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsHotelItemsFilter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsHotelItemsFilter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "hotel_ids", Value.Hotel_Ids);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsHotelItemsFilter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsHotelItemsFilter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsHotelItemsPostFilter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Serialize (Into, "hotel_ids", Value.Hotel_Ids);
      if not Value.Catalog_Id.Is_Null then
         Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsHotelItemsPostFilter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsHotelItemsPostFilter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "hotel_ids", Value.Hotel_Ids);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsHotelItemsPostFilter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsHotelItemsPostFilter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsHotelProductGroupProductCounts_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Serialize (Into, "total", Value.Total);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsHotelProductGroupProductCounts_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsHotelProductGroupProductCounts_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "total", Value.Total);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsHotelProductGroupProductCounts_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsHotelProductGroupProductCounts_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsHotelProductMetadata_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("hotel_id", Value.Hotel_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsHotelProductMetadata_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsHotelProductMetadata_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "hotel_id", Value.Hotel_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsHotelProductMetadata_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsHotelProductMetadata_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsHotelReportParametersReport_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Report_Type.Is_Null then
         Into.Write_Entity ("report_type", Value.Report_Type);
      end if;
      Into.Write_Entity ("feed_id", Value.Feed_Id);
      if not Value.Processing_Result_Id.Is_Null then
         Into.Write_Entity ("processing_result_id", Value.Processing_Result_Id);
      end if;
      if not Value.Catalog_Id.Is_Null then
         Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsHotelReportParametersReport_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsHotelReportParametersReport_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "report_type", Value.Report_Type);
      Swagger.Streams.Deserialize (Object, "feed_id", Value.Feed_Id);
      Swagger.Streams.Deserialize (Object, "processing_result_id", Value.Processing_Result_Id);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsHotelReportParametersReport_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsHotelReportParametersReport_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_CatalogsItemValidationIssue_Type (Value : in String) return .Models.CatalogsItemValidationIssue_Type is
   begin
      if Value = "AD_LINK_FORMAT_WARNING" then
         return AD_LINK_FORMAT_WARNING;
      end if;
      if Value = "AD_LINK_SAME_AS_LINK" then
         return AD_LINK_SAME_AS_LINK;
      end if;
      if Value = "ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG" then
         return ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG;
      end if;
      if Value = "ADDITIONAL_IMAGE_LINK_WARNING" then
         return ADDITIONAL_IMAGE_LINK_WARNING;
      end if;
      if Value = "ADULT_INVALID" then
         return ADULT_INVALID;
      end if;
      if Value = "ADWORDS_FORMAT_INVALID" then
         return ADWORDS_FORMAT_INVALID;
      end if;
      if Value = "ADWORDS_FORMAT_WARNING" then
         return ADWORDS_FORMAT_WARNING;
      end if;
      if Value = "ADWORDS_SAME_AS_LINK" then
         return ADWORDS_SAME_AS_LINK;
      end if;
      if Value = "AGE_GROUP_INVALID" then
         return AGE_GROUP_INVALID;
      end if;
      if Value = "ANDROID_DEEP_LINK_INVALID" then
         return ANDROID_DEEP_LINK_INVALID;
      end if;
      if Value = "AVAILABILITY_DATE_INVALID" then
         return AVAILABILITY_DATE_INVALID;
      end if;
      if Value = "AVAILABILITY_INVALID" then
         return AVAILABILITY_INVALID;
      end if;
      if Value = "BLOCKLISTED_IMAGE_SIGNATURE" then
         return BLOCKLISTED_IMAGE_SIGNATURE;
      end if;
      if Value = "COUNTRY_DOES_NOT_MAP_TO_CURRENCY" then
         return COUNTRY_DOES_NOT_MAP_TO_CURRENCY;
      end if;
      if Value = "CUSTOM_LABEL_LENGTH_TOO_LONG" then
         return CUSTOM_LABEL_LENGTH_TOO_LONG;
      end if;
      if Value = "DESCRIPTION_LENGTH_TOO_LONG" then
         return DESCRIPTION_LENGTH_TOO_LONG;
      end if;
      if Value = "DESCRIPTION_MISSING" then
         return DESCRIPTION_MISSING;
      end if;
      if Value = "DUPLICATE_PRODUCTS" then
         return DUPLICATE_PRODUCTS;
      end if;
      if Value = "EXPIRATION_DATE_INVALID" then
         return EXPIRATION_DATE_INVALID;
      end if;
      if Value = "GENDER_INVALID" then
         return GENDER_INVALID;
      end if;
      if Value = "GTIN_INVALID" then
         return GTIN_INVALID;
      end if;
      if Value = "IMAGE_LINK_INVALID" then
         return IMAGE_LINK_INVALID;
      end if;
      if Value = "IMAGE_LINK_LENGTH_TOO_LONG" then
         return IMAGE_LINK_LENGTH_TOO_LONG;
      end if;
      if Value = "IMAGE_LINK_MISSING" then
         return IMAGE_LINK_MISSING;
      end if;
      if Value = "IMAGE_LINK_WARNING" then
         return IMAGE_LINK_WARNING;
      end if;
      if Value = "INVALID_DOMAIN" then
         return INVALID_DOMAIN;
      end if;
      if Value = "IOS_DEEP_LINK_INVALID" then
         return IOS_DEEP_LINK_INVALID;
      end if;
      if Value = "IS_BUNDLE_INVALID" then
         return IS_BUNDLE_INVALID;
      end if;
      if Value = "ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE" then
         return ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE;
      end if;
      if Value = "ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE" then
         return ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE;
      end if;
      if Value = "ITEMID_MISSING" then
         return ITEMID_MISSING;
      end if;
      if Value = "LINK_FORMAT_INVALID" then
         return LINK_FORMAT_INVALID;
      end if;
      if Value = "LINK_FORMAT_WARNING" then
         return LINK_FORMAT_WARNING;
      end if;
      if Value = "LINK_LENGTH_TOO_LONG" then
         return LINK_LENGTH_TOO_LONG;
      end if;
      if Value = "LIST_PRICE_INVALID" then
         return LIST_PRICE_INVALID;
      end if;
      if Value = "MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED" then
         return MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED;
      end if;
      if Value = "MIN_AD_PRICE_INVALID" then
         return MIN_AD_PRICE_INVALID;
      end if;
      if Value = "MPN_INVALID" then
         return MPN_INVALID;
      end if;
      if Value = "MULTIPACK_INVALID" then
         return MULTIPACK_INVALID;
      end if;
      if Value = "OPTIONAL_CONDITION_INVALID" then
         return OPTIONAL_CONDITION_INVALID;
      end if;
      if Value = "OPTIONAL_CONDITION_MISSING" then
         return OPTIONAL_CONDITION_MISSING;
      end if;
      if Value = "OPTIONAL_PRODUCT_CATEGORY_INVALID" then
         return OPTIONAL_PRODUCT_CATEGORY_INVALID;
      end if;
      if Value = "OPTIONAL_PRODUCT_CATEGORY_MISSING" then
         return OPTIONAL_PRODUCT_CATEGORY_MISSING;
      end if;
      if Value = "PARSE_LINE_ERROR" then
         return PARSE_LINE_ERROR;
      end if;
      if Value = "PINJOIN_CONTENT_UNSAFE" then
         return PINJOIN_CONTENT_UNSAFE;
      end if;
      if Value = "PRICE_CANNOT_BE_DETERMINED" then
         return PRICE_CANNOT_BE_DETERMINED;
      end if;
      if Value = "PRICE_MISSING" then
         return PRICE_MISSING;
      end if;
      if Value = "PRODUCT_CATEGORY_DEPTH_WARNING" then
         return PRODUCT_CATEGORY_DEPTH_WARNING;
      end if;
      if Value = "PRODUCT_LINK_MISSING" then
         return PRODUCT_LINK_MISSING;
      end if;
      if Value = "PRODUCT_PRICE_INVALID" then
         return PRODUCT_PRICE_INVALID;
      end if;
      if Value = "PRODUCT_TYPE_LENGTH_TOO_LONG" then
         return PRODUCT_TYPE_LENGTH_TOO_LONG;
      end if;
      if Value = "SALE_DATE_INVALID" then
         return SALE_DATE_INVALID;
      end if;
      if Value = "SALES_PRICE_INVALID" then
         return SALES_PRICE_INVALID;
      end if;
      if Value = "SALES_PRICE_TOO_HIGH" then
         return SALES_PRICE_TOO_HIGH;
      end if;
      if Value = "SALES_PRICE_TOO_LOW" then
         return SALES_PRICE_TOO_LOW;
      end if;
      if Value = "SHIPPING_INVALID" then
         return SHIPPING_INVALID;
      end if;
      if Value = "SHIPPING_HEIGHT_INVALID" then
         return SHIPPING_HEIGHT_INVALID;
      end if;
      if Value = "SHIPPING_WEIGHT_INVALID" then
         return SHIPPING_WEIGHT_INVALID;
      end if;
      if Value = "SHIPPING_WIDTH_INVALID" then
         return SHIPPING_WIDTH_INVALID;
      end if;
      if Value = "SIZE_SYSTEM_INVALID" then
         return SIZE_SYSTEM_INVALID;
      end if;
      if Value = "SIZE_TYPE_INVALID" then
         return SIZE_TYPE_INVALID;
      end if;
      if Value = "TAX_INVALID" then
         return TAX_INVALID;
      end if;
      if Value = "TITLE_LENGTH_TOO_LONG" then
         return TITLE_LENGTH_TOO_LONG;
      end if;
      if Value = "TITLE_MISSING" then
         return TITLE_MISSING;
      end if;
      if Value = "TOO_MANY_ADDITIONAL_IMAGE_LINKS" then
         return TOO_MANY_ADDITIONAL_IMAGE_LINKS;
      end if;
      if Value = "UTM_SOURCE_AUTO_CORRECTED" then
         return UTM_SOURCE_AUTO_CORRECTED;
      end if;
      if Value = "WEIGHT_UNIT_INVALID" then
         return WEIGHT_UNIT_INVALID;
      end if;
      raise Constraint_Error;
   end To_CatalogsItemValidationIssue_Type;

   function To_String (Value : in .Models.CatalogsItemValidationIssue_Type) return String is
   begin
      case Value is
         when AD_LINK_FORMAT_WARNING =>
            return "AD_LINK_FORMAT_WARNING";

         when AD_LINK_SAME_AS_LINK =>
            return "AD_LINK_SAME_AS_LINK";

         when ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG =>
            return "ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG";

         when ADDITIONAL_IMAGE_LINK_WARNING =>
            return "ADDITIONAL_IMAGE_LINK_WARNING";

         when ADULT_INVALID =>
            return "ADULT_INVALID";

         when ADWORDS_FORMAT_INVALID =>
            return "ADWORDS_FORMAT_INVALID";

         when ADWORDS_FORMAT_WARNING =>
            return "ADWORDS_FORMAT_WARNING";

         when ADWORDS_SAME_AS_LINK =>
            return "ADWORDS_SAME_AS_LINK";

         when AGE_GROUP_INVALID =>
            return "AGE_GROUP_INVALID";

         when ANDROID_DEEP_LINK_INVALID =>
            return "ANDROID_DEEP_LINK_INVALID";

         when AVAILABILITY_DATE_INVALID =>
            return "AVAILABILITY_DATE_INVALID";

         when AVAILABILITY_INVALID =>
            return "AVAILABILITY_INVALID";

         when BLOCKLISTED_IMAGE_SIGNATURE =>
            return "BLOCKLISTED_IMAGE_SIGNATURE";

         when COUNTRY_DOES_NOT_MAP_TO_CURRENCY =>
            return "COUNTRY_DOES_NOT_MAP_TO_CURRENCY";

         when CUSTOM_LABEL_LENGTH_TOO_LONG =>
            return "CUSTOM_LABEL_LENGTH_TOO_LONG";

         when DESCRIPTION_LENGTH_TOO_LONG =>
            return "DESCRIPTION_LENGTH_TOO_LONG";

         when DESCRIPTION_MISSING =>
            return "DESCRIPTION_MISSING";

         when DUPLICATE_PRODUCTS =>
            return "DUPLICATE_PRODUCTS";

         when EXPIRATION_DATE_INVALID =>
            return "EXPIRATION_DATE_INVALID";

         when GENDER_INVALID =>
            return "GENDER_INVALID";

         when GTIN_INVALID =>
            return "GTIN_INVALID";

         when IMAGE_LINK_INVALID =>
            return "IMAGE_LINK_INVALID";

         when IMAGE_LINK_LENGTH_TOO_LONG =>
            return "IMAGE_LINK_LENGTH_TOO_LONG";

         when IMAGE_LINK_MISSING =>
            return "IMAGE_LINK_MISSING";

         when IMAGE_LINK_WARNING =>
            return "IMAGE_LINK_WARNING";

         when INVALID_DOMAIN =>
            return "INVALID_DOMAIN";

         when IOS_DEEP_LINK_INVALID =>
            return "IOS_DEEP_LINK_INVALID";

         when IS_BUNDLE_INVALID =>
            return "IS_BUNDLE_INVALID";

         when ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE =>
            return "ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE";

         when ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE =>
            return "ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE";

         when ITEMID_MISSING =>
            return "ITEMID_MISSING";

         when LINK_FORMAT_INVALID =>
            return "LINK_FORMAT_INVALID";

         when LINK_FORMAT_WARNING =>
            return "LINK_FORMAT_WARNING";

         when LINK_LENGTH_TOO_LONG =>
            return "LINK_LENGTH_TOO_LONG";

         when LIST_PRICE_INVALID =>
            return "LIST_PRICE_INVALID";

         when MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED =>
            return "MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED";

         when MIN_AD_PRICE_INVALID =>
            return "MIN_AD_PRICE_INVALID";

         when MPN_INVALID =>
            return "MPN_INVALID";

         when MULTIPACK_INVALID =>
            return "MULTIPACK_INVALID";

         when OPTIONAL_CONDITION_INVALID =>
            return "OPTIONAL_CONDITION_INVALID";

         when OPTIONAL_CONDITION_MISSING =>
            return "OPTIONAL_CONDITION_MISSING";

         when OPTIONAL_PRODUCT_CATEGORY_INVALID =>
            return "OPTIONAL_PRODUCT_CATEGORY_INVALID";

         when OPTIONAL_PRODUCT_CATEGORY_MISSING =>
            return "OPTIONAL_PRODUCT_CATEGORY_MISSING";

         when PARSE_LINE_ERROR =>
            return "PARSE_LINE_ERROR";

         when PINJOIN_CONTENT_UNSAFE =>
            return "PINJOIN_CONTENT_UNSAFE";

         when PRICE_CANNOT_BE_DETERMINED =>
            return "PRICE_CANNOT_BE_DETERMINED";

         when PRICE_MISSING =>
            return "PRICE_MISSING";

         when PRODUCT_CATEGORY_DEPTH_WARNING =>
            return "PRODUCT_CATEGORY_DEPTH_WARNING";

         when PRODUCT_LINK_MISSING =>
            return "PRODUCT_LINK_MISSING";

         when PRODUCT_PRICE_INVALID =>
            return "PRODUCT_PRICE_INVALID";

         when PRODUCT_TYPE_LENGTH_TOO_LONG =>
            return "PRODUCT_TYPE_LENGTH_TOO_LONG";

         when SALE_DATE_INVALID =>
            return "SALE_DATE_INVALID";

         when SALES_PRICE_INVALID =>
            return "SALES_PRICE_INVALID";

         when SALES_PRICE_TOO_HIGH =>
            return "SALES_PRICE_TOO_HIGH";

         when SALES_PRICE_TOO_LOW =>
            return "SALES_PRICE_TOO_LOW";

         when SHIPPING_INVALID =>
            return "SHIPPING_INVALID";

         when SHIPPING_HEIGHT_INVALID =>
            return "SHIPPING_HEIGHT_INVALID";

         when SHIPPING_WEIGHT_INVALID =>
            return "SHIPPING_WEIGHT_INVALID";

         when SHIPPING_WIDTH_INVALID =>
            return "SHIPPING_WIDTH_INVALID";

         when SIZE_SYSTEM_INVALID =>
            return "SIZE_SYSTEM_INVALID";

         when SIZE_TYPE_INVALID =>
            return "SIZE_TYPE_INVALID";

         when TAX_INVALID =>
            return "TAX_INVALID";

         when TITLE_LENGTH_TOO_LONG =>
            return "TITLE_LENGTH_TOO_LONG";

         when TITLE_MISSING =>
            return "TITLE_MISSING";

         when TOO_MANY_ADDITIONAL_IMAGE_LINKS =>
            return "TOO_MANY_ADDITIONAL_IMAGE_LINKS";

         when UTM_SOURCE_AUTO_CORRECTED =>
            return "UTM_SOURCE_AUTO_CORRECTED";

         when WEIGHT_UNIT_INVALID =>
            return "WEIGHT_UNIT_INVALID";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsItemValidationIssue_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsItemValidationIssue_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsItemValidationIssue_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_CatalogsItemValidationIssue_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsItemValidationIssue_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsItemValidationIssue_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsItemsRequestLanguage_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsItemsRequestLanguage_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsItemsRequestLanguage_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsItemsRequestLanguage_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsItemsRequestLanguage_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_CatalogsLocale_Type (Value : in String) return .Models.CatalogsLocale_Type is
   begin
      if Value = "af_ZA" then
         return AF_ZA;
      end if;
      if Value = "ar_SA" then
         return AR_SA;
      end if;
      if Value = "bg_BG" then
         return BG_BG;
      end if;
      if Value = "bn_IN" then
         return BN_IN;
      end if;
      if Value = "cs_CZ" then
         return CS_CZ;
      end if;
      if Value = "da_DK" then
         return DA_DK;
      end if;
      if Value = "de" then
         return DE;
      end if;
      if Value = "el_GR" then
         return EL_GR;
      end if;
      if Value = "en_AU" then
         return EN_AU;
      end if;
      if Value = "en_CA" then
         return EN_CA;
      end if;
      if Value = "en_GB" then
         return EN_GB;
      end if;
      if Value = "en_IN" then
         return EN_IN;
      end if;
      if Value = "en_US" then
         return EN_US;
      end if;
      if Value = "es_419" then
         return ES_419;
      end if;
      if Value = "es_AR" then
         return ES_AR;
      end if;
      if Value = "es_ES" then
         return ES_ES;
      end if;
      if Value = "es_MX" then
         return ES_MX;
      end if;
      if Value = "fi_FI" then
         return FI_FI;
      end if;
      if Value = "fr" then
         return FR;
      end if;
      if Value = "fr_CA" then
         return FR_CA;
      end if;
      if Value = "he_IL" then
         return HE_IL;
      end if;
      if Value = "hi_IN" then
         return HI_IN;
      end if;
      if Value = "hr_HR" then
         return HR_HR;
      end if;
      if Value = "hu_HU" then
         return HU_HU;
      end if;
      if Value = "id_ID" then
         return ID_ID;
      end if;
      if Value = "it" then
         return IT;
      end if;
      if Value = "ja" then
         return JA;
      end if;
      if Value = "ko_KR" then
         return KO_KR;
      end if;
      if Value = "ms_MY" then
         return MS_MY;
      end if;
      if Value = "nb_NO" then
         return NB_NO;
      end if;
      if Value = "nl" then
         return NL;
      end if;
      if Value = "pl_PL" then
         return PL_PL;
      end if;
      if Value = "pt_BR" then
         return PT_BR;
      end if;
      if Value = "pt_PT" then
         return PT_PT;
      end if;
      if Value = "ro_RO" then
         return RO_RO;
      end if;
      if Value = "ru_RU" then
         return RU_RU;
      end if;
      if Value = "sk_SK" then
         return SK_SK;
      end if;
      if Value = "sv_SE" then
         return SV_SE;
      end if;
      if Value = "te_IN" then
         return TE_IN;
      end if;
      if Value = "th_TH" then
         return TH_TH;
      end if;
      if Value = "tl_PH" then
         return TL_PH;
      end if;
      if Value = "tr" then
         return TR;
      end if;
      if Value = "uk_UA" then
         return UK_UA;
      end if;
      if Value = "vi_VN" then
         return VI_VN;
      end if;
      if Value = "zh_CN" then
         return ZH_CN;
      end if;
      if Value = "zh_TW" then
         return ZH_TW;
      end if;
      raise Constraint_Error;
   end To_CatalogsLocale_Type;

   function To_String (Value : in .Models.CatalogsLocale_Type) return String is
   begin
      case Value is
         when AF_ZA =>
            return "af_ZA";

         when AR_SA =>
            return "ar_SA";

         when BG_BG =>
            return "bg_BG";

         when BN_IN =>
            return "bn_IN";

         when CS_CZ =>
            return "cs_CZ";

         when DA_DK =>
            return "da_DK";

         when DE =>
            return "de";

         when EL_GR =>
            return "el_GR";

         when EN_AU =>
            return "en_AU";

         when EN_CA =>
            return "en_CA";

         when EN_GB =>
            return "en_GB";

         when EN_IN =>
            return "en_IN";

         when EN_US =>
            return "en_US";

         when ES_419 =>
            return "es_419";

         when ES_AR =>
            return "es_AR";

         when ES_ES =>
            return "es_ES";

         when ES_MX =>
            return "es_MX";

         when FI_FI =>
            return "fi_FI";

         when FR =>
            return "fr";

         when FR_CA =>
            return "fr_CA";

         when HE_IL =>
            return "he_IL";

         when HI_IN =>
            return "hi_IN";

         when HR_HR =>
            return "hr_HR";

         when HU_HU =>
            return "hu_HU";

         when ID_ID =>
            return "id_ID";

         when IT =>
            return "it";

         when JA =>
            return "ja";

         when KO_KR =>
            return "ko_KR";

         when MS_MY =>
            return "ms_MY";

         when NB_NO =>
            return "nb_NO";

         when NL =>
            return "nl";

         when PL_PL =>
            return "pl_PL";

         when PT_BR =>
            return "pt_BR";

         when PT_PT =>
            return "pt_PT";

         when RO_RO =>
            return "ro_RO";

         when RU_RU =>
            return "ru_RU";

         when SK_SK =>
            return "sk_SK";

         when SV_SE =>
            return "sv_SE";

         when TE_IN =>
            return "te_IN";

         when TH_TH =>
            return "th_TH";

         when TL_PH =>
            return "tl_PH";

         when TR =>
            return "tr";

         when UK_UA =>
            return "uk_UA";

         when VI_VN =>
            return "vi_VN";

         when ZH_CN =>
            return "zh_CN";

         when ZH_TW =>
            return "zh_TW";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsLocale_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsLocale_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsLocale_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_CatalogsLocale_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsLocale_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsLocale_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsProductGroupFilterKeys_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("MIN_PRICE", Value.MIN_PRICE);
      Into.Write_Entity ("MAX_PRICE", Value.MAX_PRICE);
      Into.Write_Entity ("CURRENCY", Value.CURRENCY);
      Into.Write_Entity ("ITEM_ID", Value.ITEM_ID);
      Into.Write_Entity ("AVAILABILITY", Value.AVAILABILITY);
      Into.Write_Entity ("BRAND", Value.BRAND);
      Into.Write_Entity ("CONDITION", Value.CONDITION);
      Into.Write_Entity ("CUSTOM_LABEL_0", Value.CUSTOM_LABEL_0);
      Into.Write_Entity ("CUSTOM_LABEL_1", Value.CUSTOM_LABEL_1);
      Into.Write_Entity ("CUSTOM_LABEL_2", Value.CUSTOM_LABEL_2);
      Into.Write_Entity ("CUSTOM_LABEL_3", Value.CUSTOM_LABEL_3);
      Into.Write_Entity ("CUSTOM_LABEL_4", Value.CUSTOM_LABEL_4);
      Into.Write_Entity ("ITEM_GROUP_ID", Value.ITEM_GROUP_ID);
      Into.Write_Entity ("GENDER", Value.GENDER);
      Into.Write_Entity ("MEDIA_TYPE", Value.MEDIA_TYPE);
      Into.Write_Entity ("PRODUCT_TYPE_4", Value.PRODUCT_TYPE_4);
      Into.Write_Entity ("PRODUCT_TYPE_3", Value.PRODUCT_TYPE_3);
      Into.Write_Entity ("PRODUCT_TYPE_2", Value.PRODUCT_TYPE_2);
      Into.Write_Entity ("PRODUCT_TYPE_1", Value.PRODUCT_TYPE_1);
      Into.Write_Entity ("PRODUCT_TYPE_0", Value.PRODUCT_TYPE_0);
      Into.Write_Entity ("GOOGLE_PRODUCT_CATEGORY_6", Value.GOOGLE_PRODUCT_CATEGORY_6);
      Into.Write_Entity ("GOOGLE_PRODUCT_CATEGORY_5", Value.GOOGLE_PRODUCT_CATEGORY_5);
      Into.Write_Entity ("GOOGLE_PRODUCT_CATEGORY_4", Value.GOOGLE_PRODUCT_CATEGORY_4);
      Into.Write_Entity ("GOOGLE_PRODUCT_CATEGORY_3", Value.GOOGLE_PRODUCT_CATEGORY_3);
      Into.Write_Entity ("GOOGLE_PRODUCT_CATEGORY_2", Value.GOOGLE_PRODUCT_CATEGORY_2);
      Into.Write_Entity ("GOOGLE_PRODUCT_CATEGORY_1", Value.GOOGLE_PRODUCT_CATEGORY_1);
      Into.Write_Entity ("GOOGLE_PRODUCT_CATEGORY_0", Value.GOOGLE_PRODUCT_CATEGORY_0);
      Into.Write_Entity ("PRODUCT_GROUP", Value.PRODUCT_GROUP);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsProductGroupFilterKeys_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsProductGroupFilterKeys_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "MIN_PRICE", Value.MIN_PRICE);
      Swagger.Streams.Deserialize (Object, "MAX_PRICE", Value.MAX_PRICE);
      Swagger.Streams.Deserialize (Object, "CURRENCY", Value.CURRENCY);
      Swagger.Streams.Deserialize (Object, "ITEM_ID", Value.ITEM_ID);
      Swagger.Streams.Deserialize (Object, "AVAILABILITY", Value.AVAILABILITY);
      Swagger.Streams.Deserialize (Object, "BRAND", Value.BRAND);
      Swagger.Streams.Deserialize (Object, "CONDITION", Value.CONDITION);
      Swagger.Streams.Deserialize (Object, "CUSTOM_LABEL_0", Value.CUSTOM_LABEL_0);
      Swagger.Streams.Deserialize (Object, "CUSTOM_LABEL_1", Value.CUSTOM_LABEL_1);
      Swagger.Streams.Deserialize (Object, "CUSTOM_LABEL_2", Value.CUSTOM_LABEL_2);
      Swagger.Streams.Deserialize (Object, "CUSTOM_LABEL_3", Value.CUSTOM_LABEL_3);
      Swagger.Streams.Deserialize (Object, "CUSTOM_LABEL_4", Value.CUSTOM_LABEL_4);
      Swagger.Streams.Deserialize (Object, "ITEM_GROUP_ID", Value.ITEM_GROUP_ID);
      Swagger.Streams.Deserialize (Object, "GENDER", Value.GENDER);
      Swagger.Streams.Deserialize (Object, "MEDIA_TYPE", Value.MEDIA_TYPE);
      Swagger.Streams.Deserialize (Object, "PRODUCT_TYPE_4", Value.PRODUCT_TYPE_4);
      Swagger.Streams.Deserialize (Object, "PRODUCT_TYPE_3", Value.PRODUCT_TYPE_3);
      Swagger.Streams.Deserialize (Object, "PRODUCT_TYPE_2", Value.PRODUCT_TYPE_2);
      Swagger.Streams.Deserialize (Object, "PRODUCT_TYPE_1", Value.PRODUCT_TYPE_1);
      Swagger.Streams.Deserialize (Object, "PRODUCT_TYPE_0", Value.PRODUCT_TYPE_0);
      Swagger.Streams.Deserialize (Object, "GOOGLE_PRODUCT_CATEGORY_6", Value.GOOGLE_PRODUCT_CATEGORY_6);
      Swagger.Streams.Deserialize (Object, "GOOGLE_PRODUCT_CATEGORY_5", Value.GOOGLE_PRODUCT_CATEGORY_5);
      Swagger.Streams.Deserialize (Object, "GOOGLE_PRODUCT_CATEGORY_4", Value.GOOGLE_PRODUCT_CATEGORY_4);
      Swagger.Streams.Deserialize (Object, "GOOGLE_PRODUCT_CATEGORY_3", Value.GOOGLE_PRODUCT_CATEGORY_3);
      Swagger.Streams.Deserialize (Object, "GOOGLE_PRODUCT_CATEGORY_2", Value.GOOGLE_PRODUCT_CATEGORY_2);
      Swagger.Streams.Deserialize (Object, "GOOGLE_PRODUCT_CATEGORY_1", Value.GOOGLE_PRODUCT_CATEGORY_1);
      Swagger.Streams.Deserialize (Object, "GOOGLE_PRODUCT_CATEGORY_0", Value.GOOGLE_PRODUCT_CATEGORY_0);
      Swagger.Streams.Deserialize (Object, "PRODUCT_GROUP", Value.PRODUCT_GROUP);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsProductGroupFilterKeys_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsProductGroupFilterKeys_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsProductGroupMultipleStringCriteria_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "values", Value.Values);
      if not Value.Negated.Is_Null then
         Into.Write_Entity ("negated", Value.Negated);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsProductGroupMultipleStringCriteria_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsProductGroupMultipleStringCriteria_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "values", Value.Values);
      Swagger.Streams.Deserialize (Object, "negated", Value.Negated);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsProductGroupMultipleStringCriteria_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsProductGroupMultipleStringCriteria_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsProductGroupMultipleStringListCriteria_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "values", Value.Values);
      if not Value.Negated.Is_Null then
         Into.Write_Entity ("negated", Value.Negated);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsProductGroupMultipleStringListCriteria_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsProductGroupMultipleStringListCriteria_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "values", Value.Values);
      Swagger.Streams.Deserialize (Object, "negated", Value.Negated);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsProductGroupMultipleStringListCriteria_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsProductGroupMultipleStringListCriteria_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsProductGroupPricingCriteria_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Inclusion.Is_Null then
         Into.Write_Entity ("inclusion", Value.Inclusion);
      end if;
      Serialize (Into, "values", Value.Values);
      if not Value.Negated.Is_Null then
         Into.Write_Entity ("negated", Value.Negated);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsProductGroupPricingCriteria_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsProductGroupPricingCriteria_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "inclusion", Value.Inclusion);
      Swagger.Streams.Deserialize (Object, "values", Value.Values);
      Swagger.Streams.Deserialize (Object, "negated", Value.Negated);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsProductGroupPricingCriteria_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsProductGroupPricingCriteria_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_CatalogsProductGroupStatus_Type (Value : in String) return .Models.CatalogsProductGroupStatus_Type is
   begin
      if Value = "ACTIVE" then
         return ACTIVE;
      end if;
      if Value = "INACTIVE" then
         return INACTIVE;
      end if;
      raise Constraint_Error;
   end To_CatalogsProductGroupStatus_Type;

   function To_String (Value : in .Models.CatalogsProductGroupStatus_Type) return String is
   begin
      case Value is
         when ACTIVE =>
            return "ACTIVE";

         when INACTIVE =>
            return "INACTIVE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsProductGroupStatus_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsProductGroupStatus_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsProductGroupStatus_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_CatalogsProductGroupStatus_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsProductGroupStatus_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsProductGroupStatus_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_CatalogsProductGroupType_Type (Value : in String) return .Models.CatalogsProductGroupType_Type is
   begin
      if Value = "MERCHANT_CREATED" then
         return MERCHANT_CREATED;
      end if;
      if Value = "ALL_PRODUCTS" then
         return ALL_PRODUCTS;
      end if;
      if Value = "BEST_DEALS" then
         return BEST_DEALS;
      end if;
      if Value = "PINNER_FAVORITES" then
         return PINNER_FAVORITES;
      end if;
      if Value = "TOP_SELLERS" then
         return TOP_SELLERS;
      end if;
      if Value = "BACK_IN_STOCK" then
         return BACK_IN_STOCK;
      end if;
      if Value = "NEW_ARRIVALS" then
         return NEW_ARRIVALS;
      end if;
      if Value = "SHOPIFY_COLLECTIONS" then
         return SHOPIFY_COLLECTIONS;
      end if;
      if Value = "I2PC" then
         return I2PC;
      end if;
      raise Constraint_Error;
   end To_CatalogsProductGroupType_Type;

   function To_String (Value : in .Models.CatalogsProductGroupType_Type) return String is
   begin
      case Value is
         when MERCHANT_CREATED =>
            return "MERCHANT_CREATED";

         when ALL_PRODUCTS =>
            return "ALL_PRODUCTS";

         when BEST_DEALS =>
            return "BEST_DEALS";

         when PINNER_FAVORITES =>
            return "PINNER_FAVORITES";

         when TOP_SELLERS =>
            return "TOP_SELLERS";

         when BACK_IN_STOCK =>
            return "BACK_IN_STOCK";

         when NEW_ARRIVALS =>
            return "NEW_ARRIVALS";

         when SHOPIFY_COLLECTIONS =>
            return "SHOPIFY_COLLECTIONS";

         when I2PC =>
            return "I2PC";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsProductGroupType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsProductGroupType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsProductGroupType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_CatalogsProductGroupType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsProductGroupType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsProductGroupType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsReportDistributionIssueFilter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("report_type", Value.Report_Type);
      if not Value.Catalog_Id.Is_Null then
         Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsReportDistributionIssueFilter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsReportDistributionIssueFilter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "report_type", Value.Report_Type);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsReportDistributionIssueFilter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsReportDistributionIssueFilter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsReportDistributionStats_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Report_Type.Is_Null then
         Into.Write_Entity ("report_type", Value.Report_Type);
      end if;
      if not Value.Catalog_Id.Is_Null then
         Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      end if;
      if not Value.Code.Is_Null then
         Into.Write_Entity ("code", Value.Code);
      end if;
      if not Value.Code_Label.Is_Null then
         Into.Write_Entity ("code_label", Value.Code_Label);
      end if;
      if not Value.Message.Is_Null then
         Into.Write_Entity ("message", Value.Message);
      end if;
      if not Value.Occurrences.Is_Null then
         Into.Write_Entity ("occurrences", Value.Occurrences);
      end if;
      if not Value.Ineligible_For_Ads.Is_Null then
         Into.Write_Entity ("ineligible_for_ads", Value.Ineligible_For_Ads);
      end if;
      if not Value.Ineligible_For_Organic.Is_Null then
         Into.Write_Entity ("ineligible_for_organic", Value.Ineligible_For_Organic);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsReportDistributionStats_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsReportDistributionStats_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "report_type", Value.Report_Type);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "code_label", Value.Code_Label);
      Swagger.Streams.Deserialize (Object, "message", Value.Message);
      Swagger.Streams.Deserialize (Object, "occurrences", Value.Occurrences);
      Swagger.Streams.Deserialize (Object, "ineligible_for_ads", Value.Ineligible_For_Ads);
      Swagger.Streams.Deserialize (Object, "ineligible_for_organic", Value.Ineligible_For_Organic);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsReportDistributionStats_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsReportDistributionStats_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsReportFeedIngestionFilter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("report_type", Value.Report_Type);
      Into.Write_Entity ("feed_id", Value.Feed_Id);
      if not Value.Processing_Result_Id.Is_Null then
         Into.Write_Entity ("processing_result_id", Value.Processing_Result_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsReportFeedIngestionFilter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsReportFeedIngestionFilter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "report_type", Value.Report_Type);
      Swagger.Streams.Deserialize (Object, "feed_id", Value.Feed_Id);
      Swagger.Streams.Deserialize (Object, "processing_result_id", Value.Processing_Result_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsReportFeedIngestionFilter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsReportFeedIngestionFilter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsReportFeedIngestionStats_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Report_Type.Is_Null then
         Into.Write_Entity ("report_type", Value.Report_Type);
      end if;
      if not Value.Catalog_Id.Is_Null then
         Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      end if;
      if not Value.Code.Is_Null then
         Into.Write_Entity ("code", Value.Code);
      end if;
      if not Value.Code_Label.Is_Null then
         Into.Write_Entity ("code_label", Value.Code_Label);
      end if;
      if not Value.Message.Is_Null then
         Into.Write_Entity ("message", Value.Message);
      end if;
      if not Value.Occurrences.Is_Null then
         Into.Write_Entity ("occurrences", Value.Occurrences);
      end if;
      if not Value.Severity.Is_Null then
         Into.Write_Entity ("severity", Value.Severity);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsReportFeedIngestionStats_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsReportFeedIngestionStats_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "report_type", Value.Report_Type);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "code_label", Value.Code_Label);
      Swagger.Streams.Deserialize (Object, "message", Value.Message);
      Swagger.Streams.Deserialize (Object, "occurrences", Value.Occurrences);
      Swagger.Streams.Deserialize (Object, "severity", Value.Severity);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsReportFeedIngestionStats_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsReportFeedIngestionStats_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsReportStats_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("report_type", Value.Report_Type);
      if not Value.Catalog_Id.Is_Null then
         Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      end if;
      if not Value.Code.Is_Null then
         Into.Write_Entity ("code", Value.Code);
      end if;
      if not Value.Code_Label.Is_Null then
         Into.Write_Entity ("code_label", Value.Code_Label);
      end if;
      if not Value.Message.Is_Null then
         Into.Write_Entity ("message", Value.Message);
      end if;
      if not Value.Occurrences.Is_Null then
         Into.Write_Entity ("occurrences", Value.Occurrences);
      end if;
      if not Value.Severity.Is_Null then
         Into.Write_Entity ("severity", Value.Severity);
      end if;
      if not Value.Ineligible_For_Ads.Is_Null then
         Into.Write_Entity ("ineligible_for_ads", Value.Ineligible_For_Ads);
      end if;
      if not Value.Ineligible_For_Organic.Is_Null then
         Into.Write_Entity ("ineligible_for_organic", Value.Ineligible_For_Organic);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsReportStats_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsReportStats_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "report_type", Value.Report_Type);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "code_label", Value.Code_Label);
      Swagger.Streams.Deserialize (Object, "message", Value.Message);
      Swagger.Streams.Deserialize (Object, "occurrences", Value.Occurrences);
      Swagger.Streams.Deserialize (Object, "severity", Value.Severity);
      Swagger.Streams.Deserialize (Object, "ineligible_for_ads", Value.Ineligible_For_Ads);
      Swagger.Streams.Deserialize (Object, "ineligible_for_organic", Value.Ineligible_For_Organic);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsReportStats_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsReportStats_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsReport_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Report_Status.Is_Null then
         Into.Write_Entity ("report_status", Value.Report_Status);
      end if;
      Into.Write_Entity ("url", Value.Url);
      Serialize (Into, "size", Value.Size);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsReport_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsReport_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "report_status", Value.Report_Status);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "size", Value.Size);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsReport_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsReport_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsRetailItemsFilter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Serialize (Into, "item_ids", Value.Item_Ids);
      if not Value.Catalog_Id.Is_Null then
         Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsRetailItemsFilter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsRetailItemsFilter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "item_ids", Value.Item_Ids);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsRetailItemsFilter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsRetailItemsFilter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsRetailItemsPostFilter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Serialize (Into, "item_ids", Value.Item_Ids);
      if not Value.Catalog_Id.Is_Null then
         Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsRetailItemsPostFilter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsRetailItemsPostFilter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "item_ids", Value.Item_Ids);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsRetailItemsPostFilter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsRetailItemsPostFilter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsRetailProductGroupProductCounts_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Serialize (Into, "in_stock", Value.In_Stock);
      Serialize (Into, "out_of_stock", Value.Out_Of_Stock);
      Serialize (Into, "preorder", Value.Preorder);
      Serialize (Into, "total", Value.Total);
      Serialize (Into, "videos", Value.Videos);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsRetailProductGroupProductCounts_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsRetailProductGroupProductCounts_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "in_stock", Value.In_Stock);
      Swagger.Streams.Deserialize (Object, "out_of_stock", Value.Out_Of_Stock);
      Swagger.Streams.Deserialize (Object, "preorder", Value.Preorder);
      Swagger.Streams.Deserialize (Object, "total", Value.Total);
      Swagger.Streams.Deserialize (Object, "videos", Value.Videos);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsRetailProductGroupProductCounts_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsRetailProductGroupProductCounts_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_CatalogsStatus_Type (Value : in String) return .Models.CatalogsStatus_Type is
   begin
      if Value = "ACTIVE" then
         return ACTIVE;
      end if;
      if Value = "INACTIVE" then
         return INACTIVE;
      end if;
      raise Constraint_Error;
   end To_CatalogsStatus_Type;

   function To_String (Value : in .Models.CatalogsStatus_Type) return String is
   begin
      case Value is
         when ACTIVE =>
            return "ACTIVE";

         when INACTIVE =>
            return "INACTIVE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsStatus_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsStatus_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsStatus_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_CatalogsStatus_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsStatus_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsStatus_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_CatalogsType_Type (Value : in String) return .Models.CatalogsType_Type is
   begin
      if Value = "RETAIL" then
         return RETAIL;
      end if;
      if Value = "HOTEL" then
         return HOTEL;
      end if;
      if Value = "CREATIVE_ASSETS" then
         return CREATIVE_ASSETS;
      end if;
      raise Constraint_Error;
   end To_CatalogsType_Type;

   function To_String (Value : in .Models.CatalogsType_Type) return String is
   begin
      case Value is
         when RETAIL =>
            return "RETAIL";

         when HOTEL =>
            return "HOTEL";

         when CREATIVE_ASSETS =>
            return "CREATIVE_ASSETS";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_CatalogsType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsUpdatableCreativeAssetsAttributes_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Title.Is_Null then
         Into.Write_Entity ("title", Value.Title);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Link.Is_Null then
         Into.Write_Entity ("link", Value.Link);
      end if;
      Into.Write_Entity ("ios_deep_link", Value.Ios_Deep_Link);
      Into.Write_Entity ("android_deep_link", Value.Android_Deep_Link);
      Into.Write_Entity ("google_product_category", Value.Google_Product_Category);
      Into.Write_Entity ("custom_label_0", Value.Custom_Label_0);
      Into.Write_Entity ("custom_label_1", Value.Custom_Label_1);
      Into.Write_Entity ("custom_label_2", Value.Custom_Label_2);
      Into.Write_Entity ("custom_label_3", Value.Custom_Label_3);
      Into.Write_Entity ("custom_label_4", Value.Custom_Label_4);
      Into.Write_Entity ("visibility", Value.Visibility);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsUpdatableCreativeAssetsAttributes_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsUpdatableCreativeAssetsAttributes_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "title", Value.Title);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "link", Value.Link);
      Swagger.Streams.Deserialize (Object, "ios_deep_link", Value.Ios_Deep_Link);
      Swagger.Streams.Deserialize (Object, "android_deep_link", Value.Android_Deep_Link);
      Swagger.Streams.Deserialize (Object, "google_product_category", Value.Google_Product_Category);
      Swagger.Streams.Deserialize (Object, "custom_label_0", Value.Custom_Label_0);
      Swagger.Streams.Deserialize (Object, "custom_label_1", Value.Custom_Label_1);
      Swagger.Streams.Deserialize (Object, "custom_label_2", Value.Custom_Label_2);
      Swagger.Streams.Deserialize (Object, "custom_label_3", Value.Custom_Label_3);
      Swagger.Streams.Deserialize (Object, "custom_label_4", Value.Custom_Label_4);
      Swagger.Streams.Deserialize (Object, "visibility", Value.Visibility);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsUpdatableCreativeAssetsAttributes_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsUpdatableCreativeAssetsAttributes_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ConditionFilter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("CONDITION", Value.CONDITION);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ConditionFilter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ConditionFilter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "CONDITION", Value.CONDITION);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ConditionFilter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ConditionFilter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ConversionApiResponseEventsInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("status", Value.Status);
      Into.Write_Entity ("error_message", Value.Error_Message);
      Into.Write_Entity ("warning_message", Value.Warning_Message);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ConversionApiResponseEventsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ConversionApiResponseEventsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "error_message", Value.Error_Message);
      Swagger.Streams.Deserialize (Object, "warning_message", Value.Warning_Message);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ConversionApiResponseEventsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ConversionApiResponseEventsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ConversionAttributionWindowDays_Type (Value : in String) return .Models.ConversionAttributionWindowDays_Type is
   begin
      if Value = "0" then
         return _0;
      end if;
      if Value = "1" then
         return _1;
      end if;
      if Value = "7" then
         return _7;
      end if;
      if Value = "14" then
         return _14;
      end if;
      if Value = "30" then
         return _30;
      end if;
      if Value = "60" then
         return _60;
      end if;
      raise Constraint_Error;
   end To_ConversionAttributionWindowDays_Type;

   function To_String (Value : in .Models.ConversionAttributionWindowDays_Type) return String is
   begin
      case Value is
         when _0 =>
            return "0";

         when _1 =>
            return "1";

         when _7 =>
            return "7";

         when _14 =>
            return "14";

         when _30 =>
            return "30";

         when _60 =>
            return "60";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ConversionAttributionWindowDays_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ConversionAttributionWindowDays_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ConversionAttributionWindowDays_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ConversionAttributionWindowDays_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ConversionAttributionWindowDays_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ConversionAttributionWindowDays_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ConversionEventResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("conversion_event", Value.Conversion_Event);
      if not Value.Conversion_Tag_Id.Is_Null then
         Into.Write_Entity ("conversion_tag_id", Value.Conversion_Tag_Id);
      end if;
      if not Value.Ad_Account_Id.Is_Null then
         Into.Write_Entity ("ad_account_id", Value.Ad_Account_Id);
      end if;
      if not Value.Created_Time.Is_Null then
         Into.Write_Entity ("created_time", Value.Created_Time);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ConversionEventResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ConversionEventResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "conversion_event", Value.Conversion_Event);
      Swagger.Streams.Deserialize (Object, "conversion_tag_id", Value.Conversion_Tag_Id);
      Swagger.Streams.Deserialize (Object, "ad_account_id", Value.Ad_Account_Id);
      Swagger.Streams.Deserialize (Object, "created_time", Value.Created_Time);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ConversionEventResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ConversionEventResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ConversionEventsDataInnerCustomDataContentsInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Item_Price.Is_Null then
         Into.Write_Entity ("item_price", Value.Item_Price);
      end if;
      if not Value.Quantity.Is_Null then
         Into.Write_Entity ("quantity", Value.Quantity);
      end if;
      if not Value.Item_Name.Is_Null then
         Into.Write_Entity ("item_name", Value.Item_Name);
      end if;
      if not Value.Item_Category.Is_Null then
         Into.Write_Entity ("item_category", Value.Item_Category);
      end if;
      if not Value.Item_Brand.Is_Null then
         Into.Write_Entity ("item_brand", Value.Item_Brand);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ConversionEventsDataInnerCustomDataContentsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ConversionEventsDataInnerCustomDataContentsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "item_price", Value.Item_Price);
      Swagger.Streams.Deserialize (Object, "quantity", Value.Quantity);
      Swagger.Streams.Deserialize (Object, "item_name", Value.Item_Name);
      Swagger.Streams.Deserialize (Object, "item_category", Value.Item_Category);
      Swagger.Streams.Deserialize (Object, "item_brand", Value.Item_Brand);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ConversionEventsDataInnerCustomDataContentsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ConversionEventsDataInnerCustomDataContentsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ConversionEventsUserDataAnyOf1_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "em", Value.Em);
      Serialize (Into, "hashed_maids", Value.Hashed_Maids);
      if not Value.Client_Ip_Address.Is_Null then
         Into.Write_Entity ("client_ip_address", Value.Client_Ip_Address);
      end if;
      if not Value.Client_User_Agent.Is_Null then
         Into.Write_Entity ("client_user_agent", Value.Client_User_Agent);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ConversionEventsUserDataAnyOf1_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ConversionEventsUserDataAnyOf1_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "em", Value.Em);
      Swagger.Streams.Deserialize (Object, "hashed_maids", Value.Hashed_Maids);
      Swagger.Streams.Deserialize (Object, "client_ip_address", Value.Client_Ip_Address);
      Swagger.Streams.Deserialize (Object, "client_user_agent", Value.Client_User_Agent);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ConversionEventsUserDataAnyOf1_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ConversionEventsUserDataAnyOf1_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ConversionEventsUserDataAnyOf2_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "em", Value.Em);
      Serialize (Into, "hashed_maids", Value.Hashed_Maids);
      Into.Write_Entity ("client_ip_address", Value.Client_Ip_Address);
      Into.Write_Entity ("client_user_agent", Value.Client_User_Agent);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ConversionEventsUserDataAnyOf2_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ConversionEventsUserDataAnyOf2_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "em", Value.Em);
      Swagger.Streams.Deserialize (Object, "hashed_maids", Value.Hashed_Maids);
      Swagger.Streams.Deserialize (Object, "client_ip_address", Value.Client_Ip_Address);
      Swagger.Streams.Deserialize (Object, "client_user_agent", Value.Client_User_Agent);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ConversionEventsUserDataAnyOf2_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ConversionEventsUserDataAnyOf2_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ConversionEventsUserDataAnyOf_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "em", Value.Em);
      Serialize (Into, "hashed_maids", Value.Hashed_Maids);
      if not Value.Client_Ip_Address.Is_Null then
         Into.Write_Entity ("client_ip_address", Value.Client_Ip_Address);
      end if;
      if not Value.Client_User_Agent.Is_Null then
         Into.Write_Entity ("client_user_agent", Value.Client_User_Agent);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ConversionEventsUserDataAnyOf_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ConversionEventsUserDataAnyOf_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "em", Value.Em);
      Swagger.Streams.Deserialize (Object, "hashed_maids", Value.Hashed_Maids);
      Swagger.Streams.Deserialize (Object, "client_ip_address", Value.Client_Ip_Address);
      Swagger.Streams.Deserialize (Object, "client_user_agent", Value.Client_User_Agent);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ConversionEventsUserDataAnyOf_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ConversionEventsUserDataAnyOf_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ConversionEventsUserData_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "ph", Value.Ph);
      Serialize (Into, "ge", Value.Ge);
      Serialize (Into, "db", Value.Db);
      Serialize (Into, "ln", Value.Ln);
      Serialize (Into, "fn", Value.Fn);
      Serialize (Into, "ct", Value.Ct);
      Serialize (Into, "st", Value.St);
      Serialize (Into, "zp", Value.Zp);
      Serialize (Into, "country", Value.Country);
      Serialize (Into, "external_id", Value.External_Id);
      Into.Write_Entity ("click_id", Value.Click_Id);
      Into.Write_Entity ("partner_id", Value.Partner_Id);
      Serialize (Into, "em", Value.Em);
      Serialize (Into, "hashed_maids", Value.Hashed_Maids);
      Into.Write_Entity ("client_ip_address", Value.Client_Ip_Address);
      Into.Write_Entity ("client_user_agent", Value.Client_User_Agent);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ConversionEventsUserData_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ConversionEventsUserData_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "ph", Value.Ph);
      Swagger.Streams.Deserialize (Object, "ge", Value.Ge);
      Swagger.Streams.Deserialize (Object, "db", Value.Db);
      Swagger.Streams.Deserialize (Object, "ln", Value.Ln);
      Swagger.Streams.Deserialize (Object, "fn", Value.Fn);
      Swagger.Streams.Deserialize (Object, "ct", Value.Ct);
      Swagger.Streams.Deserialize (Object, "st", Value.St);
      Swagger.Streams.Deserialize (Object, "zp", Value.Zp);
      Swagger.Streams.Deserialize (Object, "country", Value.Country);
      Swagger.Streams.Deserialize (Object, "external_id", Value.External_Id);
      Swagger.Streams.Deserialize (Object, "click_id", Value.Click_Id);
      Swagger.Streams.Deserialize (Object, "partner_id", Value.Partner_Id);
      Swagger.Streams.Deserialize (Object, "em", Value.Em);
      Swagger.Streams.Deserialize (Object, "hashed_maids", Value.Hashed_Maids);
      Swagger.Streams.Deserialize (Object, "client_ip_address", Value.Client_Ip_Address);
      Swagger.Streams.Deserialize (Object, "client_user_agent", Value.Client_User_Agent);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ConversionEventsUserData_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ConversionEventsUserData_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ConversionReportAttributionType_Type (Value : in String) return .Models.ConversionReportAttributionType_Type is
   begin
      if Value = "INDIVIDUAL" then
         return INDIVIDUAL;
      end if;
      if Value = "HOUSEHOLD" then
         return HOUSEHOLD;
      end if;
      raise Constraint_Error;
   end To_ConversionReportAttributionType_Type;

   function To_String (Value : in .Models.ConversionReportAttributionType_Type) return String is
   begin
      case Value is
         when INDIVIDUAL =>
            return "INDIVIDUAL";

         when HOUSEHOLD =>
            return "HOUSEHOLD";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ConversionReportAttributionType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ConversionReportAttributionType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ConversionReportAttributionType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ConversionReportAttributionType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ConversionReportAttributionType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ConversionReportAttributionType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ConversionReportTimeType_Type (Value : in String) return .Models.ConversionReportTimeType_Type is
   begin
      if Value = "TIME_OF_AD_ACTION" then
         return AD_ACTION;
      end if;
      if Value = "TIME_OF_CONVERSION" then
         return CONVERSION;
      end if;
      raise Constraint_Error;
   end To_ConversionReportTimeType_Type;

   function To_String (Value : in .Models.ConversionReportTimeType_Type) return String is
   begin
      case Value is
         when AD_ACTION =>
            return "TIME_OF_AD_ACTION";

         when CONVERSION =>
            return "TIME_OF_CONVERSION";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ConversionReportTimeType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ConversionReportTimeType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ConversionReportTimeType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ConversionReportTimeType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ConversionReportTimeType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ConversionReportTimeType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ConversionTagConfigs_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("aem_enabled", Value.Aem_Enabled);
      Serialize (Into, "md_frequency", Value.Md_Frequency);
      Into.Write_Entity ("aem_fnln_enabled", Value.Aem_Fnln_Enabled);
      Into.Write_Entity ("aem_ph_enabled", Value.Aem_Ph_Enabled);
      Into.Write_Entity ("aem_ge_enabled", Value.Aem_Ge_Enabled);
      Into.Write_Entity ("aem_db_enabled", Value.Aem_Db_Enabled);
      Into.Write_Entity ("aem_loc_enabled", Value.Aem_Loc_Enabled);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ConversionTagConfigs_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ConversionTagConfigs_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "aem_enabled", Value.Aem_Enabled);
      Swagger.Streams.Deserialize (Object, "md_frequency", Value.Md_Frequency);
      Swagger.Streams.Deserialize (Object, "aem_fnln_enabled", Value.Aem_Fnln_Enabled);
      Swagger.Streams.Deserialize (Object, "aem_ph_enabled", Value.Aem_Ph_Enabled);
      Swagger.Streams.Deserialize (Object, "aem_ge_enabled", Value.Aem_Ge_Enabled);
      Swagger.Streams.Deserialize (Object, "aem_db_enabled", Value.Aem_Db_Enabled);
      Swagger.Streams.Deserialize (Object, "aem_loc_enabled", Value.Aem_Loc_Enabled);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ConversionTagConfigs_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ConversionTagConfigs_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ConversionTagCreate_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("aem_enabled", Value.Aem_Enabled);
      Serialize (Into, "md_frequency", Value.Md_Frequency);
      Into.Write_Entity ("aem_fnln_enabled", Value.Aem_Fnln_Enabled);
      Into.Write_Entity ("aem_ph_enabled", Value.Aem_Ph_Enabled);
      Into.Write_Entity ("aem_ge_enabled", Value.Aem_Ge_Enabled);
      Into.Write_Entity ("aem_db_enabled", Value.Aem_Db_Enabled);
      Into.Write_Entity ("aem_loc_enabled", Value.Aem_Loc_Enabled);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ConversionTagCreate_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ConversionTagCreate_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "aem_enabled", Value.Aem_Enabled);
      Swagger.Streams.Deserialize (Object, "md_frequency", Value.Md_Frequency);
      Swagger.Streams.Deserialize (Object, "aem_fnln_enabled", Value.Aem_Fnln_Enabled);
      Swagger.Streams.Deserialize (Object, "aem_ph_enabled", Value.Aem_Ph_Enabled);
      Swagger.Streams.Deserialize (Object, "aem_ge_enabled", Value.Aem_Ge_Enabled);
      Swagger.Streams.Deserialize (Object, "aem_db_enabled", Value.Aem_Db_Enabled);
      Swagger.Streams.Deserialize (Object, "aem_loc_enabled", Value.Aem_Loc_Enabled);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ConversionTagCreate_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ConversionTagCreate_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ConversionTagType_Type (Value : in String) return .Models.ConversionTagType_Type is
   begin
      if Value = "PAGE_LOAD" then
         return PAGE_LOAD;
      end if;
      if Value = "UNKNOWN" then
         return UNKNOWN;
      end if;
      if Value = "INITIALIZED" then
         return INITIALIZED;
      end if;
      if Value = "PAGE_VISIT" then
         return PAGE_VISIT;
      end if;
      if Value = "SIGNUP" then
         return SIGNUP;
      end if;
      if Value = "CHECKOUT" then
         return CHECKOUT;
      end if;
      if Value = "CUSTOM" then
         return CUSTOM;
      end if;
      if Value = "VIEW_CATEGORY" then
         return VIEW_CATEGORY;
      end if;
      if Value = "SEARCH" then
         return SEARCH;
      end if;
      if Value = "ADD_TO_CART" then
         return ADD_TO_CART;
      end if;
      if Value = "WATCH_VIDEO" then
         return WATCH_VIDEO;
      end if;
      if Value = "LEAD" then
         return LEAD;
      end if;
      if Value = "APP_INSTALL" then
         return APP_INSTALL;
      end if;
      if Value = "WEB_SESSION" then
         return WEB_SESSION;
      end if;
      if Value = "EXTERNAL_MEASUREMENT" then
         return EXTERNAL_MEASUREMENT;
      end if;
      raise Constraint_Error;
   end To_ConversionTagType_Type;

   function To_String (Value : in .Models.ConversionTagType_Type) return String is
   begin
      case Value is
         when PAGE_LOAD =>
            return "PAGE_LOAD";

         when UNKNOWN =>
            return "UNKNOWN";

         when INITIALIZED =>
            return "INITIALIZED";

         when PAGE_VISIT =>
            return "PAGE_VISIT";

         when SIGNUP =>
            return "SIGNUP";

         when CHECKOUT =>
            return "CHECKOUT";

         when CUSTOM =>
            return "CUSTOM";

         when VIEW_CATEGORY =>
            return "VIEW_CATEGORY";

         when SEARCH =>
            return "SEARCH";

         when ADD_TO_CART =>
            return "ADD_TO_CART";

         when WATCH_VIDEO =>
            return "WATCH_VIDEO";

         when LEAD =>
            return "LEAD";

         when APP_INSTALL =>
            return "APP_INSTALL";

         when WEB_SESSION =>
            return "WEB_SESSION";

         when EXTERNAL_MEASUREMENT =>
            return "EXTERNAL_MEASUREMENT";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ConversionTagType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ConversionTagType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ConversionTagType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ConversionTagType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ConversionTagType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ConversionTagType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CountryFilter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("COUNTRY", Value.COUNTRY);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CountryFilter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CountryFilter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "COUNTRY", Value.COUNTRY);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CountryFilter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CountryFilter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_Country_Type (Value : in String) return .Models.Country_Type is
   begin
      if Value = "AD" then
         return AD;
      end if;
      if Value = "AE" then
         return AE;
      end if;
      if Value = "AF" then
         return AF;
      end if;
      if Value = "AG" then
         return AG;
      end if;
      if Value = "AI" then
         return AI;
      end if;
      if Value = "AL" then
         return AL;
      end if;
      if Value = "AM" then
         return AM;
      end if;
      if Value = "AO" then
         return AO;
      end if;
      if Value = "AQ" then
         return AQ;
      end if;
      if Value = "AR" then
         return AR;
      end if;
      if Value = "AS" then
         return AS;
      end if;
      if Value = "AT" then
         return AT;
      end if;
      if Value = "AU" then
         return AU;
      end if;
      if Value = "AW" then
         return AW;
      end if;
      if Value = "AX" then
         return AX;
      end if;
      if Value = "AZ" then
         return AZ;
      end if;
      if Value = "BA" then
         return BA;
      end if;
      if Value = "BB" then
         return BB;
      end if;
      if Value = "BD" then
         return BD;
      end if;
      if Value = "BE" then
         return BE;
      end if;
      if Value = "BF" then
         return BF;
      end if;
      if Value = "BG" then
         return BG;
      end if;
      if Value = "BH" then
         return BH;
      end if;
      if Value = "BI" then
         return BI;
      end if;
      if Value = "BJ" then
         return BJ;
      end if;
      if Value = "BL" then
         return BL;
      end if;
      if Value = "BM" then
         return BM;
      end if;
      if Value = "BN" then
         return BN;
      end if;
      if Value = "BO" then
         return BO;
      end if;
      if Value = "BQ" then
         return BQ;
      end if;
      if Value = "BR" then
         return BR;
      end if;
      if Value = "BS" then
         return BS;
      end if;
      if Value = "BT" then
         return BT;
      end if;
      if Value = "BV" then
         return BV;
      end if;
      if Value = "BW" then
         return BW;
      end if;
      if Value = "BY" then
         return BY;
      end if;
      if Value = "BZ" then
         return BZ;
      end if;
      if Value = "CA" then
         return CA;
      end if;
      if Value = "CC" then
         return CC;
      end if;
      if Value = "CD" then
         return CD;
      end if;
      if Value = "CF" then
         return CF;
      end if;
      if Value = "CG" then
         return CG;
      end if;
      if Value = "CH" then
         return CH;
      end if;
      if Value = "CI" then
         return CI;
      end if;
      if Value = "CK" then
         return CK;
      end if;
      if Value = "CL" then
         return CL;
      end if;
      if Value = "CM" then
         return CM;
      end if;
      if Value = "CN" then
         return CN;
      end if;
      if Value = "CO" then
         return CO;
      end if;
      if Value = "CR" then
         return CR;
      end if;
      if Value = "CU" then
         return CU;
      end if;
      if Value = "CV" then
         return CV;
      end if;
      if Value = "CW" then
         return CW;
      end if;
      if Value = "CX" then
         return CX;
      end if;
      if Value = "CY" then
         return CY;
      end if;
      if Value = "CZ" then
         return CZ;
      end if;
      if Value = "DE" then
         return DE;
      end if;
      if Value = "DJ" then
         return DJ;
      end if;
      if Value = "DK" then
         return DK;
      end if;
      if Value = "DM" then
         return DM;
      end if;
      if Value = "DO" then
         return DO;
      end if;
      if Value = "DZ" then
         return DZ;
      end if;
      if Value = "EC" then
         return EC;
      end if;
      if Value = "EE" then
         return EE;
      end if;
      if Value = "EG" then
         return EG;
      end if;
      if Value = "EH" then
         return EH;
      end if;
      if Value = "ER" then
         return ER;
      end if;
      if Value = "ES" then
         return ES;
      end if;
      if Value = "ET" then
         return ET;
      end if;
      if Value = "FI" then
         return FI;
      end if;
      if Value = "FJ" then
         return FJ;
      end if;
      if Value = "FK" then
         return FK;
      end if;
      if Value = "FM" then
         return FM;
      end if;
      if Value = "FO" then
         return FO;
      end if;
      if Value = "FR" then
         return FR;
      end if;
      if Value = "GA" then
         return GA;
      end if;
      if Value = "GB" then
         return GB;
      end if;
      if Value = "GD" then
         return GD;
      end if;
      if Value = "GE" then
         return GE;
      end if;
      if Value = "GF" then
         return GF;
      end if;
      if Value = "GG" then
         return GG;
      end if;
      if Value = "GH" then
         return GH;
      end if;
      if Value = "GI" then
         return GI;
      end if;
      if Value = "GL" then
         return GL;
      end if;
      if Value = "GM" then
         return GM;
      end if;
      if Value = "GN" then
         return GN;
      end if;
      if Value = "GP" then
         return GP;
      end if;
      if Value = "GQ" then
         return GQ;
      end if;
      if Value = "GR" then
         return GR;
      end if;
      if Value = "GS" then
         return GS;
      end if;
      if Value = "GT" then
         return GT;
      end if;
      if Value = "GU" then
         return GU;
      end if;
      if Value = "GW" then
         return GW;
      end if;
      if Value = "GY" then
         return GY;
      end if;
      if Value = "HK" then
         return HK;
      end if;
      if Value = "HM" then
         return HM;
      end if;
      if Value = "HN" then
         return HN;
      end if;
      if Value = "HR" then
         return HR;
      end if;
      if Value = "HT" then
         return HT;
      end if;
      if Value = "HU" then
         return HU;
      end if;
      if Value = "ID" then
         return ID;
      end if;
      if Value = "IE" then
         return IE;
      end if;
      if Value = "IL" then
         return IL;
      end if;
      if Value = "IM" then
         return IM;
      end if;
      if Value = "IN" then
         return IN;
      end if;
      if Value = "IO" then
         return IO;
      end if;
      if Value = "IQ" then
         return IQ;
      end if;
      if Value = "IR" then
         return IR;
      end if;
      if Value = "IS" then
         return IS;
      end if;
      if Value = "IT" then
         return IT;
      end if;
      if Value = "JE" then
         return JE;
      end if;
      if Value = "JM" then
         return JM;
      end if;
      if Value = "JO" then
         return JO;
      end if;
      if Value = "JP" then
         return JP;
      end if;
      if Value = "KE" then
         return KE;
      end if;
      if Value = "KG" then
         return KG;
      end if;
      if Value = "KH" then
         return KH;
      end if;
      if Value = "KI" then
         return KI;
      end if;
      if Value = "KM" then
         return KM;
      end if;
      if Value = "KN" then
         return KN;
      end if;
      if Value = "KR" then
         return KR;
      end if;
      if Value = "KW" then
         return KW;
      end if;
      if Value = "KY" then
         return KY;
      end if;
      if Value = "KZ" then
         return KZ;
      end if;
      if Value = "LA" then
         return LA;
      end if;
      if Value = "LB" then
         return LB;
      end if;
      if Value = "LC" then
         return LC;
      end if;
      if Value = "LI" then
         return LI;
      end if;
      if Value = "LK" then
         return LK;
      end if;
      if Value = "LR" then
         return LR;
      end if;
      if Value = "LS" then
         return LS;
      end if;
      if Value = "LT" then
         return LT;
      end if;
      if Value = "LU" then
         return LU;
      end if;
      if Value = "LV" then
         return LV;
      end if;
      if Value = "LY" then
         return LY;
      end if;
      if Value = "MA" then
         return MA;
      end if;
      if Value = "MC" then
         return MC;
      end if;
      if Value = "MD" then
         return MD;
      end if;
      if Value = "ME" then
         return ME;
      end if;
      if Value = "MF" then
         return MF;
      end if;
      if Value = "MG" then
         return MG;
      end if;
      if Value = "MH" then
         return MH;
      end if;
      if Value = "MK" then
         return MK;
      end if;
      if Value = "ML" then
         return ML;
      end if;
      if Value = "MM" then
         return MM;
      end if;
      if Value = "MN" then
         return MN;
      end if;
      if Value = "MO" then
         return MO;
      end if;
      if Value = "MP" then
         return MP;
      end if;
      if Value = "MQ" then
         return MQ;
      end if;
      if Value = "MR" then
         return MR;
      end if;
      if Value = "MS" then
         return MS;
      end if;
      if Value = "MT" then
         return MT;
      end if;
      if Value = "MU" then
         return MU;
      end if;
      if Value = "MV" then
         return MV;
      end if;
      if Value = "MW" then
         return MW;
      end if;
      if Value = "MX" then
         return MX;
      end if;
      if Value = "MY" then
         return MY;
      end if;
      if Value = "MZ" then
         return MZ;
      end if;
      if Value = "NA" then
         return NA;
      end if;
      if Value = "NC" then
         return NC;
      end if;
      if Value = "NE" then
         return NE;
      end if;
      if Value = "NF" then
         return NF;
      end if;
      if Value = "NG" then
         return NG;
      end if;
      if Value = "NI" then
         return NI;
      end if;
      if Value = "NL" then
         return NL;
      end if;
      if Value = "NO" then
         return NO;
      end if;
      if Value = "NP" then
         return NP;
      end if;
      if Value = "NR" then
         return NR;
      end if;
      if Value = "NU" then
         return NU;
      end if;
      if Value = "NZ" then
         return NZ;
      end if;
      if Value = "OM" then
         return OM;
      end if;
      if Value = "PA" then
         return PA;
      end if;
      if Value = "PE" then
         return PE;
      end if;
      if Value = "PF" then
         return PF;
      end if;
      if Value = "PG" then
         return PG;
      end if;
      if Value = "PH" then
         return PH;
      end if;
      if Value = "PK" then
         return PK;
      end if;
      if Value = "PL" then
         return PL;
      end if;
      if Value = "PM" then
         return PM;
      end if;
      if Value = "PN" then
         return PN;
      end if;
      if Value = "PR" then
         return PR;
      end if;
      if Value = "PS" then
         return PS;
      end if;
      if Value = "PT" then
         return PT;
      end if;
      if Value = "PW" then
         return PW;
      end if;
      if Value = "PY" then
         return PY;
      end if;
      if Value = "QA" then
         return QA;
      end if;
      if Value = "RE" then
         return RE;
      end if;
      if Value = "RO" then
         return RO;
      end if;
      if Value = "RS" then
         return RS;
      end if;
      if Value = "RU" then
         return RU;
      end if;
      if Value = "RW" then
         return RW;
      end if;
      if Value = "SA" then
         return SA;
      end if;
      if Value = "SB" then
         return SB;
      end if;
      if Value = "SC" then
         return SC;
      end if;
      if Value = "SD" then
         return SD;
      end if;
      if Value = "SE" then
         return SE;
      end if;
      if Value = "SG" then
         return SG;
      end if;
      if Value = "SH" then
         return SH;
      end if;
      if Value = "SI" then
         return SI;
      end if;
      if Value = "SJ" then
         return SJ;
      end if;
      if Value = "SK" then
         return SK;
      end if;
      if Value = "SL" then
         return SL;
      end if;
      if Value = "SM" then
         return SM;
      end if;
      if Value = "SN" then
         return SN;
      end if;
      if Value = "SO" then
         return SO;
      end if;
      if Value = "SR" then
         return SR;
      end if;
      if Value = "SS" then
         return SS;
      end if;
      if Value = "ST" then
         return ST;
      end if;
      if Value = "SV" then
         return SV;
      end if;
      if Value = "SX" then
         return SX;
      end if;
      if Value = "SY" then
         return SY;
      end if;
      if Value = "SZ" then
         return SZ;
      end if;
      if Value = "TC" then
         return TC;
      end if;
      if Value = "TD" then
         return TD;
      end if;
      if Value = "TF" then
         return TF;
      end if;
      if Value = "TG" then
         return TG;
      end if;
      if Value = "TH" then
         return TH;
      end if;
      if Value = "TJ" then
         return TJ;
      end if;
      if Value = "TK" then
         return TK;
      end if;
      if Value = "TL" then
         return TL;
      end if;
      if Value = "TM" then
         return TM;
      end if;
      if Value = "TN" then
         return TN;
      end if;
      if Value = "TO" then
         return TO;
      end if;
      if Value = "TR" then
         return TR;
      end if;
      if Value = "TT" then
         return TT;
      end if;
      if Value = "TV" then
         return TV;
      end if;
      if Value = "TW" then
         return TW;
      end if;
      if Value = "TZ" then
         return TZ;
      end if;
      if Value = "UA" then
         return UA;
      end if;
      if Value = "UG" then
         return UG;
      end if;
      if Value = "UM" then
         return UM;
      end if;
      if Value = "US" then
         return US;
      end if;
      if Value = "UY" then
         return UY;
      end if;
      if Value = "UZ" then
         return UZ;
      end if;
      if Value = "VA" then
         return VA;
      end if;
      if Value = "VC" then
         return VC;
      end if;
      if Value = "VE" then
         return VE;
      end if;
      if Value = "VG" then
         return VG;
      end if;
      if Value = "VI" then
         return VI;
      end if;
      if Value = "VN" then
         return VN;
      end if;
      if Value = "VU" then
         return VU;
      end if;
      if Value = "WF" then
         return WF;
      end if;
      if Value = "WS" then
         return WS;
      end if;
      if Value = "YE" then
         return YE;
      end if;
      if Value = "YT" then
         return YT;
      end if;
      if Value = "ZA" then
         return ZA;
      end if;
      if Value = "ZM" then
         return ZM;
      end if;
      if Value = "ZW" then
         return ZW;
      end if;
      raise Constraint_Error;
   end To_Country_Type;

   function To_String (Value : in .Models.Country_Type) return String is
   begin
      case Value is
         when AD =>
            return "AD";

         when AE =>
            return "AE";

         when AF =>
            return "AF";

         when AG =>
            return "AG";

         when AI =>
            return "AI";

         when AL =>
            return "AL";

         when AM =>
            return "AM";

         when AO =>
            return "AO";

         when AQ =>
            return "AQ";

         when AR =>
            return "AR";

         when AS =>
            return "AS";

         when AT =>
            return "AT";

         when AU =>
            return "AU";

         when AW =>
            return "AW";

         when AX =>
            return "AX";

         when AZ =>
            return "AZ";

         when BA =>
            return "BA";

         when BB =>
            return "BB";

         when BD =>
            return "BD";

         when BE =>
            return "BE";

         when BF =>
            return "BF";

         when BG =>
            return "BG";

         when BH =>
            return "BH";

         when BI =>
            return "BI";

         when BJ =>
            return "BJ";

         when BL =>
            return "BL";

         when BM =>
            return "BM";

         when BN =>
            return "BN";

         when BO =>
            return "BO";

         when BQ =>
            return "BQ";

         when BR =>
            return "BR";

         when BS =>
            return "BS";

         when BT =>
            return "BT";

         when BV =>
            return "BV";

         when BW =>
            return "BW";

         when BY =>
            return "BY";

         when BZ =>
            return "BZ";

         when CA =>
            return "CA";

         when CC =>
            return "CC";

         when CD =>
            return "CD";

         when CF =>
            return "CF";

         when CG =>
            return "CG";

         when CH =>
            return "CH";

         when CI =>
            return "CI";

         when CK =>
            return "CK";

         when CL =>
            return "CL";

         when CM =>
            return "CM";

         when CN =>
            return "CN";

         when CO =>
            return "CO";

         when CR =>
            return "CR";

         when CU =>
            return "CU";

         when CV =>
            return "CV";

         when CW =>
            return "CW";

         when CX =>
            return "CX";

         when CY =>
            return "CY";

         when CZ =>
            return "CZ";

         when DE =>
            return "DE";

         when DJ =>
            return "DJ";

         when DK =>
            return "DK";

         when DM =>
            return "DM";

         when DO =>
            return "DO";

         when DZ =>
            return "DZ";

         when EC =>
            return "EC";

         when EE =>
            return "EE";

         when EG =>
            return "EG";

         when EH =>
            return "EH";

         when ER =>
            return "ER";

         when ES =>
            return "ES";

         when ET =>
            return "ET";

         when FI =>
            return "FI";

         when FJ =>
            return "FJ";

         when FK =>
            return "FK";

         when FM =>
            return "FM";

         when FO =>
            return "FO";

         when FR =>
            return "FR";

         when GA =>
            return "GA";

         when GB =>
            return "GB";

         when GD =>
            return "GD";

         when GE =>
            return "GE";

         when GF =>
            return "GF";

         when GG =>
            return "GG";

         when GH =>
            return "GH";

         when GI =>
            return "GI";

         when GL =>
            return "GL";

         when GM =>
            return "GM";

         when GN =>
            return "GN";

         when GP =>
            return "GP";

         when GQ =>
            return "GQ";

         when GR =>
            return "GR";

         when GS =>
            return "GS";

         when GT =>
            return "GT";

         when GU =>
            return "GU";

         when GW =>
            return "GW";

         when GY =>
            return "GY";

         when HK =>
            return "HK";

         when HM =>
            return "HM";

         when HN =>
            return "HN";

         when HR =>
            return "HR";

         when HT =>
            return "HT";

         when HU =>
            return "HU";

         when ID =>
            return "ID";

         when IE =>
            return "IE";

         when IL =>
            return "IL";

         when IM =>
            return "IM";

         when IN =>
            return "IN";

         when IO =>
            return "IO";

         when IQ =>
            return "IQ";

         when IR =>
            return "IR";

         when IS =>
            return "IS";

         when IT =>
            return "IT";

         when JE =>
            return "JE";

         when JM =>
            return "JM";

         when JO =>
            return "JO";

         when JP =>
            return "JP";

         when KE =>
            return "KE";

         when KG =>
            return "KG";

         when KH =>
            return "KH";

         when KI =>
            return "KI";

         when KM =>
            return "KM";

         when KN =>
            return "KN";

         when KR =>
            return "KR";

         when KW =>
            return "KW";

         when KY =>
            return "KY";

         when KZ =>
            return "KZ";

         when LA =>
            return "LA";

         when LB =>
            return "LB";

         when LC =>
            return "LC";

         when LI =>
            return "LI";

         when LK =>
            return "LK";

         when LR =>
            return "LR";

         when LS =>
            return "LS";

         when LT =>
            return "LT";

         when LU =>
            return "LU";

         when LV =>
            return "LV";

         when LY =>
            return "LY";

         when MA =>
            return "MA";

         when MC =>
            return "MC";

         when MD =>
            return "MD";

         when ME =>
            return "ME";

         when MF =>
            return "MF";

         when MG =>
            return "MG";

         when MH =>
            return "MH";

         when MK =>
            return "MK";

         when ML =>
            return "ML";

         when MM =>
            return "MM";

         when MN =>
            return "MN";

         when MO =>
            return "MO";

         when MP =>
            return "MP";

         when MQ =>
            return "MQ";

         when MR =>
            return "MR";

         when MS =>
            return "MS";

         when MT =>
            return "MT";

         when MU =>
            return "MU";

         when MV =>
            return "MV";

         when MW =>
            return "MW";

         when MX =>
            return "MX";

         when MY =>
            return "MY";

         when MZ =>
            return "MZ";

         when NA =>
            return "NA";

         when NC =>
            return "NC";

         when NE =>
            return "NE";

         when NF =>
            return "NF";

         when NG =>
            return "NG";

         when NI =>
            return "NI";

         when NL =>
            return "NL";

         when NO =>
            return "NO";

         when NP =>
            return "NP";

         when NR =>
            return "NR";

         when NU =>
            return "NU";

         when NZ =>
            return "NZ";

         when OM =>
            return "OM";

         when PA =>
            return "PA";

         when PE =>
            return "PE";

         when PF =>
            return "PF";

         when PG =>
            return "PG";

         when PH =>
            return "PH";

         when PK =>
            return "PK";

         when PL =>
            return "PL";

         when PM =>
            return "PM";

         when PN =>
            return "PN";

         when PR =>
            return "PR";

         when PS =>
            return "PS";

         when PT =>
            return "PT";

         when PW =>
            return "PW";

         when PY =>
            return "PY";

         when QA =>
            return "QA";

         when RE =>
            return "RE";

         when RO =>
            return "RO";

         when RS =>
            return "RS";

         when RU =>
            return "RU";

         when RW =>
            return "RW";

         when SA =>
            return "SA";

         when SB =>
            return "SB";

         when SC =>
            return "SC";

         when SD =>
            return "SD";

         when SE =>
            return "SE";

         when SG =>
            return "SG";

         when SH =>
            return "SH";

         when SI =>
            return "SI";

         when SJ =>
            return "SJ";

         when SK =>
            return "SK";

         when SL =>
            return "SL";

         when SM =>
            return "SM";

         when SN =>
            return "SN";

         when SO =>
            return "SO";

         when SR =>
            return "SR";

         when SS =>
            return "SS";

         when ST =>
            return "ST";

         when SV =>
            return "SV";

         when SX =>
            return "SX";

         when SY =>
            return "SY";

         when SZ =>
            return "SZ";

         when TC =>
            return "TC";

         when TD =>
            return "TD";

         when TF =>
            return "TF";

         when TG =>
            return "TG";

         when TH =>
            return "TH";

         when TJ =>
            return "TJ";

         when TK =>
            return "TK";

         when TL =>
            return "TL";

         when TM =>
            return "TM";

         when TN =>
            return "TN";

         when TO =>
            return "TO";

         when TR =>
            return "TR";

         when TT =>
            return "TT";

         when TV =>
            return "TV";

         when TW =>
            return "TW";

         when TZ =>
            return "TZ";

         when UA =>
            return "UA";

         when UG =>
            return "UG";

         when UM =>
            return "UM";

         when US =>
            return "US";

         when UY =>
            return "UY";

         when UZ =>
            return "UZ";

         when VA =>
            return "VA";

         when VC =>
            return "VC";

         when VE =>
            return "VE";

         when VG =>
            return "VG";

         when VI =>
            return "VI";

         when VN =>
            return "VN";

         when VU =>
            return "VU";

         when WF =>
            return "WF";

         when WS =>
            return "WS";

         when YE =>
            return "YE";

         when YT =>
            return "YT";

         when ZA =>
            return "ZA";

         when ZM =>
            return "ZM";

         when ZW =>
            return "ZW";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Country_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Country_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Country_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_Country_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Country_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Country_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CreateAssetAccessRequestBodyAssetRequestsInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("partner_id", Value.Partner_Id);
      Serialize (Into, "asset_id_to_permissions", Value.Asset_Id_To_Permissions);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CreateAssetAccessRequestBodyAssetRequestsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CreateAssetAccessRequestBodyAssetRequestsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "partner_id", Value.Partner_Id);
      Swagger.Streams.Deserialize (Object, "asset_id_to_permissions", Value.Asset_Id_To_Permissions);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CreateAssetAccessRequestBodyAssetRequestsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CreateAssetAccessRequestBodyAssetRequestsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CreateAssetAccessRequestErrorMessageInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Code.Is_Null then
         Into.Write_Entity ("code", Value.Code);
      end if;
      Serialize (Into, "messages", Value.Messages);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CreateAssetAccessRequestErrorMessageInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CreateAssetAccessRequestErrorMessageInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "messages", Value.Messages);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CreateAssetAccessRequestErrorMessageInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CreateAssetAccessRequestErrorMessageInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CreativeAssetsIdFilter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("CREATIVE_ASSETS_ID", Value.CREATIVE_ASSETS_ID);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CreativeAssetsIdFilter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CreativeAssetsIdFilter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "CREATIVE_ASSETS_ID", Value.CREATIVE_ASSETS_ID);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CreativeAssetsIdFilter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CreativeAssetsIdFilter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_CreativeAssetsVisibilityType_Type (Value : in String) return .Models.CreativeAssetsVisibilityType_Type is
   begin
      if Value = "VISIBLE" then
         return VISIBLE;
      end if;
      if Value = "HIDDEN" then
         return HIDDEN;
      end if;
      raise Constraint_Error;
   end To_CreativeAssetsVisibilityType_Type;

   function To_String (Value : in .Models.CreativeAssetsVisibilityType_Type) return String is
   begin
      case Value is
         when VISIBLE =>
            return "VISIBLE";

         when HIDDEN =>
            return "HIDDEN";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CreativeAssetsVisibilityType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CreativeAssetsVisibilityType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CreativeAssetsVisibilityType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_CreativeAssetsVisibilityType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CreativeAssetsVisibilityType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CreativeAssetsVisibilityType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_CreativeType_Type (Value : in String) return .Models.CreativeType_Type is
   begin
      if Value = "REGULAR" then
         return REGULAR;
      end if;
      if Value = "VIDEO" then
         return VIDEO;
      end if;
      if Value = "SHOPPING" then
         return SHOPPING;
      end if;
      if Value = "CAROUSEL" then
         return CAROUSEL;
      end if;
      if Value = "MAX_VIDEO" then
         return MAX_VIDEO;
      end if;
      if Value = "SHOP_THE_PIN" then
         return SHOP_THE_PIN;
      end if;
      if Value = "COLLECTION" then
         return COLLECTION;
      end if;
      if Value = "IDEA" then
         return IDEA;
      end if;
      if Value = "SHOWCASE" then
         return SHOWCASE;
      end if;
      if Value = "QUIZ" then
         return QUIZ;
      end if;
      raise Constraint_Error;
   end To_CreativeType_Type;

   function To_String (Value : in .Models.CreativeType_Type) return String is
   begin
      case Value is
         when REGULAR =>
            return "REGULAR";

         when VIDEO =>
            return "VIDEO";

         when SHOPPING =>
            return "SHOPPING";

         when CAROUSEL =>
            return "CAROUSEL";

         when MAX_VIDEO =>
            return "MAX_VIDEO";

         when SHOP_THE_PIN =>
            return "SHOP_THE_PIN";

         when COLLECTION =>
            return "COLLECTION";

         when IDEA =>
            return "IDEA";

         when SHOWCASE =>
            return "SHOWCASE";

         when QUIZ =>
            return "QUIZ";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CreativeType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CreativeType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CreativeType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_CreativeType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CreativeType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CreativeType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CurrencyFilter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("CURRENCY", Value.CURRENCY);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CurrencyFilter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CurrencyFilter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "CURRENCY", Value.CURRENCY);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CurrencyFilter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CurrencyFilter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_Currency_Type (Value : in String) return .Models.Currency_Type is
   begin
      if Value = "UNK" then
         return UNK;
      end if;
      if Value = "USD" then
         return USD;
      end if;
      if Value = "GBP" then
         return GBP;
      end if;
      if Value = "CAD" then
         return CAD;
      end if;
      if Value = "EUR" then
         return EUR;
      end if;
      if Value = "AUD" then
         return AUD;
      end if;
      if Value = "NZD" then
         return NZD;
      end if;
      if Value = "SEK" then
         return SEK;
      end if;
      if Value = "ILS" then
         return ILS;
      end if;
      if Value = "CHF" then
         return CHF;
      end if;
      if Value = "HKD" then
         return HKD;
      end if;
      if Value = "JPY" then
         return JPY;
      end if;
      if Value = "SGD" then
         return SGD;
      end if;
      if Value = "KRW" then
         return KRW;
      end if;
      if Value = "NOK" then
         return NOK;
      end if;
      if Value = "DKK" then
         return DKK;
      end if;
      if Value = "PLN" then
         return PLN;
      end if;
      if Value = "RON" then
         return RON;
      end if;
      if Value = "HUF" then
         return HUF;
      end if;
      if Value = "CZK" then
         return CZK;
      end if;
      if Value = "BRL" then
         return BRL;
      end if;
      if Value = "MXN" then
         return MXN;
      end if;
      if Value = "ARS" then
         return ARS;
      end if;
      if Value = "CLP" then
         return CLP;
      end if;
      if Value = "COP" then
         return COP;
      end if;
      if Value = "INR" then
         return INR;
      end if;
      if Value = "TRY" then
         return TRY;
      end if;
      raise Constraint_Error;
   end To_Currency_Type;

   function To_String (Value : in .Models.Currency_Type) return String is
   begin
      case Value is
         when UNK =>
            return "UNK";

         when USD =>
            return "USD";

         when GBP =>
            return "GBP";

         when CAD =>
            return "CAD";

         when EUR =>
            return "EUR";

         when AUD =>
            return "AUD";

         when NZD =>
            return "NZD";

         when SEK =>
            return "SEK";

         when ILS =>
            return "ILS";

         when CHF =>
            return "CHF";

         when HKD =>
            return "HKD";

         when JPY =>
            return "JPY";

         when SGD =>
            return "SGD";

         when KRW =>
            return "KRW";

         when NOK =>
            return "NOK";

         when DKK =>
            return "DKK";

         when PLN =>
            return "PLN";

         when RON =>
            return "RON";

         when HUF =>
            return "HUF";

         when CZK =>
            return "CZK";

         when BRL =>
            return "BRL";

         when MXN =>
            return "MXN";

         when ARS =>
            return "ARS";

         when CLP =>
            return "CLP";

         when COP =>
            return "COP";

         when INR =>
            return "INR";

         when TRY =>
            return "TRY";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Currency_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Currency_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Currency_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_Currency_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Currency_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Currency_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomColumnId_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomColumnId_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomColumnId_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomColumnId_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomColumnId_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomLabel0Filter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("CUSTOM_LABEL_0", Value.CUSTOM_LABEL_0);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomLabel0Filter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomLabel0Filter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "CUSTOM_LABEL_0", Value.CUSTOM_LABEL_0);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomLabel0Filter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomLabel0Filter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomLabel1Filter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("CUSTOM_LABEL_1", Value.CUSTOM_LABEL_1);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomLabel1Filter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomLabel1Filter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "CUSTOM_LABEL_1", Value.CUSTOM_LABEL_1);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomLabel1Filter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomLabel1Filter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomLabel2Filter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("CUSTOM_LABEL_2", Value.CUSTOM_LABEL_2);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomLabel2Filter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomLabel2Filter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "CUSTOM_LABEL_2", Value.CUSTOM_LABEL_2);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomLabel2Filter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomLabel2Filter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomLabel3Filter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("CUSTOM_LABEL_3", Value.CUSTOM_LABEL_3);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomLabel3Filter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomLabel3Filter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "CUSTOM_LABEL_3", Value.CUSTOM_LABEL_3);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomLabel3Filter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomLabel3Filter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomLabel4Filter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("CUSTOM_LABEL_4", Value.CUSTOM_LABEL_4);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomLabel4Filter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomLabel4Filter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "CUSTOM_LABEL_4", Value.CUSTOM_LABEL_4);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomLabel4Filter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomLabel4Filter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomerList_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Ad_Account_Id.Is_Null then
         Into.Write_Entity ("ad_account_id", Value.Ad_Account_Id);
      end if;
      Serialize (Into, "created_time", Value.Created_Time);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "num_batches", Value.Num_Batches);
      Serialize (Into, "num_removed_user_records", Value.Num_Removed_User_Records);
      Serialize (Into, "num_uploaded_user_records", Value.Num_Uploaded_User_Records);
      if not Value.Status.Is_Null then
         Into.Write_Entity ("status", Value.Status);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      Serialize (Into, "updated_time", Value.Updated_Time);
      if not Swagger.Is_Null (Value.Exceptions) then
         Into.Write_Entity ("exceptions", Value.Exceptions);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomerList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomerList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "ad_account_id", Value.Ad_Account_Id);
      Swagger.Streams.Deserialize (Object, "created_time", Value.Created_Time);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "num_batches", Value.Num_Batches);
      Swagger.Streams.Deserialize (Object, "num_removed_user_records", Value.Num_Removed_User_Records);
      Swagger.Streams.Deserialize (Object, "num_uploaded_user_records", Value.Num_Uploaded_User_Records);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "updated_time", Value.Updated_Time);
      Swagger.Streams.Deserialize (Object, "exceptions", Value.Exceptions);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomerList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomerList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_DataOutputFormat_Type (Value : in String) return .Models.DataOutputFormat_Type is
   begin
      if Value = "JSON" then
         return JSON;
      end if;
      if Value = "CSV" then
         return CSV;
      end if;
      raise Constraint_Error;
   end To_DataOutputFormat_Type;

   function To_String (Value : in .Models.DataOutputFormat_Type) return String is
   begin
      case Value is
         when JSON =>
            return "JSON";

         when CSV =>
            return "CSV";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DataOutputFormat_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DataOutputFormat_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DataOutputFormat_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_DataOutputFormat_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DataOutputFormat_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DataOutputFormat_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_DataStatus_Type (Value : in String) return .Models.DataStatus_Type is
   begin
      if Value = "PROCESSING" then
         return PROCESSING;
      end if;
      if Value = "READY" then
         return READY;
      end if;
      if Value = "ESTIMATE" then
         return ESTIMATE;
      end if;
      if Value = "BEFORE_BUSINESS_CREATED" then
         return BEFORE_BUSINESS_CREATED;
      end if;
      if Value = "BEFORE_DATA_RETENTION_PERIOD" then
         return BEFORE_DATA_RETENTION_PERIOD;
      end if;
      if Value = "BEFORE_PIN_DATA_RETENTION_PERIOD" then
         return BEFORE_PIN_DATA_RETENTION_PERIOD;
      end if;
      if Value = "BEFORE_METRIC_START_DATE" then
         return BEFORE_METRIC_START_DATE;
      end if;
      if Value = "BEFORE_CORE_METRIC_START_DATE" then
         return BEFORE_CORE_METRIC_START_DATE;
      end if;
      if Value = "BEFORE_PIN_FORMAT_METRIC_START_DATE" then
         return BEFORE_PIN_FORMAT_METRIC_START_DATE;
      end if;
      if Value = "BEFORE_AUDIENCE_METRIC_START_DATE" then
         return BEFORE_AUDIENCE_METRIC_START_DATE;
      end if;
      if Value = "BEFORE_AUDIENCE_MONTHLY_METRIC_START_DATE" then
         return BEFORE_AUDIENCE_MONTHLY_METRIC_START_DATE;
      end if;
      if Value = "BEFORE_VIDEO_METRIC_START_DATE" then
         return BEFORE_VIDEO_METRIC_START_DATE;
      end if;
      if Value = "BEFORE_CONVERSION_METRIC_START_DATE" then
         return BEFORE_CONVERSION_METRIC_START_DATE;
      end if;
      if Value = "PURCHASERS_METRIC_SMALLER_THAN_THRESHOLD" then
         return PURCHASERS_METRIC_SMALLER_THAN_THRESHOLD;
      end if;
      if Value = "IN_BAD_TAG_DATE" then
         return IN_BAD_TAG_DATE;
      end if;
      if Value = "BEFORE_PUBLISHED_METRIC_START_DATE" then
         return BEFORE_PUBLISHED_METRIC_START_DATE;
      end if;
      if Value = "BEFORE_ASSIST_METRIC_START_DATE" then
         return BEFORE_ASSIST_METRIC_START_DATE;
      end if;
      if Value = "BEFORE_PIN_CREATED" then
         return BEFORE_PIN_CREATED;
      end if;
      if Value = "BEFORE_ACCOUNT_CLAIMED" then
         return BEFORE_ACCOUNT_CLAIMED;
      end if;
      if Value = "BEFORE_DEMOGRAPHIC_FILTERS_START_DATE" then
         return BEFORE_DEMOGRAPHIC_FILTERS_START_DATE;
      end if;
      if Value = "AUDIENCE_SEGMENT_SMALLER_THAN_THRESHOLD" then
         return AUDIENCE_SEGMENT_SMALLER_THAN_THRESHOLD;
      end if;
      if Value = "AUDIENCE_TOTAL_SMALLER_THAN_THRESHOLD" then
         return AUDIENCE_TOTAL_SMALLER_THAN_THRESHOLD;
      end if;
      if Value = "BEFORE_PRODUCT_GROUP_FILTER_START_DATE" then
         return BEFORE_PRODUCT_GROUP_FILTER_START_DATE;
      end if;
      raise Constraint_Error;
   end To_DataStatus_Type;

   function To_String (Value : in .Models.DataStatus_Type) return String is
   begin
      case Value is
         when PROCESSING =>
            return "PROCESSING";

         when READY =>
            return "READY";

         when ESTIMATE =>
            return "ESTIMATE";

         when BEFORE_BUSINESS_CREATED =>
            return "BEFORE_BUSINESS_CREATED";

         when BEFORE_DATA_RETENTION_PERIOD =>
            return "BEFORE_DATA_RETENTION_PERIOD";

         when BEFORE_PIN_DATA_RETENTION_PERIOD =>
            return "BEFORE_PIN_DATA_RETENTION_PERIOD";

         when BEFORE_METRIC_START_DATE =>
            return "BEFORE_METRIC_START_DATE";

         when BEFORE_CORE_METRIC_START_DATE =>
            return "BEFORE_CORE_METRIC_START_DATE";

         when BEFORE_PIN_FORMAT_METRIC_START_DATE =>
            return "BEFORE_PIN_FORMAT_METRIC_START_DATE";

         when BEFORE_AUDIENCE_METRIC_START_DATE =>
            return "BEFORE_AUDIENCE_METRIC_START_DATE";

         when BEFORE_AUDIENCE_MONTHLY_METRIC_START_DATE =>
            return "BEFORE_AUDIENCE_MONTHLY_METRIC_START_DATE";

         when BEFORE_VIDEO_METRIC_START_DATE =>
            return "BEFORE_VIDEO_METRIC_START_DATE";

         when BEFORE_CONVERSION_METRIC_START_DATE =>
            return "BEFORE_CONVERSION_METRIC_START_DATE";

         when PURCHASERS_METRIC_SMALLER_THAN_THRESHOLD =>
            return "PURCHASERS_METRIC_SMALLER_THAN_THRESHOLD";

         when IN_BAD_TAG_DATE =>
            return "IN_BAD_TAG_DATE";

         when BEFORE_PUBLISHED_METRIC_START_DATE =>
            return "BEFORE_PUBLISHED_METRIC_START_DATE";

         when BEFORE_ASSIST_METRIC_START_DATE =>
            return "BEFORE_ASSIST_METRIC_START_DATE";

         when BEFORE_PIN_CREATED =>
            return "BEFORE_PIN_CREATED";

         when BEFORE_ACCOUNT_CLAIMED =>
            return "BEFORE_ACCOUNT_CLAIMED";

         when BEFORE_DEMOGRAPHIC_FILTERS_START_DATE =>
            return "BEFORE_DEMOGRAPHIC_FILTERS_START_DATE";

         when AUDIENCE_SEGMENT_SMALLER_THAN_THRESHOLD =>
            return "AUDIENCE_SEGMENT_SMALLER_THAN_THRESHOLD";

         when AUDIENCE_TOTAL_SMALLER_THAN_THRESHOLD =>
            return "AUDIENCE_TOTAL_SMALLER_THAN_THRESHOLD";

         when BEFORE_PRODUCT_GROUP_FILTER_START_DATE =>
            return "BEFORE_PRODUCT_GROUP_FILTER_START_DATE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DataStatus_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DataStatus_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DataStatus_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_DataStatus_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DataStatus_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DataStatus_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeleteAssetGroupBody_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "asset_groups_to_delete", Value.Asset_Groups_To_Delete);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeleteAssetGroupBody_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeleteAssetGroupBody_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "asset_groups_to_delete", Value.Asset_Groups_To_Delete);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeleteAssetGroupBody_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeleteAssetGroupBody_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeleteAssetGroupResponseExceptionsInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Code.Is_Null then
         Into.Write_Entity ("code", Value.Code);
      end if;
      if not Value.Message.Is_Null then
         Into.Write_Entity ("message", Value.Message);
      end if;
      if not Value.Asset_Group_Id.Is_Null then
         Into.Write_Entity ("asset_group_id", Value.Asset_Group_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeleteAssetGroupResponseExceptionsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeleteAssetGroupResponseExceptionsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "message", Value.Message);
      Swagger.Streams.Deserialize (Object, "asset_group_id", Value.Asset_Group_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeleteAssetGroupResponseExceptionsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeleteAssetGroupResponseExceptionsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeleteInvitesResultsResponseArrayItemsInnerException_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Invite_Id.Is_Null then
         Into.Write_Entity ("invite_id", Value.Invite_Id);
      end if;
      if not Value.Message.Is_Null then
         Into.Write_Entity ("message", Value.Message);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeleteInvitesResultsResponseArrayItemsInnerException_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeleteInvitesResultsResponseArrayItemsInnerException_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "invite_id", Value.Invite_Id);
      Swagger.Streams.Deserialize (Object, "message", Value.Message);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeleteInvitesResultsResponseArrayItemsInnerException_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeleteInvitesResultsResponseArrayItemsInnerException_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeleteMemberAccessResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Asset_Id.Is_Null then
         Into.Write_Entity ("asset_id", Value.Asset_Id);
      end if;
      if not Value.Member_Id.Is_Null then
         Into.Write_Entity ("member_id", Value.Member_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeleteMemberAccessResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeleteMemberAccessResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "asset_id", Value.Asset_Id);
      Swagger.Streams.Deserialize (Object, "member_id", Value.Member_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeleteMemberAccessResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeleteMemberAccessResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeletePartnerAssetAccessBodyAccessesInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("partner_id", Value.Partner_Id);
      Into.Write_Entity ("asset_id", Value.Asset_Id);
      if not Value.Partner_Type.Is_Null then
         Into.Write_Entity ("partner_type", Value.Partner_Type);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeletePartnerAssetAccessBodyAccessesInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeletePartnerAssetAccessBodyAccessesInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "partner_id", Value.Partner_Id);
      Swagger.Streams.Deserialize (Object, "asset_id", Value.Asset_Id);
      Swagger.Streams.Deserialize (Object, "partner_type", Value.Partner_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeletePartnerAssetAccessBodyAccessesInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeletePartnerAssetAccessBodyAccessesInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeletePartnerAssetsResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Asset_Id.Is_Null then
         Into.Write_Entity ("asset_id", Value.Asset_Id);
      end if;
      if not Value.Asset_Type.Is_Null then
         Into.Write_Entity ("asset_type", Value.Asset_Type);
      end if;
      Serialize (Into, "permissions", Value.Permissions);
      if not Value.Is_Shared_Partner.Is_Null then
         Into.Write_Entity ("is_shared_partner", Value.Is_Shared_Partner);
      end if;
      if not Value.Partner_Id.Is_Null then
         Into.Write_Entity ("partner_id", Value.Partner_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeletePartnerAssetsResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeletePartnerAssetsResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "asset_id", Value.Asset_Id);
      Swagger.Streams.Deserialize (Object, "asset_type", Value.Asset_Type);
      Swagger.Streams.Deserialize (Object, "permissions", Value.Permissions);
      Swagger.Streams.Deserialize (Object, "is_shared_partner", Value.Is_Shared_Partner);
      Swagger.Streams.Deserialize (Object, "partner_id", Value.Partner_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeletePartnerAssetsResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeletePartnerAssetsResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeletePartnersRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "partner_ids", Value.Partner_Ids);
      Into.Write_Entity ("partner_type", Value.Partner_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeletePartnersRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeletePartnersRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "partner_ids", Value.Partner_Ids);
      Swagger.Streams.Deserialize (Object, "partner_type", Value.Partner_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeletePartnersRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeletePartnersRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeletePartnersResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "deleted_partners", Value.Deleted_Partners);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeletePartnersResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeletePartnersResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "deleted_partners", Value.Deleted_Partners);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeletePartnersResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeletePartnersResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeletedMembersResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "deleted_members", Value.Deleted_Members);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeletedMembersResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeletedMembersResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "deleted_members", Value.Deleted_Members);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeletedMembersResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeletedMembersResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeliveryMetricsResponseItemsInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Category.Is_Null then
         Into.Write_Entity ("category", Value.Category);
      end if;
      if not Value.Definition.Is_Null then
         Into.Write_Entity ("definition", Value.Definition);
      end if;
      if not Value.Display_Name.Is_Null then
         Into.Write_Entity ("display_name", Value.Display_Name);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeliveryMetricsResponseItemsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeliveryMetricsResponseItemsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "category", Value.Category);
      Swagger.Streams.Deserialize (Object, "definition", Value.Definition);
      Swagger.Streams.Deserialize (Object, "display_name", Value.Display_Name);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeliveryMetricsResponseItemsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeliveryMetricsResponseItemsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DetailedError_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("code", Value.Code);
      Into.Write_Entity ("message", Value.Message);
      Into.Write_Entity ("details", Value.Details);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DetailedError_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DetailedError_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "message", Value.Message);
      Swagger.Streams.Deserialize (Object, "details", Value.Details);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DetailedError_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DetailedError_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_EnhancedMatchStatusType_Type (Value : in String) return .Models.EnhancedMatchStatusType_Type is
   begin
      if Value = "UNKNOWN" then
         return UNKNOWN;
      end if;
      if Value = "NOT_VALIDATED" then
         return NOT_VALIDATED;
      end if;
      if Value = "VALIDATING_IN_PROGRESS" then
         return VALIDATING_IN_PROGRESS;
      end if;
      if Value = "VALIDATION_COMPLETE" then
         return VALIDATION_COMPLETE;
      end if;
      raise Constraint_Error;
   end To_EnhancedMatchStatusType_Type;

   function To_String (Value : in .Models.EnhancedMatchStatusType_Type) return String is
   begin
      case Value is
         when UNKNOWN =>
            return "UNKNOWN";

         when NOT_VALIDATED =>
            return "NOT_VALIDATED";

         when VALIDATING_IN_PROGRESS =>
            return "VALIDATING_IN_PROGRESS";

         when VALIDATION_COMPLETE =>
            return "VALIDATION_COMPLETE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.EnhancedMatchStatusType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EnhancedMatchStatusType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.EnhancedMatchStatusType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_EnhancedMatchStatusType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out EnhancedMatchStatusType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.EnhancedMatchStatusType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_EntityStatus_Type (Value : in String) return .Models.EntityStatus_Type is
   begin
      if Value = "ACTIVE" then
         return ACTIVE;
      end if;
      if Value = "PAUSED" then
         return PAUSED;
      end if;
      if Value = "ARCHIVED" then
         return ARCHIVED;
      end if;
      if Value = "DRAFT" then
         return DRAFT;
      end if;
      if Value = "DELETED_DRAFT" then
         return DELETED_DRAFT;
      end if;
      raise Constraint_Error;
   end To_EntityStatus_Type;

   function To_String (Value : in .Models.EntityStatus_Type) return String is
   begin
      case Value is
         when ACTIVE =>
            return "ACTIVE";

         when PAUSED =>
            return "PAUSED";

         when ARCHIVED =>
            return "ARCHIVED";

         when DRAFT =>
            return "DRAFT";

         when DELETED_DRAFT =>
            return "DELETED_DRAFT";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.EntityStatus_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EntityStatus_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.EntityStatus_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_EntityStatus_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out EntityStatus_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.EntityStatus_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Error_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("code", Value.Code);
      Into.Write_Entity ("message", Value.Message);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Error_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Error_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "message", Value.Message);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Error_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Error_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FollowUserRequest_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Auto_Follow.Is_Null then
         Into.Write_Entity ("auto_follow", Value.Auto_Follow);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FollowUserRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FollowUserRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "auto_follow", Value.Auto_Follow);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FollowUserRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FollowUserRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GenderFilter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("GENDER", Value.GENDER);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GenderFilter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GenderFilter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "GENDER", Value.GENDER);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GenderFilter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GenderFilter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_Gender_Type (Value : in String) return .Models.Gender_Type is
   begin
      if Value = "FEMALE" then
         return FEMALE;
      end if;
      if Value = "MALE" then
         return MALE;
      end if;
      if Value = "UNISEX" then
         return UNISEX;
      end if;
      raise Constraint_Error;
   end To_Gender_Type;

   function To_String (Value : in .Models.Gender_Type) return String is
   begin
      case Value is
         when FEMALE =>
            return "FEMALE";

         when MALE =>
            return "MALE";

         when UNISEX =>
            return "UNISEX";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Gender_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Gender_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Gender_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_Gender_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Gender_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Gender_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_GetAudiencesOrderBy_Type (Value : in String) return .Models.GetAudiencesOrderBy_Type is
   begin
      if Value = "NONE" then
         return NONE;
      end if;
      if Value = "ID" then
         return ID;
      end if;
      if Value = "SIZE" then
         return SIZE;
      end if;
      if Value = "CREATION_DATE" then
         return CREATION_DATE;
      end if;
      if Value = "UPDATED_TIME" then
         return UPDATED_TIME;
      end if;
      if Value = "NAME" then
         return NAME;
      end if;
      if Value = "STATUS" then
         return STATUS;
      end if;
      if Value = "TYPE" then
         return TYPE;
      end if;
      raise Constraint_Error;
   end To_GetAudiencesOrderBy_Type;

   function To_String (Value : in .Models.GetAudiencesOrderBy_Type) return String is
   begin
      case Value is
         when NONE =>
            return "NONE";

         when ID =>
            return "ID";

         when SIZE =>
            return "SIZE";

         when CREATION_DATE =>
            return "CREATION_DATE";

         when UPDATED_TIME =>
            return "UPDATED_TIME";

         when NAME =>
            return "NAME";

         when STATUS =>
            return "STATUS";

         when TYPE =>
            return "TYPE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetAudiencesOrderBy_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetAudiencesOrderBy_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetAudiencesOrderBy_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_GetAudiencesOrderBy_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetAudiencesOrderBy_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetAudiencesOrderBy_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_GetBusinessAssetTypeResponse_Type (Value : in String) return .Models.GetBusinessAssetTypeResponse_Type is
   begin
      if Value = "AD_ACCOUNT" then
         return AD_ACCOUNT;
      end if;
      if Value = "PROFILE" then
         return PROFILE;
      end if;
      if Value = "ASSET_GROUP" then
         return ASSET_GROUP;
      end if;
      if Value = "CONVERSION_TAG" then
         return CONVERSION_TAG;
      end if;
      raise Constraint_Error;
   end To_GetBusinessAssetTypeResponse_Type;

   function To_String (Value : in .Models.GetBusinessAssetTypeResponse_Type) return String is
   begin
      case Value is
         when AD_ACCOUNT =>
            return "AD_ACCOUNT";

         when PROFILE =>
            return "PROFILE";

         when ASSET_GROUP =>
            return "ASSET_GROUP";

         when CONVERSION_TAG =>
            return "CONVERSION_TAG";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetBusinessAssetTypeResponse_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetBusinessAssetTypeResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetBusinessAssetTypeResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_GetBusinessAssetTypeResponse_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetBusinessAssetTypeResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetBusinessAssetTypeResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetMMMReportResponseData_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Report_Status.Is_Null then
         Into.Write_Entity ("report_status", Value.Report_Status);
      end if;
      Into.Write_Entity ("url", Value.Url);
      Serialize (Into, "size", Value.Size);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetMMMReportResponseData_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetMMMReportResponseData_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "report_status", Value.Report_Status);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "size", Value.Size);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetMMMReportResponseData_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetMMMReportResponseData_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GoogleProductCategory0Filter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("GOOGLE_PRODUCT_CATEGORY_0", Value.GOOGLE_PRODUCT_CATEGORY_0);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GoogleProductCategory0Filter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GoogleProductCategory0Filter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "GOOGLE_PRODUCT_CATEGORY_0", Value.GOOGLE_PRODUCT_CATEGORY_0);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GoogleProductCategory0Filter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GoogleProductCategory0Filter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GoogleProductCategory1Filter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("GOOGLE_PRODUCT_CATEGORY_1", Value.GOOGLE_PRODUCT_CATEGORY_1);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GoogleProductCategory1Filter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GoogleProductCategory1Filter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "GOOGLE_PRODUCT_CATEGORY_1", Value.GOOGLE_PRODUCT_CATEGORY_1);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GoogleProductCategory1Filter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GoogleProductCategory1Filter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GoogleProductCategory2Filter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("GOOGLE_PRODUCT_CATEGORY_2", Value.GOOGLE_PRODUCT_CATEGORY_2);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GoogleProductCategory2Filter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GoogleProductCategory2Filter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "GOOGLE_PRODUCT_CATEGORY_2", Value.GOOGLE_PRODUCT_CATEGORY_2);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GoogleProductCategory2Filter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GoogleProductCategory2Filter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GoogleProductCategory3Filter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("GOOGLE_PRODUCT_CATEGORY_3", Value.GOOGLE_PRODUCT_CATEGORY_3);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GoogleProductCategory3Filter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GoogleProductCategory3Filter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "GOOGLE_PRODUCT_CATEGORY_3", Value.GOOGLE_PRODUCT_CATEGORY_3);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GoogleProductCategory3Filter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GoogleProductCategory3Filter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GoogleProductCategory4Filter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("GOOGLE_PRODUCT_CATEGORY_4", Value.GOOGLE_PRODUCT_CATEGORY_4);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GoogleProductCategory4Filter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GoogleProductCategory4Filter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "GOOGLE_PRODUCT_CATEGORY_4", Value.GOOGLE_PRODUCT_CATEGORY_4);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GoogleProductCategory4Filter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GoogleProductCategory4Filter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GoogleProductCategory5Filter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("GOOGLE_PRODUCT_CATEGORY_5", Value.GOOGLE_PRODUCT_CATEGORY_5);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GoogleProductCategory5Filter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GoogleProductCategory5Filter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "GOOGLE_PRODUCT_CATEGORY_5", Value.GOOGLE_PRODUCT_CATEGORY_5);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GoogleProductCategory5Filter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GoogleProductCategory5Filter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GoogleProductCategory6Filter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("GOOGLE_PRODUCT_CATEGORY_6", Value.GOOGLE_PRODUCT_CATEGORY_6);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GoogleProductCategory6Filter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GoogleProductCategory6Filter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "GOOGLE_PRODUCT_CATEGORY_6", Value.GOOGLE_PRODUCT_CATEGORY_6);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GoogleProductCategory6Filter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GoogleProductCategory6Filter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_Granularity_Type (Value : in String) return .Models.Granularity_Type is
   begin
      if Value = "TOTAL" then
         return TOTAL;
      end if;
      if Value = "DAY" then
         return DAY;
      end if;
      if Value = "HOUR" then
         return HOUR;
      end if;
      if Value = "WEEK" then
         return WEEK;
      end if;
      if Value = "MONTH" then
         return MONTH;
      end if;
      raise Constraint_Error;
   end To_Granularity_Type;

   function To_String (Value : in .Models.Granularity_Type) return String is
   begin
      case Value is
         when TOTAL =>
            return "TOTAL";

         when DAY =>
            return "DAY";

         when HOUR =>
            return "HOUR";

         when WEEK =>
            return "WEEK";

         when MONTH =>
            return "MONTH";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Granularity_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Granularity_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Granularity_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_Granularity_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Granularity_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Granularity_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_GridClickType_Type (Value : in String) return .Models.GridClickType_Type is
   begin
      if Value = "CLOSEUP" then
         return CLOSEUP;
      end if;
      if Value = "DIRECT_TO_DESTINATION" then
         return DIRECT_TO_DESTINATION;
      end if;
      raise Constraint_Error;
   end To_GridClickType_Type;

   function To_String (Value : in .Models.GridClickType_Type) return String is
   begin
      case Value is
         when CLOSEUP =>
            return "CLOSEUP";

         when DIRECT_TO_DESTINATION =>
            return "DIRECT_TO_DESTINATION";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GridClickType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GridClickType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GridClickType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_GridClickType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GridClickType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GridClickType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.HotelIdFilter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("HOTEL_ID", Value.HOTEL_ID);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in HotelIdFilter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.HotelIdFilter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "HOTEL_ID", Value.HOTEL_ID);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out HotelIdFilter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.HotelIdFilter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ImageDetails_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("width", Value.Width);
      Into.Write_Entity ("height", Value.Height);
      Into.Write_Entity ("url", Value.Url);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ImageDetails_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ImageDetails_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "width", Value.Width);
      Swagger.Streams.Deserialize (Object, "height", Value.Height);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ImageDetails_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ImageDetails_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ImageMetadataImages_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("150x150", Value.P_150x_150);
      Into.Write_Entity ("400x300", Value.P_400x_300);
      Into.Write_Entity ("600x", Value.P_600x);
      Into.Write_Entity ("1200x", Value.P_1200x);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ImageMetadataImages_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ImageMetadataImages_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "150x150", Value.P_150x_150);
      Swagger.Streams.Deserialize (Object, "400x300", Value.P_400x_300);
      Swagger.Streams.Deserialize (Object, "600x", Value.P_600x);
      Swagger.Streams.Deserialize (Object, "1200x", Value.P_1200x);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ImageMetadataImages_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ImageMetadataImages_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.IntegrationLogClientError_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Cause.Is_Null then
         Into.Write_Entity ("cause", Value.Cause);
      end if;
      if not Value.Column_Number.Is_Null then
         Into.Write_Entity ("column_number", Value.Column_Number);
      end if;
      if not Value.File_Name.Is_Null then
         Into.Write_Entity ("file_name", Value.File_Name);
      end if;
      if not Value.Line_Number.Is_Null then
         Into.Write_Entity ("line_number", Value.Line_Number);
      end if;
      if not Value.Message.Is_Null then
         Into.Write_Entity ("message", Value.Message);
      end if;
      if not Value.Message_Detail.Is_Null then
         Into.Write_Entity ("message_detail", Value.Message_Detail);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Number.Is_Null then
         Into.Write_Entity ("number", Value.Number);
      end if;
      if not Value.Stack_Trace.Is_Null then
         Into.Write_Entity ("stack_trace", Value.Stack_Trace);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in IntegrationLogClientError_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.IntegrationLogClientError_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "cause", Value.Cause);
      Swagger.Streams.Deserialize (Object, "column_number", Value.Column_Number);
      Swagger.Streams.Deserialize (Object, "file_name", Value.File_Name);
      Swagger.Streams.Deserialize (Object, "line_number", Value.Line_Number);
      Swagger.Streams.Deserialize (Object, "message", Value.Message);
      Swagger.Streams.Deserialize (Object, "message_detail", Value.Message_Detail);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "number", Value.Number);
      Swagger.Streams.Deserialize (Object, "stack_trace", Value.Stack_Trace);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out IntegrationLogClientError_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.IntegrationLogClientError_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.IntegrationLogClientRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("method", Value.Method);
      Into.Write_Entity ("host", Value.Host);
      Into.Write_Entity ("path", Value.Path);
      Serialize (Into, "request_headers", Value.Request_Headers);
      Serialize (Into, "response_headers", Value.Response_Headers);
      if not Value.Response_Status_Code.Is_Null then
         Into.Write_Entity ("response_status_code", Value.Response_Status_Code);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in IntegrationLogClientRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.IntegrationLogClientRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "method", Value.Method);
      Swagger.Streams.Deserialize (Object, "host", Value.Host);
      Swagger.Streams.Deserialize (Object, "path", Value.Path);
      Swagger.Streams.Deserialize (Object, "request_headers", Value.Request_Headers);
      Swagger.Streams.Deserialize (Object, "response_headers", Value.Response_Headers);
      Swagger.Streams.Deserialize (Object, "response_status_code", Value.Response_Status_Code);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out IntegrationLogClientRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.IntegrationLogClientRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.IntegrationLogsInvalidLogResponseRejectedLogsInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Log_Index.Is_Null then
         Into.Write_Entity ("log_index", Value.Log_Index);
      end if;
      Into.Write_Entity ("field", Value.Field);
      Into.Write_Entity ("value", Value.Value);
      Into.Write_Entity ("reason", Value.Reason);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in IntegrationLogsInvalidLogResponseRejectedLogsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.IntegrationLogsInvalidLogResponseRejectedLogsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "log_index", Value.Log_Index);
      Swagger.Streams.Deserialize (Object, "field", Value.Field);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Swagger.Streams.Deserialize (Object, "reason", Value.Reason);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out IntegrationLogsInvalidLogResponseRejectedLogsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.IntegrationLogsInvalidLogResponseRejectedLogsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.IntegrationLogsSuccessResponse_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Message.Is_Null then
         Into.Write_Entity ("message", Value.Message);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in IntegrationLogsSuccessResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.IntegrationLogsSuccessResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "message", Value.Message);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out IntegrationLogsSuccessResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.IntegrationLogsSuccessResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.IntegrationMetadata_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.External_Business_Id.Is_Null then
         Into.Write_Entity ("external_business_id", Value.External_Business_Id);
      end if;
      if not Value.Connected_Merchant_Id.Is_Null then
         Into.Write_Entity ("connected_merchant_id", Value.Connected_Merchant_Id);
      end if;
      if not Value.Connected_User_Id.Is_Null then
         Into.Write_Entity ("connected_user_id", Value.Connected_User_Id);
      end if;
      if not Value.Connected_Advertiser_Id.Is_Null then
         Into.Write_Entity ("connected_advertiser_id", Value.Connected_Advertiser_Id);
      end if;
      if not Value.Connected_Lba_Id.Is_Null then
         Into.Write_Entity ("connected_lba_id", Value.Connected_Lba_Id);
      end if;
      if not Value.Connected_Tag_Id.Is_Null then
         Into.Write_Entity ("connected_tag_id", Value.Connected_Tag_Id);
      end if;
      Serialize (Into, "partner_access_token_expiry", Value.Partner_Access_Token_Expiry);
      Serialize (Into, "partner_refresh_token_expiry", Value.Partner_Refresh_Token_Expiry);
      if not Value.Scopes.Is_Null then
         Into.Write_Entity ("scopes", Value.Scopes);
      end if;
      Serialize (Into, "created_timestamp", Value.Created_Timestamp);
      Serialize (Into, "updated_timestamp", Value.Updated_Timestamp);
      if not Value.Additional_Id_1.Is_Null then
         Into.Write_Entity ("additional_id_1", Value.Additional_Id_1);
      end if;
      if not Value.Partner_Metadata.Is_Null then
         Into.Write_Entity ("partner_metadata", Value.Partner_Metadata);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in IntegrationMetadata_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.IntegrationMetadata_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "external_business_id", Value.External_Business_Id);
      Swagger.Streams.Deserialize (Object, "connected_merchant_id", Value.Connected_Merchant_Id);
      Swagger.Streams.Deserialize (Object, "connected_user_id", Value.Connected_User_Id);
      Swagger.Streams.Deserialize (Object, "connected_advertiser_id", Value.Connected_Advertiser_Id);
      Swagger.Streams.Deserialize (Object, "connected_lba_id", Value.Connected_Lba_Id);
      Swagger.Streams.Deserialize (Object, "connected_tag_id", Value.Connected_Tag_Id);
      Swagger.Streams.Deserialize (Object, "partner_access_token_expiry", Value.Partner_Access_Token_Expiry);
      Swagger.Streams.Deserialize (Object, "partner_refresh_token_expiry", Value.Partner_Refresh_Token_Expiry);
      Swagger.Streams.Deserialize (Object, "scopes", Value.Scopes);
      Swagger.Streams.Deserialize (Object, "created_timestamp", Value.Created_Timestamp);
      Swagger.Streams.Deserialize (Object, "updated_timestamp", Value.Updated_Timestamp);
      Swagger.Streams.Deserialize (Object, "additional_id_1", Value.Additional_Id_1);
      Swagger.Streams.Deserialize (Object, "partner_metadata", Value.Partner_Metadata);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out IntegrationMetadata_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.IntegrationMetadata_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.IntegrationRecord_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Into.Write_Entity ("external_business_id", Value.External_Business_Id);
      Into.Write_Entity ("connected_merchant_id", Value.Connected_Merchant_Id);
      if not Value.Connected_User_Id.Is_Null then
         Into.Write_Entity ("connected_user_id", Value.Connected_User_Id);
      end if;
      Into.Write_Entity ("connected_advertiser_id", Value.Connected_Advertiser_Id);
      Into.Write_Entity ("connected_lba_id", Value.Connected_Lba_Id);
      Into.Write_Entity ("connected_tag_id", Value.Connected_Tag_Id);
      Into.Write_Entity ("partner_access_token", Value.Partner_Access_Token);
      Into.Write_Entity ("partner_refresh_token", Value.Partner_Refresh_Token);
      Into.Write_Entity ("partner_primary_email", Value.Partner_Primary_Email);
      Into.Write_Entity ("partner_access_token_expiry", Value.Partner_Access_Token_Expiry);
      Into.Write_Entity ("partner_refresh_token_expiry", Value.Partner_Refresh_Token_Expiry);
      Into.Write_Entity ("scopes", Value.Scopes);
      Into.Write_Entity ("partner_metadata", Value.Partner_Metadata);
      Into.Write_Entity ("additional_id_1", Value.Additional_Id_1);
      if not Value.Created_Time.Is_Null then
         Into.Write_Entity ("created_time", Value.Created_Time);
      end if;
      if not Value.Updated_Time.Is_Null then
         Into.Write_Entity ("updated_time", Value.Updated_Time);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in IntegrationRecord_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.IntegrationRecord_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "external_business_id", Value.External_Business_Id);
      Swagger.Streams.Deserialize (Object, "connected_merchant_id", Value.Connected_Merchant_Id);
      Swagger.Streams.Deserialize (Object, "connected_user_id", Value.Connected_User_Id);
      Swagger.Streams.Deserialize (Object, "connected_advertiser_id", Value.Connected_Advertiser_Id);
      Swagger.Streams.Deserialize (Object, "connected_lba_id", Value.Connected_Lba_Id);
      Swagger.Streams.Deserialize (Object, "connected_tag_id", Value.Connected_Tag_Id);
      Swagger.Streams.Deserialize (Object, "partner_access_token", Value.Partner_Access_Token);
      Swagger.Streams.Deserialize (Object, "partner_refresh_token", Value.Partner_Refresh_Token);
      Swagger.Streams.Deserialize (Object, "partner_primary_email", Value.Partner_Primary_Email);
      Swagger.Streams.Deserialize (Object, "partner_access_token_expiry", Value.Partner_Access_Token_Expiry);
      Swagger.Streams.Deserialize (Object, "partner_refresh_token_expiry", Value.Partner_Refresh_Token_Expiry);
      Swagger.Streams.Deserialize (Object, "scopes", Value.Scopes);
      Swagger.Streams.Deserialize (Object, "partner_metadata", Value.Partner_Metadata);
      Swagger.Streams.Deserialize (Object, "additional_id_1", Value.Additional_Id_1);
      Swagger.Streams.Deserialize (Object, "created_time", Value.Created_Time);
      Swagger.Streams.Deserialize (Object, "updated_time", Value.Updated_Time);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out IntegrationRecord_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.IntegrationRecord_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.IntegrationRequestPatch_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Connected_Merchant_Id.Is_Null then
         Into.Write_Entity ("connected_merchant_id", Value.Connected_Merchant_Id);
      end if;
      if not Value.Connected_Advertiser_Id.Is_Null then
         Into.Write_Entity ("connected_advertiser_id", Value.Connected_Advertiser_Id);
      end if;
      if not Value.Connected_Lba_Id.Is_Null then
         Into.Write_Entity ("connected_lba_id", Value.Connected_Lba_Id);
      end if;
      if not Value.Connected_Tag_Id.Is_Null then
         Into.Write_Entity ("connected_tag_id", Value.Connected_Tag_Id);
      end if;
      if not Value.Partner_Access_Token.Is_Null then
         Into.Write_Entity ("partner_access_token", Value.Partner_Access_Token);
      end if;
      if not Value.Partner_Refresh_Token.Is_Null then
         Into.Write_Entity ("partner_refresh_token", Value.Partner_Refresh_Token);
      end if;
      if not Value.Partner_Primary_Email.Is_Null then
         Into.Write_Entity ("partner_primary_email", Value.Partner_Primary_Email);
      end if;
      Serialize (Into, "partner_access_token_expiry", Value.Partner_Access_Token_Expiry);
      Serialize (Into, "partner_refresh_token_expiry", Value.Partner_Refresh_Token_Expiry);
      if not Value.Scopes.Is_Null then
         Into.Write_Entity ("scopes", Value.Scopes);
      end if;
      if not Value.Additional_Id_1.Is_Null then
         Into.Write_Entity ("additional_id_1", Value.Additional_Id_1);
      end if;
      if not Value.Partner_Metadata.Is_Null then
         Into.Write_Entity ("partner_metadata", Value.Partner_Metadata);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in IntegrationRequestPatch_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.IntegrationRequestPatch_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "connected_merchant_id", Value.Connected_Merchant_Id);
      Swagger.Streams.Deserialize (Object, "connected_advertiser_id", Value.Connected_Advertiser_Id);
      Swagger.Streams.Deserialize (Object, "connected_lba_id", Value.Connected_Lba_Id);
      Swagger.Streams.Deserialize (Object, "connected_tag_id", Value.Connected_Tag_Id);
      Swagger.Streams.Deserialize (Object, "partner_access_token", Value.Partner_Access_Token);
      Swagger.Streams.Deserialize (Object, "partner_refresh_token", Value.Partner_Refresh_Token);
      Swagger.Streams.Deserialize (Object, "partner_primary_email", Value.Partner_Primary_Email);
      Swagger.Streams.Deserialize (Object, "partner_access_token_expiry", Value.Partner_Access_Token_Expiry);
      Swagger.Streams.Deserialize (Object, "partner_refresh_token_expiry", Value.Partner_Refresh_Token_Expiry);
      Swagger.Streams.Deserialize (Object, "scopes", Value.Scopes);
      Swagger.Streams.Deserialize (Object, "additional_id_1", Value.Additional_Id_1);
      Swagger.Streams.Deserialize (Object, "partner_metadata", Value.Partner_Metadata);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out IntegrationRequestPatch_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.IntegrationRequestPatch_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.IntegrationRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("external_business_id", Value.External_Business_Id);
      if not Value.Connected_Merchant_Id.Is_Null then
         Into.Write_Entity ("connected_merchant_id", Value.Connected_Merchant_Id);
      end if;
      if not Value.Connected_Advertiser_Id.Is_Null then
         Into.Write_Entity ("connected_advertiser_id", Value.Connected_Advertiser_Id);
      end if;
      if not Value.Connected_Lba_Id.Is_Null then
         Into.Write_Entity ("connected_lba_id", Value.Connected_Lba_Id);
      end if;
      if not Value.Connected_Tag_Id.Is_Null then
         Into.Write_Entity ("connected_tag_id", Value.Connected_Tag_Id);
      end if;
      if not Value.Partner_Access_Token.Is_Null then
         Into.Write_Entity ("partner_access_token", Value.Partner_Access_Token);
      end if;
      if not Value.Partner_Refresh_Token.Is_Null then
         Into.Write_Entity ("partner_refresh_token", Value.Partner_Refresh_Token);
      end if;
      if not Value.Partner_Primary_Email.Is_Null then
         Into.Write_Entity ("partner_primary_email", Value.Partner_Primary_Email);
      end if;
      if not Value.Partner_Access_Token_Expiry.Is_Null then
         Into.Write_Entity ("partner_access_token_expiry", Value.Partner_Access_Token_Expiry);
      end if;
      if not Value.Partner_Refresh_Token_Expiry.Is_Null then
         Into.Write_Entity ("partner_refresh_token_expiry", Value.Partner_Refresh_Token_Expiry);
      end if;
      if not Value.Scopes.Is_Null then
         Into.Write_Entity ("scopes", Value.Scopes);
      end if;
      if not Value.Additional_Id_1.Is_Null then
         Into.Write_Entity ("additional_id_1", Value.Additional_Id_1);
      end if;
      if not Value.Partner_Metadata.Is_Null then
         Into.Write_Entity ("partner_metadata", Value.Partner_Metadata);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in IntegrationRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.IntegrationRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "external_business_id", Value.External_Business_Id);
      Swagger.Streams.Deserialize (Object, "connected_merchant_id", Value.Connected_Merchant_Id);
      Swagger.Streams.Deserialize (Object, "connected_advertiser_id", Value.Connected_Advertiser_Id);
      Swagger.Streams.Deserialize (Object, "connected_lba_id", Value.Connected_Lba_Id);
      Swagger.Streams.Deserialize (Object, "connected_tag_id", Value.Connected_Tag_Id);
      Swagger.Streams.Deserialize (Object, "partner_access_token", Value.Partner_Access_Token);
      Swagger.Streams.Deserialize (Object, "partner_refresh_token", Value.Partner_Refresh_Token);
      Swagger.Streams.Deserialize (Object, "partner_primary_email", Value.Partner_Primary_Email);
      Swagger.Streams.Deserialize (Object, "partner_access_token_expiry", Value.Partner_Access_Token_Expiry);
      Swagger.Streams.Deserialize (Object, "partner_refresh_token_expiry", Value.Partner_Refresh_Token_Expiry);
      Swagger.Streams.Deserialize (Object, "scopes", Value.Scopes);
      Swagger.Streams.Deserialize (Object, "additional_id_1", Value.Additional_Id_1);
      Swagger.Streams.Deserialize (Object, "partner_metadata", Value.Partner_Metadata);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out IntegrationRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.IntegrationRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Interest_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Canonical_Url.Is_Null then
         Into.Write_Entity ("canonical_url", Value.Canonical_Url);
      end if;
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Key.Is_Null then
         Into.Write_Entity ("key", Value.Key);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Interest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Interest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "canonical_url", Value.Canonical_Url);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "key", Value.Key);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Interest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Interest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.InviteAssetsSummaryAdAccountsInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Serialize (Into, "permissions", Value.Permissions);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InviteAssetsSummaryAdAccountsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.InviteAssetsSummaryAdAccountsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "permissions", Value.Permissions);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out InviteAssetsSummaryAdAccountsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.InviteAssetsSummaryAdAccountsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.InviteAssetsSummaryProfilesInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Serialize (Into, "permissions", Value.Permissions);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InviteAssetsSummaryProfilesInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.InviteAssetsSummaryProfilesInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "permissions", Value.Permissions);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out InviteAssetsSummaryProfilesInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.InviteAssetsSummaryProfilesInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.InviteExceptionResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("invite_or_request_id", Value.Invite_Or_Request_Id);
      if not Value.Code.Is_Null then
         Into.Write_Entity ("code", Value.Code);
      end if;
      if not Value.Message.Is_Null then
         Into.Write_Entity ("message", Value.Message);
      end if;
      Serialize (Into, "users_or_partner_ids", Value.Users_Or_Partner_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InviteExceptionResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.InviteExceptionResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "invite_or_request_id", Value.Invite_Or_Request_Id);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "message", Value.Message);
      Swagger.Streams.Deserialize (Object, "users_or_partner_ids", Value.Users_Or_Partner_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out InviteExceptionResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.InviteExceptionResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_InviteStatus_Type (Value : in String) return .Models.InviteStatus_Type is
   begin
      if Value = "PENDING" then
         return PENDING;
      end if;
      if Value = "ACCEPTED" then
         return ACCEPTED;
      end if;
      if Value = "DECLINED" then
         return DECLINED;
      end if;
      if Value = "CANCELLED" then
         return CANCELLED;
      end if;
      if Value = "EXPIRED" then
         return EXPIRED;
      end if;
      raise Constraint_Error;
   end To_InviteStatus_Type;

   function To_String (Value : in .Models.InviteStatus_Type) return String is
   begin
      case Value is
         when PENDING =>
            return "PENDING";

         when ACCEPTED =>
            return "ACCEPTED";

         when DECLINED =>
            return "DECLINED";

         when CANCELLED =>
            return "CANCELLED";

         when EXPIRED =>
            return "EXPIRED";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.InviteStatus_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InviteStatus_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.InviteStatus_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_InviteStatus_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out InviteStatus_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.InviteStatus_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_InviteType_Type (Value : in String) return .Models.InviteType_Type is
   begin
      if Value = "MEMBER_INVITE" then
         return MEMBER_INVITE;
      end if;
      if Value = "PARTNER_INVITE" then
         return PARTNER_INVITE;
      end if;
      if Value = "PARTNER_REQUEST" then
         return PARTNER_REQUEST;
      end if;
      raise Constraint_Error;
   end To_InviteType_Type;

   function To_String (Value : in .Models.InviteType_Type) return String is
   begin
      case Value is
         when MEMBER_INVITE =>
            return "MEMBER_INVITE";

         when PARTNER_INVITE =>
            return "PARTNER_INVITE";

         when PARTNER_REQUEST =>
            return "PARTNER_REQUEST";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.InviteType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InviteType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.InviteType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_InviteType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out InviteType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.InviteType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ItemAttributesRequestAllOfImageLink_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ItemAttributesRequestAllOfImageLink_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ItemAttributesRequestAllOfImageLink_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ItemAttributesRequestAllOfImageLink_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ItemAttributesRequestAllOfImageLink_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ItemAttributes_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("ad_link", Value.Ad_Link);
      Into.Write_Entity ("adult", Value.Adult);
      Into.Write_Entity ("age_group", Value.Age_Group);
      if not Value.Availability.Is_Null then
         Into.Write_Entity ("availability", Value.Availability);
      end if;
      Serialize (Into, "average_review_rating", Value.Average_Review_Rating);
      Into.Write_Entity ("brand", Value.Brand);
      Into.Write_Entity ("checkout_enabled", Value.Checkout_Enabled);
      Into.Write_Entity ("color", Value.Color);
      Into.Write_Entity ("condition", Value.Condition);
      Into.Write_Entity ("custom_label_0", Value.Custom_Label_0);
      Into.Write_Entity ("custom_label_1", Value.Custom_Label_1);
      Into.Write_Entity ("custom_label_2", Value.Custom_Label_2);
      Into.Write_Entity ("custom_label_3", Value.Custom_Label_3);
      Into.Write_Entity ("custom_label_4", Value.Custom_Label_4);
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      Into.Write_Entity ("free_shipping_label", Value.Free_Shipping_Label);
      Into.Write_Entity ("free_shipping_limit", Value.Free_Shipping_Limit);
      Into.Write_Entity ("gender", Value.Gender);
      Into.Write_Entity ("google_product_category", Value.Google_Product_Category);
      Into.Write_Entity ("gtin", Value.Gtin);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Into.Write_Entity ("item_group_id", Value.Item_Group_Id);
      Into.Write_Entity ("last_updated_time", Value.Last_Updated_Time);
      if not Value.Link.Is_Null then
         Into.Write_Entity ("link", Value.Link);
      end if;
      Into.Write_Entity ("material", Value.Material);
      Into.Write_Entity ("min_ad_price", Value.Min_Ad_Price);
      Into.Write_Entity ("mobile_link", Value.Mobile_Link);
      Into.Write_Entity ("mpn", Value.Mpn);
      Into.Write_Entity ("number_of_ratings", Value.Number_Of_Ratings);
      Into.Write_Entity ("number_of_reviews", Value.Number_Of_Reviews);
      Into.Write_Entity ("pattern", Value.Pattern);
      if not Value.Price.Is_Null then
         Into.Write_Entity ("price", Value.Price);
      end if;
      Into.Write_Entity ("product_type", Value.Product_Type);
      Into.Write_Entity ("sale_price", Value.Sale_Price);
      Into.Write_Entity ("shipping", Value.Shipping);
      Into.Write_Entity ("shipping_height", Value.Shipping_Height);
      Into.Write_Entity ("shipping_weight", Value.Shipping_Weight);
      Into.Write_Entity ("shipping_width", Value.Shipping_Width);
      Into.Write_Entity ("size", Value.Size);
      Into.Write_Entity ("size_system", Value.Size_System);
      Into.Write_Entity ("size_type", Value.Size_Type);
      Into.Write_Entity ("tax", Value.Tax);
      if not Value.Title.Is_Null then
         Into.Write_Entity ("title", Value.Title);
      end if;
      Serialize (Into, "variant_names", Value.Variant_Names);
      Serialize (Into, "variant_values", Value.Variant_Values);
      Serialize (Into, "additional_image_link", Value.Additional_Image_Link);
      Serialize (Into, "image_link", Value.Image_Link);
      Into.Write_Entity ("video_link", Value.Video_Link);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ItemAttributes_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ItemAttributes_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "ad_link", Value.Ad_Link);
      Swagger.Streams.Deserialize (Object, "adult", Value.Adult);
      Swagger.Streams.Deserialize (Object, "age_group", Value.Age_Group);
      Swagger.Streams.Deserialize (Object, "availability", Value.Availability);
      Swagger.Streams.Deserialize (Object, "average_review_rating", Value.Average_Review_Rating);
      Swagger.Streams.Deserialize (Object, "brand", Value.Brand);
      Swagger.Streams.Deserialize (Object, "checkout_enabled", Value.Checkout_Enabled);
      Swagger.Streams.Deserialize (Object, "color", Value.Color);
      Swagger.Streams.Deserialize (Object, "condition", Value.Condition);
      Swagger.Streams.Deserialize (Object, "custom_label_0", Value.Custom_Label_0);
      Swagger.Streams.Deserialize (Object, "custom_label_1", Value.Custom_Label_1);
      Swagger.Streams.Deserialize (Object, "custom_label_2", Value.Custom_Label_2);
      Swagger.Streams.Deserialize (Object, "custom_label_3", Value.Custom_Label_3);
      Swagger.Streams.Deserialize (Object, "custom_label_4", Value.Custom_Label_4);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "free_shipping_label", Value.Free_Shipping_Label);
      Swagger.Streams.Deserialize (Object, "free_shipping_limit", Value.Free_Shipping_Limit);
      Swagger.Streams.Deserialize (Object, "gender", Value.Gender);
      Swagger.Streams.Deserialize (Object, "google_product_category", Value.Google_Product_Category);
      Swagger.Streams.Deserialize (Object, "gtin", Value.Gtin);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "item_group_id", Value.Item_Group_Id);
      Swagger.Streams.Deserialize (Object, "last_updated_time", Value.Last_Updated_Time);
      Swagger.Streams.Deserialize (Object, "link", Value.Link);
      Swagger.Streams.Deserialize (Object, "material", Value.Material);
      Swagger.Streams.Deserialize (Object, "min_ad_price", Value.Min_Ad_Price);
      Swagger.Streams.Deserialize (Object, "mobile_link", Value.Mobile_Link);
      Swagger.Streams.Deserialize (Object, "mpn", Value.Mpn);
      Swagger.Streams.Deserialize (Object, "number_of_ratings", Value.Number_Of_Ratings);
      Swagger.Streams.Deserialize (Object, "number_of_reviews", Value.Number_Of_Reviews);
      Swagger.Streams.Deserialize (Object, "pattern", Value.Pattern);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "product_type", Value.Product_Type);
      Swagger.Streams.Deserialize (Object, "sale_price", Value.Sale_Price);
      Swagger.Streams.Deserialize (Object, "shipping", Value.Shipping);
      Swagger.Streams.Deserialize (Object, "shipping_height", Value.Shipping_Height);
      Swagger.Streams.Deserialize (Object, "shipping_weight", Value.Shipping_Weight);
      Swagger.Streams.Deserialize (Object, "shipping_width", Value.Shipping_Width);
      Swagger.Streams.Deserialize (Object, "size", Value.Size);
      Swagger.Streams.Deserialize (Object, "size_system", Value.Size_System);
      Swagger.Streams.Deserialize (Object, "size_type", Value.Size_Type);
      Swagger.Streams.Deserialize (Object, "tax", Value.Tax);
      Swagger.Streams.Deserialize (Object, "title", Value.Title);
      Swagger.Streams.Deserialize (Object, "variant_names", Value.Variant_Names);
      Swagger.Streams.Deserialize (Object, "variant_values", Value.Variant_Values);
      Swagger.Streams.Deserialize (Object, "additional_image_link", Value.Additional_Image_Link);
      Swagger.Streams.Deserialize (Object, "image_link", Value.Image_Link);
      Swagger.Streams.Deserialize (Object, "video_link", Value.Video_Link);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ItemAttributes_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ItemAttributes_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ItemDeleteBatchRecord_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Item_Id.Is_Null then
         Into.Write_Entity ("item_id", Value.Item_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ItemDeleteBatchRecord_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ItemDeleteBatchRecord_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "item_id", Value.Item_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ItemDeleteBatchRecord_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ItemDeleteBatchRecord_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ItemDeleteDiscontinuedBatchRecord_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Item_Id.Is_Null then
         Into.Write_Entity ("item_id", Value.Item_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ItemDeleteDiscontinuedBatchRecord_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ItemDeleteDiscontinuedBatchRecord_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "item_id", Value.Item_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ItemDeleteDiscontinuedBatchRecord_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ItemDeleteDiscontinuedBatchRecord_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ItemGroupIdFilter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("ITEM_GROUP_ID", Value.ITEM_GROUP_ID);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ItemGroupIdFilter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ItemGroupIdFilter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "ITEM_GROUP_ID", Value.ITEM_GROUP_ID);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ItemGroupIdFilter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ItemGroupIdFilter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ItemIdFilter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("ITEM_ID", Value.ITEM_ID);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ItemIdFilter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ItemIdFilter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "ITEM_ID", Value.ITEM_ID);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ItemIdFilter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ItemIdFilter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ItemProcessingStatus_Type (Value : in String) return .Models.ItemProcessingStatus_Type is
   begin
      if Value = "SUCCESS" then
         return SUCCESS;
      end if;
      if Value = "FAILURE" then
         return FAILURE;
      end if;
      if Value = "PROCESSING" then
         return PROCESSING;
      end if;
      raise Constraint_Error;
   end To_ItemProcessingStatus_Type;

   function To_String (Value : in .Models.ItemProcessingStatus_Type) return String is
   begin
      case Value is
         when SUCCESS =>
            return "SUCCESS";

         when FAILURE =>
            return "FAILURE";

         when PROCESSING =>
            return "PROCESSING";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ItemProcessingStatus_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ItemProcessingStatus_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ItemProcessingStatus_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ItemProcessingStatus_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ItemProcessingStatus_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ItemProcessingStatus_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ItemValidationEvent_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Attribute.Is_Null then
         Into.Write_Entity ("attribute", Value.Attribute);
      end if;
      if not Value.Code.Is_Null then
         Into.Write_Entity ("code", Value.Code);
      end if;
      if not Value.Message.Is_Null then
         Into.Write_Entity ("message", Value.Message);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ItemValidationEvent_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ItemValidationEvent_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "attribute", Value.Attribute);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "message", Value.Message);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ItemValidationEvent_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ItemValidationEvent_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.KeywordMetrics_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "avg_cpc_in_micro_currency", Value.Avg_Cpc_In_Micro_Currency);
      if not Value.Keyword_Query_Volume.Is_Null then
         Into.Write_Entity ("keyword_query_volume", Value.Keyword_Query_Volume);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in KeywordMetrics_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.KeywordMetrics_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "avg_cpc_in_micro_currency", Value.Avg_Cpc_In_Micro_Currency);
      Swagger.Streams.Deserialize (Object, "keyword_query_volume", Value.Keyword_Query_Volume);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out KeywordMetrics_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.KeywordMetrics_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.KeywordUpdate_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("id", Value.Id);
      if not Value.Archived.Is_Null then
         Into.Write_Entity ("archived", Value.Archived);
      end if;
      Into.Write_Entity ("bid", Value.Bid);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in KeywordUpdate_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.KeywordUpdate_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "archived", Value.Archived);
      Swagger.Streams.Deserialize (Object, "bid", Value.Bid);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out KeywordUpdate_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.KeywordUpdate_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_Language_Type (Value : in String) return .Models.Language_Type is
   begin
      if Value = "AM" then
         return AM;
      end if;
      if Value = "AR" then
         return AR;
      end if;
      if Value = "AZ" then
         return AZ;
      end if;
      if Value = "BG" then
         return BG;
      end if;
      if Value = "BN" then
         return BN;
      end if;
      if Value = "BS" then
         return BS;
      end if;
      if Value = "CA" then
         return CA;
      end if;
      if Value = "CS" then
         return CS;
      end if;
      if Value = "DA" then
         return DA;
      end if;
      if Value = "DV" then
         return DV;
      end if;
      if Value = "DZ" then
         return DZ;
      end if;
      if Value = "DE" then
         return DE;
      end if;
      if Value = "EL" then
         return EL;
      end if;
      if Value = "EN" then
         return EN;
      end if;
      if Value = "ES" then
         return ES;
      end if;
      if Value = "ET" then
         return ET;
      end if;
      if Value = "FA" then
         return FA;
      end if;
      if Value = "FI" then
         return FI;
      end if;
      if Value = "FR" then
         return FR;
      end if;
      if Value = "HE" then
         return HE;
      end if;
      if Value = "HI" then
         return HI;
      end if;
      if Value = "HR" then
         return HR;
      end if;
      if Value = "HU" then
         return HU;
      end if;
      if Value = "HY" then
         return HY;
      end if;
      if Value = "ID" then
         return ID;
      end if;
      if Value = "IN" then
         return IN;
      end if;
      if Value = "IS" then
         return IS;
      end if;
      if Value = "IT" then
         return IT;
      end if;
      if Value = "IW" then
         return IW;
      end if;
      if Value = "JA" then
         return JA;
      end if;
      if Value = "KA" then
         return KA;
      end if;
      if Value = "KM" then
         return KM;
      end if;
      if Value = "KO" then
         return KO;
      end if;
      if Value = "LO" then
         return LO;
      end if;
      if Value = "LT" then
         return LT;
      end if;
      if Value = "LV" then
         return LV;
      end if;
      if Value = "MK" then
         return MK;
      end if;
      if Value = "MN" then
         return MN;
      end if;
      if Value = "MS" then
         return MS;
      end if;
      if Value = "MY" then
         return MY;
      end if;
      if Value = "NB" then
         return NB;
      end if;
      if Value = "NE" then
         return NE;
      end if;
      if Value = "NL" then
         return NL;
      end if;
      if Value = "NO" then
         return NO;
      end if;
      if Value = "PL" then
         return PL;
      end if;
      if Value = "PT" then
         return PT;
      end if;
      if Value = "RO" then
         return RO;
      end if;
      if Value = "RU" then
         return RU;
      end if;
      if Value = "SK" then
         return SK;
      end if;
      if Value = "SL" then
         return SL;
      end if;
      if Value = "SQ" then
         return SQ;
      end if;
      if Value = "SR" then
         return SR;
      end if;
      if Value = "SV" then
         return SV;
      end if;
      if Value = "TL" then
         return TL;
      end if;
      if Value = "UK" then
         return UK;
      end if;
      if Value = "VI" then
         return VI;
      end if;
      if Value = "TE" then
         return TE;
      end if;
      if Value = "TH" then
         return TH;
      end if;
      if Value = "TR" then
         return TR;
      end if;
      if Value = "XX" then
         return XX;
      end if;
      if Value = "ZH" then
         return ZH;
      end if;
      raise Constraint_Error;
   end To_Language_Type;

   function To_String (Value : in .Models.Language_Type) return String is
   begin
      case Value is
         when AM =>
            return "AM";

         when AR =>
            return "AR";

         when AZ =>
            return "AZ";

         when BG =>
            return "BG";

         when BN =>
            return "BN";

         when BS =>
            return "BS";

         when CA =>
            return "CA";

         when CS =>
            return "CS";

         when DA =>
            return "DA";

         when DV =>
            return "DV";

         when DZ =>
            return "DZ";

         when DE =>
            return "DE";

         when EL =>
            return "EL";

         when EN =>
            return "EN";

         when ES =>
            return "ES";

         when ET =>
            return "ET";

         when FA =>
            return "FA";

         when FI =>
            return "FI";

         when FR =>
            return "FR";

         when HE =>
            return "HE";

         when HI =>
            return "HI";

         when HR =>
            return "HR";

         when HU =>
            return "HU";

         when HY =>
            return "HY";

         when ID =>
            return "ID";

         when IN =>
            return "IN";

         when IS =>
            return "IS";

         when IT =>
            return "IT";

         when IW =>
            return "IW";

         when JA =>
            return "JA";

         when KA =>
            return "KA";

         when KM =>
            return "KM";

         when KO =>
            return "KO";

         when LO =>
            return "LO";

         when LT =>
            return "LT";

         when LV =>
            return "LV";

         when MK =>
            return "MK";

         when MN =>
            return "MN";

         when MS =>
            return "MS";

         when MY =>
            return "MY";

         when NB =>
            return "NB";

         when NE =>
            return "NE";

         when NL =>
            return "NL";

         when NO =>
            return "NO";

         when PL =>
            return "PL";

         when PT =>
            return "PT";

         when RO =>
            return "RO";

         when RU =>
            return "RU";

         when SK =>
            return "SK";

         when SL =>
            return "SL";

         when SQ =>
            return "SQ";

         when SR =>
            return "SR";

         when SV =>
            return "SV";

         when TL =>
            return "TL";

         when UK =>
            return "UK";

         when VI =>
            return "VI";

         when TE =>
            return "TE";

         when TH =>
            return "TH";

         when TR =>
            return "TR";

         when XX =>
            return "XX";

         when ZH =>
            return "ZH";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Language_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Language_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Language_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_Language_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Language_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Language_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.LeadFormCommonPolicyLinksInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Label.Is_Null then
         Into.Write_Entity ("label", Value.Label);
      end if;
      if not Value.Link.Is_Null then
         Into.Write_Entity ("link", Value.Link);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in LeadFormCommonPolicyLinksInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.LeadFormCommonPolicyLinksInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "label", Value.Label);
      Swagger.Streams.Deserialize (Object, "link", Value.Link);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out LeadFormCommonPolicyLinksInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.LeadFormCommonPolicyLinksInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_LeadFormQuestionFieldType_Type (Value : in String) return .Models.LeadFormQuestionFieldType_Type is
   begin
      if Value = "TEXT_FIELD" then
         return TEXT_FIELD;
      end if;
      if Value = "TEXT_AREA" then
         return TEXT_AREA;
      end if;
      if Value = "RADIO_LIST" then
         return RADIO_LIST;
      end if;
      if Value = "CHECKBOX" then
         return CHECKBOX;
      end if;
      raise Constraint_Error;
   end To_LeadFormQuestionFieldType_Type;

   function To_String (Value : in .Models.LeadFormQuestionFieldType_Type) return String is
   begin
      case Value is
         when TEXT_FIELD =>
            return "TEXT_FIELD";

         when TEXT_AREA =>
            return "TEXT_AREA";

         when RADIO_LIST =>
            return "RADIO_LIST";

         when CHECKBOX =>
            return "CHECKBOX";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.LeadFormQuestionFieldType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in LeadFormQuestionFieldType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.LeadFormQuestionFieldType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_LeadFormQuestionFieldType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out LeadFormQuestionFieldType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.LeadFormQuestionFieldType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_LeadFormQuestionType_Type (Value : in String) return .Models.LeadFormQuestionType_Type is
   begin
      if Value = "CUSTOM" then
         return CUSTOM;
      end if;
      if Value = "FULL_NAME" then
         return FULL_NAME;
      end if;
      if Value = "FIRST_NAME" then
         return FIRST_NAME;
      end if;
      if Value = "LAST_NAME" then
         return LAST_NAME;
      end if;
      if Value = "EMAIL" then
         return EMAIL;
      end if;
      if Value = "PHONE_NUMBER" then
         return PHONE_NUMBER;
      end if;
      if Value = "ZIP_CODE" then
         return ZIP_CODE;
      end if;
      if Value = "GENDER" then
         return GENDER;
      end if;
      if Value = "CITY" then
         return CITY;
      end if;
      if Value = "COUNTRY" then
         return COUNTRY;
      end if;
      if Value = "STATE_PROVINCE" then
         return STATE_PROVINCE;
      end if;
      if Value = "ADDRESS" then
         return ADDRESS;
      end if;
      if Value = "DATE_OF_BIRTH" then
         return DATE_OF_BIRTH;
      end if;
      if Value = "AGE" then
         return AGE;
      end if;
      raise Constraint_Error;
   end To_LeadFormQuestionType_Type;

   function To_String (Value : in .Models.LeadFormQuestionType_Type) return String is
   begin
      case Value is
         when CUSTOM =>
            return "CUSTOM";

         when FULL_NAME =>
            return "FULL_NAME";

         when FIRST_NAME =>
            return "FIRST_NAME";

         when LAST_NAME =>
            return "LAST_NAME";

         when EMAIL =>
            return "EMAIL";

         when PHONE_NUMBER =>
            return "PHONE_NUMBER";

         when ZIP_CODE =>
            return "ZIP_CODE";

         when GENDER =>
            return "GENDER";

         when CITY =>
            return "CITY";

         when COUNTRY =>
            return "COUNTRY";

         when STATE_PROVINCE =>
            return "STATE_PROVINCE";

         when ADDRESS =>
            return "ADDRESS";

         when DATE_OF_BIRTH =>
            return "DATE_OF_BIRTH";

         when AGE =>
            return "AGE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.LeadFormQuestionType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in LeadFormQuestionType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.LeadFormQuestionType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_LeadFormQuestionType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out LeadFormQuestionType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.LeadFormQuestionType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_LeadFormStatus_Type (Value : in String) return .Models.LeadFormStatus_Type is
   begin
      if Value = "DRAFT" then
         return DRAFT;
      end if;
      if Value = "ACTIVE" then
         return ACTIVE;
      end if;
      raise Constraint_Error;
   end To_LeadFormStatus_Type;

   function To_String (Value : in .Models.LeadFormStatus_Type) return String is
   begin
      case Value is
         when DRAFT =>
            return "DRAFT";

         when ACTIVE =>
            return "ACTIVE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.LeadFormStatus_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in LeadFormStatus_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.LeadFormStatus_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_LeadFormStatus_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out LeadFormStatus_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.LeadFormStatus_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.LeadFormTestRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "answers", Value.Answers);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in LeadFormTestRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.LeadFormTestRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "answers", Value.Answers);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out LeadFormTestRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.LeadFormTestRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.LeadFormTestResponse_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Subscription_Id.Is_Null then
         Into.Write_Entity ("subscription_id", Value.Subscription_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in LeadFormTestResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.LeadFormTestResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "subscription_id", Value.Subscription_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out LeadFormTestResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.LeadFormTestResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.LeadsExportCreateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("start_date", Value.Start_Date);
      Into.Write_Entity ("end_date", Value.End_Date);
      Into.Write_Entity ("ad_id", Value.Ad_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in LeadsExportCreateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.LeadsExportCreateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "start_date", Value.Start_Date);
      Swagger.Streams.Deserialize (Object, "end_date", Value.End_Date);
      Swagger.Streams.Deserialize (Object, "ad_id", Value.Ad_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out LeadsExportCreateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.LeadsExportCreateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.LeadsExportCreateResponse_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Leads_Export_Id.Is_Null then
         Into.Write_Entity ("leads_export_id", Value.Leads_Export_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in LeadsExportCreateResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.LeadsExportCreateResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "leads_export_id", Value.Leads_Export_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out LeadsExportCreateResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.LeadsExportCreateResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_LeadsExportStatus_Type (Value : in String) return .Models.LeadsExportStatus_Type is
   begin
      if Value = "IN_PROGRESS" then
         return IN_PROGRESS;
      end if;
      if Value = "FINISHED" then
         return FINISHED;
      end if;
      if Value = "FAILED" then
         return FAILED;
      end if;
      raise Constraint_Error;
   end To_LeadsExportStatus_Type;

   function To_String (Value : in .Models.LeadsExportStatus_Type) return String is
   begin
      case Value is
         when IN_PROGRESS =>
            return "IN_PROGRESS";

         when FINISHED =>
            return "FINISHED";

         when FAILED =>
            return "FAILED";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.LeadsExportStatus_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in LeadsExportStatus_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.LeadsExportStatus_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_LeadsExportStatus_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out LeadsExportStatus_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.LeadsExportStatus_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.LineItem_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Product_Brand.Is_Null then
         Into.Write_Entity ("product_brand", Value.Product_Brand);
      end if;
      if not Value.Product_Category.Is_Null then
         Into.Write_Entity ("product_category", Value.Product_Category);
      end if;
      if not Value.Product_Id.Is_Null then
         Into.Write_Entity ("product_id", Value.Product_Id);
      end if;
      if not Value.Product_Name.Is_Null then
         Into.Write_Entity ("product_name", Value.Product_Name);
      end if;
      if not Value.Product_Price.Is_Null then
         Into.Write_Entity ("product_price", Value.Product_Price);
      end if;
      if not Value.Product_Quantity.Is_Null then
         Into.Write_Entity ("product_quantity", Value.Product_Quantity);
      end if;
      if not Value.Product_Variant.Is_Null then
         Into.Write_Entity ("product_variant", Value.Product_Variant);
      end if;
      if not Value.Product_Variant_Id.Is_Null then
         Into.Write_Entity ("product_variant_id", Value.Product_Variant_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in LineItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.LineItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "product_brand", Value.Product_Brand);
      Swagger.Streams.Deserialize (Object, "product_category", Value.Product_Category);
      Swagger.Streams.Deserialize (Object, "product_id", Value.Product_Id);
      Swagger.Streams.Deserialize (Object, "product_name", Value.Product_Name);
      Swagger.Streams.Deserialize (Object, "product_price", Value.Product_Price);
      Swagger.Streams.Deserialize (Object, "product_quantity", Value.Product_Quantity);
      Swagger.Streams.Deserialize (Object, "product_variant", Value.Product_Variant);
      Swagger.Streams.Deserialize (Object, "product_variant_id", Value.Product_Variant_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out LineItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.LineItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.LinkedBusiness_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Username.Is_Null then
         Into.Write_Entity ("username", Value.Username);
      end if;
      if not Value.Image_Small_Url.Is_Null then
         Into.Write_Entity ("image_small_url", Value.Image_Small_Url);
      end if;
      if not Value.Image_Medium_Url.Is_Null then
         Into.Write_Entity ("image_medium_url", Value.Image_Medium_Url);
      end if;
      if not Value.Image_Large_Url.Is_Null then
         Into.Write_Entity ("image_large_url", Value.Image_Large_Url);
      end if;
      if not Value.Image_Xlarge_Url.Is_Null then
         Into.Write_Entity ("image_xlarge_url", Value.Image_Xlarge_Url);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in LinkedBusiness_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.LinkedBusiness_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "username", Value.Username);
      Swagger.Streams.Deserialize (Object, "image_small_url", Value.Image_Small_Url);
      Swagger.Streams.Deserialize (Object, "image_medium_url", Value.Image_Medium_Url);
      Swagger.Streams.Deserialize (Object, "image_large_url", Value.Image_Large_Url);
      Swagger.Streams.Deserialize (Object, "image_xlarge_url", Value.Image_Xlarge_Url);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out LinkedBusiness_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.LinkedBusiness_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_MMMReportingColumn_Type (Value : in String) return .Models.MMMReportingColumn_Type is
   begin
      if Value = "SPEND_IN_DOLLAR" then
         return SPEND_IN_DOLLAR;
      end if;
      if Value = "SPEND_IN_MICRO_DOLLAR" then
         return SPEND_IN_MICRO_DOLLAR;
      end if;
      if Value = "ECPC_IN_DOLLAR" then
         return ECPC_IN_DOLLAR;
      end if;
      if Value = "ECTR" then
         return ECTR;
      end if;
      if Value = "CAMPAIGN_NAME" then
         return CAMPAIGN_NAME;
      end if;
      if Value = "TOTAL_ENGAGEMENT" then
         return TOTAL_ENGAGEMENT;
      end if;
      if Value = "EENGAGEMENT_RATE" then
         return EENGAGEMENT_RATE;
      end if;
      if Value = "ECPM_IN_DOLLAR" then
         return ECPM_IN_DOLLAR;
      end if;
      if Value = "CAMPAIGN_ID" then
         return CAMPAIGN_ID;
      end if;
      if Value = "ADVERTISER_ID" then
         return ADVERTISER_ID;
      end if;
      if Value = "AD_GROUP_ID" then
         return AD_GROUP_ID;
      end if;
      if Value = "AD_GROUP_NAME" then
         return AD_GROUP_NAME;
      end if;
      if Value = "CLICKTHROUGH_1" then
         return CLICKTHROUGH_1;
      end if;
      if Value = "IMPRESSION_1" then
         return IMPRESSION_1;
      end if;
      if Value = "CLICKTHROUGH_2" then
         return CLICKTHROUGH_2;
      end if;
      if Value = "IMPRESSION_2" then
         return IMPRESSION_2;
      end if;
      if Value = "TOTAL_CLICKTHROUGH" then
         return TOTAL_CLICKTHROUGH;
      end if;
      if Value = "TOTAL_IMPRESSION" then
         return TOTAL_IMPRESSION;
      end if;
      if Value = "ADVERTISER_NAME" then
         return ADVERTISER_NAME;
      end if;
      if Value = "SPEND_ORDER_LINE_PAID_TYPE" then
         return SPEND_ORDER_LINE_PAID_TYPE;
      end if;
      raise Constraint_Error;
   end To_MMMReportingColumn_Type;

   function To_String (Value : in .Models.MMMReportingColumn_Type) return String is
   begin
      case Value is
         when SPEND_IN_DOLLAR =>
            return "SPEND_IN_DOLLAR";

         when SPEND_IN_MICRO_DOLLAR =>
            return "SPEND_IN_MICRO_DOLLAR";

         when ECPC_IN_DOLLAR =>
            return "ECPC_IN_DOLLAR";

         when ECTR =>
            return "ECTR";

         when CAMPAIGN_NAME =>
            return "CAMPAIGN_NAME";

         when TOTAL_ENGAGEMENT =>
            return "TOTAL_ENGAGEMENT";

         when EENGAGEMENT_RATE =>
            return "EENGAGEMENT_RATE";

         when ECPM_IN_DOLLAR =>
            return "ECPM_IN_DOLLAR";

         when CAMPAIGN_ID =>
            return "CAMPAIGN_ID";

         when ADVERTISER_ID =>
            return "ADVERTISER_ID";

         when AD_GROUP_ID =>
            return "AD_GROUP_ID";

         when AD_GROUP_NAME =>
            return "AD_GROUP_NAME";

         when CLICKTHROUGH_1 =>
            return "CLICKTHROUGH_1";

         when IMPRESSION_1 =>
            return "IMPRESSION_1";

         when CLICKTHROUGH_2 =>
            return "CLICKTHROUGH_2";

         when IMPRESSION_2 =>
            return "IMPRESSION_2";

         when TOTAL_CLICKTHROUGH =>
            return "TOTAL_CLICKTHROUGH";

         when TOTAL_IMPRESSION =>
            return "TOTAL_IMPRESSION";

         when ADVERTISER_NAME =>
            return "ADVERTISER_NAME";

         when SPEND_ORDER_LINE_PAID_TYPE =>
            return "SPEND_ORDER_LINE_PAID_TYPE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.MMMReportingColumn_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MMMReportingColumn_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.MMMReportingColumn_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_MMMReportingColumn_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out MMMReportingColumn_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.MMMReportingColumn_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_MMMReportingTargetingType_Type (Value : in String) return .Models.MMMReportingTargetingType_Type is
   begin
      if Value = "APPTYPE" then
         return APPTYPE;
      end if;
      if Value = "COUNTRY" then
         return COUNTRY;
      end if;
      if Value = "CREATIVE_TYPE" then
         return CREATIVE_TYPE;
      end if;
      if Value = "GENDER" then
         return GENDER;
      end if;
      if Value = "LOCATION" then
         return LOCATION;
      end if;
      raise Constraint_Error;
   end To_MMMReportingTargetingType_Type;

   function To_String (Value : in .Models.MMMReportingTargetingType_Type) return String is
   begin
      case Value is
         when APPTYPE =>
            return "APPTYPE";

         when COUNTRY =>
            return "COUNTRY";

         when CREATIVE_TYPE =>
            return "CREATIVE_TYPE";

         when GENDER =>
            return "GENDER";

         when LOCATION =>
            return "LOCATION";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.MMMReportingTargetingType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MMMReportingTargetingType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.MMMReportingTargetingType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_MMMReportingTargetingType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out MMMReportingTargetingType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.MMMReportingTargetingType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_MatchTypeResponse_Type (Value : in String) return .Models.MatchTypeResponse_Type is
   begin
      if Value = "BROAD" then
         return BROAD;
      end if;
      if Value = "PHRASE" then
         return PHRASE;
      end if;
      if Value = "EXACT" then
         return EXACT;
      end if;
      if Value = "EXACT_NEGATIVE" then
         return EXACT_NEGATIVE;
      end if;
      if Value = "PHRASE_NEGATIVE" then
         return PHRASE_NEGATIVE;
      end if;
      raise Constraint_Error;
   end To_MatchTypeResponse_Type;

   function To_String (Value : in .Models.MatchTypeResponse_Type) return String is
   begin
      case Value is
         when BROAD =>
            return "BROAD";

         when PHRASE =>
            return "PHRASE";

         when EXACT =>
            return "EXACT";

         when EXACT_NEGATIVE =>
            return "EXACT_NEGATIVE";

         when PHRASE_NEGATIVE =>
            return "PHRASE_NEGATIVE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.MatchTypeResponse_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MatchTypeResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.MatchTypeResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_MatchTypeResponse_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out MatchTypeResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.MatchTypeResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_MatchType_Type (Value : in String) return .Models.MatchType_Type is
   begin
      if Value = "BROAD" then
         return BROAD;
      end if;
      if Value = "PHRASE" then
         return PHRASE;
      end if;
      if Value = "EXACT" then
         return EXACT;
      end if;
      if Value = "EXACT_NEGATIVE" then
         return EXACT_NEGATIVE;
      end if;
      if Value = "PHRASE_NEGATIVE" then
         return PHRASE_NEGATIVE;
      end if;
      raise Constraint_Error;
   end To_MatchType_Type;

   function To_String (Value : in .Models.MatchType_Type) return String is
   begin
      case Value is
         when BROAD =>
            return "BROAD";

         when PHRASE =>
            return "PHRASE";

         when EXACT =>
            return "EXACT";

         when EXACT_NEGATIVE =>
            return "EXACT_NEGATIVE";

         when PHRASE_NEGATIVE =>
            return "PHRASE_NEGATIVE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.MatchType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MatchType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.MatchType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_MatchType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out MatchType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.MatchType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.MaxPriceFilter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("MAX_PRICE", Value.MAX_PRICE);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MaxPriceFilter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.MaxPriceFilter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "MAX_PRICE", Value.MAX_PRICE);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out MaxPriceFilter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.MaxPriceFilter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.MediaTypeFilter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("MEDIA_TYPE", Value.MEDIA_TYPE);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MediaTypeFilter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.MediaTypeFilter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "MEDIA_TYPE", Value.MEDIA_TYPE);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out MediaTypeFilter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.MediaTypeFilter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_MediaType_Type (Value : in String) return .Models.MediaType_Type is
   begin
      if Value = "IMAGE" then
         return IMAGE;
      end if;
      if Value = "VIDEO" then
         return VIDEO;
      end if;
      raise Constraint_Error;
   end To_MediaType_Type;

   function To_String (Value : in .Models.MediaType_Type) return String is
   begin
      case Value is
         when IMAGE =>
            return "IMAGE";

         when VIDEO =>
            return "VIDEO";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.MediaType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MediaType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.MediaType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_MediaType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out MediaType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.MediaType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.MediaUploadAllOfUploadParameters_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.X_Amz_Date.Is_Null then
         Into.Write_Entity ("x-amz-date", Value.X_Amz_Date);
      end if;
      if not Value.X_Amz_Signature.Is_Null then
         Into.Write_Entity ("x-amz-signature", Value.X_Amz_Signature);
      end if;
      if not Value.X_Amz_Security_Token.Is_Null then
         Into.Write_Entity ("x-amz-security-token", Value.X_Amz_Security_Token);
      end if;
      if not Value.X_Amz_Algorithm.Is_Null then
         Into.Write_Entity ("x-amz-algorithm", Value.X_Amz_Algorithm);
      end if;
      if not Value.Key.Is_Null then
         Into.Write_Entity ("key", Value.Key);
      end if;
      if not Value.Policy.Is_Null then
         Into.Write_Entity ("policy", Value.Policy);
      end if;
      if not Value.X_Amz_Credential.Is_Null then
         Into.Write_Entity ("x-amz-credential", Value.X_Amz_Credential);
      end if;
      if not Value.Content_Type.Is_Null then
         Into.Write_Entity ("Content-Type", Value.Content_Type);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MediaUploadAllOfUploadParameters_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.MediaUploadAllOfUploadParameters_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "x-amz-date", Value.X_Amz_Date);
      Swagger.Streams.Deserialize (Object, "x-amz-signature", Value.X_Amz_Signature);
      Swagger.Streams.Deserialize (Object, "x-amz-security-token", Value.X_Amz_Security_Token);
      Swagger.Streams.Deserialize (Object, "x-amz-algorithm", Value.X_Amz_Algorithm);
      Swagger.Streams.Deserialize (Object, "key", Value.Key);
      Swagger.Streams.Deserialize (Object, "policy", Value.Policy);
      Swagger.Streams.Deserialize (Object, "x-amz-credential", Value.X_Amz_Credential);
      Swagger.Streams.Deserialize (Object, "Content-Type", Value.Content_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out MediaUploadAllOfUploadParameters_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.MediaUploadAllOfUploadParameters_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_MediaUploadStatus_Type (Value : in String) return .Models.MediaUploadStatus_Type is
   begin
      if Value = "registered" then
         return REGISTERED;
      end if;
      if Value = "processing" then
         return PROCESSING;
      end if;
      if Value = "succeeded" then
         return SUCCEEDED;
      end if;
      if Value = "failed" then
         return FAILED;
      end if;
      raise Constraint_Error;
   end To_MediaUploadStatus_Type;

   function To_String (Value : in .Models.MediaUploadStatus_Type) return String is
   begin
      case Value is
         when REGISTERED =>
            return "registered";

         when PROCESSING =>
            return "processing";

         when SUCCEEDED =>
            return "succeeded";

         when FAILED =>
            return "failed";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.MediaUploadStatus_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MediaUploadStatus_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.MediaUploadStatus_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_MediaUploadStatus_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out MediaUploadStatus_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.MediaUploadStatus_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_MediaUploadType_Type (Value : in String) return .Models.MediaUploadType_Type is
   begin
      if Value = "video" then
         return VIDEO;
      end if;
      raise Constraint_Error;
   end To_MediaUploadType_Type;

   function To_String (Value : in .Models.MediaUploadType_Type) return String is
   begin
      case Value is
         when VIDEO =>
            return "video";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.MediaUploadType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MediaUploadType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.MediaUploadType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_MediaUploadType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out MediaUploadType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.MediaUploadType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_MemberBusinessRole_Type (Value : in String) return .Models.MemberBusinessRole_Type is
   begin
      if Value = "EMPLOYEE" then
         return EMPLOYEE;
      end if;
      if Value = "BIZ_ADMIN" then
         return BIZ_ADMIN;
      end if;
      raise Constraint_Error;
   end To_MemberBusinessRole_Type;

   function To_String (Value : in .Models.MemberBusinessRole_Type) return String is
   begin
      case Value is
         when EMPLOYEE =>
            return "EMPLOYEE";

         when BIZ_ADMIN =>
            return "BIZ_ADMIN";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.MemberBusinessRole_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MemberBusinessRole_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.MemberBusinessRole_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_MemberBusinessRole_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out MemberBusinessRole_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.MemberBusinessRole_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_MetricsReportingLevel_Type (Value : in String) return .Models.MetricsReportingLevel_Type is
   begin
      if Value = "ADVERTISER" then
         return ADVERTISER;
      end if;
      if Value = "ADVERTISER_TARGETING" then
         return ADVERTISER_TARGETING;
      end if;
      if Value = "CAMPAIGN" then
         return CAMPAIGN;
      end if;
      if Value = "CAMPAIGN_TARGETING" then
         return CAMPAIGN_TARGETING;
      end if;
      if Value = "AD_GROUP" then
         return AD_GROUP;
      end if;
      if Value = "AD_GROUP_TARGETING" then
         return AD_GROUP_TARGETING;
      end if;
      if Value = "PIN_PROMOTION" then
         return PIN_PROMOTION;
      end if;
      if Value = "PIN_PROMOTION_TARGETING" then
         return PIN_PROMOTION_TARGETING;
      end if;
      if Value = "KEYWORD" then
         return KEYWORD;
      end if;
      if Value = "PRODUCT_GROUP" then
         return PRODUCT_GROUP;
      end if;
      if Value = "PRODUCT_GROUP_TARGETING" then
         return PRODUCT_GROUP_TARGETING;
      end if;
      if Value = "PRODUCT_ITEM" then
         return PRODUCT_ITEM;
      end if;
      if Value = "PRODUCT_ITEM_TARGETING" then
         return PRODUCT_ITEM_TARGETING;
      end if;
      raise Constraint_Error;
   end To_MetricsReportingLevel_Type;

   function To_String (Value : in .Models.MetricsReportingLevel_Type) return String is
   begin
      case Value is
         when ADVERTISER =>
            return "ADVERTISER";

         when ADVERTISER_TARGETING =>
            return "ADVERTISER_TARGETING";

         when CAMPAIGN =>
            return "CAMPAIGN";

         when CAMPAIGN_TARGETING =>
            return "CAMPAIGN_TARGETING";

         when AD_GROUP =>
            return "AD_GROUP";

         when AD_GROUP_TARGETING =>
            return "AD_GROUP_TARGETING";

         when PIN_PROMOTION =>
            return "PIN_PROMOTION";

         when PIN_PROMOTION_TARGETING =>
            return "PIN_PROMOTION_TARGETING";

         when KEYWORD =>
            return "KEYWORD";

         when PRODUCT_GROUP =>
            return "PRODUCT_GROUP";

         when PRODUCT_GROUP_TARGETING =>
            return "PRODUCT_GROUP_TARGETING";

         when PRODUCT_ITEM =>
            return "PRODUCT_ITEM";

         when PRODUCT_ITEM_TARGETING =>
            return "PRODUCT_ITEM_TARGETING";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.MetricsReportingLevel_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MetricsReportingLevel_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.MetricsReportingLevel_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_MetricsReportingLevel_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out MetricsReportingLevel_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.MetricsReportingLevel_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.MinPriceFilter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("MIN_PRICE", Value.MIN_PRICE);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MinPriceFilter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.MinPriceFilter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "MIN_PRICE", Value.MIN_PRICE);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out MinPriceFilter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.MinPriceFilter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Model_Exception) is
   begin
      Into.Start_Entity (Name);
      if not Value.Code.Is_Null then
         Into.Write_Entity ("code", Value.Code);
      end if;
      if not Value.Message.Is_Null then
         Into.Write_Entity ("message", Value.Message);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Model_Exception_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Model_Exception) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "message", Value.Message);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Model_Exception_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Model_Exception;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_NonNullableCatalogsCurrency_Type (Value : in String) return .Models.NonNullableCatalogsCurrency_Type is
   begin
      if Value = "AED" then
         return AED;
      end if;
      if Value = "AFN" then
         return AFN;
      end if;
      if Value = "ALL" then
         return ALL;
      end if;
      if Value = "AMD" then
         return AMD;
      end if;
      if Value = "ANG" then
         return ANG;
      end if;
      if Value = "AOA" then
         return AOA;
      end if;
      if Value = "ARS" then
         return ARS;
      end if;
      if Value = "AUD" then
         return AUD;
      end if;
      if Value = "AWG" then
         return AWG;
      end if;
      if Value = "AZN" then
         return AZN;
      end if;
      if Value = "BAM" then
         return BAM;
      end if;
      if Value = "BBD" then
         return BBD;
      end if;
      if Value = "BDT" then
         return BDT;
      end if;
      if Value = "BGN" then
         return BGN;
      end if;
      if Value = "BHD" then
         return BHD;
      end if;
      if Value = "BIF" then
         return BIF;
      end if;
      if Value = "BMD" then
         return BMD;
      end if;
      if Value = "BND" then
         return BND;
      end if;
      if Value = "BOB" then
         return BOB;
      end if;
      if Value = "BRL" then
         return BRL;
      end if;
      if Value = "BSD" then
         return BSD;
      end if;
      if Value = "BTN" then
         return BTN;
      end if;
      if Value = "BWP" then
         return BWP;
      end if;
      if Value = "BYN" then
         return BYN;
      end if;
      if Value = "BYR" then
         return BYR;
      end if;
      if Value = "BZD" then
         return BZD;
      end if;
      if Value = "CAD" then
         return CAD;
      end if;
      if Value = "CDF" then
         return CDF;
      end if;
      if Value = "CHF" then
         return CHF;
      end if;
      if Value = "CLP" then
         return CLP;
      end if;
      if Value = "CNY" then
         return CNY;
      end if;
      if Value = "COP" then
         return COP;
      end if;
      if Value = "CRC" then
         return CRC;
      end if;
      if Value = "CUC" then
         return CUC;
      end if;
      if Value = "CUP" then
         return CUP;
      end if;
      if Value = "CVE" then
         return CVE;
      end if;
      if Value = "CZK" then
         return CZK;
      end if;
      if Value = "DJF" then
         return DJF;
      end if;
      if Value = "DKK" then
         return DKK;
      end if;
      if Value = "DOP" then
         return DOP;
      end if;
      if Value = "DZD" then
         return DZD;
      end if;
      if Value = "EGP" then
         return EGP;
      end if;
      if Value = "ERN" then
         return ERN;
      end if;
      if Value = "ETB" then
         return ETB;
      end if;
      if Value = "EUR" then
         return EUR;
      end if;
      if Value = "FJD" then
         return FJD;
      end if;
      if Value = "FKP" then
         return FKP;
      end if;
      if Value = "GBP" then
         return GBP;
      end if;
      if Value = "GEL" then
         return GEL;
      end if;
      if Value = "GGP" then
         return GGP;
      end if;
      if Value = "GHS" then
         return GHS;
      end if;
      if Value = "GIP" then
         return GIP;
      end if;
      if Value = "GMD" then
         return GMD;
      end if;
      if Value = "GNF" then
         return GNF;
      end if;
      if Value = "GTQ" then
         return GTQ;
      end if;
      if Value = "GYD" then
         return GYD;
      end if;
      if Value = "HKD" then
         return HKD;
      end if;
      if Value = "HNL" then
         return HNL;
      end if;
      if Value = "HRK" then
         return HRK;
      end if;
      if Value = "HTG" then
         return HTG;
      end if;
      if Value = "HUF" then
         return HUF;
      end if;
      if Value = "IDR" then
         return IDR;
      end if;
      if Value = "ILS" then
         return ILS;
      end if;
      if Value = "IMP" then
         return IMP;
      end if;
      if Value = "INR" then
         return INR;
      end if;
      if Value = "IQD" then
         return IQD;
      end if;
      if Value = "IRR" then
         return IRR;
      end if;
      if Value = "ISK" then
         return ISK;
      end if;
      if Value = "JEP" then
         return JEP;
      end if;
      if Value = "JMD" then
         return JMD;
      end if;
      if Value = "JOD" then
         return JOD;
      end if;
      if Value = "JPY" then
         return JPY;
      end if;
      if Value = "KES" then
         return KES;
      end if;
      if Value = "KGS" then
         return KGS;
      end if;
      if Value = "KHR" then
         return KHR;
      end if;
      if Value = "KMF" then
         return KMF;
      end if;
      if Value = "KPW" then
         return KPW;
      end if;
      if Value = "KRW" then
         return KRW;
      end if;
      if Value = "KWD" then
         return KWD;
      end if;
      if Value = "KYD" then
         return KYD;
      end if;
      if Value = "KZT" then
         return KZT;
      end if;
      if Value = "LAK" then
         return LAK;
      end if;
      if Value = "LBP" then
         return LBP;
      end if;
      if Value = "LKR" then
         return LKR;
      end if;
      if Value = "LRD" then
         return LRD;
      end if;
      if Value = "LSL" then
         return LSL;
      end if;
      if Value = "LYD" then
         return LYD;
      end if;
      if Value = "MAD" then
         return MAD;
      end if;
      if Value = "MDL" then
         return MDL;
      end if;
      if Value = "MGA" then
         return MGA;
      end if;
      if Value = "MKD" then
         return MKD;
      end if;
      if Value = "MMK" then
         return MMK;
      end if;
      if Value = "MNT" then
         return MNT;
      end if;
      if Value = "MOP" then
         return MOP;
      end if;
      if Value = "MRO" then
         return MRO;
      end if;
      if Value = "MUR" then
         return MUR;
      end if;
      if Value = "MVR" then
         return MVR;
      end if;
      if Value = "MWK" then
         return MWK;
      end if;
      if Value = "MXN" then
         return MXN;
      end if;
      if Value = "MYR" then
         return MYR;
      end if;
      if Value = "MZN" then
         return MZN;
      end if;
      if Value = "NAD" then
         return NAD;
      end if;
      if Value = "NGN" then
         return NGN;
      end if;
      if Value = "NIO" then
         return NIO;
      end if;
      if Value = "NOK" then
         return NOK;
      end if;
      if Value = "NPR" then
         return NPR;
      end if;
      if Value = "NZD" then
         return NZD;
      end if;
      if Value = "OMR" then
         return OMR;
      end if;
      if Value = "PAB" then
         return PAB;
      end if;
      if Value = "PEN" then
         return PEN;
      end if;
      if Value = "PGK" then
         return PGK;
      end if;
      if Value = "PHP" then
         return PHP;
      end if;
      if Value = "PKR" then
         return PKR;
      end if;
      if Value = "PLN" then
         return PLN;
      end if;
      if Value = "PYG" then
         return PYG;
      end if;
      if Value = "QAR" then
         return QAR;
      end if;
      if Value = "RON" then
         return RON;
      end if;
      if Value = "RSD" then
         return RSD;
      end if;
      if Value = "RUB" then
         return RUB;
      end if;
      if Value = "RWF" then
         return RWF;
      end if;
      if Value = "SAR" then
         return SAR;
      end if;
      if Value = "SBD" then
         return SBD;
      end if;
      if Value = "SCR" then
         return SCR;
      end if;
      if Value = "SDG" then
         return SDG;
      end if;
      if Value = "SEK" then
         return SEK;
      end if;
      if Value = "SGD" then
         return SGD;
      end if;
      if Value = "SHP" then
         return SHP;
      end if;
      if Value = "SLL" then
         return SLL;
      end if;
      if Value = "SOS" then
         return SOS;
      end if;
      if Value = "SPL" then
         return SPL;
      end if;
      if Value = "SRD" then
         return SRD;
      end if;
      if Value = "STD" then
         return STD;
      end if;
      if Value = "SVC" then
         return SVC;
      end if;
      if Value = "SYP" then
         return SYP;
      end if;
      if Value = "SZL" then
         return SZL;
      end if;
      if Value = "THB" then
         return THB;
      end if;
      if Value = "TJS" then
         return TJS;
      end if;
      if Value = "TMT" then
         return TMT;
      end if;
      if Value = "TND" then
         return TND;
      end if;
      if Value = "TOP" then
         return TOP;
      end if;
      if Value = "TRY" then
         return TRY;
      end if;
      if Value = "TTD" then
         return TTD;
      end if;
      if Value = "TVD" then
         return TVD;
      end if;
      if Value = "TWD" then
         return TWD;
      end if;
      if Value = "TZS" then
         return TZS;
      end if;
      if Value = "UAH" then
         return UAH;
      end if;
      if Value = "UGX" then
         return UGX;
      end if;
      if Value = "USD" then
         return USD;
      end if;
      if Value = "UYU" then
         return UYU;
      end if;
      if Value = "UZS" then
         return UZS;
      end if;
      if Value = "VEF" then
         return VEF;
      end if;
      if Value = "VND" then
         return VND;
      end if;
      if Value = "VUV" then
         return VUV;
      end if;
      if Value = "WST" then
         return WST;
      end if;
      if Value = "XAF" then
         return XAF;
      end if;
      if Value = "XCD" then
         return XCD;
      end if;
      if Value = "XDR" then
         return XDR;
      end if;
      if Value = "XOF" then
         return XOF;
      end if;
      if Value = "XPF" then
         return XPF;
      end if;
      if Value = "YER" then
         return YER;
      end if;
      if Value = "ZAR" then
         return ZAR;
      end if;
      if Value = "ZMW" then
         return ZMW;
      end if;
      if Value = "ZWD" then
         return ZWD;
      end if;
      raise Constraint_Error;
   end To_NonNullableCatalogsCurrency_Type;

   function To_String (Value : in .Models.NonNullableCatalogsCurrency_Type) return String is
   begin
      case Value is
         when AED =>
            return "AED";

         when AFN =>
            return "AFN";

         when ALL =>
            return "ALL";

         when AMD =>
            return "AMD";

         when ANG =>
            return "ANG";

         when AOA =>
            return "AOA";

         when ARS =>
            return "ARS";

         when AUD =>
            return "AUD";

         when AWG =>
            return "AWG";

         when AZN =>
            return "AZN";

         when BAM =>
            return "BAM";

         when BBD =>
            return "BBD";

         when BDT =>
            return "BDT";

         when BGN =>
            return "BGN";

         when BHD =>
            return "BHD";

         when BIF =>
            return "BIF";

         when BMD =>
            return "BMD";

         when BND =>
            return "BND";

         when BOB =>
            return "BOB";

         when BRL =>
            return "BRL";

         when BSD =>
            return "BSD";

         when BTN =>
            return "BTN";

         when BWP =>
            return "BWP";

         when BYN =>
            return "BYN";

         when BYR =>
            return "BYR";

         when BZD =>
            return "BZD";

         when CAD =>
            return "CAD";

         when CDF =>
            return "CDF";

         when CHF =>
            return "CHF";

         when CLP =>
            return "CLP";

         when CNY =>
            return "CNY";

         when COP =>
            return "COP";

         when CRC =>
            return "CRC";

         when CUC =>
            return "CUC";

         when CUP =>
            return "CUP";

         when CVE =>
            return "CVE";

         when CZK =>
            return "CZK";

         when DJF =>
            return "DJF";

         when DKK =>
            return "DKK";

         when DOP =>
            return "DOP";

         when DZD =>
            return "DZD";

         when EGP =>
            return "EGP";

         when ERN =>
            return "ERN";

         when ETB =>
            return "ETB";

         when EUR =>
            return "EUR";

         when FJD =>
            return "FJD";

         when FKP =>
            return "FKP";

         when GBP =>
            return "GBP";

         when GEL =>
            return "GEL";

         when GGP =>
            return "GGP";

         when GHS =>
            return "GHS";

         when GIP =>
            return "GIP";

         when GMD =>
            return "GMD";

         when GNF =>
            return "GNF";

         when GTQ =>
            return "GTQ";

         when GYD =>
            return "GYD";

         when HKD =>
            return "HKD";

         when HNL =>
            return "HNL";

         when HRK =>
            return "HRK";

         when HTG =>
            return "HTG";

         when HUF =>
            return "HUF";

         when IDR =>
            return "IDR";

         when ILS =>
            return "ILS";

         when IMP =>
            return "IMP";

         when INR =>
            return "INR";

         when IQD =>
            return "IQD";

         when IRR =>
            return "IRR";

         when ISK =>
            return "ISK";

         when JEP =>
            return "JEP";

         when JMD =>
            return "JMD";

         when JOD =>
            return "JOD";

         when JPY =>
            return "JPY";

         when KES =>
            return "KES";

         when KGS =>
            return "KGS";

         when KHR =>
            return "KHR";

         when KMF =>
            return "KMF";

         when KPW =>
            return "KPW";

         when KRW =>
            return "KRW";

         when KWD =>
            return "KWD";

         when KYD =>
            return "KYD";

         when KZT =>
            return "KZT";

         when LAK =>
            return "LAK";

         when LBP =>
            return "LBP";

         when LKR =>
            return "LKR";

         when LRD =>
            return "LRD";

         when LSL =>
            return "LSL";

         when LYD =>
            return "LYD";

         when MAD =>
            return "MAD";

         when MDL =>
            return "MDL";

         when MGA =>
            return "MGA";

         when MKD =>
            return "MKD";

         when MMK =>
            return "MMK";

         when MNT =>
            return "MNT";

         when MOP =>
            return "MOP";

         when MRO =>
            return "MRO";

         when MUR =>
            return "MUR";

         when MVR =>
            return "MVR";

         when MWK =>
            return "MWK";

         when MXN =>
            return "MXN";

         when MYR =>
            return "MYR";

         when MZN =>
            return "MZN";

         when NAD =>
            return "NAD";

         when NGN =>
            return "NGN";

         when NIO =>
            return "NIO";

         when NOK =>
            return "NOK";

         when NPR =>
            return "NPR";

         when NZD =>
            return "NZD";

         when OMR =>
            return "OMR";

         when PAB =>
            return "PAB";

         when PEN =>
            return "PEN";

         when PGK =>
            return "PGK";

         when PHP =>
            return "PHP";

         when PKR =>
            return "PKR";

         when PLN =>
            return "PLN";

         when PYG =>
            return "PYG";

         when QAR =>
            return "QAR";

         when RON =>
            return "RON";

         when RSD =>
            return "RSD";

         when RUB =>
            return "RUB";

         when RWF =>
            return "RWF";

         when SAR =>
            return "SAR";

         when SBD =>
            return "SBD";

         when SCR =>
            return "SCR";

         when SDG =>
            return "SDG";

         when SEK =>
            return "SEK";

         when SGD =>
            return "SGD";

         when SHP =>
            return "SHP";

         when SLL =>
            return "SLL";

         when SOS =>
            return "SOS";

         when SPL =>
            return "SPL";

         when SRD =>
            return "SRD";

         when STD =>
            return "STD";

         when SVC =>
            return "SVC";

         when SYP =>
            return "SYP";

         when SZL =>
            return "SZL";

         when THB =>
            return "THB";

         when TJS =>
            return "TJS";

         when TMT =>
            return "TMT";

         when TND =>
            return "TND";

         when TOP =>
            return "TOP";

         when TRY =>
            return "TRY";

         when TTD =>
            return "TTD";

         when TVD =>
            return "TVD";

         when TWD =>
            return "TWD";

         when TZS =>
            return "TZS";

         when UAH =>
            return "UAH";

         when UGX =>
            return "UGX";

         when USD =>
            return "USD";

         when UYU =>
            return "UYU";

         when UZS =>
            return "UZS";

         when VEF =>
            return "VEF";

         when VND =>
            return "VND";

         when VUV =>
            return "VUV";

         when WST =>
            return "WST";

         when XAF =>
            return "XAF";

         when XCD =>
            return "XCD";

         when XDR =>
            return "XDR";

         when XOF =>
            return "XOF";

         when XPF =>
            return "XPF";

         when YER =>
            return "YER";

         when ZAR =>
            return "ZAR";

         when ZMW =>
            return "ZMW";

         when ZWD =>
            return "ZWD";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.NonNullableCatalogsCurrency_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in NonNullableCatalogsCurrency_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.NonNullableCatalogsCurrency_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_NonNullableCatalogsCurrency_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out NonNullableCatalogsCurrency_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.NonNullableCatalogsCurrency_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_NonNullableProductAvailabilityType_Type (Value : in String) return .Models.NonNullableProductAvailabilityType_Type is
   begin
      if Value = "IN_STOCK" then
         return IN_STOCK;
      end if;
      if Value = "OUT_OF_STOCK" then
         return OUT_OF_STOCK;
      end if;
      if Value = "PREORDER" then
         return PREORDER;
      end if;
      raise Constraint_Error;
   end To_NonNullableProductAvailabilityType_Type;

   function To_String (Value : in .Models.NonNullableProductAvailabilityType_Type) return String is
   begin
      case Value is
         when IN_STOCK =>
            return "IN_STOCK";

         when OUT_OF_STOCK =>
            return "OUT_OF_STOCK";

         when PREORDER =>
            return "PREORDER";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.NonNullableProductAvailabilityType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in NonNullableProductAvailabilityType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.NonNullableProductAvailabilityType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_NonNullableProductAvailabilityType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out NonNullableProductAvailabilityType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.NonNullableProductAvailabilityType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_NullableCatalogsItemFieldType_Type (Value : in String) return .Models.NullableCatalogsItemFieldType_Type is
   begin
      if Value = "ITEM_ID" then
         return ITEM_ID;
      end if;
      if Value = "ITEM_GROUP_ID" then
         return ITEM_GROUP_ID;
      end if;
      if Value = "TITLE" then
         return TITLE;
      end if;
      if Value = "DESCRIPTION" then
         return DESCRIPTION;
      end if;
      if Value = "ITEM_LINK" then
         return ITEM_LINK;
      end if;
      if Value = "ORGANIC_LINK" then
         return ORGANIC_LINK;
      end if;
      if Value = "IMAGE_LINK" then
         return IMAGE_LINK;
      end if;
      if Value = "ADWORDS_REDIRECT_LINK" then
         return ADWORDS_REDIRECT_LINK;
      end if;
      if Value = "AD_LINK" then
         return AD_LINK;
      end if;
      if Value = "SIZE" then
         return SIZE;
      end if;
      if Value = "GOOGLE_PRODUCT_CATEGORY" then
         return GOOGLE_PRODUCT_CATEGORY;
      end if;
      if Value = "PRODUCT_CATEGORY" then
         return PRODUCT_CATEGORY;
      end if;
      if Value = "CONDITION" then
         return CONDITION;
      end if;
      if Value = "AVAILABILITY" then
         return AVAILABILITY;
      end if;
      if Value = "GENDER" then
         return GENDER;
      end if;
      if Value = "AGE_GROUP" then
         return AGE_GROUP;
      end if;
      if Value = "SIZE_TYPE" then
         return SIZE_TYPE;
      end if;
      if Value = "SIZE_SYSTEM" then
         return SIZE_SYSTEM;
      end if;
      if Value = "ADULT" then
         return ADULT;
      end if;
      if Value = "SHIPPING" then
         return SHIPPING;
      end if;
      if Value = "SHIPPING_WEIGHT" then
         return SHIPPING_WEIGHT;
      end if;
      if Value = "TAX" then
         return TAX;
      end if;
      if Value = "MULTIPACK" then
         return MULTIPACK;
      end if;
      if Value = "ADDITIONAL_IMAGE_LINK" then
         return ADDITIONAL_IMAGE_LINK;
      end if;
      if Value = "PRICE" then
         return PRICE;
      end if;
      if Value = "SALE_PRICE" then
         return SALE_PRICE;
      end if;
      if Value = "IS_BUNDLE" then
         return IS_BUNDLE;
      end if;
      if Value = "EXPIRATION_DATE" then
         return EXPIRATION_DATE;
      end if;
      if Value = "SALE_PRICE_EFFECTIVE_DATE" then
         return SALE_PRICE_EFFECTIVE_DATE;
      end if;
      if Value = "AVAILABILITY_DATE" then
         return AVAILABILITY_DATE;
      end if;
      if Value = "WEIGHT_UNIT" then
         return WEIGHT_UNIT;
      end if;
      if Value = "PRODUCT_TYPE" then
         return PRODUCT_TYPE;
      end if;
      if Value = "CUSTOM_LABEL_0" then
         return CUSTOM_LABEL_0;
      end if;
      if Value = "CUSTOM_LABEL_1" then
         return CUSTOM_LABEL_1;
      end if;
      if Value = "CUSTOM_LABEL_2" then
         return CUSTOM_LABEL_2;
      end if;
      if Value = "CUSTOM_LABEL_3" then
         return CUSTOM_LABEL_3;
      end if;
      if Value = "CUSTOM_LABEL_4" then
         return CUSTOM_LABEL_4;
      end if;
      if Value = "MATERIAL" then
         return MATERIAL;
      end if;
      if Value = "PATTERN" then
         return PATTERN;
      end if;
      if Value = "COLOR" then
         return COLOR;
      end if;
      if Value = "BRAND" then
         return BRAND;
      end if;
      if Value = "GTIN" then
         return GTIN;
      end if;
      if Value = "MPN" then
         return MPN;
      end if;
      if Value = "IOS_DEEP_LINK" then
         return IOS_DEEP_LINK;
      end if;
      if Value = "ANDROID_DEEP_LINK" then
         return ANDROID_DEEP_LINK;
      end if;
      if Value = "FREE_SHIPPING_LABEL" then
         return FREE_SHIPPING_LABEL;
      end if;
      if Value = "FREE_SHIPPING_LIMIT" then
         return FREE_SHIPPING_LIMIT;
      end if;
      if Value = "AVG_REVIEW_RATING" then
         return AVG_REVIEW_RATING;
      end if;
      if Value = "NUM_RATINGS" then
         return NUM_RATINGS;
      end if;
      if Value = "NUM_REVIEWS" then
         return NUM_REVIEWS;
      end if;
      if Value = "ALT_TEXT" then
         return ALT_TEXT;
      end if;
      if Value = "VARIANT_NAMES" then
         return VARIANT_NAMES;
      end if;
      if Value = "VARIANT_VALUES" then
         return VARIANT_VALUES;
      end if;
      if Value = "MIN_AD_PRICE" then
         return MIN_AD_PRICE;
      end if;
      if Value = "SHIPPING_WIDTH" then
         return SHIPPING_WIDTH;
      end if;
      if Value = "SHIPPING_HEIGHT" then
         return SHIPPING_HEIGHT;
      end if;
      raise Constraint_Error;
   end To_NullableCatalogsItemFieldType_Type;

   function To_String (Value : in .Models.NullableCatalogsItemFieldType_Type) return String is
   begin
      case Value is
         when ITEM_ID =>
            return "ITEM_ID";

         when ITEM_GROUP_ID =>
            return "ITEM_GROUP_ID";

         when TITLE =>
            return "TITLE";

         when DESCRIPTION =>
            return "DESCRIPTION";

         when ITEM_LINK =>
            return "ITEM_LINK";

         when ORGANIC_LINK =>
            return "ORGANIC_LINK";

         when IMAGE_LINK =>
            return "IMAGE_LINK";

         when ADWORDS_REDIRECT_LINK =>
            return "ADWORDS_REDIRECT_LINK";

         when AD_LINK =>
            return "AD_LINK";

         when SIZE =>
            return "SIZE";

         when GOOGLE_PRODUCT_CATEGORY =>
            return "GOOGLE_PRODUCT_CATEGORY";

         when PRODUCT_CATEGORY =>
            return "PRODUCT_CATEGORY";

         when CONDITION =>
            return "CONDITION";

         when AVAILABILITY =>
            return "AVAILABILITY";

         when GENDER =>
            return "GENDER";

         when AGE_GROUP =>
            return "AGE_GROUP";

         when SIZE_TYPE =>
            return "SIZE_TYPE";

         when SIZE_SYSTEM =>
            return "SIZE_SYSTEM";

         when ADULT =>
            return "ADULT";

         when SHIPPING =>
            return "SHIPPING";

         when SHIPPING_WEIGHT =>
            return "SHIPPING_WEIGHT";

         when TAX =>
            return "TAX";

         when MULTIPACK =>
            return "MULTIPACK";

         when ADDITIONAL_IMAGE_LINK =>
            return "ADDITIONAL_IMAGE_LINK";

         when PRICE =>
            return "PRICE";

         when SALE_PRICE =>
            return "SALE_PRICE";

         when IS_BUNDLE =>
            return "IS_BUNDLE";

         when EXPIRATION_DATE =>
            return "EXPIRATION_DATE";

         when SALE_PRICE_EFFECTIVE_DATE =>
            return "SALE_PRICE_EFFECTIVE_DATE";

         when AVAILABILITY_DATE =>
            return "AVAILABILITY_DATE";

         when WEIGHT_UNIT =>
            return "WEIGHT_UNIT";

         when PRODUCT_TYPE =>
            return "PRODUCT_TYPE";

         when CUSTOM_LABEL_0 =>
            return "CUSTOM_LABEL_0";

         when CUSTOM_LABEL_1 =>
            return "CUSTOM_LABEL_1";

         when CUSTOM_LABEL_2 =>
            return "CUSTOM_LABEL_2";

         when CUSTOM_LABEL_3 =>
            return "CUSTOM_LABEL_3";

         when CUSTOM_LABEL_4 =>
            return "CUSTOM_LABEL_4";

         when MATERIAL =>
            return "MATERIAL";

         when PATTERN =>
            return "PATTERN";

         when COLOR =>
            return "COLOR";

         when BRAND =>
            return "BRAND";

         when GTIN =>
            return "GTIN";

         when MPN =>
            return "MPN";

         when IOS_DEEP_LINK =>
            return "IOS_DEEP_LINK";

         when ANDROID_DEEP_LINK =>
            return "ANDROID_DEEP_LINK";

         when FREE_SHIPPING_LABEL =>
            return "FREE_SHIPPING_LABEL";

         when FREE_SHIPPING_LIMIT =>
            return "FREE_SHIPPING_LIMIT";

         when AVG_REVIEW_RATING =>
            return "AVG_REVIEW_RATING";

         when NUM_RATINGS =>
            return "NUM_RATINGS";

         when NUM_REVIEWS =>
            return "NUM_REVIEWS";

         when ALT_TEXT =>
            return "ALT_TEXT";

         when VARIANT_NAMES =>
            return "VARIANT_NAMES";

         when VARIANT_VALUES =>
            return "VARIANT_VALUES";

         when MIN_AD_PRICE =>
            return "MIN_AD_PRICE";

         when SHIPPING_WIDTH =>
            return "SHIPPING_WIDTH";

         when SHIPPING_HEIGHT =>
            return "SHIPPING_HEIGHT";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.NullableCatalogsItemFieldType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in NullableCatalogsItemFieldType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.NullableCatalogsItemFieldType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_NullableCatalogsItemFieldType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out NullableCatalogsItemFieldType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.NullableCatalogsItemFieldType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_NullableCurrency_Type (Value : in String) return .Models.NullableCurrency_Type is
   begin
      if Value = "AED" then
         return AED;
      end if;
      if Value = "AFN" then
         return AFN;
      end if;
      if Value = "ALL" then
         return ALL;
      end if;
      if Value = "AMD" then
         return AMD;
      end if;
      if Value = "ANG" then
         return ANG;
      end if;
      if Value = "AOA" then
         return AOA;
      end if;
      if Value = "ARS" then
         return ARS;
      end if;
      if Value = "AUD" then
         return AUD;
      end if;
      if Value = "AWG" then
         return AWG;
      end if;
      if Value = "AZN" then
         return AZN;
      end if;
      if Value = "BAM" then
         return BAM;
      end if;
      if Value = "BBD" then
         return BBD;
      end if;
      if Value = "BDT" then
         return BDT;
      end if;
      if Value = "BGN" then
         return BGN;
      end if;
      if Value = "BHD" then
         return BHD;
      end if;
      if Value = "BIF" then
         return BIF;
      end if;
      if Value = "BMD" then
         return BMD;
      end if;
      if Value = "BND" then
         return BND;
      end if;
      if Value = "BOB" then
         return BOB;
      end if;
      if Value = "BRL" then
         return BRL;
      end if;
      if Value = "BSD" then
         return BSD;
      end if;
      if Value = "BTN" then
         return BTN;
      end if;
      if Value = "BWP" then
         return BWP;
      end if;
      if Value = "BYN" then
         return BYN;
      end if;
      if Value = "BYR" then
         return BYR;
      end if;
      if Value = "BZD" then
         return BZD;
      end if;
      if Value = "CAD" then
         return CAD;
      end if;
      if Value = "CDF" then
         return CDF;
      end if;
      if Value = "CHF" then
         return CHF;
      end if;
      if Value = "CLP" then
         return CLP;
      end if;
      if Value = "CNY" then
         return CNY;
      end if;
      if Value = "COP" then
         return COP;
      end if;
      if Value = "CRC" then
         return CRC;
      end if;
      if Value = "CUC" then
         return CUC;
      end if;
      if Value = "CUP" then
         return CUP;
      end if;
      if Value = "CVE" then
         return CVE;
      end if;
      if Value = "CZK" then
         return CZK;
      end if;
      if Value = "DJF" then
         return DJF;
      end if;
      if Value = "DKK" then
         return DKK;
      end if;
      if Value = "DOP" then
         return DOP;
      end if;
      if Value = "DZD" then
         return DZD;
      end if;
      if Value = "EGP" then
         return EGP;
      end if;
      if Value = "ERN" then
         return ERN;
      end if;
      if Value = "ETB" then
         return ETB;
      end if;
      if Value = "EUR" then
         return EUR;
      end if;
      if Value = "FJD" then
         return FJD;
      end if;
      if Value = "FKP" then
         return FKP;
      end if;
      if Value = "GBP" then
         return GBP;
      end if;
      if Value = "GEL" then
         return GEL;
      end if;
      if Value = "GGP" then
         return GGP;
      end if;
      if Value = "GHS" then
         return GHS;
      end if;
      if Value = "GIP" then
         return GIP;
      end if;
      if Value = "GMD" then
         return GMD;
      end if;
      if Value = "GNF" then
         return GNF;
      end if;
      if Value = "GTQ" then
         return GTQ;
      end if;
      if Value = "GYD" then
         return GYD;
      end if;
      if Value = "HKD" then
         return HKD;
      end if;
      if Value = "HNL" then
         return HNL;
      end if;
      if Value = "HRK" then
         return HRK;
      end if;
      if Value = "HTG" then
         return HTG;
      end if;
      if Value = "HUF" then
         return HUF;
      end if;
      if Value = "IDR" then
         return IDR;
      end if;
      if Value = "ILS" then
         return ILS;
      end if;
      if Value = "IMP" then
         return IMP;
      end if;
      if Value = "INR" then
         return INR;
      end if;
      if Value = "IQD" then
         return IQD;
      end if;
      if Value = "IRR" then
         return IRR;
      end if;
      if Value = "ISK" then
         return ISK;
      end if;
      if Value = "JEP" then
         return JEP;
      end if;
      if Value = "JMD" then
         return JMD;
      end if;
      if Value = "JOD" then
         return JOD;
      end if;
      if Value = "JPY" then
         return JPY;
      end if;
      if Value = "KES" then
         return KES;
      end if;
      if Value = "KGS" then
         return KGS;
      end if;
      if Value = "KHR" then
         return KHR;
      end if;
      if Value = "KMF" then
         return KMF;
      end if;
      if Value = "KPW" then
         return KPW;
      end if;
      if Value = "KRW" then
         return KRW;
      end if;
      if Value = "KWD" then
         return KWD;
      end if;
      if Value = "KYD" then
         return KYD;
      end if;
      if Value = "KZT" then
         return KZT;
      end if;
      if Value = "LAK" then
         return LAK;
      end if;
      if Value = "LBP" then
         return LBP;
      end if;
      if Value = "LKR" then
         return LKR;
      end if;
      if Value = "LRD" then
         return LRD;
      end if;
      if Value = "LSL" then
         return LSL;
      end if;
      if Value = "LYD" then
         return LYD;
      end if;
      if Value = "MAD" then
         return MAD;
      end if;
      if Value = "MDL" then
         return MDL;
      end if;
      if Value = "MGA" then
         return MGA;
      end if;
      if Value = "MKD" then
         return MKD;
      end if;
      if Value = "MMK" then
         return MMK;
      end if;
      if Value = "MNT" then
         return MNT;
      end if;
      if Value = "MOP" then
         return MOP;
      end if;
      if Value = "MRO" then
         return MRO;
      end if;
      if Value = "MUR" then
         return MUR;
      end if;
      if Value = "MVR" then
         return MVR;
      end if;
      if Value = "MWK" then
         return MWK;
      end if;
      if Value = "MXN" then
         return MXN;
      end if;
      if Value = "MYR" then
         return MYR;
      end if;
      if Value = "MZN" then
         return MZN;
      end if;
      if Value = "NAD" then
         return NAD;
      end if;
      if Value = "NGN" then
         return NGN;
      end if;
      if Value = "NIO" then
         return NIO;
      end if;
      if Value = "NOK" then
         return NOK;
      end if;
      if Value = "NPR" then
         return NPR;
      end if;
      if Value = "NZD" then
         return NZD;
      end if;
      if Value = "OMR" then
         return OMR;
      end if;
      if Value = "PAB" then
         return PAB;
      end if;
      if Value = "PEN" then
         return PEN;
      end if;
      if Value = "PGK" then
         return PGK;
      end if;
      if Value = "PHP" then
         return PHP;
      end if;
      if Value = "PKR" then
         return PKR;
      end if;
      if Value = "PLN" then
         return PLN;
      end if;
      if Value = "PYG" then
         return PYG;
      end if;
      if Value = "QAR" then
         return QAR;
      end if;
      if Value = "RON" then
         return RON;
      end if;
      if Value = "RSD" then
         return RSD;
      end if;
      if Value = "RUB" then
         return RUB;
      end if;
      if Value = "RWF" then
         return RWF;
      end if;
      if Value = "SAR" then
         return SAR;
      end if;
      if Value = "SBD" then
         return SBD;
      end if;
      if Value = "SCR" then
         return SCR;
      end if;
      if Value = "SDG" then
         return SDG;
      end if;
      if Value = "SEK" then
         return SEK;
      end if;
      if Value = "SGD" then
         return SGD;
      end if;
      if Value = "SHP" then
         return SHP;
      end if;
      if Value = "SLL" then
         return SLL;
      end if;
      if Value = "SOS" then
         return SOS;
      end if;
      if Value = "SPL" then
         return SPL;
      end if;
      if Value = "SRD" then
         return SRD;
      end if;
      if Value = "STD" then
         return STD;
      end if;
      if Value = "SVC" then
         return SVC;
      end if;
      if Value = "SYP" then
         return SYP;
      end if;
      if Value = "SZL" then
         return SZL;
      end if;
      if Value = "THB" then
         return THB;
      end if;
      if Value = "TJS" then
         return TJS;
      end if;
      if Value = "TMT" then
         return TMT;
      end if;
      if Value = "TND" then
         return TND;
      end if;
      if Value = "TOP" then
         return TOP;
      end if;
      if Value = "TRY" then
         return TRY;
      end if;
      if Value = "TTD" then
         return TTD;
      end if;
      if Value = "TVD" then
         return TVD;
      end if;
      if Value = "TWD" then
         return TWD;
      end if;
      if Value = "TZS" then
         return TZS;
      end if;
      if Value = "UAH" then
         return UAH;
      end if;
      if Value = "UGX" then
         return UGX;
      end if;
      if Value = "USD" then
         return USD;
      end if;
      if Value = "UYU" then
         return UYU;
      end if;
      if Value = "UZS" then
         return UZS;
      end if;
      if Value = "VEF" then
         return VEF;
      end if;
      if Value = "VND" then
         return VND;
      end if;
      if Value = "VUV" then
         return VUV;
      end if;
      if Value = "WST" then
         return WST;
      end if;
      if Value = "XAF" then
         return XAF;
      end if;
      if Value = "XCD" then
         return XCD;
      end if;
      if Value = "XDR" then
         return XDR;
      end if;
      if Value = "XOF" then
         return XOF;
      end if;
      if Value = "XPF" then
         return XPF;
      end if;
      if Value = "YER" then
         return YER;
      end if;
      if Value = "ZAR" then
         return ZAR;
      end if;
      if Value = "ZMW" then
         return ZMW;
      end if;
      if Value = "ZWD" then
         return ZWD;
      end if;
      raise Constraint_Error;
   end To_NullableCurrency_Type;

   function To_String (Value : in .Models.NullableCurrency_Type) return String is
   begin
      case Value is
         when AED =>
            return "AED";

         when AFN =>
            return "AFN";

         when ALL =>
            return "ALL";

         when AMD =>
            return "AMD";

         when ANG =>
            return "ANG";

         when AOA =>
            return "AOA";

         when ARS =>
            return "ARS";

         when AUD =>
            return "AUD";

         when AWG =>
            return "AWG";

         when AZN =>
            return "AZN";

         when BAM =>
            return "BAM";

         when BBD =>
            return "BBD";

         when BDT =>
            return "BDT";

         when BGN =>
            return "BGN";

         when BHD =>
            return "BHD";

         when BIF =>
            return "BIF";

         when BMD =>
            return "BMD";

         when BND =>
            return "BND";

         when BOB =>
            return "BOB";

         when BRL =>
            return "BRL";

         when BSD =>
            return "BSD";

         when BTN =>
            return "BTN";

         when BWP =>
            return "BWP";

         when BYN =>
            return "BYN";

         when BYR =>
            return "BYR";

         when BZD =>
            return "BZD";

         when CAD =>
            return "CAD";

         when CDF =>
            return "CDF";

         when CHF =>
            return "CHF";

         when CLP =>
            return "CLP";

         when CNY =>
            return "CNY";

         when COP =>
            return "COP";

         when CRC =>
            return "CRC";

         when CUC =>
            return "CUC";

         when CUP =>
            return "CUP";

         when CVE =>
            return "CVE";

         when CZK =>
            return "CZK";

         when DJF =>
            return "DJF";

         when DKK =>
            return "DKK";

         when DOP =>
            return "DOP";

         when DZD =>
            return "DZD";

         when EGP =>
            return "EGP";

         when ERN =>
            return "ERN";

         when ETB =>
            return "ETB";

         when EUR =>
            return "EUR";

         when FJD =>
            return "FJD";

         when FKP =>
            return "FKP";

         when GBP =>
            return "GBP";

         when GEL =>
            return "GEL";

         when GGP =>
            return "GGP";

         when GHS =>
            return "GHS";

         when GIP =>
            return "GIP";

         when GMD =>
            return "GMD";

         when GNF =>
            return "GNF";

         when GTQ =>
            return "GTQ";

         when GYD =>
            return "GYD";

         when HKD =>
            return "HKD";

         when HNL =>
            return "HNL";

         when HRK =>
            return "HRK";

         when HTG =>
            return "HTG";

         when HUF =>
            return "HUF";

         when IDR =>
            return "IDR";

         when ILS =>
            return "ILS";

         when IMP =>
            return "IMP";

         when INR =>
            return "INR";

         when IQD =>
            return "IQD";

         when IRR =>
            return "IRR";

         when ISK =>
            return "ISK";

         when JEP =>
            return "JEP";

         when JMD =>
            return "JMD";

         when JOD =>
            return "JOD";

         when JPY =>
            return "JPY";

         when KES =>
            return "KES";

         when KGS =>
            return "KGS";

         when KHR =>
            return "KHR";

         when KMF =>
            return "KMF";

         when KPW =>
            return "KPW";

         when KRW =>
            return "KRW";

         when KWD =>
            return "KWD";

         when KYD =>
            return "KYD";

         when KZT =>
            return "KZT";

         when LAK =>
            return "LAK";

         when LBP =>
            return "LBP";

         when LKR =>
            return "LKR";

         when LRD =>
            return "LRD";

         when LSL =>
            return "LSL";

         when LYD =>
            return "LYD";

         when MAD =>
            return "MAD";

         when MDL =>
            return "MDL";

         when MGA =>
            return "MGA";

         when MKD =>
            return "MKD";

         when MMK =>
            return "MMK";

         when MNT =>
            return "MNT";

         when MOP =>
            return "MOP";

         when MRO =>
            return "MRO";

         when MUR =>
            return "MUR";

         when MVR =>
            return "MVR";

         when MWK =>
            return "MWK";

         when MXN =>
            return "MXN";

         when MYR =>
            return "MYR";

         when MZN =>
            return "MZN";

         when NAD =>
            return "NAD";

         when NGN =>
            return "NGN";

         when NIO =>
            return "NIO";

         when NOK =>
            return "NOK";

         when NPR =>
            return "NPR";

         when NZD =>
            return "NZD";

         when OMR =>
            return "OMR";

         when PAB =>
            return "PAB";

         when PEN =>
            return "PEN";

         when PGK =>
            return "PGK";

         when PHP =>
            return "PHP";

         when PKR =>
            return "PKR";

         when PLN =>
            return "PLN";

         when PYG =>
            return "PYG";

         when QAR =>
            return "QAR";

         when RON =>
            return "RON";

         when RSD =>
            return "RSD";

         when RUB =>
            return "RUB";

         when RWF =>
            return "RWF";

         when SAR =>
            return "SAR";

         when SBD =>
            return "SBD";

         when SCR =>
            return "SCR";

         when SDG =>
            return "SDG";

         when SEK =>
            return "SEK";

         when SGD =>
            return "SGD";

         when SHP =>
            return "SHP";

         when SLL =>
            return "SLL";

         when SOS =>
            return "SOS";

         when SPL =>
            return "SPL";

         when SRD =>
            return "SRD";

         when STD =>
            return "STD";

         when SVC =>
            return "SVC";

         when SYP =>
            return "SYP";

         when SZL =>
            return "SZL";

         when THB =>
            return "THB";

         when TJS =>
            return "TJS";

         when TMT =>
            return "TMT";

         when TND =>
            return "TND";

         when TOP =>
            return "TOP";

         when TRY =>
            return "TRY";

         when TTD =>
            return "TTD";

         when TVD =>
            return "TVD";

         when TWD =>
            return "TWD";

         when TZS =>
            return "TZS";

         when UAH =>
            return "UAH";

         when UGX =>
            return "UGX";

         when USD =>
            return "USD";

         when UYU =>
            return "UYU";

         when UZS =>
            return "UZS";

         when VEF =>
            return "VEF";

         when VND =>
            return "VND";

         when VUV =>
            return "VUV";

         when WST =>
            return "WST";

         when XAF =>
            return "XAF";

         when XCD =>
            return "XCD";

         when XDR =>
            return "XDR";

         when XOF =>
            return "XOF";

         when XPF =>
            return "XPF";

         when YER =>
            return "YER";

         when ZAR =>
            return "ZAR";

         when ZMW =>
            return "ZMW";

         when ZWD =>
            return "ZWD";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.NullableCurrency_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in NullableCurrency_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.NullableCurrency_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_NullableCurrency_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out NullableCurrency_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.NullableCurrency_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OauthAccessTokenRequestClientCredentials_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("grant_type", Value.Grant_Type);
      Into.Write_Entity ("scope", Value.Scope);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OauthAccessTokenRequestClientCredentials_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OauthAccessTokenRequestClientCredentials_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "grant_type", Value.Grant_Type);
      Swagger.Streams.Deserialize (Object, "scope", Value.Scope);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OauthAccessTokenRequestClientCredentials_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OauthAccessTokenRequestClientCredentials_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OauthAccessTokenRequestCode_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("grant_type", Value.Grant_Type);
      Into.Write_Entity ("code", Value.Code);
      Into.Write_Entity ("redirect_uri", Value.Redirect_Uri);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OauthAccessTokenRequestCode_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OauthAccessTokenRequestCode_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "grant_type", Value.Grant_Type);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "redirect_uri", Value.Redirect_Uri);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OauthAccessTokenRequestCode_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OauthAccessTokenRequestCode_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OauthAccessTokenRequestRefresh_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("grant_type", Value.Grant_Type);
      Into.Write_Entity ("refresh_token", Value.Refresh_Token);
      if not Value.Scope.Is_Null then
         Into.Write_Entity ("scope", Value.Scope);
      end if;
      if not Value.Refresh_On.Is_Null then
         Into.Write_Entity ("refresh_on", Value.Refresh_On);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OauthAccessTokenRequestRefresh_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OauthAccessTokenRequestRefresh_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "grant_type", Value.Grant_Type);
      Swagger.Streams.Deserialize (Object, "refresh_token", Value.Refresh_Token);
      Swagger.Streams.Deserialize (Object, "scope", Value.Scope);
      Swagger.Streams.Deserialize (Object, "refresh_on", Value.Refresh_On);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OauthAccessTokenRequestRefresh_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OauthAccessTokenRequestRefresh_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OauthAccessTokenResponseClientCredentials_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Response_Type.Is_Null then
         Into.Write_Entity ("response_type", Value.Response_Type);
      end if;
      Into.Write_Entity ("access_token", Value.Access_Token);
      Into.Write_Entity ("token_type", Value.Token_Type);
      Into.Write_Entity ("expires_in", Value.Expires_In);
      Into.Write_Entity ("scope", Value.Scope);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OauthAccessTokenResponseClientCredentials_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OauthAccessTokenResponseClientCredentials_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "response_type", Value.Response_Type);
      Swagger.Streams.Deserialize (Object, "access_token", Value.Access_Token);
      Swagger.Streams.Deserialize (Object, "token_type", Value.Token_Type);
      Swagger.Streams.Deserialize (Object, "expires_in", Value.Expires_In);
      Swagger.Streams.Deserialize (Object, "scope", Value.Scope);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OauthAccessTokenResponseClientCredentials_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OauthAccessTokenResponseClientCredentials_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OauthAccessTokenResponseCode_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Response_Type.Is_Null then
         Into.Write_Entity ("response_type", Value.Response_Type);
      end if;
      Into.Write_Entity ("access_token", Value.Access_Token);
      Into.Write_Entity ("token_type", Value.Token_Type);
      Into.Write_Entity ("expires_in", Value.Expires_In);
      Into.Write_Entity ("scope", Value.Scope);
      Into.Write_Entity ("refresh_token", Value.Refresh_Token);
      Into.Write_Entity ("refresh_token_expires_in", Value.Refresh_Token_Expires_In);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OauthAccessTokenResponseCode_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OauthAccessTokenResponseCode_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "response_type", Value.Response_Type);
      Swagger.Streams.Deserialize (Object, "access_token", Value.Access_Token);
      Swagger.Streams.Deserialize (Object, "token_type", Value.Token_Type);
      Swagger.Streams.Deserialize (Object, "expires_in", Value.Expires_In);
      Swagger.Streams.Deserialize (Object, "scope", Value.Scope);
      Swagger.Streams.Deserialize (Object, "refresh_token", Value.Refresh_Token);
      Swagger.Streams.Deserialize (Object, "refresh_token_expires_in", Value.Refresh_Token_Expires_In);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OauthAccessTokenResponseCode_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OauthAccessTokenResponseCode_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OauthAccessTokenResponseEverlastingRefresh_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Response_Type.Is_Null then
         Into.Write_Entity ("response_type", Value.Response_Type);
      end if;
      Into.Write_Entity ("access_token", Value.Access_Token);
      Into.Write_Entity ("token_type", Value.Token_Type);
      Into.Write_Entity ("expires_in", Value.Expires_In);
      Into.Write_Entity ("scope", Value.Scope);
      Into.Write_Entity ("refresh_token", Value.Refresh_Token);
      Into.Write_Entity ("refresh_token_expires_in", Value.Refresh_Token_Expires_In);
      Into.Write_Entity ("refresh_token_expires_at", Value.Refresh_Token_Expires_At);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OauthAccessTokenResponseEverlastingRefresh_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OauthAccessTokenResponseEverlastingRefresh_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "response_type", Value.Response_Type);
      Swagger.Streams.Deserialize (Object, "access_token", Value.Access_Token);
      Swagger.Streams.Deserialize (Object, "token_type", Value.Token_Type);
      Swagger.Streams.Deserialize (Object, "expires_in", Value.Expires_In);
      Swagger.Streams.Deserialize (Object, "scope", Value.Scope);
      Swagger.Streams.Deserialize (Object, "refresh_token", Value.Refresh_Token);
      Swagger.Streams.Deserialize (Object, "refresh_token_expires_in", Value.Refresh_Token_Expires_In);
      Swagger.Streams.Deserialize (Object, "refresh_token_expires_at", Value.Refresh_Token_Expires_At);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OauthAccessTokenResponseEverlastingRefresh_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OauthAccessTokenResponseEverlastingRefresh_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OauthAccessTokenResponseIntegrationRefresh_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Response_Type.Is_Null then
         Into.Write_Entity ("response_type", Value.Response_Type);
      end if;
      Into.Write_Entity ("access_token", Value.Access_Token);
      Into.Write_Entity ("token_type", Value.Token_Type);
      Into.Write_Entity ("expires_in", Value.Expires_In);
      Into.Write_Entity ("scope", Value.Scope);
      Into.Write_Entity ("refresh_token", Value.Refresh_Token);
      Into.Write_Entity ("refresh_token_expires_in", Value.Refresh_Token_Expires_In);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OauthAccessTokenResponseIntegrationRefresh_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OauthAccessTokenResponseIntegrationRefresh_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "response_type", Value.Response_Type);
      Swagger.Streams.Deserialize (Object, "access_token", Value.Access_Token);
      Swagger.Streams.Deserialize (Object, "token_type", Value.Token_Type);
      Swagger.Streams.Deserialize (Object, "expires_in", Value.Expires_In);
      Swagger.Streams.Deserialize (Object, "scope", Value.Scope);
      Swagger.Streams.Deserialize (Object, "refresh_token", Value.Refresh_Token);
      Swagger.Streams.Deserialize (Object, "refresh_token_expires_in", Value.Refresh_Token_Expires_In);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OauthAccessTokenResponseIntegrationRefresh_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OauthAccessTokenResponseIntegrationRefresh_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OauthAccessTokenResponseRefresh_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Response_Type.Is_Null then
         Into.Write_Entity ("response_type", Value.Response_Type);
      end if;
      Into.Write_Entity ("access_token", Value.Access_Token);
      Into.Write_Entity ("token_type", Value.Token_Type);
      Into.Write_Entity ("expires_in", Value.Expires_In);
      Into.Write_Entity ("scope", Value.Scope);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OauthAccessTokenResponseRefresh_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OauthAccessTokenResponseRefresh_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "response_type", Value.Response_Type);
      Swagger.Streams.Deserialize (Object, "access_token", Value.Access_Token);
      Swagger.Streams.Deserialize (Object, "token_type", Value.Token_Type);
      Swagger.Streams.Deserialize (Object, "expires_in", Value.Expires_In);
      Swagger.Streams.Deserialize (Object, "scope", Value.Scope);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OauthAccessTokenResponseRefresh_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OauthAccessTokenResponseRefresh_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OauthAccessTokenResponse_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Response_Type.Is_Null then
         Into.Write_Entity ("response_type", Value.Response_Type);
      end if;
      Into.Write_Entity ("access_token", Value.Access_Token);
      Into.Write_Entity ("token_type", Value.Token_Type);
      Into.Write_Entity ("expires_in", Value.Expires_In);
      Into.Write_Entity ("scope", Value.Scope);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OauthAccessTokenResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OauthAccessTokenResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "response_type", Value.Response_Type);
      Swagger.Streams.Deserialize (Object, "access_token", Value.Access_Token);
      Swagger.Streams.Deserialize (Object, "token_type", Value.Token_Type);
      Swagger.Streams.Deserialize (Object, "expires_in", Value.Expires_In);
      Swagger.Streams.Deserialize (Object, "scope", Value.Scope);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OauthAccessTokenResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OauthAccessTokenResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ObjectiveType_Type (Value : in String) return .Models.ObjectiveType_Type is
   begin
      if Value = "AWARENESS" then
         return AWARENESS;
      end if;
      if Value = "CONSIDERATION" then
         return CONSIDERATION;
      end if;
      if Value = "VIDEO_VIEW" then
         return VIDEO_VIEW;
      end if;
      if Value = "WEB_CONVERSION" then
         return WEB_CONVERSION;
      end if;
      if Value = "CATALOG_SALES" then
         return CATALOG_SALES;
      end if;
      if Value = "WEB_SESSIONS" then
         return WEB_SESSIONS;
      end if;
      if Value = "VIDEO_COMPLETION" then
         return VIDEO_COMPLETION;
      end if;
      raise Constraint_Error;
   end To_ObjectiveType_Type;

   function To_String (Value : in .Models.ObjectiveType_Type) return String is
   begin
      case Value is
         when AWARENESS =>
            return "AWARENESS";

         when CONSIDERATION =>
            return "CONSIDERATION";

         when VIDEO_VIEW =>
            return "VIDEO_VIEW";

         when WEB_CONVERSION =>
            return "WEB_CONVERSION";

         when CATALOG_SALES =>
            return "CATALOG_SALES";

         when WEB_SESSIONS =>
            return "WEB_SESSIONS";

         when VIDEO_COMPLETION =>
            return "VIDEO_COMPLETION";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ObjectiveType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ObjectiveType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ObjectiveType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ObjectiveType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ObjectiveType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ObjectiveType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OperationType_Type (Value : in String) return .Models.OperationType_Type is
   begin
      if Value = "SHARE" then
         return SHARE;
      end if;
      if Value = "REVOKE" then
         return REVOKE;
      end if;
      raise Constraint_Error;
   end To_OperationType_Type;

   function To_String (Value : in .Models.OperationType_Type) return String is
   begin
      case Value is
         when SHARE =>
            return "SHARE";

         when REVOKE =>
            return "REVOKE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OperationType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OperationType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OperationType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OperationType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OperationType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OperationType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OptimizationGoalMetadataConversionTagV3GoalMetadataAttributionWindows_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Click_Window_Days.Is_Null then
         Into.Write_Entity ("click_window_days", Value.Click_Window_Days);
      end if;
      if not Value.Engagement_Window_Days.Is_Null then
         Into.Write_Entity ("engagement_window_days", Value.Engagement_Window_Days);
      end if;
      if not Value.View_Window_Days.Is_Null then
         Into.Write_Entity ("view_window_days", Value.View_Window_Days);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OptimizationGoalMetadataConversionTagV3GoalMetadataAttributionWindows_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OptimizationGoalMetadataConversionTagV3GoalMetadataAttributionWindows_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "click_window_days", Value.Click_Window_Days);
      Swagger.Streams.Deserialize (Object, "engagement_window_days", Value.Engagement_Window_Days);
      Swagger.Streams.Deserialize (Object, "view_window_days", Value.View_Window_Days);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OptimizationGoalMetadataConversionTagV3GoalMetadataAttributionWindows_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OptimizationGoalMetadataConversionTagV3GoalMetadataAttributionWindows_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OptimizationGoalMetadataFrequencyGoalMetadata_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Frequency.Is_Null then
         Into.Write_Entity ("frequency", Value.Frequency);
      end if;
      if not Value.Timerange.Is_Null then
         Into.Write_Entity ("timerange", Value.Timerange);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OptimizationGoalMetadataFrequencyGoalMetadata_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OptimizationGoalMetadataFrequencyGoalMetadata_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "frequency", Value.Frequency);
      Swagger.Streams.Deserialize (Object, "timerange", Value.Timerange);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OptimizationGoalMetadataFrequencyGoalMetadata_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OptimizationGoalMetadataFrequencyGoalMetadata_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OptimizationGoalMetadataScrollupGoalMetadata_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("scrollup_goal_value_in_micro_currency", Value.Scrollup_Goal_Value_In_Micro_Currency);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OptimizationGoalMetadataScrollupGoalMetadata_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OptimizationGoalMetadataScrollupGoalMetadata_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "scrollup_goal_value_in_micro_currency", Value.Scrollup_Goal_Value_In_Micro_Currency);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OptimizationGoalMetadataScrollupGoalMetadata_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OptimizationGoalMetadataScrollupGoalMetadata_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderLineError_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("data", Value.Data);
      Serialize (Into, "error_messages", Value.Error_Messages);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderLineError_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderLineError_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "data", Value.Data);
      Swagger.Streams.Deserialize (Object, "error_messages", Value.Error_Messages);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderLineError_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderLineError_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrderLinePaidType_Type (Value : in String) return .Models.OrderLinePaidType_Type is
   begin
      if Value = "PAID" then
         return PAID;
      end if;
      if Value = "BONUS" then
         return BONUS;
      end if;
      if Value = "MAKE_GOOD" then
         return MAKE_GOOD;
      end if;
      if Value = "TEST" then
         return TEST;
      end if;
      raise Constraint_Error;
   end To_OrderLinePaidType_Type;

   function To_String (Value : in .Models.OrderLinePaidType_Type) return String is
   begin
      case Value is
         when PAID =>
            return "PAID";

         when BONUS =>
            return "BONUS";

         when MAKE_GOOD =>
            return "MAKE_GOOD";

         when TEST =>
            return "TEST";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderLinePaidType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderLinePaidType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderLinePaidType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrderLinePaidType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderLinePaidType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderLinePaidType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderLineSingleResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("data", Value.Data);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderLineSingleResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderLineSingleResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "data", Value.Data);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderLineSingleResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderLineSingleResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrderLineStatus_Type (Value : in String) return .Models.OrderLineStatus_Type is
   begin
      if Value = "ACTIVE" then
         return ACTIVE;
      end if;
      if Value = "PAUSED" then
         return PAUSED;
      end if;
      if Value = "DELETED" then
         return DELETED;
      end if;
      raise Constraint_Error;
   end To_OrderLineStatus_Type;

   function To_String (Value : in .Models.OrderLineStatus_Type) return String is
   begin
      case Value is
         when ACTIVE =>
            return "ACTIVE";

         when PAUSED =>
            return "PAUSED";

         when DELETED =>
            return "DELETED";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderLineStatus_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderLineStatus_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderLineStatus_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrderLineStatus_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderLineStatus_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderLineStatus_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_PacingDeliveryType_Type (Value : in String) return .Models.PacingDeliveryType_Type is
   begin
      if Value = "STANDARD" then
         return STANDARD;
      end if;
      if Value = "ACCELERATED" then
         return ACCELERATED;
      end if;
      raise Constraint_Error;
   end To_PacingDeliveryType_Type;

   function To_String (Value : in .Models.PacingDeliveryType_Type) return String is
   begin
      case Value is
         when STANDARD =>
            return "STANDARD";

         when ACCELERATED =>
            return "ACCELERATED";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PacingDeliveryType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PacingDeliveryType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PacingDeliveryType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_PacingDeliveryType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PacingDeliveryType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PacingDeliveryType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_PartnerType_Type (Value : in String) return .Models.PartnerType_Type is
   begin
      if Value = "INTERNAL" then
         return INTERNAL;
      end if;
      if Value = "EXTERNAL" then
         return EXTERNAL;
      end if;
      raise Constraint_Error;
   end To_PartnerType_Type;

   function To_String (Value : in .Models.PartnerType_Type) return String is
   begin
      case Value is
         when INTERNAL =>
            return "INTERNAL";

         when EXTERNAL =>
            return "EXTERNAL";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PartnerType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PartnerType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PartnerType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_PartnerType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PartnerType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PartnerType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_PermissionsWithOwner_Type (Value : in String) return .Models.PermissionsWithOwner_Type is
   begin
      if Value = "ADMIN" then
         return ADMIN;
      end if;
      if Value = "ANALYST" then
         return ANALYST;
      end if;
      if Value = "FINANCE_MANAGER" then
         return FINANCE_MANAGER;
      end if;
      if Value = "AUDIENCE_MANAGER" then
         return AUDIENCE_MANAGER;
      end if;
      if Value = "CAMPAIGN_MANAGER" then
         return CAMPAIGN_MANAGER;
      end if;
      if Value = "CATALOGS_MANAGER" then
         return CATALOGS_MANAGER;
      end if;
      if Value = "CATALOGS_VIEWER" then
         return CATALOGS_VIEWER;
      end if;
      if Value = "PROFILE_PUBLISHER" then
         return PROFILE_PUBLISHER;
      end if;
      if Value = "OWNER" then
         return OWNER;
      end if;
      raise Constraint_Error;
   end To_PermissionsWithOwner_Type;

   function To_String (Value : in .Models.PermissionsWithOwner_Type) return String is
   begin
      case Value is
         when ADMIN =>
            return "ADMIN";

         when ANALYST =>
            return "ANALYST";

         when FINANCE_MANAGER =>
            return "FINANCE_MANAGER";

         when AUDIENCE_MANAGER =>
            return "AUDIENCE_MANAGER";

         when CAMPAIGN_MANAGER =>
            return "CAMPAIGN_MANAGER";

         when CATALOGS_MANAGER =>
            return "CATALOGS_MANAGER";

         when CATALOGS_VIEWER =>
            return "CATALOGS_VIEWER";

         when PROFILE_PUBLISHER =>
            return "PROFILE_PUBLISHER";

         when OWNER =>
            return "OWNER";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PermissionsWithOwner_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PermissionsWithOwner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PermissionsWithOwner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_PermissionsWithOwner_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PermissionsWithOwner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PermissionsWithOwner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_Permissions_Type (Value : in String) return .Models.Permissions_Type is
   begin
      if Value = "ADMIN" then
         return ADMIN;
      end if;
      if Value = "ANALYST" then
         return ANALYST;
      end if;
      if Value = "FINANCE_MANAGER" then
         return FINANCE_MANAGER;
      end if;
      if Value = "AUDIENCE_MANAGER" then
         return AUDIENCE_MANAGER;
      end if;
      if Value = "CAMPAIGN_MANAGER" then
         return CAMPAIGN_MANAGER;
      end if;
      if Value = "CATALOGS_MANAGER" then
         return CATALOGS_MANAGER;
      end if;
      if Value = "PROFILE_PUBLISHER" then
         return PROFILE_PUBLISHER;
      end if;
      raise Constraint_Error;
   end To_Permissions_Type;

   function To_String (Value : in .Models.Permissions_Type) return String is
   begin
      case Value is
         when ADMIN =>
            return "ADMIN";

         when ANALYST =>
            return "ANALYST";

         when FINANCE_MANAGER =>
            return "FINANCE_MANAGER";

         when AUDIENCE_MANAGER =>
            return "AUDIENCE_MANAGER";

         when CAMPAIGN_MANAGER =>
            return "CAMPAIGN_MANAGER";

         when CATALOGS_MANAGER =>
            return "CATALOGS_MANAGER";

         when PROFILE_PUBLISHER =>
            return "PROFILE_PUBLISHER";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Permissions_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Permissions_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Permissions_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_Permissions_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Permissions_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Permissions_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PinMediaSourceImageBase64_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("source_type", Value.Source_Type);
      Into.Write_Entity ("content_type", Value.Content_Type);
      Into.Write_Entity ("data", Value.Data);
      if not Value.Is_Standard.Is_Null then
         Into.Write_Entity ("is_standard", Value.Is_Standard);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PinMediaSourceImageBase64_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PinMediaSourceImageBase64_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "source_type", Value.Source_Type);
      Swagger.Streams.Deserialize (Object, "content_type", Value.Content_Type);
      Swagger.Streams.Deserialize (Object, "data", Value.Data);
      Swagger.Streams.Deserialize (Object, "is_standard", Value.Is_Standard);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PinMediaSourceImageBase64_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PinMediaSourceImageBase64_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PinMediaSourceImageURL_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("source_type", Value.Source_Type);
      Into.Write_Entity ("url", Value.Url);
      if not Value.Is_Standard.Is_Null then
         Into.Write_Entity ("is_standard", Value.Is_Standard);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PinMediaSourceImageURL_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PinMediaSourceImageURL_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "source_type", Value.Source_Type);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "is_standard", Value.Is_Standard);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PinMediaSourceImageURL_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PinMediaSourceImageURL_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PinMediaSourceImagesBase64ItemsInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Title.Is_Null then
         Into.Write_Entity ("title", Value.Title);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Link.Is_Null then
         Into.Write_Entity ("link", Value.Link);
      end if;
      Into.Write_Entity ("content_type", Value.Content_Type);
      Into.Write_Entity ("data", Value.Data);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PinMediaSourceImagesBase64ItemsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PinMediaSourceImagesBase64ItemsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "title", Value.Title);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "link", Value.Link);
      Swagger.Streams.Deserialize (Object, "content_type", Value.Content_Type);
      Swagger.Streams.Deserialize (Object, "data", Value.Data);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PinMediaSourceImagesBase64ItemsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PinMediaSourceImagesBase64ItemsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PinMediaSourceImagesURLItemsInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Title.Is_Null then
         Into.Write_Entity ("title", Value.Title);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Link.Is_Null then
         Into.Write_Entity ("link", Value.Link);
      end if;
      Into.Write_Entity ("url", Value.Url);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PinMediaSourceImagesURLItemsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PinMediaSourceImagesURLItemsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "title", Value.Title);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "link", Value.Link);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PinMediaSourceImagesURLItemsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PinMediaSourceImagesURLItemsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PinMediaSourcePinURL_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("source_type", Value.Source_Type);
      if not Value.Is_Affiliate_Link.Is_Null then
         Into.Write_Entity ("is_affiliate_link", Value.Is_Affiliate_Link);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PinMediaSourcePinURL_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PinMediaSourcePinURL_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "source_type", Value.Source_Type);
      Swagger.Streams.Deserialize (Object, "is_affiliate_link", Value.Is_Affiliate_Link);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PinMediaSourcePinURL_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PinMediaSourcePinURL_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PinMediaSourceVideoID_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("source_type", Value.Source_Type);
      if not Value.Cover_Image_Url.Is_Null then
         Into.Write_Entity ("cover_image_url", Value.Cover_Image_Url);
      end if;
      if not Value.Cover_Image_Content_Type.Is_Null then
         Into.Write_Entity ("cover_image_content_type", Value.Cover_Image_Content_Type);
      end if;
      if not Value.Cover_Image_Data.Is_Null then
         Into.Write_Entity ("cover_image_data", Value.Cover_Image_Data);
      end if;
      Into.Write_Entity ("media_id", Value.Media_Id);
      if not Value.Is_Standard.Is_Null then
         Into.Write_Entity ("is_standard", Value.Is_Standard);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PinMediaSourceVideoID_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PinMediaSourceVideoID_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "source_type", Value.Source_Type);
      Swagger.Streams.Deserialize (Object, "cover_image_url", Value.Cover_Image_Url);
      Swagger.Streams.Deserialize (Object, "cover_image_content_type", Value.Cover_Image_Content_Type);
      Swagger.Streams.Deserialize (Object, "cover_image_data", Value.Cover_Image_Data);
      Swagger.Streams.Deserialize (Object, "media_id", Value.Media_Id);
      Swagger.Streams.Deserialize (Object, "is_standard", Value.Is_Standard);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PinMediaSourceVideoID_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PinMediaSourceVideoID_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PinMediaWithImageAllOfImages_Type) is
   begin
      Into.Start_Entity (Name);
      if not Swagger.Is_Null (Value.P_150x_150) then
         Into.Write_Entity ("150x150", Value.P_150x_150);
      end if;
      if not Swagger.Is_Null (Value.P_400x_300) then
         Into.Write_Entity ("400x300", Value.P_400x_300);
      end if;
      if not Swagger.Is_Null (Value.P_600x) then
         Into.Write_Entity ("600x", Value.P_600x);
      end if;
      if not Swagger.Is_Null (Value.P_1200x) then
         Into.Write_Entity ("1200x", Value.P_1200x);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PinMediaWithImageAllOfImages_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PinMediaWithImageAllOfImages_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "150x150", Value.P_150x_150);
      Swagger.Streams.Deserialize (Object, "400x300", Value.P_400x_300);
      Swagger.Streams.Deserialize (Object, "600x", Value.P_600x);
      Swagger.Streams.Deserialize (Object, "1200x", Value.P_1200x);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PinMediaWithImageAllOfImages_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PinMediaWithImageAllOfImages_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PinMedia_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Media_Type.Is_Null then
         Into.Write_Entity ("media_type", Value.Media_Type);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PinMedia_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PinMedia_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "media_type", Value.Media_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PinMedia_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PinMedia_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_PinPromotionSummaryStatus_Type (Value : in String) return .Models.PinPromotionSummaryStatus_Type is
   begin
      if Value = "APPROVED" then
         return APPROVED;
      end if;
      if Value = "PAUSED" then
         return PAUSED;
      end if;
      if Value = "PENDING" then
         return PENDING;
      end if;
      if Value = "REJECTED" then
         return REJECTED;
      end if;
      if Value = "ADVERTISER_DISABLED" then
         return ADVERTISER_DISABLED;
      end if;
      if Value = "ARCHIVED" then
         return ARCHIVED;
      end if;
      if Value = "DRAFT" then
         return DRAFT;
      end if;
      if Value = "DELETED_DRAFT" then
         return DELETED_DRAFT;
      end if;
      raise Constraint_Error;
   end To_PinPromotionSummaryStatus_Type;

   function To_String (Value : in .Models.PinPromotionSummaryStatus_Type) return String is
   begin
      case Value is
         when APPROVED =>
            return "APPROVED";

         when PAUSED =>
            return "PAUSED";

         when PENDING =>
            return "PENDING";

         when REJECTED =>
            return "REJECTED";

         when ADVERTISER_DISABLED =>
            return "ADVERTISER_DISABLED";

         when ARCHIVED =>
            return "ARCHIVED";

         when DRAFT =>
            return "DRAFT";

         when DELETED_DRAFT =>
            return "DELETED_DRAFT";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PinPromotionSummaryStatus_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PinPromotionSummaryStatus_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PinPromotionSummaryStatus_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_PinPromotionSummaryStatus_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PinPromotionSummaryStatus_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PinPromotionSummaryStatus_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PinUpdateCarouselSlotsInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Title.Is_Null then
         Into.Write_Entity ("title", Value.Title);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Link.Is_Null then
         Into.Write_Entity ("link", Value.Link);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PinUpdateCarouselSlotsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PinUpdateCarouselSlotsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "title", Value.Title);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "link", Value.Link);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PinUpdateCarouselSlotsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PinUpdateCarouselSlotsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PinsAnalyticsMetricTypesParameterInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PinsAnalyticsMetricTypesParameterInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PinsAnalyticsMetricTypesParameterInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PinsAnalyticsMetricTypesParameterInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PinsAnalyticsMetricTypesParameterInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PinsSaveRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("board_id", Value.Board_Id);
      Into.Write_Entity ("board_section_id", Value.Board_Section_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PinsSaveRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PinsSaveRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "board_id", Value.Board_Id);
      Swagger.Streams.Deserialize (Object, "board_section_id", Value.Board_Section_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PinsSaveRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PinsSaveRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_PlacementGroupType_Type (Value : in String) return .Models.PlacementGroupType_Type is
   begin
      if Value = "ALL" then
         return ALL;
      end if;
      if Value = "SEARCH" then
         return SEARCH;
      end if;
      if Value = "BROWSE" then
         return BROWSE;
      end if;
      if Value = "OTHER" then
         return OTHER;
      end if;
      raise Constraint_Error;
   end To_PlacementGroupType_Type;

   function To_String (Value : in .Models.PlacementGroupType_Type) return String is
   begin
      case Value is
         when ALL =>
            return "ALL";

         when SEARCH =>
            return "SEARCH";

         when BROWSE =>
            return "BROWSE";

         when OTHER =>
            return "OTHER";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PlacementGroupType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PlacementGroupType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PlacementGroupType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_PlacementGroupType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PlacementGroupType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PlacementGroupType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PlacementMultipliers_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.PLACEMENT.Is_Null then
         Into.Write_Entity ("PLACEMENT", Value.PLACEMENT);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PlacementMultipliers_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PlacementMultipliers_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "PLACEMENT", Value.PLACEMENT);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PlacementMultipliers_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PlacementMultipliers_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ProductAvailabilityType_Type (Value : in String) return .Models.ProductAvailabilityType_Type is
   begin
      if Value = "IN_STOCK" then
         return IN_STOCK;
      end if;
      if Value = "OUT_OF_STOCK" then
         return OUT_OF_STOCK;
      end if;
      if Value = "PREORDER" then
         return PREORDER;
      end if;
      raise Constraint_Error;
   end To_ProductAvailabilityType_Type;

   function To_String (Value : in .Models.ProductAvailabilityType_Type) return String is
   begin
      case Value is
         when IN_STOCK =>
            return "IN_STOCK";

         when OUT_OF_STOCK =>
            return "OUT_OF_STOCK";

         when PREORDER =>
            return "PREORDER";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductAvailabilityType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductAvailabilityType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductAvailabilityType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ProductAvailabilityType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductAvailabilityType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductAvailabilityType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductGroupAnalyticsResponseInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("PRODUCT_GROUP_ID", Value.PRODUCT_GROUP_ID);
      if not Value.DATE.Is_Null then
         Into.Write_Entity ("DATE", Value.DATE);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductGroupAnalyticsResponseInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductGroupAnalyticsResponseInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "PRODUCT_GROUP_ID", Value.PRODUCT_GROUP_ID);
      Swagger.Streams.Deserialize (Object, "DATE", Value.DATE);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductGroupAnalyticsResponseInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductGroupAnalyticsResponseInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductGroupReferenceFilter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("PRODUCT_GROUP", Value.PRODUCT_GROUP);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductGroupReferenceFilter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductGroupReferenceFilter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "PRODUCT_GROUP", Value.PRODUCT_GROUP);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductGroupReferenceFilter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductGroupReferenceFilter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ProductGroupSummaryStatus_Type (Value : in String) return .Models.ProductGroupSummaryStatus_Type is
   begin
      if Value = "RUNNING" then
         return RUNNING;
      end if;
      if Value = "PAUSED" then
         return PAUSED;
      end if;
      if Value = "EXCLUDED" then
         return EXCLUDED;
      end if;
      if Value = "ARCHIVED" then
         return ARCHIVED;
      end if;
      raise Constraint_Error;
   end To_ProductGroupSummaryStatus_Type;

   function To_String (Value : in .Models.ProductGroupSummaryStatus_Type) return String is
   begin
      case Value is
         when RUNNING =>
            return "RUNNING";

         when PAUSED =>
            return "PAUSED";

         when EXCLUDED =>
            return "EXCLUDED";

         when ARCHIVED =>
            return "ARCHIVED";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductGroupSummaryStatus_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductGroupSummaryStatus_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductGroupSummaryStatus_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ProductGroupSummaryStatus_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductGroupSummaryStatus_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductGroupSummaryStatus_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductType0Filter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("PRODUCT_TYPE_0", Value.PRODUCT_TYPE_0);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductType0Filter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductType0Filter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "PRODUCT_TYPE_0", Value.PRODUCT_TYPE_0);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductType0Filter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductType0Filter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductType1Filter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("PRODUCT_TYPE_1", Value.PRODUCT_TYPE_1);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductType1Filter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductType1Filter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "PRODUCT_TYPE_1", Value.PRODUCT_TYPE_1);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductType1Filter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductType1Filter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductType2Filter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("PRODUCT_TYPE_2", Value.PRODUCT_TYPE_2);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductType2Filter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductType2Filter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "PRODUCT_TYPE_2", Value.PRODUCT_TYPE_2);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductType2Filter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductType2Filter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductType3Filter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("PRODUCT_TYPE_3", Value.PRODUCT_TYPE_3);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductType3Filter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductType3Filter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "PRODUCT_TYPE_3", Value.PRODUCT_TYPE_3);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductType3Filter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductType3Filter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductType4Filter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("PRODUCT_TYPE_4", Value.PRODUCT_TYPE_4);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductType4Filter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductType4Filter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "PRODUCT_TYPE_4", Value.PRODUCT_TYPE_4);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductType4Filter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductType4Filter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.QuizPinOption_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "id", Value.Id);
      if not Value.Text.Is_Null then
         Into.Write_Entity ("text", Value.Text);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in QuizPinOption_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.QuizPinOption_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "text", Value.Text);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out QuizPinOption_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.QuizPinOption_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.QuizPinResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Organic_Pin_Id.Is_Null then
         Into.Write_Entity ("organic_pin_id", Value.Organic_Pin_Id);
      end if;
      if not Value.Android_Deep_Link.Is_Null then
         Into.Write_Entity ("android_deep_link", Value.Android_Deep_Link);
      end if;
      if not Value.Ios_Deep_Link.Is_Null then
         Into.Write_Entity ("ios_deep_link", Value.Ios_Deep_Link);
      end if;
      if not Value.Destination_Url.Is_Null then
         Into.Write_Entity ("destination_url", Value.Destination_Url);
      end if;
      Serialize (Into, "result_id", Value.Result_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in QuizPinResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.QuizPinResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "organic_pin_id", Value.Organic_Pin_Id);
      Swagger.Streams.Deserialize (Object, "android_deep_link", Value.Android_Deep_Link);
      Swagger.Streams.Deserialize (Object, "ios_deep_link", Value.Ios_Deep_Link);
      Swagger.Streams.Deserialize (Object, "destination_url", Value.Destination_Url);
      Swagger.Streams.Deserialize (Object, "result_id", Value.Result_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out QuizPinResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.QuizPinResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.RelatedTermsRelatedTermsListInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Term.Is_Null then
         Into.Write_Entity ("term", Value.Term);
      end if;
      Serialize (Into, "related_terms", Value.Related_Terms);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RelatedTermsRelatedTermsListInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.RelatedTermsRelatedTermsListInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "term", Value.Term);
      Swagger.Streams.Deserialize (Object, "related_terms", Value.Related_Terms);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out RelatedTermsRelatedTermsListInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.RelatedTermsRelatedTermsListInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ReportingColumnAsync_Type (Value : in String) return .Models.ReportingColumnAsync_Type is
   begin
      if Value = "SPEND_IN_MICRO_DOLLAR" then
         return SPEND_IN_MICRO_DOLLAR;
      end if;
      if Value = "PAID_IMPRESSION" then
         return PAID_IMPRESSION;
      end if;
      if Value = "SPEND_IN_DOLLAR" then
         return SPEND_IN_DOLLAR;
      end if;
      if Value = "CPC_IN_MICRO_DOLLAR" then
         return CPC_IN_MICRO_DOLLAR;
      end if;
      if Value = "ECPC_IN_MICRO_DOLLAR" then
         return ECPC_IN_MICRO_DOLLAR;
      end if;
      if Value = "ECPC_IN_DOLLAR" then
         return ECPC_IN_DOLLAR;
      end if;
      if Value = "CTR" then
         return CTR;
      end if;
      if Value = "ECTR" then
         return ECTR;
      end if;
      if Value = "OUTBOUND_CTR" then
         return OUTBOUND_CTR;
      end if;
      if Value = "COST_PER_OUTBOUND_CLICK" then
         return COST_PER_OUTBOUND_CLICK;
      end if;
      if Value = "CAMPAIGN_NAME" then
         return CAMPAIGN_NAME;
      end if;
      if Value = "CAMPAIGN_STATUS" then
         return CAMPAIGN_STATUS;
      end if;
      if Value = "PIN_PROMOTION_STATUS" then
         return PIN_PROMOTION_STATUS;
      end if;
      if Value = "AD_STATUS" then
         return AD_STATUS;
      end if;
      if Value = "PIN_ID" then
         return PIN_ID;
      end if;
      if Value = "TOTAL_ENGAGEMENT" then
         return TOTAL_ENGAGEMENT;
      end if;
      if Value = "ENGAGEMENT_1" then
         return ENGAGEMENT_1;
      end if;
      if Value = "ENGAGEMENT_2" then
         return ENGAGEMENT_2;
      end if;
      if Value = "ECPE_IN_DOLLAR" then
         return ECPE_IN_DOLLAR;
      end if;
      if Value = "ENGAGEMENT_RATE" then
         return ENGAGEMENT_RATE;
      end if;
      if Value = "EENGAGEMENT_RATE" then
         return EENGAGEMENT_RATE;
      end if;
      if Value = "ECPM_IN_MICRO_DOLLAR" then
         return ECPM_IN_MICRO_DOLLAR;
      end if;
      if Value = "REPIN_RATE" then
         return REPIN_RATE;
      end if;
      if Value = "CTR_2" then
         return CTR_2;
      end if;
      if Value = "CAMPAIGN_ID" then
         return CAMPAIGN_ID;
      end if;
      if Value = "ADVERTISER_ID" then
         return ADVERTISER_ID;
      end if;
      if Value = "AD_ACCOUNT_ID" then
         return AD_ACCOUNT_ID;
      end if;
      if Value = "PIN_PROMOTION_ID" then
         return PIN_PROMOTION_ID;
      end if;
      if Value = "AD_ID" then
         return AD_ID;
      end if;
      if Value = "AD_GROUP_ID" then
         return AD_GROUP_ID;
      end if;
      if Value = "CAMPAIGN_ENTITY_STATUS" then
         return CAMPAIGN_ENTITY_STATUS;
      end if;
      if Value = "CAMPAIGN_MANAGED_STATUS" then
         return CAMPAIGN_MANAGED_STATUS;
      end if;
      if Value = "CAMPAIGN_OBJECTIVE_TYPE" then
         return CAMPAIGN_OBJECTIVE_TYPE;
      end if;
      if Value = "CPM_IN_MICRO_DOLLAR" then
         return CPM_IN_MICRO_DOLLAR;
      end if;
      if Value = "CPM_IN_DOLLAR" then
         return CPM_IN_DOLLAR;
      end if;
      if Value = "AD_GROUP_NAME" then
         return AD_GROUP_NAME;
      end if;
      if Value = "AD_GROUP_STATUS" then
         return AD_GROUP_STATUS;
      end if;
      if Value = "AD_GROUP_ENTITY_STATUS" then
         return AD_GROUP_ENTITY_STATUS;
      end if;
      if Value = "PRODUCT_GROUP_ID" then
         return PRODUCT_GROUP_ID;
      end if;
      if Value = "PRODUCT_GROUP_STATUS" then
         return PRODUCT_GROUP_STATUS;
      end if;
      if Value = "ORDER_LINE_ID" then
         return ORDER_LINE_ID;
      end if;
      if Value = "ORDER_LINE_NAME" then
         return ORDER_LINE_NAME;
      end if;
      if Value = "CLICKTHROUGH_1" then
         return CLICKTHROUGH_1;
      end if;
      if Value = "REPIN_1" then
         return REPIN_1;
      end if;
      if Value = "IMPRESSION_1" then
         return IMPRESSION_1;
      end if;
      if Value = "IMPRESSION_1_GROSS" then
         return IMPRESSION_1_GROSS;
      end if;
      if Value = "CLICKTHROUGH_1_GROSS" then
         return CLICKTHROUGH_1_GROSS;
      end if;
      if Value = "OUTBOUND_CLICK_1" then
         return OUTBOUND_CLICK_1;
      end if;
      if Value = "CLICKTHROUGH_2" then
         return CLICKTHROUGH_2;
      end if;
      if Value = "REPIN_2" then
         return REPIN_2;
      end if;
      if Value = "IMPRESSION_2" then
         return IMPRESSION_2;
      end if;
      if Value = "OUTBOUND_CLICK_2" then
         return OUTBOUND_CLICK_2;
      end if;
      if Value = "TOTAL_CLICKTHROUGH" then
         return TOTAL_CLICKTHROUGH;
      end if;
      if Value = "TOTAL_IMPRESSION" then
         return TOTAL_IMPRESSION;
      end if;
      if Value = "TOTAL_IMPRESSION_USER" then
         return TOTAL_IMPRESSION_USER;
      end if;
      if Value = "TOTAL_IMPRESSION_FREQUENCY" then
         return TOTAL_IMPRESSION_FREQUENCY;
      end if;
      if Value = "COST_PER_OUTBOUND_CLICK_IN_DOLLAR" then
         return COST_PER_OUTBOUND_CLICK_IN_DOLLAR;
      end if;
      if Value = "TOTAL_ENGAGEMENT_PAGE_VISIT" then
         return TOTAL_ENGAGEMENT_PAGE_VISIT;
      end if;
      if Value = "TOTAL_ENGAGEMENT_SIGNUP" then
         return TOTAL_ENGAGEMENT_SIGNUP;
      end if;
      if Value = "TOTAL_ENGAGEMENT_CHECKOUT" then
         return TOTAL_ENGAGEMENT_CHECKOUT;
      end if;
      if Value = "TOTAL_ENGAGEMENT_CUSTOM" then
         return TOTAL_ENGAGEMENT_CUSTOM;
      end if;
      if Value = "TOTAL_ENGAGEMENT_ADD_TO_CART" then
         return TOTAL_ENGAGEMENT_ADD_TO_CART;
      end if;
      if Value = "TOTAL_ENGAGEMENT_LEAD" then
         return TOTAL_ENGAGEMENT_LEAD;
      end if;
      if Value = "TOTAL_ENGAGEMENT_SEARCH" then
         return TOTAL_ENGAGEMENT_SEARCH;
      end if;
      if Value = "TOTAL_ENGAGEMENT_WATCH_VIDEO" then
         return TOTAL_ENGAGEMENT_WATCH_VIDEO;
      end if;
      if Value = "TOTAL_ENGAGEMENT_VIEW_CATEGORY" then
         return TOTAL_ENGAGEMENT_VIEW_CATEGORY;
      end if;
      if Value = "TOTAL_ENGAGEMENT_APP_INSTALL" then
         return TOTAL_ENGAGEMENT_APP_INSTALL;
      end if;
      if Value = "TOTAL_ENGAGEMENT_UNKNOWN" then
         return TOTAL_ENGAGEMENT_UNKNOWN;
      end if;
      if Value = "TOTAL_CLICK_PAGE_VISIT" then
         return TOTAL_CLICK_PAGE_VISIT;
      end if;
      if Value = "TOTAL_CLICK_SIGNUP" then
         return TOTAL_CLICK_SIGNUP;
      end if;
      if Value = "TOTAL_CLICK_CHECKOUT" then
         return TOTAL_CLICK_CHECKOUT;
      end if;
      if Value = "TOTAL_CLICK_CUSTOM" then
         return TOTAL_CLICK_CUSTOM;
      end if;
      if Value = "TOTAL_CLICK_ADD_TO_CART" then
         return TOTAL_CLICK_ADD_TO_CART;
      end if;
      if Value = "TOTAL_CLICK_LEAD" then
         return TOTAL_CLICK_LEAD;
      end if;
      if Value = "TOTAL_CLICK_SEARCH" then
         return TOTAL_CLICK_SEARCH;
      end if;
      if Value = "TOTAL_CLICK_WATCH_VIDEO" then
         return TOTAL_CLICK_WATCH_VIDEO;
      end if;
      if Value = "TOTAL_CLICK_VIEW_CATEGORY" then
         return TOTAL_CLICK_VIEW_CATEGORY;
      end if;
      if Value = "TOTAL_CLICK_APP_INSTALL" then
         return TOTAL_CLICK_APP_INSTALL;
      end if;
      if Value = "TOTAL_CLICK_UNKNOWN" then
         return TOTAL_CLICK_UNKNOWN;
      end if;
      if Value = "TOTAL_VIEW_PAGE_VISIT" then
         return TOTAL_VIEW_PAGE_VISIT;
      end if;
      if Value = "TOTAL_VIEW_SIGNUP" then
         return TOTAL_VIEW_SIGNUP;
      end if;
      if Value = "TOTAL_VIEW_CHECKOUT" then
         return TOTAL_VIEW_CHECKOUT;
      end if;
      if Value = "TOTAL_VIEW_CUSTOM" then
         return TOTAL_VIEW_CUSTOM;
      end if;
      if Value = "TOTAL_VIEW_ADD_TO_CART" then
         return TOTAL_VIEW_ADD_TO_CART;
      end if;
      if Value = "TOTAL_VIEW_LEAD" then
         return TOTAL_VIEW_LEAD;
      end if;
      if Value = "TOTAL_VIEW_SEARCH" then
         return TOTAL_VIEW_SEARCH;
      end if;
      if Value = "TOTAL_VIEW_WATCH_VIDEO" then
         return TOTAL_VIEW_WATCH_VIDEO;
      end if;
      if Value = "TOTAL_VIEW_VIEW_CATEGORY" then
         return TOTAL_VIEW_VIEW_CATEGORY;
      end if;
      if Value = "TOTAL_VIEW_APP_INSTALL" then
         return TOTAL_VIEW_APP_INSTALL;
      end if;
      if Value = "TOTAL_VIEW_UNKNOWN" then
         return TOTAL_VIEW_UNKNOWN;
      end if;
      if Value = "TOTAL_CONVERSIONS" then
         return TOTAL_CONVERSIONS;
      end if;
      if Value = "TOTAL_ENGAGEMENT_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_ENGAGEMENT_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_ENGAGEMENT_CUSTOM_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_ENGAGEMENT_CUSTOM_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_ENGAGEMENT_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_ENGAGEMENT_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_ENGAGEMENT_LEAD_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_ENGAGEMENT_LEAD_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_ENGAGEMENT_SEARCH_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_ENGAGEMENT_SEARCH_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_ENGAGEMENT_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_ENGAGEMENT_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_ENGAGEMENT_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_ENGAGEMENT_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_ENGAGEMENT_APP_INSTALL_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_ENGAGEMENT_APP_INSTALL_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_CLICK_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_CLICK_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_CLICK_CUSTOM_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_CLICK_CUSTOM_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_CLICK_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_CLICK_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_CLICK_LEAD_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_CLICK_LEAD_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_CLICK_SEARCH_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_CLICK_SEARCH_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_CLICK_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_CLICK_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_CLICK_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_CLICK_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_CLICK_APP_INSTALL_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_CLICK_APP_INSTALL_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_VIEW_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_VIEW_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_VIEW_CUSTOM_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_VIEW_CUSTOM_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_VIEW_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_VIEW_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_VIEW_LEAD_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_VIEW_LEAD_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_VIEW_SEARCH_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_VIEW_SEARCH_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_VIEW_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_VIEW_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_VIEW_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_VIEW_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_VIEW_APP_INSTALL_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_VIEW_APP_INSTALL_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_CONVERSIONS_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_CONVERSIONS_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_ENGAGEMENT_PAGE_VISIT_QUANTITY" then
         return TOTAL_ENGAGEMENT_PAGE_VISIT_QUANTITY;
      end if;
      if Value = "TOTAL_ENGAGEMENT_SIGNUP_QUANTITY" then
         return TOTAL_ENGAGEMENT_SIGNUP_QUANTITY;
      end if;
      if Value = "TOTAL_ENGAGEMENT_CHECKOUT_QUANTITY" then
         return TOTAL_ENGAGEMENT_CHECKOUT_QUANTITY;
      end if;
      if Value = "TOTAL_ENGAGEMENT_CUSTOM_QUANTITY" then
         return TOTAL_ENGAGEMENT_CUSTOM_QUANTITY;
      end if;
      if Value = "TOTAL_ENGAGEMENT_ADD_TO_CART_QUANTITY" then
         return TOTAL_ENGAGEMENT_ADD_TO_CART_QUANTITY;
      end if;
      if Value = "TOTAL_ENGAGEMENT_LEAD_QUANTITY" then
         return TOTAL_ENGAGEMENT_LEAD_QUANTITY;
      end if;
      if Value = "TOTAL_ENGAGEMENT_SEARCH_QUANTITY" then
         return TOTAL_ENGAGEMENT_SEARCH_QUANTITY;
      end if;
      if Value = "TOTAL_ENGAGEMENT_WATCH_VIDEO_QUANTITY" then
         return TOTAL_ENGAGEMENT_WATCH_VIDEO_QUANTITY;
      end if;
      if Value = "TOTAL_ENGAGEMENT_VIEW_CATEGORY_QUANTITY" then
         return TOTAL_ENGAGEMENT_VIEW_CATEGORY_QUANTITY;
      end if;
      if Value = "TOTAL_ENGAGEMENT_UNKNOWN_QUANTITY" then
         return TOTAL_ENGAGEMENT_UNKNOWN_QUANTITY;
      end if;
      if Value = "TOTAL_CLICK_PAGE_VISIT_QUANTITY" then
         return TOTAL_CLICK_PAGE_VISIT_QUANTITY;
      end if;
      if Value = "TOTAL_CLICK_SIGNUP_QUANTITY" then
         return TOTAL_CLICK_SIGNUP_QUANTITY;
      end if;
      if Value = "TOTAL_CLICK_CHECKOUT_QUANTITY" then
         return TOTAL_CLICK_CHECKOUT_QUANTITY;
      end if;
      if Value = "TOTAL_CLICK_CUSTOM_QUANTITY" then
         return TOTAL_CLICK_CUSTOM_QUANTITY;
      end if;
      if Value = "TOTAL_CLICK_ADD_TO_CART_QUANTITY" then
         return TOTAL_CLICK_ADD_TO_CART_QUANTITY;
      end if;
      if Value = "TOTAL_CLICK_LEAD_QUANTITY" then
         return TOTAL_CLICK_LEAD_QUANTITY;
      end if;
      if Value = "TOTAL_CLICK_SEARCH_QUANTITY" then
         return TOTAL_CLICK_SEARCH_QUANTITY;
      end if;
      if Value = "TOTAL_CLICK_WATCH_VIDEO_QUANTITY" then
         return TOTAL_CLICK_WATCH_VIDEO_QUANTITY;
      end if;
      if Value = "TOTAL_CLICK_VIEW_CATEGORY_QUANTITY" then
         return TOTAL_CLICK_VIEW_CATEGORY_QUANTITY;
      end if;
      if Value = "TOTAL_CLICK_UNKNOWN_QUANTITY" then
         return TOTAL_CLICK_UNKNOWN_QUANTITY;
      end if;
      if Value = "TOTAL_VIEW_PAGE_VISIT_QUANTITY" then
         return TOTAL_VIEW_PAGE_VISIT_QUANTITY;
      end if;
      if Value = "TOTAL_VIEW_SIGNUP_QUANTITY" then
         return TOTAL_VIEW_SIGNUP_QUANTITY;
      end if;
      if Value = "TOTAL_VIEW_CHECKOUT_QUANTITY" then
         return TOTAL_VIEW_CHECKOUT_QUANTITY;
      end if;
      if Value = "TOTAL_VIEW_CUSTOM_QUANTITY" then
         return TOTAL_VIEW_CUSTOM_QUANTITY;
      end if;
      if Value = "TOTAL_VIEW_ADD_TO_CART_QUANTITY" then
         return TOTAL_VIEW_ADD_TO_CART_QUANTITY;
      end if;
      if Value = "TOTAL_VIEW_LEAD_QUANTITY" then
         return TOTAL_VIEW_LEAD_QUANTITY;
      end if;
      if Value = "TOTAL_VIEW_SEARCH_QUANTITY" then
         return TOTAL_VIEW_SEARCH_QUANTITY;
      end if;
      if Value = "TOTAL_VIEW_WATCH_VIDEO_QUANTITY" then
         return TOTAL_VIEW_WATCH_VIDEO_QUANTITY;
      end if;
      if Value = "TOTAL_VIEW_VIEW_CATEGORY_QUANTITY" then
         return TOTAL_VIEW_VIEW_CATEGORY_QUANTITY;
      end if;
      if Value = "TOTAL_VIEW_UNKNOWN_QUANTITY" then
         return TOTAL_VIEW_UNKNOWN_QUANTITY;
      end if;
      if Value = "TOTAL_CONVERSIONS_QUANTITY" then
         return TOTAL_CONVERSIONS_QUANTITY;
      end if;
      if Value = "TOTAL_WEB_SESSIONS" then
         return TOTAL_WEB_SESSIONS;
      end if;
      if Value = "WEB_SESSIONS_1" then
         return WEB_SESSIONS_1;
      end if;
      if Value = "WEB_SESSIONS_2" then
         return WEB_SESSIONS_2;
      end if;
      if Value = "ONSITE_CHECKOUTS_1" then
         return ONSITE_CHECKOUTS_1;
      end if;
      if Value = "PIN_PROMOTION_NAME" then
         return PIN_PROMOTION_NAME;
      end if;
      if Value = "AD_NAME" then
         return AD_NAME;
      end if;
      if Value = "CAMPAIGN_LIFETIME_SPEND_CAP" then
         return CAMPAIGN_LIFETIME_SPEND_CAP;
      end if;
      if Value = "CAMPAIGN_DAILY_SPEND_CAP" then
         return CAMPAIGN_DAILY_SPEND_CAP;
      end if;
      if Value = "TOTAL_PAGE_VISIT_DESKTOP_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_PAGE_VISIT_DESKTOP_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_PAGE_VISIT_DESKTOP_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_PAGE_VISIT_DESKTOP_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_PAGE_VISIT_DESKTOP_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_PAGE_VISIT_DESKTOP_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_PAGE_VISIT_MOBILE_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_PAGE_VISIT_MOBILE_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_PAGE_VISIT_MOBILE_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_PAGE_VISIT_MOBILE_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_PAGE_VISIT_MOBILE_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_PAGE_VISIT_MOBILE_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_PAGE_VISIT_TABLET_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_PAGE_VISIT_TABLET_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_PAGE_VISIT_TABLET_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_PAGE_VISIT_TABLET_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_PAGE_VISIT_TABLET_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_PAGE_VISIT_TABLET_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_SIGNUP_DESKTOP_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_SIGNUP_DESKTOP_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_SIGNUP_DESKTOP_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_SIGNUP_DESKTOP_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_SIGNUP_DESKTOP_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_SIGNUP_DESKTOP_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_SIGNUP_MOBILE_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_SIGNUP_MOBILE_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_SIGNUP_MOBILE_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_SIGNUP_MOBILE_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_SIGNUP_MOBILE_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_SIGNUP_MOBILE_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_SIGNUP_TABLET_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_SIGNUP_TABLET_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_SIGNUP_TABLET_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_SIGNUP_TABLET_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_SIGNUP_TABLET_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_SIGNUP_TABLET_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_CHECKOUT_DESKTOP_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_CHECKOUT_DESKTOP_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_CHECKOUT_DESKTOP_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_CHECKOUT_DESKTOP_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_CHECKOUT_DESKTOP_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_CHECKOUT_DESKTOP_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_CHECKOUT_MOBILE_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_CHECKOUT_MOBILE_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_CHECKOUT_MOBILE_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_CHECKOUT_MOBILE_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_CHECKOUT_MOBILE_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_CHECKOUT_MOBILE_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_CHECKOUT_TABLET_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_CHECKOUT_TABLET_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_CHECKOUT_TABLET_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_CHECKOUT_TABLET_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_CHECKOUT_TABLET_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_CHECKOUT_TABLET_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_CUSTOM_DESKTOP_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_CUSTOM_DESKTOP_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_CUSTOM_DESKTOP_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_CUSTOM_DESKTOP_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_CUSTOM_DESKTOP_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_CUSTOM_DESKTOP_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_CUSTOM_MOBILE_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_CUSTOM_MOBILE_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_CUSTOM_MOBILE_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_CUSTOM_MOBILE_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_CUSTOM_MOBILE_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_CUSTOM_MOBILE_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_CUSTOM_TABLET_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_CUSTOM_TABLET_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_CUSTOM_TABLET_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_CUSTOM_TABLET_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_CUSTOM_TABLET_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_CUSTOM_TABLET_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_ADD_TO_CART_DESKTOP_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_ADD_TO_CART_DESKTOP_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_ADD_TO_CART_DESKTOP_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_ADD_TO_CART_DESKTOP_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_ADD_TO_CART_DESKTOP_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_ADD_TO_CART_DESKTOP_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_ADD_TO_CART_MOBILE_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_ADD_TO_CART_MOBILE_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_ADD_TO_CART_MOBILE_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_ADD_TO_CART_MOBILE_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_ADD_TO_CART_MOBILE_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_ADD_TO_CART_MOBILE_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_ADD_TO_CART_TABLET_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_ADD_TO_CART_TABLET_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_ADD_TO_CART_TABLET_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_ADD_TO_CART_TABLET_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_ADD_TO_CART_TABLET_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_ADD_TO_CART_TABLET_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_LEAD_DESKTOP_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_LEAD_DESKTOP_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_LEAD_DESKTOP_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_LEAD_DESKTOP_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_LEAD_DESKTOP_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_LEAD_DESKTOP_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_LEAD_MOBILE_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_LEAD_MOBILE_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_LEAD_MOBILE_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_LEAD_MOBILE_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_LEAD_MOBILE_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_LEAD_MOBILE_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_LEAD_TABLET_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_LEAD_TABLET_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_LEAD_TABLET_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_LEAD_TABLET_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_LEAD_TABLET_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_LEAD_TABLET_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_SEARCH_DESKTOP_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_SEARCH_DESKTOP_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_SEARCH_DESKTOP_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_SEARCH_DESKTOP_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_SEARCH_DESKTOP_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_SEARCH_DESKTOP_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_SEARCH_MOBILE_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_SEARCH_MOBILE_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_SEARCH_MOBILE_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_SEARCH_MOBILE_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_SEARCH_MOBILE_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_SEARCH_MOBILE_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_SEARCH_TABLET_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_SEARCH_TABLET_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_SEARCH_TABLET_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_SEARCH_TABLET_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_SEARCH_TABLET_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_SEARCH_TABLET_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_WATCH_VIDEO_DESKTOP_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_WATCH_VIDEO_DESKTOP_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_WATCH_VIDEO_DESKTOP_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_WATCH_VIDEO_DESKTOP_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_WATCH_VIDEO_DESKTOP_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_WATCH_VIDEO_DESKTOP_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_WATCH_VIDEO_MOBILE_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_WATCH_VIDEO_MOBILE_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_WATCH_VIDEO_MOBILE_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_WATCH_VIDEO_MOBILE_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_WATCH_VIDEO_MOBILE_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_WATCH_VIDEO_MOBILE_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_WATCH_VIDEO_TABLET_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_WATCH_VIDEO_TABLET_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_WATCH_VIDEO_TABLET_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_WATCH_VIDEO_TABLET_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_WATCH_VIDEO_TABLET_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_WATCH_VIDEO_TABLET_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_VIEW_CATEGORY_DESKTOP_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_VIEW_CATEGORY_DESKTOP_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_VIEW_CATEGORY_DESKTOP_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_VIEW_CATEGORY_DESKTOP_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_VIEW_CATEGORY_DESKTOP_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_VIEW_CATEGORY_DESKTOP_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_VIEW_CATEGORY_MOBILE_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_VIEW_CATEGORY_MOBILE_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_VIEW_CATEGORY_MOBILE_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_VIEW_CATEGORY_MOBILE_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_VIEW_CATEGORY_MOBILE_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_VIEW_CATEGORY_MOBILE_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_VIEW_CATEGORY_TABLET_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_VIEW_CATEGORY_TABLET_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_VIEW_CATEGORY_TABLET_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_VIEW_CATEGORY_TABLET_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_VIEW_CATEGORY_TABLET_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_VIEW_CATEGORY_TABLET_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_APP_INSTALL_DESKTOP_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_APP_INSTALL_DESKTOP_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_APP_INSTALL_DESKTOP_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_APP_INSTALL_DESKTOP_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_APP_INSTALL_DESKTOP_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_APP_INSTALL_DESKTOP_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_APP_INSTALL_MOBILE_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_APP_INSTALL_MOBILE_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_APP_INSTALL_MOBILE_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_APP_INSTALL_MOBILE_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_APP_INSTALL_MOBILE_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_APP_INSTALL_MOBILE_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_APP_INSTALL_TABLET_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_APP_INSTALL_TABLET_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_APP_INSTALL_TABLET_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_APP_INSTALL_TABLET_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_APP_INSTALL_TABLET_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_APP_INSTALL_TABLET_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_UNKNOWN_DESKTOP_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_UNKNOWN_DESKTOP_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_UNKNOWN_DESKTOP_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_UNKNOWN_DESKTOP_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_UNKNOWN_DESKTOP_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_UNKNOWN_DESKTOP_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_UNKNOWN_MOBILE_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_UNKNOWN_MOBILE_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_UNKNOWN_MOBILE_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_UNKNOWN_MOBILE_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_UNKNOWN_MOBILE_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_UNKNOWN_MOBILE_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_UNKNOWN_TABLET_ACTION_TO_DESKTOP_CONVERSION" then
         return TOTAL_UNKNOWN_TABLET_ACTION_TO_DESKTOP_CONVERSION;
      end if;
      if Value = "TOTAL_UNKNOWN_TABLET_ACTION_TO_MOBILE_CONVERSION" then
         return TOTAL_UNKNOWN_TABLET_ACTION_TO_MOBILE_CONVERSION;
      end if;
      if Value = "TOTAL_UNKNOWN_TABLET_ACTION_TO_TABLET_CONVERSION" then
         return TOTAL_UNKNOWN_TABLET_ACTION_TO_TABLET_CONVERSION;
      end if;
      if Value = "TOTAL_PAGE_VISIT" then
         return TOTAL_PAGE_VISIT;
      end if;
      if Value = "TOTAL_SIGNUP" then
         return TOTAL_SIGNUP;
      end if;
      if Value = "TOTAL_CHECKOUT" then
         return TOTAL_CHECKOUT;
      end if;
      if Value = "TOTAL_CUSTOM" then
         return TOTAL_CUSTOM;
      end if;
      if Value = "TOTAL_ADD_TO_CART" then
         return TOTAL_ADD_TO_CART;
      end if;
      if Value = "TOTAL_LEAD" then
         return TOTAL_LEAD;
      end if;
      if Value = "TOTAL_SEARCH" then
         return TOTAL_SEARCH;
      end if;
      if Value = "TOTAL_WATCH_VIDEO" then
         return TOTAL_WATCH_VIDEO;
      end if;
      if Value = "TOTAL_VIEW_CATEGORY" then
         return TOTAL_VIEW_CATEGORY;
      end if;
      if Value = "TOTAL_APP_INSTALL" then
         return TOTAL_APP_INSTALL;
      end if;
      if Value = "TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_LEAD_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_LEAD_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_SEARCH_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_SEARCH_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_APP_INSTALL_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_APP_INSTALL_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_CHECKOUT_QUANTITY" then
         return TOTAL_CHECKOUT_QUANTITY;
      end if;
      if Value = "PAGE_VISIT_COST_PER_ACTION" then
         return PAGE_VISIT_COST_PER_ACTION;
      end if;
      if Value = "APP_INSTALL_COST_PER_ACTION" then
         return APP_INSTALL_COST_PER_ACTION;
      end if;
      if Value = "PAGE_VISIT_ROAS" then
         return PAGE_VISIT_ROAS;
      end if;
      if Value = "CHECKOUT_ROAS" then
         return CHECKOUT_ROAS;
      end if;
      if Value = "CUSTOM_ROAS" then
         return CUSTOM_ROAS;
      end if;
      if Value = "VIDEO_3SEC_VIEWS_1" then
         return VIDEO_3SEC_VIEWS_1;
      end if;
      if Value = "VIDEO_P100_COMPLETE_1" then
         return VIDEO_P100_COMPLETE_1;
      end if;
      if Value = "VIDEO_P0_COMBINED_1" then
         return VIDEO_P0_COMBINED_1;
      end if;
      if Value = "VIDEO_P25_COMBINED_1" then
         return VIDEO_P25_COMBINED_1;
      end if;
      if Value = "VIDEO_P50_COMBINED_1" then
         return VIDEO_P50_COMBINED_1;
      end if;
      if Value = "VIDEO_P75_COMBINED_1" then
         return VIDEO_P75_COMBINED_1;
      end if;
      if Value = "VIDEO_P95_COMBINED_1" then
         return VIDEO_P95_COMBINED_1;
      end if;
      if Value = "VIDEO_MRC_VIEWS_1" then
         return VIDEO_MRC_VIEWS_1;
      end if;
      if Value = "VIDEO_3SEC_VIEWS_2" then
         return VIDEO_3SEC_VIEWS_2;
      end if;
      if Value = "VIDEO_P100_COMPLETE_2" then
         return VIDEO_P100_COMPLETE_2;
      end if;
      if Value = "VIDEO_P0_COMBINED_2" then
         return VIDEO_P0_COMBINED_2;
      end if;
      if Value = "VIDEO_P25_COMBINED_2" then
         return VIDEO_P25_COMBINED_2;
      end if;
      if Value = "VIDEO_P50_COMBINED_2" then
         return VIDEO_P50_COMBINED_2;
      end if;
      if Value = "VIDEO_P75_COMBINED_2" then
         return VIDEO_P75_COMBINED_2;
      end if;
      if Value = "VIDEO_P95_COMBINED_2" then
         return VIDEO_P95_COMBINED_2;
      end if;
      if Value = "VIDEO_MRC_VIEWS_2" then
         return VIDEO_MRC_VIEWS_2;
      end if;
      if Value = "PAID_VIDEO_VIEWABLE_RATE" then
         return PAID_VIDEO_VIEWABLE_RATE;
      end if;
      if Value = "VIDEO_LENGTH" then
         return VIDEO_LENGTH;
      end if;
      if Value = "CPV_IN_MICRO_DOLLAR" then
         return CPV_IN_MICRO_DOLLAR;
      end if;
      if Value = "ECPV_IN_DOLLAR" then
         return ECPV_IN_DOLLAR;
      end if;
      if Value = "CPCV_IN_MICRO_DOLLAR" then
         return CPCV_IN_MICRO_DOLLAR;
      end if;
      if Value = "ECPCV_IN_DOLLAR" then
         return ECPCV_IN_DOLLAR;
      end if;
      if Value = "CPCV_P95_IN_MICRO_DOLLAR" then
         return CPCV_P95_IN_MICRO_DOLLAR;
      end if;
      if Value = "ECPCV_P95_IN_DOLLAR" then
         return ECPCV_P95_IN_DOLLAR;
      end if;
      if Value = "TOTAL_VIDEO_3SEC_VIEWS" then
         return TOTAL_VIDEO_3SEC_VIEWS;
      end if;
      if Value = "TOTAL_VIDEO_P100_COMPLETE" then
         return TOTAL_VIDEO_P100_COMPLETE;
      end if;
      if Value = "TOTAL_VIDEO_P0_COMBINED" then
         return TOTAL_VIDEO_P0_COMBINED;
      end if;
      if Value = "TOTAL_VIDEO_P25_COMBINED" then
         return TOTAL_VIDEO_P25_COMBINED;
      end if;
      if Value = "TOTAL_VIDEO_P50_COMBINED" then
         return TOTAL_VIDEO_P50_COMBINED;
      end if;
      if Value = "TOTAL_VIDEO_P75_COMBINED" then
         return TOTAL_VIDEO_P75_COMBINED;
      end if;
      if Value = "TOTAL_VIDEO_P95_COMBINED" then
         return TOTAL_VIDEO_P95_COMBINED;
      end if;
      if Value = "TOTAL_VIDEO_MRC_VIEWS" then
         return TOTAL_VIDEO_MRC_VIEWS;
      end if;
      if Value = "VIDEO_AVG_WATCHTIME_IN_SECOND_1" then
         return VIDEO_AVG_WATCHTIME_IN_SECOND_1;
      end if;
      if Value = "VIDEO_AVG_WATCHTIME_IN_SECOND_2" then
         return VIDEO_AVG_WATCHTIME_IN_SECOND_2;
      end if;
      if Value = "TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND" then
         return TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND;
      end if;
      if Value = "TOTAL_DESTINATION_VIEWS" then
         return TOTAL_DESTINATION_VIEWS;
      end if;
      if Value = "TOTAL_REPIN_RATE" then
         return TOTAL_REPIN_RATE;
      end if;
      if Value = "WEB_CHECKOUT_COST_PER_ACTION" then
         return WEB_CHECKOUT_COST_PER_ACTION;
      end if;
      if Value = "WEB_CHECKOUT_ROAS" then
         return WEB_CHECKOUT_ROAS;
      end if;
      if Value = "TOTAL_WEB_CHECKOUT" then
         return TOTAL_WEB_CHECKOUT;
      end if;
      if Value = "TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_WEB_CLICK_CHECKOUT" then
         return TOTAL_WEB_CLICK_CHECKOUT;
      end if;
      if Value = "TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_WEB_ENGAGEMENT_CHECKOUT" then
         return TOTAL_WEB_ENGAGEMENT_CHECKOUT;
      end if;
      if Value = "TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_WEB_VIEW_CHECKOUT" then
         return TOTAL_WEB_VIEW_CHECKOUT;
      end if;
      if Value = "TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "INAPP_CHECKOUT_COST_PER_ACTION" then
         return INAPP_CHECKOUT_COST_PER_ACTION;
      end if;
      if Value = "INAPP_CHECKOUT_ROAS" then
         return INAPP_CHECKOUT_ROAS;
      end if;
      if Value = "TOTAL_INAPP_CHECKOUT" then
         return TOTAL_INAPP_CHECKOUT;
      end if;
      if Value = "TOTAL_INAPP_CHECKOUT_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_INAPP_CHECKOUT_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_INAPP_CLICK_CHECKOUT" then
         return TOTAL_INAPP_CLICK_CHECKOUT;
      end if;
      if Value = "TOTAL_INAPP_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_INAPP_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_INAPP_ENGAGEMENT_CHECKOUT" then
         return TOTAL_INAPP_ENGAGEMENT_CHECKOUT;
      end if;
      if Value = "TOTAL_INAPP_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_INAPP_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_INAPP_VIEW_CHECKOUT" then
         return TOTAL_INAPP_VIEW_CHECKOUT;
      end if;
      if Value = "TOTAL_INAPP_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_INAPP_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "OFFLINE_CHECKOUT_COST_PER_ACTION" then
         return OFFLINE_CHECKOUT_COST_PER_ACTION;
      end if;
      if Value = "OFFLINE_CHECKOUT_ROAS" then
         return OFFLINE_CHECKOUT_ROAS;
      end if;
      if Value = "TOTAL_OFFLINE_CHECKOUT" then
         return TOTAL_OFFLINE_CHECKOUT;
      end if;
      if Value = "TOTAL_OFFLINE_CHECKOUT_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_OFFLINE_CHECKOUT_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_OFFLINE_CLICK_CHECKOUT" then
         return TOTAL_OFFLINE_CLICK_CHECKOUT;
      end if;
      if Value = "TOTAL_OFFLINE_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_OFFLINE_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_OFFLINE_ENGAGEMENT_CHECKOUT" then
         return TOTAL_OFFLINE_ENGAGEMENT_CHECKOUT;
      end if;
      if Value = "TOTAL_OFFLINE_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_OFFLINE_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_OFFLINE_VIEW_CHECKOUT" then
         return TOTAL_OFFLINE_VIEW_CHECKOUT;
      end if;
      if Value = "TOTAL_OFFLINE_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_OFFLINE_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "PINTEREST_CHECKOUT_COST_PER_ACTION" then
         return PINTEREST_CHECKOUT_COST_PER_ACTION;
      end if;
      if Value = "PINTEREST_CHECKOUT_ROAS" then
         return PINTEREST_CHECKOUT_ROAS;
      end if;
      if Value = "TOTAL_PINTEREST_CHECKOUT" then
         return TOTAL_PINTEREST_CHECKOUT;
      end if;
      if Value = "TOTAL_PINTEREST_CHECKOUT_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_PINTEREST_CHECKOUT_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "WEB_ADD_TO_CART_COST_PER_ACTION" then
         return WEB_ADD_TO_CART_COST_PER_ACTION;
      end if;
      if Value = "WEB_ADD_TO_CART_ROAS" then
         return WEB_ADD_TO_CART_ROAS;
      end if;
      if Value = "TOTAL_WEB_ADD_TO_CART" then
         return TOTAL_WEB_ADD_TO_CART;
      end if;
      if Value = "TOTAL_WEB_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_WEB_CLICK_ADD_TO_CART" then
         return TOTAL_WEB_CLICK_ADD_TO_CART;
      end if;
      if Value = "TOTAL_WEB_CLICK_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_CLICK_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_WEB_ENGAGEMENT_ADD_TO_CART" then
         return TOTAL_WEB_ENGAGEMENT_ADD_TO_CART;
      end if;
      if Value = "TOTAL_WEB_ENGAGEMENT_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_ENGAGEMENT_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_WEB_VIEW_ADD_TO_CART" then
         return TOTAL_WEB_VIEW_ADD_TO_CART;
      end if;
      if Value = "TOTAL_WEB_VIEW_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_VIEW_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "INAPP_ADD_TO_CART_COST_PER_ACTION" then
         return INAPP_ADD_TO_CART_COST_PER_ACTION;
      end if;
      if Value = "INAPP_ADD_TO_CART_ROAS" then
         return INAPP_ADD_TO_CART_ROAS;
      end if;
      if Value = "TOTAL_INAPP_ADD_TO_CART" then
         return TOTAL_INAPP_ADD_TO_CART;
      end if;
      if Value = "TOTAL_INAPP_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_INAPP_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_INAPP_CLICK_ADD_TO_CART" then
         return TOTAL_INAPP_CLICK_ADD_TO_CART;
      end if;
      if Value = "TOTAL_INAPP_CLICK_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_INAPP_CLICK_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_INAPP_ENGAGEMENT_ADD_TO_CART" then
         return TOTAL_INAPP_ENGAGEMENT_ADD_TO_CART;
      end if;
      if Value = "TOTAL_INAPP_ENGAGEMENT_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_INAPP_ENGAGEMENT_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_INAPP_VIEW_ADD_TO_CART" then
         return TOTAL_INAPP_VIEW_ADD_TO_CART;
      end if;
      if Value = "TOTAL_INAPP_VIEW_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_INAPP_VIEW_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "WEB_PAGE_VISIT_COST_PER_ACTION" then
         return WEB_PAGE_VISIT_COST_PER_ACTION;
      end if;
      if Value = "WEB_PAGE_VISIT_ROAS" then
         return WEB_PAGE_VISIT_ROAS;
      end if;
      if Value = "TOTAL_WEB_PAGE_VISIT" then
         return TOTAL_WEB_PAGE_VISIT;
      end if;
      if Value = "TOTAL_WEB_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_WEB_CLICK_PAGE_VISIT" then
         return TOTAL_WEB_CLICK_PAGE_VISIT;
      end if;
      if Value = "TOTAL_WEB_CLICK_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_CLICK_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_WEB_ENGAGEMENT_PAGE_VISIT" then
         return TOTAL_WEB_ENGAGEMENT_PAGE_VISIT;
      end if;
      if Value = "TOTAL_WEB_ENGAGEMENT_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_ENGAGEMENT_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_WEB_VIEW_PAGE_VISIT" then
         return TOTAL_WEB_VIEW_PAGE_VISIT;
      end if;
      if Value = "TOTAL_WEB_VIEW_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_VIEW_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "WEB_SIGNUP_COST_PER_ACTION" then
         return WEB_SIGNUP_COST_PER_ACTION;
      end if;
      if Value = "WEB_SIGNUP_ROAS" then
         return WEB_SIGNUP_ROAS;
      end if;
      if Value = "TOTAL_WEB_SIGNUP" then
         return TOTAL_WEB_SIGNUP;
      end if;
      if Value = "TOTAL_WEB_SIGNUP_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_SIGNUP_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_WEB_CLICK_SIGNUP" then
         return TOTAL_WEB_CLICK_SIGNUP;
      end if;
      if Value = "TOTAL_WEB_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_WEB_ENGAGEMENT_SIGNUP" then
         return TOTAL_WEB_ENGAGEMENT_SIGNUP;
      end if;
      if Value = "TOTAL_WEB_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_WEB_VIEW_SIGNUP" then
         return TOTAL_WEB_VIEW_SIGNUP;
      end if;
      if Value = "TOTAL_WEB_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "INAPP_SIGNUP_COST_PER_ACTION" then
         return INAPP_SIGNUP_COST_PER_ACTION;
      end if;
      if Value = "INAPP_SIGNUP_ROAS" then
         return INAPP_SIGNUP_ROAS;
      end if;
      if Value = "TOTAL_INAPP_SIGNUP" then
         return TOTAL_INAPP_SIGNUP;
      end if;
      if Value = "TOTAL_INAPP_SIGNUP_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_INAPP_SIGNUP_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_INAPP_CLICK_SIGNUP" then
         return TOTAL_INAPP_CLICK_SIGNUP;
      end if;
      if Value = "TOTAL_INAPP_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_INAPP_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_INAPP_ENGAGEMENT_SIGNUP" then
         return TOTAL_INAPP_ENGAGEMENT_SIGNUP;
      end if;
      if Value = "TOTAL_INAPP_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_INAPP_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_INAPP_VIEW_SIGNUP" then
         return TOTAL_INAPP_VIEW_SIGNUP;
      end if;
      if Value = "TOTAL_INAPP_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_INAPP_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "OFFLINE_SIGNUP_COST_PER_ACTION" then
         return OFFLINE_SIGNUP_COST_PER_ACTION;
      end if;
      if Value = "OFFLINE_SIGNUP_ROAS" then
         return OFFLINE_SIGNUP_ROAS;
      end if;
      if Value = "TOTAL_OFFLINE_SIGNUP" then
         return TOTAL_OFFLINE_SIGNUP;
      end if;
      if Value = "TOTAL_OFFLINE_SIGNUP_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_OFFLINE_SIGNUP_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_OFFLINE_CLICK_SIGNUP" then
         return TOTAL_OFFLINE_CLICK_SIGNUP;
      end if;
      if Value = "TOTAL_OFFLINE_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_OFFLINE_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_OFFLINE_ENGAGEMENT_SIGNUP" then
         return TOTAL_OFFLINE_ENGAGEMENT_SIGNUP;
      end if;
      if Value = "TOTAL_OFFLINE_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_OFFLINE_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_OFFLINE_VIEW_SIGNUP" then
         return TOTAL_OFFLINE_VIEW_SIGNUP;
      end if;
      if Value = "TOTAL_OFFLINE_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_OFFLINE_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "WEB_WATCH_VIDEO_COST_PER_ACTION" then
         return WEB_WATCH_VIDEO_COST_PER_ACTION;
      end if;
      if Value = "WEB_WATCH_VIDEO_ROAS" then
         return WEB_WATCH_VIDEO_ROAS;
      end if;
      if Value = "TOTAL_WEB_WATCH_VIDEO" then
         return TOTAL_WEB_WATCH_VIDEO;
      end if;
      if Value = "TOTAL_WEB_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_WEB_CLICK_WATCH_VIDEO" then
         return TOTAL_WEB_CLICK_WATCH_VIDEO;
      end if;
      if Value = "TOTAL_WEB_CLICK_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_CLICK_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_WEB_ENGAGEMENT_WATCH_VIDEO" then
         return TOTAL_WEB_ENGAGEMENT_WATCH_VIDEO;
      end if;
      if Value = "TOTAL_WEB_ENGAGEMENT_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_ENGAGEMENT_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_WEB_VIEW_WATCH_VIDEO" then
         return TOTAL_WEB_VIEW_WATCH_VIDEO;
      end if;
      if Value = "TOTAL_WEB_VIEW_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_VIEW_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "WEB_LEAD_COST_PER_ACTION" then
         return WEB_LEAD_COST_PER_ACTION;
      end if;
      if Value = "WEB_LEAD_ROAS" then
         return WEB_LEAD_ROAS;
      end if;
      if Value = "TOTAL_WEB_LEAD" then
         return TOTAL_WEB_LEAD;
      end if;
      if Value = "TOTAL_WEB_LEAD_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_LEAD_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_WEB_CLICK_LEAD" then
         return TOTAL_WEB_CLICK_LEAD;
      end if;
      if Value = "TOTAL_WEB_CLICK_LEAD_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_CLICK_LEAD_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_WEB_ENGAGEMENT_LEAD" then
         return TOTAL_WEB_ENGAGEMENT_LEAD;
      end if;
      if Value = "TOTAL_WEB_ENGAGEMENT_LEAD_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_ENGAGEMENT_LEAD_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_WEB_VIEW_LEAD" then
         return TOTAL_WEB_VIEW_LEAD;
      end if;
      if Value = "TOTAL_WEB_VIEW_LEAD_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_VIEW_LEAD_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "OFFLINE_LEAD_COST_PER_ACTION" then
         return OFFLINE_LEAD_COST_PER_ACTION;
      end if;
      if Value = "OFFLINE_LEAD_ROAS" then
         return OFFLINE_LEAD_ROAS;
      end if;
      if Value = "TOTAL_OFFLINE_LEAD" then
         return TOTAL_OFFLINE_LEAD;
      end if;
      if Value = "TOTAL_OFFLINE_LEAD_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_OFFLINE_LEAD_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_OFFLINE_CLICK_LEAD" then
         return TOTAL_OFFLINE_CLICK_LEAD;
      end if;
      if Value = "TOTAL_OFFLINE_CLICK_LEAD_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_OFFLINE_CLICK_LEAD_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_OFFLINE_ENGAGEMENT_LEAD" then
         return TOTAL_OFFLINE_ENGAGEMENT_LEAD;
      end if;
      if Value = "TOTAL_OFFLINE_ENGAGEMENT_LEAD_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_OFFLINE_ENGAGEMENT_LEAD_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_OFFLINE_VIEW_LEAD" then
         return TOTAL_OFFLINE_VIEW_LEAD;
      end if;
      if Value = "TOTAL_OFFLINE_VIEW_LEAD_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_OFFLINE_VIEW_LEAD_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "WEB_SEARCH_COST_PER_ACTION" then
         return WEB_SEARCH_COST_PER_ACTION;
      end if;
      if Value = "WEB_SEARCH_ROAS" then
         return WEB_SEARCH_ROAS;
      end if;
      if Value = "TOTAL_WEB_SEARCH" then
         return TOTAL_WEB_SEARCH;
      end if;
      if Value = "TOTAL_WEB_SEARCH_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_SEARCH_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_WEB_CLICK_SEARCH" then
         return TOTAL_WEB_CLICK_SEARCH;
      end if;
      if Value = "TOTAL_WEB_CLICK_SEARCH_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_CLICK_SEARCH_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_WEB_ENGAGEMENT_SEARCH" then
         return TOTAL_WEB_ENGAGEMENT_SEARCH;
      end if;
      if Value = "TOTAL_WEB_ENGAGEMENT_SEARCH_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_ENGAGEMENT_SEARCH_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_WEB_VIEW_SEARCH" then
         return TOTAL_WEB_VIEW_SEARCH;
      end if;
      if Value = "TOTAL_WEB_VIEW_SEARCH_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_VIEW_SEARCH_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "INAPP_SEARCH_COST_PER_ACTION" then
         return INAPP_SEARCH_COST_PER_ACTION;
      end if;
      if Value = "INAPP_SEARCH_ROAS" then
         return INAPP_SEARCH_ROAS;
      end if;
      if Value = "TOTAL_INAPP_SEARCH" then
         return TOTAL_INAPP_SEARCH;
      end if;
      if Value = "TOTAL_INAPP_SEARCH_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_INAPP_SEARCH_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_INAPP_CLICK_SEARCH" then
         return TOTAL_INAPP_CLICK_SEARCH;
      end if;
      if Value = "TOTAL_INAPP_CLICK_SEARCH_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_INAPP_CLICK_SEARCH_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_INAPP_ENGAGEMENT_SEARCH" then
         return TOTAL_INAPP_ENGAGEMENT_SEARCH;
      end if;
      if Value = "TOTAL_INAPP_ENGAGEMENT_SEARCH_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_INAPP_ENGAGEMENT_SEARCH_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_INAPP_VIEW_SEARCH" then
         return TOTAL_INAPP_VIEW_SEARCH;
      end if;
      if Value = "TOTAL_INAPP_VIEW_SEARCH_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_INAPP_VIEW_SEARCH_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "WEB_VIEW_CATEGORY_COST_PER_ACTION" then
         return WEB_VIEW_CATEGORY_COST_PER_ACTION;
      end if;
      if Value = "WEB_VIEW_CATEGORY_ROAS" then
         return WEB_VIEW_CATEGORY_ROAS;
      end if;
      if Value = "TOTAL_WEB_VIEW_CATEGORY" then
         return TOTAL_WEB_VIEW_CATEGORY;
      end if;
      if Value = "TOTAL_WEB_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_WEB_CLICK_VIEW_CATEGORY" then
         return TOTAL_WEB_CLICK_VIEW_CATEGORY;
      end if;
      if Value = "TOTAL_WEB_CLICK_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_CLICK_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_WEB_ENGAGEMENT_VIEW_CATEGORY" then
         return TOTAL_WEB_ENGAGEMENT_VIEW_CATEGORY;
      end if;
      if Value = "TOTAL_WEB_ENGAGEMENT_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_ENGAGEMENT_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_WEB_VIEW_VIEW_CATEGORY" then
         return TOTAL_WEB_VIEW_VIEW_CATEGORY;
      end if;
      if Value = "TOTAL_WEB_VIEW_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_VIEW_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "WEB_CUSTOM_COST_PER_ACTION" then
         return WEB_CUSTOM_COST_PER_ACTION;
      end if;
      if Value = "WEB_CUSTOM_ROAS" then
         return WEB_CUSTOM_ROAS;
      end if;
      if Value = "TOTAL_WEB_CUSTOM" then
         return TOTAL_WEB_CUSTOM;
      end if;
      if Value = "TOTAL_WEB_CUSTOM_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_CUSTOM_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_WEB_CLICK_CUSTOM" then
         return TOTAL_WEB_CLICK_CUSTOM;
      end if;
      if Value = "TOTAL_WEB_CLICK_CUSTOM_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_CLICK_CUSTOM_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_WEB_ENGAGEMENT_CUSTOM" then
         return TOTAL_WEB_ENGAGEMENT_CUSTOM;
      end if;
      if Value = "TOTAL_WEB_ENGAGEMENT_CUSTOM_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_ENGAGEMENT_CUSTOM_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_WEB_VIEW_CUSTOM" then
         return TOTAL_WEB_VIEW_CUSTOM;
      end if;
      if Value = "TOTAL_WEB_VIEW_CUSTOM_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_VIEW_CUSTOM_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "OFFLINE_CUSTOM_COST_PER_ACTION" then
         return OFFLINE_CUSTOM_COST_PER_ACTION;
      end if;
      if Value = "OFFLINE_CUSTOM_ROAS" then
         return OFFLINE_CUSTOM_ROAS;
      end if;
      if Value = "TOTAL_OFFLINE_CUSTOM" then
         return TOTAL_OFFLINE_CUSTOM;
      end if;
      if Value = "TOTAL_OFFLINE_CUSTOM_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_OFFLINE_CUSTOM_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_OFFLINE_CLICK_CUSTOM" then
         return TOTAL_OFFLINE_CLICK_CUSTOM;
      end if;
      if Value = "TOTAL_OFFLINE_CLICK_CUSTOM_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_OFFLINE_CLICK_CUSTOM_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_OFFLINE_ENGAGEMENT_CUSTOM" then
         return TOTAL_OFFLINE_ENGAGEMENT_CUSTOM;
      end if;
      if Value = "TOTAL_OFFLINE_ENGAGEMENT_CUSTOM_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_OFFLINE_ENGAGEMENT_CUSTOM_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_OFFLINE_VIEW_CUSTOM" then
         return TOTAL_OFFLINE_VIEW_CUSTOM;
      end if;
      if Value = "TOTAL_OFFLINE_VIEW_CUSTOM_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_OFFLINE_VIEW_CUSTOM_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "WEB_UNKNOWN_COST_PER_ACTION" then
         return WEB_UNKNOWN_COST_PER_ACTION;
      end if;
      if Value = "WEB_UNKNOWN_ROAS" then
         return WEB_UNKNOWN_ROAS;
      end if;
      if Value = "TOTAL_WEB_UNKNOWN" then
         return TOTAL_WEB_UNKNOWN;
      end if;
      if Value = "TOTAL_WEB_UNKNOWN_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_UNKNOWN_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_WEB_CLICK_UNKNOWN" then
         return TOTAL_WEB_CLICK_UNKNOWN;
      end if;
      if Value = "TOTAL_WEB_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_WEB_ENGAGEMENT_UNKNOWN" then
         return TOTAL_WEB_ENGAGEMENT_UNKNOWN;
      end if;
      if Value = "TOTAL_WEB_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_WEB_VIEW_UNKNOWN" then
         return TOTAL_WEB_VIEW_UNKNOWN;
      end if;
      if Value = "TOTAL_WEB_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_WEB_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "INAPP_UNKNOWN_COST_PER_ACTION" then
         return INAPP_UNKNOWN_COST_PER_ACTION;
      end if;
      if Value = "INAPP_UNKNOWN_ROAS" then
         return INAPP_UNKNOWN_ROAS;
      end if;
      if Value = "TOTAL_INAPP_UNKNOWN" then
         return TOTAL_INAPP_UNKNOWN;
      end if;
      if Value = "TOTAL_INAPP_UNKNOWN_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_INAPP_UNKNOWN_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_INAPP_CLICK_UNKNOWN" then
         return TOTAL_INAPP_CLICK_UNKNOWN;
      end if;
      if Value = "TOTAL_INAPP_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_INAPP_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_INAPP_ENGAGEMENT_UNKNOWN" then
         return TOTAL_INAPP_ENGAGEMENT_UNKNOWN;
      end if;
      if Value = "TOTAL_INAPP_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_INAPP_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_INAPP_VIEW_UNKNOWN" then
         return TOTAL_INAPP_VIEW_UNKNOWN;
      end if;
      if Value = "TOTAL_INAPP_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_INAPP_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "OFFLINE_UNKNOWN_COST_PER_ACTION" then
         return OFFLINE_UNKNOWN_COST_PER_ACTION;
      end if;
      if Value = "OFFLINE_UNKNOWN_ROAS" then
         return OFFLINE_UNKNOWN_ROAS;
      end if;
      if Value = "TOTAL_OFFLINE_UNKNOWN" then
         return TOTAL_OFFLINE_UNKNOWN;
      end if;
      if Value = "TOTAL_OFFLINE_UNKNOWN_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_OFFLINE_UNKNOWN_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_OFFLINE_CLICK_UNKNOWN" then
         return TOTAL_OFFLINE_CLICK_UNKNOWN;
      end if;
      if Value = "TOTAL_OFFLINE_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_OFFLINE_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_OFFLINE_ENGAGEMENT_UNKNOWN" then
         return TOTAL_OFFLINE_ENGAGEMENT_UNKNOWN;
      end if;
      if Value = "TOTAL_OFFLINE_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_OFFLINE_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_OFFLINE_VIEW_UNKNOWN" then
         return TOTAL_OFFLINE_VIEW_UNKNOWN;
      end if;
      if Value = "TOTAL_OFFLINE_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_OFFLINE_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "INAPP_APP_INSTALL_COST_PER_ACTION" then
         return INAPP_APP_INSTALL_COST_PER_ACTION;
      end if;
      if Value = "INAPP_APP_INSTALL_ROAS" then
         return INAPP_APP_INSTALL_ROAS;
      end if;
      if Value = "TOTAL_INAPP_APP_INSTALL" then
         return TOTAL_INAPP_APP_INSTALL;
      end if;
      if Value = "TOTAL_INAPP_APP_INSTALL_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_INAPP_APP_INSTALL_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_INAPP_CLICK_APP_INSTALL" then
         return TOTAL_INAPP_CLICK_APP_INSTALL;
      end if;
      if Value = "TOTAL_INAPP_CLICK_APP_INSTALL_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_INAPP_CLICK_APP_INSTALL_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_INAPP_ENGAGEMENT_APP_INSTALL" then
         return TOTAL_INAPP_ENGAGEMENT_APP_INSTALL;
      end if;
      if Value = "TOTAL_INAPP_ENGAGEMENT_APP_INSTALL_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_INAPP_ENGAGEMENT_APP_INSTALL_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "TOTAL_INAPP_VIEW_APP_INSTALL" then
         return TOTAL_INAPP_VIEW_APP_INSTALL;
      end if;
      if Value = "TOTAL_INAPP_VIEW_APP_INSTALL_VALUE_IN_MICRO_DOLLAR" then
         return TOTAL_INAPP_VIEW_APP_INSTALL_VALUE_IN_MICRO_DOLLAR;
      end if;
      if Value = "IDEA_PIN_PRODUCT_TAG_VISIT_1" then
         return IDEA_PIN_PRODUCT_TAG_VISIT_1;
      end if;
      if Value = "IDEA_PIN_PRODUCT_TAG_VISIT_2" then
         return IDEA_PIN_PRODUCT_TAG_VISIT_2;
      end if;
      if Value = "TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT" then
         return TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT;
      end if;
      if Value = "LEADS" then
         return LEADS;
      end if;
      if Value = "COST_PER_LEAD" then
         return COST_PER_LEAD;
      end if;
      if Value = "QUIZ_COMPLETED" then
         return QUIZ_COMPLETED;
      end if;
      if Value = "QUIZ_COMPLETION_RATE" then
         return QUIZ_COMPLETION_RATE;
      end if;
      if Value = "SHOWCASE_PIN_CLICKTHROUGH" then
         return SHOWCASE_PIN_CLICKTHROUGH;
      end if;
      if Value = "SHOWCASE_SUBPAGE_CLICKTHROUGH" then
         return SHOWCASE_SUBPAGE_CLICKTHROUGH;
      end if;
      if Value = "SHOWCASE_SUBPIN_CLICKTHROUGH" then
         return SHOWCASE_SUBPIN_CLICKTHROUGH;
      end if;
      if Value = "SHOWCASE_SUBPAGE_IMPRESSION" then
         return SHOWCASE_SUBPAGE_IMPRESSION;
      end if;
      if Value = "SHOWCASE_SUBPIN_IMPRESSION" then
         return SHOWCASE_SUBPIN_IMPRESSION;
      end if;
      if Value = "SHOWCASE_SUBPAGE_SWIPE_LEFT" then
         return SHOWCASE_SUBPAGE_SWIPE_LEFT;
      end if;
      if Value = "SHOWCASE_SUBPAGE_SWIPE_RIGHT" then
         return SHOWCASE_SUBPAGE_SWIPE_RIGHT;
      end if;
      if Value = "SHOWCASE_SUBPIN_SWIPE_LEFT" then
         return SHOWCASE_SUBPIN_SWIPE_LEFT;
      end if;
      if Value = "SHOWCASE_SUBPIN_SWIPE_RIGHT" then
         return SHOWCASE_SUBPIN_SWIPE_RIGHT;
      end if;
      if Value = "SHOWCASE_SUBPAGE_REPIN" then
         return SHOWCASE_SUBPAGE_REPIN;
      end if;
      if Value = "SHOWCASE_SUBPIN_REPIN" then
         return SHOWCASE_SUBPIN_REPIN;
      end if;
      if Value = "SHOWCASE_SUBPAGE_CLOSEUP" then
         return SHOWCASE_SUBPAGE_CLOSEUP;
      end if;
      if Value = "SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD" then
         return SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD;
      end if;
      if Value = "SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD" then
         return SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD;
      end if;
      if Value = "SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION" then
         return SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION;
      end if;
      if Value = "TOTAL_CHECKOUT_CONVERSION_RATE" then
         return TOTAL_CHECKOUT_CONVERSION_RATE;
      end if;
      if Value = "TOTAL_VIEW_CATEGORY_CONVERSION_RATE" then
         return TOTAL_VIEW_CATEGORY_CONVERSION_RATE;
      end if;
      if Value = "TOTAL_ADD_TO_CART_CONVERSION_RATE" then
         return TOTAL_ADD_TO_CART_CONVERSION_RATE;
      end if;
      if Value = "TOTAL_SIGNUP_CONVERSION_RATE" then
         return TOTAL_SIGNUP_CONVERSION_RATE;
      end if;
      if Value = "TOTAL_PAGE_VISIT_CONVERSION_RATE" then
         return TOTAL_PAGE_VISIT_CONVERSION_RATE;
      end if;
      if Value = "TOTAL_LEAD_CONVERSION_RATE" then
         return TOTAL_LEAD_CONVERSION_RATE;
      end if;
      if Value = "TOTAL_SEARCH_CONVERSION_RATE" then
         return TOTAL_SEARCH_CONVERSION_RATE;
      end if;
      if Value = "TOTAL_WATCH_VIDEO_CONVERSION_RATE" then
         return TOTAL_WATCH_VIDEO_CONVERSION_RATE;
      end if;
      if Value = "TOTAL_UNKNOWN_CONVERSION_RATE" then
         return TOTAL_UNKNOWN_CONVERSION_RATE;
      end if;
      if Value = "TOTAL_CUSTOM_CONVERSION_RATE" then
         return TOTAL_CUSTOM_CONVERSION_RATE;
      end if;
      if Value = "STANDARD_AD_FEED_ITEM_ID" then
         return STANDARD_AD_FEED_ITEM_ID;
      end if;
      raise Constraint_Error;
   end To_ReportingColumnAsync_Type;

   function To_String (Value : in .Models.ReportingColumnAsync_Type) return String is
   begin
      case Value is
         when SPEND_IN_MICRO_DOLLAR =>
            return "SPEND_IN_MICRO_DOLLAR";

         when PAID_IMPRESSION =>
            return "PAID_IMPRESSION";

         when SPEND_IN_DOLLAR =>
            return "SPEND_IN_DOLLAR";

         when CPC_IN_MICRO_DOLLAR =>
            return "CPC_IN_MICRO_DOLLAR";

         when ECPC_IN_MICRO_DOLLAR =>
            return "ECPC_IN_MICRO_DOLLAR";

         when ECPC_IN_DOLLAR =>
            return "ECPC_IN_DOLLAR";

         when CTR =>
            return "CTR";

         when ECTR =>
            return "ECTR";

         when OUTBOUND_CTR =>
            return "OUTBOUND_CTR";

         when COST_PER_OUTBOUND_CLICK =>
            return "COST_PER_OUTBOUND_CLICK";

         when CAMPAIGN_NAME =>
            return "CAMPAIGN_NAME";

         when CAMPAIGN_STATUS =>
            return "CAMPAIGN_STATUS";

         when PIN_PROMOTION_STATUS =>
            return "PIN_PROMOTION_STATUS";

         when AD_STATUS =>
            return "AD_STATUS";

         when PIN_ID =>
            return "PIN_ID";

         when TOTAL_ENGAGEMENT =>
            return "TOTAL_ENGAGEMENT";

         when ENGAGEMENT_1 =>
            return "ENGAGEMENT_1";

         when ENGAGEMENT_2 =>
            return "ENGAGEMENT_2";

         when ECPE_IN_DOLLAR =>
            return "ECPE_IN_DOLLAR";

         when ENGAGEMENT_RATE =>
            return "ENGAGEMENT_RATE";

         when EENGAGEMENT_RATE =>
            return "EENGAGEMENT_RATE";

         when ECPM_IN_MICRO_DOLLAR =>
            return "ECPM_IN_MICRO_DOLLAR";

         when REPIN_RATE =>
            return "REPIN_RATE";

         when CTR_2 =>
            return "CTR_2";

         when CAMPAIGN_ID =>
            return "CAMPAIGN_ID";

         when ADVERTISER_ID =>
            return "ADVERTISER_ID";

         when AD_ACCOUNT_ID =>
            return "AD_ACCOUNT_ID";

         when PIN_PROMOTION_ID =>
            return "PIN_PROMOTION_ID";

         when AD_ID =>
            return "AD_ID";

         when AD_GROUP_ID =>
            return "AD_GROUP_ID";

         when CAMPAIGN_ENTITY_STATUS =>
            return "CAMPAIGN_ENTITY_STATUS";

         when CAMPAIGN_MANAGED_STATUS =>
            return "CAMPAIGN_MANAGED_STATUS";

         when CAMPAIGN_OBJECTIVE_TYPE =>
            return "CAMPAIGN_OBJECTIVE_TYPE";

         when CPM_IN_MICRO_DOLLAR =>
            return "CPM_IN_MICRO_DOLLAR";

         when CPM_IN_DOLLAR =>
            return "CPM_IN_DOLLAR";

         when AD_GROUP_NAME =>
            return "AD_GROUP_NAME";

         when AD_GROUP_STATUS =>
            return "AD_GROUP_STATUS";

         when AD_GROUP_ENTITY_STATUS =>
            return "AD_GROUP_ENTITY_STATUS";

         when PRODUCT_GROUP_ID =>
            return "PRODUCT_GROUP_ID";

         when PRODUCT_GROUP_STATUS =>
            return "PRODUCT_GROUP_STATUS";

         when ORDER_LINE_ID =>
            return "ORDER_LINE_ID";

         when ORDER_LINE_NAME =>
            return "ORDER_LINE_NAME";

         when CLICKTHROUGH_1 =>
            return "CLICKTHROUGH_1";

         when REPIN_1 =>
            return "REPIN_1";

         when IMPRESSION_1 =>
            return "IMPRESSION_1";

         when IMPRESSION_1_GROSS =>
            return "IMPRESSION_1_GROSS";

         when CLICKTHROUGH_1_GROSS =>
            return "CLICKTHROUGH_1_GROSS";

         when OUTBOUND_CLICK_1 =>
            return "OUTBOUND_CLICK_1";

         when CLICKTHROUGH_2 =>
            return "CLICKTHROUGH_2";

         when REPIN_2 =>
            return "REPIN_2";

         when IMPRESSION_2 =>
            return "IMPRESSION_2";

         when OUTBOUND_CLICK_2 =>
            return "OUTBOUND_CLICK_2";

         when TOTAL_CLICKTHROUGH =>
            return "TOTAL_CLICKTHROUGH";

         when TOTAL_IMPRESSION =>
            return "TOTAL_IMPRESSION";

         when TOTAL_IMPRESSION_USER =>
            return "TOTAL_IMPRESSION_USER";

         when TOTAL_IMPRESSION_FREQUENCY =>
            return "TOTAL_IMPRESSION_FREQUENCY";

         when COST_PER_OUTBOUND_CLICK_IN_DOLLAR =>
            return "COST_PER_OUTBOUND_CLICK_IN_DOLLAR";

         when TOTAL_ENGAGEMENT_PAGE_VISIT =>
            return "TOTAL_ENGAGEMENT_PAGE_VISIT";

         when TOTAL_ENGAGEMENT_SIGNUP =>
            return "TOTAL_ENGAGEMENT_SIGNUP";

         when TOTAL_ENGAGEMENT_CHECKOUT =>
            return "TOTAL_ENGAGEMENT_CHECKOUT";

         when TOTAL_ENGAGEMENT_CUSTOM =>
            return "TOTAL_ENGAGEMENT_CUSTOM";

         when TOTAL_ENGAGEMENT_ADD_TO_CART =>
            return "TOTAL_ENGAGEMENT_ADD_TO_CART";

         when TOTAL_ENGAGEMENT_LEAD =>
            return "TOTAL_ENGAGEMENT_LEAD";

         when TOTAL_ENGAGEMENT_SEARCH =>
            return "TOTAL_ENGAGEMENT_SEARCH";

         when TOTAL_ENGAGEMENT_WATCH_VIDEO =>
            return "TOTAL_ENGAGEMENT_WATCH_VIDEO";

         when TOTAL_ENGAGEMENT_VIEW_CATEGORY =>
            return "TOTAL_ENGAGEMENT_VIEW_CATEGORY";

         when TOTAL_ENGAGEMENT_APP_INSTALL =>
            return "TOTAL_ENGAGEMENT_APP_INSTALL";

         when TOTAL_ENGAGEMENT_UNKNOWN =>
            return "TOTAL_ENGAGEMENT_UNKNOWN";

         when TOTAL_CLICK_PAGE_VISIT =>
            return "TOTAL_CLICK_PAGE_VISIT";

         when TOTAL_CLICK_SIGNUP =>
            return "TOTAL_CLICK_SIGNUP";

         when TOTAL_CLICK_CHECKOUT =>
            return "TOTAL_CLICK_CHECKOUT";

         when TOTAL_CLICK_CUSTOM =>
            return "TOTAL_CLICK_CUSTOM";

         when TOTAL_CLICK_ADD_TO_CART =>
            return "TOTAL_CLICK_ADD_TO_CART";

         when TOTAL_CLICK_LEAD =>
            return "TOTAL_CLICK_LEAD";

         when TOTAL_CLICK_SEARCH =>
            return "TOTAL_CLICK_SEARCH";

         when TOTAL_CLICK_WATCH_VIDEO =>
            return "TOTAL_CLICK_WATCH_VIDEO";

         when TOTAL_CLICK_VIEW_CATEGORY =>
            return "TOTAL_CLICK_VIEW_CATEGORY";

         when TOTAL_CLICK_APP_INSTALL =>
            return "TOTAL_CLICK_APP_INSTALL";

         when TOTAL_CLICK_UNKNOWN =>
            return "TOTAL_CLICK_UNKNOWN";

         when TOTAL_VIEW_PAGE_VISIT =>
            return "TOTAL_VIEW_PAGE_VISIT";

         when TOTAL_VIEW_SIGNUP =>
            return "TOTAL_VIEW_SIGNUP";

         when TOTAL_VIEW_CHECKOUT =>
            return "TOTAL_VIEW_CHECKOUT";

         when TOTAL_VIEW_CUSTOM =>
            return "TOTAL_VIEW_CUSTOM";

         when TOTAL_VIEW_ADD_TO_CART =>
            return "TOTAL_VIEW_ADD_TO_CART";

         when TOTAL_VIEW_LEAD =>
            return "TOTAL_VIEW_LEAD";

         when TOTAL_VIEW_SEARCH =>
            return "TOTAL_VIEW_SEARCH";

         when TOTAL_VIEW_WATCH_VIDEO =>
            return "TOTAL_VIEW_WATCH_VIDEO";

         when TOTAL_VIEW_VIEW_CATEGORY =>
            return "TOTAL_VIEW_VIEW_CATEGORY";

         when TOTAL_VIEW_APP_INSTALL =>
            return "TOTAL_VIEW_APP_INSTALL";

         when TOTAL_VIEW_UNKNOWN =>
            return "TOTAL_VIEW_UNKNOWN";

         when TOTAL_CONVERSIONS =>
            return "TOTAL_CONVERSIONS";

         when TOTAL_ENGAGEMENT_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_ENGAGEMENT_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_ENGAGEMENT_CUSTOM_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_ENGAGEMENT_CUSTOM_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_ENGAGEMENT_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_ENGAGEMENT_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_ENGAGEMENT_LEAD_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_ENGAGEMENT_LEAD_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_ENGAGEMENT_SEARCH_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_ENGAGEMENT_SEARCH_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_ENGAGEMENT_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_ENGAGEMENT_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_ENGAGEMENT_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_ENGAGEMENT_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_ENGAGEMENT_APP_INSTALL_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_ENGAGEMENT_APP_INSTALL_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_CLICK_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_CLICK_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_CLICK_CUSTOM_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_CLICK_CUSTOM_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_CLICK_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_CLICK_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_CLICK_LEAD_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_CLICK_LEAD_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_CLICK_SEARCH_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_CLICK_SEARCH_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_CLICK_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_CLICK_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_CLICK_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_CLICK_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_CLICK_APP_INSTALL_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_CLICK_APP_INSTALL_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_VIEW_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_VIEW_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_VIEW_CUSTOM_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_VIEW_CUSTOM_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_VIEW_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_VIEW_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_VIEW_LEAD_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_VIEW_LEAD_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_VIEW_SEARCH_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_VIEW_SEARCH_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_VIEW_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_VIEW_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_VIEW_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_VIEW_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_VIEW_APP_INSTALL_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_VIEW_APP_INSTALL_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_CONVERSIONS_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_CONVERSIONS_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_ENGAGEMENT_PAGE_VISIT_QUANTITY =>
            return "TOTAL_ENGAGEMENT_PAGE_VISIT_QUANTITY";

         when TOTAL_ENGAGEMENT_SIGNUP_QUANTITY =>
            return "TOTAL_ENGAGEMENT_SIGNUP_QUANTITY";

         when TOTAL_ENGAGEMENT_CHECKOUT_QUANTITY =>
            return "TOTAL_ENGAGEMENT_CHECKOUT_QUANTITY";

         when TOTAL_ENGAGEMENT_CUSTOM_QUANTITY =>
            return "TOTAL_ENGAGEMENT_CUSTOM_QUANTITY";

         when TOTAL_ENGAGEMENT_ADD_TO_CART_QUANTITY =>
            return "TOTAL_ENGAGEMENT_ADD_TO_CART_QUANTITY";

         when TOTAL_ENGAGEMENT_LEAD_QUANTITY =>
            return "TOTAL_ENGAGEMENT_LEAD_QUANTITY";

         when TOTAL_ENGAGEMENT_SEARCH_QUANTITY =>
            return "TOTAL_ENGAGEMENT_SEARCH_QUANTITY";

         when TOTAL_ENGAGEMENT_WATCH_VIDEO_QUANTITY =>
            return "TOTAL_ENGAGEMENT_WATCH_VIDEO_QUANTITY";

         when TOTAL_ENGAGEMENT_VIEW_CATEGORY_QUANTITY =>
            return "TOTAL_ENGAGEMENT_VIEW_CATEGORY_QUANTITY";

         when TOTAL_ENGAGEMENT_UNKNOWN_QUANTITY =>
            return "TOTAL_ENGAGEMENT_UNKNOWN_QUANTITY";

         when TOTAL_CLICK_PAGE_VISIT_QUANTITY =>
            return "TOTAL_CLICK_PAGE_VISIT_QUANTITY";

         when TOTAL_CLICK_SIGNUP_QUANTITY =>
            return "TOTAL_CLICK_SIGNUP_QUANTITY";

         when TOTAL_CLICK_CHECKOUT_QUANTITY =>
            return "TOTAL_CLICK_CHECKOUT_QUANTITY";

         when TOTAL_CLICK_CUSTOM_QUANTITY =>
            return "TOTAL_CLICK_CUSTOM_QUANTITY";

         when TOTAL_CLICK_ADD_TO_CART_QUANTITY =>
            return "TOTAL_CLICK_ADD_TO_CART_QUANTITY";

         when TOTAL_CLICK_LEAD_QUANTITY =>
            return "TOTAL_CLICK_LEAD_QUANTITY";

         when TOTAL_CLICK_SEARCH_QUANTITY =>
            return "TOTAL_CLICK_SEARCH_QUANTITY";

         when TOTAL_CLICK_WATCH_VIDEO_QUANTITY =>
            return "TOTAL_CLICK_WATCH_VIDEO_QUANTITY";

         when TOTAL_CLICK_VIEW_CATEGORY_QUANTITY =>
            return "TOTAL_CLICK_VIEW_CATEGORY_QUANTITY";

         when TOTAL_CLICK_UNKNOWN_QUANTITY =>
            return "TOTAL_CLICK_UNKNOWN_QUANTITY";

         when TOTAL_VIEW_PAGE_VISIT_QUANTITY =>
            return "TOTAL_VIEW_PAGE_VISIT_QUANTITY";

         when TOTAL_VIEW_SIGNUP_QUANTITY =>
            return "TOTAL_VIEW_SIGNUP_QUANTITY";

         when TOTAL_VIEW_CHECKOUT_QUANTITY =>
            return "TOTAL_VIEW_CHECKOUT_QUANTITY";

         when TOTAL_VIEW_CUSTOM_QUANTITY =>
            return "TOTAL_VIEW_CUSTOM_QUANTITY";

         when TOTAL_VIEW_ADD_TO_CART_QUANTITY =>
            return "TOTAL_VIEW_ADD_TO_CART_QUANTITY";

         when TOTAL_VIEW_LEAD_QUANTITY =>
            return "TOTAL_VIEW_LEAD_QUANTITY";

         when TOTAL_VIEW_SEARCH_QUANTITY =>
            return "TOTAL_VIEW_SEARCH_QUANTITY";

         when TOTAL_VIEW_WATCH_VIDEO_QUANTITY =>
            return "TOTAL_VIEW_WATCH_VIDEO_QUANTITY";

         when TOTAL_VIEW_VIEW_CATEGORY_QUANTITY =>
            return "TOTAL_VIEW_VIEW_CATEGORY_QUANTITY";

         when TOTAL_VIEW_UNKNOWN_QUANTITY =>
            return "TOTAL_VIEW_UNKNOWN_QUANTITY";

         when TOTAL_CONVERSIONS_QUANTITY =>
            return "TOTAL_CONVERSIONS_QUANTITY";

         when TOTAL_WEB_SESSIONS =>
            return "TOTAL_WEB_SESSIONS";

         when WEB_SESSIONS_1 =>
            return "WEB_SESSIONS_1";

         when WEB_SESSIONS_2 =>
            return "WEB_SESSIONS_2";

         when ONSITE_CHECKOUTS_1 =>
            return "ONSITE_CHECKOUTS_1";

         when PIN_PROMOTION_NAME =>
            return "PIN_PROMOTION_NAME";

         when AD_NAME =>
            return "AD_NAME";

         when CAMPAIGN_LIFETIME_SPEND_CAP =>
            return "CAMPAIGN_LIFETIME_SPEND_CAP";

         when CAMPAIGN_DAILY_SPEND_CAP =>
            return "CAMPAIGN_DAILY_SPEND_CAP";

         when TOTAL_PAGE_VISIT_DESKTOP_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_PAGE_VISIT_DESKTOP_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_PAGE_VISIT_DESKTOP_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_PAGE_VISIT_DESKTOP_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_PAGE_VISIT_DESKTOP_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_PAGE_VISIT_DESKTOP_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_PAGE_VISIT_MOBILE_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_PAGE_VISIT_MOBILE_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_PAGE_VISIT_MOBILE_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_PAGE_VISIT_MOBILE_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_PAGE_VISIT_MOBILE_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_PAGE_VISIT_MOBILE_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_PAGE_VISIT_TABLET_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_PAGE_VISIT_TABLET_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_PAGE_VISIT_TABLET_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_PAGE_VISIT_TABLET_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_PAGE_VISIT_TABLET_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_PAGE_VISIT_TABLET_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_SIGNUP_DESKTOP_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_SIGNUP_DESKTOP_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_SIGNUP_DESKTOP_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_SIGNUP_DESKTOP_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_SIGNUP_DESKTOP_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_SIGNUP_DESKTOP_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_SIGNUP_MOBILE_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_SIGNUP_MOBILE_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_SIGNUP_MOBILE_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_SIGNUP_MOBILE_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_SIGNUP_MOBILE_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_SIGNUP_MOBILE_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_SIGNUP_TABLET_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_SIGNUP_TABLET_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_SIGNUP_TABLET_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_SIGNUP_TABLET_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_SIGNUP_TABLET_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_SIGNUP_TABLET_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_CHECKOUT_DESKTOP_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_CHECKOUT_DESKTOP_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_CHECKOUT_DESKTOP_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_CHECKOUT_DESKTOP_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_CHECKOUT_DESKTOP_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_CHECKOUT_DESKTOP_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_CHECKOUT_MOBILE_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_CHECKOUT_MOBILE_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_CHECKOUT_MOBILE_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_CHECKOUT_MOBILE_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_CHECKOUT_MOBILE_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_CHECKOUT_MOBILE_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_CHECKOUT_TABLET_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_CHECKOUT_TABLET_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_CHECKOUT_TABLET_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_CHECKOUT_TABLET_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_CHECKOUT_TABLET_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_CHECKOUT_TABLET_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_CUSTOM_DESKTOP_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_CUSTOM_DESKTOP_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_CUSTOM_DESKTOP_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_CUSTOM_DESKTOP_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_CUSTOM_DESKTOP_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_CUSTOM_DESKTOP_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_CUSTOM_MOBILE_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_CUSTOM_MOBILE_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_CUSTOM_MOBILE_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_CUSTOM_MOBILE_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_CUSTOM_MOBILE_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_CUSTOM_MOBILE_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_CUSTOM_TABLET_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_CUSTOM_TABLET_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_CUSTOM_TABLET_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_CUSTOM_TABLET_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_CUSTOM_TABLET_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_CUSTOM_TABLET_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_ADD_TO_CART_DESKTOP_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_ADD_TO_CART_DESKTOP_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_ADD_TO_CART_DESKTOP_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_ADD_TO_CART_DESKTOP_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_ADD_TO_CART_DESKTOP_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_ADD_TO_CART_DESKTOP_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_ADD_TO_CART_MOBILE_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_ADD_TO_CART_MOBILE_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_ADD_TO_CART_MOBILE_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_ADD_TO_CART_MOBILE_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_ADD_TO_CART_MOBILE_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_ADD_TO_CART_MOBILE_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_ADD_TO_CART_TABLET_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_ADD_TO_CART_TABLET_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_ADD_TO_CART_TABLET_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_ADD_TO_CART_TABLET_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_ADD_TO_CART_TABLET_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_ADD_TO_CART_TABLET_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_LEAD_DESKTOP_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_LEAD_DESKTOP_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_LEAD_DESKTOP_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_LEAD_DESKTOP_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_LEAD_DESKTOP_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_LEAD_DESKTOP_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_LEAD_MOBILE_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_LEAD_MOBILE_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_LEAD_MOBILE_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_LEAD_MOBILE_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_LEAD_MOBILE_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_LEAD_MOBILE_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_LEAD_TABLET_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_LEAD_TABLET_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_LEAD_TABLET_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_LEAD_TABLET_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_LEAD_TABLET_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_LEAD_TABLET_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_SEARCH_DESKTOP_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_SEARCH_DESKTOP_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_SEARCH_DESKTOP_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_SEARCH_DESKTOP_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_SEARCH_DESKTOP_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_SEARCH_DESKTOP_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_SEARCH_MOBILE_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_SEARCH_MOBILE_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_SEARCH_MOBILE_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_SEARCH_MOBILE_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_SEARCH_MOBILE_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_SEARCH_MOBILE_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_SEARCH_TABLET_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_SEARCH_TABLET_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_SEARCH_TABLET_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_SEARCH_TABLET_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_SEARCH_TABLET_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_SEARCH_TABLET_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_WATCH_VIDEO_DESKTOP_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_WATCH_VIDEO_DESKTOP_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_WATCH_VIDEO_DESKTOP_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_WATCH_VIDEO_DESKTOP_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_WATCH_VIDEO_DESKTOP_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_WATCH_VIDEO_DESKTOP_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_WATCH_VIDEO_MOBILE_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_WATCH_VIDEO_MOBILE_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_WATCH_VIDEO_MOBILE_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_WATCH_VIDEO_MOBILE_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_WATCH_VIDEO_MOBILE_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_WATCH_VIDEO_MOBILE_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_WATCH_VIDEO_TABLET_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_WATCH_VIDEO_TABLET_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_WATCH_VIDEO_TABLET_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_WATCH_VIDEO_TABLET_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_WATCH_VIDEO_TABLET_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_WATCH_VIDEO_TABLET_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_VIEW_CATEGORY_DESKTOP_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_VIEW_CATEGORY_DESKTOP_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_VIEW_CATEGORY_DESKTOP_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_VIEW_CATEGORY_DESKTOP_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_VIEW_CATEGORY_DESKTOP_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_VIEW_CATEGORY_DESKTOP_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_VIEW_CATEGORY_MOBILE_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_VIEW_CATEGORY_MOBILE_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_VIEW_CATEGORY_MOBILE_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_VIEW_CATEGORY_MOBILE_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_VIEW_CATEGORY_MOBILE_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_VIEW_CATEGORY_MOBILE_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_VIEW_CATEGORY_TABLET_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_VIEW_CATEGORY_TABLET_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_VIEW_CATEGORY_TABLET_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_VIEW_CATEGORY_TABLET_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_VIEW_CATEGORY_TABLET_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_VIEW_CATEGORY_TABLET_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_APP_INSTALL_DESKTOP_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_APP_INSTALL_DESKTOP_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_APP_INSTALL_DESKTOP_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_APP_INSTALL_DESKTOP_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_APP_INSTALL_DESKTOP_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_APP_INSTALL_DESKTOP_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_APP_INSTALL_MOBILE_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_APP_INSTALL_MOBILE_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_APP_INSTALL_MOBILE_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_APP_INSTALL_MOBILE_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_APP_INSTALL_MOBILE_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_APP_INSTALL_MOBILE_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_APP_INSTALL_TABLET_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_APP_INSTALL_TABLET_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_APP_INSTALL_TABLET_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_APP_INSTALL_TABLET_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_APP_INSTALL_TABLET_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_APP_INSTALL_TABLET_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_UNKNOWN_DESKTOP_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_UNKNOWN_DESKTOP_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_UNKNOWN_DESKTOP_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_UNKNOWN_DESKTOP_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_UNKNOWN_DESKTOP_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_UNKNOWN_DESKTOP_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_UNKNOWN_MOBILE_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_UNKNOWN_MOBILE_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_UNKNOWN_MOBILE_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_UNKNOWN_MOBILE_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_UNKNOWN_MOBILE_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_UNKNOWN_MOBILE_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_UNKNOWN_TABLET_ACTION_TO_DESKTOP_CONVERSION =>
            return "TOTAL_UNKNOWN_TABLET_ACTION_TO_DESKTOP_CONVERSION";

         when TOTAL_UNKNOWN_TABLET_ACTION_TO_MOBILE_CONVERSION =>
            return "TOTAL_UNKNOWN_TABLET_ACTION_TO_MOBILE_CONVERSION";

         when TOTAL_UNKNOWN_TABLET_ACTION_TO_TABLET_CONVERSION =>
            return "TOTAL_UNKNOWN_TABLET_ACTION_TO_TABLET_CONVERSION";

         when TOTAL_PAGE_VISIT =>
            return "TOTAL_PAGE_VISIT";

         when TOTAL_SIGNUP =>
            return "TOTAL_SIGNUP";

         when TOTAL_CHECKOUT =>
            return "TOTAL_CHECKOUT";

         when TOTAL_CUSTOM =>
            return "TOTAL_CUSTOM";

         when TOTAL_ADD_TO_CART =>
            return "TOTAL_ADD_TO_CART";

         when TOTAL_LEAD =>
            return "TOTAL_LEAD";

         when TOTAL_SEARCH =>
            return "TOTAL_SEARCH";

         when TOTAL_WATCH_VIDEO =>
            return "TOTAL_WATCH_VIDEO";

         when TOTAL_VIEW_CATEGORY =>
            return "TOTAL_VIEW_CATEGORY";

         when TOTAL_APP_INSTALL =>
            return "TOTAL_APP_INSTALL";

         when TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_LEAD_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_LEAD_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_SEARCH_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_SEARCH_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_APP_INSTALL_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_APP_INSTALL_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_CHECKOUT_QUANTITY =>
            return "TOTAL_CHECKOUT_QUANTITY";

         when PAGE_VISIT_COST_PER_ACTION =>
            return "PAGE_VISIT_COST_PER_ACTION";

         when APP_INSTALL_COST_PER_ACTION =>
            return "APP_INSTALL_COST_PER_ACTION";

         when PAGE_VISIT_ROAS =>
            return "PAGE_VISIT_ROAS";

         when CHECKOUT_ROAS =>
            return "CHECKOUT_ROAS";

         when CUSTOM_ROAS =>
            return "CUSTOM_ROAS";

         when VIDEO_3SEC_VIEWS_1 =>
            return "VIDEO_3SEC_VIEWS_1";

         when VIDEO_P100_COMPLETE_1 =>
            return "VIDEO_P100_COMPLETE_1";

         when VIDEO_P0_COMBINED_1 =>
            return "VIDEO_P0_COMBINED_1";

         when VIDEO_P25_COMBINED_1 =>
            return "VIDEO_P25_COMBINED_1";

         when VIDEO_P50_COMBINED_1 =>
            return "VIDEO_P50_COMBINED_1";

         when VIDEO_P75_COMBINED_1 =>
            return "VIDEO_P75_COMBINED_1";

         when VIDEO_P95_COMBINED_1 =>
            return "VIDEO_P95_COMBINED_1";

         when VIDEO_MRC_VIEWS_1 =>
            return "VIDEO_MRC_VIEWS_1";

         when VIDEO_3SEC_VIEWS_2 =>
            return "VIDEO_3SEC_VIEWS_2";

         when VIDEO_P100_COMPLETE_2 =>
            return "VIDEO_P100_COMPLETE_2";

         when VIDEO_P0_COMBINED_2 =>
            return "VIDEO_P0_COMBINED_2";

         when VIDEO_P25_COMBINED_2 =>
            return "VIDEO_P25_COMBINED_2";

         when VIDEO_P50_COMBINED_2 =>
            return "VIDEO_P50_COMBINED_2";

         when VIDEO_P75_COMBINED_2 =>
            return "VIDEO_P75_COMBINED_2";

         when VIDEO_P95_COMBINED_2 =>
            return "VIDEO_P95_COMBINED_2";

         when VIDEO_MRC_VIEWS_2 =>
            return "VIDEO_MRC_VIEWS_2";

         when PAID_VIDEO_VIEWABLE_RATE =>
            return "PAID_VIDEO_VIEWABLE_RATE";

         when VIDEO_LENGTH =>
            return "VIDEO_LENGTH";

         when CPV_IN_MICRO_DOLLAR =>
            return "CPV_IN_MICRO_DOLLAR";

         when ECPV_IN_DOLLAR =>
            return "ECPV_IN_DOLLAR";

         when CPCV_IN_MICRO_DOLLAR =>
            return "CPCV_IN_MICRO_DOLLAR";

         when ECPCV_IN_DOLLAR =>
            return "ECPCV_IN_DOLLAR";

         when CPCV_P95_IN_MICRO_DOLLAR =>
            return "CPCV_P95_IN_MICRO_DOLLAR";

         when ECPCV_P95_IN_DOLLAR =>
            return "ECPCV_P95_IN_DOLLAR";

         when TOTAL_VIDEO_3SEC_VIEWS =>
            return "TOTAL_VIDEO_3SEC_VIEWS";

         when TOTAL_VIDEO_P100_COMPLETE =>
            return "TOTAL_VIDEO_P100_COMPLETE";

         when TOTAL_VIDEO_P0_COMBINED =>
            return "TOTAL_VIDEO_P0_COMBINED";

         when TOTAL_VIDEO_P25_COMBINED =>
            return "TOTAL_VIDEO_P25_COMBINED";

         when TOTAL_VIDEO_P50_COMBINED =>
            return "TOTAL_VIDEO_P50_COMBINED";

         when TOTAL_VIDEO_P75_COMBINED =>
            return "TOTAL_VIDEO_P75_COMBINED";

         when TOTAL_VIDEO_P95_COMBINED =>
            return "TOTAL_VIDEO_P95_COMBINED";

         when TOTAL_VIDEO_MRC_VIEWS =>
            return "TOTAL_VIDEO_MRC_VIEWS";

         when VIDEO_AVG_WATCHTIME_IN_SECOND_1 =>
            return "VIDEO_AVG_WATCHTIME_IN_SECOND_1";

         when VIDEO_AVG_WATCHTIME_IN_SECOND_2 =>
            return "VIDEO_AVG_WATCHTIME_IN_SECOND_2";

         when TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND =>
            return "TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND";

         when TOTAL_DESTINATION_VIEWS =>
            return "TOTAL_DESTINATION_VIEWS";

         when TOTAL_REPIN_RATE =>
            return "TOTAL_REPIN_RATE";

         when WEB_CHECKOUT_COST_PER_ACTION =>
            return "WEB_CHECKOUT_COST_PER_ACTION";

         when WEB_CHECKOUT_ROAS =>
            return "WEB_CHECKOUT_ROAS";

         when TOTAL_WEB_CHECKOUT =>
            return "TOTAL_WEB_CHECKOUT";

         when TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_WEB_CLICK_CHECKOUT =>
            return "TOTAL_WEB_CLICK_CHECKOUT";

         when TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_WEB_ENGAGEMENT_CHECKOUT =>
            return "TOTAL_WEB_ENGAGEMENT_CHECKOUT";

         when TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_WEB_VIEW_CHECKOUT =>
            return "TOTAL_WEB_VIEW_CHECKOUT";

         when TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR";

         when INAPP_CHECKOUT_COST_PER_ACTION =>
            return "INAPP_CHECKOUT_COST_PER_ACTION";

         when INAPP_CHECKOUT_ROAS =>
            return "INAPP_CHECKOUT_ROAS";

         when TOTAL_INAPP_CHECKOUT =>
            return "TOTAL_INAPP_CHECKOUT";

         when TOTAL_INAPP_CHECKOUT_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_INAPP_CHECKOUT_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_INAPP_CLICK_CHECKOUT =>
            return "TOTAL_INAPP_CLICK_CHECKOUT";

         when TOTAL_INAPP_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_INAPP_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_INAPP_ENGAGEMENT_CHECKOUT =>
            return "TOTAL_INAPP_ENGAGEMENT_CHECKOUT";

         when TOTAL_INAPP_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_INAPP_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_INAPP_VIEW_CHECKOUT =>
            return "TOTAL_INAPP_VIEW_CHECKOUT";

         when TOTAL_INAPP_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_INAPP_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR";

         when OFFLINE_CHECKOUT_COST_PER_ACTION =>
            return "OFFLINE_CHECKOUT_COST_PER_ACTION";

         when OFFLINE_CHECKOUT_ROAS =>
            return "OFFLINE_CHECKOUT_ROAS";

         when TOTAL_OFFLINE_CHECKOUT =>
            return "TOTAL_OFFLINE_CHECKOUT";

         when TOTAL_OFFLINE_CHECKOUT_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_OFFLINE_CHECKOUT_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_OFFLINE_CLICK_CHECKOUT =>
            return "TOTAL_OFFLINE_CLICK_CHECKOUT";

         when TOTAL_OFFLINE_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_OFFLINE_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_OFFLINE_ENGAGEMENT_CHECKOUT =>
            return "TOTAL_OFFLINE_ENGAGEMENT_CHECKOUT";

         when TOTAL_OFFLINE_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_OFFLINE_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_OFFLINE_VIEW_CHECKOUT =>
            return "TOTAL_OFFLINE_VIEW_CHECKOUT";

         when TOTAL_OFFLINE_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_OFFLINE_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR";

         when PINTEREST_CHECKOUT_COST_PER_ACTION =>
            return "PINTEREST_CHECKOUT_COST_PER_ACTION";

         when PINTEREST_CHECKOUT_ROAS =>
            return "PINTEREST_CHECKOUT_ROAS";

         when TOTAL_PINTEREST_CHECKOUT =>
            return "TOTAL_PINTEREST_CHECKOUT";

         when TOTAL_PINTEREST_CHECKOUT_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_PINTEREST_CHECKOUT_VALUE_IN_MICRO_DOLLAR";

         when WEB_ADD_TO_CART_COST_PER_ACTION =>
            return "WEB_ADD_TO_CART_COST_PER_ACTION";

         when WEB_ADD_TO_CART_ROAS =>
            return "WEB_ADD_TO_CART_ROAS";

         when TOTAL_WEB_ADD_TO_CART =>
            return "TOTAL_WEB_ADD_TO_CART";

         when TOTAL_WEB_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_WEB_CLICK_ADD_TO_CART =>
            return "TOTAL_WEB_CLICK_ADD_TO_CART";

         when TOTAL_WEB_CLICK_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_CLICK_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_WEB_ENGAGEMENT_ADD_TO_CART =>
            return "TOTAL_WEB_ENGAGEMENT_ADD_TO_CART";

         when TOTAL_WEB_ENGAGEMENT_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_ENGAGEMENT_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_WEB_VIEW_ADD_TO_CART =>
            return "TOTAL_WEB_VIEW_ADD_TO_CART";

         when TOTAL_WEB_VIEW_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_VIEW_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR";

         when INAPP_ADD_TO_CART_COST_PER_ACTION =>
            return "INAPP_ADD_TO_CART_COST_PER_ACTION";

         when INAPP_ADD_TO_CART_ROAS =>
            return "INAPP_ADD_TO_CART_ROAS";

         when TOTAL_INAPP_ADD_TO_CART =>
            return "TOTAL_INAPP_ADD_TO_CART";

         when TOTAL_INAPP_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_INAPP_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_INAPP_CLICK_ADD_TO_CART =>
            return "TOTAL_INAPP_CLICK_ADD_TO_CART";

         when TOTAL_INAPP_CLICK_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_INAPP_CLICK_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_INAPP_ENGAGEMENT_ADD_TO_CART =>
            return "TOTAL_INAPP_ENGAGEMENT_ADD_TO_CART";

         when TOTAL_INAPP_ENGAGEMENT_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_INAPP_ENGAGEMENT_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_INAPP_VIEW_ADD_TO_CART =>
            return "TOTAL_INAPP_VIEW_ADD_TO_CART";

         when TOTAL_INAPP_VIEW_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_INAPP_VIEW_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR";

         when WEB_PAGE_VISIT_COST_PER_ACTION =>
            return "WEB_PAGE_VISIT_COST_PER_ACTION";

         when WEB_PAGE_VISIT_ROAS =>
            return "WEB_PAGE_VISIT_ROAS";

         when TOTAL_WEB_PAGE_VISIT =>
            return "TOTAL_WEB_PAGE_VISIT";

         when TOTAL_WEB_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_WEB_CLICK_PAGE_VISIT =>
            return "TOTAL_WEB_CLICK_PAGE_VISIT";

         when TOTAL_WEB_CLICK_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_CLICK_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_WEB_ENGAGEMENT_PAGE_VISIT =>
            return "TOTAL_WEB_ENGAGEMENT_PAGE_VISIT";

         when TOTAL_WEB_ENGAGEMENT_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_ENGAGEMENT_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_WEB_VIEW_PAGE_VISIT =>
            return "TOTAL_WEB_VIEW_PAGE_VISIT";

         when TOTAL_WEB_VIEW_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_VIEW_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR";

         when WEB_SIGNUP_COST_PER_ACTION =>
            return "WEB_SIGNUP_COST_PER_ACTION";

         when WEB_SIGNUP_ROAS =>
            return "WEB_SIGNUP_ROAS";

         when TOTAL_WEB_SIGNUP =>
            return "TOTAL_WEB_SIGNUP";

         when TOTAL_WEB_SIGNUP_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_SIGNUP_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_WEB_CLICK_SIGNUP =>
            return "TOTAL_WEB_CLICK_SIGNUP";

         when TOTAL_WEB_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_WEB_ENGAGEMENT_SIGNUP =>
            return "TOTAL_WEB_ENGAGEMENT_SIGNUP";

         when TOTAL_WEB_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_WEB_VIEW_SIGNUP =>
            return "TOTAL_WEB_VIEW_SIGNUP";

         when TOTAL_WEB_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR";

         when INAPP_SIGNUP_COST_PER_ACTION =>
            return "INAPP_SIGNUP_COST_PER_ACTION";

         when INAPP_SIGNUP_ROAS =>
            return "INAPP_SIGNUP_ROAS";

         when TOTAL_INAPP_SIGNUP =>
            return "TOTAL_INAPP_SIGNUP";

         when TOTAL_INAPP_SIGNUP_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_INAPP_SIGNUP_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_INAPP_CLICK_SIGNUP =>
            return "TOTAL_INAPP_CLICK_SIGNUP";

         when TOTAL_INAPP_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_INAPP_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_INAPP_ENGAGEMENT_SIGNUP =>
            return "TOTAL_INAPP_ENGAGEMENT_SIGNUP";

         when TOTAL_INAPP_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_INAPP_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_INAPP_VIEW_SIGNUP =>
            return "TOTAL_INAPP_VIEW_SIGNUP";

         when TOTAL_INAPP_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_INAPP_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR";

         when OFFLINE_SIGNUP_COST_PER_ACTION =>
            return "OFFLINE_SIGNUP_COST_PER_ACTION";

         when OFFLINE_SIGNUP_ROAS =>
            return "OFFLINE_SIGNUP_ROAS";

         when TOTAL_OFFLINE_SIGNUP =>
            return "TOTAL_OFFLINE_SIGNUP";

         when TOTAL_OFFLINE_SIGNUP_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_OFFLINE_SIGNUP_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_OFFLINE_CLICK_SIGNUP =>
            return "TOTAL_OFFLINE_CLICK_SIGNUP";

         when TOTAL_OFFLINE_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_OFFLINE_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_OFFLINE_ENGAGEMENT_SIGNUP =>
            return "TOTAL_OFFLINE_ENGAGEMENT_SIGNUP";

         when TOTAL_OFFLINE_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_OFFLINE_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_OFFLINE_VIEW_SIGNUP =>
            return "TOTAL_OFFLINE_VIEW_SIGNUP";

         when TOTAL_OFFLINE_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_OFFLINE_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR";

         when WEB_WATCH_VIDEO_COST_PER_ACTION =>
            return "WEB_WATCH_VIDEO_COST_PER_ACTION";

         when WEB_WATCH_VIDEO_ROAS =>
            return "WEB_WATCH_VIDEO_ROAS";

         when TOTAL_WEB_WATCH_VIDEO =>
            return "TOTAL_WEB_WATCH_VIDEO";

         when TOTAL_WEB_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_WEB_CLICK_WATCH_VIDEO =>
            return "TOTAL_WEB_CLICK_WATCH_VIDEO";

         when TOTAL_WEB_CLICK_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_CLICK_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_WEB_ENGAGEMENT_WATCH_VIDEO =>
            return "TOTAL_WEB_ENGAGEMENT_WATCH_VIDEO";

         when TOTAL_WEB_ENGAGEMENT_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_ENGAGEMENT_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_WEB_VIEW_WATCH_VIDEO =>
            return "TOTAL_WEB_VIEW_WATCH_VIDEO";

         when TOTAL_WEB_VIEW_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_VIEW_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR";

         when WEB_LEAD_COST_PER_ACTION =>
            return "WEB_LEAD_COST_PER_ACTION";

         when WEB_LEAD_ROAS =>
            return "WEB_LEAD_ROAS";

         when TOTAL_WEB_LEAD =>
            return "TOTAL_WEB_LEAD";

         when TOTAL_WEB_LEAD_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_LEAD_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_WEB_CLICK_LEAD =>
            return "TOTAL_WEB_CLICK_LEAD";

         when TOTAL_WEB_CLICK_LEAD_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_CLICK_LEAD_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_WEB_ENGAGEMENT_LEAD =>
            return "TOTAL_WEB_ENGAGEMENT_LEAD";

         when TOTAL_WEB_ENGAGEMENT_LEAD_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_ENGAGEMENT_LEAD_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_WEB_VIEW_LEAD =>
            return "TOTAL_WEB_VIEW_LEAD";

         when TOTAL_WEB_VIEW_LEAD_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_VIEW_LEAD_VALUE_IN_MICRO_DOLLAR";

         when OFFLINE_LEAD_COST_PER_ACTION =>
            return "OFFLINE_LEAD_COST_PER_ACTION";

         when OFFLINE_LEAD_ROAS =>
            return "OFFLINE_LEAD_ROAS";

         when TOTAL_OFFLINE_LEAD =>
            return "TOTAL_OFFLINE_LEAD";

         when TOTAL_OFFLINE_LEAD_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_OFFLINE_LEAD_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_OFFLINE_CLICK_LEAD =>
            return "TOTAL_OFFLINE_CLICK_LEAD";

         when TOTAL_OFFLINE_CLICK_LEAD_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_OFFLINE_CLICK_LEAD_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_OFFLINE_ENGAGEMENT_LEAD =>
            return "TOTAL_OFFLINE_ENGAGEMENT_LEAD";

         when TOTAL_OFFLINE_ENGAGEMENT_LEAD_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_OFFLINE_ENGAGEMENT_LEAD_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_OFFLINE_VIEW_LEAD =>
            return "TOTAL_OFFLINE_VIEW_LEAD";

         when TOTAL_OFFLINE_VIEW_LEAD_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_OFFLINE_VIEW_LEAD_VALUE_IN_MICRO_DOLLAR";

         when WEB_SEARCH_COST_PER_ACTION =>
            return "WEB_SEARCH_COST_PER_ACTION";

         when WEB_SEARCH_ROAS =>
            return "WEB_SEARCH_ROAS";

         when TOTAL_WEB_SEARCH =>
            return "TOTAL_WEB_SEARCH";

         when TOTAL_WEB_SEARCH_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_SEARCH_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_WEB_CLICK_SEARCH =>
            return "TOTAL_WEB_CLICK_SEARCH";

         when TOTAL_WEB_CLICK_SEARCH_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_CLICK_SEARCH_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_WEB_ENGAGEMENT_SEARCH =>
            return "TOTAL_WEB_ENGAGEMENT_SEARCH";

         when TOTAL_WEB_ENGAGEMENT_SEARCH_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_ENGAGEMENT_SEARCH_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_WEB_VIEW_SEARCH =>
            return "TOTAL_WEB_VIEW_SEARCH";

         when TOTAL_WEB_VIEW_SEARCH_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_VIEW_SEARCH_VALUE_IN_MICRO_DOLLAR";

         when INAPP_SEARCH_COST_PER_ACTION =>
            return "INAPP_SEARCH_COST_PER_ACTION";

         when INAPP_SEARCH_ROAS =>
            return "INAPP_SEARCH_ROAS";

         when TOTAL_INAPP_SEARCH =>
            return "TOTAL_INAPP_SEARCH";

         when TOTAL_INAPP_SEARCH_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_INAPP_SEARCH_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_INAPP_CLICK_SEARCH =>
            return "TOTAL_INAPP_CLICK_SEARCH";

         when TOTAL_INAPP_CLICK_SEARCH_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_INAPP_CLICK_SEARCH_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_INAPP_ENGAGEMENT_SEARCH =>
            return "TOTAL_INAPP_ENGAGEMENT_SEARCH";

         when TOTAL_INAPP_ENGAGEMENT_SEARCH_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_INAPP_ENGAGEMENT_SEARCH_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_INAPP_VIEW_SEARCH =>
            return "TOTAL_INAPP_VIEW_SEARCH";

         when TOTAL_INAPP_VIEW_SEARCH_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_INAPP_VIEW_SEARCH_VALUE_IN_MICRO_DOLLAR";

         when WEB_VIEW_CATEGORY_COST_PER_ACTION =>
            return "WEB_VIEW_CATEGORY_COST_PER_ACTION";

         when WEB_VIEW_CATEGORY_ROAS =>
            return "WEB_VIEW_CATEGORY_ROAS";

         when TOTAL_WEB_VIEW_CATEGORY =>
            return "TOTAL_WEB_VIEW_CATEGORY";

         when TOTAL_WEB_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_WEB_CLICK_VIEW_CATEGORY =>
            return "TOTAL_WEB_CLICK_VIEW_CATEGORY";

         when TOTAL_WEB_CLICK_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_CLICK_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_WEB_ENGAGEMENT_VIEW_CATEGORY =>
            return "TOTAL_WEB_ENGAGEMENT_VIEW_CATEGORY";

         when TOTAL_WEB_ENGAGEMENT_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_ENGAGEMENT_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_WEB_VIEW_VIEW_CATEGORY =>
            return "TOTAL_WEB_VIEW_VIEW_CATEGORY";

         when TOTAL_WEB_VIEW_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_VIEW_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR";

         when WEB_CUSTOM_COST_PER_ACTION =>
            return "WEB_CUSTOM_COST_PER_ACTION";

         when WEB_CUSTOM_ROAS =>
            return "WEB_CUSTOM_ROAS";

         when TOTAL_WEB_CUSTOM =>
            return "TOTAL_WEB_CUSTOM";

         when TOTAL_WEB_CUSTOM_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_CUSTOM_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_WEB_CLICK_CUSTOM =>
            return "TOTAL_WEB_CLICK_CUSTOM";

         when TOTAL_WEB_CLICK_CUSTOM_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_CLICK_CUSTOM_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_WEB_ENGAGEMENT_CUSTOM =>
            return "TOTAL_WEB_ENGAGEMENT_CUSTOM";

         when TOTAL_WEB_ENGAGEMENT_CUSTOM_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_ENGAGEMENT_CUSTOM_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_WEB_VIEW_CUSTOM =>
            return "TOTAL_WEB_VIEW_CUSTOM";

         when TOTAL_WEB_VIEW_CUSTOM_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_VIEW_CUSTOM_VALUE_IN_MICRO_DOLLAR";

         when OFFLINE_CUSTOM_COST_PER_ACTION =>
            return "OFFLINE_CUSTOM_COST_PER_ACTION";

         when OFFLINE_CUSTOM_ROAS =>
            return "OFFLINE_CUSTOM_ROAS";

         when TOTAL_OFFLINE_CUSTOM =>
            return "TOTAL_OFFLINE_CUSTOM";

         when TOTAL_OFFLINE_CUSTOM_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_OFFLINE_CUSTOM_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_OFFLINE_CLICK_CUSTOM =>
            return "TOTAL_OFFLINE_CLICK_CUSTOM";

         when TOTAL_OFFLINE_CLICK_CUSTOM_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_OFFLINE_CLICK_CUSTOM_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_OFFLINE_ENGAGEMENT_CUSTOM =>
            return "TOTAL_OFFLINE_ENGAGEMENT_CUSTOM";

         when TOTAL_OFFLINE_ENGAGEMENT_CUSTOM_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_OFFLINE_ENGAGEMENT_CUSTOM_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_OFFLINE_VIEW_CUSTOM =>
            return "TOTAL_OFFLINE_VIEW_CUSTOM";

         when TOTAL_OFFLINE_VIEW_CUSTOM_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_OFFLINE_VIEW_CUSTOM_VALUE_IN_MICRO_DOLLAR";

         when WEB_UNKNOWN_COST_PER_ACTION =>
            return "WEB_UNKNOWN_COST_PER_ACTION";

         when WEB_UNKNOWN_ROAS =>
            return "WEB_UNKNOWN_ROAS";

         when TOTAL_WEB_UNKNOWN =>
            return "TOTAL_WEB_UNKNOWN";

         when TOTAL_WEB_UNKNOWN_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_UNKNOWN_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_WEB_CLICK_UNKNOWN =>
            return "TOTAL_WEB_CLICK_UNKNOWN";

         when TOTAL_WEB_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_WEB_ENGAGEMENT_UNKNOWN =>
            return "TOTAL_WEB_ENGAGEMENT_UNKNOWN";

         when TOTAL_WEB_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_WEB_VIEW_UNKNOWN =>
            return "TOTAL_WEB_VIEW_UNKNOWN";

         when TOTAL_WEB_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_WEB_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR";

         when INAPP_UNKNOWN_COST_PER_ACTION =>
            return "INAPP_UNKNOWN_COST_PER_ACTION";

         when INAPP_UNKNOWN_ROAS =>
            return "INAPP_UNKNOWN_ROAS";

         when TOTAL_INAPP_UNKNOWN =>
            return "TOTAL_INAPP_UNKNOWN";

         when TOTAL_INAPP_UNKNOWN_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_INAPP_UNKNOWN_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_INAPP_CLICK_UNKNOWN =>
            return "TOTAL_INAPP_CLICK_UNKNOWN";

         when TOTAL_INAPP_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_INAPP_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_INAPP_ENGAGEMENT_UNKNOWN =>
            return "TOTAL_INAPP_ENGAGEMENT_UNKNOWN";

         when TOTAL_INAPP_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_INAPP_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_INAPP_VIEW_UNKNOWN =>
            return "TOTAL_INAPP_VIEW_UNKNOWN";

         when TOTAL_INAPP_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_INAPP_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR";

         when OFFLINE_UNKNOWN_COST_PER_ACTION =>
            return "OFFLINE_UNKNOWN_COST_PER_ACTION";

         when OFFLINE_UNKNOWN_ROAS =>
            return "OFFLINE_UNKNOWN_ROAS";

         when TOTAL_OFFLINE_UNKNOWN =>
            return "TOTAL_OFFLINE_UNKNOWN";

         when TOTAL_OFFLINE_UNKNOWN_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_OFFLINE_UNKNOWN_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_OFFLINE_CLICK_UNKNOWN =>
            return "TOTAL_OFFLINE_CLICK_UNKNOWN";

         when TOTAL_OFFLINE_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_OFFLINE_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_OFFLINE_ENGAGEMENT_UNKNOWN =>
            return "TOTAL_OFFLINE_ENGAGEMENT_UNKNOWN";

         when TOTAL_OFFLINE_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_OFFLINE_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_OFFLINE_VIEW_UNKNOWN =>
            return "TOTAL_OFFLINE_VIEW_UNKNOWN";

         when TOTAL_OFFLINE_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_OFFLINE_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR";

         when INAPP_APP_INSTALL_COST_PER_ACTION =>
            return "INAPP_APP_INSTALL_COST_PER_ACTION";

         when INAPP_APP_INSTALL_ROAS =>
            return "INAPP_APP_INSTALL_ROAS";

         when TOTAL_INAPP_APP_INSTALL =>
            return "TOTAL_INAPP_APP_INSTALL";

         when TOTAL_INAPP_APP_INSTALL_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_INAPP_APP_INSTALL_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_INAPP_CLICK_APP_INSTALL =>
            return "TOTAL_INAPP_CLICK_APP_INSTALL";

         when TOTAL_INAPP_CLICK_APP_INSTALL_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_INAPP_CLICK_APP_INSTALL_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_INAPP_ENGAGEMENT_APP_INSTALL =>
            return "TOTAL_INAPP_ENGAGEMENT_APP_INSTALL";

         when TOTAL_INAPP_ENGAGEMENT_APP_INSTALL_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_INAPP_ENGAGEMENT_APP_INSTALL_VALUE_IN_MICRO_DOLLAR";

         when TOTAL_INAPP_VIEW_APP_INSTALL =>
            return "TOTAL_INAPP_VIEW_APP_INSTALL";

         when TOTAL_INAPP_VIEW_APP_INSTALL_VALUE_IN_MICRO_DOLLAR =>
            return "TOTAL_INAPP_VIEW_APP_INSTALL_VALUE_IN_MICRO_DOLLAR";

         when IDEA_PIN_PRODUCT_TAG_VISIT_1 =>
            return "IDEA_PIN_PRODUCT_TAG_VISIT_1";

         when IDEA_PIN_PRODUCT_TAG_VISIT_2 =>
            return "IDEA_PIN_PRODUCT_TAG_VISIT_2";

         when TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT =>
            return "TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT";

         when LEADS =>
            return "LEADS";

         when COST_PER_LEAD =>
            return "COST_PER_LEAD";

         when QUIZ_COMPLETED =>
            return "QUIZ_COMPLETED";

         when QUIZ_COMPLETION_RATE =>
            return "QUIZ_COMPLETION_RATE";

         when SHOWCASE_PIN_CLICKTHROUGH =>
            return "SHOWCASE_PIN_CLICKTHROUGH";

         when SHOWCASE_SUBPAGE_CLICKTHROUGH =>
            return "SHOWCASE_SUBPAGE_CLICKTHROUGH";

         when SHOWCASE_SUBPIN_CLICKTHROUGH =>
            return "SHOWCASE_SUBPIN_CLICKTHROUGH";

         when SHOWCASE_SUBPAGE_IMPRESSION =>
            return "SHOWCASE_SUBPAGE_IMPRESSION";

         when SHOWCASE_SUBPIN_IMPRESSION =>
            return "SHOWCASE_SUBPIN_IMPRESSION";

         when SHOWCASE_SUBPAGE_SWIPE_LEFT =>
            return "SHOWCASE_SUBPAGE_SWIPE_LEFT";

         when SHOWCASE_SUBPAGE_SWIPE_RIGHT =>
            return "SHOWCASE_SUBPAGE_SWIPE_RIGHT";

         when SHOWCASE_SUBPIN_SWIPE_LEFT =>
            return "SHOWCASE_SUBPIN_SWIPE_LEFT";

         when SHOWCASE_SUBPIN_SWIPE_RIGHT =>
            return "SHOWCASE_SUBPIN_SWIPE_RIGHT";

         when SHOWCASE_SUBPAGE_REPIN =>
            return "SHOWCASE_SUBPAGE_REPIN";

         when SHOWCASE_SUBPIN_REPIN =>
            return "SHOWCASE_SUBPIN_REPIN";

         when SHOWCASE_SUBPAGE_CLOSEUP =>
            return "SHOWCASE_SUBPAGE_CLOSEUP";

         when SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD =>
            return "SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD";

         when SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD =>
            return "SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD";

         when SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION =>
            return "SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION";

         when TOTAL_CHECKOUT_CONVERSION_RATE =>
            return "TOTAL_CHECKOUT_CONVERSION_RATE";

         when TOTAL_VIEW_CATEGORY_CONVERSION_RATE =>
            return "TOTAL_VIEW_CATEGORY_CONVERSION_RATE";

         when TOTAL_ADD_TO_CART_CONVERSION_RATE =>
            return "TOTAL_ADD_TO_CART_CONVERSION_RATE";

         when TOTAL_SIGNUP_CONVERSION_RATE =>
            return "TOTAL_SIGNUP_CONVERSION_RATE";

         when TOTAL_PAGE_VISIT_CONVERSION_RATE =>
            return "TOTAL_PAGE_VISIT_CONVERSION_RATE";

         when TOTAL_LEAD_CONVERSION_RATE =>
            return "TOTAL_LEAD_CONVERSION_RATE";

         when TOTAL_SEARCH_CONVERSION_RATE =>
            return "TOTAL_SEARCH_CONVERSION_RATE";

         when TOTAL_WATCH_VIDEO_CONVERSION_RATE =>
            return "TOTAL_WATCH_VIDEO_CONVERSION_RATE";

         when TOTAL_UNKNOWN_CONVERSION_RATE =>
            return "TOTAL_UNKNOWN_CONVERSION_RATE";

         when TOTAL_CUSTOM_CONVERSION_RATE =>
            return "TOTAL_CUSTOM_CONVERSION_RATE";

         when STANDARD_AD_FEED_ITEM_ID =>
            return "STANDARD_AD_FEED_ITEM_ID";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ReportingColumnAsync_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ReportingColumnAsync_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ReportingColumnAsync_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ReportingColumnAsync_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ReportingColumnAsync_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ReportingColumnAsync_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResourceIdToRoles_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResourceIdToRoles_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResourceIdToRoles_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResourceIdToRoles_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResourceIdToRoles_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_Role_Type (Value : in String) return .Models.Role_Type is
   begin
      if Value = "UNKNOWN" then
         return UNKNOWN;
      end if;
      if Value = "OWNER" then
         return OWNER;
      end if;
      if Value = "ADMIN" then
         return ADMIN;
      end if;
      if Value = "ANALYST" then
         return ANALYST;
      end if;
      if Value = "SOS_READER" then
         return SOS_READER;
      end if;
      if Value = "FINANCE_MANAGER" then
         return FINANCE_MANAGER;
      end if;
      if Value = "AUDIENCE_MANAGER" then
         return AUDIENCE_MANAGER;
      end if;
      if Value = "CAMPAIGN_MANAGER" then
         return CAMPAIGN_MANAGER;
      end if;
      if Value = "CATALOGS_MANAGER" then
         return CATALOGS_MANAGER;
      end if;
      if Value = "RESTRICTED_OWNER" then
         return RESTRICTED_OWNER;
      end if;
      if Value = "PROFILE_MANAGER" then
         return PROFILE_MANAGER;
      end if;
      if Value = "PROFILE_PUBLISHER" then
         return PROFILE_PUBLISHER;
      end if;
      if Value = "RESOURCE_PINNER_LIST_OWNER" then
         return RESOURCE_PINNER_LIST_OWNER;
      end if;
      if Value = "RESOURCE_PINNER_LIST_READER" then
         return RESOURCE_PINNER_LIST_READER;
      end if;
      if Value = "BIZ_PINNER_LIST_SHARER" then
         return BIZ_PINNER_LIST_SHARER;
      end if;
      if Value = "RESOURCE_CONVERSION_TAGS_READER" then
         return RESOURCE_CONVERSION_TAGS_READER;
      end if;
      raise Constraint_Error;
   end To_Role_Type;

   function To_String (Value : in .Models.Role_Type) return String is
   begin
      case Value is
         when UNKNOWN =>
            return "UNKNOWN";

         when OWNER =>
            return "OWNER";

         when ADMIN =>
            return "ADMIN";

         when ANALYST =>
            return "ANALYST";

         when SOS_READER =>
            return "SOS_READER";

         when FINANCE_MANAGER =>
            return "FINANCE_MANAGER";

         when AUDIENCE_MANAGER =>
            return "AUDIENCE_MANAGER";

         when CAMPAIGN_MANAGER =>
            return "CAMPAIGN_MANAGER";

         when CATALOGS_MANAGER =>
            return "CATALOGS_MANAGER";

         when RESTRICTED_OWNER =>
            return "RESTRICTED_OWNER";

         when PROFILE_MANAGER =>
            return "PROFILE_MANAGER";

         when PROFILE_PUBLISHER =>
            return "PROFILE_PUBLISHER";

         when RESOURCE_PINNER_LIST_OWNER =>
            return "RESOURCE_PINNER_LIST_OWNER";

         when RESOURCE_PINNER_LIST_READER =>
            return "RESOURCE_PINNER_LIST_READER";

         when BIZ_PINNER_LIST_SHARER =>
            return "BIZ_PINNER_LIST_SHARER";

         when RESOURCE_CONVERSION_TAGS_READER =>
            return "RESOURCE_CONVERSION_TAGS_READER";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Role_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Role_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Role_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_Role_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Role_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Role_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SSIOAccountAddress_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Display.Is_Null then
         Into.Write_Entity ("display", Value.Display);
      end if;
      if not Value.Purpose.Is_Null then
         Into.Write_Entity ("purpose", Value.Purpose);
      end if;
      if not Value.Address_Id.Is_Null then
         Into.Write_Entity ("address_id", Value.Address_Id);
      end if;
      if not Value.Order_Legal_Entity.Is_Null then
         Into.Write_Entity ("order_legal_entity", Value.Order_Legal_Entity);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SSIOAccountAddress_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SSIOAccountAddress_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "display", Value.Display);
      Swagger.Streams.Deserialize (Object, "purpose", Value.Purpose);
      Swagger.Streams.Deserialize (Object, "address_id", Value.Address_Id);
      Swagger.Streams.Deserialize (Object, "order_legal_entity", Value.Order_Legal_Entity);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SSIOAccountAddress_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SSIOAccountAddress_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SSIOAccountPMPName_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SSIOAccountPMPName_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SSIOAccountPMPName_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SSIOAccountPMPName_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SSIOAccountPMPName_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SSIOCreateInsertionOrderResponse_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Pin_Order_Id.Is_Null then
         Into.Write_Entity ("pin_order_id", Value.Pin_Order_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SSIOCreateInsertionOrderResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SSIOCreateInsertionOrderResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "pin_order_id", Value.Pin_Order_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SSIOCreateInsertionOrderResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SSIOCreateInsertionOrderResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SSIOEditInsertionOrderRequest_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Start_Date.Is_Null then
         Into.Write_Entity ("start_date", Value.Start_Date);
      end if;
      if not Value.End_Date.Is_Null then
         Into.Write_Entity ("end_date", Value.End_Date);
      end if;
      if not Value.Po_Number.Is_Null then
         Into.Write_Entity ("po_number", Value.Po_Number);
      end if;
      Serialize (Into, "budget_amount", Value.Budget_Amount);
      if not Value.Billing_Contact_Firstname.Is_Null then
         Into.Write_Entity ("billing_contact_firstname", Value.Billing_Contact_Firstname);
      end if;
      if not Value.Billing_Contact_Lastname.Is_Null then
         Into.Write_Entity ("billing_contact_lastname", Value.Billing_Contact_Lastname);
      end if;
      if not Value.Billing_Contact_Email.Is_Null then
         Into.Write_Entity ("billing_contact_email", Value.Billing_Contact_Email);
      end if;
      if not Value.Media_Contact_Firstname.Is_Null then
         Into.Write_Entity ("media_contact_firstname", Value.Media_Contact_Firstname);
      end if;
      if not Value.Media_Contact_Lastname.Is_Null then
         Into.Write_Entity ("media_contact_lastname", Value.Media_Contact_Lastname);
      end if;
      if not Value.Media_Contact_Email.Is_Null then
         Into.Write_Entity ("media_contact_email", Value.Media_Contact_Email);
      end if;
      if not Value.Agency_Link.Is_Null then
         Into.Write_Entity ("agency_link", Value.Agency_Link);
      end if;
      if not Value.User_Email.Is_Null then
         Into.Write_Entity ("user_email", Value.User_Email);
      end if;
      if not Value.Oracle_Line_Id.Is_Null then
         Into.Write_Entity ("oracle_line_id", Value.Oracle_Line_Id);
      end if;
      if not Value.Salesforce_Order_Id.Is_Null then
         Into.Write_Entity ("salesforce_order_id", Value.Salesforce_Order_Id);
      end if;
      if not Value.Salesforce_Order_Line_Id.Is_Null then
         Into.Write_Entity ("salesforce_order_line_id", Value.Salesforce_Order_Line_Id);
      end if;
      if not Value.Ads_Manager_Order_Line_Id.Is_Null then
         Into.Write_Entity ("ads_manager_order_line_id", Value.Ads_Manager_Order_Line_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SSIOEditInsertionOrderRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SSIOEditInsertionOrderRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "start_date", Value.Start_Date);
      Swagger.Streams.Deserialize (Object, "end_date", Value.End_Date);
      Swagger.Streams.Deserialize (Object, "po_number", Value.Po_Number);
      Swagger.Streams.Deserialize (Object, "budget_amount", Value.Budget_Amount);
      Swagger.Streams.Deserialize (Object, "billing_contact_firstname", Value.Billing_Contact_Firstname);
      Swagger.Streams.Deserialize (Object, "billing_contact_lastname", Value.Billing_Contact_Lastname);
      Swagger.Streams.Deserialize (Object, "billing_contact_email", Value.Billing_Contact_Email);
      Swagger.Streams.Deserialize (Object, "media_contact_firstname", Value.Media_Contact_Firstname);
      Swagger.Streams.Deserialize (Object, "media_contact_lastname", Value.Media_Contact_Lastname);
      Swagger.Streams.Deserialize (Object, "media_contact_email", Value.Media_Contact_Email);
      Swagger.Streams.Deserialize (Object, "agency_link", Value.Agency_Link);
      Swagger.Streams.Deserialize (Object, "user_email", Value.User_Email);
      Swagger.Streams.Deserialize (Object, "oracle_line_id", Value.Oracle_Line_Id);
      Swagger.Streams.Deserialize (Object, "salesforce_order_id", Value.Salesforce_Order_Id);
      Swagger.Streams.Deserialize (Object, "salesforce_order_line_id", Value.Salesforce_Order_Line_Id);
      Swagger.Streams.Deserialize (Object, "ads_manager_order_line_id", Value.Ads_Manager_Order_Line_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SSIOEditInsertionOrderRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SSIOEditInsertionOrderRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SSIOEditInsertionOrderResponse_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Pin_Order_Id.Is_Null then
         Into.Write_Entity ("pin_order_id", Value.Pin_Order_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SSIOEditInsertionOrderResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SSIOEditInsertionOrderResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "pin_order_id", Value.Pin_Order_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SSIOEditInsertionOrderResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SSIOEditInsertionOrderResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SSIOInsertionOrderCommon_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Start_Date.Is_Null then
         Into.Write_Entity ("start_date", Value.Start_Date);
      end if;
      if not Value.End_Date.Is_Null then
         Into.Write_Entity ("end_date", Value.End_Date);
      end if;
      if not Value.Po_Number.Is_Null then
         Into.Write_Entity ("po_number", Value.Po_Number);
      end if;
      Serialize (Into, "budget_amount", Value.Budget_Amount);
      if not Value.Billing_Contact_Firstname.Is_Null then
         Into.Write_Entity ("billing_contact_firstname", Value.Billing_Contact_Firstname);
      end if;
      if not Value.Billing_Contact_Lastname.Is_Null then
         Into.Write_Entity ("billing_contact_lastname", Value.Billing_Contact_Lastname);
      end if;
      if not Value.Billing_Contact_Email.Is_Null then
         Into.Write_Entity ("billing_contact_email", Value.Billing_Contact_Email);
      end if;
      if not Value.Media_Contact_Firstname.Is_Null then
         Into.Write_Entity ("media_contact_firstname", Value.Media_Contact_Firstname);
      end if;
      if not Value.Media_Contact_Lastname.Is_Null then
         Into.Write_Entity ("media_contact_lastname", Value.Media_Contact_Lastname);
      end if;
      if not Value.Media_Contact_Email.Is_Null then
         Into.Write_Entity ("media_contact_email", Value.Media_Contact_Email);
      end if;
      if not Value.Agency_Link.Is_Null then
         Into.Write_Entity ("agency_link", Value.Agency_Link);
      end if;
      if not Value.User_Email.Is_Null then
         Into.Write_Entity ("user_email", Value.User_Email);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SSIOInsertionOrderCommon_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SSIOInsertionOrderCommon_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "start_date", Value.Start_Date);
      Swagger.Streams.Deserialize (Object, "end_date", Value.End_Date);
      Swagger.Streams.Deserialize (Object, "po_number", Value.Po_Number);
      Swagger.Streams.Deserialize (Object, "budget_amount", Value.Budget_Amount);
      Swagger.Streams.Deserialize (Object, "billing_contact_firstname", Value.Billing_Contact_Firstname);
      Swagger.Streams.Deserialize (Object, "billing_contact_lastname", Value.Billing_Contact_Lastname);
      Swagger.Streams.Deserialize (Object, "billing_contact_email", Value.Billing_Contact_Email);
      Swagger.Streams.Deserialize (Object, "media_contact_firstname", Value.Media_Contact_Firstname);
      Swagger.Streams.Deserialize (Object, "media_contact_lastname", Value.Media_Contact_Lastname);
      Swagger.Streams.Deserialize (Object, "media_contact_email", Value.Media_Contact_Email);
      Swagger.Streams.Deserialize (Object, "agency_link", Value.Agency_Link);
      Swagger.Streams.Deserialize (Object, "user_email", Value.User_Email);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SSIOInsertionOrderCommon_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SSIOInsertionOrderCommon_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SSIOInsertionOrderStatusResponse_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Pin_Order_Id.Is_Null then
         Into.Write_Entity ("pin_order_id", Value.Pin_Order_Id);
      end if;
      if not Value.Status.Is_Null then
         Into.Write_Entity ("status", Value.Status);
      end if;
      Into.Write_Entity ("creation_time", Value.Creation_Time);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SSIOInsertionOrderStatusResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SSIOInsertionOrderStatusResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "pin_order_id", Value.Pin_Order_Id);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "creation_time", Value.Creation_Time);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SSIOInsertionOrderStatusResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SSIOInsertionOrderStatusResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SSIOInsertionOrderStatus_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Pin_Order_Id.Is_Null then
         Into.Write_Entity ("pin_order_id", Value.Pin_Order_Id);
      end if;
      if not Value.Status.Is_Null then
         Into.Write_Entity ("status", Value.Status);
      end if;
      Into.Write_Entity ("creation_time", Value.Creation_Time);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SSIOInsertionOrderStatus_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SSIOInsertionOrderStatus_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "pin_order_id", Value.Pin_Order_Id);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "creation_time", Value.Creation_Time);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SSIOInsertionOrderStatus_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SSIOInsertionOrderStatus_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SharedAudienceAccount_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("account_id", Value.Account_Id);
      Into.Write_Entity ("account_name", Value.Account_Name);
      Into.Write_Entity ("account_type", Value.Account_Type);
      Into.Write_Entity ("shared_on_timestamp", Value.Shared_On_Timestamp);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SharedAudienceAccount_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SharedAudienceAccount_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "account_id", Value.Account_Id);
      Swagger.Streams.Deserialize (Object, "account_name", Value.Account_Name);
      Swagger.Streams.Deserialize (Object, "account_type", Value.Account_Type);
      Swagger.Streams.Deserialize (Object, "shared_on_timestamp", Value.Shared_On_Timestamp);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SharedAudienceAccount_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SharedAudienceAccount_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SingleInterestTargetingOptionResponse_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "child_interests", Value.Child_Interests);
      if not Value.Level.Is_Null then
         Into.Write_Entity ("level", Value.Level);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SingleInterestTargetingOptionResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SingleInterestTargetingOptionResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "child_interests", Value.Child_Interests);
      Swagger.Streams.Deserialize (Object, "level", Value.Level);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SingleInterestTargetingOptionResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SingleInterestTargetingOptionResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_TargetingAdvertiserCountry_Type (Value : in String) return .Models.TargetingAdvertiserCountry_Type is
   begin
      if Value = "US" then
         return US;
      end if;
      if Value = "GB" then
         return GB;
      end if;
      if Value = "CA" then
         return CA;
      end if;
      if Value = "IE" then
         return IE;
      end if;
      if Value = "AU" then
         return AU;
      end if;
      if Value = "NZ" then
         return NZ;
      end if;
      if Value = "FR" then
         return FR;
      end if;
      if Value = "SE" then
         return SE;
      end if;
      if Value = "IL" then
         return IL;
      end if;
      if Value = "DE" then
         return DE;
      end if;
      if Value = "AT" then
         return AT;
      end if;
      if Value = "IT" then
         return IT;
      end if;
      if Value = "ES" then
         return ES;
      end if;
      if Value = "NL" then
         return NL;
      end if;
      if Value = "BE" then
         return BE;
      end if;
      if Value = "PT" then
         return PT;
      end if;
      if Value = "CH" then
         return CH;
      end if;
      if Value = "HK" then
         return HK;
      end if;
      if Value = "JP" then
         return JP;
      end if;
      if Value = "KR" then
         return KR;
      end if;
      if Value = "SG" then
         return SG;
      end if;
      if Value = "NO" then
         return NO;
      end if;
      if Value = "DK" then
         return DK;
      end if;
      if Value = "FI" then
         return FI;
      end if;
      if Value = "CY" then
         return CY;
      end if;
      if Value = "LU" then
         return LU;
      end if;
      if Value = "MT" then
         return MT;
      end if;
      if Value = "PL" then
         return PL;
      end if;
      if Value = "RO" then
         return RO;
      end if;
      if Value = "HU" then
         return HU;
      end if;
      if Value = "CZ" then
         return CZ;
      end if;
      if Value = "GR" then
         return GR;
      end if;
      if Value = "SK" then
         return SK;
      end if;
      if Value = "BR" then
         return BR;
      end if;
      if Value = "MX" then
         return MX;
      end if;
      if Value = "AR" then
         return AR;
      end if;
      if Value = "CL" then
         return CL;
      end if;
      if Value = "CO" then
         return CO;
      end if;
      raise Constraint_Error;
   end To_TargetingAdvertiserCountry_Type;

   function To_String (Value : in .Models.TargetingAdvertiserCountry_Type) return String is
   begin
      case Value is
         when US =>
            return "US";

         when GB =>
            return "GB";

         when CA =>
            return "CA";

         when IE =>
            return "IE";

         when AU =>
            return "AU";

         when NZ =>
            return "NZ";

         when FR =>
            return "FR";

         when SE =>
            return "SE";

         when IL =>
            return "IL";

         when DE =>
            return "DE";

         when AT =>
            return "AT";

         when IT =>
            return "IT";

         when ES =>
            return "ES";

         when NL =>
            return "NL";

         when BE =>
            return "BE";

         when PT =>
            return "PT";

         when CH =>
            return "CH";

         when HK =>
            return "HK";

         when JP =>
            return "JP";

         when KR =>
            return "KR";

         when SG =>
            return "SG";

         when NO =>
            return "NO";

         when DK =>
            return "DK";

         when FI =>
            return "FI";

         when CY =>
            return "CY";

         when LU =>
            return "LU";

         when MT =>
            return "MT";

         when PL =>
            return "PL";

         when RO =>
            return "RO";

         when HU =>
            return "HU";

         when CZ =>
            return "CZ";

         when GR =>
            return "GR";

         when SK =>
            return "SK";

         when BR =>
            return "BR";

         when MX =>
            return "MX";

         when AR =>
            return "AR";

         when CL =>
            return "CL";

         when CO =>
            return "CO";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TargetingAdvertiserCountry_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TargetingAdvertiserCountry_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TargetingAdvertiserCountry_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_TargetingAdvertiserCountry_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TargetingAdvertiserCountry_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TargetingAdvertiserCountry_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_TargetingSpecAppType_Type (Value : in String) return .Models.TargetingSpecAppType_Type is
   begin
      if Value = "android_mobile" then
         return ANDROID_MOBILE;
      end if;
      if Value = "android_tablet" then
         return ANDROID_TABLET;
      end if;
      if Value = "ipad" then
         return IPAD;
      end if;
      if Value = "iphone" then
         return IPHONE;
      end if;
      if Value = "web" then
         return WEB;
      end if;
      if Value = "web_mobile" then
         return WEB_MOBILE;
      end if;
      raise Constraint_Error;
   end To_TargetingSpecAppType_Type;

   function To_String (Value : in .Models.TargetingSpecAppType_Type) return String is
   begin
      case Value is
         when ANDROID_MOBILE =>
            return "android_mobile";

         when ANDROID_TABLET =>
            return "android_tablet";

         when IPAD =>
            return "ipad";

         when IPHONE =>
            return "iphone";

         when WEB =>
            return "web";

         when WEB_MOBILE =>
            return "web_mobile";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TargetingSpecAppType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TargetingSpecAppType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TargetingSpecAppType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_TargetingSpecAppType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TargetingSpecAppType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TargetingSpecAppType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TargetingSpecSHOPPINGRETARGETING_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Lookback_Window.Is_Null then
         Into.Write_Entity ("lookback_window", Value.Lookback_Window);
      end if;
      Serialize (Into, "tag_types", Value.Tag_Types);
      if not Value.Exclusion_Window.Is_Null then
         Into.Write_Entity ("exclusion_window", Value.Exclusion_Window);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TargetingSpecSHOPPINGRETARGETING_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TargetingSpecSHOPPINGRETARGETING_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "lookback_window", Value.Lookback_Window);
      Swagger.Streams.Deserialize (Object, "tag_types", Value.Tag_Types);
      Swagger.Streams.Deserialize (Object, "exclusion_window", Value.Exclusion_Window);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TargetingSpecSHOPPINGRETARGETING_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TargetingSpecSHOPPINGRETARGETING_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TargetingTemplateAudienceSizingReachEstimate_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Estimate.Is_Null then
         Into.Write_Entity ("estimate", Value.Estimate);
      end if;
      if not Value.Lower_Bound.Is_Null then
         Into.Write_Entity ("lower_bound", Value.Lower_Bound);
      end if;
      if not Value.Upper_Bound.Is_Null then
         Into.Write_Entity ("upper_bound", Value.Upper_Bound);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TargetingTemplateAudienceSizingReachEstimate_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TargetingTemplateAudienceSizingReachEstimate_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "estimate", Value.Estimate);
      Swagger.Streams.Deserialize (Object, "lower_bound", Value.Lower_Bound);
      Swagger.Streams.Deserialize (Object, "upper_bound", Value.Upper_Bound);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TargetingTemplateAudienceSizingReachEstimate_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TargetingTemplateAudienceSizingReachEstimate_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TargetingTemplateUpdateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("operation_type", Value.Operation_Type);
      Into.Write_Entity ("id", Value.Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TargetingTemplateUpdateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TargetingTemplateUpdateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "operation_type", Value.Operation_Type);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TargetingTemplateUpdateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TargetingTemplateUpdateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TemplateResponseDateRangeAbsoluteDateRange_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      Serialize (Into, "start_date", Value.Start_Date);
      Serialize (Into, "end_date", Value.End_Date);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TemplateResponseDateRangeAbsoluteDateRange_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TemplateResponseDateRangeAbsoluteDateRange_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "start_date", Value.Start_Date);
      Swagger.Streams.Deserialize (Object, "end_date", Value.End_Date);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TemplateResponseDateRangeAbsoluteDateRange_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TemplateResponseDateRangeAbsoluteDateRange_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TemplateResponseDateRangeDynamicDateRange_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      if not Value.P_Range.Is_Null then
         Into.Write_Entity ("range", Value.P_Range);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TemplateResponseDateRangeDynamicDateRange_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TemplateResponseDateRangeDynamicDateRange_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "range", Value.P_Range);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TemplateResponseDateRangeDynamicDateRange_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TemplateResponseDateRangeDynamicDateRange_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TemplateResponseDateRangeRelativeDateRange_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      Serialize (Into, "start_days_in_past", Value.Start_Days_In_Past);
      Serialize (Into, "end_days_in_past", Value.End_Days_In_Past);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TemplateResponseDateRangeRelativeDateRange_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TemplateResponseDateRangeRelativeDateRange_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "start_days_in_past", Value.Start_Days_In_Past);
      Swagger.Streams.Deserialize (Object, "end_days_in_past", Value.End_Days_In_Past);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TemplateResponseDateRangeRelativeDateRange_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TemplateResponseDateRangeRelativeDateRange_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TermsOfService_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Into.Write_Entity ("html", Value.Html);
      if not Value.Has_Accepted.Is_Null then
         Into.Write_Entity ("has_accepted", Value.Has_Accepted);
      end if;
      if not Value.Ad_Account_Id.Is_Null then
         Into.Write_Entity ("ad_account_id", Value.Ad_Account_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TermsOfService_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TermsOfService_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "html", Value.Html);
      Swagger.Streams.Deserialize (Object, "has_accepted", Value.Has_Accepted);
      Swagger.Streams.Deserialize (Object, "ad_account_id", Value.Ad_Account_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TermsOfService_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TermsOfService_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TopPinsAnalyticsResponseDateAvailability_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "latest_available_timestamp", Value.Latest_Available_Timestamp);
      if not Value.Is_Realtime.Is_Null then
         Into.Write_Entity ("is_realtime", Value.Is_Realtime);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TopPinsAnalyticsResponseDateAvailability_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TopPinsAnalyticsResponseDateAvailability_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "latest_available_timestamp", Value.Latest_Available_Timestamp);
      Swagger.Streams.Deserialize (Object, "is_realtime", Value.Is_Realtime);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TopPinsAnalyticsResponseDateAvailability_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TopPinsAnalyticsResponseDateAvailability_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TrackingUrls_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "impression", Value.Impression);
      Serialize (Into, "click", Value.Click);
      Serialize (Into, "engagement", Value.Engagement);
      Serialize (Into, "buyable_button", Value.Buyable_Button);
      Serialize (Into, "audience_verification", Value.Audience_Verification);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TrackingUrls_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TrackingUrls_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "impression", Value.Impression);
      Swagger.Streams.Deserialize (Object, "click", Value.Click);
      Swagger.Streams.Deserialize (Object, "engagement", Value.Engagement);
      Swagger.Streams.Deserialize (Object, "buyable_button", Value.Buyable_Button);
      Swagger.Streams.Deserialize (Object, "audience_verification", Value.Audience_Verification);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TrackingUrls_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TrackingUrls_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_TrendType_Type (Value : in String) return .Models.TrendType_Type is
   begin
      if Value = "growing" then
         return GROWING;
      end if;
      if Value = "monthly" then
         return MONTHLY;
      end if;
      if Value = "yearly" then
         return YEARLY;
      end if;
      if Value = "seasonal" then
         return SEASONAL;
      end if;
      raise Constraint_Error;
   end To_TrendType_Type;

   function To_String (Value : in .Models.TrendType_Type) return String is
   begin
      case Value is
         when GROWING =>
            return "growing";

         when MONTHLY =>
            return "monthly";

         when YEARLY =>
            return "yearly";

         when SEASONAL =>
            return "seasonal";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TrendType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TrendType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TrendType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_TrendType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TrendType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TrendType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TrendingKeywordsResponseTrendsInnerTimeSeries_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Date.Is_Null then
         Into.Write_Entity ("date", Value.Date);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TrendingKeywordsResponseTrendsInnerTimeSeries_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TrendingKeywordsResponseTrendsInnerTimeSeries_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "date", Value.Date);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TrendingKeywordsResponseTrendsInnerTimeSeries_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TrendingKeywordsResponseTrendsInnerTimeSeries_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_TrendsSupportedRegion_Type (Value : in String) return .Models.TrendsSupportedRegion_Type is
   begin
      if Value = "US" then
         return US;
      end if;
      if Value = "CA" then
         return CA;
      end if;
      if Value = "DE" then
         return DE;
      end if;
      if Value = "FR" then
         return FR;
      end if;
      if Value = "ES" then
         return ES;
      end if;
      if Value = "IT" then
         return IT;
      end if;
      if Value = "DE+AT+CH" then
         return DE_AT_CH;
      end if;
      if Value = "GB+IE" then
         return GB_IE;
      end if;
      if Value = "IT+ES+PT+GR+MT" then
         return IT_ES_PT_GR_MT;
      end if;
      if Value = "PL+RO+HU+SK+CZ" then
         return PL_RO_HU_SK_CZ;
      end if;
      if Value = "SE+DK+FI+NO" then
         return SE_DK_FI_NO;
      end if;
      if Value = "NL+BE+LU" then
         return NL_BE_LU;
      end if;
      if Value = "AR" then
         return AR;
      end if;
      if Value = "BR" then
         return BR;
      end if;
      if Value = "CO" then
         return CO;
      end if;
      if Value = "MX" then
         return MX;
      end if;
      if Value = "MX+AR+CO+CL" then
         return MX_AR_CO_CL;
      end if;
      if Value = "AU+NZ" then
         return AU_NZ;
      end if;
      raise Constraint_Error;
   end To_TrendsSupportedRegion_Type;

   function To_String (Value : in .Models.TrendsSupportedRegion_Type) return String is
   begin
      case Value is
         when US =>
            return "US";

         when CA =>
            return "CA";

         when DE =>
            return "DE";

         when FR =>
            return "FR";

         when ES =>
            return "ES";

         when IT =>
            return "IT";

         when DE_AT_CH =>
            return "DE+AT+CH";

         when GB_IE =>
            return "GB+IE";

         when IT_ES_PT_GR_MT =>
            return "IT+ES+PT+GR+MT";

         when PL_RO_HU_SK_CZ =>
            return "PL+RO+HU+SK+CZ";

         when SE_DK_FI_NO =>
            return "SE+DK+FI+NO";

         when NL_BE_LU =>
            return "NL+BE+LU";

         when AR =>
            return "AR";

         when BR =>
            return "BR";

         when CO =>
            return "CO";

         when MX =>
            return "MX";

         when MX_AR_CO_CL =>
            return "MX+AR+CO+CL";

         when AU_NZ =>
            return "AU+NZ";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TrendsSupportedRegion_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TrendsSupportedRegion_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TrendsSupportedRegion_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_TrendsSupportedRegion_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TrendsSupportedRegion_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TrendsSupportedRegion_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdatableItemAttributes_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("ad_link", Value.Ad_Link);
      Into.Write_Entity ("adult", Value.Adult);
      Into.Write_Entity ("age_group", Value.Age_Group);
      if not Value.Availability.Is_Null then
         Into.Write_Entity ("availability", Value.Availability);
      end if;
      Serialize (Into, "average_review_rating", Value.Average_Review_Rating);
      Into.Write_Entity ("brand", Value.Brand);
      Into.Write_Entity ("checkout_enabled", Value.Checkout_Enabled);
      Into.Write_Entity ("color", Value.Color);
      Into.Write_Entity ("condition", Value.Condition);
      Into.Write_Entity ("custom_label_0", Value.Custom_Label_0);
      Into.Write_Entity ("custom_label_1", Value.Custom_Label_1);
      Into.Write_Entity ("custom_label_2", Value.Custom_Label_2);
      Into.Write_Entity ("custom_label_3", Value.Custom_Label_3);
      Into.Write_Entity ("custom_label_4", Value.Custom_Label_4);
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      Into.Write_Entity ("free_shipping_label", Value.Free_Shipping_Label);
      Into.Write_Entity ("free_shipping_limit", Value.Free_Shipping_Limit);
      Into.Write_Entity ("gender", Value.Gender);
      Into.Write_Entity ("google_product_category", Value.Google_Product_Category);
      Into.Write_Entity ("gtin", Value.Gtin);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Into.Write_Entity ("item_group_id", Value.Item_Group_Id);
      Into.Write_Entity ("last_updated_time", Value.Last_Updated_Time);
      if not Value.Link.Is_Null then
         Into.Write_Entity ("link", Value.Link);
      end if;
      Into.Write_Entity ("material", Value.Material);
      Into.Write_Entity ("min_ad_price", Value.Min_Ad_Price);
      Into.Write_Entity ("mobile_link", Value.Mobile_Link);
      Into.Write_Entity ("mpn", Value.Mpn);
      Into.Write_Entity ("number_of_ratings", Value.Number_Of_Ratings);
      Into.Write_Entity ("number_of_reviews", Value.Number_Of_Reviews);
      Into.Write_Entity ("pattern", Value.Pattern);
      if not Value.Price.Is_Null then
         Into.Write_Entity ("price", Value.Price);
      end if;
      Into.Write_Entity ("product_type", Value.Product_Type);
      Into.Write_Entity ("sale_price", Value.Sale_Price);
      Into.Write_Entity ("shipping", Value.Shipping);
      Into.Write_Entity ("shipping_height", Value.Shipping_Height);
      Into.Write_Entity ("shipping_weight", Value.Shipping_Weight);
      Into.Write_Entity ("shipping_width", Value.Shipping_Width);
      Into.Write_Entity ("size", Value.Size);
      Into.Write_Entity ("size_system", Value.Size_System);
      Into.Write_Entity ("size_type", Value.Size_Type);
      Into.Write_Entity ("tax", Value.Tax);
      if not Value.Title.Is_Null then
         Into.Write_Entity ("title", Value.Title);
      end if;
      Serialize (Into, "variant_names", Value.Variant_Names);
      Serialize (Into, "variant_values", Value.Variant_Values);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdatableItemAttributes_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdatableItemAttributes_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "ad_link", Value.Ad_Link);
      Swagger.Streams.Deserialize (Object, "adult", Value.Adult);
      Swagger.Streams.Deserialize (Object, "age_group", Value.Age_Group);
      Swagger.Streams.Deserialize (Object, "availability", Value.Availability);
      Swagger.Streams.Deserialize (Object, "average_review_rating", Value.Average_Review_Rating);
      Swagger.Streams.Deserialize (Object, "brand", Value.Brand);
      Swagger.Streams.Deserialize (Object, "checkout_enabled", Value.Checkout_Enabled);
      Swagger.Streams.Deserialize (Object, "color", Value.Color);
      Swagger.Streams.Deserialize (Object, "condition", Value.Condition);
      Swagger.Streams.Deserialize (Object, "custom_label_0", Value.Custom_Label_0);
      Swagger.Streams.Deserialize (Object, "custom_label_1", Value.Custom_Label_1);
      Swagger.Streams.Deserialize (Object, "custom_label_2", Value.Custom_Label_2);
      Swagger.Streams.Deserialize (Object, "custom_label_3", Value.Custom_Label_3);
      Swagger.Streams.Deserialize (Object, "custom_label_4", Value.Custom_Label_4);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "free_shipping_label", Value.Free_Shipping_Label);
      Swagger.Streams.Deserialize (Object, "free_shipping_limit", Value.Free_Shipping_Limit);
      Swagger.Streams.Deserialize (Object, "gender", Value.Gender);
      Swagger.Streams.Deserialize (Object, "google_product_category", Value.Google_Product_Category);
      Swagger.Streams.Deserialize (Object, "gtin", Value.Gtin);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "item_group_id", Value.Item_Group_Id);
      Swagger.Streams.Deserialize (Object, "last_updated_time", Value.Last_Updated_Time);
      Swagger.Streams.Deserialize (Object, "link", Value.Link);
      Swagger.Streams.Deserialize (Object, "material", Value.Material);
      Swagger.Streams.Deserialize (Object, "min_ad_price", Value.Min_Ad_Price);
      Swagger.Streams.Deserialize (Object, "mobile_link", Value.Mobile_Link);
      Swagger.Streams.Deserialize (Object, "mpn", Value.Mpn);
      Swagger.Streams.Deserialize (Object, "number_of_ratings", Value.Number_Of_Ratings);
      Swagger.Streams.Deserialize (Object, "number_of_reviews", Value.Number_Of_Reviews);
      Swagger.Streams.Deserialize (Object, "pattern", Value.Pattern);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "product_type", Value.Product_Type);
      Swagger.Streams.Deserialize (Object, "sale_price", Value.Sale_Price);
      Swagger.Streams.Deserialize (Object, "shipping", Value.Shipping);
      Swagger.Streams.Deserialize (Object, "shipping_height", Value.Shipping_Height);
      Swagger.Streams.Deserialize (Object, "shipping_weight", Value.Shipping_Weight);
      Swagger.Streams.Deserialize (Object, "shipping_width", Value.Shipping_Width);
      Swagger.Streams.Deserialize (Object, "size", Value.Size);
      Swagger.Streams.Deserialize (Object, "size_system", Value.Size_System);
      Swagger.Streams.Deserialize (Object, "size_type", Value.Size_Type);
      Swagger.Streams.Deserialize (Object, "tax", Value.Tax);
      Swagger.Streams.Deserialize (Object, "title", Value.Title);
      Swagger.Streams.Deserialize (Object, "variant_names", Value.Variant_Names);
      Swagger.Streams.Deserialize (Object, "variant_values", Value.Variant_Values);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdatableItemAttributes_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdatableItemAttributes_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateAssetGroupResponseExceptionsInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Code.Is_Null then
         Into.Write_Entity ("code", Value.Code);
      end if;
      if not Value.Message.Is_Null then
         Into.Write_Entity ("message", Value.Message);
      end if;
      if not Value.Asset_Group_Id.Is_Null then
         Into.Write_Entity ("asset_group_id", Value.Asset_Group_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateAssetGroupResponseExceptionsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateAssetGroupResponseExceptionsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "message", Value.Message);
      Swagger.Streams.Deserialize (Object, "asset_group_id", Value.Asset_Group_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateAssetGroupResponseExceptionsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateAssetGroupResponseExceptionsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_UpdateMaskBidOptionField_Type (Value : in String) return .Models.UpdateMaskBidOptionField_Type is
   begin
      if Value = "BID" then
         return BID;
      end if;
      if Value = "APP_TYPE_BID_MULTIPLIER_SET" then
         return APP_TYPE_BID_MULTIPLIER_SET;
      end if;
      if Value = "PLACEMENT_BID_MULTIPLIER_SET" then
         return PLACEMENT_BID_MULTIPLIER_SET;
      end if;
      raise Constraint_Error;
   end To_UpdateMaskBidOptionField_Type;

   function To_String (Value : in .Models.UpdateMaskBidOptionField_Type) return String is
   begin
      case Value is
         when BID =>
            return "BID";

         when APP_TYPE_BID_MULTIPLIER_SET =>
            return "APP_TYPE_BID_MULTIPLIER_SET";

         when PLACEMENT_BID_MULTIPLIER_SET =>
            return "PLACEMENT_BID_MULTIPLIER_SET";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateMaskBidOptionField_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateMaskBidOptionField_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateMaskBidOptionField_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_UpdateMaskBidOptionField_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateMaskBidOptionField_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateMaskBidOptionField_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_UpdateMaskFieldType_Type (Value : in String) return .Models.UpdateMaskFieldType_Type is
   begin
      if Value = "ad_link" then
         return AD_LINK;
      end if;
      if Value = "adult" then
         return ADULT;
      end if;
      if Value = "age_group" then
         return AGE_GROUP;
      end if;
      if Value = "availability" then
         return AVAILABILITY;
      end if;
      if Value = "average_review_rating" then
         return AVERAGE_REVIEW_RATING;
      end if;
      if Value = "brand" then
         return BRAND;
      end if;
      if Value = "checkout_enabled" then
         return CHECKOUT_ENABLED;
      end if;
      if Value = "color" then
         return COLOR;
      end if;
      if Value = "condition" then
         return CONDITION;
      end if;
      if Value = "custom_label_0" then
         return CUSTOM_LABEL_0;
      end if;
      if Value = "custom_label_1" then
         return CUSTOM_LABEL_1;
      end if;
      if Value = "custom_label_2" then
         return CUSTOM_LABEL_2;
      end if;
      if Value = "custom_label_3" then
         return CUSTOM_LABEL_3;
      end if;
      if Value = "custom_label_4" then
         return CUSTOM_LABEL_4;
      end if;
      if Value = "description" then
         return DESCRIPTION;
      end if;
      if Value = "free_shipping_label" then
         return FREE_SHIPPING_LABEL;
      end if;
      if Value = "free_shipping_limit" then
         return FREE_SHIPPING_LIMIT;
      end if;
      if Value = "gender" then
         return GENDER;
      end if;
      if Value = "google_product_category" then
         return GOOGLE_PRODUCT_CATEGORY;
      end if;
      if Value = "gtin" then
         return GTIN;
      end if;
      if Value = "item_group_id" then
         return ITEM_GROUP_ID;
      end if;
      if Value = "last_updated_time" then
         return LAST_UPDATED_TIME;
      end if;
      if Value = "link" then
         return LINK;
      end if;
      if Value = "material" then
         return MATERIAL;
      end if;
      if Value = "min_ad_price" then
         return MIN_AD_PRICE;
      end if;
      if Value = "mpn" then
         return MPN;
      end if;
      if Value = "number_of_ratings" then
         return NUMBER_OF_RATINGS;
      end if;
      if Value = "number_of_reviews" then
         return NUMBER_OF_REVIEWS;
      end if;
      if Value = "pattern" then
         return PATTERN;
      end if;
      if Value = "price" then
         return PRICE;
      end if;
      if Value = "product_type" then
         return PRODUCT_TYPE;
      end if;
      if Value = "sale_price" then
         return SALE_PRICE;
      end if;
      if Value = "shipping" then
         return SHIPPING;
      end if;
      if Value = "shipping_height" then
         return SHIPPING_HEIGHT;
      end if;
      if Value = "shipping_weight" then
         return SHIPPING_WEIGHT;
      end if;
      if Value = "shipping_width" then
         return SHIPPING_WIDTH;
      end if;
      if Value = "size" then
         return SIZE;
      end if;
      if Value = "size_system" then
         return SIZE_SYSTEM;
      end if;
      if Value = "size_type" then
         return SIZE_TYPE;
      end if;
      if Value = "tax" then
         return TAX;
      end if;
      if Value = "title" then
         return TITLE;
      end if;
      if Value = "variant_names" then
         return VARIANT_NAMES;
      end if;
      if Value = "variant_values" then
         return VARIANT_VALUES;
      end if;
      raise Constraint_Error;
   end To_UpdateMaskFieldType_Type;

   function To_String (Value : in .Models.UpdateMaskFieldType_Type) return String is
   begin
      case Value is
         when AD_LINK =>
            return "ad_link";

         when ADULT =>
            return "adult";

         when AGE_GROUP =>
            return "age_group";

         when AVAILABILITY =>
            return "availability";

         when AVERAGE_REVIEW_RATING =>
            return "average_review_rating";

         when BRAND =>
            return "brand";

         when CHECKOUT_ENABLED =>
            return "checkout_enabled";

         when COLOR =>
            return "color";

         when CONDITION =>
            return "condition";

         when CUSTOM_LABEL_0 =>
            return "custom_label_0";

         when CUSTOM_LABEL_1 =>
            return "custom_label_1";

         when CUSTOM_LABEL_2 =>
            return "custom_label_2";

         when CUSTOM_LABEL_3 =>
            return "custom_label_3";

         when CUSTOM_LABEL_4 =>
            return "custom_label_4";

         when DESCRIPTION =>
            return "description";

         when FREE_SHIPPING_LABEL =>
            return "free_shipping_label";

         when FREE_SHIPPING_LIMIT =>
            return "free_shipping_limit";

         when GENDER =>
            return "gender";

         when GOOGLE_PRODUCT_CATEGORY =>
            return "google_product_category";

         when GTIN =>
            return "gtin";

         when ITEM_GROUP_ID =>
            return "item_group_id";

         when LAST_UPDATED_TIME =>
            return "last_updated_time";

         when LINK =>
            return "link";

         when MATERIAL =>
            return "material";

         when MIN_AD_PRICE =>
            return "min_ad_price";

         when MPN =>
            return "mpn";

         when NUMBER_OF_RATINGS =>
            return "number_of_ratings";

         when NUMBER_OF_REVIEWS =>
            return "number_of_reviews";

         when PATTERN =>
            return "pattern";

         when PRICE =>
            return "price";

         when PRODUCT_TYPE =>
            return "product_type";

         when SALE_PRICE =>
            return "sale_price";

         when SHIPPING =>
            return "shipping";

         when SHIPPING_HEIGHT =>
            return "shipping_height";

         when SHIPPING_WEIGHT =>
            return "shipping_weight";

         when SHIPPING_WIDTH =>
            return "shipping_width";

         when SIZE =>
            return "size";

         when SIZE_SYSTEM =>
            return "size_system";

         when SIZE_TYPE =>
            return "size_type";

         when TAX =>
            return "tax";

         when TITLE =>
            return "title";

         when VARIANT_NAMES =>
            return "variant_names";

         when VARIANT_VALUES =>
            return "variant_values";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateMaskFieldType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateMaskFieldType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateMaskFieldType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_UpdateMaskFieldType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateMaskFieldType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateMaskFieldType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateMemberResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Business_Role.Is_Null then
         Into.Write_Entity ("business_role", Value.Business_Role);
      end if;
      if not Value.Member_Id.Is_Null then
         Into.Write_Entity ("member_id", Value.Member_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateMemberResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateMemberResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "business_role", Value.Business_Role);
      Swagger.Streams.Deserialize (Object, "member_id", Value.Member_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateMemberResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateMemberResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdatePartnerAssetsResult_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Asset_Id.Is_Null then
         Into.Write_Entity ("asset_id", Value.Asset_Id);
      end if;
      if not Value.Asset_Type.Is_Null then
         Into.Write_Entity ("asset_type", Value.Asset_Type);
      end if;
      if not Value.Partner_Id.Is_Null then
         Into.Write_Entity ("partner_id", Value.Partner_Id);
      end if;
      Serialize (Into, "permissions", Value.Permissions);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdatePartnerAssetsResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdatePartnerAssetsResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "asset_id", Value.Asset_Id);
      Swagger.Streams.Deserialize (Object, "asset_type", Value.Asset_Type);
      Swagger.Streams.Deserialize (Object, "partner_id", Value.Partner_Id);
      Swagger.Streams.Deserialize (Object, "permissions", Value.Permissions);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdatePartnerAssetsResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdatePartnerAssetsResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_UserFollowingFeedType_Type (Value : in String) return .Models.UserFollowingFeedType_Type is
   begin
      if Value = "ALL" then
         return ALL;
      end if;
      if Value = "RANKED" then
         return RANKED;
      end if;
      if Value = "CREATOR_ONLY" then
         return CREATOR_ONLY;
      end if;
      if Value = "RANKED_CREATOR_ONLY" then
         return RANKED_CREATOR_ONLY;
      end if;
      raise Constraint_Error;
   end To_UserFollowingFeedType_Type;

   function To_String (Value : in .Models.UserFollowingFeedType_Type) return String is
   begin
      case Value is
         when ALL =>
            return "ALL";

         when RANKED =>
            return "RANKED";

         when CREATOR_ONLY =>
            return "CREATOR_ONLY";

         when RANKED_CREATOR_ONLY =>
            return "RANKED_CREATOR_ONLY";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UserFollowingFeedType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserFollowingFeedType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UserFollowingFeedType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_UserFollowingFeedType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UserFollowingFeedType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UserFollowingFeedType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_UserListOperationType_Type (Value : in String) return .Models.UserListOperationType_Type is
   begin
      if Value = "ADD" then
         return ADD;
      end if;
      if Value = "REMOVE" then
         return REMOVE;
      end if;
      raise Constraint_Error;
   end To_UserListOperationType_Type;

   function To_String (Value : in .Models.UserListOperationType_Type) return String is
   begin
      case Value is
         when ADD =>
            return "ADD";

         when REMOVE =>
            return "REMOVE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UserListOperationType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserListOperationType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UserListOperationType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_UserListOperationType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UserListOperationType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UserListOperationType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_UserListType_Type (Value : in String) return .Models.UserListType_Type is
   begin
      if Value = "EMAIL" then
         return EMAIL;
      end if;
      if Value = "IDFA" then
         return IDFA;
      end if;
      if Value = "MAID" then
         return MAID;
      end if;
      if Value = "LR_ID" then
         return LR_ID;
      end if;
      if Value = "DLX_ID" then
         return DLX_ID;
      end if;
      if Value = "HASHED_PINNER_ID" then
         return HASHED_PINNER_ID;
      end if;
      raise Constraint_Error;
   end To_UserListType_Type;

   function To_String (Value : in .Models.UserListType_Type) return String is
   begin
      case Value is
         when EMAIL =>
            return "EMAIL";

         when IDFA =>
            return "IDFA";

         when MAID =>
            return "MAID";

         when LR_ID =>
            return "LR_ID";

         when DLX_ID =>
            return "DLX_ID";

         when HASHED_PINNER_ID =>
            return "HASHED_PINNER_ID";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UserListType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserListType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UserListType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_UserListType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UserListType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UserListType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UserSummary_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Username.Is_Null then
         Into.Write_Entity ("username", Value.Username);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserSummary_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UserSummary_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "username", Value.Username);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UserSummary_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UserSummary_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UserWebsiteSummary_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Website.Is_Null then
         Into.Write_Entity ("website", Value.Website);
      end if;
      if not Value.Status.Is_Null then
         Into.Write_Entity ("status", Value.Status);
      end if;
      if not Value.Verified_At.Is_Null then
         Into.Write_Entity ("verified_at", Value.Verified_At);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserWebsiteSummary_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UserWebsiteSummary_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "website", Value.Website);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "verified_at", Value.Verified_At);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UserWebsiteSummary_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UserWebsiteSummary_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UserWebsiteVerificationCode_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Verification_Code.Is_Null then
         Into.Write_Entity ("verification_code", Value.Verification_Code);
      end if;
      if not Value.Dns_Txt_Record.Is_Null then
         Into.Write_Entity ("dns_txt_record", Value.Dns_Txt_Record);
      end if;
      if not Value.Metatag.Is_Null then
         Into.Write_Entity ("metatag", Value.Metatag);
      end if;
      if not Value.Filename.Is_Null then
         Into.Write_Entity ("filename", Value.Filename);
      end if;
      if not Value.File_Content.Is_Null then
         Into.Write_Entity ("file_content", Value.File_Content);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserWebsiteVerificationCode_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UserWebsiteVerificationCode_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "verification_code", Value.Verification_Code);
      Swagger.Streams.Deserialize (Object, "dns_txt_record", Value.Dns_Txt_Record);
      Swagger.Streams.Deserialize (Object, "metatag", Value.Metatag);
      Swagger.Streams.Deserialize (Object, "filename", Value.Filename);
      Swagger.Streams.Deserialize (Object, "file_content", Value.File_Content);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UserWebsiteVerificationCode_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UserWebsiteVerificationCode_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UserWebsiteVerifyRequest_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Website.Is_Null then
         Into.Write_Entity ("website", Value.Website);
      end if;
      if not Value.Verification_Method.Is_Null then
         Into.Write_Entity ("verification_method", Value.Verification_Method);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserWebsiteVerifyRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UserWebsiteVerifyRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "website", Value.Website);
      Swagger.Streams.Deserialize (Object, "verification_method", Value.Verification_Method);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UserWebsiteVerifyRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UserWebsiteVerifyRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UsersForIndividualAssetResponse_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Asset_Id.Is_Null then
         Into.Write_Entity ("asset_id", Value.Asset_Id);
      end if;
      if not Value.Member_Id.Is_Null then
         Into.Write_Entity ("member_id", Value.Member_Id);
      end if;
      Serialize (Into, "permissions", Value.Permissions);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UsersForIndividualAssetResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UsersForIndividualAssetResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "asset_id", Value.Asset_Id);
      Swagger.Streams.Deserialize (Object, "member_id", Value.Member_Id);
      Swagger.Streams.Deserialize (Object, "permissions", Value.Permissions);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UsersForIndividualAssetResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UsersForIndividualAssetResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.VideoMetadata_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Item_Type.Is_Null then
         Into.Write_Entity ("item_type", Value.Item_Type);
      end if;
      if not Value.Cover_Image_Url.Is_Null then
         Into.Write_Entity ("cover_image_url", Value.Cover_Image_Url);
      end if;
      Into.Write_Entity ("video_url", Value.Video_Url);
      Serialize (Into, "duration", Value.Duration);
      if not Value.Height.Is_Null then
         Into.Write_Entity ("height", Value.Height);
      end if;
      if not Value.Width.Is_Null then
         Into.Write_Entity ("width", Value.Width);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in VideoMetadata_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.VideoMetadata_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "item_type", Value.Item_Type);
      Swagger.Streams.Deserialize (Object, "cover_image_url", Value.Cover_Image_Url);
      Swagger.Streams.Deserialize (Object, "video_url", Value.Video_Url);
      Swagger.Streams.Deserialize (Object, "duration", Value.Duration);
      Swagger.Streams.Deserialize (Object, "height", Value.Height);
      Swagger.Streams.Deserialize (Object, "width", Value.Width);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out VideoMetadata_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.VideoMetadata_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdAccountCreateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "country", Value.Country);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Owner_User_Id.Is_Null then
         Into.Write_Entity ("owner_user_id", Value.Owner_User_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdAccountCreateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdAccountCreateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "country", Value.Country);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "owner_user_id", Value.Owner_User_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdAccountCreateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdAccountCreateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdAccountCreateSubscriptionRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("webhook_url", Value.Webhook_Url);
      if not Value.Lead_Form_Id.Is_Null then
         Into.Write_Entity ("lead_form_id", Value.Lead_Form_Id);
      end if;
      if not Value.Partner_Access_Token.Is_Null then
         Into.Write_Entity ("partner_access_token", Value.Partner_Access_Token);
      end if;
      if not Value.Partner_Refresh_Token.Is_Null then
         Into.Write_Entity ("partner_refresh_token", Value.Partner_Refresh_Token);
      end if;
      Serialize (Into, "partner_metadata", Value.Partner_Metadata);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdAccountCreateSubscriptionRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdAccountCreateSubscriptionRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "webhook_url", Value.Webhook_Url);
      Swagger.Streams.Deserialize (Object, "lead_form_id", Value.Lead_Form_Id);
      Swagger.Streams.Deserialize (Object, "partner_access_token", Value.Partner_Access_Token);
      Swagger.Streams.Deserialize (Object, "partner_refresh_token", Value.Partner_Refresh_Token);
      Deserialize (Object, "partner_metadata", Value.Partner_Metadata);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdAccountCreateSubscriptionRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdAccountCreateSubscriptionRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdAccountsAudiencesSharedAccountsList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdAccountsAudiencesSharedAccountsList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdAccountsAudiencesSharedAccountsList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdAccountsAudiencesSharedAccountsList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdAccountsAudiencesSharedAccountsList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdAccountsCountryResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdAccountsCountryResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdAccountsCountryResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdAccountsCountryResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdAccountsCountryResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdAccountsSubscriptionsGetList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdAccountsSubscriptionsGetList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdAccountsSubscriptionsGetList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdAccountsSubscriptionsGetList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdAccountsSubscriptionsGetList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdGroupResponse_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "status", Value.Status);
      Into.Write_Entity ("budget_in_micro_currency", Value.Budget_In_Micro_Currency);
      Into.Write_Entity ("bid_in_micro_currency", Value.Bid_In_Micro_Currency);
      Serialize (Into, "optimization_goal_metadata", Value.Optimization_Goal_Metadata);
      Serialize (Into, "budget_type", Value.Budget_Type);
      Into.Write_Entity ("start_time", Value.Start_Time);
      Into.Write_Entity ("end_time", Value.End_Time);
      Serialize (Into, "targeting_spec", Value.Targeting_Spec);
      if not Value.Lifetime_Frequency_Cap.Is_Null then
         Into.Write_Entity ("lifetime_frequency_cap", Value.Lifetime_Frequency_Cap);
      end if;
      Serialize (Into, "tracking_urls", Value.Tracking_Urls);
      Into.Write_Entity ("auto_targeting_enabled", Value.Auto_Targeting_Enabled);
      Serialize (Into, "placement_group", Value.Placement_Group);
      Serialize (Into, "pacing_delivery_type", Value.Pacing_Delivery_Type);
      if not Value.Campaign_Id.Is_Null then
         Into.Write_Entity ("campaign_id", Value.Campaign_Id);
      end if;
      Serialize (Into, "billable_event", Value.Billable_Event);
      Into.Write_Entity ("bid_strategy_type", Value.Bid_Strategy_Type);
      Serialize (Into, "targeting_template_ids", Value.Targeting_Template_Ids);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Ad_Account_Id.Is_Null then
         Into.Write_Entity ("ad_account_id", Value.Ad_Account_Id);
      end if;
      if not Value.Created_Time.Is_Null then
         Into.Write_Entity ("created_time", Value.Created_Time);
      end if;
      if not Value.Updated_Time.Is_Null then
         Into.Write_Entity ("updated_time", Value.Updated_Time);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      Into.Write_Entity ("conversion_learning_mode_type", Value.Conversion_Learning_Mode_Type);
      Serialize (Into, "summary_status", Value.Summary_Status);
      if not Value.Feed_Profile_Id.Is_Null then
         Into.Write_Entity ("feed_profile_id", Value.Feed_Profile_Id);
      end if;
      Serialize (Into, "dca_assets", Value.Dca_Assets);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdGroupResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdGroupResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "budget_in_micro_currency", Value.Budget_In_Micro_Currency);
      Swagger.Streams.Deserialize (Object, "bid_in_micro_currency", Value.Bid_In_Micro_Currency);
      Deserialize (Object, "optimization_goal_metadata", Value.Optimization_Goal_Metadata);
      Deserialize (Object, "budget_type", Value.Budget_Type);
      Swagger.Streams.Deserialize (Object, "start_time", Value.Start_Time);
      Swagger.Streams.Deserialize (Object, "end_time", Value.End_Time);
      Deserialize (Object, "targeting_spec", Value.Targeting_Spec);
      Swagger.Streams.Deserialize (Object, "lifetime_frequency_cap", Value.Lifetime_Frequency_Cap);
      Deserialize (Object, "tracking_urls", Value.Tracking_Urls);
      Swagger.Streams.Deserialize (Object, "auto_targeting_enabled", Value.Auto_Targeting_Enabled);
      Deserialize (Object, "placement_group", Value.Placement_Group);
      Deserialize (Object, "pacing_delivery_type", Value.Pacing_Delivery_Type);
      Swagger.Streams.Deserialize (Object, "campaign_id", Value.Campaign_Id);
      Deserialize (Object, "billable_event", Value.Billable_Event);
      Swagger.Streams.Deserialize (Object, "bid_strategy_type", Value.Bid_Strategy_Type);
      Swagger.Streams.Deserialize (Object, "targeting_template_ids", Value.Targeting_Template_Ids);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "ad_account_id", Value.Ad_Account_Id);
      Swagger.Streams.Deserialize (Object, "created_time", Value.Created_Time);
      Swagger.Streams.Deserialize (Object, "updated_time", Value.Updated_Time);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "conversion_learning_mode_type", Value.Conversion_Learning_Mode_Type);
      Deserialize (Object, "summary_status", Value.Summary_Status);
      Swagger.Streams.Deserialize (Object, "feed_profile_id", Value.Feed_Profile_Id);
      Deserialize (Object, "dca_assets", Value.Dca_Assets);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdGroupResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdGroupResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdGroupArrayResponseElement_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "data", Value.Data);
      Serialize (Into, "exceptions", Value.Exceptions);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdGroupArrayResponseElement_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdGroupArrayResponseElement_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "data", Value.Data);
      Deserialize (Object, "exceptions", Value.Exceptions);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdGroupArrayResponseElement_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdGroupArrayResponseElement_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdGroupArrayResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdGroupArrayResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdGroupArrayResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdGroupArrayResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdGroupArrayResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdGroupAudienceSizingRequestKeywordsInner_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "match_type", Value.Match_Type);
      Into.Write_Entity ("value", Value.Value);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdGroupAudienceSizingRequestKeywordsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdGroupAudienceSizingRequestKeywordsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "match_type", Value.Match_Type);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdGroupAudienceSizingRequestKeywordsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdGroupAudienceSizingRequestKeywordsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdGroupsList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdGroupsList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdGroupsList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdGroupsList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdGroupsList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdsAnalyticsCreateAsyncResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "report_status", Value.Report_Status);
      if not Value.Token.Is_Null then
         Into.Write_Entity ("token", Value.Token);
      end if;
      Into.Write_Entity ("message", Value.Message);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdsAnalyticsCreateAsyncResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdsAnalyticsCreateAsyncResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "report_status", Value.Report_Status);
      Swagger.Streams.Deserialize (Object, "token", Value.Token);
      Swagger.Streams.Deserialize (Object, "message", Value.Message);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdsAnalyticsCreateAsyncResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdsAnalyticsCreateAsyncResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdsAnalyticsGetAsyncResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "report_status", Value.Report_Status);
      Into.Write_Entity ("url", Value.Url);
      Serialize (Into, "size", Value.Size);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdsAnalyticsGetAsyncResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdsAnalyticsGetAsyncResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "report_status", Value.Report_Status);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "size", Value.Size);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdsAnalyticsGetAsyncResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdsAnalyticsGetAsyncResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdsCreditsDiscountsGet200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdsCreditsDiscountsGet200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdsCreditsDiscountsGet200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdsCreditsDiscountsGet200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdsCreditsDiscountsGet200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdResponse_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Ad_Group_Id.Is_Null then
         Into.Write_Entity ("ad_group_id", Value.Ad_Group_Id);
      end if;
      Into.Write_Entity ("android_deep_link", Value.Android_Deep_Link);
      Serialize (Into, "carousel_android_deep_links", Value.Carousel_Android_Deep_Links);
      Serialize (Into, "carousel_destination_urls", Value.Carousel_Destination_Urls);
      Serialize (Into, "carousel_ios_deep_links", Value.Carousel_Ios_Deep_Links);
      Into.Write_Entity ("click_tracking_url", Value.Click_Tracking_Url);
      Serialize (Into, "creative_type", Value.Creative_Type);
      Into.Write_Entity ("destination_url", Value.Destination_Url);
      Into.Write_Entity ("ios_deep_link", Value.Ios_Deep_Link);
      if not Value.Is_Pin_Deleted.Is_Null then
         Into.Write_Entity ("is_pin_deleted", Value.Is_Pin_Deleted);
      end if;
      if not Value.Is_Removable.Is_Null then
         Into.Write_Entity ("is_removable", Value.Is_Removable);
      end if;
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "tracking_urls", Value.Tracking_Urls);
      Into.Write_Entity ("view_tracking_url", Value.View_Tracking_Url);
      Into.Write_Entity ("lead_form_id", Value.Lead_Form_Id);
      Serialize (Into, "grid_click_type", Value.Grid_Click_Type);
      Into.Write_Entity ("customizable_cta_type", Value.Customizable_Cta_Type);
      Serialize (Into, "quiz_pin_data", Value.Quiz_Pin_Data);
      if not Value.Pin_Id.Is_Null then
         Into.Write_Entity ("pin_id", Value.Pin_Id);
      end if;
      if not Value.Ad_Account_Id.Is_Null then
         Into.Write_Entity ("ad_account_id", Value.Ad_Account_Id);
      end if;
      if not Value.Campaign_Id.Is_Null then
         Into.Write_Entity ("campaign_id", Value.Campaign_Id);
      end if;
      Into.Write_Entity ("collection_items_destination_url_template", Value.Collection_Items_Destination_Url_Template);
      if not Value.Created_Time.Is_Null then
         Into.Write_Entity ("created_time", Value.Created_Time);
      end if;
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Serialize (Into, "rejected_reasons", Value.Rejected_Reasons);
      Serialize (Into, "rejection_labels", Value.Rejection_Labels);
      if not Value.Review_Status.Is_Null then
         Into.Write_Entity ("review_status", Value.Review_Status);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      if not Value.Updated_Time.Is_Null then
         Into.Write_Entity ("updated_time", Value.Updated_Time);
      end if;
      Serialize (Into, "summary_status", Value.Summary_Status);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "ad_group_id", Value.Ad_Group_Id);
      Swagger.Streams.Deserialize (Object, "android_deep_link", Value.Android_Deep_Link);
      Swagger.Streams.Deserialize (Object, "carousel_android_deep_links", Value.Carousel_Android_Deep_Links);
      Swagger.Streams.Deserialize (Object, "carousel_destination_urls", Value.Carousel_Destination_Urls);
      Swagger.Streams.Deserialize (Object, "carousel_ios_deep_links", Value.Carousel_Ios_Deep_Links);
      Swagger.Streams.Deserialize (Object, "click_tracking_url", Value.Click_Tracking_Url);
      Deserialize (Object, "creative_type", Value.Creative_Type);
      Swagger.Streams.Deserialize (Object, "destination_url", Value.Destination_Url);
      Swagger.Streams.Deserialize (Object, "ios_deep_link", Value.Ios_Deep_Link);
      Swagger.Streams.Deserialize (Object, "is_pin_deleted", Value.Is_Pin_Deleted);
      Swagger.Streams.Deserialize (Object, "is_removable", Value.Is_Removable);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "tracking_urls", Value.Tracking_Urls);
      Swagger.Streams.Deserialize (Object, "view_tracking_url", Value.View_Tracking_Url);
      Swagger.Streams.Deserialize (Object, "lead_form_id", Value.Lead_Form_Id);
      Deserialize (Object, "grid_click_type", Value.Grid_Click_Type);
      Swagger.Streams.Deserialize (Object, "customizable_cta_type", Value.Customizable_Cta_Type);
      Deserialize (Object, "quiz_pin_data", Value.Quiz_Pin_Data);
      Swagger.Streams.Deserialize (Object, "pin_id", Value.Pin_Id);
      Swagger.Streams.Deserialize (Object, "ad_account_id", Value.Ad_Account_Id);
      Swagger.Streams.Deserialize (Object, "campaign_id", Value.Campaign_Id);
      Swagger.Streams.Deserialize (Object, "collection_items_destination_url_template", Value.Collection_Items_Destination_Url_Template);
      Swagger.Streams.Deserialize (Object, "created_time", Value.Created_Time);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "rejected_reasons", Value.Rejected_Reasons);
      Swagger.Streams.Deserialize (Object, "rejection_labels", Value.Rejection_Labels);
      Swagger.Streams.Deserialize (Object, "review_status", Value.Review_Status);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "updated_time", Value.Updated_Time);
      Deserialize (Object, "summary_status", Value.Summary_Status);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdsList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdsList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdsList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdsList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdsList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdvancedAuctionItemsGetRecord_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("item_id", Value.Item_Id);
      Serialize (Into, "country", Value.Country);
      Serialize (Into, "language", Value.Language);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdvancedAuctionItemsGetRecord_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdvancedAuctionItemsGetRecord_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "item_id", Value.Item_Id);
      Deserialize (Object, "country", Value.Country);
      Deserialize (Object, "language", Value.Language);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdvancedAuctionItemsGetRecord_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdvancedAuctionItemsGetRecord_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdvancedAuctionItemsGetRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdvancedAuctionItemsGetRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdvancedAuctionItemsGetRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdvancedAuctionItemsGetRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdvancedAuctionItemsGetRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdvancedAuctionItemsSubmitRecord_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "operation", Value.Operation);
      Into.Write_Entity ("item_id", Value.Item_Id);
      Serialize (Into, "country", Value.Country);
      Serialize (Into, "language", Value.Language);
      Serialize (Into, "bid_options", Value.Bid_Options);
      Serialize (Into, "update_mask", Value.Update_Mask);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdvancedAuctionItemsSubmitRecord_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdvancedAuctionItemsSubmitRecord_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "operation", Value.Operation);
      Swagger.Streams.Deserialize (Object, "item_id", Value.Item_Id);
      Deserialize (Object, "country", Value.Country);
      Deserialize (Object, "language", Value.Language);
      Deserialize (Object, "bid_options", Value.Bid_Options);
      Deserialize (Object, "update_mask", Value.Update_Mask);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdvancedAuctionItemsSubmitRecord_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdvancedAuctionItemsSubmitRecord_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdvancedAuctionItemsSubmitRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdvancedAuctionItemsSubmitRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdvancedAuctionItemsSubmitRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdvancedAuctionItemsSubmitRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdvancedAuctionItemsSubmitRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdvancedAuctionItem_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("item_id", Value.Item_Id);
      Serialize (Into, "country", Value.Country);
      Serialize (Into, "language", Value.Language);
      Serialize (Into, "bid_options", Value.Bid_Options);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdvancedAuctionItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdvancedAuctionItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "item_id", Value.Item_Id);
      Deserialize (Object, "country", Value.Country);
      Deserialize (Object, "language", Value.Language);
      Deserialize (Object, "bid_options", Value.Bid_Options);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdvancedAuctionItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdvancedAuctionItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdvancedAuctionItems_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Catalog_Id.Is_Null then
         Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      end if;
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdvancedAuctionItems_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdvancedAuctionItems_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdvancedAuctionItems_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdvancedAuctionItems_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdvancedAuctionProcessedItem_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "operation", Value.Operation);
      Into.Write_Entity ("item_id", Value.Item_Id);
      Serialize (Into, "country", Value.Country);
      Serialize (Into, "language", Value.Language);
      Serialize (Into, "bid_options", Value.Bid_Options);
      Serialize (Into, "update_mask", Value.Update_Mask);
      Serialize (Into, "errors", Value.Errors);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdvancedAuctionProcessedItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdvancedAuctionProcessedItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "operation", Value.Operation);
      Swagger.Streams.Deserialize (Object, "item_id", Value.Item_Id);
      Deserialize (Object, "country", Value.Country);
      Deserialize (Object, "language", Value.Language);
      Deserialize (Object, "bid_options", Value.Bid_Options);
      Deserialize (Object, "update_mask", Value.Update_Mask);
      Deserialize (Object, "errors", Value.Errors);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdvancedAuctionProcessedItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdvancedAuctionProcessedItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdvancedAuctionProcessedItems_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Catalog_Id.Is_Null then
         Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      end if;
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdvancedAuctionProcessedItems_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdvancedAuctionProcessedItems_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdvancedAuctionProcessedItems_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdvancedAuctionProcessedItems_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AnalyticsDailyMetrics_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "data_status", Value.Data_Status);
      if not Value.Date.Is_Null then
         Into.Write_Entity ("date", Value.Date);
      end if;
      Serialize (Into, "metrics", Value.Metrics);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AnalyticsDailyMetrics_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AnalyticsDailyMetrics_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "data_status", Value.Data_Status);
      Swagger.Streams.Deserialize (Object, "date", Value.Date);
      Swagger.Streams.Deserialize (Object, "metrics", Value.Metrics);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AnalyticsDailyMetrics_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AnalyticsDailyMetrics_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AnalyticsMetricsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "summary_metrics", Value.Summary_Metrics);
      Serialize (Into, "daily_metrics", Value.Daily_Metrics);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AnalyticsMetricsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AnalyticsMetricsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "summary_metrics", Value.Summary_Metrics);
      Deserialize (Object, "daily_metrics", Value.Daily_Metrics);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AnalyticsMetricsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AnalyticsMetricsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AppTypeMultipliers_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "APP_TYPE", Value.APP_TYPE);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AppTypeMultipliers_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AppTypeMultipliers_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "APP_TYPE", Value.APP_TYPE);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AppTypeMultipliers_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AppTypeMultipliers_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AssetGroupBinding_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Into.Write_Entity ("asset_group_name", Value.Asset_Group_Name);
      Into.Write_Entity ("asset_group_description", Value.Asset_Group_Description);
      Serialize (Into, "asset_group_types", Value.Asset_Group_Types);
      Serialize (Into, "ad_accounts_ids", Value.Ad_Accounts_Ids);
      Serialize (Into, "profiles_ids", Value.Profiles_Ids);
      Into.Write_Entity ("created_time", Value.Created_Time);
      Into.Write_Entity ("updated_time", Value.Updated_Time);
      Serialize (Into, "owner", Value.Owner);
      Serialize (Into, "created_by", Value.Created_By);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AssetGroupBinding_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AssetGroupBinding_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "asset_group_name", Value.Asset_Group_Name);
      Swagger.Streams.Deserialize (Object, "asset_group_description", Value.Asset_Group_Description);
      Swagger.Streams.Deserialize (Object, "asset_group_types", Value.Asset_Group_Types);
      Swagger.Streams.Deserialize (Object, "ad_accounts_ids", Value.Ad_Accounts_Ids);
      Swagger.Streams.Deserialize (Object, "profiles_ids", Value.Profiles_Ids);
      Swagger.Streams.Deserialize (Object, "created_time", Value.Created_Time);
      Swagger.Streams.Deserialize (Object, "updated_time", Value.Updated_Time);
      Deserialize (Object, "owner", Value.Owner);
      Deserialize (Object, "created_by", Value.Created_By);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AssetGroupBinding_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AssetGroupBinding_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AssetIdPermissions_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Asset_Id.Is_Null then
         Into.Write_Entity ("asset_id", Value.Asset_Id);
      end if;
      if not Value.Asset_Type.Is_Null then
         Into.Write_Entity ("asset_type", Value.Asset_Type);
      end if;
      Serialize (Into, "permissions", Value.Permissions);
      Serialize (Into, "asset_group_info", Value.Asset_Group_Info);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AssetIdPermissions_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AssetIdPermissions_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "asset_id", Value.Asset_Id);
      Swagger.Streams.Deserialize (Object, "asset_type", Value.Asset_Type);
      Swagger.Streams.Deserialize (Object, "permissions", Value.Permissions);
      Deserialize (Object, "asset_group_info", Value.Asset_Group_Info);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AssetIdPermissions_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AssetIdPermissions_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AudienceCategory_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Key.Is_Null then
         Into.Write_Entity ("key", Value.Key);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "ratio", Value.Ratio);
      Serialize (Into, "index", Value.Index);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Serialize (Into, "subcategories", Value.Subcategories);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AudienceCategory_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AudienceCategory_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "key", Value.Key);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "ratio", Value.Ratio);
      Swagger.Streams.Deserialize (Object, "index", Value.Index);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Deserialize (Object, "subcategories", Value.Subcategories);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AudienceCategory_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AudienceCategory_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PinterestTagEventData_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "currency", Value.Currency);
      if not Value.Lead_Type.Is_Null then
         Into.Write_Entity ("lead_type", Value.Lead_Type);
      end if;
      Serialize (Into, "line_items", Value.Line_Items);
      if not Value.Order_Id.Is_Null then
         Into.Write_Entity ("order_id", Value.Order_Id);
      end if;
      if not Value.Order_Quantity.Is_Null then
         Into.Write_Entity ("order_quantity", Value.Order_Quantity);
      end if;
      if not Value.Page_Name.Is_Null then
         Into.Write_Entity ("page_name", Value.Page_Name);
      end if;
      if not Value.Promo_Code.Is_Null then
         Into.Write_Entity ("promo_code", Value.Promo_Code);
      end if;
      if not Value.Property.Is_Null then
         Into.Write_Entity ("property", Value.Property);
      end if;
      if not Value.Search_Query.Is_Null then
         Into.Write_Entity ("search_query", Value.Search_Query);
      end if;
      if not Value.Value.Is_Null then
         Into.Write_Entity ("value", Value.Value);
      end if;
      if not Value.Video_Title.Is_Null then
         Into.Write_Entity ("video_title", Value.Video_Title);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PinterestTagEventData_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PinterestTagEventData_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "currency", Value.Currency);
      Swagger.Streams.Deserialize (Object, "lead_type", Value.Lead_Type);
      Deserialize (Object, "line_items", Value.Line_Items);
      Swagger.Streams.Deserialize (Object, "order_id", Value.Order_Id);
      Swagger.Streams.Deserialize (Object, "order_quantity", Value.Order_Quantity);
      Swagger.Streams.Deserialize (Object, "page_name", Value.Page_Name);
      Swagger.Streams.Deserialize (Object, "promo_code", Value.Promo_Code);
      Swagger.Streams.Deserialize (Object, "property", Value.Property);
      Swagger.Streams.Deserialize (Object, "search_query", Value.Search_Query);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Swagger.Streams.Deserialize (Object, "video_title", Value.Video_Title);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PinterestTagEventData_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PinterestTagEventData_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AudienceRule_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Country.Is_Null then
         Into.Write_Entity ("country", Value.Country);
      end if;
      if not Value.Customer_List_Id.Is_Null then
         Into.Write_Entity ("customer_list_id", Value.Customer_List_Id);
      end if;
      Serialize (Into, "engagement_domain", Value.Engagement_Domain);
      if not Value.Engagement_Type.Is_Null then
         Into.Write_Entity ("engagement_type", Value.Engagement_Type);
      end if;
      if not Value.Event.Is_Null then
         Into.Write_Entity ("event", Value.Event);
      end if;
      Serialize (Into, "event_data", Value.Event_Data);
      if not Value.Percentage.Is_Null then
         Into.Write_Entity ("percentage", Value.Percentage);
      end if;
      Serialize (Into, "pin_id", Value.Pin_Id);
      if not Value.Prefill.Is_Null then
         Into.Write_Entity ("prefill", Value.Prefill);
      end if;
      if not Value.Retention_Days.Is_Null then
         Into.Write_Entity ("retention_days", Value.Retention_Days);
      end if;
      Serialize (Into, "seed_id", Value.Seed_Id);
      Serialize (Into, "url", Value.Url);
      if not Value.Visitor_Source_Id.Is_Null then
         Into.Write_Entity ("visitor_source_id", Value.Visitor_Source_Id);
      end if;
      if not Swagger.Is_Null (Value.Event_Source) then
         Into.Write_Entity ("event_source", Value.Event_Source);
      end if;
      if not Swagger.Is_Null (Value.Ingestion_Source) then
         Into.Write_Entity ("ingestion_source", Value.Ingestion_Source);
      end if;
      if not Value.Engager_Type.Is_Null then
         Into.Write_Entity ("engager_type", Value.Engager_Type);
      end if;
      Serialize (Into, "campaign_id", Value.Campaign_Id);
      Serialize (Into, "ad_id", Value.Ad_Id);
      Serialize (Into, "objective_type", Value.Objective_Type);
      if not Value.Ad_Account_Id.Is_Null then
         Into.Write_Entity ("ad_account_id", Value.Ad_Account_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AudienceRule_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AudienceRule_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "country", Value.Country);
      Swagger.Streams.Deserialize (Object, "customer_list_id", Value.Customer_List_Id);
      Swagger.Streams.Deserialize (Object, "engagement_domain", Value.Engagement_Domain);
      Swagger.Streams.Deserialize (Object, "engagement_type", Value.Engagement_Type);
      Swagger.Streams.Deserialize (Object, "event", Value.Event);
      Deserialize (Object, "event_data", Value.Event_Data);
      Swagger.Streams.Deserialize (Object, "percentage", Value.Percentage);
      Swagger.Streams.Deserialize (Object, "pin_id", Value.Pin_Id);
      Swagger.Streams.Deserialize (Object, "prefill", Value.Prefill);
      Swagger.Streams.Deserialize (Object, "retention_days", Value.Retention_Days);
      Swagger.Streams.Deserialize (Object, "seed_id", Value.Seed_Id);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "visitor_source_id", Value.Visitor_Source_Id);
      Swagger.Streams.Deserialize (Object, "event_source", Value.Event_Source);
      Swagger.Streams.Deserialize (Object, "ingestion_source", Value.Ingestion_Source);
      Swagger.Streams.Deserialize (Object, "engager_type", Value.Engager_Type);
      Swagger.Streams.Deserialize (Object, "campaign_id", Value.Campaign_Id);
      Swagger.Streams.Deserialize (Object, "ad_id", Value.Ad_Id);
      Deserialize (Object, "objective_type", Value.Objective_Type);
      Swagger.Streams.Deserialize (Object, "ad_account_id", Value.Ad_Account_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AudienceRule_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AudienceRule_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AudienceCommon_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Ad_Account_Id.Is_Null then
         Into.Write_Entity ("ad_account_id", Value.Ad_Account_Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "rule", Value.Rule);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AudienceCommon_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AudienceCommon_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "ad_account_id", Value.Ad_Account_Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "rule", Value.Rule);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AudienceCommon_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AudienceCommon_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AudienceDefinitionResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AudienceDefinitionResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AudienceDefinitionResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AudienceDefinitionResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AudienceDefinitionResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AudienceDemographics_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "ages", Value.Ages);
      Serialize (Into, "genders", Value.Genders);
      Serialize (Into, "devices", Value.Devices);
      Serialize (Into, "metros", Value.Metros);
      Serialize (Into, "countries", Value.Countries);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AudienceDemographics_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AudienceDemographics_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "ages", Value.Ages);
      Deserialize (Object, "genders", Value.Genders);
      Deserialize (Object, "devices", Value.Devices);
      Deserialize (Object, "metros", Value.Metros);
      Deserialize (Object, "countries", Value.Countries);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AudienceDemographics_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AudienceDemographics_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AudienceInsightCategoryArrayResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AudienceInsightCategoryArrayResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AudienceInsightCategoryArrayResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AudienceInsightCategoryArrayResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AudienceInsightCategoryArrayResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Audience_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Ad_Account_Id.Is_Null then
         Into.Write_Entity ("ad_account_id", Value.Ad_Account_Id);
      end if;
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Audience_Type.Is_Null then
         Into.Write_Entity ("audience_type", Value.Audience_Type);
      end if;
      Into.Write_Entity ("description", Value.Description);
      Serialize (Into, "rule", Value.Rule);
      Into.Write_Entity ("size", Value.Size);
      if not Value.Status.Is_Null then
         Into.Write_Entity ("status", Value.Status);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      Into.Write_Entity ("created_timestamp", Value.Created_Timestamp);
      Into.Write_Entity ("updated_timestamp", Value.Updated_Timestamp);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Audience_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Audience_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "ad_account_id", Value.Ad_Account_Id);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "audience_type", Value.Audience_Type);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Deserialize (Object, "rule", Value.Rule);
      Swagger.Streams.Deserialize (Object, "size", Value.Size);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "created_timestamp", Value.Created_Timestamp);
      Swagger.Streams.Deserialize (Object, "updated_timestamp", Value.Updated_Timestamp);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Audience_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Audience_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AudiencesList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AudiencesList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AudiencesList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AudiencesList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AudiencesList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AuthRespondInvitesBodyInvitesInner_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "action", Value.Action);
      Into.Write_Entity ("invite_id", Value.Invite_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AuthRespondInvitesBodyInvitesInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AuthRespondInvitesBodyInvitesInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "action", Value.Action);
      Swagger.Streams.Deserialize (Object, "invite_id", Value.Invite_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AuthRespondInvitesBodyInvitesInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AuthRespondInvitesBodyInvitesInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AuthRespondInvitesBody_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "invites", Value.Invites);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AuthRespondInvitesBody_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AuthRespondInvitesBody_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "invites", Value.Invites);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AuthRespondInvitesBody_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AuthRespondInvitesBody_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BillingProfilesGet200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BillingProfilesGet200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BillingProfilesGet200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BillingProfilesGet200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BillingProfilesGet200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BoardSectionsList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BoardSectionsList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BoardSectionsList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BoardSectionsList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BoardSectionsList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Board_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Created_At.Is_Null then
         Into.Write_Entity ("created_at", Value.Created_At);
      end if;
      if not Value.Board_Pins_Modified_At.Is_Null then
         Into.Write_Entity ("board_pins_modified_at", Value.Board_Pins_Modified_At);
      end if;
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("description", Value.Description);
      if not Value.Collaborator_Count.Is_Null then
         Into.Write_Entity ("collaborator_count", Value.Collaborator_Count);
      end if;
      if not Value.Pin_Count.Is_Null then
         Into.Write_Entity ("pin_count", Value.Pin_Count);
      end if;
      if not Value.Follower_Count.Is_Null then
         Into.Write_Entity ("follower_count", Value.Follower_Count);
      end if;
      Serialize (Into, "media", Value.Media);
      Serialize (Into, "owner", Value.Owner);
      if not Value.Privacy.Is_Null then
         Into.Write_Entity ("privacy", Value.Privacy);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Board_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Board_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "created_at", Value.Created_At);
      Swagger.Streams.Deserialize (Object, "board_pins_modified_at", Value.Board_Pins_Modified_At);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "collaborator_count", Value.Collaborator_Count);
      Swagger.Streams.Deserialize (Object, "pin_count", Value.Pin_Count);
      Swagger.Streams.Deserialize (Object, "follower_count", Value.Follower_Count);
      Deserialize (Object, "media", Value.Media);
      Deserialize (Object, "owner", Value.Owner);
      Swagger.Streams.Deserialize (Object, "privacy", Value.Privacy);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Board_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Board_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BoardsList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BoardsList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BoardsList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BoardsList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BoardsList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Pin_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Created_At.Is_Null then
         Into.Write_Entity ("created_at", Value.Created_At);
      end if;
      Into.Write_Entity ("link", Value.Link);
      Into.Write_Entity ("title", Value.Title);
      Into.Write_Entity ("description", Value.Description);
      Into.Write_Entity ("dominant_color", Value.Dominant_Color);
      Into.Write_Entity ("alt_text", Value.Alt_Text);
      Serialize (Into, "creative_type", Value.Creative_Type);
      if not Value.Board_Id.Is_Null then
         Into.Write_Entity ("board_id", Value.Board_Id);
      end if;
      Into.Write_Entity ("board_section_id", Value.Board_Section_Id);
      Serialize (Into, "board_owner", Value.Board_Owner);
      if not Value.Is_Owner.Is_Null then
         Into.Write_Entity ("is_owner", Value.Is_Owner);
      end if;
      Serialize (Into, "media", Value.Media);
      Serialize (Into, "media_source", Value.Media_Source);
      Into.Write_Entity ("parent_pin_id", Value.Parent_Pin_Id);
      if not Value.Is_Standard.Is_Null then
         Into.Write_Entity ("is_standard", Value.Is_Standard);
      end if;
      if not Value.Has_Been_Promoted.Is_Null then
         Into.Write_Entity ("has_been_promoted", Value.Has_Been_Promoted);
      end if;
      Into.Write_Entity ("note", Value.Note);
      Into.Write_Entity ("pin_metrics", Value.Pin_Metrics);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Pin_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Pin_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "created_at", Value.Created_At);
      Swagger.Streams.Deserialize (Object, "link", Value.Link);
      Swagger.Streams.Deserialize (Object, "title", Value.Title);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "dominant_color", Value.Dominant_Color);
      Swagger.Streams.Deserialize (Object, "alt_text", Value.Alt_Text);
      Deserialize (Object, "creative_type", Value.Creative_Type);
      Swagger.Streams.Deserialize (Object, "board_id", Value.Board_Id);
      Swagger.Streams.Deserialize (Object, "board_section_id", Value.Board_Section_Id);
      Deserialize (Object, "board_owner", Value.Board_Owner);
      Swagger.Streams.Deserialize (Object, "is_owner", Value.Is_Owner);
      Deserialize (Object, "media", Value.Media);
      Deserialize (Object, "media_source", Value.Media_Source);
      Swagger.Streams.Deserialize (Object, "parent_pin_id", Value.Parent_Pin_Id);
      Swagger.Streams.Deserialize (Object, "is_standard", Value.Is_Standard);
      Swagger.Streams.Deserialize (Object, "has_been_promoted", Value.Has_Been_Promoted);
      Swagger.Streams.Deserialize (Object, "note", Value.Note);
      Swagger.Streams.Deserialize (Object, "pin_metrics", Value.Pin_Metrics);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Pin_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Pin_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BoardsListPins200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BoardsListPins200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BoardsListPins200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BoardsListPins200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BoardsListPins200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BoardsUserFollowsList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BoardsUserFollowsList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BoardsUserFollowsList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BoardsUserFollowsList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BoardsUserFollowsList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BulkUpsertStatusResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      if not Value.Result_Url.Is_Null then
         Into.Write_Entity ("result_url", Value.Result_Url);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BulkUpsertStatusResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BulkUpsertStatusResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "result_url", Value.Result_Url);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BulkUpsertStatusResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BulkUpsertStatusResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UserSingleAssetBinding_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "permissions", Value.Permissions);
      Serialize (Into, "user", Value.User);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserSingleAssetBinding_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UserSingleAssetBinding_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "permissions", Value.Permissions);
      Deserialize (Object, "user", Value.User);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UserSingleAssetBinding_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UserSingleAssetBinding_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BusinessAssetPartnersGet200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BusinessAssetPartnersGet200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BusinessAssetPartnersGet200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BusinessAssetPartnersGet200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BusinessAssetPartnersGet200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetBusinessAssetsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Asset_Id.Is_Null then
         Into.Write_Entity ("asset_id", Value.Asset_Id);
      end if;
      if not Value.Asset_Type.Is_Null then
         Into.Write_Entity ("asset_type", Value.Asset_Type);
      end if;
      Serialize (Into, "asset_group_info", Value.Asset_Group_Info);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetBusinessAssetsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetBusinessAssetsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "asset_id", Value.Asset_Id);
      Swagger.Streams.Deserialize (Object, "asset_type", Value.Asset_Type);
      Deserialize (Object, "asset_group_info", Value.Asset_Group_Info);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetBusinessAssetsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetBusinessAssetsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BusinessAssetsGet200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BusinessAssetsGet200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BusinessAssetsGet200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BusinessAssetsGet200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BusinessAssetsGet200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BusinessMemberAssetsGet200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BusinessMemberAssetsGet200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BusinessMemberAssetsGet200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BusinessMemberAssetsGet200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BusinessMemberAssetsGet200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BusinessMembersAssetAccessDeleteRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "accesses", Value.Accesses);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BusinessMembersAssetAccessDeleteRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BusinessMembersAssetAccessDeleteRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "accesses", Value.Accesses);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BusinessMembersAssetAccessDeleteRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BusinessMembersAssetAccessDeleteRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BusinessSharedAudienceResponse_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Audience_Id.Is_Null then
         Into.Write_Entity ("audience_id", Value.Audience_Id);
      end if;
      Serialize (Into, "permissions", Value.Permissions);
      Serialize (Into, "recipient_business_ids", Value.Recipient_Business_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BusinessSharedAudienceResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BusinessSharedAudienceResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "audience_id", Value.Audience_Id);
      Deserialize (Object, "permissions", Value.Permissions);
      Swagger.Streams.Deserialize (Object, "recipient_business_ids", Value.Recipient_Business_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BusinessSharedAudienceResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BusinessSharedAudienceResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BusinessSharedAudience_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("audience_id", Value.Audience_Id);
      Serialize (Into, "operation_type", Value.Operation_Type);
      Serialize (Into, "recipient_business_ids", Value.Recipient_Business_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BusinessSharedAudience_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BusinessSharedAudience_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "audience_id", Value.Audience_Id);
      Deserialize (Object, "operation_type", Value.Operation_Type);
      Swagger.Streams.Deserialize (Object, "recipient_business_ids", Value.Recipient_Business_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BusinessSharedAudience_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BusinessSharedAudience_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CampaignCreateResponseData_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Ad_Account_Id.Is_Null then
         Into.Write_Entity ("ad_account_id", Value.Ad_Account_Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "status", Value.Status);
      Into.Write_Entity ("lifetime_spend_cap", Value.Lifetime_Spend_Cap);
      Into.Write_Entity ("daily_spend_cap", Value.Daily_Spend_Cap);
      Into.Write_Entity ("order_line_id", Value.Order_Line_Id);
      Serialize (Into, "tracking_urls", Value.Tracking_Urls);
      Into.Write_Entity ("start_time", Value.Start_Time);
      Into.Write_Entity ("end_time", Value.End_Time);
      Into.Write_Entity ("is_flexible_daily_budgets", Value.Is_Flexible_Daily_Budgets);
      Into.Write_Entity ("default_ad_group_budget_in_micro_currency", Value.Default_Ad_Group_Budget_In_Micro_Currency);
      Into.Write_Entity ("is_automated_campaign", Value.Is_Automated_Campaign);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Serialize (Into, "objective_type", Value.Objective_Type);
      if not Value.Created_Time.Is_Null then
         Into.Write_Entity ("created_time", Value.Created_Time);
      end if;
      if not Value.Updated_Time.Is_Null then
         Into.Write_Entity ("updated_time", Value.Updated_Time);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      Into.Write_Entity ("is_campaign_budget_optimization", Value.Is_Campaign_Budget_Optimization);
      Serialize (Into, "summary_status", Value.Summary_Status);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CampaignCreateResponseData_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CampaignCreateResponseData_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "ad_account_id", Value.Ad_Account_Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "lifetime_spend_cap", Value.Lifetime_Spend_Cap);
      Swagger.Streams.Deserialize (Object, "daily_spend_cap", Value.Daily_Spend_Cap);
      Swagger.Streams.Deserialize (Object, "order_line_id", Value.Order_Line_Id);
      Deserialize (Object, "tracking_urls", Value.Tracking_Urls);
      Swagger.Streams.Deserialize (Object, "start_time", Value.Start_Time);
      Swagger.Streams.Deserialize (Object, "end_time", Value.End_Time);
      Swagger.Streams.Deserialize (Object, "is_flexible_daily_budgets", Value.Is_Flexible_Daily_Budgets);
      Swagger.Streams.Deserialize (Object, "default_ad_group_budget_in_micro_currency", Value.Default_Ad_Group_Budget_In_Micro_Currency);
      Swagger.Streams.Deserialize (Object, "is_automated_campaign", Value.Is_Automated_Campaign);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Deserialize (Object, "objective_type", Value.Objective_Type);
      Swagger.Streams.Deserialize (Object, "created_time", Value.Created_Time);
      Swagger.Streams.Deserialize (Object, "updated_time", Value.Updated_Time);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "is_campaign_budget_optimization", Value.Is_Campaign_Budget_Optimization);
      Deserialize (Object, "summary_status", Value.Summary_Status);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CampaignCreateResponseData_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CampaignCreateResponseData_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CampaignCreateResponseItem_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "data", Value.Data);
      Serialize (Into, "exceptions", Value.Exceptions);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CampaignCreateResponseItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CampaignCreateResponseItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "data", Value.Data);
      Deserialize (Object, "exceptions", Value.Exceptions);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CampaignCreateResponseItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CampaignCreateResponseItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CampaignCreateResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CampaignCreateResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CampaignCreateResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CampaignCreateResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CampaignCreateResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CampaignUpdateResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CampaignUpdateResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CampaignUpdateResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CampaignUpdateResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CampaignUpdateResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CampaignResponse_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Ad_Account_Id.Is_Null then
         Into.Write_Entity ("ad_account_id", Value.Ad_Account_Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "status", Value.Status);
      Into.Write_Entity ("lifetime_spend_cap", Value.Lifetime_Spend_Cap);
      Into.Write_Entity ("daily_spend_cap", Value.Daily_Spend_Cap);
      Into.Write_Entity ("order_line_id", Value.Order_Line_Id);
      Serialize (Into, "tracking_urls", Value.Tracking_Urls);
      Into.Write_Entity ("start_time", Value.Start_Time);
      Into.Write_Entity ("end_time", Value.End_Time);
      Into.Write_Entity ("is_flexible_daily_budgets", Value.Is_Flexible_Daily_Budgets);
      Serialize (Into, "objective_type", Value.Objective_Type);
      if not Value.Created_Time.Is_Null then
         Into.Write_Entity ("created_time", Value.Created_Time);
      end if;
      if not Value.Updated_Time.Is_Null then
         Into.Write_Entity ("updated_time", Value.Updated_Time);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      Into.Write_Entity ("is_campaign_budget_optimization", Value.Is_Campaign_Budget_Optimization);
      Serialize (Into, "summary_status", Value.Summary_Status);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CampaignResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CampaignResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "ad_account_id", Value.Ad_Account_Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "lifetime_spend_cap", Value.Lifetime_Spend_Cap);
      Swagger.Streams.Deserialize (Object, "daily_spend_cap", Value.Daily_Spend_Cap);
      Swagger.Streams.Deserialize (Object, "order_line_id", Value.Order_Line_Id);
      Deserialize (Object, "tracking_urls", Value.Tracking_Urls);
      Swagger.Streams.Deserialize (Object, "start_time", Value.Start_Time);
      Swagger.Streams.Deserialize (Object, "end_time", Value.End_Time);
      Swagger.Streams.Deserialize (Object, "is_flexible_daily_budgets", Value.Is_Flexible_Daily_Budgets);
      Deserialize (Object, "objective_type", Value.Objective_Type);
      Swagger.Streams.Deserialize (Object, "created_time", Value.Created_Time);
      Swagger.Streams.Deserialize (Object, "updated_time", Value.Updated_Time);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "is_campaign_budget_optimization", Value.Is_Campaign_Budget_Optimization);
      Deserialize (Object, "summary_status", Value.Summary_Status);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CampaignResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CampaignResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CampaignsList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CampaignsList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CampaignsList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CampaignsList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CampaignsList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Catalog_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("created_at", Value.Created_At);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("updated_at", Value.Updated_At);
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Catalog_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Catalog_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "created_at", Value.Created_At);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "updated_at", Value.Updated_At);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Catalog_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Catalog_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsCreateCreativeAssetsItem_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("creative_assets_id", Value.Creative_Assets_Id);
      Into.Write_Entity ("operation", Value.Operation);
      Serialize (Into, "attributes", Value.Attributes);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsCreateCreativeAssetsItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsCreateCreativeAssetsItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "creative_assets_id", Value.Creative_Assets_Id);
      Swagger.Streams.Deserialize (Object, "operation", Value.Operation);
      Deserialize (Object, "attributes", Value.Attributes);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsCreateCreativeAssetsItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsCreateCreativeAssetsItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsHotelAttributes_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("link", Value.Link);
      Into.Write_Entity ("description", Value.Description);
      Into.Write_Entity ("brand", Value.Brand);
      Serialize (Into, "latitude", Value.Latitude);
      Serialize (Into, "longitude", Value.Longitude);
      Serialize (Into, "neighborhood", Value.Neighborhood);
      Serialize (Into, "address", Value.Address);
      Into.Write_Entity ("custom_label_0", Value.Custom_Label_0);
      Into.Write_Entity ("custom_label_1", Value.Custom_Label_1);
      Into.Write_Entity ("custom_label_2", Value.Custom_Label_2);
      Into.Write_Entity ("custom_label_3", Value.Custom_Label_3);
      Into.Write_Entity ("custom_label_4", Value.Custom_Label_4);
      Into.Write_Entity ("category", Value.Category);
      Into.Write_Entity ("base_price", Value.Base_Price);
      Into.Write_Entity ("sale_price", Value.Sale_Price);
      Serialize (Into, "guest_ratings", Value.Guest_Ratings);
      Serialize (Into, "main_image", Value.Main_Image);
      Serialize (Into, "additional_image_link", Value.Additional_Image_Link);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsHotelAttributes_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsHotelAttributes_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "link", Value.Link);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "brand", Value.Brand);
      Swagger.Streams.Deserialize (Object, "latitude", Value.Latitude);
      Swagger.Streams.Deserialize (Object, "longitude", Value.Longitude);
      Swagger.Streams.Deserialize (Object, "neighborhood", Value.Neighborhood);
      Deserialize (Object, "address", Value.Address);
      Swagger.Streams.Deserialize (Object, "custom_label_0", Value.Custom_Label_0);
      Swagger.Streams.Deserialize (Object, "custom_label_1", Value.Custom_Label_1);
      Swagger.Streams.Deserialize (Object, "custom_label_2", Value.Custom_Label_2);
      Swagger.Streams.Deserialize (Object, "custom_label_3", Value.Custom_Label_3);
      Swagger.Streams.Deserialize (Object, "custom_label_4", Value.Custom_Label_4);
      Swagger.Streams.Deserialize (Object, "category", Value.Category);
      Swagger.Streams.Deserialize (Object, "base_price", Value.Base_Price);
      Swagger.Streams.Deserialize (Object, "sale_price", Value.Sale_Price);
      Deserialize (Object, "guest_ratings", Value.Guest_Ratings);
      Deserialize (Object, "main_image", Value.Main_Image);
      Swagger.Streams.Deserialize (Object, "additional_image_link", Value.Additional_Image_Link);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsHotelAttributes_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsHotelAttributes_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsCreateHotelItem_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("hotel_id", Value.Hotel_Id);
      Into.Write_Entity ("operation", Value.Operation);
      Serialize (Into, "attributes", Value.Attributes);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsCreateHotelItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsCreateHotelItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "hotel_id", Value.Hotel_Id);
      Swagger.Streams.Deserialize (Object, "operation", Value.Operation);
      Deserialize (Object, "attributes", Value.Attributes);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsCreateHotelItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsCreateHotelItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ItemAttributesRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("ad_link", Value.Ad_Link);
      Into.Write_Entity ("adult", Value.Adult);
      Into.Write_Entity ("age_group", Value.Age_Group);
      if not Value.Availability.Is_Null then
         Into.Write_Entity ("availability", Value.Availability);
      end if;
      Serialize (Into, "average_review_rating", Value.Average_Review_Rating);
      Into.Write_Entity ("brand", Value.Brand);
      Into.Write_Entity ("checkout_enabled", Value.Checkout_Enabled);
      Into.Write_Entity ("color", Value.Color);
      Into.Write_Entity ("condition", Value.Condition);
      Into.Write_Entity ("custom_label_0", Value.Custom_Label_0);
      Into.Write_Entity ("custom_label_1", Value.Custom_Label_1);
      Into.Write_Entity ("custom_label_2", Value.Custom_Label_2);
      Into.Write_Entity ("custom_label_3", Value.Custom_Label_3);
      Into.Write_Entity ("custom_label_4", Value.Custom_Label_4);
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      Into.Write_Entity ("free_shipping_label", Value.Free_Shipping_Label);
      Into.Write_Entity ("free_shipping_limit", Value.Free_Shipping_Limit);
      Into.Write_Entity ("gender", Value.Gender);
      Into.Write_Entity ("google_product_category", Value.Google_Product_Category);
      Into.Write_Entity ("gtin", Value.Gtin);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Into.Write_Entity ("item_group_id", Value.Item_Group_Id);
      Into.Write_Entity ("last_updated_time", Value.Last_Updated_Time);
      if not Value.Link.Is_Null then
         Into.Write_Entity ("link", Value.Link);
      end if;
      Into.Write_Entity ("material", Value.Material);
      Into.Write_Entity ("min_ad_price", Value.Min_Ad_Price);
      Into.Write_Entity ("mobile_link", Value.Mobile_Link);
      Into.Write_Entity ("mpn", Value.Mpn);
      Into.Write_Entity ("number_of_ratings", Value.Number_Of_Ratings);
      Into.Write_Entity ("number_of_reviews", Value.Number_Of_Reviews);
      Into.Write_Entity ("pattern", Value.Pattern);
      if not Value.Price.Is_Null then
         Into.Write_Entity ("price", Value.Price);
      end if;
      Into.Write_Entity ("product_type", Value.Product_Type);
      Into.Write_Entity ("sale_price", Value.Sale_Price);
      Into.Write_Entity ("shipping", Value.Shipping);
      Into.Write_Entity ("shipping_height", Value.Shipping_Height);
      Into.Write_Entity ("shipping_weight", Value.Shipping_Weight);
      Into.Write_Entity ("shipping_width", Value.Shipping_Width);
      Into.Write_Entity ("size", Value.Size);
      Into.Write_Entity ("size_system", Value.Size_System);
      Into.Write_Entity ("size_type", Value.Size_Type);
      Into.Write_Entity ("tax", Value.Tax);
      if not Value.Title.Is_Null then
         Into.Write_Entity ("title", Value.Title);
      end if;
      Serialize (Into, "variant_names", Value.Variant_Names);
      Serialize (Into, "variant_values", Value.Variant_Values);
      Serialize (Into, "additional_image_link", Value.Additional_Image_Link);
      Serialize (Into, "image_link", Value.Image_Link);
      Into.Write_Entity ("video_link", Value.Video_Link);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ItemAttributesRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ItemAttributesRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "ad_link", Value.Ad_Link);
      Swagger.Streams.Deserialize (Object, "adult", Value.Adult);
      Swagger.Streams.Deserialize (Object, "age_group", Value.Age_Group);
      Swagger.Streams.Deserialize (Object, "availability", Value.Availability);
      Swagger.Streams.Deserialize (Object, "average_review_rating", Value.Average_Review_Rating);
      Swagger.Streams.Deserialize (Object, "brand", Value.Brand);
      Swagger.Streams.Deserialize (Object, "checkout_enabled", Value.Checkout_Enabled);
      Swagger.Streams.Deserialize (Object, "color", Value.Color);
      Swagger.Streams.Deserialize (Object, "condition", Value.Condition);
      Swagger.Streams.Deserialize (Object, "custom_label_0", Value.Custom_Label_0);
      Swagger.Streams.Deserialize (Object, "custom_label_1", Value.Custom_Label_1);
      Swagger.Streams.Deserialize (Object, "custom_label_2", Value.Custom_Label_2);
      Swagger.Streams.Deserialize (Object, "custom_label_3", Value.Custom_Label_3);
      Swagger.Streams.Deserialize (Object, "custom_label_4", Value.Custom_Label_4);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "free_shipping_label", Value.Free_Shipping_Label);
      Swagger.Streams.Deserialize (Object, "free_shipping_limit", Value.Free_Shipping_Limit);
      Swagger.Streams.Deserialize (Object, "gender", Value.Gender);
      Swagger.Streams.Deserialize (Object, "google_product_category", Value.Google_Product_Category);
      Swagger.Streams.Deserialize (Object, "gtin", Value.Gtin);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "item_group_id", Value.Item_Group_Id);
      Swagger.Streams.Deserialize (Object, "last_updated_time", Value.Last_Updated_Time);
      Swagger.Streams.Deserialize (Object, "link", Value.Link);
      Swagger.Streams.Deserialize (Object, "material", Value.Material);
      Swagger.Streams.Deserialize (Object, "min_ad_price", Value.Min_Ad_Price);
      Swagger.Streams.Deserialize (Object, "mobile_link", Value.Mobile_Link);
      Swagger.Streams.Deserialize (Object, "mpn", Value.Mpn);
      Swagger.Streams.Deserialize (Object, "number_of_ratings", Value.Number_Of_Ratings);
      Swagger.Streams.Deserialize (Object, "number_of_reviews", Value.Number_Of_Reviews);
      Swagger.Streams.Deserialize (Object, "pattern", Value.Pattern);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "product_type", Value.Product_Type);
      Swagger.Streams.Deserialize (Object, "sale_price", Value.Sale_Price);
      Swagger.Streams.Deserialize (Object, "shipping", Value.Shipping);
      Swagger.Streams.Deserialize (Object, "shipping_height", Value.Shipping_Height);
      Swagger.Streams.Deserialize (Object, "shipping_weight", Value.Shipping_Weight);
      Swagger.Streams.Deserialize (Object, "shipping_width", Value.Shipping_Width);
      Swagger.Streams.Deserialize (Object, "size", Value.Size);
      Swagger.Streams.Deserialize (Object, "size_system", Value.Size_System);
      Swagger.Streams.Deserialize (Object, "size_type", Value.Size_Type);
      Swagger.Streams.Deserialize (Object, "tax", Value.Tax);
      Swagger.Streams.Deserialize (Object, "title", Value.Title);
      Swagger.Streams.Deserialize (Object, "variant_names", Value.Variant_Names);
      Swagger.Streams.Deserialize (Object, "variant_values", Value.Variant_Values);
      Swagger.Streams.Deserialize (Object, "additional_image_link", Value.Additional_Image_Link);
      Deserialize (Object, "image_link", Value.Image_Link);
      Swagger.Streams.Deserialize (Object, "video_link", Value.Video_Link);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ItemAttributesRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ItemAttributesRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsCreateRetailItem_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("item_id", Value.Item_Id);
      Into.Write_Entity ("operation", Value.Operation);
      Serialize (Into, "attributes", Value.Attributes);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsCreateRetailItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsCreateRetailItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "item_id", Value.Item_Id);
      Swagger.Streams.Deserialize (Object, "operation", Value.Operation);
      Deserialize (Object, "attributes", Value.Attributes);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsCreateRetailItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsCreateRetailItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsCreativeAssetsBatchItem_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("creative_assets_id", Value.Creative_Assets_Id);
      Into.Write_Entity ("operation", Value.Operation);
      Serialize (Into, "attributes", Value.Attributes);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsCreativeAssetsBatchItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsCreativeAssetsBatchItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "creative_assets_id", Value.Creative_Assets_Id);
      Swagger.Streams.Deserialize (Object, "operation", Value.Operation);
      Deserialize (Object, "attributes", Value.Attributes);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsCreativeAssetsBatchItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsCreativeAssetsBatchItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsCreativeAssetsProductGroupFilters_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "any_of", Value.Any_Of);
      Serialize (Into, "all_of", Value.All_Of);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsCreativeAssetsProductGroupFilters_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsCreativeAssetsProductGroupFilters_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "any_of", Value.Any_Of);
      Deserialize (Object, "all_of", Value.All_Of);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsCreativeAssetsProductGroupFilters_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsCreativeAssetsProductGroupFilters_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsCreativeAssetsListProductsByCatalogBasedFilterRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      Serialize (Into, "filters", Value.Filters);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsCreativeAssetsListProductsByCatalogBasedFilterRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsCreativeAssetsListProductsByCatalogBasedFilterRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
      Deserialize (Object, "filters", Value.Filters);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsCreativeAssetsListProductsByCatalogBasedFilterRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsCreativeAssetsListProductsByCatalogBasedFilterRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsCreativeAssetsProductGroupCreateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("description", Value.Description);
      Serialize (Into, "filters", Value.Filters);
      Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsCreativeAssetsProductGroupCreateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsCreativeAssetsProductGroupCreateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Deserialize (Object, "filters", Value.Filters);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsCreativeAssetsProductGroupCreateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsCreativeAssetsProductGroupCreateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsCreativeAssetsProductGroupFiltersAllOf_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "all_of", Value.All_Of);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsCreativeAssetsProductGroupFiltersAllOf_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsCreativeAssetsProductGroupFiltersAllOf_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "all_of", Value.All_Of);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsCreativeAssetsProductGroupFiltersAllOf_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsCreativeAssetsProductGroupFiltersAllOf_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsCreativeAssetsProductGroupFiltersAnyOf_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "any_of", Value.Any_Of);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsCreativeAssetsProductGroupFiltersAnyOf_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsCreativeAssetsProductGroupFiltersAnyOf_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "any_of", Value.Any_Of);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsCreativeAssetsProductGroupFiltersAnyOf_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsCreativeAssetsProductGroupFiltersAnyOf_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsCreativeAssetsProductGroupUpdateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Catalog_Type.Is_Null then
         Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Into.Write_Entity ("description", Value.Description);
      Serialize (Into, "filters", Value.Filters);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsCreativeAssetsProductGroupUpdateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsCreativeAssetsProductGroupUpdateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Deserialize (Object, "filters", Value.Filters);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsCreativeAssetsProductGroupUpdateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsCreativeAssetsProductGroupUpdateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsCreativeAssetsProductGroup_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Into.Write_Entity ("id", Value.Id);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Into.Write_Entity ("description", Value.Description);
      Serialize (Into, "filters", Value.Filters);
      if not Value.Created_At.Is_Null then
         Into.Write_Entity ("created_at", Value.Created_At);
      end if;
      if not Value.Updated_At.Is_Null then
         Into.Write_Entity ("updated_at", Value.Updated_At);
      end if;
      Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsCreativeAssetsProductGroup_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsCreativeAssetsProductGroup_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Deserialize (Object, "filters", Value.Filters);
      Swagger.Streams.Deserialize (Object, "created_at", Value.Created_At);
      Swagger.Streams.Deserialize (Object, "updated_at", Value.Updated_At);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsCreativeAssetsProductGroup_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsCreativeAssetsProductGroup_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsCreativeAssetsProductMetadata_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("creative_assets_id", Value.Creative_Assets_Id);
      Serialize (Into, "visibility", Value.Visibility);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsCreativeAssetsProductMetadata_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsCreativeAssetsProductMetadata_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "creative_assets_id", Value.Creative_Assets_Id);
      Deserialize (Object, "visibility", Value.Visibility);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsCreativeAssetsProductMetadata_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsCreativeAssetsProductMetadata_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsFeedIngestion_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("feed_id", Value.Feed_Id);
      Into.Write_Entity ("created_at", Value.Created_At);
      Serialize (Into, "status", Value.Status);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsFeedIngestion_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsFeedIngestion_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "feed_id", Value.Feed_Id);
      Swagger.Streams.Deserialize (Object, "created_at", Value.Created_At);
      Deserialize (Object, "status", Value.Status);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsFeedIngestion_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsFeedIngestion_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsUpdatableHotelAttributes_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("link", Value.Link);
      Into.Write_Entity ("description", Value.Description);
      Into.Write_Entity ("brand", Value.Brand);
      Serialize (Into, "latitude", Value.Latitude);
      Serialize (Into, "longitude", Value.Longitude);
      Serialize (Into, "neighborhood", Value.Neighborhood);
      Serialize (Into, "address", Value.Address);
      Into.Write_Entity ("custom_label_0", Value.Custom_Label_0);
      Into.Write_Entity ("custom_label_1", Value.Custom_Label_1);
      Into.Write_Entity ("custom_label_2", Value.Custom_Label_2);
      Into.Write_Entity ("custom_label_3", Value.Custom_Label_3);
      Into.Write_Entity ("custom_label_4", Value.Custom_Label_4);
      Into.Write_Entity ("category", Value.Category);
      Into.Write_Entity ("base_price", Value.Base_Price);
      Into.Write_Entity ("sale_price", Value.Sale_Price);
      Serialize (Into, "guest_ratings", Value.Guest_Ratings);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsUpdatableHotelAttributes_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsUpdatableHotelAttributes_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "link", Value.Link);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "brand", Value.Brand);
      Swagger.Streams.Deserialize (Object, "latitude", Value.Latitude);
      Swagger.Streams.Deserialize (Object, "longitude", Value.Longitude);
      Swagger.Streams.Deserialize (Object, "neighborhood", Value.Neighborhood);
      Deserialize (Object, "address", Value.Address);
      Swagger.Streams.Deserialize (Object, "custom_label_0", Value.Custom_Label_0);
      Swagger.Streams.Deserialize (Object, "custom_label_1", Value.Custom_Label_1);
      Swagger.Streams.Deserialize (Object, "custom_label_2", Value.Custom_Label_2);
      Swagger.Streams.Deserialize (Object, "custom_label_3", Value.Custom_Label_3);
      Swagger.Streams.Deserialize (Object, "custom_label_4", Value.Custom_Label_4);
      Swagger.Streams.Deserialize (Object, "category", Value.Category);
      Swagger.Streams.Deserialize (Object, "base_price", Value.Base_Price);
      Swagger.Streams.Deserialize (Object, "sale_price", Value.Sale_Price);
      Deserialize (Object, "guest_ratings", Value.Guest_Ratings);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsUpdatableHotelAttributes_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsUpdatableHotelAttributes_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsHotelBatchItem_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("hotel_id", Value.Hotel_Id);
      Into.Write_Entity ("operation", Value.Operation);
      Serialize (Into, "attributes", Value.Attributes);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsHotelBatchItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsHotelBatchItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "hotel_id", Value.Hotel_Id);
      Swagger.Streams.Deserialize (Object, "operation", Value.Operation);
      Deserialize (Object, "attributes", Value.Attributes);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsHotelBatchItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsHotelBatchItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsHotelProductGroupFilters_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "any_of", Value.Any_Of);
      Serialize (Into, "all_of", Value.All_Of);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsHotelProductGroupFilters_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsHotelProductGroupFilters_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "any_of", Value.Any_Of);
      Deserialize (Object, "all_of", Value.All_Of);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsHotelProductGroupFilters_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsHotelProductGroupFilters_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsHotelListProductsByCatalogBasedFilterRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      Serialize (Into, "filters", Value.Filters);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsHotelListProductsByCatalogBasedFilterRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsHotelListProductsByCatalogBasedFilterRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
      Deserialize (Object, "filters", Value.Filters);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsHotelListProductsByCatalogBasedFilterRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsHotelListProductsByCatalogBasedFilterRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsHotelProductGroupCreateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("description", Value.Description);
      Serialize (Into, "filters", Value.Filters);
      Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsHotelProductGroupCreateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsHotelProductGroupCreateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Deserialize (Object, "filters", Value.Filters);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsHotelProductGroupCreateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsHotelProductGroupCreateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsProductGroupPricingCurrencyCriteria_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("operator", Value.Operator);
      Serialize (Into, "value", Value.Value);
      Serialize (Into, "currency", Value.Currency);
      if not Value.Negated.Is_Null then
         Into.Write_Entity ("negated", Value.Negated);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsProductGroupPricingCurrencyCriteria_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsProductGroupPricingCurrencyCriteria_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "operator", Value.Operator);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Deserialize (Object, "currency", Value.Currency);
      Swagger.Streams.Deserialize (Object, "negated", Value.Negated);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsProductGroupPricingCurrencyCriteria_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsProductGroupPricingCurrencyCriteria_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsHotelProductGroupFilterKeys_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "PRICE", Value.PRICE);
      Into.Write_Entity ("HOTEL_ID", Value.HOTEL_ID);
      Into.Write_Entity ("BRAND", Value.BRAND);
      Into.Write_Entity ("CUSTOM_LABEL_0", Value.CUSTOM_LABEL_0);
      Into.Write_Entity ("CUSTOM_LABEL_1", Value.CUSTOM_LABEL_1);
      Into.Write_Entity ("CUSTOM_LABEL_2", Value.CUSTOM_LABEL_2);
      Into.Write_Entity ("CUSTOM_LABEL_3", Value.CUSTOM_LABEL_3);
      Into.Write_Entity ("CUSTOM_LABEL_4", Value.CUSTOM_LABEL_4);
      Into.Write_Entity ("COUNTRY", Value.COUNTRY);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsHotelProductGroupFilterKeys_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsHotelProductGroupFilterKeys_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "PRICE", Value.PRICE);
      Swagger.Streams.Deserialize (Object, "HOTEL_ID", Value.HOTEL_ID);
      Swagger.Streams.Deserialize (Object, "BRAND", Value.BRAND);
      Swagger.Streams.Deserialize (Object, "CUSTOM_LABEL_0", Value.CUSTOM_LABEL_0);
      Swagger.Streams.Deserialize (Object, "CUSTOM_LABEL_1", Value.CUSTOM_LABEL_1);
      Swagger.Streams.Deserialize (Object, "CUSTOM_LABEL_2", Value.CUSTOM_LABEL_2);
      Swagger.Streams.Deserialize (Object, "CUSTOM_LABEL_3", Value.CUSTOM_LABEL_3);
      Swagger.Streams.Deserialize (Object, "CUSTOM_LABEL_4", Value.CUSTOM_LABEL_4);
      Swagger.Streams.Deserialize (Object, "COUNTRY", Value.COUNTRY);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsHotelProductGroupFilterKeys_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsHotelProductGroupFilterKeys_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsHotelProductGroupFiltersAllOf_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "all_of", Value.All_Of);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsHotelProductGroupFiltersAllOf_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsHotelProductGroupFiltersAllOf_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "all_of", Value.All_Of);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsHotelProductGroupFiltersAllOf_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsHotelProductGroupFiltersAllOf_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsHotelProductGroupFiltersAnyOf_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "any_of", Value.Any_Of);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsHotelProductGroupFiltersAnyOf_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsHotelProductGroupFiltersAnyOf_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "any_of", Value.Any_Of);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsHotelProductGroupFiltersAnyOf_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsHotelProductGroupFiltersAnyOf_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsHotelProductGroupUpdateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Catalog_Type.Is_Null then
         Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Into.Write_Entity ("description", Value.Description);
      Serialize (Into, "filters", Value.Filters);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsHotelProductGroupUpdateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsHotelProductGroupUpdateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Deserialize (Object, "filters", Value.Filters);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsHotelProductGroupUpdateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsHotelProductGroupUpdateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsHotelProductGroup_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Into.Write_Entity ("id", Value.Id);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Into.Write_Entity ("description", Value.Description);
      Serialize (Into, "filters", Value.Filters);
      if not Value.Created_At.Is_Null then
         Into.Write_Entity ("created_at", Value.Created_At);
      end if;
      if not Value.Updated_At.Is_Null then
         Into.Write_Entity ("updated_at", Value.Updated_At);
      end if;
      Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsHotelProductGroup_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsHotelProductGroup_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Deserialize (Object, "filters", Value.Filters);
      Swagger.Streams.Deserialize (Object, "created_at", Value.Created_At);
      Swagger.Streams.Deserialize (Object, "updated_at", Value.Updated_At);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsHotelProductGroup_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsHotelProductGroup_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsHotelReportParameters_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Serialize (Into, "report", Value.Report);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsHotelReportParameters_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsHotelReportParameters_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Deserialize (Object, "report", Value.Report);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsHotelReportParameters_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsHotelReportParameters_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsItemValidationDetails_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "attribute_name", Value.Attribute_Name);
      Into.Write_Entity ("provided_value", Value.Provided_Value);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsItemValidationDetails_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsItemValidationDetails_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "attribute_name", Value.Attribute_Name);
      Swagger.Streams.Deserialize (Object, "provided_value", Value.Provided_Value);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsItemValidationDetails_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsItemValidationDetails_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsItemValidationErrors_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "ADULT_INVALID", Value.ADULT_INVALID);
      Serialize (Into, "ADWORDS_FORMAT_INVALID", Value.ADWORDS_FORMAT_INVALID);
      Serialize (Into, "AVAILABILITY_INVALID", Value.AVAILABILITY_INVALID);
      Serialize (Into, "BLOCKLISTED_IMAGE_SIGNATURE", Value.BLOCKLISTED_IMAGE_SIGNATURE);
      Serialize (Into, "DESCRIPTION_MISSING", Value.DESCRIPTION_MISSING);
      Serialize (Into, "DUPLICATE_PRODUCTS", Value.DUPLICATE_PRODUCTS);
      Serialize (Into, "IMAGE_LINK_INVALID", Value.IMAGE_LINK_INVALID);
      Serialize (Into, "IMAGE_LINK_LENGTH_TOO_LONG", Value.IMAGE_LINK_LENGTH_TOO_LONG);
      Serialize (Into, "IMAGE_LINK_MISSING", Value.IMAGE_LINK_MISSING);
      Serialize (Into, "INVALID_DOMAIN", Value.INVALID_DOMAIN);
      Serialize (Into, "ITEMID_MISSING", Value.ITEMID_MISSING);
      Serialize (Into, "ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE", Value.ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE);
      Serialize (Into, "LINK_FORMAT_INVALID", Value.LINK_FORMAT_INVALID);
      Serialize (Into, "LINK_LENGTH_TOO_LONG", Value.LINK_LENGTH_TOO_LONG);
      Serialize (Into, "LIST_PRICE_INVALID", Value.LIST_PRICE_INVALID);
      Serialize (Into, "MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED", Value.MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED);
      Serialize (Into, "PARSE_LINE_ERROR", Value.PARSE_LINE_ERROR);
      Serialize (Into, "PINJOIN_CONTENT_UNSAFE", Value.PINJOIN_CONTENT_UNSAFE);
      Serialize (Into, "PRICE_CANNOT_BE_DETERMINED", Value.PRICE_CANNOT_BE_DETERMINED);
      Serialize (Into, "PRICE_MISSING", Value.PRICE_MISSING);
      Serialize (Into, "PRODUCT_LINK_MISSING", Value.PRODUCT_LINK_MISSING);
      Serialize (Into, "PRODUCT_PRICE_INVALID", Value.PRODUCT_PRICE_INVALID);
      Serialize (Into, "TITLE_MISSING", Value.TITLE_MISSING);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsItemValidationErrors_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsItemValidationErrors_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "ADULT_INVALID", Value.ADULT_INVALID);
      Deserialize (Object, "ADWORDS_FORMAT_INVALID", Value.ADWORDS_FORMAT_INVALID);
      Deserialize (Object, "AVAILABILITY_INVALID", Value.AVAILABILITY_INVALID);
      Deserialize (Object, "BLOCKLISTED_IMAGE_SIGNATURE", Value.BLOCKLISTED_IMAGE_SIGNATURE);
      Deserialize (Object, "DESCRIPTION_MISSING", Value.DESCRIPTION_MISSING);
      Deserialize (Object, "DUPLICATE_PRODUCTS", Value.DUPLICATE_PRODUCTS);
      Deserialize (Object, "IMAGE_LINK_INVALID", Value.IMAGE_LINK_INVALID);
      Deserialize (Object, "IMAGE_LINK_LENGTH_TOO_LONG", Value.IMAGE_LINK_LENGTH_TOO_LONG);
      Deserialize (Object, "IMAGE_LINK_MISSING", Value.IMAGE_LINK_MISSING);
      Deserialize (Object, "INVALID_DOMAIN", Value.INVALID_DOMAIN);
      Deserialize (Object, "ITEMID_MISSING", Value.ITEMID_MISSING);
      Deserialize (Object, "ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE", Value.ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE);
      Deserialize (Object, "LINK_FORMAT_INVALID", Value.LINK_FORMAT_INVALID);
      Deserialize (Object, "LINK_LENGTH_TOO_LONG", Value.LINK_LENGTH_TOO_LONG);
      Deserialize (Object, "LIST_PRICE_INVALID", Value.LIST_PRICE_INVALID);
      Deserialize (Object, "MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED", Value.MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED);
      Deserialize (Object, "PARSE_LINE_ERROR", Value.PARSE_LINE_ERROR);
      Deserialize (Object, "PINJOIN_CONTENT_UNSAFE", Value.PINJOIN_CONTENT_UNSAFE);
      Deserialize (Object, "PRICE_CANNOT_BE_DETERMINED", Value.PRICE_CANNOT_BE_DETERMINED);
      Deserialize (Object, "PRICE_MISSING", Value.PRICE_MISSING);
      Deserialize (Object, "PRODUCT_LINK_MISSING", Value.PRODUCT_LINK_MISSING);
      Deserialize (Object, "PRODUCT_PRICE_INVALID", Value.PRODUCT_PRICE_INVALID);
      Deserialize (Object, "TITLE_MISSING", Value.TITLE_MISSING);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsItemValidationErrors_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsItemValidationErrors_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsItemValidationWarnings_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "AD_LINK_FORMAT_WARNING", Value.AD_LINK_FORMAT_WARNING);
      Serialize (Into, "AD_LINK_SAME_AS_LINK", Value.AD_LINK_SAME_AS_LINK);
      Serialize (Into, "ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG", Value.ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG);
      Serialize (Into, "ADDITIONAL_IMAGE_LINK_WARNING", Value.ADDITIONAL_IMAGE_LINK_WARNING);
      Serialize (Into, "ADWORDS_FORMAT_WARNING", Value.ADWORDS_FORMAT_WARNING);
      Serialize (Into, "ADWORDS_SAME_AS_LINK", Value.ADWORDS_SAME_AS_LINK);
      Serialize (Into, "AGE_GROUP_INVALID", Value.AGE_GROUP_INVALID);
      Serialize (Into, "SIZE_SYSTEM_INVALID", Value.SIZE_SYSTEM_INVALID);
      Serialize (Into, "ANDROID_DEEP_LINK_INVALID", Value.ANDROID_DEEP_LINK_INVALID);
      Serialize (Into, "AVAILABILITY_DATE_INVALID", Value.AVAILABILITY_DATE_INVALID);
      Serialize (Into, "COUNTRY_DOES_NOT_MAP_TO_CURRENCY", Value.COUNTRY_DOES_NOT_MAP_TO_CURRENCY);
      Serialize (Into, "CUSTOM_LABEL_LENGTH_TOO_LONG", Value.CUSTOM_LABEL_LENGTH_TOO_LONG);
      Serialize (Into, "DESCRIPTION_LENGTH_TOO_LONG", Value.DESCRIPTION_LENGTH_TOO_LONG);
      Serialize (Into, "EXPIRATION_DATE_INVALID", Value.EXPIRATION_DATE_INVALID);
      Serialize (Into, "GENDER_INVALID", Value.GENDER_INVALID);
      Serialize (Into, "GTIN_INVALID", Value.GTIN_INVALID);
      Serialize (Into, "IMAGE_LINK_WARNING", Value.IMAGE_LINK_WARNING);
      Serialize (Into, "IOS_DEEP_LINK_INVALID", Value.IOS_DEEP_LINK_INVALID);
      Serialize (Into, "IS_BUNDLE_INVALID", Value.IS_BUNDLE_INVALID);
      Serialize (Into, "ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE", Value.ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE);
      Serialize (Into, "LINK_FORMAT_WARNING", Value.LINK_FORMAT_WARNING);
      Serialize (Into, "MIN_AD_PRICE_INVALID", Value.MIN_AD_PRICE_INVALID);
      Serialize (Into, "MPN_INVALID", Value.MPN_INVALID);
      Serialize (Into, "MULTIPACK_INVALID", Value.MULTIPACK_INVALID);
      Serialize (Into, "OPTIONAL_CONDITION_INVALID", Value.OPTIONAL_CONDITION_INVALID);
      Serialize (Into, "OPTIONAL_CONDITION_MISSING", Value.OPTIONAL_CONDITION_MISSING);
      Serialize (Into, "OPTIONAL_PRODUCT_CATEGORY_INVALID", Value.OPTIONAL_PRODUCT_CATEGORY_INVALID);
      Serialize (Into, "OPTIONAL_PRODUCT_CATEGORY_MISSING", Value.OPTIONAL_PRODUCT_CATEGORY_MISSING);
      Serialize (Into, "PRODUCT_CATEGORY_DEPTH_WARNING", Value.PRODUCT_CATEGORY_DEPTH_WARNING);
      Serialize (Into, "PRODUCT_TYPE_LENGTH_TOO_LONG", Value.PRODUCT_TYPE_LENGTH_TOO_LONG);
      Serialize (Into, "SALES_PRICE_INVALID", Value.SALES_PRICE_INVALID);
      Serialize (Into, "SALES_PRICE_TOO_LOW", Value.SALES_PRICE_TOO_LOW);
      Serialize (Into, "SALES_PRICE_TOO_HIGH", Value.SALES_PRICE_TOO_HIGH);
      Serialize (Into, "SALE_DATE_INVALID", Value.SALE_DATE_INVALID);
      Serialize (Into, "SHIPPING_INVALID", Value.SHIPPING_INVALID);
      Serialize (Into, "SHIPPING_HEIGHT_INVALID", Value.SHIPPING_HEIGHT_INVALID);
      Serialize (Into, "SHIPPING_WEIGHT_INVALID", Value.SHIPPING_WEIGHT_INVALID);
      Serialize (Into, "SHIPPING_WIDTH_INVALID", Value.SHIPPING_WIDTH_INVALID);
      Serialize (Into, "SIZE_TYPE_INVALID", Value.SIZE_TYPE_INVALID);
      Serialize (Into, "TAX_INVALID", Value.TAX_INVALID);
      Serialize (Into, "TITLE_LENGTH_TOO_LONG", Value.TITLE_LENGTH_TOO_LONG);
      Serialize (Into, "TOO_MANY_ADDITIONAL_IMAGE_LINKS", Value.TOO_MANY_ADDITIONAL_IMAGE_LINKS);
      Serialize (Into, "UTM_SOURCE_AUTO_CORRECTED", Value.UTM_SOURCE_AUTO_CORRECTED);
      Serialize (Into, "WEIGHT_UNIT_INVALID", Value.WEIGHT_UNIT_INVALID);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsItemValidationWarnings_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsItemValidationWarnings_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "AD_LINK_FORMAT_WARNING", Value.AD_LINK_FORMAT_WARNING);
      Deserialize (Object, "AD_LINK_SAME_AS_LINK", Value.AD_LINK_SAME_AS_LINK);
      Deserialize (Object, "ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG", Value.ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG);
      Deserialize (Object, "ADDITIONAL_IMAGE_LINK_WARNING", Value.ADDITIONAL_IMAGE_LINK_WARNING);
      Deserialize (Object, "ADWORDS_FORMAT_WARNING", Value.ADWORDS_FORMAT_WARNING);
      Deserialize (Object, "ADWORDS_SAME_AS_LINK", Value.ADWORDS_SAME_AS_LINK);
      Deserialize (Object, "AGE_GROUP_INVALID", Value.AGE_GROUP_INVALID);
      Deserialize (Object, "SIZE_SYSTEM_INVALID", Value.SIZE_SYSTEM_INVALID);
      Deserialize (Object, "ANDROID_DEEP_LINK_INVALID", Value.ANDROID_DEEP_LINK_INVALID);
      Deserialize (Object, "AVAILABILITY_DATE_INVALID", Value.AVAILABILITY_DATE_INVALID);
      Deserialize (Object, "COUNTRY_DOES_NOT_MAP_TO_CURRENCY", Value.COUNTRY_DOES_NOT_MAP_TO_CURRENCY);
      Deserialize (Object, "CUSTOM_LABEL_LENGTH_TOO_LONG", Value.CUSTOM_LABEL_LENGTH_TOO_LONG);
      Deserialize (Object, "DESCRIPTION_LENGTH_TOO_LONG", Value.DESCRIPTION_LENGTH_TOO_LONG);
      Deserialize (Object, "EXPIRATION_DATE_INVALID", Value.EXPIRATION_DATE_INVALID);
      Deserialize (Object, "GENDER_INVALID", Value.GENDER_INVALID);
      Deserialize (Object, "GTIN_INVALID", Value.GTIN_INVALID);
      Deserialize (Object, "IMAGE_LINK_WARNING", Value.IMAGE_LINK_WARNING);
      Deserialize (Object, "IOS_DEEP_LINK_INVALID", Value.IOS_DEEP_LINK_INVALID);
      Deserialize (Object, "IS_BUNDLE_INVALID", Value.IS_BUNDLE_INVALID);
      Deserialize (Object, "ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE", Value.ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE);
      Deserialize (Object, "LINK_FORMAT_WARNING", Value.LINK_FORMAT_WARNING);
      Deserialize (Object, "MIN_AD_PRICE_INVALID", Value.MIN_AD_PRICE_INVALID);
      Deserialize (Object, "MPN_INVALID", Value.MPN_INVALID);
      Deserialize (Object, "MULTIPACK_INVALID", Value.MULTIPACK_INVALID);
      Deserialize (Object, "OPTIONAL_CONDITION_INVALID", Value.OPTIONAL_CONDITION_INVALID);
      Deserialize (Object, "OPTIONAL_CONDITION_MISSING", Value.OPTIONAL_CONDITION_MISSING);
      Deserialize (Object, "OPTIONAL_PRODUCT_CATEGORY_INVALID", Value.OPTIONAL_PRODUCT_CATEGORY_INVALID);
      Deserialize (Object, "OPTIONAL_PRODUCT_CATEGORY_MISSING", Value.OPTIONAL_PRODUCT_CATEGORY_MISSING);
      Deserialize (Object, "PRODUCT_CATEGORY_DEPTH_WARNING", Value.PRODUCT_CATEGORY_DEPTH_WARNING);
      Deserialize (Object, "PRODUCT_TYPE_LENGTH_TOO_LONG", Value.PRODUCT_TYPE_LENGTH_TOO_LONG);
      Deserialize (Object, "SALES_PRICE_INVALID", Value.SALES_PRICE_INVALID);
      Deserialize (Object, "SALES_PRICE_TOO_LOW", Value.SALES_PRICE_TOO_LOW);
      Deserialize (Object, "SALES_PRICE_TOO_HIGH", Value.SALES_PRICE_TOO_HIGH);
      Deserialize (Object, "SALE_DATE_INVALID", Value.SALE_DATE_INVALID);
      Deserialize (Object, "SHIPPING_INVALID", Value.SHIPPING_INVALID);
      Deserialize (Object, "SHIPPING_HEIGHT_INVALID", Value.SHIPPING_HEIGHT_INVALID);
      Deserialize (Object, "SHIPPING_WEIGHT_INVALID", Value.SHIPPING_WEIGHT_INVALID);
      Deserialize (Object, "SHIPPING_WIDTH_INVALID", Value.SHIPPING_WIDTH_INVALID);
      Deserialize (Object, "SIZE_TYPE_INVALID", Value.SIZE_TYPE_INVALID);
      Deserialize (Object, "TAX_INVALID", Value.TAX_INVALID);
      Deserialize (Object, "TITLE_LENGTH_TOO_LONG", Value.TITLE_LENGTH_TOO_LONG);
      Deserialize (Object, "TOO_MANY_ADDITIONAL_IMAGE_LINKS", Value.TOO_MANY_ADDITIONAL_IMAGE_LINKS);
      Deserialize (Object, "UTM_SOURCE_AUTO_CORRECTED", Value.UTM_SOURCE_AUTO_CORRECTED);
      Deserialize (Object, "WEIGHT_UNIT_INVALID", Value.WEIGHT_UNIT_INVALID);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsItemValidationWarnings_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsItemValidationWarnings_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsItemsFilters_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      Serialize (Into, "item_ids", Value.Item_Ids);
      if not Value.Catalog_Id.Is_Null then
         Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      end if;
      Serialize (Into, "hotel_ids", Value.Hotel_Ids);
      Serialize (Into, "creative_assets_ids", Value.Creative_Assets_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsItemsFilters_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsItemsFilters_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "item_ids", Value.Item_Ids);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
      Swagger.Streams.Deserialize (Object, "hotel_ids", Value.Hotel_Ids);
      Swagger.Streams.Deserialize (Object, "creative_assets_ids", Value.Creative_Assets_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsItemsFilters_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsItemsFilters_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsItemsPostFilters_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      Serialize (Into, "item_ids", Value.Item_Ids);
      if not Value.Catalog_Id.Is_Null then
         Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      end if;
      Serialize (Into, "hotel_ids", Value.Hotel_Ids);
      Serialize (Into, "creative_assets_ids", Value.Creative_Assets_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsItemsPostFilters_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsItemsPostFilters_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "item_ids", Value.Item_Ids);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
      Swagger.Streams.Deserialize (Object, "hotel_ids", Value.Hotel_Ids);
      Swagger.Streams.Deserialize (Object, "creative_assets_ids", Value.Creative_Assets_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsItemsPostFilters_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsItemsPostFilters_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ItemResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      if not Value.Item_Id.Is_Null then
         Into.Write_Entity ("item_id", Value.Item_Id);
      end if;
      Serialize (Into, "pins", Value.Pins);
      Serialize (Into, "attributes", Value.Attributes);
      if not Value.Hotel_Id.Is_Null then
         Into.Write_Entity ("hotel_id", Value.Hotel_Id);
      end if;
      if not Value.Creative_Assets_Id.Is_Null then
         Into.Write_Entity ("creative_assets_id", Value.Creative_Assets_Id);
      end if;
      Serialize (Into, "errors", Value.Errors);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ItemResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ItemResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "item_id", Value.Item_Id);
      Deserialize (Object, "pins", Value.Pins);
      Deserialize (Object, "attributes", Value.Attributes);
      Swagger.Streams.Deserialize (Object, "hotel_id", Value.Hotel_Id);
      Swagger.Streams.Deserialize (Object, "creative_assets_id", Value.Creative_Assets_Id);
      Deserialize (Object, "errors", Value.Errors);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ItemResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ItemResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsItems_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsItems_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsItems_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsItems_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsItems_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsProductGroupFilters_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "any_of", Value.Any_Of);
      Serialize (Into, "all_of", Value.All_Of);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsProductGroupFilters_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsProductGroupFilters_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "any_of", Value.Any_Of);
      Deserialize (Object, "all_of", Value.All_Of);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsProductGroupFilters_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsProductGroupFilters_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsListProductsByFeedBasedFilter_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("feed_id", Value.Feed_Id);
      Serialize (Into, "filters", Value.Filters);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsListProductsByFeedBasedFilter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsListProductsByFeedBasedFilter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "feed_id", Value.Feed_Id);
      Deserialize (Object, "filters", Value.Filters);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsListProductsByFeedBasedFilter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsListProductsByFeedBasedFilter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsProductGroupFiltersRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "any_of", Value.Any_Of);
      Serialize (Into, "all_of", Value.All_Of);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsProductGroupFiltersRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsProductGroupFiltersRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "any_of", Value.Any_Of);
      Deserialize (Object, "all_of", Value.All_Of);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsProductGroupFiltersRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsProductGroupFiltersRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsProductGroupCreateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("description", Value.Description);
      if not Value.Is_Featured.Is_Null then
         Into.Write_Entity ("is_featured", Value.Is_Featured);
      end if;
      Serialize (Into, "filters", Value.Filters);
      Into.Write_Entity ("feed_id", Value.Feed_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsProductGroupCreateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsProductGroupCreateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "is_featured", Value.Is_Featured);
      Deserialize (Object, "filters", Value.Filters);
      Swagger.Streams.Deserialize (Object, "feed_id", Value.Feed_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsProductGroupCreateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsProductGroupCreateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsProductGroupCurrencyCriteria_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "values", Value.Values);
      if not Value.Negated.Is_Null then
         Into.Write_Entity ("negated", Value.Negated);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsProductGroupCurrencyCriteria_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsProductGroupCurrencyCriteria_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "values", Value.Values);
      Swagger.Streams.Deserialize (Object, "negated", Value.Negated);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsProductGroupCurrencyCriteria_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsProductGroupCurrencyCriteria_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsProductGroupFiltersAllOf_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "all_of", Value.All_Of);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsProductGroupFiltersAllOf_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsProductGroupFiltersAllOf_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "all_of", Value.All_Of);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsProductGroupFiltersAllOf_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsProductGroupFiltersAllOf_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsProductGroupFiltersAnyOf_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "any_of", Value.Any_Of);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsProductGroupFiltersAnyOf_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsProductGroupFiltersAnyOf_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "any_of", Value.Any_Of);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsProductGroupFiltersAnyOf_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsProductGroupFiltersAnyOf_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsProductGroupFiltersRequestAnyOf1_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "all_of", Value.All_Of);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsProductGroupFiltersRequestAnyOf1_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsProductGroupFiltersRequestAnyOf1_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "all_of", Value.All_Of);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsProductGroupFiltersRequestAnyOf1_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsProductGroupFiltersRequestAnyOf1_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsProductGroupFiltersRequestAnyOf_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "any_of", Value.Any_Of);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsProductGroupFiltersRequestAnyOf_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsProductGroupFiltersRequestAnyOf_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "any_of", Value.Any_Of);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsProductGroupFiltersRequestAnyOf_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsProductGroupFiltersRequestAnyOf_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsProductGroupMultipleCountriesCriteria_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "values", Value.Values);
      if not Value.Negated.Is_Null then
         Into.Write_Entity ("negated", Value.Negated);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsProductGroupMultipleCountriesCriteria_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsProductGroupMultipleCountriesCriteria_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "values", Value.Values);
      Swagger.Streams.Deserialize (Object, "negated", Value.Negated);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsProductGroupMultipleCountriesCriteria_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsProductGroupMultipleCountriesCriteria_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsProductGroupMultipleGenderCriteria_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "values", Value.Values);
      if not Value.Negated.Is_Null then
         Into.Write_Entity ("negated", Value.Negated);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsProductGroupMultipleGenderCriteria_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsProductGroupMultipleGenderCriteria_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "values", Value.Values);
      Swagger.Streams.Deserialize (Object, "negated", Value.Negated);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsProductGroupMultipleGenderCriteria_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsProductGroupMultipleGenderCriteria_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsProductGroupMultipleMediaTypesCriteria_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "values", Value.Values);
      if not Value.Negated.Is_Null then
         Into.Write_Entity ("negated", Value.Negated);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsProductGroupMultipleMediaTypesCriteria_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsProductGroupMultipleMediaTypesCriteria_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "values", Value.Values);
      Swagger.Streams.Deserialize (Object, "negated", Value.Negated);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsProductGroupMultipleMediaTypesCriteria_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsProductGroupMultipleMediaTypesCriteria_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsProduct_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      Serialize (Into, "metadata", Value.Metadata);
      Serialize (Into, "pin", Value.Pin);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsProduct_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsProduct_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Deserialize (Object, "metadata", Value.Metadata);
      Deserialize (Object, "pin", Value.Pin);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsProduct_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsProduct_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsProductGroupPinsList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsProductGroupPinsList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsProductGroupPinsList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsProductGroupPinsList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsProductGroupPinsList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsProductGroupProductCountsVertical_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      Serialize (Into, "in_stock", Value.In_Stock);
      Serialize (Into, "out_of_stock", Value.Out_Of_Stock);
      Serialize (Into, "preorder", Value.Preorder);
      Serialize (Into, "total", Value.Total);
      Serialize (Into, "videos", Value.Videos);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsProductGroupProductCountsVertical_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsProductGroupProductCountsVertical_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "in_stock", Value.In_Stock);
      Swagger.Streams.Deserialize (Object, "out_of_stock", Value.Out_Of_Stock);
      Swagger.Streams.Deserialize (Object, "preorder", Value.Preorder);
      Swagger.Streams.Deserialize (Object, "total", Value.Total);
      Swagger.Streams.Deserialize (Object, "videos", Value.Videos);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsProductGroupProductCountsVertical_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsProductGroupProductCountsVertical_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsProductGroupUpdateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Into.Write_Entity ("description", Value.Description);
      if not Value.Is_Featured.Is_Null then
         Into.Write_Entity ("is_featured", Value.Is_Featured);
      end if;
      Serialize (Into, "filters", Value.Filters);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsProductGroupUpdateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsProductGroupUpdateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "is_featured", Value.Is_Featured);
      Deserialize (Object, "filters", Value.Filters);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsProductGroupUpdateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsProductGroupUpdateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsVerticalProductGroup_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Into.Write_Entity ("id", Value.Id);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Into.Write_Entity ("description", Value.Description);
      Serialize (Into, "filters", Value.Filters);
      if not Value.Is_Featured.Is_Null then
         Into.Write_Entity ("is_featured", Value.Is_Featured);
      end if;
      Serialize (Into, "type", Value.P_Type);
      Serialize (Into, "status", Value.Status);
      if not Value.Created_At.Is_Null then
         Into.Write_Entity ("created_at", Value.Created_At);
      end if;
      if not Value.Updated_At.Is_Null then
         Into.Write_Entity ("updated_at", Value.Updated_At);
      end if;
      Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      Into.Write_Entity ("feed_id", Value.Feed_Id);
      Into.Write_Entity ("country", Value.Country);
      Into.Write_Entity ("locale", Value.Locale);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsVerticalProductGroup_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsVerticalProductGroup_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Deserialize (Object, "filters", Value.Filters);
      Swagger.Streams.Deserialize (Object, "is_featured", Value.Is_Featured);
      Deserialize (Object, "type", Value.P_Type);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "created_at", Value.Created_At);
      Swagger.Streams.Deserialize (Object, "updated_at", Value.Updated_At);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
      Swagger.Streams.Deserialize (Object, "feed_id", Value.Feed_Id);
      Swagger.Streams.Deserialize (Object, "country", Value.Country);
      Swagger.Streams.Deserialize (Object, "locale", Value.Locale);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsVerticalProductGroup_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsVerticalProductGroup_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsProductGroupsList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsProductGroupsList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsProductGroupsList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsProductGroupsList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsProductGroupsList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsRetailReportParameters_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Serialize (Into, "report", Value.Report);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsRetailReportParameters_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsRetailReportParameters_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Deserialize (Object, "report", Value.Report);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsRetailReportParameters_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsRetailReportParameters_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsUpdateCreativeAssetsItem_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("creative_assets_id", Value.Creative_Assets_Id);
      Into.Write_Entity ("operation", Value.Operation);
      Serialize (Into, "attributes", Value.Attributes);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsUpdateCreativeAssetsItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsUpdateCreativeAssetsItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "creative_assets_id", Value.Creative_Assets_Id);
      Swagger.Streams.Deserialize (Object, "operation", Value.Operation);
      Deserialize (Object, "attributes", Value.Attributes);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsUpdateCreativeAssetsItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsUpdateCreativeAssetsItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsUpdateHotelItem_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("hotel_id", Value.Hotel_Id);
      Into.Write_Entity ("operation", Value.Operation);
      Serialize (Into, "attributes", Value.Attributes);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsUpdateHotelItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsUpdateHotelItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "hotel_id", Value.Hotel_Id);
      Swagger.Streams.Deserialize (Object, "operation", Value.Operation);
      Deserialize (Object, "attributes", Value.Attributes);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsUpdateHotelItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsUpdateHotelItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsUpsertCreativeAssetsItem_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("creative_assets_id", Value.Creative_Assets_Id);
      Into.Write_Entity ("operation", Value.Operation);
      Serialize (Into, "attributes", Value.Attributes);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsUpsertCreativeAssetsItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsUpsertCreativeAssetsItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "creative_assets_id", Value.Creative_Assets_Id);
      Swagger.Streams.Deserialize (Object, "operation", Value.Operation);
      Deserialize (Object, "attributes", Value.Attributes);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsUpsertCreativeAssetsItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsUpsertCreativeAssetsItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsUpsertHotelItem_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("hotel_id", Value.Hotel_Id);
      Into.Write_Entity ("operation", Value.Operation);
      Serialize (Into, "attributes", Value.Attributes);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsUpsertHotelItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsUpsertHotelItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "hotel_id", Value.Hotel_Id);
      Swagger.Streams.Deserialize (Object, "operation", Value.Operation);
      Deserialize (Object, "attributes", Value.Attributes);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsUpsertHotelItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsUpsertHotelItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsUpsertRetailItem_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("item_id", Value.Item_Id);
      Into.Write_Entity ("operation", Value.Operation);
      Serialize (Into, "attributes", Value.Attributes);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsUpsertRetailItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsUpsertRetailItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "item_id", Value.Item_Id);
      Swagger.Streams.Deserialize (Object, "operation", Value.Operation);
      Deserialize (Object, "attributes", Value.Attributes);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsUpsertRetailItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsUpsertRetailItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ConversionApiResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("num_events_received", Value.Num_Events_Received);
      Into.Write_Entity ("num_events_processed", Value.Num_Events_Processed);
      Serialize (Into, "events", Value.Events);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ConversionApiResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ConversionApiResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "num_events_received", Value.Num_Events_Received);
      Swagger.Streams.Deserialize (Object, "num_events_processed", Value.Num_Events_Processed);
      Deserialize (Object, "events", Value.Events);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ConversionApiResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ConversionApiResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ConversionEventsDataInnerCustomData_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("currency", Value.Currency);
      Into.Write_Entity ("value", Value.Value);
      Serialize (Into, "content_ids", Value.Content_Ids);
      Into.Write_Entity ("content_name", Value.Content_Name);
      Into.Write_Entity ("content_category", Value.Content_Category);
      Into.Write_Entity ("content_brand", Value.Content_Brand);
      Serialize (Into, "contents", Value.Contents);
      if not Value.Num_Items.Is_Null then
         Into.Write_Entity ("num_items", Value.Num_Items);
      end if;
      Into.Write_Entity ("order_id", Value.Order_Id);
      Into.Write_Entity ("search_string", Value.Search_String);
      Into.Write_Entity ("opt_out_type", Value.Opt_Out_Type);
      Into.Write_Entity ("np", Value.Np);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ConversionEventsDataInnerCustomData_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ConversionEventsDataInnerCustomData_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "currency", Value.Currency);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Swagger.Streams.Deserialize (Object, "content_ids", Value.Content_Ids);
      Swagger.Streams.Deserialize (Object, "content_name", Value.Content_Name);
      Swagger.Streams.Deserialize (Object, "content_category", Value.Content_Category);
      Swagger.Streams.Deserialize (Object, "content_brand", Value.Content_Brand);
      Deserialize (Object, "contents", Value.Contents);
      Swagger.Streams.Deserialize (Object, "num_items", Value.Num_Items);
      Swagger.Streams.Deserialize (Object, "order_id", Value.Order_Id);
      Swagger.Streams.Deserialize (Object, "search_string", Value.Search_String);
      Swagger.Streams.Deserialize (Object, "opt_out_type", Value.Opt_Out_Type);
      Swagger.Streams.Deserialize (Object, "np", Value.Np);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ConversionEventsDataInnerCustomData_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ConversionEventsDataInnerCustomData_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ConversionEventsDataInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("event_name", Value.Event_Name);
      Into.Write_Entity ("action_source", Value.Action_Source);
      Into.Write_Long_Entity ("event_time", Value.Event_Time);
      Into.Write_Entity ("event_id", Value.Event_Id);
      Into.Write_Entity ("event_source_url", Value.Event_Source_Url);
      if not Value.Opt_Out.Is_Null then
         Into.Write_Entity ("opt_out", Value.Opt_Out);
      end if;
      Into.Write_Entity ("partner_name", Value.Partner_Name);
      Serialize (Into, "user_data", Value.User_Data);
      Serialize (Into, "custom_data", Value.Custom_Data);
      Into.Write_Entity ("app_id", Value.App_Id);
      Into.Write_Entity ("app_name", Value.App_Name);
      Into.Write_Entity ("app_version", Value.App_Version);
      Into.Write_Entity ("device_brand", Value.Device_Brand);
      Into.Write_Entity ("device_carrier", Value.Device_Carrier);
      Into.Write_Entity ("device_model", Value.Device_Model);
      Into.Write_Entity ("device_type", Value.Device_Type);
      Into.Write_Entity ("os_version", Value.Os_Version);
      if not Value.Wifi.Is_Null then
         Into.Write_Entity ("wifi", Value.Wifi);
      end if;
      Into.Write_Entity ("language", Value.Language);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ConversionEventsDataInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ConversionEventsDataInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "event_name", Value.Event_Name);
      Swagger.Streams.Deserialize (Object, "action_source", Value.Action_Source);
      Swagger.Streams.Deserialize (Object, "event_time", Value.Event_Time);
      Swagger.Streams.Deserialize (Object, "event_id", Value.Event_Id);
      Swagger.Streams.Deserialize (Object, "event_source_url", Value.Event_Source_Url);
      Swagger.Streams.Deserialize (Object, "opt_out", Value.Opt_Out);
      Swagger.Streams.Deserialize (Object, "partner_name", Value.Partner_Name);
      Deserialize (Object, "user_data", Value.User_Data);
      Deserialize (Object, "custom_data", Value.Custom_Data);
      Swagger.Streams.Deserialize (Object, "app_id", Value.App_Id);
      Swagger.Streams.Deserialize (Object, "app_name", Value.App_Name);
      Swagger.Streams.Deserialize (Object, "app_version", Value.App_Version);
      Swagger.Streams.Deserialize (Object, "device_brand", Value.Device_Brand);
      Swagger.Streams.Deserialize (Object, "device_carrier", Value.Device_Carrier);
      Swagger.Streams.Deserialize (Object, "device_model", Value.Device_Model);
      Swagger.Streams.Deserialize (Object, "device_type", Value.Device_Type);
      Swagger.Streams.Deserialize (Object, "os_version", Value.Os_Version);
      Swagger.Streams.Deserialize (Object, "wifi", Value.Wifi);
      Swagger.Streams.Deserialize (Object, "language", Value.Language);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ConversionEventsDataInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ConversionEventsDataInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ConversionEvents_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "data", Value.Data);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ConversionEvents_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ConversionEvents_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "data", Value.Data);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ConversionEvents_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ConversionEvents_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ConversionTagResponse_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Ad_Account_Id.Is_Null then
         Into.Write_Entity ("ad_account_id", Value.Ad_Account_Id);
      end if;
      if not Value.Code_Snippet.Is_Null then
         Into.Write_Entity ("code_snippet", Value.Code_Snippet);
      end if;
      Serialize (Into, "enhanced_match_status", Value.Enhanced_Match_Status);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Serialize (Into, "last_fired_time_ms", Value.Last_Fired_Time_Ms);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "status", Value.Status);
      if not Value.Version.Is_Null then
         Into.Write_Entity ("version", Value.Version);
      end if;
      Serialize (Into, "configs", Value.Configs);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ConversionTagResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ConversionTagResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "ad_account_id", Value.Ad_Account_Id);
      Swagger.Streams.Deserialize (Object, "code_snippet", Value.Code_Snippet);
      Deserialize (Object, "enhanced_match_status", Value.Enhanced_Match_Status);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "last_fired_time_ms", Value.Last_Fired_Time_Ms);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "version", Value.Version);
      Deserialize (Object, "configs", Value.Configs);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ConversionTagResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ConversionTagResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ConversionTagListResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ConversionTagListResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ConversionTagListResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ConversionTagListResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ConversionTagListResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CreateAssetAccessRequestBody_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "asset_requests", Value.Asset_Requests);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CreateAssetAccessRequestBody_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CreateAssetAccessRequestBody_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "asset_requests", Value.Asset_Requests);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CreateAssetAccessRequestBody_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CreateAssetAccessRequestBody_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CreateAssetAccessRequestResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "exceptions", Value.Exceptions);
      Serialize (Into, "invites", Value.Invites);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CreateAssetAccessRequestResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CreateAssetAccessRequestResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "exceptions", Value.Exceptions);
      Swagger.Streams.Deserialize (Object, "invites", Value.Invites);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CreateAssetAccessRequestResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CreateAssetAccessRequestResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CreateAssetGroupBody_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("asset_group_name", Value.Asset_Group_Name);
      Into.Write_Entity ("asset_group_description", Value.Asset_Group_Description);
      Serialize (Into, "asset_group_types", Value.Asset_Group_Types);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CreateAssetGroupBody_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CreateAssetGroupBody_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "asset_group_name", Value.Asset_Group_Name);
      Swagger.Streams.Deserialize (Object, "asset_group_description", Value.Asset_Group_Description);
      Deserialize (Object, "asset_group_types", Value.Asset_Group_Types);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CreateAssetGroupBody_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CreateAssetGroupBody_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CreateAssetGroupResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "asset_group", Value.Asset_Group);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CreateAssetGroupResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CreateAssetGroupResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "asset_group", Value.Asset_Group);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CreateAssetGroupResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CreateAssetGroupResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CreateAssetInvitesRequestItem_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("invite_id", Value.Invite_Id);
      Serialize (Into, "invite_type", Value.Invite_Type);
      Serialize (Into, "asset_id_to_permissions", Value.Asset_Id_To_Permissions);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CreateAssetInvitesRequestItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CreateAssetInvitesRequestItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "invite_id", Value.Invite_Id);
      Deserialize (Object, "invite_type", Value.Invite_Type);
      Swagger.Streams.Deserialize (Object, "asset_id_to_permissions", Value.Asset_Id_To_Permissions);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CreateAssetInvitesRequestItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CreateAssetInvitesRequestItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CreateAssetInvitesRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "invites", Value.Invites);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CreateAssetInvitesRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CreateAssetInvitesRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "invites", Value.Invites);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CreateAssetInvitesRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CreateAssetInvitesRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CreateInvitesResultsResponseArrayItemsInnerInvite_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Serialize (Into, "user", Value.User);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CreateInvitesResultsResponseArrayItemsInnerInvite_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CreateInvitesResultsResponseArrayItemsInnerInvite_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Deserialize (Object, "user", Value.User);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CreateInvitesResultsResponseArrayItemsInnerInvite_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CreateInvitesResultsResponseArrayItemsInnerInvite_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CreateInvitesResultsResponseArrayItemsInner_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "exception", Value.P_Exception);
      Serialize (Into, "invite", Value.Invite);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CreateInvitesResultsResponseArrayItemsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CreateInvitesResultsResponseArrayItemsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "exception", Value.P_Exception);
      Deserialize (Object, "invite", Value.Invite);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CreateInvitesResultsResponseArrayItemsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CreateInvitesResultsResponseArrayItemsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CreateInvitesResultsResponseArray_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CreateInvitesResultsResponseArray_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CreateInvitesResultsResponseArray_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CreateInvitesResultsResponseArray_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CreateInvitesResultsResponseArray_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CreateMMMReportResponseData_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "report_status", Value.Report_Status);
      if not Value.Token.Is_Null then
         Into.Write_Entity ("token", Value.Token);
      end if;
      Into.Write_Entity ("message", Value.Message);
      if not Value.Status.Is_Null then
         Into.Write_Entity ("status", Value.Status);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CreateMMMReportResponseData_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CreateMMMReportResponseData_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "report_status", Value.Report_Status);
      Swagger.Streams.Deserialize (Object, "token", Value.Token);
      Swagger.Streams.Deserialize (Object, "message", Value.Message);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CreateMMMReportResponseData_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CreateMMMReportResponseData_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CreateMMMReportResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "code", Value.Code);
      Serialize (Into, "data", Value.Data);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CreateMMMReportResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CreateMMMReportResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Deserialize (Object, "data", Value.Data);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CreateMMMReportResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CreateMMMReportResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CreateMembershipOrPartnershipInvitesBody_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("business_role", Value.Business_Role);
      Serialize (Into, "invite_type", Value.Invite_Type);
      Serialize (Into, "members", Value.Members);
      Serialize (Into, "partners", Value.Partners);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CreateMembershipOrPartnershipInvitesBody_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CreateMembershipOrPartnershipInvitesBody_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "business_role", Value.Business_Role);
      Deserialize (Object, "invite_type", Value.Invite_Type);
      Swagger.Streams.Deserialize (Object, "members", Value.Members);
      Swagger.Streams.Deserialize (Object, "partners", Value.Partners);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CreateMembershipOrPartnershipInvitesBody_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CreateMembershipOrPartnershipInvitesBody_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomerListRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("records", Value.Records);
      Serialize (Into, "list_type", Value.List_Type);
      if not Swagger.Is_Null (Value.Exceptions) then
         Into.Write_Entity ("exceptions", Value.Exceptions);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomerListRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomerListRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "records", Value.Records);
      Deserialize (Object, "list_type", Value.List_Type);
      Swagger.Streams.Deserialize (Object, "exceptions", Value.Exceptions);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomerListRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomerListRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomerListUpdateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("records", Value.Records);
      Serialize (Into, "operation_type", Value.Operation_Type);
      Into.Write_Entity ("exceptions", Value.Exceptions);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomerListUpdateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomerListUpdateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "records", Value.Records);
      Deserialize (Object, "operation_type", Value.Operation_Type);
      Swagger.Streams.Deserialize (Object, "exceptions", Value.Exceptions);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomerListUpdateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomerListUpdateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CustomerListsList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomerListsList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CustomerListsList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CustomerListsList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CustomerListsList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeleteAssetGroupResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "deleted_asset_groups", Value.Deleted_Asset_Groups);
      Serialize (Into, "exceptions", Value.Exceptions);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeleteAssetGroupResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeleteAssetGroupResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "deleted_asset_groups", Value.Deleted_Asset_Groups);
      Deserialize (Object, "exceptions", Value.Exceptions);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeleteAssetGroupResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeleteAssetGroupResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeleteInvitesResultsResponseArrayItemsInner_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "exception", Value.P_Exception);
      Serialize (Into, "invite", Value.Invite);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeleteInvitesResultsResponseArrayItemsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeleteInvitesResultsResponseArrayItemsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "exception", Value.P_Exception);
      Deserialize (Object, "invite", Value.Invite);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeleteInvitesResultsResponseArrayItemsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeleteInvitesResultsResponseArrayItemsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeleteInvitesResultsResponseArray_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeleteInvitesResultsResponseArray_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeleteInvitesResultsResponseArray_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeleteInvitesResultsResponseArray_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeleteInvitesResultsResponseArray_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeleteMemberAccessResultsResponseArray_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeleteMemberAccessResultsResponseArray_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeleteMemberAccessResultsResponseArray_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeleteMemberAccessResultsResponseArray_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeleteMemberAccessResultsResponseArray_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeletePartnerAssetAccessBody_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "accesses", Value.Accesses);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeletePartnerAssetAccessBody_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeletePartnerAssetAccessBody_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "accesses", Value.Accesses);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeletePartnerAssetAccessBody_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeletePartnerAssetAccessBody_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeletePartnerAssetsResultsResponseArray_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeletePartnerAssetsResultsResponseArray_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeletePartnerAssetsResultsResponseArray_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeletePartnerAssetsResultsResponseArray_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeletePartnerAssetsResultsResponseArray_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeliveryMetricsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeliveryMetricsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeliveryMetricsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeliveryMetricsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeliveryMetricsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsFeedProcessingResult_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("created_at", Value.Created_At);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("updated_at", Value.Updated_At);
      Serialize (Into, "ingestion_details", Value.Ingestion_Details);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "product_counts", Value.Product_Counts);
      Serialize (Into, "validation_details", Value.Validation_Details);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsFeedProcessingResult_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsFeedProcessingResult_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "created_at", Value.Created_At);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "updated_at", Value.Updated_At);
      Deserialize (Object, "ingestion_details", Value.Ingestion_Details);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "product_counts", Value.Product_Counts);
      Deserialize (Object, "validation_details", Value.Validation_Details);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsFeedProcessingResult_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsFeedProcessingResult_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedProcessingResultsList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedProcessingResultsList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedProcessingResultsList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedProcessingResultsList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedProcessingResultsList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsFeed_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("created_at", Value.Created_At);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("updated_at", Value.Updated_At);
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "format", Value.Format);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      Serialize (Into, "credentials", Value.Credentials);
      Into.Write_Entity ("location", Value.Location);
      Serialize (Into, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "default_currency", Value.Default_Currency);
      Into.Write_Entity ("default_locale", Value.Default_Locale);
      Serialize (Into, "default_country", Value.Default_Country);
      Serialize (Into, "default_availability", Value.Default_Availability);
      Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsFeed_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsFeed_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "created_at", Value.Created_At);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "updated_at", Value.Updated_At);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "format", Value.Format);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Deserialize (Object, "credentials", Value.Credentials);
      Swagger.Streams.Deserialize (Object, "location", Value.Location);
      Deserialize (Object, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "default_currency", Value.Default_Currency);
      Swagger.Streams.Deserialize (Object, "default_locale", Value.Default_Locale);
      Deserialize (Object, "default_country", Value.Default_Country);
      Deserialize (Object, "default_availability", Value.Default_Availability);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsFeed_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsFeed_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedsList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedsList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedsList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedsList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedsList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FollowersList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FollowersList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FollowersList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FollowersList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FollowersList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UserBusinessRoleBinding_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "assets_summary", Value.Assets_Summary);
      Serialize (Into, "business_roles", Value.Business_Roles);
      Serialize (Into, "created_by_business", Value.Created_By_Business);
      Serialize (Into, "created_by_user", Value.Created_By_User);
      Into.Write_Entity ("created_time", Value.Created_Time);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Is_Shared_Partner.Is_Null then
         Into.Write_Entity ("is_shared_partner", Value.Is_Shared_Partner);
      end if;
      Serialize (Into, "user", Value.User);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserBusinessRoleBinding_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UserBusinessRoleBinding_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "assets_summary", Value.Assets_Summary);
      Swagger.Streams.Deserialize (Object, "business_roles", Value.Business_Roles);
      Deserialize (Object, "created_by_business", Value.Created_By_Business);
      Deserialize (Object, "created_by_user", Value.Created_By_User);
      Swagger.Streams.Deserialize (Object, "created_time", Value.Created_Time);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "is_shared_partner", Value.Is_Shared_Partner);
      Deserialize (Object, "user", Value.User);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UserBusinessRoleBinding_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UserBusinessRoleBinding_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetBusinessEmployers200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetBusinessEmployers200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetBusinessEmployers200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetBusinessEmployers200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetBusinessEmployers200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetBusinessMembers200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetBusinessMembers200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetBusinessMembers200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetBusinessMembers200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetBusinessMembers200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetBusinessPartners200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetBusinessPartners200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetBusinessPartners200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetBusinessPartners200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetBusinessPartners200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.InviteResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "assets_summary", Value.Assets_Summary);
      Serialize (Into, "business_roles", Value.Business_Roles);
      Serialize (Into, "created_by_business", Value.Created_By_Business);
      Serialize (Into, "created_by_user", Value.Created_By_User);
      if not Value.Created_Time.Is_Null then
         Into.Write_Entity ("created_time", Value.Created_Time);
      end if;
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Serialize (Into, "invite_data", Value.Invite_Data);
      if not Value.Is_Received_Invite.Is_Null then
         Into.Write_Entity ("is_received_invite", Value.Is_Received_Invite);
      end if;
      Serialize (Into, "user", Value.User);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InviteResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.InviteResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "assets_summary", Value.Assets_Summary);
      Swagger.Streams.Deserialize (Object, "business_roles", Value.Business_Roles);
      Deserialize (Object, "created_by_business", Value.Created_By_Business);
      Deserialize (Object, "created_by_user", Value.Created_By_User);
      Swagger.Streams.Deserialize (Object, "created_time", Value.Created_Time);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Deserialize (Object, "invite_data", Value.Invite_Data);
      Swagger.Streams.Deserialize (Object, "is_received_invite", Value.Is_Received_Invite);
      Deserialize (Object, "user", Value.User);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out InviteResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.InviteResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetInvites200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetInvites200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetInvites200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetInvites200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetInvites200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetMMMReportResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "code", Value.Code);
      Serialize (Into, "data", Value.Data);
      if not Value.Message.Is_Null then
         Into.Write_Entity ("message", Value.Message);
      end if;
      if not Value.Status.Is_Null then
         Into.Write_Entity ("status", Value.Status);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetMMMReportResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetMMMReportResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Deserialize (Object, "data", Value.Data);
      Swagger.Streams.Deserialize (Object, "message", Value.Message);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetMMMReportResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetMMMReportResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetPartnerAssetsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Asset_Id.Is_Null then
         Into.Write_Entity ("asset_id", Value.Asset_Id);
      end if;
      if not Value.Asset_Type.Is_Null then
         Into.Write_Entity ("asset_type", Value.Asset_Type);
      end if;
      Serialize (Into, "permissions", Value.Permissions);
      Serialize (Into, "asset_group_info", Value.Asset_Group_Info);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetPartnerAssetsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetPartnerAssetsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "asset_id", Value.Asset_Id);
      Swagger.Streams.Deserialize (Object, "asset_type", Value.Asset_Type);
      Swagger.Streams.Deserialize (Object, "permissions", Value.Permissions);
      Deserialize (Object, "asset_group_info", Value.Asset_Group_Info);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetPartnerAssetsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetPartnerAssetsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BusinessPartnerAssetAccessGet200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BusinessPartnerAssetAccessGet200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BusinessPartnerAssetAccessGet200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BusinessPartnerAssetAccessGet200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BusinessPartnerAssetAccessGet200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ImageMetadata_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Item_Type.Is_Null then
         Into.Write_Entity ("item_type", Value.Item_Type);
      end if;
      Into.Write_Entity ("title", Value.Title);
      Into.Write_Entity ("description", Value.Description);
      Into.Write_Entity ("link", Value.Link);
      Serialize (Into, "images", Value.Images);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ImageMetadata_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ImageMetadata_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "item_type", Value.Item_Type);
      Swagger.Streams.Deserialize (Object, "title", Value.Title);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "link", Value.Link);
      Deserialize (Object, "images", Value.Images);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ImageMetadata_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ImageMetadata_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.IntegrationLogsInvalidLogResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "rejected_logs", Value.Rejected_Logs);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in IntegrationLogsInvalidLogResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.IntegrationLogsInvalidLogResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "rejected_logs", Value.Rejected_Logs);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out IntegrationLogsInvalidLogResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.IntegrationLogsInvalidLogResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.IntegrationLog_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("client_timestamp", Value.Client_Timestamp);
      Into.Write_Entity ("event_type", Value.Event_Type);
      Into.Write_Entity ("log_level", Value.Log_Level);
      Into.Write_Entity ("external_business_id", Value.External_Business_Id);
      Into.Write_Entity ("advertiser_id", Value.Advertiser_Id);
      Into.Write_Entity ("merchant_id", Value.Merchant_Id);
      Into.Write_Entity ("tag_id", Value.Tag_Id);
      Into.Write_Entity ("feed_profile_id", Value.Feed_Profile_Id);
      if not Value.Message.Is_Null then
         Into.Write_Entity ("message", Value.Message);
      end if;
      if not Value.App_Version_Number.Is_Null then
         Into.Write_Entity ("app_version_number", Value.App_Version_Number);
      end if;
      if not Value.Platform_Version_Number.Is_Null then
         Into.Write_Entity ("platform_version_number", Value.Platform_Version_Number);
      end if;
      Serialize (Into, "error", Value.Error);
      Serialize (Into, "request", Value.Request);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in IntegrationLog_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.IntegrationLog_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "client_timestamp", Value.Client_Timestamp);
      Swagger.Streams.Deserialize (Object, "event_type", Value.Event_Type);
      Swagger.Streams.Deserialize (Object, "log_level", Value.Log_Level);
      Swagger.Streams.Deserialize (Object, "external_business_id", Value.External_Business_Id);
      Swagger.Streams.Deserialize (Object, "advertiser_id", Value.Advertiser_Id);
      Swagger.Streams.Deserialize (Object, "merchant_id", Value.Merchant_Id);
      Swagger.Streams.Deserialize (Object, "tag_id", Value.Tag_Id);
      Swagger.Streams.Deserialize (Object, "feed_profile_id", Value.Feed_Profile_Id);
      Swagger.Streams.Deserialize (Object, "message", Value.Message);
      Swagger.Streams.Deserialize (Object, "app_version_number", Value.App_Version_Number);
      Swagger.Streams.Deserialize (Object, "platform_version_number", Value.Platform_Version_Number);
      Deserialize (Object, "error", Value.Error);
      Deserialize (Object, "request", Value.Request);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out IntegrationLog_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.IntegrationLog_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.IntegrationLogsRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "logs", Value.Logs);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in IntegrationLogsRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.IntegrationLogsRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "logs", Value.Logs);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out IntegrationLogsRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.IntegrationLogsRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.IntegrationsGetList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in IntegrationsGetList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.IntegrationsGetList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out IntegrationsGetList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.IntegrationsGetList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ItemCreateBatchRecord_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Item_Id.Is_Null then
         Into.Write_Entity ("item_id", Value.Item_Id);
      end if;
      Serialize (Into, "attributes", Value.Attributes);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ItemCreateBatchRecord_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ItemCreateBatchRecord_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "item_id", Value.Item_Id);
      Deserialize (Object, "attributes", Value.Attributes);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ItemCreateBatchRecord_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ItemCreateBatchRecord_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ItemUpsertBatchRecord_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Item_Id.Is_Null then
         Into.Write_Entity ("item_id", Value.Item_Id);
      end if;
      Serialize (Into, "attributes", Value.Attributes);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ItemUpsertBatchRecord_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ItemUpsertBatchRecord_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "item_id", Value.Item_Id);
      Deserialize (Object, "attributes", Value.Attributes);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ItemUpsertBatchRecord_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ItemUpsertBatchRecord_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsItemValidationIssues_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("item_number", Value.Item_Number);
      Into.Write_Entity ("item_id", Value.Item_Id);
      Serialize (Into, "errors", Value.Errors);
      Serialize (Into, "warnings", Value.Warnings);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsItemValidationIssues_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsItemValidationIssues_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "item_number", Value.Item_Number);
      Swagger.Streams.Deserialize (Object, "item_id", Value.Item_Id);
      Deserialize (Object, "errors", Value.Errors);
      Deserialize (Object, "warnings", Value.Warnings);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsItemValidationIssues_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsItemValidationIssues_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ItemsIssuesList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ItemsIssuesList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ItemsIssuesList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ItemsIssuesList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ItemsIssuesList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Keyword_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("bid", Value.Bid);
      Serialize (Into, "match_type", Value.Match_Type);
      Into.Write_Entity ("value", Value.Value);
      if not Value.Archived.Is_Null then
         Into.Write_Entity ("archived", Value.Archived);
      end if;
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Parent_Id.Is_Null then
         Into.Write_Entity ("parent_id", Value.Parent_Id);
      end if;
      if not Value.Parent_Type.Is_Null then
         Into.Write_Entity ("parent_type", Value.Parent_Type);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Keyword_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Keyword_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "bid", Value.Bid);
      Deserialize (Object, "match_type", Value.Match_Type);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Swagger.Streams.Deserialize (Object, "archived", Value.Archived);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "parent_id", Value.Parent_Id);
      Swagger.Streams.Deserialize (Object, "parent_type", Value.Parent_Type);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Keyword_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Keyword_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.KeywordError_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "data", Value.Data);
      Serialize (Into, "error_messages", Value.Error_Messages);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in KeywordError_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.KeywordError_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "data", Value.Data);
      Swagger.Streams.Deserialize (Object, "error_messages", Value.Error_Messages);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out KeywordError_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.KeywordError_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.KeywordMetricsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Keyword.Is_Null then
         Into.Write_Entity ("keyword", Value.Keyword);
      end if;
      Serialize (Into, "metrics", Value.Metrics);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in KeywordMetricsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.KeywordMetricsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "keyword", Value.Keyword);
      Deserialize (Object, "metrics", Value.Metrics);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out KeywordMetricsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.KeywordMetricsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.KeywordUpdateBody_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "keywords", Value.Keywords);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in KeywordUpdateBody_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.KeywordUpdateBody_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "keywords", Value.Keywords);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out KeywordUpdateBody_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.KeywordUpdateBody_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.KeywordsCommon_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("bid", Value.Bid);
      Serialize (Into, "match_type", Value.Match_Type);
      Into.Write_Entity ("value", Value.Value);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in KeywordsCommon_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.KeywordsCommon_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "bid", Value.Bid);
      Deserialize (Object, "match_type", Value.Match_Type);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out KeywordsCommon_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.KeywordsCommon_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.KeywordsGet200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in KeywordsGet200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.KeywordsGet200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out KeywordsGet200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.KeywordsGet200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.KeywordsMetricsArrayResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "data", Value.Data);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in KeywordsMetricsArrayResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.KeywordsMetricsArrayResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "data", Value.Data);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out KeywordsMetricsArrayResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.KeywordsMetricsArrayResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.KeywordsRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "keywords", Value.Keywords);
      Into.Write_Entity ("parent_id", Value.Parent_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in KeywordsRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.KeywordsRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "keywords", Value.Keywords);
      Swagger.Streams.Deserialize (Object, "parent_id", Value.Parent_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out KeywordsRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.KeywordsRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.LeadFormResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("privacy_policy_link", Value.Privacy_Policy_Link);
      if not Value.Has_Accepted_Terms.Is_Null then
         Into.Write_Entity ("has_accepted_terms", Value.Has_Accepted_Terms);
      end if;
      Into.Write_Entity ("completion_message", Value.Completion_Message);
      Serialize (Into, "status", Value.Status);
      Into.Write_Entity ("disclosure_language", Value.Disclosure_Language);
      Serialize (Into, "questions", Value.Questions);
      Serialize (Into, "policy_links", Value.Policy_Links);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Ad_Account_Id.Is_Null then
         Into.Write_Entity ("ad_account_id", Value.Ad_Account_Id);
      end if;
      if not Value.Created_Time.Is_Null then
         Into.Write_Entity ("created_time", Value.Created_Time);
      end if;
      if not Value.Updated_Time.Is_Null then
         Into.Write_Entity ("updated_time", Value.Updated_Time);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in LeadFormResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.LeadFormResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "privacy_policy_link", Value.Privacy_Policy_Link);
      Swagger.Streams.Deserialize (Object, "has_accepted_terms", Value.Has_Accepted_Terms);
      Swagger.Streams.Deserialize (Object, "completion_message", Value.Completion_Message);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "disclosure_language", Value.Disclosure_Language);
      Deserialize (Object, "questions", Value.Questions);
      Deserialize (Object, "policy_links", Value.Policy_Links);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "ad_account_id", Value.Ad_Account_Id);
      Swagger.Streams.Deserialize (Object, "created_time", Value.Created_Time);
      Swagger.Streams.Deserialize (Object, "updated_time", Value.Updated_Time);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out LeadFormResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.LeadFormResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.LeadFormArrayResponseItemsInner_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "data", Value.Data);
      Serialize (Into, "exceptions", Value.Exceptions);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in LeadFormArrayResponseItemsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.LeadFormArrayResponseItemsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "data", Value.Data);
      Deserialize (Object, "exceptions", Value.Exceptions);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out LeadFormArrayResponseItemsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.LeadFormArrayResponseItemsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.LeadFormArrayResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in LeadFormArrayResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.LeadFormArrayResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out LeadFormArrayResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.LeadFormArrayResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.LeadFormsList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in LeadFormsList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.LeadFormsList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out LeadFormsList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.LeadFormsList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.LeadsExportResponseData_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "export_status", Value.Export_Status);
      Into.Write_Entity ("download_url", Value.Download_Url);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in LeadsExportResponseData_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.LeadsExportResponseData_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "export_status", Value.Export_Status);
      Swagger.Streams.Deserialize (Object, "download_url", Value.Download_Url);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out LeadsExportResponseData_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.LeadsExportResponseData_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.MediaUploadDetails_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Media_Id.Is_Null then
         Into.Write_Entity ("media_id", Value.Media_Id);
      end if;
      Serialize (Into, "media_type", Value.Media_Type);
      Serialize (Into, "status", Value.Status);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MediaUploadDetails_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.MediaUploadDetails_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "media_id", Value.Media_Id);
      Deserialize (Object, "media_type", Value.Media_Type);
      Deserialize (Object, "status", Value.Status);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out MediaUploadDetails_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.MediaUploadDetails_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.MediaList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MediaList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.MediaList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out MediaList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.MediaList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.MediaUploadRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "media_type", Value.Media_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MediaUploadRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.MediaUploadRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "media_type", Value.Media_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out MediaUploadRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.MediaUploadRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.MembersToDeleteBodyMembersInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("member_id", Value.Member_Id);
      Serialize (Into, "business_role", Value.Business_Role);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MembersToDeleteBodyMembersInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.MembersToDeleteBodyMembersInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "member_id", Value.Member_Id);
      Deserialize (Object, "business_role", Value.Business_Role);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out MembersToDeleteBodyMembersInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.MembersToDeleteBodyMembersInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.MembersToDeleteBody_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "members", Value.Members);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MembersToDeleteBody_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.MembersToDeleteBody_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "members", Value.Members);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out MembersToDeleteBody_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.MembersToDeleteBody_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.MetricsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "data", Value.Data);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MetricsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.MetricsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "data", Value.Data);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out MetricsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.MetricsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OptimizationGoalMetadataConversionTagV3GoalMetadata_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "attribution_windows", Value.Attribution_Windows);
      if not Value.Conversion_Event.Is_Null then
         Into.Write_Entity ("conversion_event", Value.Conversion_Event);
      end if;
      if not Value.Conversion_Tag_Id.Is_Null then
         Into.Write_Entity ("conversion_tag_id", Value.Conversion_Tag_Id);
      end if;
      if not Value.Cpa_Goal_Value_In_Micro_Currency.Is_Null then
         Into.Write_Entity ("cpa_goal_value_in_micro_currency", Value.Cpa_Goal_Value_In_Micro_Currency);
      end if;
      Into.Write_Entity ("is_roas_optimized", Value.Is_Roas_Optimized);
      Into.Write_Entity ("learning_mode_type", Value.Learning_Mode_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OptimizationGoalMetadataConversionTagV3GoalMetadata_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OptimizationGoalMetadataConversionTagV3GoalMetadata_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "attribution_windows", Value.Attribution_Windows);
      Swagger.Streams.Deserialize (Object, "conversion_event", Value.Conversion_Event);
      Swagger.Streams.Deserialize (Object, "conversion_tag_id", Value.Conversion_Tag_Id);
      Swagger.Streams.Deserialize (Object, "cpa_goal_value_in_micro_currency", Value.Cpa_Goal_Value_In_Micro_Currency);
      Swagger.Streams.Deserialize (Object, "is_roas_optimized", Value.Is_Roas_Optimized);
      Swagger.Streams.Deserialize (Object, "learning_mode_type", Value.Learning_Mode_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OptimizationGoalMetadataConversionTagV3GoalMetadata_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OptimizationGoalMetadataConversionTagV3GoalMetadata_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderLines_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      if not Value.Ad_Account_Id.Is_Null then
         Into.Write_Entity ("ad_account_id", Value.Ad_Account_Id);
      end if;
      Into.Write_Entity ("purchase_order_id", Value.Purchase_Order_Id);
      Serialize (Into, "start_time", Value.Start_Time);
      Serialize (Into, "end_time", Value.End_Time);
      Serialize (Into, "budget", Value.Budget);
      Serialize (Into, "paid_budget", Value.Paid_Budget);
      Serialize (Into, "status", Value.Status);
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "paid_type", Value.Paid_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderLines_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderLines_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "ad_account_id", Value.Ad_Account_Id);
      Swagger.Streams.Deserialize (Object, "purchase_order_id", Value.Purchase_Order_Id);
      Swagger.Streams.Deserialize (Object, "start_time", Value.Start_Time);
      Swagger.Streams.Deserialize (Object, "end_time", Value.End_Time);
      Swagger.Streams.Deserialize (Object, "budget", Value.Budget);
      Swagger.Streams.Deserialize (Object, "paid_budget", Value.Paid_Budget);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "paid_type", Value.Paid_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderLines_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderLines_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderLinesArrayResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderLinesArrayResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderLinesArrayResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderLinesArrayResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderLinesArrayResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderLine_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      if not Value.Ad_Account_Id.Is_Null then
         Into.Write_Entity ("ad_account_id", Value.Ad_Account_Id);
      end if;
      Into.Write_Entity ("purchase_order_id", Value.Purchase_Order_Id);
      Serialize (Into, "start_time", Value.Start_Time);
      Serialize (Into, "end_time", Value.End_Time);
      Serialize (Into, "budget", Value.Budget);
      Serialize (Into, "paid_budget", Value.Paid_Budget);
      Serialize (Into, "status", Value.Status);
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "paid_type", Value.Paid_Type);
      Serialize (Into, "campaign_ids", Value.Campaign_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderLine_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderLine_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "ad_account_id", Value.Ad_Account_Id);
      Swagger.Streams.Deserialize (Object, "purchase_order_id", Value.Purchase_Order_Id);
      Swagger.Streams.Deserialize (Object, "start_time", Value.Start_Time);
      Swagger.Streams.Deserialize (Object, "end_time", Value.End_Time);
      Swagger.Streams.Deserialize (Object, "budget", Value.Budget);
      Swagger.Streams.Deserialize (Object, "paid_budget", Value.Paid_Budget);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "paid_type", Value.Paid_Type);
      Swagger.Streams.Deserialize (Object, "campaign_ids", Value.Campaign_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderLine_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderLine_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderLinesList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderLinesList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderLinesList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderLinesList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderLinesList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PageVisitConversionTagsGet200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PageVisitConversionTagsGet200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PageVisitConversionTagsGet200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PageVisitConversionTagsGet200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PageVisitConversionTagsGet200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Paginated_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Paginated_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Paginated_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Paginated_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Paginated_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PinAnalyticsMetricsResponseDailyMetricsInner_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "data_status", Value.Data_Status);
      if not Value.Date.Is_Null then
         Into.Write_Entity ("date", Value.Date);
      end if;
      Serialize (Into, "metrics", Value.Metrics);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PinAnalyticsMetricsResponseDailyMetricsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PinAnalyticsMetricsResponseDailyMetricsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "data_status", Value.Data_Status);
      Swagger.Streams.Deserialize (Object, "date", Value.Date);
      Swagger.Streams.Deserialize (Object, "metrics", Value.Metrics);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PinAnalyticsMetricsResponseDailyMetricsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PinAnalyticsMetricsResponseDailyMetricsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PinAnalyticsMetricsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "lifetime_metrics", Value.Lifetime_Metrics);
      Serialize (Into, "daily_metrics", Value.Daily_Metrics);
      Serialize (Into, "summary_metrics", Value.Summary_Metrics);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PinAnalyticsMetricsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PinAnalyticsMetricsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "lifetime_metrics", Value.Lifetime_Metrics);
      Deserialize (Object, "daily_metrics", Value.Daily_Metrics);
      Swagger.Streams.Deserialize (Object, "summary_metrics", Value.Summary_Metrics);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PinAnalyticsMetricsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PinAnalyticsMetricsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PinMediaMetadata_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Item_Type.Is_Null then
         Into.Write_Entity ("item_type", Value.Item_Type);
      end if;
      Into.Write_Entity ("title", Value.Title);
      Into.Write_Entity ("description", Value.Description);
      Into.Write_Entity ("link", Value.Link);
      Serialize (Into, "images", Value.Images);
      if not Value.Cover_Image_Url.Is_Null then
         Into.Write_Entity ("cover_image_url", Value.Cover_Image_Url);
      end if;
      Into.Write_Entity ("video_url", Value.Video_Url);
      Serialize (Into, "duration", Value.Duration);
      if not Value.Height.Is_Null then
         Into.Write_Entity ("height", Value.Height);
      end if;
      if not Value.Width.Is_Null then
         Into.Write_Entity ("width", Value.Width);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PinMediaMetadata_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PinMediaMetadata_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "item_type", Value.Item_Type);
      Swagger.Streams.Deserialize (Object, "title", Value.Title);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "link", Value.Link);
      Deserialize (Object, "images", Value.Images);
      Swagger.Streams.Deserialize (Object, "cover_image_url", Value.Cover_Image_Url);
      Swagger.Streams.Deserialize (Object, "video_url", Value.Video_Url);
      Swagger.Streams.Deserialize (Object, "duration", Value.Duration);
      Swagger.Streams.Deserialize (Object, "height", Value.Height);
      Swagger.Streams.Deserialize (Object, "width", Value.Width);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PinMediaMetadata_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PinMediaMetadata_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PinMediaSourceImagesBase64_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Source_Type.Is_Null then
         Into.Write_Entity ("source_type", Value.Source_Type);
      end if;
      Serialize (Into, "items", Value.Items);
      if not Value.Index.Is_Null then
         Into.Write_Entity ("index", Value.Index);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PinMediaSourceImagesBase64_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PinMediaSourceImagesBase64_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "source_type", Value.Source_Type);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "index", Value.Index);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PinMediaSourceImagesBase64_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PinMediaSourceImagesBase64_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PinMediaSourceImagesURL_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Source_Type.Is_Null then
         Into.Write_Entity ("source_type", Value.Source_Type);
      end if;
      Serialize (Into, "items", Value.Items);
      if not Value.Index.Is_Null then
         Into.Write_Entity ("index", Value.Index);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PinMediaSourceImagesURL_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PinMediaSourceImagesURL_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "source_type", Value.Source_Type);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "index", Value.Index);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PinMediaSourceImagesURL_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PinMediaSourceImagesURL_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PinMediaSource_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("source_type", Value.Source_Type);
      Into.Write_Entity ("content_type", Value.Content_Type);
      Into.Write_Entity ("data", Value.Data);
      if not Value.Is_Standard.Is_Null then
         Into.Write_Entity ("is_standard", Value.Is_Standard);
      end if;
      Into.Write_Entity ("url", Value.Url);
      if not Value.Cover_Image_Url.Is_Null then
         Into.Write_Entity ("cover_image_url", Value.Cover_Image_Url);
      end if;
      if not Value.Cover_Image_Content_Type.Is_Null then
         Into.Write_Entity ("cover_image_content_type", Value.Cover_Image_Content_Type);
      end if;
      if not Value.Cover_Image_Data.Is_Null then
         Into.Write_Entity ("cover_image_data", Value.Cover_Image_Data);
      end if;
      Into.Write_Entity ("media_id", Value.Media_Id);
      Serialize (Into, "items", Value.Items);
      if not Value.Index.Is_Null then
         Into.Write_Entity ("index", Value.Index);
      end if;
      if not Value.Is_Affiliate_Link.Is_Null then
         Into.Write_Entity ("is_affiliate_link", Value.Is_Affiliate_Link);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PinMediaSource_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PinMediaSource_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "source_type", Value.Source_Type);
      Swagger.Streams.Deserialize (Object, "content_type", Value.Content_Type);
      Swagger.Streams.Deserialize (Object, "data", Value.Data);
      Swagger.Streams.Deserialize (Object, "is_standard", Value.Is_Standard);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "cover_image_url", Value.Cover_Image_Url);
      Swagger.Streams.Deserialize (Object, "cover_image_content_type", Value.Cover_Image_Content_Type);
      Swagger.Streams.Deserialize (Object, "cover_image_data", Value.Cover_Image_Data);
      Swagger.Streams.Deserialize (Object, "media_id", Value.Media_Id);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "index", Value.Index);
      Swagger.Streams.Deserialize (Object, "is_affiliate_link", Value.Is_Affiliate_Link);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PinMediaSource_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PinMediaSource_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PinMediaWithImageAndVideo_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Media_Type.Is_Null then
         Into.Write_Entity ("media_type", Value.Media_Type);
      end if;
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PinMediaWithImageAndVideo_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PinMediaWithImageAndVideo_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "media_type", Value.Media_Type);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PinMediaWithImageAndVideo_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PinMediaWithImageAndVideo_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PinMediaWithImage_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Media_Type.Is_Null then
         Into.Write_Entity ("media_type", Value.Media_Type);
      end if;
      Serialize (Into, "images", Value.Images);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PinMediaWithImage_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PinMediaWithImage_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "media_type", Value.Media_Type);
      Deserialize (Object, "images", Value.Images);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PinMediaWithImage_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PinMediaWithImage_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PinMediaWithImages_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Media_Type.Is_Null then
         Into.Write_Entity ("media_type", Value.Media_Type);
      end if;
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PinMediaWithImages_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PinMediaWithImages_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "media_type", Value.Media_Type);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PinMediaWithImages_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PinMediaWithImages_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PinMediaWithVideo_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Media_Type.Is_Null then
         Into.Write_Entity ("media_type", Value.Media_Type);
      end if;
      Serialize (Into, "images", Value.Images);
      if not Value.Cover_Image_Url.Is_Null then
         Into.Write_Entity ("cover_image_url", Value.Cover_Image_Url);
      end if;
      Into.Write_Entity ("video_url", Value.Video_Url);
      Serialize (Into, "duration", Value.Duration);
      if not Value.Height.Is_Null then
         Into.Write_Entity ("height", Value.Height);
      end if;
      if not Value.Width.Is_Null then
         Into.Write_Entity ("width", Value.Width);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PinMediaWithVideo_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PinMediaWithVideo_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "media_type", Value.Media_Type);
      Deserialize (Object, "images", Value.Images);
      Swagger.Streams.Deserialize (Object, "cover_image_url", Value.Cover_Image_Url);
      Swagger.Streams.Deserialize (Object, "video_url", Value.Video_Url);
      Swagger.Streams.Deserialize (Object, "duration", Value.Duration);
      Swagger.Streams.Deserialize (Object, "height", Value.Height);
      Swagger.Streams.Deserialize (Object, "width", Value.Width);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PinMediaWithVideo_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PinMediaWithVideo_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PinMediaWithVideos_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Media_Type.Is_Null then
         Into.Write_Entity ("media_type", Value.Media_Type);
      end if;
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PinMediaWithVideos_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PinMediaWithVideos_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "media_type", Value.Media_Type);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PinMediaWithVideos_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PinMediaWithVideos_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PinUpdate_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("alt_text", Value.Alt_Text);
      Into.Write_Entity ("board_id", Value.Board_Id);
      Into.Write_Entity ("board_section_id", Value.Board_Section_Id);
      Into.Write_Entity ("description", Value.Description);
      Into.Write_Entity ("link", Value.Link);
      Into.Write_Entity ("title", Value.Title);
      Serialize (Into, "carousel_slots", Value.Carousel_Slots);
      Into.Write_Entity ("note", Value.Note);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PinUpdate_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PinUpdate_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "alt_text", Value.Alt_Text);
      Swagger.Streams.Deserialize (Object, "board_id", Value.Board_Id);
      Swagger.Streams.Deserialize (Object, "board_section_id", Value.Board_Section_Id);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "link", Value.Link);
      Swagger.Streams.Deserialize (Object, "title", Value.Title);
      Deserialize (Object, "carousel_slots", Value.Carousel_Slots);
      Swagger.Streams.Deserialize (Object, "note", Value.Note);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PinUpdate_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PinUpdate_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PinsList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PinsList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PinsList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PinsList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PinsList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PriceFilter_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "PRICE", Value.PRICE);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PriceFilter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PriceFilter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "PRICE", Value.PRICE);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PriceFilter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PriceFilter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductGroupPromotionCreateRequestElement_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Ad_Group_Id.Is_Null then
         Into.Write_Entity ("ad_group_id", Value.Ad_Group_Id);
      end if;
      Into.Write_Entity ("bid_in_micro_currency", Value.Bid_In_Micro_Currency);
      Into.Write_Entity ("included", Value.Included);
      Into.Write_Entity ("definition", Value.Definition);
      Into.Write_Entity ("relative_definition", Value.Relative_Definition);
      Into.Write_Entity ("parent_id", Value.Parent_Id);
      Into.Write_Entity ("slideshow_collections_title", Value.Slideshow_Collections_Title);
      Into.Write_Entity ("slideshow_collections_description", Value.Slideshow_Collections_Description);
      Into.Write_Entity ("is_mdl", Value.Is_Mdl);
      Serialize (Into, "status", Value.Status);
      Into.Write_Entity ("tracking_url", Value.Tracking_Url);
      Into.Write_Entity ("catalog_product_group_id", Value.Catalog_Product_Group_Id);
      Into.Write_Entity ("catalog_product_group_name", Value.Catalog_Product_Group_Name);
      Into.Write_Entity ("collections_hero_pin_id", Value.Collections_Hero_Pin_Id);
      Into.Write_Entity ("collections_hero_destination_url", Value.Collections_Hero_Destination_Url);
      Serialize (Into, "grid_click_type", Value.Grid_Click_Type);
      Serialize (Into, "creative_type", Value.Creative_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductGroupPromotionCreateRequestElement_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductGroupPromotionCreateRequestElement_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "ad_group_id", Value.Ad_Group_Id);
      Swagger.Streams.Deserialize (Object, "bid_in_micro_currency", Value.Bid_In_Micro_Currency);
      Swagger.Streams.Deserialize (Object, "included", Value.Included);
      Swagger.Streams.Deserialize (Object, "definition", Value.Definition);
      Swagger.Streams.Deserialize (Object, "relative_definition", Value.Relative_Definition);
      Swagger.Streams.Deserialize (Object, "parent_id", Value.Parent_Id);
      Swagger.Streams.Deserialize (Object, "slideshow_collections_title", Value.Slideshow_Collections_Title);
      Swagger.Streams.Deserialize (Object, "slideshow_collections_description", Value.Slideshow_Collections_Description);
      Swagger.Streams.Deserialize (Object, "is_mdl", Value.Is_Mdl);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "tracking_url", Value.Tracking_Url);
      Swagger.Streams.Deserialize (Object, "catalog_product_group_id", Value.Catalog_Product_Group_Id);
      Swagger.Streams.Deserialize (Object, "catalog_product_group_name", Value.Catalog_Product_Group_Name);
      Swagger.Streams.Deserialize (Object, "collections_hero_pin_id", Value.Collections_Hero_Pin_Id);
      Swagger.Streams.Deserialize (Object, "collections_hero_destination_url", Value.Collections_Hero_Destination_Url);
      Deserialize (Object, "grid_click_type", Value.Grid_Click_Type);
      Deserialize (Object, "creative_type", Value.Creative_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductGroupPromotionCreateRequestElement_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductGroupPromotionCreateRequestElement_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductGroupPromotionCreateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("ad_group_id", Value.Ad_Group_Id);
      Serialize (Into, "product_group_promotion", Value.Product_Group_Promotion);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductGroupPromotionCreateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductGroupPromotionCreateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "ad_group_id", Value.Ad_Group_Id);
      Deserialize (Object, "product_group_promotion", Value.Product_Group_Promotion);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductGroupPromotionCreateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductGroupPromotionCreateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductGroupPromotionResponseElement_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Ad_Group_Id.Is_Null then
         Into.Write_Entity ("ad_group_id", Value.Ad_Group_Id);
      end if;
      Into.Write_Entity ("bid_in_micro_currency", Value.Bid_In_Micro_Currency);
      Into.Write_Entity ("included", Value.Included);
      Into.Write_Entity ("definition", Value.Definition);
      Into.Write_Entity ("relative_definition", Value.Relative_Definition);
      Into.Write_Entity ("parent_id", Value.Parent_Id);
      Into.Write_Entity ("slideshow_collections_title", Value.Slideshow_Collections_Title);
      Into.Write_Entity ("slideshow_collections_description", Value.Slideshow_Collections_Description);
      Into.Write_Entity ("is_mdl", Value.Is_Mdl);
      Serialize (Into, "status", Value.Status);
      Into.Write_Entity ("tracking_url", Value.Tracking_Url);
      Into.Write_Entity ("catalog_product_group_id", Value.Catalog_Product_Group_Id);
      Into.Write_Entity ("catalog_product_group_name", Value.Catalog_Product_Group_Name);
      Into.Write_Entity ("collections_hero_pin_id", Value.Collections_Hero_Pin_Id);
      Into.Write_Entity ("collections_hero_destination_url", Value.Collections_Hero_Destination_Url);
      Serialize (Into, "grid_click_type", Value.Grid_Click_Type);
      Serialize (Into, "creative_type", Value.Creative_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductGroupPromotionResponseElement_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductGroupPromotionResponseElement_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "ad_group_id", Value.Ad_Group_Id);
      Swagger.Streams.Deserialize (Object, "bid_in_micro_currency", Value.Bid_In_Micro_Currency);
      Swagger.Streams.Deserialize (Object, "included", Value.Included);
      Swagger.Streams.Deserialize (Object, "definition", Value.Definition);
      Swagger.Streams.Deserialize (Object, "relative_definition", Value.Relative_Definition);
      Swagger.Streams.Deserialize (Object, "parent_id", Value.Parent_Id);
      Swagger.Streams.Deserialize (Object, "slideshow_collections_title", Value.Slideshow_Collections_Title);
      Swagger.Streams.Deserialize (Object, "slideshow_collections_description", Value.Slideshow_Collections_Description);
      Swagger.Streams.Deserialize (Object, "is_mdl", Value.Is_Mdl);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "tracking_url", Value.Tracking_Url);
      Swagger.Streams.Deserialize (Object, "catalog_product_group_id", Value.Catalog_Product_Group_Id);
      Swagger.Streams.Deserialize (Object, "catalog_product_group_name", Value.Catalog_Product_Group_Name);
      Swagger.Streams.Deserialize (Object, "collections_hero_pin_id", Value.Collections_Hero_Pin_Id);
      Swagger.Streams.Deserialize (Object, "collections_hero_destination_url", Value.Collections_Hero_Destination_Url);
      Deserialize (Object, "grid_click_type", Value.Grid_Click_Type);
      Deserialize (Object, "creative_type", Value.Creative_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductGroupPromotionResponseElement_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductGroupPromotionResponseElement_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductGroupPromotionResponseItem_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "data", Value.Data);
      Serialize (Into, "exceptions", Value.Exceptions);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductGroupPromotionResponseItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductGroupPromotionResponseItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "data", Value.Data);
      Deserialize (Object, "exceptions", Value.Exceptions);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductGroupPromotionResponseItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductGroupPromotionResponseItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductGroupPromotionResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductGroupPromotionResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductGroupPromotionResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductGroupPromotionResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductGroupPromotionResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductGroupPromotion_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Ad_Group_Id.Is_Null then
         Into.Write_Entity ("ad_group_id", Value.Ad_Group_Id);
      end if;
      Into.Write_Entity ("bid_in_micro_currency", Value.Bid_In_Micro_Currency);
      Into.Write_Entity ("included", Value.Included);
      Into.Write_Entity ("definition", Value.Definition);
      Into.Write_Entity ("relative_definition", Value.Relative_Definition);
      Into.Write_Entity ("parent_id", Value.Parent_Id);
      Into.Write_Entity ("slideshow_collections_title", Value.Slideshow_Collections_Title);
      Into.Write_Entity ("slideshow_collections_description", Value.Slideshow_Collections_Description);
      Into.Write_Entity ("is_mdl", Value.Is_Mdl);
      Serialize (Into, "status", Value.Status);
      Into.Write_Entity ("tracking_url", Value.Tracking_Url);
      Into.Write_Entity ("catalog_product_group_id", Value.Catalog_Product_Group_Id);
      Into.Write_Entity ("catalog_product_group_name", Value.Catalog_Product_Group_Name);
      Into.Write_Entity ("collections_hero_pin_id", Value.Collections_Hero_Pin_Id);
      Into.Write_Entity ("collections_hero_destination_url", Value.Collections_Hero_Destination_Url);
      Serialize (Into, "grid_click_type", Value.Grid_Click_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductGroupPromotion_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductGroupPromotion_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "ad_group_id", Value.Ad_Group_Id);
      Swagger.Streams.Deserialize (Object, "bid_in_micro_currency", Value.Bid_In_Micro_Currency);
      Swagger.Streams.Deserialize (Object, "included", Value.Included);
      Swagger.Streams.Deserialize (Object, "definition", Value.Definition);
      Swagger.Streams.Deserialize (Object, "relative_definition", Value.Relative_Definition);
      Swagger.Streams.Deserialize (Object, "parent_id", Value.Parent_Id);
      Swagger.Streams.Deserialize (Object, "slideshow_collections_title", Value.Slideshow_Collections_Title);
      Swagger.Streams.Deserialize (Object, "slideshow_collections_description", Value.Slideshow_Collections_Description);
      Swagger.Streams.Deserialize (Object, "is_mdl", Value.Is_Mdl);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "tracking_url", Value.Tracking_Url);
      Swagger.Streams.Deserialize (Object, "catalog_product_group_id", Value.Catalog_Product_Group_Id);
      Swagger.Streams.Deserialize (Object, "catalog_product_group_name", Value.Catalog_Product_Group_Name);
      Swagger.Streams.Deserialize (Object, "collections_hero_pin_id", Value.Collections_Hero_Pin_Id);
      Swagger.Streams.Deserialize (Object, "collections_hero_destination_url", Value.Collections_Hero_Destination_Url);
      Deserialize (Object, "grid_click_type", Value.Grid_Click_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductGroupPromotion_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductGroupPromotion_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductGroupPromotionUpdateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("ad_group_id", Value.Ad_Group_Id);
      Serialize (Into, "product_group_promotion", Value.Product_Group_Promotion);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductGroupPromotionUpdateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductGroupPromotionUpdateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "ad_group_id", Value.Ad_Group_Id);
      Deserialize (Object, "product_group_promotion", Value.Product_Group_Promotion);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductGroupPromotionUpdateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductGroupPromotionUpdateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProductGroupPromotionsList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProductGroupPromotionsList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProductGroupPromotionsList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProductGroupPromotionsList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProductGroupPromotionsList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.QuizPinQuestion_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "question_id", Value.Question_Id);
      if not Value.Question_Text.Is_Null then
         Into.Write_Entity ("question_text", Value.Question_Text);
      end if;
      Serialize (Into, "options", Value.Options);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in QuizPinQuestion_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.QuizPinQuestion_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "question_id", Value.Question_Id);
      Swagger.Streams.Deserialize (Object, "question_text", Value.Question_Text);
      Deserialize (Object, "options", Value.Options);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out QuizPinQuestion_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.QuizPinQuestion_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.RelatedTerms_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Related_Term_Count.Is_Null then
         Into.Write_Entity ("related_term_count", Value.Related_Term_Count);
      end if;
      Serialize (Into, "related_terms_list", Value.Related_Terms_List);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RelatedTerms_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.RelatedTerms_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "related_term_count", Value.Related_Term_Count);
      Deserialize (Object, "related_terms_list", Value.Related_Terms_List);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out RelatedTerms_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.RelatedTerms_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ReportsStats200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ReportsStats200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ReportsStats200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ReportsStats200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ReportsStats200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.RespondToInvitesResponseArrayItemsInner_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "exception", Value.P_Exception);
      Serialize (Into, "invite", Value.Invite);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RespondToInvitesResponseArrayItemsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.RespondToInvitesResponseArrayItemsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "exception", Value.P_Exception);
      Deserialize (Object, "invite", Value.Invite);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out RespondToInvitesResponseArrayItemsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.RespondToInvitesResponseArrayItemsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.RespondToInvitesResponseArray_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RespondToInvitesResponseArray_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.RespondToInvitesResponseArray_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out RespondToInvitesResponseArray_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.RespondToInvitesResponseArray_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SSIOAccountItem_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Io_Terms_Id.Is_Null then
         Into.Write_Entity ("io_terms_id", Value.Io_Terms_Id);
      end if;
      if not Value.Io_Terms.Is_Null then
         Into.Write_Entity ("io_terms", Value.Io_Terms);
      end if;
      if not Value.Us_Terms_Id.Is_Null then
         Into.Write_Entity ("us_terms_id", Value.Us_Terms_Id);
      end if;
      if not Value.Us_Terms.Is_Null then
         Into.Write_Entity ("us_terms", Value.Us_Terms);
      end if;
      if not Value.Row_Terms_Id.Is_Null then
         Into.Write_Entity ("row_terms_id", Value.Row_Terms_Id);
      end if;
      if not Value.Row_Terms.Is_Null then
         Into.Write_Entity ("row_terms", Value.Row_Terms);
      end if;
      if not Value.Io_Type.Is_Null then
         Into.Write_Entity ("io_type", Value.Io_Type);
      end if;
      Serialize (Into, "addresses", Value.Addresses);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SSIOAccountItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SSIOAccountItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "io_terms_id", Value.Io_Terms_Id);
      Swagger.Streams.Deserialize (Object, "io_terms", Value.Io_Terms);
      Swagger.Streams.Deserialize (Object, "us_terms_id", Value.Us_Terms_Id);
      Swagger.Streams.Deserialize (Object, "us_terms", Value.Us_Terms);
      Swagger.Streams.Deserialize (Object, "row_terms_id", Value.Row_Terms_Id);
      Swagger.Streams.Deserialize (Object, "row_terms", Value.Row_Terms);
      Swagger.Streams.Deserialize (Object, "io_type", Value.Io_Type);
      Deserialize (Object, "addresses", Value.Addresses);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SSIOAccountItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SSIOAccountItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SSIOCreateInsertionOrderRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("start_date", Value.Start_Date);
      if not Value.End_Date.Is_Null then
         Into.Write_Entity ("end_date", Value.End_Date);
      end if;
      Into.Write_Entity ("po_number", Value.Po_Number);
      Serialize (Into, "budget_amount", Value.Budget_Amount);
      Into.Write_Entity ("billing_contact_firstname", Value.Billing_Contact_Firstname);
      Into.Write_Entity ("billing_contact_lastname", Value.Billing_Contact_Lastname);
      Into.Write_Entity ("billing_contact_email", Value.Billing_Contact_Email);
      Into.Write_Entity ("media_contact_firstname", Value.Media_Contact_Firstname);
      Into.Write_Entity ("media_contact_lastname", Value.Media_Contact_Lastname);
      Into.Write_Entity ("media_contact_email", Value.Media_Contact_Email);
      if not Value.Agency_Link.Is_Null then
         Into.Write_Entity ("agency_link", Value.Agency_Link);
      end if;
      if not Value.User_Email.Is_Null then
         Into.Write_Entity ("user_email", Value.User_Email);
      end if;
      if not Value.Accepted_Terms_Time.Is_Null then
         Into.Write_Entity ("accepted_terms_time", Value.Accepted_Terms_Time);
      end if;
      Into.Write_Entity ("pmp_id", Value.Pmp_Id);
      Into.Write_Entity ("order_name", Value.Order_Name);
      Into.Write_Entity ("order_line_type", Value.Order_Line_Type);
      Into.Write_Entity ("accepted_terms_id", Value.Accepted_Terms_Id);
      Into.Write_Entity ("billto_company_id", Value.Billto_Company_Id);
      Into.Write_Entity ("billto_business_address_id", Value.Billto_Business_Address_Id);
      Into.Write_Entity ("billto_billing_address_id", Value.Billto_Billing_Address_Id);
      Serialize (Into, "estimated_monthly_spend", Value.Estimated_Monthly_Spend);
      Serialize (Into, "currency_info", Value.Currency_Info);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SSIOCreateInsertionOrderRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SSIOCreateInsertionOrderRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "start_date", Value.Start_Date);
      Swagger.Streams.Deserialize (Object, "end_date", Value.End_Date);
      Swagger.Streams.Deserialize (Object, "po_number", Value.Po_Number);
      Swagger.Streams.Deserialize (Object, "budget_amount", Value.Budget_Amount);
      Swagger.Streams.Deserialize (Object, "billing_contact_firstname", Value.Billing_Contact_Firstname);
      Swagger.Streams.Deserialize (Object, "billing_contact_lastname", Value.Billing_Contact_Lastname);
      Swagger.Streams.Deserialize (Object, "billing_contact_email", Value.Billing_Contact_Email);
      Swagger.Streams.Deserialize (Object, "media_contact_firstname", Value.Media_Contact_Firstname);
      Swagger.Streams.Deserialize (Object, "media_contact_lastname", Value.Media_Contact_Lastname);
      Swagger.Streams.Deserialize (Object, "media_contact_email", Value.Media_Contact_Email);
      Swagger.Streams.Deserialize (Object, "agency_link", Value.Agency_Link);
      Swagger.Streams.Deserialize (Object, "user_email", Value.User_Email);
      Swagger.Streams.Deserialize (Object, "accepted_terms_time", Value.Accepted_Terms_Time);
      Swagger.Streams.Deserialize (Object, "pmp_id", Value.Pmp_Id);
      Swagger.Streams.Deserialize (Object, "order_name", Value.Order_Name);
      Swagger.Streams.Deserialize (Object, "order_line_type", Value.Order_Line_Type);
      Swagger.Streams.Deserialize (Object, "accepted_terms_id", Value.Accepted_Terms_Id);
      Swagger.Streams.Deserialize (Object, "billto_company_id", Value.Billto_Company_Id);
      Swagger.Streams.Deserialize (Object, "billto_business_address_id", Value.Billto_Business_Address_Id);
      Swagger.Streams.Deserialize (Object, "billto_billing_address_id", Value.Billto_Billing_Address_Id);
      Swagger.Streams.Deserialize (Object, "estimated_monthly_spend", Value.Estimated_Monthly_Spend);
      Deserialize (Object, "currency_info", Value.Currency_Info);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SSIOCreateInsertionOrderRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SSIOCreateInsertionOrderRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SSIOOrderLine_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("salesforce_order_line_id", Value.Salesforce_Order_Line_Id);
      Into.Write_Entity ("ads_manager_order_line_id", Value.Ads_Manager_Order_Line_Id);
      Into.Write_Entity ("pin_order_id", Value.Pin_Order_Id);
      Into.Write_Entity ("last_modified_date_time", Value.Last_Modified_Date_Time);
      Into.Write_Entity ("start_date", Value.Start_Date);
      Into.Write_Entity ("end_date", Value.End_Date);
      Into.Write_Entity ("bill_to_company_name", Value.Bill_To_Company_Name);
      Into.Write_Entity ("billing_contact_firstname", Value.Billing_Contact_Firstname);
      Into.Write_Entity ("billing_contact_lastname", Value.Billing_Contact_Lastname);
      Into.Write_Entity ("billing_contact_email", Value.Billing_Contact_Email);
      Into.Write_Entity ("media_contact_email", Value.Media_Contact_Email);
      Into.Write_Entity ("media_contact_firstname", Value.Media_Contact_Firstname);
      Into.Write_Entity ("media_contact_lastname", Value.Media_Contact_Lastname);
      Serialize (Into, "currency_info", Value.Currency_Info);
      Into.Write_Entity ("agency_link", Value.Agency_Link);
      Into.Write_Entity ("po_number", Value.Po_Number);
      Into.Write_Entity ("order_name", Value.Order_Name);
      Into.Write_Entity ("pmp_name", Value.Pmp_Name);
      Into.Write_Entity ("accepted_terms_id", Value.Accepted_Terms_Id);
      Into.Write_Entity ("accepted_terms_time", Value.Accepted_Terms_Time);
      Serialize (Into, "budget_amount", Value.Budget_Amount);
      Serialize (Into, "estimated_monthly_spend", Value.Estimated_Monthly_Spend);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SSIOOrderLine_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SSIOOrderLine_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "salesforce_order_line_id", Value.Salesforce_Order_Line_Id);
      Swagger.Streams.Deserialize (Object, "ads_manager_order_line_id", Value.Ads_Manager_Order_Line_Id);
      Swagger.Streams.Deserialize (Object, "pin_order_id", Value.Pin_Order_Id);
      Swagger.Streams.Deserialize (Object, "last_modified_date_time", Value.Last_Modified_Date_Time);
      Swagger.Streams.Deserialize (Object, "start_date", Value.Start_Date);
      Swagger.Streams.Deserialize (Object, "end_date", Value.End_Date);
      Swagger.Streams.Deserialize (Object, "bill_to_company_name", Value.Bill_To_Company_Name);
      Swagger.Streams.Deserialize (Object, "billing_contact_firstname", Value.Billing_Contact_Firstname);
      Swagger.Streams.Deserialize (Object, "billing_contact_lastname", Value.Billing_Contact_Lastname);
      Swagger.Streams.Deserialize (Object, "billing_contact_email", Value.Billing_Contact_Email);
      Swagger.Streams.Deserialize (Object, "media_contact_email", Value.Media_Contact_Email);
      Swagger.Streams.Deserialize (Object, "media_contact_firstname", Value.Media_Contact_Firstname);
      Swagger.Streams.Deserialize (Object, "media_contact_lastname", Value.Media_Contact_Lastname);
      Deserialize (Object, "currency_info", Value.Currency_Info);
      Swagger.Streams.Deserialize (Object, "agency_link", Value.Agency_Link);
      Swagger.Streams.Deserialize (Object, "po_number", Value.Po_Number);
      Swagger.Streams.Deserialize (Object, "order_name", Value.Order_Name);
      Swagger.Streams.Deserialize (Object, "pmp_name", Value.Pmp_Name);
      Swagger.Streams.Deserialize (Object, "accepted_terms_id", Value.Accepted_Terms_Id);
      Swagger.Streams.Deserialize (Object, "accepted_terms_time", Value.Accepted_Terms_Time);
      Swagger.Streams.Deserialize (Object, "budget_amount", Value.Budget_Amount);
      Swagger.Streams.Deserialize (Object, "estimated_monthly_spend", Value.Estimated_Monthly_Spend);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SSIOOrderLine_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SSIOOrderLine_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SummaryPin_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "media", Value.Media);
      Into.Write_Entity ("alt_text", Value.Alt_Text);
      Into.Write_Entity ("link", Value.Link);
      Into.Write_Entity ("title", Value.Title);
      Into.Write_Entity ("description", Value.Description);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SummaryPin_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SummaryPin_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "media", Value.Media);
      Swagger.Streams.Deserialize (Object, "alt_text", Value.Alt_Text);
      Swagger.Streams.Deserialize (Object, "link", Value.Link);
      Swagger.Streams.Deserialize (Object, "title", Value.Title);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SummaryPin_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SummaryPin_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SearchPartnerPins200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SearchPartnerPins200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SearchPartnerPins200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SearchPartnerPins200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SearchPartnerPins200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SharedAudienceCommon_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Audience_Id.Is_Null then
         Into.Write_Entity ("audience_id", Value.Audience_Id);
      end if;
      Serialize (Into, "operation_type", Value.Operation_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SharedAudienceCommon_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SharedAudienceCommon_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "audience_id", Value.Audience_Id);
      Deserialize (Object, "operation_type", Value.Operation_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SharedAudienceCommon_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SharedAudienceCommon_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SharedAudienceResponseCommon_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Audience_Id.Is_Null then
         Into.Write_Entity ("audience_id", Value.Audience_Id);
      end if;
      Serialize (Into, "permissions", Value.Permissions);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SharedAudienceResponseCommon_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SharedAudienceResponseCommon_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "audience_id", Value.Audience_Id);
      Deserialize (Object, "permissions", Value.Permissions);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SharedAudienceResponseCommon_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SharedAudienceResponseCommon_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SharedAudienceResponse_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Audience_Id.Is_Null then
         Into.Write_Entity ("audience_id", Value.Audience_Id);
      end if;
      Serialize (Into, "permissions", Value.Permissions);
      Serialize (Into, "recipient_account_ids", Value.Recipient_Account_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SharedAudienceResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SharedAudienceResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "audience_id", Value.Audience_Id);
      Deserialize (Object, "permissions", Value.Permissions);
      Swagger.Streams.Deserialize (Object, "recipient_account_ids", Value.Recipient_Account_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SharedAudienceResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SharedAudienceResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SharedAudience_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("audience_id", Value.Audience_Id);
      Serialize (Into, "operation_type", Value.Operation_Type);
      Serialize (Into, "recipient_account_ids", Value.Recipient_Account_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SharedAudience_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SharedAudience_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "audience_id", Value.Audience_Id);
      Deserialize (Object, "operation_type", Value.Operation_Type);
      Swagger.Streams.Deserialize (Object, "recipient_account_ids", Value.Recipient_Account_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SharedAudience_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SharedAudience_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SsioInsertionOrdersStatusGetByAdAccount200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SsioInsertionOrdersStatusGetByAdAccount200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SsioInsertionOrdersStatusGetByAdAccount200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SsioInsertionOrdersStatusGetByAdAccount200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SsioInsertionOrdersStatusGetByAdAccount200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SsioOrderLinesGetByAdAccount200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SsioOrderLinesGetByAdAccount200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SsioOrderLinesGetByAdAccount200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SsioOrderLinesGetByAdAccount200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SsioOrderLinesGetByAdAccount200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TargetingSpec_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "AGE_BUCKET", Value.AGE_BUCKET);
      Serialize (Into, "APPTYPE", Value.APPTYPE);
      Serialize (Into, "AUDIENCE_EXCLUDE", Value.AUDIENCE_EXCLUDE);
      Serialize (Into, "AUDIENCE_INCLUDE", Value.AUDIENCE_INCLUDE);
      Serialize (Into, "GENDER", Value.GENDER);
      Serialize (Into, "GEO", Value.GEO);
      Serialize (Into, "INTEREST", Value.INTEREST);
      Serialize (Into, "LOCALE", Value.LOCALE);
      Serialize (Into, "LOCATION", Value.LOCATION);
      Serialize (Into, "SHOPPING_RETARGETING", Value.SHOPPING_RETARGETING);
      Serialize (Into, "TARGETING_STRATEGY", Value.TARGETING_STRATEGY);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TargetingSpec_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TargetingSpec_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "AGE_BUCKET", Value.AGE_BUCKET);
      Swagger.Streams.Deserialize (Object, "APPTYPE", Value.APPTYPE);
      Swagger.Streams.Deserialize (Object, "AUDIENCE_EXCLUDE", Value.AUDIENCE_EXCLUDE);
      Swagger.Streams.Deserialize (Object, "AUDIENCE_INCLUDE", Value.AUDIENCE_INCLUDE);
      Swagger.Streams.Deserialize (Object, "GENDER", Value.GENDER);
      Swagger.Streams.Deserialize (Object, "GEO", Value.GEO);
      Swagger.Streams.Deserialize (Object, "INTEREST", Value.INTEREST);
      Swagger.Streams.Deserialize (Object, "LOCALE", Value.LOCALE);
      Swagger.Streams.Deserialize (Object, "LOCATION", Value.LOCATION);
      Deserialize (Object, "SHOPPING_RETARGETING", Value.SHOPPING_RETARGETING);
      Swagger.Streams.Deserialize (Object, "TARGETING_STRATEGY", Value.TARGETING_STRATEGY);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TargetingSpec_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TargetingSpec_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TargetingTemplateAudienceSizing_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "reach_estimate", Value.Reach_Estimate);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TargetingTemplateAudienceSizing_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TargetingTemplateAudienceSizing_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "reach_estimate", Value.Reach_Estimate);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TargetingTemplateAudienceSizing_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TargetingTemplateAudienceSizing_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TargetingTemplateKeyword_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "match_type", Value.Match_Type);
      if not Value.Value.Is_Null then
         Into.Write_Entity ("value", Value.Value);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TargetingTemplateKeyword_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TargetingTemplateKeyword_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "match_type", Value.Match_Type);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TargetingTemplateKeyword_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TargetingTemplateKeyword_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TargetingTemplateResponseData_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Auto_Targeting_Enabled.Is_Null then
         Into.Write_Entity ("auto_targeting_enabled", Value.Auto_Targeting_Enabled);
      end if;
      Serialize (Into, "targeting_attributes", Value.Targeting_Attributes);
      Serialize (Into, "placement_group", Value.Placement_Group);
      Serialize (Into, "keywords", Value.Keywords);
      Serialize (Into, "tracking_urls", Value.Tracking_Urls);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Created_Time.Is_Null then
         Into.Write_Entity ("created_time", Value.Created_Time);
      end if;
      if not Value.Updated_Time.Is_Null then
         Into.Write_Entity ("updated_time", Value.Updated_Time);
      end if;
      if not Value.Ad_Account_Id.Is_Null then
         Into.Write_Entity ("ad_account_id", Value.Ad_Account_Id);
      end if;
      if not Value.Status.Is_Null then
         Into.Write_Entity ("status", Value.Status);
      end if;
      Serialize (Into, "sizing", Value.Sizing);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TargetingTemplateResponseData_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TargetingTemplateResponseData_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "auto_targeting_enabled", Value.Auto_Targeting_Enabled);
      Deserialize (Object, "targeting_attributes", Value.Targeting_Attributes);
      Deserialize (Object, "placement_group", Value.Placement_Group);
      Deserialize (Object, "keywords", Value.Keywords);
      Deserialize (Object, "tracking_urls", Value.Tracking_Urls);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "created_time", Value.Created_Time);
      Swagger.Streams.Deserialize (Object, "updated_time", Value.Updated_Time);
      Swagger.Streams.Deserialize (Object, "ad_account_id", Value.Ad_Account_Id);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "sizing", Value.Sizing);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TargetingTemplateResponseData_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TargetingTemplateResponseData_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TargetingTemplateList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TargetingTemplateList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TargetingTemplateList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TargetingTemplateList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TargetingTemplateList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TargetingTypeFilter_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "targeting_types", Value.Targeting_Types);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TargetingTypeFilter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TargetingTypeFilter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "targeting_types", Value.Targeting_Types);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TargetingTypeFilter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TargetingTypeFilter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TemplateResponse_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Ad_Account_Id.Is_Null then
         Into.Write_Entity ("ad_account_id", Value.Ad_Account_Id);
      end if;
      Serialize (Into, "ad_account_ids", Value.Ad_Account_Ids);
      if not Value.User_Id.Is_Null then
         Into.Write_Entity ("user_id", Value.User_Id);
      end if;
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "report_start_relative_days_in_past", Value.Report_Start_Relative_Days_In_Past);
      Serialize (Into, "report_end_relative_days_in_past", Value.Report_End_Relative_Days_In_Past);
      Serialize (Into, "date_range", Value.Date_Range);
      Serialize (Into, "report_level", Value.Report_Level);
      Serialize (Into, "report_format", Value.Report_Format);
      Serialize (Into, "columns", Value.Columns);
      Serialize (Into, "granularity", Value.Granularity);
      Serialize (Into, "view_window_days", Value.View_Window_Days);
      Serialize (Into, "click_window_days", Value.Click_Window_Days);
      Serialize (Into, "engagement_window_days", Value.Engagement_Window_Days);
      if not Value.Conversion_Report_Time_Type.Is_Null then
         Into.Write_Entity ("conversion_report_time_type", Value.Conversion_Report_Time_Type);
      end if;
      Into.Write_Entity ("filters_json", Value.Filters_Json);
      if not Value.Is_Owned_By_User.Is_Null then
         Into.Write_Entity ("is_owned_by_user", Value.Is_Owned_By_User);
      end if;
      if not Value.Is_Scheduled.Is_Null then
         Into.Write_Entity ("is_scheduled", Value.Is_Scheduled);
      end if;
      if not Value.Creation_Source.Is_Null then
         Into.Write_Entity ("creation_source", Value.Creation_Source);
      end if;
      Into.Write_Entity ("is_deleted", Value.Is_Deleted);
      Serialize (Into, "updated_time", Value.Updated_Time);
      Serialize (Into, "custom_column_ids", Value.Custom_Column_Ids);
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      Serialize (Into, "ingestion_sources", Value.Ingestion_Sources);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TemplateResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TemplateResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "ad_account_id", Value.Ad_Account_Id);
      Swagger.Streams.Deserialize (Object, "ad_account_ids", Value.Ad_Account_Ids);
      Swagger.Streams.Deserialize (Object, "user_id", Value.User_Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "report_start_relative_days_in_past", Value.Report_Start_Relative_Days_In_Past);
      Swagger.Streams.Deserialize (Object, "report_end_relative_days_in_past", Value.Report_End_Relative_Days_In_Past);
      Deserialize (Object, "date_range", Value.Date_Range);
      Deserialize (Object, "report_level", Value.Report_Level);
      Deserialize (Object, "report_format", Value.Report_Format);
      Swagger.Streams.Deserialize (Object, "columns", Value.Columns);
      Deserialize (Object, "granularity", Value.Granularity);
      Swagger.Streams.Deserialize (Object, "view_window_days", Value.View_Window_Days);
      Swagger.Streams.Deserialize (Object, "click_window_days", Value.Click_Window_Days);
      Swagger.Streams.Deserialize (Object, "engagement_window_days", Value.Engagement_Window_Days);
      Swagger.Streams.Deserialize (Object, "conversion_report_time_type", Value.Conversion_Report_Time_Type);
      Swagger.Streams.Deserialize (Object, "filters_json", Value.Filters_Json);
      Swagger.Streams.Deserialize (Object, "is_owned_by_user", Value.Is_Owned_By_User);
      Swagger.Streams.Deserialize (Object, "is_scheduled", Value.Is_Scheduled);
      Swagger.Streams.Deserialize (Object, "creation_source", Value.Creation_Source);
      Swagger.Streams.Deserialize (Object, "is_deleted", Value.Is_Deleted);
      Swagger.Streams.Deserialize (Object, "updated_time", Value.Updated_Time);
      Swagger.Streams.Deserialize (Object, "custom_column_ids", Value.Custom_Column_Ids);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "ingestion_sources", Value.Ingestion_Sources);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TemplateResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TemplateResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TemplatesList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TemplatesList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TemplatesList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TemplatesList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TemplatesList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TopPinsAnalyticsResponsePinsInner_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "metrics", Value.Metrics);
      Serialize (Into, "data_status", Value.Data_Status);
      if not Value.Pin_Id.Is_Null then
         Into.Write_Entity ("pin_id", Value.Pin_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TopPinsAnalyticsResponsePinsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TopPinsAnalyticsResponsePinsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "metrics", Value.Metrics);
      Deserialize (Object, "data_status", Value.Data_Status);
      Swagger.Streams.Deserialize (Object, "pin_id", Value.Pin_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TopPinsAnalyticsResponsePinsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TopPinsAnalyticsResponsePinsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TopVideoPinsAnalyticsResponsePinsInner_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "metrics", Value.Metrics);
      Serialize (Into, "data_status", Value.Data_Status);
      if not Value.Pin_Id.Is_Null then
         Into.Write_Entity ("pin_id", Value.Pin_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TopVideoPinsAnalyticsResponsePinsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TopVideoPinsAnalyticsResponsePinsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "metrics", Value.Metrics);
      Deserialize (Object, "data_status", Value.Data_Status);
      Swagger.Streams.Deserialize (Object, "pin_id", Value.Pin_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TopVideoPinsAnalyticsResponsePinsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TopVideoPinsAnalyticsResponsePinsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TrendingKeywordsResponseTrendsInner_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Keyword.Is_Null then
         Into.Write_Entity ("keyword", Value.Keyword);
      end if;
      if not Value.Pct_Growth_Wow.Is_Null then
         Into.Write_Entity ("pct_growth_wow", Value.Pct_Growth_Wow);
      end if;
      if not Value.Pct_Growth_Mom.Is_Null then
         Into.Write_Entity ("pct_growth_mom", Value.Pct_Growth_Mom);
      end if;
      if not Value.Pct_Growth_Yoy.Is_Null then
         Into.Write_Entity ("pct_growth_yoy", Value.Pct_Growth_Yoy);
      end if;
      Serialize (Into, "time_series", Value.Time_Series);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TrendingKeywordsResponseTrendsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TrendingKeywordsResponseTrendsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "keyword", Value.Keyword);
      Swagger.Streams.Deserialize (Object, "pct_growth_wow", Value.Pct_Growth_Wow);
      Swagger.Streams.Deserialize (Object, "pct_growth_mom", Value.Pct_Growth_Mom);
      Swagger.Streams.Deserialize (Object, "pct_growth_yoy", Value.Pct_Growth_Yoy);
      Deserialize (Object, "time_series", Value.Time_Series);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TrendingKeywordsResponseTrendsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TrendingKeywordsResponseTrendsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TrendingKeywordsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "trends", Value.Trends);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TrendingKeywordsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TrendingKeywordsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "trends", Value.Trends);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TrendingKeywordsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TrendingKeywordsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateAssetGroupBodyAssetGroupsToUpdateInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("asset_group_id", Value.Asset_Group_Id);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      Serialize (Into, "asset_group_types", Value.Asset_Group_Types);
      Serialize (Into, "assets_to_add", Value.Assets_To_Add);
      Serialize (Into, "assets_to_remove", Value.Assets_To_Remove);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateAssetGroupBodyAssetGroupsToUpdateInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateAssetGroupBodyAssetGroupsToUpdateInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "asset_group_id", Value.Asset_Group_Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Deserialize (Object, "asset_group_types", Value.Asset_Group_Types);
      Swagger.Streams.Deserialize (Object, "assets_to_add", Value.Assets_To_Add);
      Swagger.Streams.Deserialize (Object, "assets_to_remove", Value.Assets_To_Remove);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateAssetGroupBodyAssetGroupsToUpdateInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateAssetGroupBodyAssetGroupsToUpdateInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateAssetGroupBody_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "asset_groups_to_update", Value.Asset_Groups_To_Update);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateAssetGroupBody_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateAssetGroupBody_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "asset_groups_to_update", Value.Asset_Groups_To_Update);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateAssetGroupBody_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateAssetGroupBody_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateInvitesResultsResponseArrayItemsInner_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "exception", Value.P_Exception);
      Serialize (Into, "invite", Value.Invite);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateInvitesResultsResponseArrayItemsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateInvitesResultsResponseArrayItemsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "exception", Value.P_Exception);
      Deserialize (Object, "invite", Value.Invite);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateInvitesResultsResponseArrayItemsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateInvitesResultsResponseArrayItemsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateInvitesResultsResponseArray_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateInvitesResultsResponseArray_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateInvitesResultsResponseArray_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateInvitesResultsResponseArray_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateInvitesResultsResponseArray_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateMemberAssetAccessBodyAccessesInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("asset_id", Value.Asset_Id);
      Into.Write_Entity ("member_id", Value.Member_Id);
      Serialize (Into, "permissions", Value.Permissions);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateMemberAssetAccessBodyAccessesInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateMemberAssetAccessBodyAccessesInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "asset_id", Value.Asset_Id);
      Swagger.Streams.Deserialize (Object, "member_id", Value.Member_Id);
      Deserialize (Object, "permissions", Value.Permissions);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateMemberAssetAccessBodyAccessesInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateMemberAssetAccessBodyAccessesInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateMemberAssetAccessBody_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "accesses", Value.Accesses);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateMemberAssetAccessBody_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateMemberAssetAccessBody_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "accesses", Value.Accesses);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateMemberAssetAccessBody_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateMemberAssetAccessBody_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateMemberAssetsResultsResponseArrayItemsInner_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "response", Value.Response);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateMemberAssetsResultsResponseArrayItemsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateMemberAssetsResultsResponseArrayItemsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "response", Value.Response);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateMemberAssetsResultsResponseArrayItemsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateMemberAssetsResultsResponseArrayItemsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateMemberAssetsResultsResponseArray_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateMemberAssetsResultsResponseArray_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateMemberAssetsResultsResponseArray_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateMemberAssetsResultsResponseArray_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateMemberAssetsResultsResponseArray_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateMemberBusinessRoleBody_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "business_role", Value.Business_Role);
      Into.Write_Entity ("member_id", Value.Member_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateMemberBusinessRoleBody_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateMemberBusinessRoleBody_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "business_role", Value.Business_Role);
      Swagger.Streams.Deserialize (Object, "member_id", Value.Member_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateMemberBusinessRoleBody_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateMemberBusinessRoleBody_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateMemberResultsResponseArray_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateMemberResultsResponseArray_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateMemberResultsResponseArray_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateMemberResultsResponseArray_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateMemberResultsResponseArray_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdatePartnerAssetAccessBodyAccessesInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("partner_id", Value.Partner_Id);
      Into.Write_Entity ("asset_id", Value.Asset_Id);
      Serialize (Into, "permissions", Value.Permissions);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdatePartnerAssetAccessBodyAccessesInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdatePartnerAssetAccessBodyAccessesInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "partner_id", Value.Partner_Id);
      Swagger.Streams.Deserialize (Object, "asset_id", Value.Asset_Id);
      Deserialize (Object, "permissions", Value.Permissions);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdatePartnerAssetAccessBodyAccessesInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdatePartnerAssetAccessBodyAccessesInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdatePartnerAssetAccessBody_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "accesses", Value.Accesses);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdatePartnerAssetAccessBody_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdatePartnerAssetAccessBody_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "accesses", Value.Accesses);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdatePartnerAssetAccessBody_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdatePartnerAssetAccessBody_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdatePartnerAssetsResultsResponseArray_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdatePartnerAssetsResultsResponseArray_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdatePartnerAssetsResultsResponseArray_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdatePartnerAssetsResultsResponseArray_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdatePartnerAssetsResultsResponseArray_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdatePartnerResultsResponseArrayItemsInner_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "exception", Value.P_Exception);
      Into.Write_Entity ("member_or_partner_id", Value.Member_Or_Partner_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdatePartnerResultsResponseArrayItemsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdatePartnerResultsResponseArrayItemsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "exception", Value.P_Exception);
      Swagger.Streams.Deserialize (Object, "member_or_partner_id", Value.Member_Or_Partner_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdatePartnerResultsResponseArrayItemsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdatePartnerResultsResponseArrayItemsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdatePartnerResultsResponseArray_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdatePartnerResultsResponseArray_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdatePartnerResultsResponseArray_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdatePartnerResultsResponseArray_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdatePartnerResultsResponseArray_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UserAccountFollowedInterests200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserAccountFollowedInterests200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UserAccountFollowedInterests200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UserAccountFollowedInterests200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UserAccountFollowedInterests200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UserFollowingGet200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserFollowingGet200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UserFollowingGet200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UserFollowingGet200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UserFollowingGet200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BusinessAssetMembersGet200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BusinessAssetMembersGet200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BusinessAssetMembersGet200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BusinessAssetMembersGet200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BusinessAssetMembersGet200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UserWebsitesGet200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserWebsitesGet200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UserWebsitesGet200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UserWebsitesGet200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UserWebsitesGet200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdArrayResponseElement_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "data", Value.Data);
      Serialize (Into, "exceptions", Value.Exceptions);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdArrayResponseElement_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdArrayResponseElement_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "data", Value.Data);
      Deserialize (Object, "exceptions", Value.Exceptions);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdArrayResponseElement_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdArrayResponseElement_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdArrayResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdArrayResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdArrayResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdArrayResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdArrayResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdsAnalyticsMetricsFilter_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "field", Value.Field);
      Serialize (Into, "operator", Value.Operator);
      Serialize (Into, "values", Value.Values);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdsAnalyticsMetricsFilter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdsAnalyticsMetricsFilter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "field", Value.Field);
      Deserialize (Object, "operator", Value.Operator);
      Swagger.Streams.Deserialize (Object, "values", Value.Values);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdsAnalyticsMetricsFilter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdsAnalyticsMetricsFilter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdvancedAuctionBidOptions_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("bid_in_micro_currency", Value.Bid_In_Micro_Currency);
      Serialize (Into, "app_type_multipliers", Value.App_Type_Multipliers);
      Serialize (Into, "placement_multipliers", Value.Placement_Multipliers);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdvancedAuctionBidOptions_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdvancedAuctionBidOptions_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "bid_in_micro_currency", Value.Bid_In_Micro_Currency);
      Deserialize (Object, "app_type_multipliers", Value.App_Type_Multipliers);
      Deserialize (Object, "placement_multipliers", Value.Placement_Multipliers);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdvancedAuctionBidOptions_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdvancedAuctionBidOptions_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdvancedAuctionItemsSubmitDeleteRecord_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("item_id", Value.Item_Id);
      Serialize (Into, "country", Value.Country);
      Serialize (Into, "language", Value.Language);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdvancedAuctionItemsSubmitDeleteRecord_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdvancedAuctionItemsSubmitDeleteRecord_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "item_id", Value.Item_Id);
      Deserialize (Object, "country", Value.Country);
      Deserialize (Object, "language", Value.Language);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdvancedAuctionItemsSubmitDeleteRecord_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdvancedAuctionItemsSubmitDeleteRecord_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdvancedAuctionKey_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("item_id", Value.Item_Id);
      Serialize (Into, "country", Value.Country);
      Serialize (Into, "language", Value.Language);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdvancedAuctionKey_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdvancedAuctionKey_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "item_id", Value.Item_Id);
      Deserialize (Object, "country", Value.Country);
      Deserialize (Object, "language", Value.Language);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdvancedAuctionKey_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdvancedAuctionKey_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AudienceCreateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Ad_Account_Id.Is_Null then
         Into.Write_Entity ("ad_account_id", Value.Ad_Account_Id);
      end if;
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "rule", Value.Rule);
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      Serialize (Into, "audience_type", Value.Audience_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AudienceCreateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AudienceCreateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "ad_account_id", Value.Ad_Account_Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "rule", Value.Rule);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Deserialize (Object, "audience_type", Value.Audience_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AudienceCreateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AudienceCreateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AudienceUpdateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Ad_Account_Id.Is_Null then
         Into.Write_Entity ("ad_account_id", Value.Ad_Account_Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "rule", Value.Rule);
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      Serialize (Into, "operation_type", Value.Operation_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AudienceUpdateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AudienceUpdateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "ad_account_id", Value.Ad_Account_Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "rule", Value.Rule);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Deserialize (Object, "operation_type", Value.Operation_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AudienceUpdateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AudienceUpdateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BaseInviteDataResponse_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Serialize (Into, "invite_data", Value.Invite_Data);
      if not Value.Is_Received_Invite.Is_Null then
         Into.Write_Entity ("is_received_invite", Value.Is_Received_Invite);
      end if;
      Serialize (Into, "user", Value.User);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BaseInviteDataResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BaseInviteDataResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Deserialize (Object, "invite_data", Value.Invite_Data);
      Swagger.Streams.Deserialize (Object, "is_received_invite", Value.Is_Received_Invite);
      Deserialize (Object, "user", Value.User);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BaseInviteDataResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BaseInviteDataResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BidFloorSpec_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "countries", Value.Countries);
      Serialize (Into, "currency", Value.Currency);
      Serialize (Into, "objective_type", Value.Objective_Type);
      Serialize (Into, "billable_event", Value.Billable_Event);
      Serialize (Into, "optimization_goal_metadata", Value.Optimization_Goal_Metadata);
      Serialize (Into, "creative_type", Value.Creative_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BidFloorSpec_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BidFloorSpec_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "countries", Value.Countries);
      Deserialize (Object, "currency", Value.Currency);
      Deserialize (Object, "objective_type", Value.Objective_Type);
      Deserialize (Object, "billable_event", Value.Billable_Event);
      Deserialize (Object, "optimization_goal_metadata", Value.Optimization_Goal_Metadata);
      Deserialize (Object, "creative_type", Value.Creative_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BidFloorSpec_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BidFloorSpec_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BidFloorRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "bid_floor_specs", Value.Bid_Floor_Specs);
      Serialize (Into, "targeting_spec", Value.Targeting_Spec);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BidFloorRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BidFloorRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "bid_floor_specs", Value.Bid_Floor_Specs);
      Deserialize (Object, "targeting_spec", Value.Targeting_Spec);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BidFloorRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BidFloorRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SearchUserBoardsGet200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SearchUserBoardsGet200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SearchUserBoardsGet200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SearchUserBoardsGet200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SearchUserBoardsGet200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BulkDownloadRequestCampaignFilter_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Start_Time.Is_Null then
         Into.Write_Entity ("start_time", Value.Start_Time);
      end if;
      if not Value.End_Time.Is_Null then
         Into.Write_Entity ("end_time", Value.End_Time);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "campaign_status", Value.Campaign_Status);
      Serialize (Into, "objective_type", Value.Objective_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BulkDownloadRequestCampaignFilter_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BulkDownloadRequestCampaignFilter_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "start_time", Value.Start_Time);
      Swagger.Streams.Deserialize (Object, "end_time", Value.End_Time);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "campaign_status", Value.Campaign_Status);
      Deserialize (Object, "objective_type", Value.Objective_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BulkDownloadRequestCampaignFilter_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BulkDownloadRequestCampaignFilter_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdGroupCreateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "status", Value.Status);
      Into.Write_Entity ("budget_in_micro_currency", Value.Budget_In_Micro_Currency);
      Into.Write_Entity ("bid_in_micro_currency", Value.Bid_In_Micro_Currency);
      Serialize (Into, "optimization_goal_metadata", Value.Optimization_Goal_Metadata);
      Serialize (Into, "budget_type", Value.Budget_Type);
      Into.Write_Entity ("start_time", Value.Start_Time);
      Into.Write_Entity ("end_time", Value.End_Time);
      Serialize (Into, "targeting_spec", Value.Targeting_Spec);
      if not Value.Lifetime_Frequency_Cap.Is_Null then
         Into.Write_Entity ("lifetime_frequency_cap", Value.Lifetime_Frequency_Cap);
      end if;
      Serialize (Into, "tracking_urls", Value.Tracking_Urls);
      if not Value.Auto_Targeting_Enabled.Is_Null then
         Into.Write_Entity ("auto_targeting_enabled", Value.Auto_Targeting_Enabled);
      end if;
      Serialize (Into, "placement_group", Value.Placement_Group);
      Serialize (Into, "pacing_delivery_type", Value.Pacing_Delivery_Type);
      Into.Write_Entity ("campaign_id", Value.Campaign_Id);
      Serialize (Into, "billable_event", Value.Billable_Event);
      Into.Write_Entity ("bid_strategy_type", Value.Bid_Strategy_Type);
      Serialize (Into, "targeting_template_ids", Value.Targeting_Template_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdGroupCreateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdGroupCreateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "budget_in_micro_currency", Value.Budget_In_Micro_Currency);
      Swagger.Streams.Deserialize (Object, "bid_in_micro_currency", Value.Bid_In_Micro_Currency);
      Deserialize (Object, "optimization_goal_metadata", Value.Optimization_Goal_Metadata);
      Deserialize (Object, "budget_type", Value.Budget_Type);
      Swagger.Streams.Deserialize (Object, "start_time", Value.Start_Time);
      Swagger.Streams.Deserialize (Object, "end_time", Value.End_Time);
      Deserialize (Object, "targeting_spec", Value.Targeting_Spec);
      Swagger.Streams.Deserialize (Object, "lifetime_frequency_cap", Value.Lifetime_Frequency_Cap);
      Deserialize (Object, "tracking_urls", Value.Tracking_Urls);
      Swagger.Streams.Deserialize (Object, "auto_targeting_enabled", Value.Auto_Targeting_Enabled);
      Deserialize (Object, "placement_group", Value.Placement_Group);
      Deserialize (Object, "pacing_delivery_type", Value.Pacing_Delivery_Type);
      Swagger.Streams.Deserialize (Object, "campaign_id", Value.Campaign_Id);
      Deserialize (Object, "billable_event", Value.Billable_Event);
      Swagger.Streams.Deserialize (Object, "bid_strategy_type", Value.Bid_Strategy_Type);
      Swagger.Streams.Deserialize (Object, "targeting_template_ids", Value.Targeting_Template_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdGroupCreateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdGroupCreateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BulkUpsertRequestCreate_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "campaigns", Value.Campaigns);
      Serialize (Into, "ad_groups", Value.Ad_Groups);
      Serialize (Into, "ads", Value.Ads);
      Serialize (Into, "product_groups", Value.Product_Groups);
      Serialize (Into, "keywords", Value.Keywords);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BulkUpsertRequestCreate_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BulkUpsertRequestCreate_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "campaigns", Value.Campaigns);
      Deserialize (Object, "ad_groups", Value.Ad_Groups);
      Deserialize (Object, "ads", Value.Ads);
      Deserialize (Object, "product_groups", Value.Product_Groups);
      Deserialize (Object, "keywords", Value.Keywords);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BulkUpsertRequestCreate_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BulkUpsertRequestCreate_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdGroupUpdateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "status", Value.Status);
      Into.Write_Entity ("budget_in_micro_currency", Value.Budget_In_Micro_Currency);
      Into.Write_Entity ("bid_in_micro_currency", Value.Bid_In_Micro_Currency);
      Serialize (Into, "optimization_goal_metadata", Value.Optimization_Goal_Metadata);
      Serialize (Into, "budget_type", Value.Budget_Type);
      Into.Write_Entity ("start_time", Value.Start_Time);
      Into.Write_Entity ("end_time", Value.End_Time);
      Serialize (Into, "targeting_spec", Value.Targeting_Spec);
      if not Value.Lifetime_Frequency_Cap.Is_Null then
         Into.Write_Entity ("lifetime_frequency_cap", Value.Lifetime_Frequency_Cap);
      end if;
      Serialize (Into, "tracking_urls", Value.Tracking_Urls);
      Into.Write_Entity ("auto_targeting_enabled", Value.Auto_Targeting_Enabled);
      Serialize (Into, "placement_group", Value.Placement_Group);
      Serialize (Into, "pacing_delivery_type", Value.Pacing_Delivery_Type);
      if not Value.Campaign_Id.Is_Null then
         Into.Write_Entity ("campaign_id", Value.Campaign_Id);
      end if;
      Serialize (Into, "billable_event", Value.Billable_Event);
      Into.Write_Entity ("bid_strategy_type", Value.Bid_Strategy_Type);
      Serialize (Into, "targeting_template_ids", Value.Targeting_Template_Ids);
      Into.Write_Entity ("id", Value.Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdGroupUpdateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdGroupUpdateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "budget_in_micro_currency", Value.Budget_In_Micro_Currency);
      Swagger.Streams.Deserialize (Object, "bid_in_micro_currency", Value.Bid_In_Micro_Currency);
      Deserialize (Object, "optimization_goal_metadata", Value.Optimization_Goal_Metadata);
      Deserialize (Object, "budget_type", Value.Budget_Type);
      Swagger.Streams.Deserialize (Object, "start_time", Value.Start_Time);
      Swagger.Streams.Deserialize (Object, "end_time", Value.End_Time);
      Deserialize (Object, "targeting_spec", Value.Targeting_Spec);
      Swagger.Streams.Deserialize (Object, "lifetime_frequency_cap", Value.Lifetime_Frequency_Cap);
      Deserialize (Object, "tracking_urls", Value.Tracking_Urls);
      Swagger.Streams.Deserialize (Object, "auto_targeting_enabled", Value.Auto_Targeting_Enabled);
      Deserialize (Object, "placement_group", Value.Placement_Group);
      Deserialize (Object, "pacing_delivery_type", Value.Pacing_Delivery_Type);
      Swagger.Streams.Deserialize (Object, "campaign_id", Value.Campaign_Id);
      Deserialize (Object, "billable_event", Value.Billable_Event);
      Swagger.Streams.Deserialize (Object, "bid_strategy_type", Value.Bid_Strategy_Type);
      Swagger.Streams.Deserialize (Object, "targeting_template_ids", Value.Targeting_Template_Ids);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdGroupUpdateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdGroupUpdateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BulkUpsertRequestUpdate_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "campaigns", Value.Campaigns);
      Serialize (Into, "ad_groups", Value.Ad_Groups);
      Serialize (Into, "ads", Value.Ads);
      Serialize (Into, "product_groups", Value.Product_Groups);
      Serialize (Into, "keywords", Value.Keywords);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BulkUpsertRequestUpdate_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BulkUpsertRequestUpdate_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "campaigns", Value.Campaigns);
      Deserialize (Object, "ad_groups", Value.Ad_Groups);
      Deserialize (Object, "ads", Value.Ads);
      Deserialize (Object, "product_groups", Value.Product_Groups);
      Deserialize (Object, "keywords", Value.Keywords);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BulkUpsertRequestUpdate_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BulkUpsertRequestUpdate_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BulkUpsertRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "create", Value.Create);
      Serialize (Into, "update", Value.Update);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BulkUpsertRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BulkUpsertRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "create", Value.Create);
      Deserialize (Object, "update", Value.Update);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BulkUpsertRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BulkUpsertRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BusinessMemberAssetsSummary_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "ad_accounts", Value.Ad_Accounts);
      Serialize (Into, "profiles", Value.Profiles);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BusinessMemberAssetsSummary_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BusinessMemberAssetsSummary_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "ad_accounts", Value.Ad_Accounts);
      Deserialize (Object, "profiles", Value.Profiles);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BusinessMemberAssetsSummary_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BusinessMemberAssetsSummary_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CampaignCommon_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Ad_Account_Id.Is_Null then
         Into.Write_Entity ("ad_account_id", Value.Ad_Account_Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "status", Value.Status);
      Into.Write_Entity ("lifetime_spend_cap", Value.Lifetime_Spend_Cap);
      Into.Write_Entity ("daily_spend_cap", Value.Daily_Spend_Cap);
      Into.Write_Entity ("order_line_id", Value.Order_Line_Id);
      Serialize (Into, "tracking_urls", Value.Tracking_Urls);
      Into.Write_Entity ("start_time", Value.Start_Time);
      Into.Write_Entity ("end_time", Value.End_Time);
      Into.Write_Entity ("is_flexible_daily_budgets", Value.Is_Flexible_Daily_Budgets);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CampaignCommon_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CampaignCommon_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "ad_account_id", Value.Ad_Account_Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "lifetime_spend_cap", Value.Lifetime_Spend_Cap);
      Swagger.Streams.Deserialize (Object, "daily_spend_cap", Value.Daily_Spend_Cap);
      Swagger.Streams.Deserialize (Object, "order_line_id", Value.Order_Line_Id);
      Deserialize (Object, "tracking_urls", Value.Tracking_Urls);
      Swagger.Streams.Deserialize (Object, "start_time", Value.Start_Time);
      Swagger.Streams.Deserialize (Object, "end_time", Value.End_Time);
      Swagger.Streams.Deserialize (Object, "is_flexible_daily_budgets", Value.Is_Flexible_Daily_Budgets);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CampaignCommon_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CampaignCommon_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CampaignCreateCommon_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Ad_Account_Id.Is_Null then
         Into.Write_Entity ("ad_account_id", Value.Ad_Account_Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "status", Value.Status);
      Into.Write_Entity ("lifetime_spend_cap", Value.Lifetime_Spend_Cap);
      Into.Write_Entity ("daily_spend_cap", Value.Daily_Spend_Cap);
      Into.Write_Entity ("order_line_id", Value.Order_Line_Id);
      Serialize (Into, "tracking_urls", Value.Tracking_Urls);
      Into.Write_Entity ("start_time", Value.Start_Time);
      Into.Write_Entity ("end_time", Value.End_Time);
      Into.Write_Entity ("is_flexible_daily_budgets", Value.Is_Flexible_Daily_Budgets);
      Into.Write_Entity ("default_ad_group_budget_in_micro_currency", Value.Default_Ad_Group_Budget_In_Micro_Currency);
      Into.Write_Entity ("is_automated_campaign", Value.Is_Automated_Campaign);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CampaignCreateCommon_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CampaignCreateCommon_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "ad_account_id", Value.Ad_Account_Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "lifetime_spend_cap", Value.Lifetime_Spend_Cap);
      Swagger.Streams.Deserialize (Object, "daily_spend_cap", Value.Daily_Spend_Cap);
      Swagger.Streams.Deserialize (Object, "order_line_id", Value.Order_Line_Id);
      Deserialize (Object, "tracking_urls", Value.Tracking_Urls);
      Swagger.Streams.Deserialize (Object, "start_time", Value.Start_Time);
      Swagger.Streams.Deserialize (Object, "end_time", Value.End_Time);
      Swagger.Streams.Deserialize (Object, "is_flexible_daily_budgets", Value.Is_Flexible_Daily_Budgets);
      Swagger.Streams.Deserialize (Object, "default_ad_group_budget_in_micro_currency", Value.Default_Ad_Group_Budget_In_Micro_Currency);
      Swagger.Streams.Deserialize (Object, "is_automated_campaign", Value.Is_Automated_Campaign);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CampaignCreateCommon_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CampaignCreateCommon_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsCreativeAssetsItemErrorResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      if not Value.Creative_Assets_Id.Is_Null then
         Into.Write_Entity ("creative_assets_id", Value.Creative_Assets_Id);
      end if;
      Serialize (Into, "errors", Value.Errors);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsCreativeAssetsItemErrorResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsCreativeAssetsItemErrorResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "creative_assets_id", Value.Creative_Assets_Id);
      Deserialize (Object, "errors", Value.Errors);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsCreativeAssetsItemErrorResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsCreativeAssetsItemErrorResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsCreativeAssetsProduct_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Serialize (Into, "metadata", Value.Metadata);
      Serialize (Into, "pin", Value.Pin);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsCreativeAssetsProduct_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsCreativeAssetsProduct_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Deserialize (Object, "metadata", Value.Metadata);
      Deserialize (Object, "pin", Value.Pin);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsCreativeAssetsProduct_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsCreativeAssetsProduct_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsFeedValidationDetails_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "errors", Value.Errors);
      Serialize (Into, "warnings", Value.Warnings);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsFeedValidationDetails_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsFeedValidationDetails_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "errors", Value.Errors);
      Deserialize (Object, "warnings", Value.Warnings);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsFeedValidationDetails_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsFeedValidationDetails_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsHotelItemErrorResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      if not Value.Hotel_Id.Is_Null then
         Into.Write_Entity ("hotel_id", Value.Hotel_Id);
      end if;
      Serialize (Into, "errors", Value.Errors);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsHotelItemErrorResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsHotelItemErrorResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "hotel_id", Value.Hotel_Id);
      Deserialize (Object, "errors", Value.Errors);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsHotelItemErrorResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsHotelItemErrorResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsHotelProduct_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Serialize (Into, "metadata", Value.Metadata);
      Serialize (Into, "pin", Value.Pin);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsHotelProduct_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsHotelProduct_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Deserialize (Object, "metadata", Value.Metadata);
      Deserialize (Object, "pin", Value.Pin);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsHotelProduct_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsHotelProduct_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsReportParameters_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      Serialize (Into, "report", Value.Report);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsReportParameters_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsReportParameters_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Deserialize (Object, "report", Value.Report);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsReportParameters_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsReportParameters_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsRetailBatchRequestItemsInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("item_id", Value.Item_Id);
      Into.Write_Entity ("operation", Value.Operation);
      Serialize (Into, "attributes", Value.Attributes);
      Serialize (Into, "update_mask", Value.Update_Mask);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsRetailBatchRequestItemsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsRetailBatchRequestItemsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "item_id", Value.Item_Id);
      Swagger.Streams.Deserialize (Object, "operation", Value.Operation);
      Deserialize (Object, "attributes", Value.Attributes);
      Deserialize (Object, "update_mask", Value.Update_Mask);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsRetailBatchRequestItemsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsRetailBatchRequestItemsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsRetailItemErrorResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      if not Value.Item_Id.Is_Null then
         Into.Write_Entity ("item_id", Value.Item_Id);
      end if;
      Serialize (Into, "errors", Value.Errors);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsRetailItemErrorResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsRetailItemErrorResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "item_id", Value.Item_Id);
      Deserialize (Object, "errors", Value.Errors);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsRetailItemErrorResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsRetailItemErrorResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsRetailProductMetadata_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("item_id", Value.Item_Id);
      Into.Write_Entity ("item_group_id", Value.Item_Group_Id);
      Serialize (Into, "availability", Value.Availability);
      Serialize (Into, "price", Value.Price);
      Serialize (Into, "sale_price", Value.Sale_Price);
      Serialize (Into, "currency", Value.Currency);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsRetailProductMetadata_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsRetailProductMetadata_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "item_id", Value.Item_Id);
      Swagger.Streams.Deserialize (Object, "item_group_id", Value.Item_Group_Id);
      Deserialize (Object, "availability", Value.Availability);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "sale_price", Value.Sale_Price);
      Deserialize (Object, "currency", Value.Currency);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsRetailProductMetadata_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsRetailProductMetadata_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsRetailProduct_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Serialize (Into, "metadata", Value.Metadata);
      Serialize (Into, "pin", Value.Pin);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsRetailProduct_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsRetailProduct_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Deserialize (Object, "metadata", Value.Metadata);
      Deserialize (Object, "pin", Value.Pin);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsRetailProduct_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsRetailProduct_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsUpdateRetailItem_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("item_id", Value.Item_Id);
      Into.Write_Entity ("operation", Value.Operation);
      Serialize (Into, "attributes", Value.Attributes);
      Serialize (Into, "update_mask", Value.Update_Mask);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsUpdateRetailItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsUpdateRetailItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "item_id", Value.Item_Id);
      Swagger.Streams.Deserialize (Object, "operation", Value.Operation);
      Deserialize (Object, "attributes", Value.Attributes);
      Deserialize (Object, "update_mask", Value.Update_Mask);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsUpdateRetailItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsUpdateRetailItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CreativeAssetsProcessingRecord_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Creative_Assets_Id.Is_Null then
         Into.Write_Entity ("creative_assets_id", Value.Creative_Assets_Id);
      end if;
      Serialize (Into, "errors", Value.Errors);
      Serialize (Into, "warnings", Value.Warnings);
      Serialize (Into, "status", Value.Status);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CreativeAssetsProcessingRecord_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CreativeAssetsProcessingRecord_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "creative_assets_id", Value.Creative_Assets_Id);
      Deserialize (Object, "errors", Value.Errors);
      Deserialize (Object, "warnings", Value.Warnings);
      Deserialize (Object, "status", Value.Status);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CreativeAssetsProcessingRecord_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CreativeAssetsProcessingRecord_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.HotelProcessingRecord_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Hotel_Id.Is_Null then
         Into.Write_Entity ("hotel_id", Value.Hotel_Id);
      end if;
      Serialize (Into, "errors", Value.Errors);
      Serialize (Into, "warnings", Value.Warnings);
      Serialize (Into, "status", Value.Status);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in HotelProcessingRecord_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.HotelProcessingRecord_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "hotel_id", Value.Hotel_Id);
      Deserialize (Object, "errors", Value.Errors);
      Deserialize (Object, "warnings", Value.Warnings);
      Deserialize (Object, "status", Value.Status);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out HotelProcessingRecord_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.HotelProcessingRecord_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.InviteAssetsSummary_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "ad_accounts", Value.Ad_Accounts);
      Serialize (Into, "profiles", Value.Profiles);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InviteAssetsSummary_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.InviteAssetsSummary_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "ad_accounts", Value.Ad_Accounts);
      Deserialize (Object, "profiles", Value.Profiles);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out InviteAssetsSummary_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.InviteAssetsSummary_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.InviteBusinessRoleBinding_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Created_By_Business_Id.Is_Null then
         Into.Write_Entity ("created_by_business_id", Value.Created_By_Business_Id);
      end if;
      if not Value.Created_By_User_Id.Is_Null then
         Into.Write_Entity ("created_by_user_id", Value.Created_By_User_Id);
      end if;
      Serialize (Into, "user", Value.User);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Serialize (Into, "invite_data", Value.Invite_Data);
      if not Value.Is_Received_Invite.Is_Null then
         Into.Write_Entity ("is_received_invite", Value.Is_Received_Invite);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InviteBusinessRoleBinding_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.InviteBusinessRoleBinding_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "created_by_business_id", Value.Created_By_Business_Id);
      Swagger.Streams.Deserialize (Object, "created_by_user_id", Value.Created_By_User_Id);
      Deserialize (Object, "user", Value.User);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Deserialize (Object, "invite_data", Value.Invite_Data);
      Swagger.Streams.Deserialize (Object, "is_received_invite", Value.Is_Received_Invite);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out InviteBusinessRoleBinding_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.InviteBusinessRoleBinding_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ItemBatchRecord_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Item_Id.Is_Null then
         Into.Write_Entity ("item_id", Value.Item_Id);
      end if;
      Serialize (Into, "attributes", Value.Attributes);
      Serialize (Into, "update_mask", Value.Update_Mask);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ItemBatchRecord_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ItemBatchRecord_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "item_id", Value.Item_Id);
      Deserialize (Object, "attributes", Value.Attributes);
      Deserialize (Object, "update_mask", Value.Update_Mask);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ItemBatchRecord_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ItemBatchRecord_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ItemProcessingRecord_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Item_Id.Is_Null then
         Into.Write_Entity ("item_id", Value.Item_Id);
      end if;
      Serialize (Into, "errors", Value.Errors);
      Serialize (Into, "warnings", Value.Warnings);
      Serialize (Into, "status", Value.Status);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ItemProcessingRecord_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ItemProcessingRecord_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "item_id", Value.Item_Id);
      Deserialize (Object, "errors", Value.Errors);
      Deserialize (Object, "warnings", Value.Warnings);
      Deserialize (Object, "status", Value.Status);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ItemProcessingRecord_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ItemProcessingRecord_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ItemResponseAnyOf1_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      if not Value.Item_Id.Is_Null then
         Into.Write_Entity ("item_id", Value.Item_Id);
      end if;
      Serialize (Into, "errors", Value.Errors);
      if not Value.Hotel_Id.Is_Null then
         Into.Write_Entity ("hotel_id", Value.Hotel_Id);
      end if;
      if not Value.Creative_Assets_Id.Is_Null then
         Into.Write_Entity ("creative_assets_id", Value.Creative_Assets_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ItemResponseAnyOf1_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ItemResponseAnyOf1_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "item_id", Value.Item_Id);
      Deserialize (Object, "errors", Value.Errors);
      Swagger.Streams.Deserialize (Object, "hotel_id", Value.Hotel_Id);
      Swagger.Streams.Deserialize (Object, "creative_assets_id", Value.Creative_Assets_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ItemResponseAnyOf1_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ItemResponseAnyOf1_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ItemUpdateBatchRecord_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Item_Id.Is_Null then
         Into.Write_Entity ("item_id", Value.Item_Id);
      end if;
      Serialize (Into, "attributes", Value.Attributes);
      Serialize (Into, "update_mask", Value.Update_Mask);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ItemUpdateBatchRecord_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ItemUpdateBatchRecord_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "item_id", Value.Item_Id);
      Deserialize (Object, "attributes", Value.Attributes);
      Deserialize (Object, "update_mask", Value.Update_Mask);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ItemUpdateBatchRecord_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ItemUpdateBatchRecord_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.KeywordsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "errors", Value.Errors);
      Serialize (Into, "keywords", Value.Keywords);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in KeywordsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.KeywordsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "errors", Value.Errors);
      Deserialize (Object, "keywords", Value.Keywords);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out KeywordsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.KeywordsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.LeadFormQuestion_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "question_type", Value.Question_Type);
      Serialize (Into, "custom_question_field_type", Value.Custom_Question_Field_Type);
      Into.Write_Entity ("custom_question_label", Value.Custom_Question_Label);
      Serialize (Into, "custom_question_options", Value.Custom_Question_Options);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in LeadFormQuestion_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.LeadFormQuestion_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "question_type", Value.Question_Type);
      Deserialize (Object, "custom_question_field_type", Value.Custom_Question_Field_Type);
      Swagger.Streams.Deserialize (Object, "custom_question_label", Value.Custom_Question_Label);
      Swagger.Streams.Deserialize (Object, "custom_question_options", Value.Custom_Question_Options);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out LeadFormQuestion_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.LeadFormQuestion_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.MediaUpload_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Media_Id.Is_Null then
         Into.Write_Entity ("media_id", Value.Media_Id);
      end if;
      Serialize (Into, "media_type", Value.Media_Type);
      if not Value.Upload_Url.Is_Null then
         Into.Write_Entity ("upload_url", Value.Upload_Url);
      end if;
      Serialize (Into, "upload_parameters", Value.Upload_Parameters);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MediaUpload_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.MediaUpload_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "media_id", Value.Media_Id);
      Deserialize (Object, "media_type", Value.Media_Type);
      Swagger.Streams.Deserialize (Object, "upload_url", Value.Upload_Url);
      Deserialize (Object, "upload_parameters", Value.Upload_Parameters);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out MediaUpload_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.MediaUpload_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderLineResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "errors", Value.Errors);
      Serialize (Into, "order_line", Value.Order_Line);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderLineResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderLineResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "errors", Value.Errors);
      Deserialize (Object, "order_line", Value.Order_Line);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderLineResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderLineResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.QuizPinData_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "questions", Value.Questions);
      Serialize (Into, "results", Value.Results);
      if not Value.Tie_Breaker_Type.Is_Null then
         Into.Write_Entity ("tie_breaker_type", Value.Tie_Breaker_Type);
      end if;
      Serialize (Into, "tie_breaker_custom_result", Value.Tie_Breaker_Custom_Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in QuizPinData_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.QuizPinData_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "questions", Value.Questions);
      Deserialize (Object, "results", Value.Results);
      Swagger.Streams.Deserialize (Object, "tie_breaker_type", Value.Tie_Breaker_Type);
      Deserialize (Object, "tie_breaker_custom_result", Value.Tie_Breaker_Custom_Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out QuizPinData_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.QuizPinData_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SSIOAccountResponse_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Eligible.Is_Null then
         Into.Write_Entity ("eligible", Value.Eligible);
      end if;
      if not Value.Can_Edit.Is_Null then
         Into.Write_Entity ("can_edit", Value.Can_Edit);
      end if;
      Serialize (Into, "billto_infos", Value.Billto_Infos);
      if not Value.Currency.Is_Null then
         Into.Write_Entity ("currency", Value.Currency);
      end if;
      Serialize (Into, "pmp_names", Value.Pmp_Names);
      if not Value.Error.Is_Null then
         Into.Write_Entity ("error", Value.Error);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SSIOAccountResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SSIOAccountResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "eligible", Value.Eligible);
      Swagger.Streams.Deserialize (Object, "can_edit", Value.Can_Edit);
      Deserialize (Object, "billto_infos", Value.Billto_Infos);
      Swagger.Streams.Deserialize (Object, "currency", Value.Currency);
      Deserialize (Object, "pmp_names", Value.Pmp_Names);
      Swagger.Streams.Deserialize (Object, "error", Value.Error);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SSIOAccountResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SSIOAccountResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TopPinsAnalyticsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "date_availability", Value.Date_Availability);
      Serialize (Into, "pins", Value.Pins);
      if not Value.Sort_By.Is_Null then
         Into.Write_Entity ("sort_by", Value.Sort_By);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TopPinsAnalyticsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TopPinsAnalyticsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "date_availability", Value.Date_Availability);
      Deserialize (Object, "pins", Value.Pins);
      Swagger.Streams.Deserialize (Object, "sort_by", Value.Sort_By);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TopPinsAnalyticsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TopPinsAnalyticsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TopVideoPinsAnalyticsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "date_availability", Value.Date_Availability);
      Serialize (Into, "pins", Value.Pins);
      if not Value.Sort_By.Is_Null then
         Into.Write_Entity ("sort_by", Value.Sort_By);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TopVideoPinsAnalyticsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TopVideoPinsAnalyticsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "date_availability", Value.Date_Availability);
      Deserialize (Object, "pins", Value.Pins);
      Swagger.Streams.Deserialize (Object, "sort_by", Value.Sort_By);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TopVideoPinsAnalyticsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TopVideoPinsAnalyticsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateAssetGroupResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "updated_asset_groups", Value.Updated_Asset_Groups);
      Serialize (Into, "exceptions", Value.Exceptions);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateAssetGroupResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateAssetGroupResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "updated_asset_groups", Value.Updated_Asset_Groups);
      Deserialize (Object, "exceptions", Value.Exceptions);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateAssetGroupResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateAssetGroupResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdGroupAudienceSizingRequest_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Auto_Targeting_Enabled.Is_Null then
         Into.Write_Entity ("auto_targeting_enabled", Value.Auto_Targeting_Enabled);
      end if;
      Serialize (Into, "placement_group", Value.Placement_Group);
      Serialize (Into, "creative_types", Value.Creative_Types);
      Serialize (Into, "targeting_spec", Value.Targeting_Spec);
      Serialize (Into, "product_group_ids", Value.Product_Group_Ids);
      Serialize (Into, "keywords", Value.Keywords);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdGroupAudienceSizingRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdGroupAudienceSizingRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "auto_targeting_enabled", Value.Auto_Targeting_Enabled);
      Deserialize (Object, "placement_group", Value.Placement_Group);
      Swagger.Streams.Deserialize (Object, "creative_types", Value.Creative_Types);
      Deserialize (Object, "targeting_spec", Value.Targeting_Spec);
      Swagger.Streams.Deserialize (Object, "product_group_ids", Value.Product_Group_Ids);
      Deserialize (Object, "keywords", Value.Keywords);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdGroupAudienceSizingRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdGroupAudienceSizingRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AudienceCreateCustomRequest_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Ad_Account_Id.Is_Null then
         Into.Write_Entity ("ad_account_id", Value.Ad_Account_Id);
      end if;
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "rule", Value.Rule);
      Serialize (Into, "sharing_type", Value.Sharing_Type);
      Serialize (Into, "data_party", Value.Data_Party);
      if not Value.Category.Is_Null then
         Into.Write_Entity ("category", Value.Category);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AudienceCreateCustomRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AudienceCreateCustomRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "ad_account_id", Value.Ad_Account_Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "rule", Value.Rule);
      Deserialize (Object, "sharing_type", Value.Sharing_Type);
      Deserialize (Object, "data_party", Value.Data_Party);
      Swagger.Streams.Deserialize (Object, "category", Value.Category);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AudienceCreateCustomRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AudienceCreateCustomRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AudienceInsightsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "categories", Value.Categories);
      Serialize (Into, "demographics", Value.Demographics);
      Serialize (Into, "type", Value.P_Type);
      Into.Write_Entity ("date", Value.Date);
      if not Value.Size.Is_Null then
         Into.Write_Entity ("size", Value.Size);
      end if;
      if not Value.Size_Is_Upper_Bound.Is_Null then
         Into.Write_Entity ("size_is_upper_bound", Value.Size_Is_Upper_Bound);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AudienceInsightsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AudienceInsightsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "categories", Value.Categories);
      Deserialize (Object, "demographics", Value.Demographics);
      Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "date", Value.Date);
      Swagger.Streams.Deserialize (Object, "size", Value.Size);
      Swagger.Streams.Deserialize (Object, "size_is_upper_bound", Value.Size_Is_Upper_Bound);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AudienceInsightsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AudienceInsightsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BulkDownloadRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "entity_types", Value.Entity_Types);
      Serialize (Into, "entity_ids", Value.Entity_Ids);
      if not Value.Updated_Since.Is_Null then
         Into.Write_Entity ("updated_since", Value.Updated_Since);
      end if;
      Serialize (Into, "campaign_filter", Value.Campaign_Filter);
      Serialize (Into, "output_format", Value.Output_Format);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BulkDownloadRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BulkDownloadRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "entity_types", Value.Entity_Types);
      Swagger.Streams.Deserialize (Object, "entity_ids", Value.Entity_Ids);
      Swagger.Streams.Deserialize (Object, "updated_since", Value.Updated_Since);
      Deserialize (Object, "campaign_filter", Value.Campaign_Filter);
      Deserialize (Object, "output_format", Value.Output_Format);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BulkDownloadRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BulkDownloadRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CampaignCreateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("ad_account_id", Value.Ad_Account_Id);
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "status", Value.Status);
      Into.Write_Entity ("lifetime_spend_cap", Value.Lifetime_Spend_Cap);
      Into.Write_Entity ("daily_spend_cap", Value.Daily_Spend_Cap);
      Into.Write_Entity ("order_line_id", Value.Order_Line_Id);
      Serialize (Into, "tracking_urls", Value.Tracking_Urls);
      Into.Write_Entity ("start_time", Value.Start_Time);
      Into.Write_Entity ("end_time", Value.End_Time);
      Into.Write_Entity ("is_flexible_daily_budgets", Value.Is_Flexible_Daily_Budgets);
      Into.Write_Entity ("default_ad_group_budget_in_micro_currency", Value.Default_Ad_Group_Budget_In_Micro_Currency);
      Into.Write_Entity ("is_automated_campaign", Value.Is_Automated_Campaign);
      Serialize (Into, "objective_type", Value.Objective_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CampaignCreateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CampaignCreateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "ad_account_id", Value.Ad_Account_Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "lifetime_spend_cap", Value.Lifetime_Spend_Cap);
      Swagger.Streams.Deserialize (Object, "daily_spend_cap", Value.Daily_Spend_Cap);
      Swagger.Streams.Deserialize (Object, "order_line_id", Value.Order_Line_Id);
      Deserialize (Object, "tracking_urls", Value.Tracking_Urls);
      Swagger.Streams.Deserialize (Object, "start_time", Value.Start_Time);
      Swagger.Streams.Deserialize (Object, "end_time", Value.End_Time);
      Swagger.Streams.Deserialize (Object, "is_flexible_daily_budgets", Value.Is_Flexible_Daily_Budgets);
      Swagger.Streams.Deserialize (Object, "default_ad_group_budget_in_micro_currency", Value.Default_Ad_Group_Budget_In_Micro_Currency);
      Swagger.Streams.Deserialize (Object, "is_automated_campaign", Value.Is_Automated_Campaign);
      Deserialize (Object, "objective_type", Value.Objective_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CampaignCreateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CampaignCreateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CampaignUpdateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("ad_account_id", Value.Ad_Account_Id);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "status", Value.Status);
      Into.Write_Entity ("lifetime_spend_cap", Value.Lifetime_Spend_Cap);
      Into.Write_Entity ("daily_spend_cap", Value.Daily_Spend_Cap);
      Into.Write_Entity ("order_line_id", Value.Order_Line_Id);
      Serialize (Into, "tracking_urls", Value.Tracking_Urls);
      Into.Write_Entity ("start_time", Value.Start_Time);
      Into.Write_Entity ("end_time", Value.End_Time);
      Into.Write_Entity ("is_flexible_daily_budgets", Value.Is_Flexible_Daily_Budgets);
      Into.Write_Entity ("default_ad_group_budget_in_micro_currency", Value.Default_Ad_Group_Budget_In_Micro_Currency);
      Into.Write_Entity ("is_automated_campaign", Value.Is_Automated_Campaign);
      Into.Write_Entity ("is_campaign_budget_optimization", Value.Is_Campaign_Budget_Optimization);
      Serialize (Into, "objective_type", Value.Objective_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CampaignUpdateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CampaignUpdateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "ad_account_id", Value.Ad_Account_Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "lifetime_spend_cap", Value.Lifetime_Spend_Cap);
      Swagger.Streams.Deserialize (Object, "daily_spend_cap", Value.Daily_Spend_Cap);
      Swagger.Streams.Deserialize (Object, "order_line_id", Value.Order_Line_Id);
      Deserialize (Object, "tracking_urls", Value.Tracking_Urls);
      Swagger.Streams.Deserialize (Object, "start_time", Value.Start_Time);
      Swagger.Streams.Deserialize (Object, "end_time", Value.End_Time);
      Swagger.Streams.Deserialize (Object, "is_flexible_daily_budgets", Value.Is_Flexible_Daily_Budgets);
      Swagger.Streams.Deserialize (Object, "default_ad_group_budget_in_micro_currency", Value.Default_Ad_Group_Budget_In_Micro_Currency);
      Swagger.Streams.Deserialize (Object, "is_automated_campaign", Value.Is_Automated_Campaign);
      Swagger.Streams.Deserialize (Object, "is_campaign_budget_optimization", Value.Is_Campaign_Budget_Optimization);
      Deserialize (Object, "objective_type", Value.Objective_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CampaignUpdateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CampaignUpdateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsCreativeAssetsBatchRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Serialize (Into, "country", Value.Country);
      Serialize (Into, "language", Value.Language);
      Serialize (Into, "items", Value.Items);
      if not Value.Catalog_Id.Is_Null then
         Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsCreativeAssetsBatchRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsCreativeAssetsBatchRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Deserialize (Object, "country", Value.Country);
      Deserialize (Object, "language", Value.Language);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsCreativeAssetsBatchRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsCreativeAssetsBatchRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsCreativeAssetsItemResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      if not Value.Creative_Assets_Id.Is_Null then
         Into.Write_Entity ("creative_assets_id", Value.Creative_Assets_Id);
      end if;
      Serialize (Into, "pins", Value.Pins);
      Serialize (Into, "attributes", Value.Attributes);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsCreativeAssetsItemResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsCreativeAssetsItemResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "creative_assets_id", Value.Creative_Assets_Id);
      Deserialize (Object, "pins", Value.Pins);
      Deserialize (Object, "attributes", Value.Attributes);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsCreativeAssetsItemResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsCreativeAssetsItemResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsCreativeAssetsItemsBatch_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Batch_Id.Is_Null then
         Into.Write_Entity ("batch_id", Value.Batch_Id);
      end if;
      if not Value.Created_Time.Is_Null then
         Into.Write_Entity ("created_time", Value.Created_Time);
      end if;
      Into.Write_Entity ("completed_time", Value.Completed_Time);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsCreativeAssetsItemsBatch_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsCreativeAssetsItemsBatch_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "batch_id", Value.Batch_Id);
      Swagger.Streams.Deserialize (Object, "created_time", Value.Created_Time);
      Swagger.Streams.Deserialize (Object, "completed_time", Value.Completed_Time);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsCreativeAssetsItemsBatch_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsCreativeAssetsItemsBatch_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsFeedIngestionDetails_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "errors", Value.Errors);
      Serialize (Into, "info", Value.Info);
      Serialize (Into, "warnings", Value.Warnings);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsFeedIngestionDetails_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsFeedIngestionDetails_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "errors", Value.Errors);
      Deserialize (Object, "info", Value.Info);
      Deserialize (Object, "warnings", Value.Warnings);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsFeedIngestionDetails_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsFeedIngestionDetails_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsHotelBatchRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Serialize (Into, "country", Value.Country);
      Serialize (Into, "language", Value.Language);
      Serialize (Into, "items", Value.Items);
      if not Value.Catalog_Id.Is_Null then
         Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsHotelBatchRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsHotelBatchRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Deserialize (Object, "country", Value.Country);
      Deserialize (Object, "language", Value.Language);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsHotelBatchRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsHotelBatchRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsHotelItemResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      if not Value.Hotel_Id.Is_Null then
         Into.Write_Entity ("hotel_id", Value.Hotel_Id);
      end if;
      Serialize (Into, "pins", Value.Pins);
      Serialize (Into, "attributes", Value.Attributes);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsHotelItemResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsHotelItemResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "hotel_id", Value.Hotel_Id);
      Deserialize (Object, "pins", Value.Pins);
      Deserialize (Object, "attributes", Value.Attributes);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsHotelItemResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsHotelItemResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsHotelItemsBatch_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Batch_Id.Is_Null then
         Into.Write_Entity ("batch_id", Value.Batch_Id);
      end if;
      if not Value.Created_Time.Is_Null then
         Into.Write_Entity ("created_time", Value.Created_Time);
      end if;
      Into.Write_Entity ("completed_time", Value.Completed_Time);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsHotelItemsBatch_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsHotelItemsBatch_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "batch_id", Value.Batch_Id);
      Swagger.Streams.Deserialize (Object, "created_time", Value.Created_Time);
      Swagger.Streams.Deserialize (Object, "completed_time", Value.Completed_Time);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsHotelItemsBatch_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsHotelItemsBatch_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsItemsBatch_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      if not Value.Batch_Id.Is_Null then
         Into.Write_Entity ("batch_id", Value.Batch_Id);
      end if;
      if not Value.Created_Time.Is_Null then
         Into.Write_Entity ("created_time", Value.Created_Time);
      end if;
      Into.Write_Entity ("completed_time", Value.Completed_Time);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsItemsBatch_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsItemsBatch_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "batch_id", Value.Batch_Id);
      Swagger.Streams.Deserialize (Object, "created_time", Value.Created_Time);
      Swagger.Streams.Deserialize (Object, "completed_time", Value.Completed_Time);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsItemsBatch_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsItemsBatch_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsItemsRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "country", Value.Country);
      Serialize (Into, "language", Value.Language);
      Serialize (Into, "filters", Value.Filters);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsItemsRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsItemsRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "country", Value.Country);
      Deserialize (Object, "language", Value.Language);
      Deserialize (Object, "filters", Value.Filters);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsItemsRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsItemsRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsListProductsByFilterRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("feed_id", Value.Feed_Id);
      Serialize (Into, "filters", Value.Filters);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      Serialize (Into, "country", Value.Country);
      Serialize (Into, "locale", Value.Locale);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsListProductsByFilterRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsListProductsByFilterRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "feed_id", Value.Feed_Id);
      Deserialize (Object, "filters", Value.Filters);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
      Deserialize (Object, "country", Value.Country);
      Deserialize (Object, "locale", Value.Locale);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsListProductsByFilterRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsListProductsByFilterRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsProductGroupsUpdateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Into.Write_Entity ("description", Value.Description);
      if not Value.Is_Featured.Is_Null then
         Into.Write_Entity ("is_featured", Value.Is_Featured);
      end if;
      Serialize (Into, "filters", Value.Filters);
      if not Value.Catalog_Type.Is_Null then
         Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      end if;
      Serialize (Into, "country", Value.Country);
      Serialize (Into, "locale", Value.Locale);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsProductGroupsUpdateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsProductGroupsUpdateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "is_featured", Value.Is_Featured);
      Deserialize (Object, "filters", Value.Filters);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Deserialize (Object, "country", Value.Country);
      Deserialize (Object, "locale", Value.Locale);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsProductGroupsUpdateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsProductGroupsUpdateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsRetailBatchRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Serialize (Into, "country", Value.Country);
      Serialize (Into, "language", Value.Language);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsRetailBatchRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsRetailBatchRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Deserialize (Object, "country", Value.Country);
      Deserialize (Object, "language", Value.Language);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsRetailBatchRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsRetailBatchRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsRetailItemResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      if not Value.Item_Id.Is_Null then
         Into.Write_Entity ("item_id", Value.Item_Id);
      end if;
      Serialize (Into, "pins", Value.Pins);
      Serialize (Into, "attributes", Value.Attributes);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsRetailItemResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsRetailItemResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "item_id", Value.Item_Id);
      Deserialize (Object, "pins", Value.Pins);
      Deserialize (Object, "attributes", Value.Attributes);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsRetailItemResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsRetailItemResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsRetailItemsBatch_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Batch_Id.Is_Null then
         Into.Write_Entity ("batch_id", Value.Batch_Id);
      end if;
      if not Value.Created_Time.Is_Null then
         Into.Write_Entity ("created_time", Value.Created_Time);
      end if;
      Into.Write_Entity ("completed_time", Value.Completed_Time);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsRetailItemsBatch_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsRetailItemsBatch_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "batch_id", Value.Batch_Id);
      Swagger.Streams.Deserialize (Object, "created_time", Value.Created_Time);
      Swagger.Streams.Deserialize (Object, "completed_time", Value.Completed_Time);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsRetailItemsBatch_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsRetailItemsBatch_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsRetailListProductsByCatalogBasedFilterRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      Serialize (Into, "filters", Value.Filters);
      Serialize (Into, "country", Value.Country);
      Serialize (Into, "locale", Value.Locale);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsRetailListProductsByCatalogBasedFilterRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsRetailListProductsByCatalogBasedFilterRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
      Deserialize (Object, "filters", Value.Filters);
      Deserialize (Object, "country", Value.Country);
      Deserialize (Object, "locale", Value.Locale);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsRetailListProductsByCatalogBasedFilterRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsRetailListProductsByCatalogBasedFilterRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsRetailProductGroupCreateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("description", Value.Description);
      Serialize (Into, "filters", Value.Filters);
      Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      Serialize (Into, "country", Value.Country);
      Serialize (Into, "locale", Value.Locale);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsRetailProductGroupCreateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsRetailProductGroupCreateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Deserialize (Object, "filters", Value.Filters);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
      Deserialize (Object, "country", Value.Country);
      Deserialize (Object, "locale", Value.Locale);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsRetailProductGroupCreateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsRetailProductGroupCreateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsRetailProductGroupUpdateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Catalog_Type.Is_Null then
         Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Into.Write_Entity ("description", Value.Description);
      Serialize (Into, "filters", Value.Filters);
      Serialize (Into, "country", Value.Country);
      Serialize (Into, "locale", Value.Locale);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsRetailProductGroupUpdateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsRetailProductGroupUpdateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Deserialize (Object, "filters", Value.Filters);
      Deserialize (Object, "country", Value.Country);
      Deserialize (Object, "locale", Value.Locale);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsRetailProductGroupUpdateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsRetailProductGroupUpdateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsRetailProductGroup_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Into.Write_Entity ("id", Value.Id);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Into.Write_Entity ("description", Value.Description);
      Serialize (Into, "filters", Value.Filters);
      if not Value.Is_Featured.Is_Null then
         Into.Write_Entity ("is_featured", Value.Is_Featured);
      end if;
      Serialize (Into, "type", Value.P_Type);
      Serialize (Into, "status", Value.Status);
      if not Value.Created_At.Is_Null then
         Into.Write_Entity ("created_at", Value.Created_At);
      end if;
      if not Value.Updated_At.Is_Null then
         Into.Write_Entity ("updated_at", Value.Updated_At);
      end if;
      Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      Into.Write_Entity ("feed_id", Value.Feed_Id);
      Into.Write_Entity ("country", Value.Country);
      Into.Write_Entity ("locale", Value.Locale);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsRetailProductGroup_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsRetailProductGroup_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Deserialize (Object, "filters", Value.Filters);
      Swagger.Streams.Deserialize (Object, "is_featured", Value.Is_Featured);
      Deserialize (Object, "type", Value.P_Type);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "created_at", Value.Created_At);
      Swagger.Streams.Deserialize (Object, "updated_at", Value.Updated_At);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
      Swagger.Streams.Deserialize (Object, "feed_id", Value.Feed_Id);
      Swagger.Streams.Deserialize (Object, "country", Value.Country);
      Swagger.Streams.Deserialize (Object, "locale", Value.Locale);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsRetailProductGroup_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsRetailProductGroup_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsVerticalBatchRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Serialize (Into, "country", Value.Country);
      Serialize (Into, "language", Value.Language);
      Serialize (Into, "items", Value.Items);
      if not Value.Catalog_Id.Is_Null then
         Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsVerticalBatchRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsVerticalBatchRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Deserialize (Object, "country", Value.Country);
      Deserialize (Object, "language", Value.Language);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsVerticalBatchRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsVerticalBatchRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsVerticalProductGroupCreateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("description", Value.Description);
      Serialize (Into, "filters", Value.Filters);
      Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      Serialize (Into, "country", Value.Country);
      Serialize (Into, "locale", Value.Locale);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsVerticalProductGroupCreateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsVerticalProductGroupCreateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Deserialize (Object, "filters", Value.Filters);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
      Deserialize (Object, "country", Value.Country);
      Deserialize (Object, "locale", Value.Locale);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsVerticalProductGroupCreateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsVerticalProductGroupCreateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsVerticalProductGroupUpdateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Catalog_Type.Is_Null then
         Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Into.Write_Entity ("description", Value.Description);
      Serialize (Into, "filters", Value.Filters);
      Serialize (Into, "country", Value.Country);
      Serialize (Into, "locale", Value.Locale);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsVerticalProductGroupUpdateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsVerticalProductGroupUpdateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Deserialize (Object, "filters", Value.Filters);
      Deserialize (Object, "country", Value.Country);
      Deserialize (Object, "locale", Value.Locale);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsVerticalProductGroupUpdateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsVerticalProductGroupUpdateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsVerticalsListProductsByCatalogBasedFilterRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      Serialize (Into, "filters", Value.Filters);
      Serialize (Into, "country", Value.Country);
      Serialize (Into, "locale", Value.Locale);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsVerticalsListProductsByCatalogBasedFilterRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsVerticalsListProductsByCatalogBasedFilterRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
      Deserialize (Object, "filters", Value.Filters);
      Deserialize (Object, "country", Value.Country);
      Deserialize (Object, "locale", Value.Locale);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsVerticalsListProductsByCatalogBasedFilterRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsVerticalsListProductsByCatalogBasedFilterRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ConversionTagCommon_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Ad_Account_Id.Is_Null then
         Into.Write_Entity ("ad_account_id", Value.Ad_Account_Id);
      end if;
      if not Value.Code_Snippet.Is_Null then
         Into.Write_Entity ("code_snippet", Value.Code_Snippet);
      end if;
      Serialize (Into, "enhanced_match_status", Value.Enhanced_Match_Status);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Serialize (Into, "last_fired_time_ms", Value.Last_Fired_Time_Ms);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "status", Value.Status);
      if not Value.Version.Is_Null then
         Into.Write_Entity ("version", Value.Version);
      end if;
      Serialize (Into, "configs", Value.Configs);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ConversionTagCommon_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ConversionTagCommon_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "ad_account_id", Value.Ad_Account_Id);
      Swagger.Streams.Deserialize (Object, "code_snippet", Value.Code_Snippet);
      Deserialize (Object, "enhanced_match_status", Value.Enhanced_Match_Status);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "last_fired_time_ms", Value.Last_Fired_Time_Ms);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "version", Value.Version);
      Deserialize (Object, "configs", Value.Configs);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ConversionTagCommon_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ConversionTagCommon_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CreateMMMReportRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("report_name", Value.Report_Name);
      Into.Write_Entity ("start_date", Value.Start_Date);
      Into.Write_Entity ("end_date", Value.End_Date);
      Into.Write_Entity ("granularity", Value.Granularity);
      Into.Write_Entity ("level", Value.Level);
      Serialize (Into, "targeting_types", Value.Targeting_Types);
      Serialize (Into, "columns", Value.Columns);
      Serialize (Into, "countries", Value.Countries);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CreateMMMReportRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CreateMMMReportRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "report_name", Value.Report_Name);
      Swagger.Streams.Deserialize (Object, "start_date", Value.Start_Date);
      Swagger.Streams.Deserialize (Object, "end_date", Value.End_Date);
      Swagger.Streams.Deserialize (Object, "granularity", Value.Granularity);
      Swagger.Streams.Deserialize (Object, "level", Value.Level);
      Deserialize (Object, "targeting_types", Value.Targeting_Types);
      Deserialize (Object, "columns", Value.Columns);
      Deserialize (Object, "countries", Value.Countries);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CreateMMMReportRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CreateMMMReportRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ItemResponseAnyOf_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      if not Value.Item_Id.Is_Null then
         Into.Write_Entity ("item_id", Value.Item_Id);
      end if;
      Serialize (Into, "pins", Value.Pins);
      Serialize (Into, "attributes", Value.Attributes);
      if not Value.Hotel_Id.Is_Null then
         Into.Write_Entity ("hotel_id", Value.Hotel_Id);
      end if;
      if not Value.Creative_Assets_Id.Is_Null then
         Into.Write_Entity ("creative_assets_id", Value.Creative_Assets_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ItemResponseAnyOf_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ItemResponseAnyOf_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "item_id", Value.Item_Id);
      Deserialize (Object, "pins", Value.Pins);
      Deserialize (Object, "attributes", Value.Attributes);
      Swagger.Streams.Deserialize (Object, "hotel_id", Value.Hotel_Id);
      Swagger.Streams.Deserialize (Object, "creative_assets_id", Value.Creative_Assets_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ItemResponseAnyOf_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ItemResponseAnyOf_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.LeadFormCommon_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("privacy_policy_link", Value.Privacy_Policy_Link);
      if not Value.Has_Accepted_Terms.Is_Null then
         Into.Write_Entity ("has_accepted_terms", Value.Has_Accepted_Terms);
      end if;
      Into.Write_Entity ("completion_message", Value.Completion_Message);
      Serialize (Into, "status", Value.Status);
      Into.Write_Entity ("disclosure_language", Value.Disclosure_Language);
      Serialize (Into, "questions", Value.Questions);
      Serialize (Into, "policy_links", Value.Policy_Links);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in LeadFormCommon_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.LeadFormCommon_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "privacy_policy_link", Value.Privacy_Policy_Link);
      Swagger.Streams.Deserialize (Object, "has_accepted_terms", Value.Has_Accepted_Terms);
      Swagger.Streams.Deserialize (Object, "completion_message", Value.Completion_Message);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "disclosure_language", Value.Disclosure_Language);
      Deserialize (Object, "questions", Value.Questions);
      Deserialize (Object, "policy_links", Value.Policy_Links);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out LeadFormCommon_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.LeadFormCommon_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.LeadFormCreateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("privacy_policy_link", Value.Privacy_Policy_Link);
      Into.Write_Entity ("has_accepted_terms", Value.Has_Accepted_Terms);
      Into.Write_Entity ("completion_message", Value.Completion_Message);
      Serialize (Into, "status", Value.Status);
      Into.Write_Entity ("disclosure_language", Value.Disclosure_Language);
      Serialize (Into, "questions", Value.Questions);
      Serialize (Into, "policy_links", Value.Policy_Links);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in LeadFormCreateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.LeadFormCreateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "privacy_policy_link", Value.Privacy_Policy_Link);
      Swagger.Streams.Deserialize (Object, "has_accepted_terms", Value.Has_Accepted_Terms);
      Swagger.Streams.Deserialize (Object, "completion_message", Value.Completion_Message);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "disclosure_language", Value.Disclosure_Language);
      Deserialize (Object, "questions", Value.Questions);
      Deserialize (Object, "policy_links", Value.Policy_Links);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out LeadFormCreateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.LeadFormCreateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.LeadFormUpdateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("privacy_policy_link", Value.Privacy_Policy_Link);
      if not Value.Has_Accepted_Terms.Is_Null then
         Into.Write_Entity ("has_accepted_terms", Value.Has_Accepted_Terms);
      end if;
      Into.Write_Entity ("completion_message", Value.Completion_Message);
      Serialize (Into, "status", Value.Status);
      Into.Write_Entity ("disclosure_language", Value.Disclosure_Language);
      Serialize (Into, "questions", Value.Questions);
      Serialize (Into, "policy_links", Value.Policy_Links);
      Into.Write_Entity ("id", Value.Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in LeadFormUpdateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.LeadFormUpdateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "privacy_policy_link", Value.Privacy_Policy_Link);
      Swagger.Streams.Deserialize (Object, "has_accepted_terms", Value.Has_Accepted_Terms);
      Swagger.Streams.Deserialize (Object, "completion_message", Value.Completion_Message);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "disclosure_language", Value.Disclosure_Language);
      Deserialize (Object, "questions", Value.Questions);
      Deserialize (Object, "policy_links", Value.Policy_Links);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out LeadFormUpdateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.LeadFormUpdateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.MultipleProductGroupsInner_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("description", Value.Description);
      if not Value.Is_Featured.Is_Null then
         Into.Write_Entity ("is_featured", Value.Is_Featured);
      end if;
      Serialize (Into, "filters", Value.Filters);
      Into.Write_Entity ("feed_id", Value.Feed_Id);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      Serialize (Into, "country", Value.Country);
      Serialize (Into, "locale", Value.Locale);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MultipleProductGroupsInner_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.MultipleProductGroupsInner_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "is_featured", Value.Is_Featured);
      Deserialize (Object, "filters", Value.Filters);
      Swagger.Streams.Deserialize (Object, "feed_id", Value.Feed_Id);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
      Deserialize (Object, "country", Value.Country);
      Deserialize (Object, "locale", Value.Locale);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out MultipleProductGroupsInner_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.MultipleProductGroupsInner_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OptimizationGoalMetadata_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "conversion_tag_v3_goal_metadata", Value.Conversion_Tag_V_3_Goal_Metadata);
      Serialize (Into, "frequency_goal_metadata", Value.Frequency_Goal_Metadata);
      Serialize (Into, "scrollup_goal_metadata", Value.Scrollup_Goal_Metadata);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OptimizationGoalMetadata_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OptimizationGoalMetadata_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "conversion_tag_v3_goal_metadata", Value.Conversion_Tag_V_3_Goal_Metadata);
      Deserialize (Object, "frequency_goal_metadata", Value.Frequency_Goal_Metadata);
      Deserialize (Object, "scrollup_goal_metadata", Value.Scrollup_Goal_Metadata);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OptimizationGoalMetadata_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OptimizationGoalMetadata_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PinCreate_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Created_At.Is_Null then
         Into.Write_Entity ("created_at", Value.Created_At);
      end if;
      Into.Write_Entity ("link", Value.Link);
      Into.Write_Entity ("title", Value.Title);
      Into.Write_Entity ("description", Value.Description);
      Into.Write_Entity ("dominant_color", Value.Dominant_Color);
      Into.Write_Entity ("alt_text", Value.Alt_Text);
      if not Value.Board_Id.Is_Null then
         Into.Write_Entity ("board_id", Value.Board_Id);
      end if;
      Into.Write_Entity ("board_section_id", Value.Board_Section_Id);
      Serialize (Into, "board_owner", Value.Board_Owner);
      Serialize (Into, "media", Value.Media);
      Serialize (Into, "media_source", Value.Media_Source);
      Into.Write_Entity ("parent_pin_id", Value.Parent_Pin_Id);
      Into.Write_Entity ("note", Value.Note);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PinCreate_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PinCreate_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "created_at", Value.Created_At);
      Swagger.Streams.Deserialize (Object, "link", Value.Link);
      Swagger.Streams.Deserialize (Object, "title", Value.Title);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "dominant_color", Value.Dominant_Color);
      Swagger.Streams.Deserialize (Object, "alt_text", Value.Alt_Text);
      Swagger.Streams.Deserialize (Object, "board_id", Value.Board_Id);
      Swagger.Streams.Deserialize (Object, "board_section_id", Value.Board_Section_Id);
      Deserialize (Object, "board_owner", Value.Board_Owner);
      Deserialize (Object, "media", Value.Media);
      Deserialize (Object, "media_source", Value.Media_Source);
      Swagger.Streams.Deserialize (Object, "parent_pin_id", Value.Parent_Pin_Id);
      Swagger.Streams.Deserialize (Object, "note", Value.Note);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PinCreate_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PinCreate_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TemplateResponseDateRange_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "dynamic_date_range", Value.Dynamic_Date_Range);
      Serialize (Into, "relative_date_range", Value.Relative_Date_Range);
      Serialize (Into, "absolute_date_range", Value.Absolute_Date_Range);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TemplateResponseDateRange_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TemplateResponseDateRange_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "dynamic_date_range", Value.Dynamic_Date_Range);
      Deserialize (Object, "relative_date_range", Value.Relative_Date_Range);
      Deserialize (Object, "absolute_date_range", Value.Absolute_Date_Range);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TemplateResponseDateRange_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TemplateResponseDateRange_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdAccount_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "owner", Value.Owner);
      Serialize (Into, "country", Value.Country);
      Serialize (Into, "currency", Value.Currency);
      Serialize (Into, "permissions", Value.Permissions);
      Into.Write_Entity ("created_time", Value.Created_Time);
      Into.Write_Entity ("updated_time", Value.Updated_Time);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdAccount_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdAccount_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "owner", Value.Owner);
      Deserialize (Object, "country", Value.Country);
      Deserialize (Object, "currency", Value.Currency);
      Deserialize (Object, "permissions", Value.Permissions);
      Swagger.Streams.Deserialize (Object, "created_time", Value.Created_Time);
      Swagger.Streams.Deserialize (Object, "updated_time", Value.Updated_Time);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdAccount_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdAccount_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdAccountsList200Response_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.Write_Entity ("bookmark", Value.Bookmark);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdAccountsList200Response_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdAccountsList200Response_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "bookmark", Value.Bookmark);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdAccountsList200Response_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdAccountsList200Response_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdvancedAuctionItemsSubmitUpsertRecord_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("item_id", Value.Item_Id);
      Serialize (Into, "country", Value.Country);
      Serialize (Into, "language", Value.Language);
      Serialize (Into, "bid_options", Value.Bid_Options);
      Serialize (Into, "update_mask", Value.Update_Mask);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdvancedAuctionItemsSubmitUpsertRecord_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdvancedAuctionItemsSubmitUpsertRecord_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "item_id", Value.Item_Id);
      Deserialize (Object, "country", Value.Country);
      Deserialize (Object, "language", Value.Language);
      Deserialize (Object, "bid_options", Value.Bid_Options);
      Deserialize (Object, "update_mask", Value.Update_Mask);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdvancedAuctionItemsSubmitUpsertRecord_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdvancedAuctionItemsSubmitUpsertRecord_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsItemsBatchRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "country", Value.Country);
      Serialize (Into, "language", Value.Language);
      Serialize (Into, "operation", Value.Operation);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsItemsBatchRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsItemsBatchRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "country", Value.Country);
      Deserialize (Object, "language", Value.Language);
      Deserialize (Object, "operation", Value.Operation);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsItemsBatchRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsItemsBatchRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsItemsCreateBatchRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "country", Value.Country);
      Serialize (Into, "language", Value.Language);
      Serialize (Into, "operation", Value.Operation);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsItemsCreateBatchRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsItemsCreateBatchRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "country", Value.Country);
      Deserialize (Object, "language", Value.Language);
      Deserialize (Object, "operation", Value.Operation);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsItemsCreateBatchRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsItemsCreateBatchRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsItemsDeleteBatchRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "country", Value.Country);
      Serialize (Into, "language", Value.Language);
      Serialize (Into, "operation", Value.Operation);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsItemsDeleteBatchRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsItemsDeleteBatchRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "country", Value.Country);
      Deserialize (Object, "language", Value.Language);
      Deserialize (Object, "operation", Value.Operation);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsItemsDeleteBatchRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsItemsDeleteBatchRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsItemsDeleteDiscontinuedBatchRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "country", Value.Country);
      Serialize (Into, "language", Value.Language);
      Serialize (Into, "operation", Value.Operation);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsItemsDeleteDiscontinuedBatchRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsItemsDeleteDiscontinuedBatchRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "country", Value.Country);
      Deserialize (Object, "language", Value.Language);
      Deserialize (Object, "operation", Value.Operation);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsItemsDeleteDiscontinuedBatchRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsItemsDeleteDiscontinuedBatchRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsItemsUpdateBatchRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "country", Value.Country);
      Serialize (Into, "language", Value.Language);
      Serialize (Into, "operation", Value.Operation);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsItemsUpdateBatchRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsItemsUpdateBatchRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "country", Value.Country);
      Deserialize (Object, "language", Value.Language);
      Deserialize (Object, "operation", Value.Operation);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsItemsUpdateBatchRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsItemsUpdateBatchRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsItemsUpsertBatchRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "country", Value.Country);
      Serialize (Into, "language", Value.Language);
      Serialize (Into, "operation", Value.Operation);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsItemsUpsertBatchRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsItemsUpsertBatchRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "country", Value.Country);
      Deserialize (Object, "language", Value.Language);
      Deserialize (Object, "operation", Value.Operation);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsItemsUpsertBatchRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsItemsUpsertBatchRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ItemsBatchPostRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("catalog_type", Value.Catalog_Type);
      Serialize (Into, "country", Value.Country);
      Serialize (Into, "language", Value.Language);
      Serialize (Into, "items", Value.Items);
      if not Value.Catalog_Id.Is_Null then
         Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      end if;
      Serialize (Into, "operation", Value.Operation);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ItemsBatchPostRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ItemsBatchPostRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Deserialize (Object, "country", Value.Country);
      Deserialize (Object, "language", Value.Language);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
      Deserialize (Object, "operation", Value.Operation);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ItemsBatchPostRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ItemsBatchPostRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TargetingTemplateCommon_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Auto_Targeting_Enabled.Is_Null then
         Into.Write_Entity ("auto_targeting_enabled", Value.Auto_Targeting_Enabled);
      end if;
      Serialize (Into, "targeting_attributes", Value.Targeting_Attributes);
      Serialize (Into, "placement_group", Value.Placement_Group);
      Serialize (Into, "keywords", Value.Keywords);
      Serialize (Into, "tracking_urls", Value.Tracking_Urls);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TargetingTemplateCommon_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TargetingTemplateCommon_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "auto_targeting_enabled", Value.Auto_Targeting_Enabled);
      Deserialize (Object, "targeting_attributes", Value.Targeting_Attributes);
      Deserialize (Object, "placement_group", Value.Placement_Group);
      Deserialize (Object, "keywords", Value.Keywords);
      Deserialize (Object, "tracking_urls", Value.Tracking_Urls);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TargetingTemplateCommon_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TargetingTemplateCommon_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TargetingTemplateCreate_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("name", Value.Name);
      if not Value.Auto_Targeting_Enabled.Is_Null then
         Into.Write_Entity ("auto_targeting_enabled", Value.Auto_Targeting_Enabled);
      end if;
      Serialize (Into, "targeting_attributes", Value.Targeting_Attributes);
      Serialize (Into, "placement_group", Value.Placement_Group);
      Serialize (Into, "keywords", Value.Keywords);
      Serialize (Into, "tracking_urls", Value.Tracking_Urls);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TargetingTemplateCreate_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TargetingTemplateCreate_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "auto_targeting_enabled", Value.Auto_Targeting_Enabled);
      Deserialize (Object, "targeting_attributes", Value.Targeting_Attributes);
      Deserialize (Object, "placement_group", Value.Placement_Group);
      Deserialize (Object, "keywords", Value.Keywords);
      Deserialize (Object, "tracking_urls", Value.Tracking_Urls);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TargetingTemplateCreate_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TargetingTemplateCreate_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdCommon_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Ad_Group_Id.Is_Null then
         Into.Write_Entity ("ad_group_id", Value.Ad_Group_Id);
      end if;
      Into.Write_Entity ("android_deep_link", Value.Android_Deep_Link);
      Serialize (Into, "carousel_android_deep_links", Value.Carousel_Android_Deep_Links);
      Serialize (Into, "carousel_destination_urls", Value.Carousel_Destination_Urls);
      Serialize (Into, "carousel_ios_deep_links", Value.Carousel_Ios_Deep_Links);
      Into.Write_Entity ("click_tracking_url", Value.Click_Tracking_Url);
      Serialize (Into, "creative_type", Value.Creative_Type);
      Into.Write_Entity ("destination_url", Value.Destination_Url);
      Into.Write_Entity ("ios_deep_link", Value.Ios_Deep_Link);
      if not Value.Is_Pin_Deleted.Is_Null then
         Into.Write_Entity ("is_pin_deleted", Value.Is_Pin_Deleted);
      end if;
      if not Value.Is_Removable.Is_Null then
         Into.Write_Entity ("is_removable", Value.Is_Removable);
      end if;
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "tracking_urls", Value.Tracking_Urls);
      Into.Write_Entity ("view_tracking_url", Value.View_Tracking_Url);
      Into.Write_Entity ("lead_form_id", Value.Lead_Form_Id);
      Serialize (Into, "grid_click_type", Value.Grid_Click_Type);
      Into.Write_Entity ("customizable_cta_type", Value.Customizable_Cta_Type);
      Serialize (Into, "quiz_pin_data", Value.Quiz_Pin_Data);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdCommon_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdCommon_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "ad_group_id", Value.Ad_Group_Id);
      Swagger.Streams.Deserialize (Object, "android_deep_link", Value.Android_Deep_Link);
      Swagger.Streams.Deserialize (Object, "carousel_android_deep_links", Value.Carousel_Android_Deep_Links);
      Swagger.Streams.Deserialize (Object, "carousel_destination_urls", Value.Carousel_Destination_Urls);
      Swagger.Streams.Deserialize (Object, "carousel_ios_deep_links", Value.Carousel_Ios_Deep_Links);
      Swagger.Streams.Deserialize (Object, "click_tracking_url", Value.Click_Tracking_Url);
      Deserialize (Object, "creative_type", Value.Creative_Type);
      Swagger.Streams.Deserialize (Object, "destination_url", Value.Destination_Url);
      Swagger.Streams.Deserialize (Object, "ios_deep_link", Value.Ios_Deep_Link);
      Swagger.Streams.Deserialize (Object, "is_pin_deleted", Value.Is_Pin_Deleted);
      Swagger.Streams.Deserialize (Object, "is_removable", Value.Is_Removable);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "tracking_urls", Value.Tracking_Urls);
      Swagger.Streams.Deserialize (Object, "view_tracking_url", Value.View_Tracking_Url);
      Swagger.Streams.Deserialize (Object, "lead_form_id", Value.Lead_Form_Id);
      Deserialize (Object, "grid_click_type", Value.Grid_Click_Type);
      Swagger.Streams.Deserialize (Object, "customizable_cta_type", Value.Customizable_Cta_Type);
      Deserialize (Object, "quiz_pin_data", Value.Quiz_Pin_Data);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdCommon_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdCommon_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdCreateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("ad_group_id", Value.Ad_Group_Id);
      Into.Write_Entity ("android_deep_link", Value.Android_Deep_Link);
      Serialize (Into, "carousel_android_deep_links", Value.Carousel_Android_Deep_Links);
      Serialize (Into, "carousel_destination_urls", Value.Carousel_Destination_Urls);
      Serialize (Into, "carousel_ios_deep_links", Value.Carousel_Ios_Deep_Links);
      Into.Write_Entity ("click_tracking_url", Value.Click_Tracking_Url);
      Serialize (Into, "creative_type", Value.Creative_Type);
      Into.Write_Entity ("destination_url", Value.Destination_Url);
      Into.Write_Entity ("ios_deep_link", Value.Ios_Deep_Link);
      if not Value.Is_Pin_Deleted.Is_Null then
         Into.Write_Entity ("is_pin_deleted", Value.Is_Pin_Deleted);
      end if;
      if not Value.Is_Removable.Is_Null then
         Into.Write_Entity ("is_removable", Value.Is_Removable);
      end if;
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "tracking_urls", Value.Tracking_Urls);
      Into.Write_Entity ("view_tracking_url", Value.View_Tracking_Url);
      Into.Write_Entity ("lead_form_id", Value.Lead_Form_Id);
      Serialize (Into, "grid_click_type", Value.Grid_Click_Type);
      Into.Write_Entity ("customizable_cta_type", Value.Customizable_Cta_Type);
      Serialize (Into, "quiz_pin_data", Value.Quiz_Pin_Data);
      Into.Write_Entity ("pin_id", Value.Pin_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdCreateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdCreateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "ad_group_id", Value.Ad_Group_Id);
      Swagger.Streams.Deserialize (Object, "android_deep_link", Value.Android_Deep_Link);
      Swagger.Streams.Deserialize (Object, "carousel_android_deep_links", Value.Carousel_Android_Deep_Links);
      Swagger.Streams.Deserialize (Object, "carousel_destination_urls", Value.Carousel_Destination_Urls);
      Swagger.Streams.Deserialize (Object, "carousel_ios_deep_links", Value.Carousel_Ios_Deep_Links);
      Swagger.Streams.Deserialize (Object, "click_tracking_url", Value.Click_Tracking_Url);
      Deserialize (Object, "creative_type", Value.Creative_Type);
      Swagger.Streams.Deserialize (Object, "destination_url", Value.Destination_Url);
      Swagger.Streams.Deserialize (Object, "ios_deep_link", Value.Ios_Deep_Link);
      Swagger.Streams.Deserialize (Object, "is_pin_deleted", Value.Is_Pin_Deleted);
      Swagger.Streams.Deserialize (Object, "is_removable", Value.Is_Removable);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "tracking_urls", Value.Tracking_Urls);
      Swagger.Streams.Deserialize (Object, "view_tracking_url", Value.View_Tracking_Url);
      Swagger.Streams.Deserialize (Object, "lead_form_id", Value.Lead_Form_Id);
      Deserialize (Object, "grid_click_type", Value.Grid_Click_Type);
      Swagger.Streams.Deserialize (Object, "customizable_cta_type", Value.Customizable_Cta_Type);
      Deserialize (Object, "quiz_pin_data", Value.Quiz_Pin_Data);
      Swagger.Streams.Deserialize (Object, "pin_id", Value.Pin_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdCreateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdCreateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdUpdateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Ad_Group_Id.Is_Null then
         Into.Write_Entity ("ad_group_id", Value.Ad_Group_Id);
      end if;
      Into.Write_Entity ("android_deep_link", Value.Android_Deep_Link);
      Serialize (Into, "carousel_android_deep_links", Value.Carousel_Android_Deep_Links);
      Serialize (Into, "carousel_destination_urls", Value.Carousel_Destination_Urls);
      Serialize (Into, "carousel_ios_deep_links", Value.Carousel_Ios_Deep_Links);
      Into.Write_Entity ("click_tracking_url", Value.Click_Tracking_Url);
      Serialize (Into, "creative_type", Value.Creative_Type);
      Into.Write_Entity ("destination_url", Value.Destination_Url);
      Into.Write_Entity ("ios_deep_link", Value.Ios_Deep_Link);
      if not Value.Is_Pin_Deleted.Is_Null then
         Into.Write_Entity ("is_pin_deleted", Value.Is_Pin_Deleted);
      end if;
      if not Value.Is_Removable.Is_Null then
         Into.Write_Entity ("is_removable", Value.Is_Removable);
      end if;
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "tracking_urls", Value.Tracking_Urls);
      Into.Write_Entity ("view_tracking_url", Value.View_Tracking_Url);
      Into.Write_Entity ("lead_form_id", Value.Lead_Form_Id);
      Serialize (Into, "grid_click_type", Value.Grid_Click_Type);
      Into.Write_Entity ("customizable_cta_type", Value.Customizable_Cta_Type);
      Serialize (Into, "quiz_pin_data", Value.Quiz_Pin_Data);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("pin_id", Value.Pin_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdUpdateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdUpdateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "ad_group_id", Value.Ad_Group_Id);
      Swagger.Streams.Deserialize (Object, "android_deep_link", Value.Android_Deep_Link);
      Swagger.Streams.Deserialize (Object, "carousel_android_deep_links", Value.Carousel_Android_Deep_Links);
      Swagger.Streams.Deserialize (Object, "carousel_destination_urls", Value.Carousel_Destination_Urls);
      Swagger.Streams.Deserialize (Object, "carousel_ios_deep_links", Value.Carousel_Ios_Deep_Links);
      Swagger.Streams.Deserialize (Object, "click_tracking_url", Value.Click_Tracking_Url);
      Deserialize (Object, "creative_type", Value.Creative_Type);
      Swagger.Streams.Deserialize (Object, "destination_url", Value.Destination_Url);
      Swagger.Streams.Deserialize (Object, "ios_deep_link", Value.Ios_Deep_Link);
      Swagger.Streams.Deserialize (Object, "is_pin_deleted", Value.Is_Pin_Deleted);
      Swagger.Streams.Deserialize (Object, "is_removable", Value.Is_Removable);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "tracking_urls", Value.Tracking_Urls);
      Swagger.Streams.Deserialize (Object, "view_tracking_url", Value.View_Tracking_Url);
      Swagger.Streams.Deserialize (Object, "lead_form_id", Value.Lead_Form_Id);
      Deserialize (Object, "grid_click_type", Value.Grid_Click_Type);
      Swagger.Streams.Deserialize (Object, "customizable_cta_type", Value.Customizable_Cta_Type);
      Deserialize (Object, "quiz_pin_data", Value.Quiz_Pin_Data);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "pin_id", Value.Pin_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdUpdateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdUpdateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TargetingTemplateGetResponseData_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Auto_Targeting_Enabled.Is_Null then
         Into.Write_Entity ("auto_targeting_enabled", Value.Auto_Targeting_Enabled);
      end if;
      Serialize (Into, "targeting_attributes", Value.Targeting_Attributes);
      Serialize (Into, "placement_group", Value.Placement_Group);
      Serialize (Into, "keywords", Value.Keywords);
      Serialize (Into, "tracking_urls", Value.Tracking_Urls);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Created_Time.Is_Null then
         Into.Write_Entity ("created_time", Value.Created_Time);
      end if;
      if not Value.Updated_Time.Is_Null then
         Into.Write_Entity ("updated_time", Value.Updated_Time);
      end if;
      if not Value.Ad_Account_Id.Is_Null then
         Into.Write_Entity ("ad_account_id", Value.Ad_Account_Id);
      end if;
      if not Value.Status.Is_Null then
         Into.Write_Entity ("status", Value.Status);
      end if;
      Serialize (Into, "sizing", Value.Sizing);
      Into.Write_Entity ("valid", Value.Valid);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TargetingTemplateGetResponseData_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TargetingTemplateGetResponseData_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "auto_targeting_enabled", Value.Auto_Targeting_Enabled);
      Deserialize (Object, "targeting_attributes", Value.Targeting_Attributes);
      Deserialize (Object, "placement_group", Value.Placement_Group);
      Deserialize (Object, "keywords", Value.Keywords);
      Deserialize (Object, "tracking_urls", Value.Tracking_Urls);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "created_time", Value.Created_Time);
      Swagger.Streams.Deserialize (Object, "updated_time", Value.Updated_Time);
      Swagger.Streams.Deserialize (Object, "ad_account_id", Value.Ad_Account_Id);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "sizing", Value.Sizing);
      Swagger.Streams.Deserialize (Object, "valid", Value.Valid);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TargetingTemplateGetResponseData_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TargetingTemplateGetResponseData_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsCreativeAssetsFeedsUpdateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "default_currency", Value.Default_Currency);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "format", Value.Format);
      Serialize (Into, "credentials", Value.Credentials);
      if not Value.Location.Is_Null then
         Into.Write_Entity ("location", Value.Location);
      end if;
      Serialize (Into, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsCreativeAssetsFeedsUpdateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsCreativeAssetsFeedsUpdateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "default_currency", Value.Default_Currency);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "format", Value.Format);
      Deserialize (Object, "credentials", Value.Credentials);
      Swagger.Streams.Deserialize (Object, "location", Value.Location);
      Deserialize (Object, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsCreativeAssetsFeedsUpdateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsCreativeAssetsFeedsUpdateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsFeedsUpdateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "default_availability", Value.Default_Availability);
      Serialize (Into, "default_currency", Value.Default_Currency);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "format", Value.Format);
      Serialize (Into, "credentials", Value.Credentials);
      if not Value.Location.Is_Null then
         Into.Write_Entity ("location", Value.Location);
      end if;
      Serialize (Into, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Serialize (Into, "status", Value.Status);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsFeedsUpdateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsFeedsUpdateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "default_availability", Value.Default_Availability);
      Deserialize (Object, "default_currency", Value.Default_Currency);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "format", Value.Format);
      Deserialize (Object, "credentials", Value.Credentials);
      Swagger.Streams.Deserialize (Object, "location", Value.Location);
      Deserialize (Object, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Deserialize (Object, "status", Value.Status);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsFeedsUpdateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsFeedsUpdateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsHotelFeed_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("created_at", Value.Created_At);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("updated_at", Value.Updated_At);
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "format", Value.Format);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      Serialize (Into, "credentials", Value.Credentials);
      Into.Write_Entity ("location", Value.Location);
      Serialize (Into, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "default_currency", Value.Default_Currency);
      Into.Write_Entity ("default_locale", Value.Default_Locale);
      Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsHotelFeed_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsHotelFeed_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "created_at", Value.Created_At);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "updated_at", Value.Updated_At);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "format", Value.Format);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Deserialize (Object, "credentials", Value.Credentials);
      Swagger.Streams.Deserialize (Object, "location", Value.Location);
      Deserialize (Object, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "default_currency", Value.Default_Currency);
      Swagger.Streams.Deserialize (Object, "default_locale", Value.Default_Locale);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsHotelFeed_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsHotelFeed_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsHotelFeedsCreateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "default_currency", Value.Default_Currency);
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "format", Value.Format);
      Serialize (Into, "default_locale", Value.Default_Locale);
      Serialize (Into, "credentials", Value.Credentials);
      Into.Write_Entity ("location", Value.Location);
      Serialize (Into, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      Into.Write_Entity ("status", Value.Status);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsHotelFeedsCreateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsHotelFeedsCreateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "default_currency", Value.Default_Currency);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "format", Value.Format);
      Deserialize (Object, "default_locale", Value.Default_Locale);
      Deserialize (Object, "credentials", Value.Credentials);
      Swagger.Streams.Deserialize (Object, "location", Value.Location);
      Deserialize (Object, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsHotelFeedsCreateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsHotelFeedsCreateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsHotelFeedsUpdateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "default_currency", Value.Default_Currency);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "format", Value.Format);
      Serialize (Into, "credentials", Value.Credentials);
      if not Value.Location.Is_Null then
         Into.Write_Entity ("location", Value.Location);
      end if;
      Serialize (Into, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsHotelFeedsUpdateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsHotelFeedsUpdateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "default_currency", Value.Default_Currency);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "format", Value.Format);
      Deserialize (Object, "credentials", Value.Credentials);
      Swagger.Streams.Deserialize (Object, "location", Value.Location);
      Deserialize (Object, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsHotelFeedsUpdateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsHotelFeedsUpdateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsCreativeAssetsFeed_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("created_at", Value.Created_At);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("updated_at", Value.Updated_At);
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "format", Value.Format);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      Serialize (Into, "credentials", Value.Credentials);
      Into.Write_Entity ("location", Value.Location);
      Serialize (Into, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "default_currency", Value.Default_Currency);
      Into.Write_Entity ("default_locale", Value.Default_Locale);
      Serialize (Into, "default_country", Value.Default_Country);
      Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsCreativeAssetsFeed_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsCreativeAssetsFeed_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "created_at", Value.Created_At);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "updated_at", Value.Updated_At);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "format", Value.Format);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Deserialize (Object, "credentials", Value.Credentials);
      Swagger.Streams.Deserialize (Object, "location", Value.Location);
      Deserialize (Object, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "default_currency", Value.Default_Currency);
      Swagger.Streams.Deserialize (Object, "default_locale", Value.Default_Locale);
      Deserialize (Object, "default_country", Value.Default_Country);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsCreativeAssetsFeed_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsCreativeAssetsFeed_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsCreativeAssetsFeedsCreateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "default_currency", Value.Default_Currency);
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "format", Value.Format);
      Serialize (Into, "default_locale", Value.Default_Locale);
      Serialize (Into, "default_country", Value.Default_Country);
      Serialize (Into, "credentials", Value.Credentials);
      Into.Write_Entity ("location", Value.Location);
      Serialize (Into, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      Into.Write_Entity ("status", Value.Status);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsCreativeAssetsFeedsCreateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsCreativeAssetsFeedsCreateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "default_currency", Value.Default_Currency);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "format", Value.Format);
      Deserialize (Object, "default_locale", Value.Default_Locale);
      Deserialize (Object, "default_country", Value.Default_Country);
      Deserialize (Object, "credentials", Value.Credentials);
      Swagger.Streams.Deserialize (Object, "location", Value.Location);
      Deserialize (Object, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsCreativeAssetsFeedsCreateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsCreativeAssetsFeedsCreateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsFeedsCreateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "default_currency", Value.Default_Currency);
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "format", Value.Format);
      Serialize (Into, "default_locale", Value.Default_Locale);
      Serialize (Into, "credentials", Value.Credentials);
      Into.Write_Entity ("location", Value.Location);
      Serialize (Into, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Serialize (Into, "default_country", Value.Default_Country);
      Serialize (Into, "default_availability", Value.Default_Availability);
      Into.Write_Entity ("status", Value.Status);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsFeedsCreateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsFeedsCreateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "default_currency", Value.Default_Currency);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "format", Value.Format);
      Deserialize (Object, "default_locale", Value.Default_Locale);
      Deserialize (Object, "credentials", Value.Credentials);
      Swagger.Streams.Deserialize (Object, "location", Value.Location);
      Deserialize (Object, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Deserialize (Object, "default_country", Value.Default_Country);
      Deserialize (Object, "default_availability", Value.Default_Availability);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsFeedsCreateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsFeedsCreateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsRetailFeedsUpdateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "default_currency", Value.Default_Currency);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "format", Value.Format);
      Serialize (Into, "credentials", Value.Credentials);
      if not Value.Location.Is_Null then
         Into.Write_Entity ("location", Value.Location);
      end if;
      Serialize (Into, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      Serialize (Into, "default_availability", Value.Default_Availability);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsRetailFeedsUpdateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsRetailFeedsUpdateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "default_currency", Value.Default_Currency);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "format", Value.Format);
      Deserialize (Object, "credentials", Value.Credentials);
      Swagger.Streams.Deserialize (Object, "location", Value.Location);
      Deserialize (Object, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Deserialize (Object, "default_availability", Value.Default_Availability);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsRetailFeedsUpdateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsRetailFeedsUpdateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsVerticalFeedsUpdateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "default_currency", Value.Default_Currency);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "format", Value.Format);
      Serialize (Into, "credentials", Value.Credentials);
      if not Value.Location.Is_Null then
         Into.Write_Entity ("location", Value.Location);
      end if;
      Serialize (Into, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      Serialize (Into, "default_availability", Value.Default_Availability);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsVerticalFeedsUpdateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsVerticalFeedsUpdateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "default_currency", Value.Default_Currency);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "format", Value.Format);
      Deserialize (Object, "credentials", Value.Credentials);
      Swagger.Streams.Deserialize (Object, "location", Value.Location);
      Deserialize (Object, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Deserialize (Object, "default_availability", Value.Default_Availability);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsVerticalFeedsUpdateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsVerticalFeedsUpdateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedsUpdateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "default_currency", Value.Default_Currency);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "format", Value.Format);
      Serialize (Into, "credentials", Value.Credentials);
      if not Value.Location.Is_Null then
         Into.Write_Entity ("location", Value.Location);
      end if;
      Serialize (Into, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      Serialize (Into, "default_availability", Value.Default_Availability);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedsUpdateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedsUpdateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "default_currency", Value.Default_Currency);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "format", Value.Format);
      Deserialize (Object, "credentials", Value.Credentials);
      Swagger.Streams.Deserialize (Object, "location", Value.Location);
      Deserialize (Object, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Deserialize (Object, "default_availability", Value.Default_Availability);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedsUpdateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedsUpdateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdGroupCommon_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "status", Value.Status);
      Into.Write_Entity ("budget_in_micro_currency", Value.Budget_In_Micro_Currency);
      Into.Write_Entity ("bid_in_micro_currency", Value.Bid_In_Micro_Currency);
      Serialize (Into, "optimization_goal_metadata", Value.Optimization_Goal_Metadata);
      Serialize (Into, "budget_type", Value.Budget_Type);
      Into.Write_Entity ("start_time", Value.Start_Time);
      Into.Write_Entity ("end_time", Value.End_Time);
      Serialize (Into, "targeting_spec", Value.Targeting_Spec);
      if not Value.Lifetime_Frequency_Cap.Is_Null then
         Into.Write_Entity ("lifetime_frequency_cap", Value.Lifetime_Frequency_Cap);
      end if;
      Serialize (Into, "tracking_urls", Value.Tracking_Urls);
      Into.Write_Entity ("auto_targeting_enabled", Value.Auto_Targeting_Enabled);
      Serialize (Into, "placement_group", Value.Placement_Group);
      Serialize (Into, "pacing_delivery_type", Value.Pacing_Delivery_Type);
      if not Value.Campaign_Id.Is_Null then
         Into.Write_Entity ("campaign_id", Value.Campaign_Id);
      end if;
      Serialize (Into, "billable_event", Value.Billable_Event);
      Into.Write_Entity ("bid_strategy_type", Value.Bid_Strategy_Type);
      Serialize (Into, "targeting_template_ids", Value.Targeting_Template_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdGroupCommon_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdGroupCommon_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "budget_in_micro_currency", Value.Budget_In_Micro_Currency);
      Swagger.Streams.Deserialize (Object, "bid_in_micro_currency", Value.Bid_In_Micro_Currency);
      Deserialize (Object, "optimization_goal_metadata", Value.Optimization_Goal_Metadata);
      Deserialize (Object, "budget_type", Value.Budget_Type);
      Swagger.Streams.Deserialize (Object, "start_time", Value.Start_Time);
      Swagger.Streams.Deserialize (Object, "end_time", Value.End_Time);
      Deserialize (Object, "targeting_spec", Value.Targeting_Spec);
      Swagger.Streams.Deserialize (Object, "lifetime_frequency_cap", Value.Lifetime_Frequency_Cap);
      Deserialize (Object, "tracking_urls", Value.Tracking_Urls);
      Swagger.Streams.Deserialize (Object, "auto_targeting_enabled", Value.Auto_Targeting_Enabled);
      Deserialize (Object, "placement_group", Value.Placement_Group);
      Deserialize (Object, "pacing_delivery_type", Value.Pacing_Delivery_Type);
      Swagger.Streams.Deserialize (Object, "campaign_id", Value.Campaign_Id);
      Deserialize (Object, "billable_event", Value.Billable_Event);
      Swagger.Streams.Deserialize (Object, "bid_strategy_type", Value.Bid_Strategy_Type);
      Swagger.Streams.Deserialize (Object, "targeting_template_ids", Value.Targeting_Template_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdGroupCommon_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdGroupCommon_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsRetailFeed_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("created_at", Value.Created_At);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("updated_at", Value.Updated_At);
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "format", Value.Format);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      Serialize (Into, "credentials", Value.Credentials);
      Into.Write_Entity ("location", Value.Location);
      Serialize (Into, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "default_currency", Value.Default_Currency);
      Into.Write_Entity ("default_locale", Value.Default_Locale);
      Serialize (Into, "default_country", Value.Default_Country);
      Serialize (Into, "default_availability", Value.Default_Availability);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsRetailFeed_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsRetailFeed_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "created_at", Value.Created_At);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "updated_at", Value.Updated_At);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "format", Value.Format);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Deserialize (Object, "credentials", Value.Credentials);
      Swagger.Streams.Deserialize (Object, "location", Value.Location);
      Deserialize (Object, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "default_currency", Value.Default_Currency);
      Swagger.Streams.Deserialize (Object, "default_locale", Value.Default_Locale);
      Deserialize (Object, "default_country", Value.Default_Country);
      Deserialize (Object, "default_availability", Value.Default_Availability);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsRetailFeed_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsRetailFeed_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsRetailFeedsCreateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "default_currency", Value.Default_Currency);
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "format", Value.Format);
      Serialize (Into, "default_locale", Value.Default_Locale);
      Serialize (Into, "credentials", Value.Credentials);
      Into.Write_Entity ("location", Value.Location);
      Serialize (Into, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      Serialize (Into, "default_country", Value.Default_Country);
      Serialize (Into, "default_availability", Value.Default_Availability);
      Into.Write_Entity ("status", Value.Status);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsRetailFeedsCreateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsRetailFeedsCreateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "default_currency", Value.Default_Currency);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "format", Value.Format);
      Deserialize (Object, "default_locale", Value.Default_Locale);
      Deserialize (Object, "credentials", Value.Credentials);
      Swagger.Streams.Deserialize (Object, "location", Value.Location);
      Deserialize (Object, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Deserialize (Object, "default_country", Value.Default_Country);
      Deserialize (Object, "default_availability", Value.Default_Availability);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsRetailFeedsCreateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsRetailFeedsCreateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CatalogsVerticalFeedsCreateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "default_currency", Value.Default_Currency);
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "format", Value.Format);
      Serialize (Into, "default_locale", Value.Default_Locale);
      Serialize (Into, "credentials", Value.Credentials);
      Into.Write_Entity ("location", Value.Location);
      Serialize (Into, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      Serialize (Into, "default_country", Value.Default_Country);
      Serialize (Into, "default_availability", Value.Default_Availability);
      Into.Write_Entity ("status", Value.Status);
      Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CatalogsVerticalFeedsCreateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CatalogsVerticalFeedsCreateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "default_currency", Value.Default_Currency);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "format", Value.Format);
      Deserialize (Object, "default_locale", Value.Default_Locale);
      Deserialize (Object, "credentials", Value.Credentials);
      Swagger.Streams.Deserialize (Object, "location", Value.Location);
      Deserialize (Object, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Deserialize (Object, "default_country", Value.Default_Country);
      Deserialize (Object, "default_availability", Value.Default_Availability);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CatalogsVerticalFeedsCreateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CatalogsVerticalFeedsCreateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedsCreateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "default_currency", Value.Default_Currency);
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "format", Value.Format);
      Serialize (Into, "default_locale", Value.Default_Locale);
      Serialize (Into, "credentials", Value.Credentials);
      Into.Write_Entity ("location", Value.Location);
      Serialize (Into, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Serialize (Into, "catalog_type", Value.Catalog_Type);
      Serialize (Into, "default_country", Value.Default_Country);
      Serialize (Into, "default_availability", Value.Default_Availability);
      Into.Write_Entity ("status", Value.Status);
      Into.Write_Entity ("catalog_id", Value.Catalog_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedsCreateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedsCreateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "default_currency", Value.Default_Currency);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "format", Value.Format);
      Deserialize (Object, "default_locale", Value.Default_Locale);
      Deserialize (Object, "credentials", Value.Credentials);
      Swagger.Streams.Deserialize (Object, "location", Value.Location);
      Deserialize (Object, "preferred_processing_schedule", Value.Preferred_Processing_Schedule);
      Deserialize (Object, "catalog_type", Value.Catalog_Type);
      Deserialize (Object, "default_country", Value.Default_Country);
      Deserialize (Object, "default_availability", Value.Default_Availability);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "catalog_id", Value.Catalog_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedsCreateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedsCreateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdsAnalyticsCreateAsyncRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("start_date", Value.Start_Date);
      Into.Write_Entity ("end_date", Value.End_Date);
      Serialize (Into, "granularity", Value.Granularity);
      Serialize (Into, "click_window_days", Value.Click_Window_Days);
      Serialize (Into, "engagement_window_days", Value.Engagement_Window_Days);
      Serialize (Into, "view_window_days", Value.View_Window_Days);
      Serialize (Into, "conversion_report_time", Value.Conversion_Report_Time);
      Serialize (Into, "attribution_types", Value.Attribution_Types);
      Serialize (Into, "campaign_ids", Value.Campaign_Ids);
      Serialize (Into, "campaign_statuses", Value.Campaign_Statuses);
      Serialize (Into, "campaign_objective_types", Value.Campaign_Objective_Types);
      Serialize (Into, "ad_group_ids", Value.Ad_Group_Ids);
      Serialize (Into, "ad_group_statuses", Value.Ad_Group_Statuses);
      Serialize (Into, "ad_ids", Value.Ad_Ids);
      Serialize (Into, "ad_statuses", Value.Ad_Statuses);
      Serialize (Into, "product_group_ids", Value.Product_Group_Ids);
      Serialize (Into, "product_group_statuses", Value.Product_Group_Statuses);
      Serialize (Into, "product_item_ids", Value.Product_Item_Ids);
      Serialize (Into, "targeting_types", Value.Targeting_Types);
      Serialize (Into, "metrics_filters", Value.Metrics_Filters);
      Serialize (Into, "columns", Value.Columns);
      Serialize (Into, "level", Value.Level);
      Serialize (Into, "report_format", Value.Report_Format);
      if not Value.Primary_Sort.Is_Null then
         Into.Write_Entity ("primary_sort", Value.Primary_Sort);
      end if;
      if not Value.Start_Hour.Is_Null then
         Into.Write_Entity ("start_hour", Value.Start_Hour);
      end if;
      if not Value.End_Hour.Is_Null then
         Into.Write_Entity ("end_hour", Value.End_Hour);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdsAnalyticsCreateAsyncRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdsAnalyticsCreateAsyncRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "start_date", Value.Start_Date);
      Swagger.Streams.Deserialize (Object, "end_date", Value.End_Date);
      Deserialize (Object, "granularity", Value.Granularity);
      Deserialize (Object, "click_window_days", Value.Click_Window_Days);
      Deserialize (Object, "engagement_window_days", Value.Engagement_Window_Days);
      Deserialize (Object, "view_window_days", Value.View_Window_Days);
      Deserialize (Object, "conversion_report_time", Value.Conversion_Report_Time);
      Deserialize (Object, "attribution_types", Value.Attribution_Types);
      Swagger.Streams.Deserialize (Object, "campaign_ids", Value.Campaign_Ids);
      Deserialize (Object, "campaign_statuses", Value.Campaign_Statuses);
      Deserialize (Object, "campaign_objective_types", Value.Campaign_Objective_Types);
      Swagger.Streams.Deserialize (Object, "ad_group_ids", Value.Ad_Group_Ids);
      Deserialize (Object, "ad_group_statuses", Value.Ad_Group_Statuses);
      Swagger.Streams.Deserialize (Object, "ad_ids", Value.Ad_Ids);
      Deserialize (Object, "ad_statuses", Value.Ad_Statuses);
      Swagger.Streams.Deserialize (Object, "product_group_ids", Value.Product_Group_Ids);
      Deserialize (Object, "product_group_statuses", Value.Product_Group_Statuses);
      Swagger.Streams.Deserialize (Object, "product_item_ids", Value.Product_Item_Ids);
      Deserialize (Object, "targeting_types", Value.Targeting_Types);
      Deserialize (Object, "metrics_filters", Value.Metrics_Filters);
      Deserialize (Object, "columns", Value.Columns);
      Deserialize (Object, "level", Value.Level);
      Deserialize (Object, "report_format", Value.Report_Format);
      Swagger.Streams.Deserialize (Object, "primary_sort", Value.Primary_Sort);
      Swagger.Streams.Deserialize (Object, "start_hour", Value.Start_Hour);
      Swagger.Streams.Deserialize (Object, "end_hour", Value.End_Hour);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdsAnalyticsCreateAsyncRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdsAnalyticsCreateAsyncRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


end .Models;
