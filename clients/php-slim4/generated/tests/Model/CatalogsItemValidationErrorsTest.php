<?php

/**
 * Pinterest REST API
 * PHP version 7.4
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest's REST API
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */
namespace OpenAPIServer\Model;

use PHPUnit\Framework\TestCase;
use OpenAPIServer\Model\CatalogsItemValidationErrors;

/**
 * CatalogsItemValidationErrorsTest Class Doc Comment
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 *
 * @coversDefaultClass \OpenAPIServer\Model\CatalogsItemValidationErrors
 */
class CatalogsItemValidationErrorsTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "CatalogsItemValidationErrors"
     */
    public function testCatalogsItemValidationErrors()
    {
        $testCatalogsItemValidationErrors = new CatalogsItemValidationErrors();
        $namespacedClassname = CatalogsItemValidationErrors::getModelsNamespace() . '\\CatalogsItemValidationErrors';
        $this->assertSame('\\' . CatalogsItemValidationErrors::class, $namespacedClassname);
        $this->assertTrue(
            class_exists($namespacedClassname),
            sprintf('Assertion failed that "%s" class exists', $namespacedClassname)
        );
        self::markTestIncomplete(
            'Test of "CatalogsItemValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "aDULTINVALID"
     */
    public function testPropertyADULTINVALID()
    {
        self::markTestIncomplete(
            'Test of "aDULTINVALID" property in "CatalogsItemValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "aDWORDSFORMATINVALID"
     */
    public function testPropertyADWORDSFORMATINVALID()
    {
        self::markTestIncomplete(
            'Test of "aDWORDSFORMATINVALID" property in "CatalogsItemValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "aVAILABILITYINVALID"
     */
    public function testPropertyAVAILABILITYINVALID()
    {
        self::markTestIncomplete(
            'Test of "aVAILABILITYINVALID" property in "CatalogsItemValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "bLOCKLISTEDIMAGESIGNATURE"
     */
    public function testPropertyBLOCKLISTEDIMAGESIGNATURE()
    {
        self::markTestIncomplete(
            'Test of "bLOCKLISTEDIMAGESIGNATURE" property in "CatalogsItemValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "dESCRIPTIONMISSING"
     */
    public function testPropertyDESCRIPTIONMISSING()
    {
        self::markTestIncomplete(
            'Test of "dESCRIPTIONMISSING" property in "CatalogsItemValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "dUPLICATEPRODUCTS"
     */
    public function testPropertyDUPLICATEPRODUCTS()
    {
        self::markTestIncomplete(
            'Test of "dUPLICATEPRODUCTS" property in "CatalogsItemValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "iMAGELINKINVALID"
     */
    public function testPropertyIMAGELINKINVALID()
    {
        self::markTestIncomplete(
            'Test of "iMAGELINKINVALID" property in "CatalogsItemValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "iMAGELINKLENGTHTOOLONG"
     */
    public function testPropertyIMAGELINKLENGTHTOOLONG()
    {
        self::markTestIncomplete(
            'Test of "iMAGELINKLENGTHTOOLONG" property in "CatalogsItemValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "iMAGELINKMISSING"
     */
    public function testPropertyIMAGELINKMISSING()
    {
        self::markTestIncomplete(
            'Test of "iMAGELINKMISSING" property in "CatalogsItemValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "iNVALIDDOMAIN"
     */
    public function testPropertyINVALIDDOMAIN()
    {
        self::markTestIncomplete(
            'Test of "iNVALIDDOMAIN" property in "CatalogsItemValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "iTEMIDMISSING"
     */
    public function testPropertyITEMIDMISSING()
    {
        self::markTestIncomplete(
            'Test of "iTEMIDMISSING" property in "CatalogsItemValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "iTEMMAINIMAGEDOWNLOADFAILURE"
     */
    public function testPropertyITEMMAINIMAGEDOWNLOADFAILURE()
    {
        self::markTestIncomplete(
            'Test of "iTEMMAINIMAGEDOWNLOADFAILURE" property in "CatalogsItemValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "lINKFORMATINVALID"
     */
    public function testPropertyLINKFORMATINVALID()
    {
        self::markTestIncomplete(
            'Test of "lINKFORMATINVALID" property in "CatalogsItemValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "lINKLENGTHTOOLONG"
     */
    public function testPropertyLINKLENGTHTOOLONG()
    {
        self::markTestIncomplete(
            'Test of "lINKLENGTHTOOLONG" property in "CatalogsItemValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "lISTPRICEINVALID"
     */
    public function testPropertyLISTPRICEINVALID()
    {
        self::markTestIncomplete(
            'Test of "lISTPRICEINVALID" property in "CatalogsItemValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "mAXITEMSPERITEMGROUPEXCEEDED"
     */
    public function testPropertyMAXITEMSPERITEMGROUPEXCEEDED()
    {
        self::markTestIncomplete(
            'Test of "mAXITEMSPERITEMGROUPEXCEEDED" property in "CatalogsItemValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "pARSELINEERROR"
     */
    public function testPropertyPARSELINEERROR()
    {
        self::markTestIncomplete(
            'Test of "pARSELINEERROR" property in "CatalogsItemValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "pINJOINCONTENTUNSAFE"
     */
    public function testPropertyPINJOINCONTENTUNSAFE()
    {
        self::markTestIncomplete(
            'Test of "pINJOINCONTENTUNSAFE" property in "CatalogsItemValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "pRICECANNOTBEDETERMINED"
     */
    public function testPropertyPRICECANNOTBEDETERMINED()
    {
        self::markTestIncomplete(
            'Test of "pRICECANNOTBEDETERMINED" property in "CatalogsItemValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "pRICEMISSING"
     */
    public function testPropertyPRICEMISSING()
    {
        self::markTestIncomplete(
            'Test of "pRICEMISSING" property in "CatalogsItemValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "pRODUCTLINKMISSING"
     */
    public function testPropertyPRODUCTLINKMISSING()
    {
        self::markTestIncomplete(
            'Test of "pRODUCTLINKMISSING" property in "CatalogsItemValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "pRODUCTPRICEINVALID"
     */
    public function testPropertyPRODUCTPRICEINVALID()
    {
        self::markTestIncomplete(
            'Test of "pRODUCTPRICEINVALID" property in "CatalogsItemValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "tITLEMISSING"
     */
    public function testPropertyTITLEMISSING()
    {
        self::markTestIncomplete(
            'Test of "tITLEMISSING" property in "CatalogsItemValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test getOpenApiSchema static method
     * @covers ::getOpenApiSchema
     */
    public function testGetOpenApiSchema()
    {
        $schemaArr = CatalogsItemValidationErrors::getOpenApiSchema();
        $this->assertIsArray($schemaArr);
    }
}

