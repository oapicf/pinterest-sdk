/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BaseInviteDataResponse_invite_data.h
 *
 * Metadata for the invite/request.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BaseInviteDataResponse_invite_data_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BaseInviteDataResponse_invite_data_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Metadata for the invite/request.
/// </summary>
class  BaseInviteDataResponse_invite_data
    : public ModelBase
{
public:
    BaseInviteDataResponse_invite_data();
    virtual ~BaseInviteDataResponse_invite_data();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BaseInviteDataResponse_invite_data members

    /// <summary>
    /// The date and time when the invite/request will expire. Returned in milliseconds.
    /// </summary>
    int32_t getInviteExpiration() const;
    bool inviteExpirationIsSet() const;
    void unsetInvite_expiration();

    void setInviteExpiration(int32_t value);

    /// <summary>
    /// The current status of the invite. The invite can be in one of the following states PENDING, ACCEPTED, DECLINED, CANCELLED, EXPIRED.
    /// </summary>
    utility::string_t getInviteStatus() const;
    bool inviteStatusIsSet() const;
    void unsetInvite_status();

    void setInviteStatus(const utility::string_t& value);

    /// <summary>
    /// The type of invite. &lt;br&gt;&#39;MEMBER_INVITE&#39; is to invite a member to access your business assets. &lt;br&gt;&#39;PARTNER_INVITE&#39; is to invite a partner to access your business assets. &lt;br&gt;&#39;PARTNER_REQUEST&#39; is to request access a partner&#39;s business assets.
    /// </summary>
    utility::string_t getInviteType() const;
    bool inviteTypeIsSet() const;
    void unsetInvite_type();

    void setInviteType(const utility::string_t& value);

    /// <summary>
    /// The date and time the invite/request was last updated. Returned in milliseconds.
    /// </summary>
    int32_t getLastUpdatedTime() const;
    bool lastUpdatedTimeIsSet() const;
    void unsetLast_updated_time();

    void setLastUpdatedTime(int32_t value);

    /// <summary>
    /// The date and time the invite/request was sent/created. Returned in milliseconds.
    /// </summary>
    int32_t getSentAt() const;
    bool sentAtIsSet() const;
    void unsetSent_at();

    void setSentAt(int32_t value);


protected:
    int32_t m_Invite_expiration;
    bool m_Invite_expirationIsSet;
    utility::string_t m_Invite_status;
    bool m_Invite_statusIsSet;
    utility::string_t m_Invite_type;
    bool m_Invite_typeIsSet;
    int32_t m_Last_updated_time;
    bool m_Last_updated_timeIsSet;
    int32_t m_Sent_at;
    bool m_Sent_atIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BaseInviteDataResponse_invite_data_H_ */
