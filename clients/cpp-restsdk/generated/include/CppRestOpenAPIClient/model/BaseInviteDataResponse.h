/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BaseInviteDataResponse.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BaseInviteDataResponse_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BaseInviteDataResponse_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/BaseInviteDataResponse_invite_data.h"
#include "CppRestOpenAPIClient/model/BusinessAccessUserSummary.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class BaseInviteDataResponse_invite_data;
class BusinessAccessUserSummary;


/// <summary>
/// 
/// </summary>
class  BaseInviteDataResponse
    : public ModelBase
{
public:
    BaseInviteDataResponse();
    virtual ~BaseInviteDataResponse();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BaseInviteDataResponse members

    /// <summary>
    /// Unique identifier of the invite/request.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BaseInviteDataResponse_invite_data> getInviteData() const;
    bool inviteDataIsSet() const;
    void unsetInvite_data();

    void setInviteData(const std::shared_ptr<BaseInviteDataResponse_invite_data>& value);

    /// <summary>
    /// Indicates whether the invite/request was received.
    /// </summary>
    bool isIsReceivedInvite() const;
    bool isReceivedInviteIsSet() const;
    void unsetIs_received_invite();

    void setIsReceivedInvite(bool value);

    /// <summary>
    /// Metadata for the member/partner that was sent the invite/request.
    /// </summary>
    std::shared_ptr<BusinessAccessUserSummary> getUser() const;
    bool userIsSet() const;
    void unsetUser();

    void setUser(const std::shared_ptr<BusinessAccessUserSummary>& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    std::shared_ptr<BaseInviteDataResponse_invite_data> m_Invite_data;
    bool m_Invite_dataIsSet;
    bool m_Is_received_invite;
    bool m_Is_received_inviteIsSet;
    std::shared_ptr<BusinessAccessUserSummary> m_User;
    bool m_UserIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BaseInviteDataResponse_H_ */
