/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OptimizationGoalMetadata_conversion_tag_v3_goal_metadata.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows;


/// <summary>
/// 
/// </summary>
class  OptimizationGoalMetadata_conversion_tag_v3_goal_metadata
    : public ModelBase
{
public:
    OptimizationGoalMetadata_conversion_tag_v3_goal_metadata();
    virtual ~OptimizationGoalMetadata_conversion_tag_v3_goal_metadata();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OptimizationGoalMetadata_conversion_tag_v3_goal_metadata members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows> getAttributionWindows() const;
    bool attributionWindowsIsSet() const;
    void unsetAttribution_windows();

    void setAttributionWindows(const std::shared_ptr<OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getConversionEvent() const;
    bool conversionEventIsSet() const;
    void unsetConversion_event();

    void setConversionEvent(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getConversionTagId() const;
    bool conversionTagIdIsSet() const;
    void unsetConversion_tag_id();

    void setConversionTagId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCpaGoalValueInMicroCurrency() const;
    bool cpaGoalValueInMicroCurrencyIsSet() const;
    void unsetCpa_goal_value_in_micro_currency();

    void setCpaGoalValueInMicroCurrency(const utility::string_t& value);

    /// <summary>
    /// ROAS optimization is not supported
    /// </summary>
    bool isIsRoasOptimized() const;
    bool isRoasOptimizedIsSet() const;
    void unsetIs_roas_optimized();

    void setIsRoasOptimized(bool value);

    /// <summary>
    /// Conversion learning model type
    /// </summary>
    utility::string_t getLearningModeType() const;
    bool learningModeTypeIsSet() const;
    void unsetLearning_mode_type();

    void setLearningModeType(const utility::string_t& value);


protected:
    std::shared_ptr<OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows> m_Attribution_windows;
    bool m_Attribution_windowsIsSet;
    utility::string_t m_Conversion_event;
    bool m_Conversion_eventIsSet;
    utility::string_t m_Conversion_tag_id;
    bool m_Conversion_tag_idIsSet;
    utility::string_t m_Cpa_goal_value_in_micro_currency;
    bool m_Cpa_goal_value_in_micro_currencyIsSet;
    bool m_Is_roas_optimized;
    bool m_Is_roas_optimizedIsSet;
    utility::string_t m_Learning_mode_type;
    bool m_Learning_mode_typeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_H_ */
