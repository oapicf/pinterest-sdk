/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsItemValidationIssues.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_CatalogsItemValidationIssues_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_CatalogsItemValidationIssues_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/CatalogsItemValidationErrors.h"
#include "CppRestOpenAPIClient/model/CatalogsItemValidationWarnings.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class CatalogsItemValidationErrors;
class CatalogsItemValidationWarnings;


/// <summary>
/// 
/// </summary>
class  CatalogsItemValidationIssues
    : public ModelBase
{
public:
    CatalogsItemValidationIssues();
    virtual ~CatalogsItemValidationIssues();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CatalogsItemValidationIssues members

    /// <summary>
    /// Item number based on order of appearance in the Catalogs Feed. For example, &#39;0&#39; refers to first item found in a feed that was downloaded from a &#39;location&#39; specified during feed creation.
    /// </summary>
    int32_t getItemNumber() const;
    bool itemNumberIsSet() const;
    void unsetItem_number();

    void setItemNumber(int32_t value);

    /// <summary>
    /// The merchant-created unique ID that represents the product.
    /// </summary>
    utility::string_t getItemId() const;
    bool itemIdIsSet() const;
    void unsetItem_id();

    void setItemId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsItemValidationErrors> getErrors() const;
    bool errorsIsSet() const;
    void unsetErrors();

    void setErrors(const std::shared_ptr<CatalogsItemValidationErrors>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsItemValidationWarnings> getWarnings() const;
    bool warningsIsSet() const;
    void unsetWarnings();

    void setWarnings(const std::shared_ptr<CatalogsItemValidationWarnings>& value);


protected:
    int32_t m_Item_number;
    bool m_Item_numberIsSet;
    utility::string_t m_Item_id;
    bool m_Item_idIsSet;
    std::shared_ptr<CatalogsItemValidationErrors> m_Errors;
    bool m_ErrorsIsSet;
    std::shared_ptr<CatalogsItemValidationWarnings> m_Warnings;
    bool m_WarningsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_CatalogsItemValidationIssues_H_ */
