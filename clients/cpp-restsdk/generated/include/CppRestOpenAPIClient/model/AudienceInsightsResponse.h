/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AudienceInsightsResponse.h
 *
 * Audience interests and demographics.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_AudienceInsightsResponse_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_AudienceInsightsResponse_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/AudienceInsightType.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/AudienceCategory.h"
#include <vector>
#include "CppRestOpenAPIClient/model/AudienceDemographics.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class AudienceCategory;
class AudienceDemographics;


/// <summary>
/// Audience interests and demographics.
/// </summary>
class  AudienceInsightsResponse
    : public ModelBase
{
public:
    AudienceInsightsResponse();
    virtual ~AudienceInsightsResponse();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// AudienceInsightsResponse members

    /// <summary>
    /// Category interest distribution
    /// </summary>
    std::vector<std::shared_ptr<AudienceCategory>>& getCategories();
    bool categoriesIsSet() const;
    void unsetCategories();

    void setCategories(const std::vector<std::shared_ptr<AudienceCategory>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AudienceDemographics> getDemographics() const;
    bool demographicsIsSet() const;
    void unsetDemographics();

    void setDemographics(const std::shared_ptr<AudienceDemographics>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AudienceInsightType> getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const std::shared_ptr<AudienceInsightType>& value);

    /// <summary>
    /// Generation date
    /// </summary>
    utility::string_t getDate() const;
    bool dateIsSet() const;
    void unsetdate();

    void setDate(const utility::string_t& value);

    /// <summary>
    /// Population count.
    /// </summary>
    int32_t getSize() const;
    bool sizeIsSet() const;
    void unsetSize();

    void setSize(int32_t value);

    /// <summary>
    /// Indicates whether the audience size has been rounded up to the next highest upper boundary.
    /// </summary>
    bool isSizeIsUpperBound() const;
    bool sizeIsUpperBoundIsSet() const;
    void unsetSize_is_upper_bound();

    void setSizeIsUpperBound(bool value);


protected:
    std::vector<std::shared_ptr<AudienceCategory>> m_Categories;
    bool m_CategoriesIsSet;
    std::shared_ptr<AudienceDemographics> m_Demographics;
    bool m_DemographicsIsSet;
    std::shared_ptr<AudienceInsightType> m_Type;
    bool m_TypeIsSet;
    utility::string_t m_date;
    bool m_dateIsSet;
    int32_t m_Size;
    bool m_SizeIsSet;
    bool m_Size_is_upper_bound;
    bool m_Size_is_upper_boundIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_AudienceInsightsResponse_H_ */
