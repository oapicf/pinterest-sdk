/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsItemsRequest.h
 *
 * Request object of catalogs items
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_CatalogsItemsRequest_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_CatalogsItemsRequest_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/CatalogsItemsRequest_language.h"
#include "CppRestOpenAPIClient/model/Country.h"
#include "CppRestOpenAPIClient/model/CatalogsItemsPostFilters.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class CatalogsItemsPostFilters;


/// <summary>
/// Request object of catalogs items
/// </summary>
class  CatalogsItemsRequest
    : public ModelBase
{
public:
    CatalogsItemsRequest();
    virtual ~CatalogsItemsRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CatalogsItemsRequest members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Country> getCountry() const;
    bool countryIsSet() const;
    void unsetCountry();

    void setCountry(const std::shared_ptr<Country>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsItemsRequest_language> getLanguage() const;
    bool languageIsSet() const;
    void unsetLanguage();

    void setLanguage(const std::shared_ptr<CatalogsItemsRequest_language>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsItemsPostFilters> getFilters() const;
    bool filtersIsSet() const;
    void unsetFilters();

    void setFilters(const std::shared_ptr<CatalogsItemsPostFilters>& value);


protected:
    std::shared_ptr<Country> m_Country;
    bool m_CountryIsSet;
    std::shared_ptr<CatalogsItemsRequest_language> m_Language;
    bool m_LanguageIsSet;
    std::shared_ptr<CatalogsItemsPostFilters> m_Filters;
    bool m_FiltersIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_CatalogsItemsRequest_H_ */
