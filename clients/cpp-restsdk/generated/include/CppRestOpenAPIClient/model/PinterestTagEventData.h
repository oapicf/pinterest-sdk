/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PinterestTagEventData.h
 *
 * Optional for VISITOR &#x60;audience_type&#x60;. With the Pinterest tag, you can use event data to capture event details from your website. This object lists all the available predefined event data fields in the Pinterest tag. You can include these event data fields as part of a VISITOR audience’ s &#x60;rule&#x60;; however, you **must** specify an &#x60;event&#x60; for the &#x60;event_data&#x60; fields to be evaluated. Besides what’s listed, you can also create your own set of &#x60;event_data&#x60; fields and define their usages or purposes according to your website needs. However, the benefit of using the predefined event data fields is that we can provide various metrics based on those fields&#39; data.&lt;br&gt;Examples per &#x60;event&#x60; type:&lt;br&gt;&#x60;pagevisit&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;page_name\&quot;: \&quot;My online store 123 | view items | shoe\&quot; }&lt;br&gt;&#x60;signup&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;lead_type\&quot;: \&quot;New release promotion\&quot; }&lt;br&gt;&#x60;checkout&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;value\&quot;: 116, \&quot;order_quantity\&quot;: 2, \&quot;currency\&quot;: \&quot;USD\&quot;, \&quot;line_items\&quot;: [ { \&quot;product_name\&quot;: \&quot;Pillows (Set of 2)\&quot;, \&quot;product_id\&quot;: \&quot;11\&quot;, \&quot;product_price\&quot;: 48, \&quot;product_quantity\&quot;: 1 }, { \&quot;product_name\&quot;: \&quot;Pillows, Large (Set of 2)\&quot;, \&quot;product_id\&quot;: \&quot;15\&quot;, \&quot;product_price\&quot;: 68, \&quot;product_quantity\&quot;: 1 } ] }&lt;br&gt;&#x60;addtocart&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;value\&quot;: 499, \&quot;order_quantity\&quot;: 1, \&quot;currency\&quot;: \&quot;USD\&quot;, \&quot;line_items\&quot;: [ { \&quot;product_name\&quot;: \&quot;Red leather boots\&quot;, \&quot;product_id\&quot;: \&quot;3486\&quot;, \&quot;product_category\&quot;: \&quot;shoe\&quot;, \&quot;product_variant_id\&quot;: \&quot;JB11103000\&quot;, \&quot;product_price\&quot;: 499, \&quot;product_quantity\&quot;: \&quot;1\&quot; , \&quot;product_brand\&quot;: \&quot;My brand\&quot; }]}&lt;br&gt;&#x60;watchvideo&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;video_title\&quot;: \&quot;My Product Video 01\&quot; }&lt;br&gt;&#x60;lead&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;lead_type\&quot;: \&quot;Newsletter\&quot; }
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_PinterestTagEventData_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_PinterestTagEventData_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Currency.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/LineItem.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class LineItem;


/// <summary>
/// Optional for VISITOR &#x60;audience_type&#x60;. With the Pinterest tag, you can use event data to capture event details from your website. This object lists all the available predefined event data fields in the Pinterest tag. You can include these event data fields as part of a VISITOR audience’ s &#x60;rule&#x60;; however, you **must** specify an &#x60;event&#x60; for the &#x60;event_data&#x60; fields to be evaluated. Besides what’s listed, you can also create your own set of &#x60;event_data&#x60; fields and define their usages or purposes according to your website needs. However, the benefit of using the predefined event data fields is that we can provide various metrics based on those fields&#39; data.&lt;br&gt;Examples per &#x60;event&#x60; type:&lt;br&gt;&#x60;pagevisit&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;page_name\&quot;: \&quot;My online store 123 | view items | shoe\&quot; }&lt;br&gt;&#x60;signup&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;lead_type\&quot;: \&quot;New release promotion\&quot; }&lt;br&gt;&#x60;checkout&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;value\&quot;: 116, \&quot;order_quantity\&quot;: 2, \&quot;currency\&quot;: \&quot;USD\&quot;, \&quot;line_items\&quot;: [ { \&quot;product_name\&quot;: \&quot;Pillows (Set of 2)\&quot;, \&quot;product_id\&quot;: \&quot;11\&quot;, \&quot;product_price\&quot;: 48, \&quot;product_quantity\&quot;: 1 }, { \&quot;product_name\&quot;: \&quot;Pillows, Large (Set of 2)\&quot;, \&quot;product_id\&quot;: \&quot;15\&quot;, \&quot;product_price\&quot;: 68, \&quot;product_quantity\&quot;: 1 } ] }&lt;br&gt;&#x60;addtocart&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;value\&quot;: 499, \&quot;order_quantity\&quot;: 1, \&quot;currency\&quot;: \&quot;USD\&quot;, \&quot;line_items\&quot;: [ { \&quot;product_name\&quot;: \&quot;Red leather boots\&quot;, \&quot;product_id\&quot;: \&quot;3486\&quot;, \&quot;product_category\&quot;: \&quot;shoe\&quot;, \&quot;product_variant_id\&quot;: \&quot;JB11103000\&quot;, \&quot;product_price\&quot;: 499, \&quot;product_quantity\&quot;: \&quot;1\&quot; , \&quot;product_brand\&quot;: \&quot;My brand\&quot; }]}&lt;br&gt;&#x60;watchvideo&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;video_title\&quot;: \&quot;My Product Video 01\&quot; }&lt;br&gt;&#x60;lead&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;lead_type\&quot;: \&quot;Newsletter\&quot; }
/// </summary>
class  PinterestTagEventData
    : public ModelBase
{
public:
    PinterestTagEventData();
    virtual ~PinterestTagEventData();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PinterestTagEventData members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Currency> getCurrency() const;
    bool currencyIsSet() const;
    void unsetCurrency();

    void setCurrency(const std::shared_ptr<Currency>& value);

    /// <summary>
    /// Promotion code. For example, \&quot;Newsletter\&quot;.
    /// </summary>
    utility::string_t getLeadType() const;
    bool leadTypeIsSet() const;
    void unsetLead_type();

    void setLeadType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LineItem> getLineItems() const;
    bool lineItemsIsSet() const;
    void unsetLine_items();

    void setLineItems(const std::shared_ptr<LineItem>& value);

    /// <summary>
    /// Order ID. For example, \&quot;X-151481\&quot;.
    /// </summary>
    utility::string_t getOrderId() const;
    bool orderIdIsSet() const;
    void unsetOrder_id();

    void setOrderId(const utility::string_t& value);

    /// <summary>
    /// Order quantity. For example, 1.
    /// </summary>
    int32_t getOrderQuantity() const;
    bool orderQuantityIsSet() const;
    void unsetOrder_quantity();

    void setOrderQuantity(int32_t value);

    /// <summary>
    /// Page name. For example, \&quot;Our Favorite Pins on Pinterest\&quot;.
    /// </summary>
    utility::string_t getPageName() const;
    bool pageNameIsSet() const;
    void unsetPage_name();

    void setPageName(const utility::string_t& value);

    /// <summary>
    /// Promotion code. For example, \&quot;WINTER10\&quot;.
    /// </summary>
    utility::string_t getPromoCode() const;
    bool promoCodeIsSet() const;
    void unsetPromo_code();

    void setPromoCode(const utility::string_t& value);

    /// <summary>
    /// Property. For example, \&quot;Athleta\&quot;.
    /// </summary>
    utility::string_t getProperty() const;
    bool propertyIsSet() const;
    void unsetProperty();

    void setProperty(const utility::string_t& value);

    /// <summary>
    /// Search query string. For example, \&quot;boots\&quot;.
    /// </summary>
    utility::string_t getSearchQuery() const;
    bool searchQueryIsSet() const;
    void unsetSearch_query();

    void setSearchQuery(const utility::string_t& value);

    /// <summary>
    /// Product value. For example, \&quot;199.98\&quot;
    /// </summary>
    utility::string_t getValue() const;
    bool valueIsSet() const;
    void unsetValue();

    void setValue(const utility::string_t& value);

    /// <summary>
    /// Video title. For example, \&quot;How to style your Parker Boots\&quot;.
    /// </summary>
    utility::string_t getVideoTitle() const;
    bool videoTitleIsSet() const;
    void unsetVideo_title();

    void setVideoTitle(const utility::string_t& value);


protected:
    std::shared_ptr<Currency> m_Currency;
    bool m_CurrencyIsSet;
    utility::string_t m_Lead_type;
    bool m_Lead_typeIsSet;
    std::shared_ptr<LineItem> m_Line_items;
    bool m_Line_itemsIsSet;
    utility::string_t m_Order_id;
    bool m_Order_idIsSet;
    int32_t m_Order_quantity;
    bool m_Order_quantityIsSet;
    utility::string_t m_Page_name;
    bool m_Page_nameIsSet;
    utility::string_t m_Promo_code;
    bool m_Promo_codeIsSet;
    utility::string_t m_Property;
    bool m_PropertyIsSet;
    utility::string_t m_Search_query;
    bool m_Search_queryIsSet;
    utility::string_t m_Value;
    bool m_ValueIsSet;
    utility::string_t m_Video_title;
    bool m_Video_titleIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_PinterestTagEventData_H_ */
