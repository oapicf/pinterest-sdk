/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsReportDistributionStats.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_CatalogsReportDistributionStats_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_CatalogsReportDistributionStats_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// 
/// </summary>
class  CatalogsReportDistributionStats
    : public ModelBase
{
public:
    CatalogsReportDistributionStats();
    virtual ~CatalogsReportDistributionStats();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CatalogsReportDistributionStats members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getReportType() const;
    bool reportTypeIsSet() const;
    void unsetReport_type();

    void setReportType(const utility::string_t& value);

    /// <summary>
    /// ID of the catalog entity.
    /// </summary>
    utility::string_t getCatalogId() const;
    bool catalogIdIsSet() const;
    void unsetCatalog_id();

    void setCatalogId(const utility::string_t& value);

    /// <summary>
    /// The event code that a diagnostics aggregated number references
    /// </summary>
    int32_t getCode() const;
    bool codeIsSet() const;
    void unsetCode();

    void setCode(int32_t value);

    /// <summary>
    /// A human-friendly label for the event code (e.g, &#39;SPAM&#39;)
    /// </summary>
    utility::string_t getCodeLabel() const;
    bool codeLabelIsSet() const;
    void unsetCode_label();

    void setCodeLabel(const utility::string_t& value);

    /// <summary>
    /// Title message describing the diagnostic issue
    /// </summary>
    utility::string_t getMessage() const;
    bool messageIsSet() const;
    void unsetMessage();

    void setMessage(const utility::string_t& value);

    /// <summary>
    /// Number of occurrences of the issue
    /// </summary>
    int32_t getOccurrences() const;
    bool occurrencesIsSet() const;
    void unsetOccurrences();

    void setOccurrences(int32_t value);

    /// <summary>
    /// Indicates if issue makes items ineligible for ads distribution
    /// </summary>
    bool isIneligibleForAds() const;
    bool ineligibleForAdsIsSet() const;
    void unsetIneligible_for_ads();

    void setIneligibleForAds(bool value);

    /// <summary>
    /// Indicates if issue makes items ineligible for organic distribution
    /// </summary>
    bool isIneligibleForOrganic() const;
    bool ineligibleForOrganicIsSet() const;
    void unsetIneligible_for_organic();

    void setIneligibleForOrganic(bool value);


protected:
    utility::string_t m_Report_type;
    bool m_Report_typeIsSet;
    utility::string_t m_Catalog_id;
    bool m_Catalog_idIsSet;
    int32_t m_Code;
    bool m_CodeIsSet;
    utility::string_t m_Code_label;
    bool m_Code_labelIsSet;
    utility::string_t m_Message;
    bool m_MessageIsSet;
    int32_t m_Occurrences;
    bool m_OccurrencesIsSet;
    bool m_Ineligible_for_ads;
    bool m_Ineligible_for_adsIsSet;
    bool m_Ineligible_for_organic;
    bool m_Ineligible_for_organicIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_CatalogsReportDistributionStats_H_ */
