/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsHotelAddress.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_CatalogsHotelAddress_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_CatalogsHotelAddress_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// 
/// </summary>
class  CatalogsHotelAddress
    : public ModelBase
{
public:
    CatalogsHotelAddress();
    virtual ~CatalogsHotelAddress();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CatalogsHotelAddress members

    /// <summary>
    /// Primary street address of hotel.
    /// </summary>
    utility::string_t getAddr1() const;
    bool addr1IsSet() const;
    void unsetAddr1();

    void setAddr1(const utility::string_t& value);

    /// <summary>
    /// City where the hotel is located.
    /// </summary>
    utility::string_t getCity() const;
    bool cityIsSet() const;
    void unsetCity();

    void setCity(const utility::string_t& value);

    /// <summary>
    /// State, county, province, where the hotel is located.
    /// </summary>
    utility::string_t getRegion() const;
    bool regionIsSet() const;
    void unsetRegion();

    void setRegion(const utility::string_t& value);

    /// <summary>
    /// Country where the hotel is located.
    /// </summary>
    utility::string_t getCountry() const;
    bool countryIsSet() const;
    void unsetCountry();

    void setCountry(const utility::string_t& value);

    /// <summary>
    /// Required for countries with a postal code system. Postal or zip code of the hotel.
    /// </summary>
    utility::string_t getPostalCode() const;
    bool postalCodeIsSet() const;
    void unsetPostal_code();

    void setPostalCode(const utility::string_t& value);


protected:
    utility::string_t m_Addr1;
    bool m_Addr1IsSet;
    utility::string_t m_City;
    bool m_CityIsSet;
    utility::string_t m_Region;
    bool m_RegionIsSet;
    utility::string_t m_Country;
    bool m_CountryIsSet;
    utility::string_t m_Postal_code;
    bool m_Postal_codeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_CatalogsHotelAddress_H_ */
