/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ConversionEventsUserData.h
 *
 * Object containing customer information data. Note, It is required at least one of 1) em, 2) hashed_maids or 3) pair client_ip_address + client_user_agent.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ConversionEventsUserData_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ConversionEventsUserData_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/ConversionEventsUserData_anyOf_1.h"
#include "CppRestOpenAPIClient/model/ConversionEventsUserData_anyOf_2.h"
#include "CppRestOpenAPIClient/model/ConversionEventsUserData_anyOf.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Object containing customer information data. Note, It is required at least one of 1) em, 2) hashed_maids or 3) pair client_ip_address + client_user_agent.
/// </summary>
class  ConversionEventsUserData
    : public ModelBase
{
public:
    ConversionEventsUserData();
    virtual ~ConversionEventsUserData();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ConversionEventsUserData members

    /// <summary>
    /// Sha256 hashes of user&#39;s phone numbers, only digits with country code, area code, and number. Remove any symbols, letters, spaces and leading zeros. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
    /// </summary>
    std::vector<utility::string_t>& getPh();
    bool phIsSet() const;
    void unsetPh();

    void setPh(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Sha256 hashes of user&#39;s gender, in lowercase. Either \&quot;f\&quot; or \&quot;m\&quot; or \&quot;n\&quot; for non-binary gender. The string should be in the UTF-8 format.
    /// </summary>
    std::vector<utility::string_t>& getGe();
    bool geIsSet() const;
    void unsetGe();

    void setGe(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Sha256 hashes of user&#39;s date of birthday, given as year, month, and day. The string should be in the UTF-8 format.
    /// </summary>
    std::vector<utility::string_t>& getDb();
    bool dbIsSet() const;
    void unsetDb();

    void setDb(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Sha256 hashes of user&#39;s last name, in lowercase. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
    /// </summary>
    std::vector<utility::string_t>& getLn();
    bool lnIsSet() const;
    void unsetLn();

    void setLn(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Sha256 hashes of user&#39;s first name, in lowercase. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
    /// </summary>
    std::vector<utility::string_t>& getFn();
    bool fnIsSet() const;
    void unsetFn();

    void setFn(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Sha256 hashes of user&#39;s city, in lowercase, and without spaces or punctuation. User residency city (mostly billing). The string should be in the UTF-8 format.
    /// </summary>
    std::vector<utility::string_t>& getCt();
    bool ctIsSet() const;
    void unsetCt();

    void setCt(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Sha256 hashes of user&#39;s state, given as a two-letter code in lowercase. User residency state (mostly billing). The string should be in the UTF-8 format.
    /// </summary>
    std::vector<utility::string_t>& getSt();
    bool stIsSet() const;
    void unsetSt();

    void setSt(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Sha256 hashes of user&#39;s zipcode, only digits. User residency zipcode (mostly billing). The string should be in the UTF-8 format.
    /// </summary>
    std::vector<utility::string_t>& getZp();
    bool zpIsSet() const;
    void unsetZp();

    void setZp(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Sha256 hashes of two-character ISO-3166 country code indicating the user&#39;s country, in lowercase. The string should be in the UTF-8 format.
    /// </summary>
    std::vector<utility::string_t>& getCountry();
    bool countryIsSet() const;
    void unsetCountry();

    void setCountry(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Sha256 hashes of the unique id from the advertiser that identifies a user in their space, e.g. user id, loyalty id, etc. We highly recommend this on all events. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
    /// </summary>
    std::vector<utility::string_t>& getExternalId();
    bool externalIdIsSet() const;
    void unsetExternal_id();

    void setExternalId(const std::vector<utility::string_t>& value);

    /// <summary>
    /// The unique identifier stored in _epik cookie on your domain or &amp;epik&#x3D; query parameter in the URL. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA.
    /// </summary>
    utility::string_t getClickId() const;
    bool clickIdIsSet() const;
    void unsetClick_id();

    void setClickId(const utility::string_t& value);

    /// <summary>
    /// A unique identifier of visitors&#39; information defined by third party partners. e.g RampID
    /// </summary>
    utility::string_t getPartnerId() const;
    bool partnerIdIsSet() const;
    void unsetPartner_id();

    void setPartnerId(const utility::string_t& value);

    /// <summary>
    /// Sha256 hashes of lowercase version of user&#39;s email addresses. Used for matching. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
    /// </summary>
    std::vector<utility::string_t>& getEm();
    bool emIsSet() const;
    void unsetEm();

    void setEm(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Sha256 hashes of user&#39;s \&quot;Google Advertising IDs\&quot; (GAIDs) or \&quot;Apple&#39;s Identifier for Advertisers\&quot; (IDFAs). Used for matching. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
    /// </summary>
    std::vector<utility::string_t>& getHashedMaids();
    bool hashedMaidsIsSet() const;
    void unsetHashed_maids();

    void setHashedMaids(const std::vector<utility::string_t>& value);

    /// <summary>
    /// The user&#39;s IP address, which can be either in IPv4 or IPv6 format. Used for matching. We highly recommend this for all events. It may improve reporting performance such as ROAS/CPA.
    /// </summary>
    utility::string_t getClientIpAddress() const;
    bool clientIpAddressIsSet() const;
    void unsetClient_ip_address();

    void setClientIpAddress(const utility::string_t& value);

    /// <summary>
    /// The user agent string of the user&#39;s web browser. We highly recommend this for all events. It may improve reporting performance such as ROAS/CPA.
    /// </summary>
    utility::string_t getClientUserAgent() const;
    bool clientUserAgentIsSet() const;
    void unsetClient_user_agent();

    void setClientUserAgent(const utility::string_t& value);


protected:
    std::vector<utility::string_t> m_Ph;
    bool m_PhIsSet;
    std::vector<utility::string_t> m_Ge;
    bool m_GeIsSet;
    std::vector<utility::string_t> m_Db;
    bool m_DbIsSet;
    std::vector<utility::string_t> m_Ln;
    bool m_LnIsSet;
    std::vector<utility::string_t> m_Fn;
    bool m_FnIsSet;
    std::vector<utility::string_t> m_Ct;
    bool m_CtIsSet;
    std::vector<utility::string_t> m_St;
    bool m_StIsSet;
    std::vector<utility::string_t> m_Zp;
    bool m_ZpIsSet;
    std::vector<utility::string_t> m_Country;
    bool m_CountryIsSet;
    std::vector<utility::string_t> m_External_id;
    bool m_External_idIsSet;
    utility::string_t m_Click_id;
    bool m_Click_idIsSet;
    utility::string_t m_Partner_id;
    bool m_Partner_idIsSet;
    std::vector<utility::string_t> m_Em;
    bool m_EmIsSet;
    std::vector<utility::string_t> m_Hashed_maids;
    bool m_Hashed_maidsIsSet;
    utility::string_t m_Client_ip_address;
    bool m_Client_ip_addressIsSet;
    utility::string_t m_Client_user_agent;
    bool m_Client_user_agentIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ConversionEventsUserData_H_ */
