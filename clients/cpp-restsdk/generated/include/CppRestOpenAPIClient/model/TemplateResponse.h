/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TemplateResponse.h
 *
 * Template fields
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_TemplateResponse_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_TemplateResponse_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Granularity.h"
#include "CppRestOpenAPIClient/model/TemplateResponse_date_range.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/MetricsReportingLevel.h"
#include "CppRestOpenAPIClient/model/DataOutputFormat.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class TemplateResponse_date_range;


/// <summary>
/// Template fields
/// </summary>
class  TemplateResponse
    : public ModelBase
{
public:
    TemplateResponse();
    virtual ~TemplateResponse();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// TemplateResponse members

    /// <summary>
    /// Template ID
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// ID of the Ad Account that owns the template
    /// </summary>
    utility::string_t getAdAccountId() const;
    bool adAccountIdIsSet() const;
    void unsetAd_account_id();

    void setAdAccountId(const utility::string_t& value);

    /// <summary>
    /// IDs of the Ad Accounts that have access to this template
    /// </summary>
    std::vector<utility::string_t>& getAdAccountIds();
    bool adAccountIdsIsSet() const;
    void unsetAd_account_ids();

    void setAdAccountIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// ID of the user who created the template
    /// </summary>
    utility::string_t getUserId() const;
    bool userIdIsSet() const;
    void unsetUser_id();

    void setUserId(const utility::string_t& value);

    /// <summary>
    /// Template Name
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// The number of days prior to the day the report will be delivered at which the report will start
    /// </summary>
    double getReportStartRelativeDaysInPast() const;
    bool reportStartRelativeDaysInPastIsSet() const;
    void unsetReport_start_relative_days_in_past();

    void setReportStartRelativeDaysInPast(double value);

    /// <summary>
    /// The number of days prior to the day the report will be delivered at which the report will end
    /// </summary>
    double getReportEndRelativeDaysInPast() const;
    bool reportEndRelativeDaysInPastIsSet() const;
    void unsetReport_end_relative_days_in_past();

    void setReportEndRelativeDaysInPast(double value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TemplateResponse_date_range> getDateRange() const;
    bool dateRangeIsSet() const;
    void unsetDate_range();

    void setDateRange(const std::shared_ptr<TemplateResponse_date_range>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<MetricsReportingLevel> getReportLevel() const;
    bool reportLevelIsSet() const;
    void unsetReport_level();

    void setReportLevel(const std::shared_ptr<MetricsReportingLevel>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DataOutputFormat> getReportFormat() const;
    bool reportFormatIsSet() const;
    void unsetReport_format();

    void setReportFormat(const std::shared_ptr<DataOutputFormat>& value);

    /// <summary>
    /// A list of columns to be included in the report
    /// </summary>
    std::vector<utility::string_t>& getColumns();
    bool columnsIsSet() const;
    void unsetColumns();

    void setColumns(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Granularity> getGranularity() const;
    bool granularityIsSet() const;
    void unsetGranularity();

    void setGranularity(const std::shared_ptr<Granularity>& value);

    /// <summary>
    /// The length of the sliding window over which view conversions will be attributed
    /// </summary>
    double getViewWindowDays() const;
    bool viewWindowDaysIsSet() const;
    void unsetView_window_days();

    void setViewWindowDays(double value);

    /// <summary>
    /// The length of the sliding window over which click conversions will be attributed
    /// </summary>
    double getClickWindowDays() const;
    bool clickWindowDaysIsSet() const;
    void unsetClick_window_days();

    void setClickWindowDays(double value);

    /// <summary>
    /// The length of the sliding window over which engagement conversions will be attributed
    /// </summary>
    double getEngagementWindowDays() const;
    bool engagementWindowDaysIsSet() const;
    void unsetEngagement_window_days();

    void setEngagementWindowDays(double value);

    /// <summary>
    /// Conversion report time type
    /// </summary>
    utility::string_t getConversionReportTimeType() const;
    bool conversionReportTimeTypeIsSet() const;
    void unsetConversion_report_time_type();

    void setConversionReportTimeType(const utility::string_t& value);

    /// <summary>
    /// A JSON representation of any filters to be applied before returning report data. Each filter object should contain all of the following fields:&lt;br&gt; \&quot;field\&quot;: The column name&lt;br&gt; \&quot;operator\&quot;: The operator. Allowed operators: [\&quot;&#x3D;\&quot;, \&quot;!&#x3D;\&quot;, \&quot;in\&quot;, \&quot;not_in\&quot;, \&quot;~\&quot;, \&quot;&gt;\&quot;, \&quot;&lt;\&quot;, \&quot;contains_substring\&quot;]&lt;br&gt; \&quot;value\&quot;: A single value or a list of values
    /// </summary>
    utility::string_t getFiltersJson() const;
    bool filtersJsonIsSet() const;
    void unsetFilters_json();

    void setFiltersJson(const utility::string_t& value);

    /// <summary>
    /// A boolean value that indicates if the user owns the template
    /// </summary>
    bool isIsOwnedByUser() const;
    bool isOwnedByUserIsSet() const;
    void unsetIs_owned_by_user();

    void setIsOwnedByUser(bool value);

    /// <summary>
    /// A boolean value that indicates if this template has been used to create a scheduled report
    /// </summary>
    bool isIsScheduled() const;
    bool isScheduledIsSet() const;
    void unsetIs_scheduled();

    void setIsScheduled(bool value);

    /// <summary>
    /// The surface used to create this template
    /// </summary>
    utility::string_t getCreationSource() const;
    bool creationSourceIsSet() const;
    void unsetCreation_source();

    void setCreationSource(const utility::string_t& value);

    /// <summary>
    /// A boolean that indicates if the template has been deleted
    /// </summary>
    bool isIsDeleted() const;
    bool isDeletedIsSet() const;
    void unsetIs_deleted();

    void setIsDeleted(bool value);

    /// <summary>
    /// Time of last update in seconds since Unix epoch
    /// </summary>
    double getUpdatedTime() const;
    bool updatedTimeIsSet() const;
    void unsetUpdated_time();

    void setUpdatedTime(double value);

    /// <summary>
    /// A list of custom column IDs
    /// </summary>
    std::vector<std::shared_ptr<utility::string_t>>& getCustomColumnIds();
    bool customColumnIdsIsSet() const;
    void unsetCustom_column_ids();

    void setCustomColumnIds(const std::vector<std::shared_ptr<utility::string_t>>& value);

    /// <summary>
    /// Reporting template type
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const utility::string_t& value);

    /// <summary>
    /// The filter on the conversion ingestion source method for conversion metrics
    /// </summary>
    std::vector<utility::string_t>& getIngestionSources();
    bool ingestionSourcesIsSet() const;
    void unsetIngestion_sources();

    void setIngestionSources(const std::vector<utility::string_t>& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Ad_account_id;
    bool m_Ad_account_idIsSet;
    std::vector<utility::string_t> m_Ad_account_ids;
    bool m_Ad_account_idsIsSet;
    utility::string_t m_User_id;
    bool m_User_idIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    double m_Report_start_relative_days_in_past;
    bool m_Report_start_relative_days_in_pastIsSet;
    double m_Report_end_relative_days_in_past;
    bool m_Report_end_relative_days_in_pastIsSet;
    std::shared_ptr<TemplateResponse_date_range> m_Date_range;
    bool m_Date_rangeIsSet;
    std::shared_ptr<MetricsReportingLevel> m_Report_level;
    bool m_Report_levelIsSet;
    std::shared_ptr<DataOutputFormat> m_Report_format;
    bool m_Report_formatIsSet;
    std::vector<utility::string_t> m_Columns;
    bool m_ColumnsIsSet;
    std::shared_ptr<Granularity> m_Granularity;
    bool m_GranularityIsSet;
    double m_View_window_days;
    bool m_View_window_daysIsSet;
    double m_Click_window_days;
    bool m_Click_window_daysIsSet;
    double m_Engagement_window_days;
    bool m_Engagement_window_daysIsSet;
    utility::string_t m_Conversion_report_time_type;
    bool m_Conversion_report_time_typeIsSet;
    utility::string_t m_Filters_json;
    bool m_Filters_jsonIsSet;
    bool m_Is_owned_by_user;
    bool m_Is_owned_by_userIsSet;
    bool m_Is_scheduled;
    bool m_Is_scheduledIsSet;
    utility::string_t m_Creation_source;
    bool m_Creation_sourceIsSet;
    bool m_Is_deleted;
    bool m_Is_deletedIsSet;
    double m_Updated_time;
    bool m_Updated_timeIsSet;
    std::vector<std::shared_ptr<utility::string_t>> m_Custom_column_ids;
    bool m_Custom_column_idsIsSet;
    utility::string_t m_Type;
    bool m_TypeIsSet;
    std::vector<utility::string_t> m_Ingestion_sources;
    bool m_Ingestion_sourcesIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_TemplateResponse_H_ */
