/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Board.h
 *
 * Board
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Board_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Board_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/Board_media.h"
#include "CppRestOpenAPIClient/model/BoardOwner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Board_media;
class BoardOwner;


/// <summary>
/// Board
/// </summary>
class  Board
    : public ModelBase
{
public:
    Board();
    virtual ~Board();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Board members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Date and time of board creation.
    /// </summary>
    utility::datetime getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreated_at();

    void setCreatedAt(const utility::datetime& value);

    /// <summary>
    /// Date and time of last board pins modified.
    /// </summary>
    utility::datetime getBoardPinsModifiedAt() const;
    bool boardPinsModifiedAtIsSet() const;
    void unsetBoard_pins_modified_at();

    void setBoardPinsModifiedAt(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// Count of collaborators on the board.
    /// </summary>
    int32_t getCollaboratorCount() const;
    bool collaboratorCountIsSet() const;
    void unsetCollaborator_count();

    void setCollaboratorCount(int32_t value);

    /// <summary>
    /// Count of pins on the board.
    /// </summary>
    int32_t getPinCount() const;
    bool pinCountIsSet() const;
    void unsetPin_count();

    void setPinCount(int32_t value);

    /// <summary>
    /// Board follower count.
    /// </summary>
    int32_t getFollowerCount() const;
    bool followerCountIsSet() const;
    void unsetFollower_count();

    void setFollowerCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Board_media> getMedia() const;
    bool mediaIsSet() const;
    void unsetMedia();

    void setMedia(const std::shared_ptr<Board_media>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BoardOwner> getOwner() const;
    bool ownerIsSet() const;
    void unsetOwner();

    void setOwner(const std::shared_ptr<BoardOwner>& value);

    /// <summary>
    /// Privacy setting for a board. Learn more about &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/article/secret-boards\&quot;&gt;secret boards&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/protected-boards\&quot;&gt;protected boards&lt;/a&gt;
    /// </summary>
    utility::string_t getPrivacy() const;
    bool privacyIsSet() const;
    void unsetPrivacy();

    void setPrivacy(const utility::string_t& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::datetime m_Created_at;
    bool m_Created_atIsSet;
    utility::datetime m_Board_pins_modified_at;
    bool m_Board_pins_modified_atIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    int32_t m_Collaborator_count;
    bool m_Collaborator_countIsSet;
    int32_t m_Pin_count;
    bool m_Pin_countIsSet;
    int32_t m_Follower_count;
    bool m_Follower_countIsSet;
    std::shared_ptr<Board_media> m_Media;
    bool m_MediaIsSet;
    std::shared_ptr<BoardOwner> m_Owner;
    bool m_OwnerIsSet;
    utility::string_t m_Privacy;
    bool m_PrivacyIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Board_H_ */
