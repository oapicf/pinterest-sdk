/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TargetingTemplateAudienceSizing.h
 *
 * Gets an audience size estimate for a set of given targeting spec data. &lt;p&gt;Returns:&lt;/p&gt; An object containing an audience size estimate that has a reach estimate (number of unique users) against the given targeting template. This by default provides a monthly estimate. 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_TargetingTemplateAudienceSizing_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_TargetingTemplateAudienceSizing_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/TargetingTemplateAudienceSizing_reach_estimate.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class TargetingTemplateAudienceSizing_reach_estimate;


/// <summary>
/// Gets an audience size estimate for a set of given targeting spec data. &lt;p&gt;Returns:&lt;/p&gt; An object containing an audience size estimate that has a reach estimate (number of unique users) against the given targeting template. This by default provides a monthly estimate. 
/// </summary>
class  TargetingTemplateAudienceSizing
    : public ModelBase
{
public:
    TargetingTemplateAudienceSizing();
    virtual ~TargetingTemplateAudienceSizing();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// TargetingTemplateAudienceSizing members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TargetingTemplateAudienceSizing_reach_estimate> getReachEstimate() const;
    bool reachEstimateIsSet() const;
    void unsetReach_estimate();

    void setReachEstimate(const std::shared_ptr<TargetingTemplateAudienceSizing_reach_estimate>& value);


protected:
    std::shared_ptr<TargetingTemplateAudienceSizing_reach_estimate> m_Reach_estimate;
    bool m_Reach_estimateIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_TargetingTemplateAudienceSizing_H_ */
