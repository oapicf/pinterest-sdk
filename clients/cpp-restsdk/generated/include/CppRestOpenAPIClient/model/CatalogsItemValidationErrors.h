/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsItemValidationErrors.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_CatalogsItemValidationErrors_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_CatalogsItemValidationErrors_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/CatalogsItemValidationDetails.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class CatalogsItemValidationDetails;


/// <summary>
/// 
/// </summary>
class  CatalogsItemValidationErrors
    : public ModelBase
{
public:
    CatalogsItemValidationErrors();
    virtual ~CatalogsItemValidationErrors();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CatalogsItemValidationErrors members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsItemValidationDetails> getADULTINVALID() const;
    bool aDULTINVALIDIsSet() const;
    void unsetADULT_INVALID();

    void setADULTINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsItemValidationDetails> getADWORDSFORMATINVALID() const;
    bool aDWORDSFORMATINVALIDIsSet() const;
    void unsetADWORDS_FORMAT_INVALID();

    void setADWORDSFORMATINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsItemValidationDetails> getAVAILABILITYINVALID() const;
    bool aVAILABILITYINVALIDIsSet() const;
    void unsetAVAILABILITY_INVALID();

    void setAVAILABILITYINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsItemValidationDetails> getBLOCKLISTEDIMAGESIGNATURE() const;
    bool bLOCKLISTEDIMAGESIGNATUREIsSet() const;
    void unsetBLOCKLISTED_IMAGE_SIGNATURE();

    void setBLOCKLISTEDIMAGESIGNATURE(const std::shared_ptr<CatalogsItemValidationDetails>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsItemValidationDetails> getDESCRIPTIONMISSING() const;
    bool dESCRIPTIONMISSINGIsSet() const;
    void unsetDESCRIPTION_MISSING();

    void setDESCRIPTIONMISSING(const std::shared_ptr<CatalogsItemValidationDetails>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsItemValidationDetails> getDUPLICATEPRODUCTS() const;
    bool dUPLICATEPRODUCTSIsSet() const;
    void unsetDUPLICATE_PRODUCTS();

    void setDUPLICATEPRODUCTS(const std::shared_ptr<CatalogsItemValidationDetails>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsItemValidationDetails> getIMAGELINKINVALID() const;
    bool iMAGELINKINVALIDIsSet() const;
    void unsetIMAGE_LINK_INVALID();

    void setIMAGELINKINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsItemValidationDetails> getIMAGELINKLENGTHTOOLONG() const;
    bool iMAGELINKLENGTHTOOLONGIsSet() const;
    void unsetIMAGE_LINK_LENGTH_TOO_LONG();

    void setIMAGELINKLENGTHTOOLONG(const std::shared_ptr<CatalogsItemValidationDetails>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsItemValidationDetails> getIMAGELINKMISSING() const;
    bool iMAGELINKMISSINGIsSet() const;
    void unsetIMAGE_LINK_MISSING();

    void setIMAGELINKMISSING(const std::shared_ptr<CatalogsItemValidationDetails>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsItemValidationDetails> getINVALIDDOMAIN() const;
    bool iNVALIDDOMAINIsSet() const;
    void unsetINVALID_DOMAIN();

    void setINVALIDDOMAIN(const std::shared_ptr<CatalogsItemValidationDetails>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsItemValidationDetails> getITEMIDMISSING() const;
    bool iTEMIDMISSINGIsSet() const;
    void unsetITEMID_MISSING();

    void setITEMIDMISSING(const std::shared_ptr<CatalogsItemValidationDetails>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsItemValidationDetails> getITEMMAINIMAGEDOWNLOADFAILURE() const;
    bool iTEMMAINIMAGEDOWNLOADFAILUREIsSet() const;
    void unsetITEM_MAIN_IMAGE_DOWNLOAD_FAILURE();

    void setITEMMAINIMAGEDOWNLOADFAILURE(const std::shared_ptr<CatalogsItemValidationDetails>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsItemValidationDetails> getLINKFORMATINVALID() const;
    bool lINKFORMATINVALIDIsSet() const;
    void unsetLINK_FORMAT_INVALID();

    void setLINKFORMATINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsItemValidationDetails> getLINKLENGTHTOOLONG() const;
    bool lINKLENGTHTOOLONGIsSet() const;
    void unsetLINK_LENGTH_TOO_LONG();

    void setLINKLENGTHTOOLONG(const std::shared_ptr<CatalogsItemValidationDetails>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsItemValidationDetails> getLISTPRICEINVALID() const;
    bool lISTPRICEINVALIDIsSet() const;
    void unsetLIST_PRICE_INVALID();

    void setLISTPRICEINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsItemValidationDetails> getMAXITEMSPERITEMGROUPEXCEEDED() const;
    bool mAXITEMSPERITEMGROUPEXCEEDEDIsSet() const;
    void unsetMAX_ITEMS_PER_ITEM_GROUP_EXCEEDED();

    void setMAXITEMSPERITEMGROUPEXCEEDED(const std::shared_ptr<CatalogsItemValidationDetails>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsItemValidationDetails> getPARSELINEERROR() const;
    bool pARSELINEERRORIsSet() const;
    void unsetPARSE_LINE_ERROR();

    void setPARSELINEERROR(const std::shared_ptr<CatalogsItemValidationDetails>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsItemValidationDetails> getPINJOINCONTENTUNSAFE() const;
    bool pINJOINCONTENTUNSAFEIsSet() const;
    void unsetPINJOIN_CONTENT_UNSAFE();

    void setPINJOINCONTENTUNSAFE(const std::shared_ptr<CatalogsItemValidationDetails>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsItemValidationDetails> getPRICECANNOTBEDETERMINED() const;
    bool pRICECANNOTBEDETERMINEDIsSet() const;
    void unsetPRICE_CANNOT_BE_DETERMINED();

    void setPRICECANNOTBEDETERMINED(const std::shared_ptr<CatalogsItemValidationDetails>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsItemValidationDetails> getPRICEMISSING() const;
    bool pRICEMISSINGIsSet() const;
    void unsetPRICE_MISSING();

    void setPRICEMISSING(const std::shared_ptr<CatalogsItemValidationDetails>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsItemValidationDetails> getPRODUCTLINKMISSING() const;
    bool pRODUCTLINKMISSINGIsSet() const;
    void unsetPRODUCT_LINK_MISSING();

    void setPRODUCTLINKMISSING(const std::shared_ptr<CatalogsItemValidationDetails>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsItemValidationDetails> getPRODUCTPRICEINVALID() const;
    bool pRODUCTPRICEINVALIDIsSet() const;
    void unsetPRODUCT_PRICE_INVALID();

    void setPRODUCTPRICEINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsItemValidationDetails> getTITLEMISSING() const;
    bool tITLEMISSINGIsSet() const;
    void unsetTITLE_MISSING();

    void setTITLEMISSING(const std::shared_ptr<CatalogsItemValidationDetails>& value);


protected:
    std::shared_ptr<CatalogsItemValidationDetails> m_ADULT_INVALID;
    bool m_ADULT_INVALIDIsSet;
    std::shared_ptr<CatalogsItemValidationDetails> m_ADWORDS_FORMAT_INVALID;
    bool m_ADWORDS_FORMAT_INVALIDIsSet;
    std::shared_ptr<CatalogsItemValidationDetails> m_AVAILABILITY_INVALID;
    bool m_AVAILABILITY_INVALIDIsSet;
    std::shared_ptr<CatalogsItemValidationDetails> m_BLOCKLISTED_IMAGE_SIGNATURE;
    bool m_BLOCKLISTED_IMAGE_SIGNATUREIsSet;
    std::shared_ptr<CatalogsItemValidationDetails> m_DESCRIPTION_MISSING;
    bool m_DESCRIPTION_MISSINGIsSet;
    std::shared_ptr<CatalogsItemValidationDetails> m_DUPLICATE_PRODUCTS;
    bool m_DUPLICATE_PRODUCTSIsSet;
    std::shared_ptr<CatalogsItemValidationDetails> m_IMAGE_LINK_INVALID;
    bool m_IMAGE_LINK_INVALIDIsSet;
    std::shared_ptr<CatalogsItemValidationDetails> m_IMAGE_LINK_LENGTH_TOO_LONG;
    bool m_IMAGE_LINK_LENGTH_TOO_LONGIsSet;
    std::shared_ptr<CatalogsItemValidationDetails> m_IMAGE_LINK_MISSING;
    bool m_IMAGE_LINK_MISSINGIsSet;
    std::shared_ptr<CatalogsItemValidationDetails> m_INVALID_DOMAIN;
    bool m_INVALID_DOMAINIsSet;
    std::shared_ptr<CatalogsItemValidationDetails> m_ITEMID_MISSING;
    bool m_ITEMID_MISSINGIsSet;
    std::shared_ptr<CatalogsItemValidationDetails> m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE;
    bool m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILUREIsSet;
    std::shared_ptr<CatalogsItemValidationDetails> m_LINK_FORMAT_INVALID;
    bool m_LINK_FORMAT_INVALIDIsSet;
    std::shared_ptr<CatalogsItemValidationDetails> m_LINK_LENGTH_TOO_LONG;
    bool m_LINK_LENGTH_TOO_LONGIsSet;
    std::shared_ptr<CatalogsItemValidationDetails> m_LIST_PRICE_INVALID;
    bool m_LIST_PRICE_INVALIDIsSet;
    std::shared_ptr<CatalogsItemValidationDetails> m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED;
    bool m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDEDIsSet;
    std::shared_ptr<CatalogsItemValidationDetails> m_PARSE_LINE_ERROR;
    bool m_PARSE_LINE_ERRORIsSet;
    std::shared_ptr<CatalogsItemValidationDetails> m_PINJOIN_CONTENT_UNSAFE;
    bool m_PINJOIN_CONTENT_UNSAFEIsSet;
    std::shared_ptr<CatalogsItemValidationDetails> m_PRICE_CANNOT_BE_DETERMINED;
    bool m_PRICE_CANNOT_BE_DETERMINEDIsSet;
    std::shared_ptr<CatalogsItemValidationDetails> m_PRICE_MISSING;
    bool m_PRICE_MISSINGIsSet;
    std::shared_ptr<CatalogsItemValidationDetails> m_PRODUCT_LINK_MISSING;
    bool m_PRODUCT_LINK_MISSINGIsSet;
    std::shared_ptr<CatalogsItemValidationDetails> m_PRODUCT_PRICE_INVALID;
    bool m_PRODUCT_PRICE_INVALIDIsSet;
    std::shared_ptr<CatalogsItemValidationDetails> m_TITLE_MISSING;
    bool m_TITLE_MISSINGIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_CatalogsItemValidationErrors_H_ */
