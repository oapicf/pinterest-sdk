/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdsAnalyticsCreateAsyncRequest.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_AdsAnalyticsCreateAsyncRequest_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_AdsAnalyticsCreateAsyncRequest_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/AdsAnalyticsTargetingType.h"
#include "CppRestOpenAPIClient/model/AdsAnalyticsMetricsFilter.h"
#include "CppRestOpenAPIClient/model/Granularity.h"
#include "CppRestOpenAPIClient/model/ProductGroupSummaryStatus.h"
#include <vector>
#include "CppRestOpenAPIClient/model/CampaignSummaryStatus.h"
#include "CppRestOpenAPIClient/model/PinPromotionSummaryStatus.h"
#include "CppRestOpenAPIClient/model/ConversionAttributionWindowDays.h"
#include "CppRestOpenAPIClient/model/AdGroupSummaryStatus.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/MetricsReportingLevel.h"
#include "CppRestOpenAPIClient/model/ReportingColumnAsync.h"
#include "CppRestOpenAPIClient/model/DataOutputFormat.h"
#include "CppRestOpenAPIClient/model/ObjectiveType.h"
#include "CppRestOpenAPIClient/model/ConversionReportTimeType.h"
#include "CppRestOpenAPIClient/model/ConversionReportAttributionType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class AdsAnalyticsMetricsFilter;


/// <summary>
/// 
/// </summary>
class  AdsAnalyticsCreateAsyncRequest
    : public ModelBase
{
public:
    AdsAnalyticsCreateAsyncRequest();
    virtual ~AdsAnalyticsCreateAsyncRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// AdsAnalyticsCreateAsyncRequest members

    /// <summary>
    /// Metric report start date (UTC). Format: YYYY-MM-DD
    /// </summary>
    utility::string_t getStartDate() const;
    bool startDateIsSet() const;
    void unsetStart_date();

    void setStartDate(const utility::string_t& value);

    /// <summary>
    /// Metric report end date (UTC). Format: YYYY-MM-DD
    /// </summary>
    utility::string_t getEndDate() const;
    bool endDateIsSet() const;
    void unsetEnd_date();

    void setEndDate(const utility::string_t& value);

    /// <summary>
    /// TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
    /// </summary>
    std::shared_ptr<Granularity> getGranularity() const;
    bool granularityIsSet() const;
    void unsetGranularity();

    void setGranularity(const std::shared_ptr<Granularity>& value);

    /// <summary>
    /// Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
    /// </summary>
    std::shared_ptr<ConversionAttributionWindowDays> getClickWindowDays() const;
    bool clickWindowDaysIsSet() const;
    void unsetClick_window_days();

    void setClickWindowDays(const std::shared_ptr<ConversionAttributionWindowDays>& value);

    /// <summary>
    /// Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
    /// </summary>
    std::shared_ptr<ConversionAttributionWindowDays> getEngagementWindowDays() const;
    bool engagementWindowDaysIsSet() const;
    void unsetEngagement_window_days();

    void setEngagementWindowDays(const std::shared_ptr<ConversionAttributionWindowDays>& value);

    /// <summary>
    /// Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
    /// </summary>
    std::shared_ptr<ConversionAttributionWindowDays> getViewWindowDays() const;
    bool viewWindowDaysIsSet() const;
    void unsetView_window_days();

    void setViewWindowDays(const std::shared_ptr<ConversionAttributionWindowDays>& value);

    /// <summary>
    /// The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
    /// </summary>
    std::shared_ptr<ConversionReportTimeType> getConversionReportTime() const;
    bool conversionReportTimeIsSet() const;
    void unsetConversion_report_time();

    void setConversionReportTime(const std::shared_ptr<ConversionReportTimeType>& value);

    /// <summary>
    /// List of types of attribution for the conversion report
    /// </summary>
    std::vector<std::shared_ptr<ConversionReportAttributionType>>& getAttributionTypes();
    bool attributionTypesIsSet() const;
    void unsetAttribution_types();

    void setAttributionTypes(const std::vector<std::shared_ptr<ConversionReportAttributionType>>& value);

    /// <summary>
    /// List of campaign ids
    /// </summary>
    std::vector<utility::string_t>& getCampaignIds();
    bool campaignIdsIsSet() const;
    void unsetCampaign_ids();

    void setCampaignIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// List of status values for filtering
    /// </summary>
    std::vector<std::shared_ptr<CampaignSummaryStatus>>& getCampaignStatuses();
    bool campaignStatusesIsSet() const;
    void unsetCampaign_statuses();

    void setCampaignStatuses(const std::vector<std::shared_ptr<CampaignSummaryStatus>>& value);

    /// <summary>
    /// List of values for filtering. [\&quot;WEB_SESSIONS\&quot;] in BETA.
    /// </summary>
    std::vector<std::shared_ptr<ObjectiveType>>& getCampaignObjectiveTypes();
    bool campaignObjectiveTypesIsSet() const;
    void unsetCampaign_objective_types();

    void setCampaignObjectiveTypes(const std::vector<std::shared_ptr<ObjectiveType>>& value);

    /// <summary>
    /// List of ad group ids
    /// </summary>
    std::vector<utility::string_t>& getAdGroupIds();
    bool adGroupIdsIsSet() const;
    void unsetAd_group_ids();

    void setAdGroupIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// List of values for filtering
    /// </summary>
    std::vector<std::shared_ptr<AdGroupSummaryStatus>>& getAdGroupStatuses();
    bool adGroupStatusesIsSet() const;
    void unsetAd_group_statuses();

    void setAdGroupStatuses(const std::vector<std::shared_ptr<AdGroupSummaryStatus>>& value);

    /// <summary>
    /// List of ad ids [This parameter is no supported for Product Item Level Reports]
    /// </summary>
    std::vector<utility::string_t>& getAdIds();
    bool adIdsIsSet() const;
    void unsetAd_ids();

    void setAdIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// List of values for filtering [This parameter is not supported for Product Item Level Reports]
    /// </summary>
    std::vector<std::shared_ptr<PinPromotionSummaryStatus>>& getAdStatuses();
    bool adStatusesIsSet() const;
    void unsetAd_statuses();

    void setAdStatuses(const std::vector<std::shared_ptr<PinPromotionSummaryStatus>>& value);

    /// <summary>
    /// List of product group ids
    /// </summary>
    std::vector<utility::string_t>& getProductGroupIds();
    bool productGroupIdsIsSet() const;
    void unsetProduct_group_ids();

    void setProductGroupIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// List of values for filtering
    /// </summary>
    std::vector<std::shared_ptr<ProductGroupSummaryStatus>>& getProductGroupStatuses();
    bool productGroupStatusesIsSet() const;
    void unsetProduct_group_statuses();

    void setProductGroupStatuses(const std::vector<std::shared_ptr<ProductGroupSummaryStatus>>& value);

    /// <summary>
    /// List of product item ids
    /// </summary>
    std::vector<utility::string_t>& getProductItemIds();
    bool productItemIdsIsSet() const;
    void unsetProduct_item_ids();

    void setProductItemIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// List of targeting types. Requires &#x60;level&#x60; to be a value ending in &#x60;_TARGETING&#x60;. [\&quot;AGE_BUCKET_AND_GENDER\&quot;] is in BETA and not yet available to all users.
    /// </summary>
    std::vector<std::shared_ptr<AdsAnalyticsTargetingType>>& getTargetingTypes();
    bool targetingTypesIsSet() const;
    void unsetTargeting_types();

    void setTargetingTypes(const std::vector<std::shared_ptr<AdsAnalyticsTargetingType>>& value);

    /// <summary>
    /// List of metrics filters
    /// </summary>
    std::vector<std::shared_ptr<AdsAnalyticsMetricsFilter>>& getMetricsFilters();
    bool metricsFiltersIsSet() const;
    void unsetMetrics_filters();

    void setMetricsFilters(const std::vector<std::shared_ptr<AdsAnalyticsMetricsFilter>>& value);

    /// <summary>
    /// Metric and entity columns. Pin promotion and ad related columns are not supported for the Product Item level reports.
    /// </summary>
    std::vector<std::shared_ptr<ReportingColumnAsync>>& getColumns();
    bool columnsIsSet() const;
    void unsetColumns();

    void setColumns(const std::vector<std::shared_ptr<ReportingColumnAsync>>& value);

    /// <summary>
    /// Level of the report
    /// </summary>
    std::shared_ptr<MetricsReportingLevel> getLevel() const;
    bool levelIsSet() const;
    void unsetLevel();

    void setLevel(const std::shared_ptr<MetricsReportingLevel>& value);

    /// <summary>
    /// Specification for formatting the report data. Reports in JSON will not zero-fill metrics, whereas reports in CSV will. Both report formats will omit rows where all the columns are equal to 0.
    /// </summary>
    std::shared_ptr<DataOutputFormat> getReportFormat() const;
    bool reportFormatIsSet() const;
    void unsetReport_format();

    void setReportFormat(const std::shared_ptr<DataOutputFormat>& value);

    /// <summary>
    /// Whether to first sort the report by date or by entity ID of the reporting entity level. Date will be used as the first level key for JSON reports that use BY_DATE. BY_DATE is recommended for large requests.
    /// </summary>
    utility::string_t getPrimarySort() const;
    bool primarySortIsSet() const;
    void unsetPrimary_sort();

    void setPrimarySort(const utility::string_t& value);

    /// <summary>
    /// Which hour of the start date to begin the report. The entire day will be included if no start hour is provided. Only allowed for hourly reports.
    /// </summary>
    int32_t getStartHour() const;
    bool startHourIsSet() const;
    void unsetStart_hour();

    void setStartHour(int32_t value);

    /// <summary>
    /// Which hour of the end date to stop the report (inclusive). For example, with an end_date of &#39;2020-01-01&#39; and end_hour of &#39;15&#39;, the report will contain metrics up to &#39;2020-01-01 14:59:59&#39;. The entire day will be included if no end hour is provided. Only allowed for hourly reports.
    /// </summary>
    int32_t getEndHour() const;
    bool endHourIsSet() const;
    void unsetEnd_hour();

    void setEndHour(int32_t value);


protected:
    utility::string_t m_Start_date;
    bool m_Start_dateIsSet;
    utility::string_t m_End_date;
    bool m_End_dateIsSet;
    std::shared_ptr<Granularity> m_Granularity;
    bool m_GranularityIsSet;
    std::shared_ptr<ConversionAttributionWindowDays> m_Click_window_days;
    bool m_Click_window_daysIsSet;
    std::shared_ptr<ConversionAttributionWindowDays> m_Engagement_window_days;
    bool m_Engagement_window_daysIsSet;
    std::shared_ptr<ConversionAttributionWindowDays> m_View_window_days;
    bool m_View_window_daysIsSet;
    std::shared_ptr<ConversionReportTimeType> m_Conversion_report_time;
    bool m_Conversion_report_timeIsSet;
    std::vector<std::shared_ptr<ConversionReportAttributionType>> m_Attribution_types;
    bool m_Attribution_typesIsSet;
    std::vector<utility::string_t> m_Campaign_ids;
    bool m_Campaign_idsIsSet;
    std::vector<std::shared_ptr<CampaignSummaryStatus>> m_Campaign_statuses;
    bool m_Campaign_statusesIsSet;
    std::vector<std::shared_ptr<ObjectiveType>> m_Campaign_objective_types;
    bool m_Campaign_objective_typesIsSet;
    std::vector<utility::string_t> m_Ad_group_ids;
    bool m_Ad_group_idsIsSet;
    std::vector<std::shared_ptr<AdGroupSummaryStatus>> m_Ad_group_statuses;
    bool m_Ad_group_statusesIsSet;
    std::vector<utility::string_t> m_Ad_ids;
    bool m_Ad_idsIsSet;
    std::vector<std::shared_ptr<PinPromotionSummaryStatus>> m_Ad_statuses;
    bool m_Ad_statusesIsSet;
    std::vector<utility::string_t> m_Product_group_ids;
    bool m_Product_group_idsIsSet;
    std::vector<std::shared_ptr<ProductGroupSummaryStatus>> m_Product_group_statuses;
    bool m_Product_group_statusesIsSet;
    std::vector<utility::string_t> m_Product_item_ids;
    bool m_Product_item_idsIsSet;
    std::vector<std::shared_ptr<AdsAnalyticsTargetingType>> m_Targeting_types;
    bool m_Targeting_typesIsSet;
    std::vector<std::shared_ptr<AdsAnalyticsMetricsFilter>> m_Metrics_filters;
    bool m_Metrics_filtersIsSet;
    std::vector<std::shared_ptr<ReportingColumnAsync>> m_Columns;
    bool m_ColumnsIsSet;
    std::shared_ptr<MetricsReportingLevel> m_Level;
    bool m_LevelIsSet;
    std::shared_ptr<DataOutputFormat> m_Report_format;
    bool m_Report_formatIsSet;
    utility::string_t m_Primary_sort;
    bool m_Primary_sortIsSet;
    int32_t m_Start_hour;
    bool m_Start_hourIsSet;
    int32_t m_End_hour;
    bool m_End_hourIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_AdsAnalyticsCreateAsyncRequest_H_ */
