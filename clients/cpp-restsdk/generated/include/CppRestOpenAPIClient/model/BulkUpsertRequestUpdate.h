/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BulkUpsertRequestUpdate.h
 *
 * Request for creation of entities in bulk.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BulkUpsertRequestUpdate_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BulkUpsertRequestUpdate_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/KeywordUpdate.h"
#include "CppRestOpenAPIClient/model/CampaignUpdateRequest.h"
#include "CppRestOpenAPIClient/model/ProductGroupPromotionUpdateRequest.h"
#include "CppRestOpenAPIClient/model/AdGroupUpdateRequest.h"
#include <vector>
#include "CppRestOpenAPIClient/model/AdUpdateRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class CampaignUpdateRequest;
class AdGroupUpdateRequest;
class AdUpdateRequest;
class ProductGroupPromotionUpdateRequest;
class KeywordUpdate;


/// <summary>
/// Request for creation of entities in bulk.
/// </summary>
class  BulkUpsertRequestUpdate
    : public ModelBase
{
public:
    BulkUpsertRequestUpdate();
    virtual ~BulkUpsertRequestUpdate();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BulkUpsertRequestUpdate members

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<CampaignUpdateRequest>>& getCampaigns();
    bool campaignsIsSet() const;
    void unsetCampaigns();

    void setCampaigns(const std::vector<std::shared_ptr<CampaignUpdateRequest>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<AdGroupUpdateRequest>>& getAdGroups();
    bool adGroupsIsSet() const;
    void unsetAd_groups();

    void setAdGroups(const std::vector<std::shared_ptr<AdGroupUpdateRequest>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<AdUpdateRequest>>& getAds();
    bool adsIsSet() const;
    void unsetAds();

    void setAds(const std::vector<std::shared_ptr<AdUpdateRequest>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<ProductGroupPromotionUpdateRequest>>& getProductGroups();
    bool productGroupsIsSet() const;
    void unsetProduct_groups();

    void setProductGroups(const std::vector<std::shared_ptr<ProductGroupPromotionUpdateRequest>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<KeywordUpdate>>& getKeywords();
    bool keywordsIsSet() const;
    void unsetKeywords();

    void setKeywords(const std::vector<std::shared_ptr<KeywordUpdate>>& value);


protected:
    std::vector<std::shared_ptr<CampaignUpdateRequest>> m_Campaigns;
    bool m_CampaignsIsSet;
    std::vector<std::shared_ptr<AdGroupUpdateRequest>> m_Ad_groups;
    bool m_Ad_groupsIsSet;
    std::vector<std::shared_ptr<AdUpdateRequest>> m_Ads;
    bool m_AdsIsSet;
    std::vector<std::shared_ptr<ProductGroupPromotionUpdateRequest>> m_Product_groups;
    bool m_Product_groupsIsSet;
    std::vector<std::shared_ptr<KeywordUpdate>> m_Keywords;
    bool m_KeywordsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BulkUpsertRequestUpdate_H_ */
