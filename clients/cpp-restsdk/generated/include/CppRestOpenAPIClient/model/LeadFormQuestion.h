/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * LeadFormQuestion.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_LeadFormQuestion_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_LeadFormQuestion_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/LeadFormQuestionFieldType.h"
#include "CppRestOpenAPIClient/model/LeadFormQuestionType.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// 
/// </summary>
class  LeadFormQuestion
    : public ModelBase
{
public:
    LeadFormQuestion();
    virtual ~LeadFormQuestion();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// LeadFormQuestion members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LeadFormQuestionType> getQuestionType() const;
    bool questionTypeIsSet() const;
    void unsetQuestion_type();

    void setQuestionType(const std::shared_ptr<LeadFormQuestionType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LeadFormQuestionFieldType> getCustomQuestionFieldType() const;
    bool customQuestionFieldTypeIsSet() const;
    void unsetCustom_question_field_type();

    void setCustomQuestionFieldType(const std::shared_ptr<LeadFormQuestionFieldType>& value);

    /// <summary>
    /// Question label for a custom question.
    /// </summary>
    utility::string_t getCustomQuestionLabel() const;
    bool customQuestionLabelIsSet() const;
    void unsetCustom_question_label();

    void setCustomQuestionLabel(const utility::string_t& value);

    /// <summary>
    /// Question options for a custom question.
    /// </summary>
    std::vector<utility::string_t>& getCustomQuestionOptions();
    bool customQuestionOptionsIsSet() const;
    void unsetCustom_question_options();

    void setCustomQuestionOptions(const std::vector<utility::string_t>& value);


protected:
    std::shared_ptr<LeadFormQuestionType> m_Question_type;
    bool m_Question_typeIsSet;
    std::shared_ptr<LeadFormQuestionFieldType> m_Custom_question_field_type;
    bool m_Custom_question_field_typeIsSet;
    utility::string_t m_Custom_question_label;
    bool m_Custom_question_labelIsSet;
    std::vector<utility::string_t> m_Custom_question_options;
    bool m_Custom_question_optionsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_LeadFormQuestion_H_ */
