/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsRetailListProductsByCatalogBasedFilterRequest.h
 *
 * Request object to list products for a given retail catalog_id and product group filter.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_CatalogsRetailListProductsByCatalogBasedFilterRequest_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_CatalogsRetailListProductsByCatalogBasedFilterRequest_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/CatalogsLocale.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/Country.h"
#include "CppRestOpenAPIClient/model/CatalogsProductGroupFilters.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class CatalogsProductGroupFilters;


/// <summary>
/// Request object to list products for a given retail catalog_id and product group filter.
/// </summary>
class  CatalogsRetailListProductsByCatalogBasedFilterRequest
    : public ModelBase
{
public:
    CatalogsRetailListProductsByCatalogBasedFilterRequest();
    virtual ~CatalogsRetailListProductsByCatalogBasedFilterRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CatalogsRetailListProductsByCatalogBasedFilterRequest members

    /// <summary>
    /// Retail catalog based product group is available only for selected partners at the moment. If you are not eligible, please use feed based one.
    /// </summary>
    utility::string_t getCatalogType() const;
    bool catalogTypeIsSet() const;
    void unsetCatalog_type();

    void setCatalogType(const utility::string_t& value);

    /// <summary>
    /// Catalog id pertaining to the retail product group.
    /// </summary>
    utility::string_t getCatalogId() const;
    bool catalogIdIsSet() const;
    void unsetCatalog_id();

    void setCatalogId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsProductGroupFilters> getFilters() const;
    bool filtersIsSet() const;
    void unsetFilters();

    void setFilters(const std::shared_ptr<CatalogsProductGroupFilters>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Country> getCountry() const;
    bool countryIsSet() const;
    void unsetCountry();

    void setCountry(const std::shared_ptr<Country>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsLocale> getLocale() const;
    bool localeIsSet() const;
    void unsetLocale();

    void setLocale(const std::shared_ptr<CatalogsLocale>& value);


protected:
    utility::string_t m_Catalog_type;
    bool m_Catalog_typeIsSet;
    utility::string_t m_Catalog_id;
    bool m_Catalog_idIsSet;
    std::shared_ptr<CatalogsProductGroupFilters> m_Filters;
    bool m_FiltersIsSet;
    std::shared_ptr<Country> m_Country;
    bool m_CountryIsSet;
    std::shared_ptr<CatalogsLocale> m_Locale;
    bool m_LocaleIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_CatalogsRetailListProductsByCatalogBasedFilterRequest_H_ */
