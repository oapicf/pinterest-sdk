/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Multiple_product_groups_inner.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Multiple_product_groups_inner_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Multiple_product_groups_inner_H_

#include <variant>

#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/CatalogsVerticalProductGroupCreateRequest.h"
#include "CppRestOpenAPIClient/model/CatalogsCreativeAssetsProductGroupFilters.h"
#include "CppRestOpenAPIClient/model/CatalogsLocale.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/CatalogsProductGroupCreateRequest.h"
#include "CppRestOpenAPIClient/model/Country.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class CatalogsCreativeAssetsProductGroupFilters;


class  Multiple_product_groups_inner
{
public:
    Multiple_product_groups_inner() = default;
    ~Multiple_product_groups_inner() = default;

    /////////////////////////////////////////////

    void validate();

    web::json::value toJson() const;

    template<typename Target>
    bool fromJson(const web::json::value& json) {
        // convert json to Target type
        Target target;
        if (!target.fromJson(json)) {
            return false;
        }

        m_variantValue = target;
        return true;
    }

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const;

    template<typename Target>
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) {
        // convert multipart to Target type
        Target target;
        if (!target.fromMultiPart(multipart, namePrefix)) {
            return false;
        }

        m_variantValue = target;
        return true;
    }

    /////////////////////////////////////////////
    /// Multiple_product_groups_inner members

    using VariantType = std::variant<CatalogsProductGroupCreateRequest, CatalogsVerticalProductGroupCreateRequest>;

    const VariantType& getVariant() const;
    void setVariant(VariantType value);

protected:
    VariantType m_variantValue;
};



}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Multiple_product_groups_inner_H_ */
