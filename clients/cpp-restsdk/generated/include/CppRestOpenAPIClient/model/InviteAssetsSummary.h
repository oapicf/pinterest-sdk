/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * InviteAssetsSummary.h
 *
 * Ad accounts and profiles the member/partner will be granted access to with this invite/request.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_InviteAssetsSummary_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_InviteAssetsSummary_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/InviteAssetsSummary_profiles_inner.h"
#include "CppRestOpenAPIClient/model/InviteAssetsSummary_ad_accounts_inner.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class InviteAssetsSummary_ad_accounts_inner;
class InviteAssetsSummary_profiles_inner;


/// <summary>
/// Ad accounts and profiles the member/partner will be granted access to with this invite/request.
/// </summary>
class  InviteAssetsSummary
    : public ModelBase
{
public:
    InviteAssetsSummary();
    virtual ~InviteAssetsSummary();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// InviteAssetsSummary members

    /// <summary>
    /// List of ad account IDs and respective permission levels that will be assigned.
    /// </summary>
    std::vector<std::shared_ptr<InviteAssetsSummary_ad_accounts_inner>>& getAdAccounts();
    bool adAccountsIsSet() const;
    void unsetAd_accounts();

    void setAdAccounts(const std::vector<std::shared_ptr<InviteAssetsSummary_ad_accounts_inner>>& value);

    /// <summary>
    /// List of profile IDs and respective permission levels that will be assigned.
    /// </summary>
    std::vector<std::shared_ptr<InviteAssetsSummary_profiles_inner>>& getProfiles();
    bool profilesIsSet() const;
    void unsetProfiles();

    void setProfiles(const std::vector<std::shared_ptr<InviteAssetsSummary_profiles_inner>>& value);


protected:
    std::vector<std::shared_ptr<InviteAssetsSummary_ad_accounts_inner>> m_Ad_accounts;
    bool m_Ad_accountsIsSet;
    std::vector<std::shared_ptr<InviteAssetsSummary_profiles_inner>> m_Profiles;
    bool m_ProfilesIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_InviteAssetsSummary_H_ */
