/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BidFloorSpec.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BidFloorSpec_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BidFloorSpec_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/ActionType.h"
#include "CppRestOpenAPIClient/model/Currency.h"
#include "CppRestOpenAPIClient/model/OptimizationGoalMetadata.h"
#include "CppRestOpenAPIClient/model/CreativeType.h"
#include "CppRestOpenAPIClient/model/Country.h"
#include "CppRestOpenAPIClient/model/ObjectiveType.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class OptimizationGoalMetadata;


/// <summary>
/// 
/// </summary>
class  BidFloorSpec
    : public ModelBase
{
public:
    BidFloorSpec();
    virtual ~BidFloorSpec();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BidFloorSpec members

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Country>>& getCountries();
    bool countriesIsSet() const;
    void unsetCountries();

    void setCountries(const std::vector<std::shared_ptr<Country>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Currency> getCurrency() const;
    bool currencyIsSet() const;
    void unsetCurrency();

    void setCurrency(const std::shared_ptr<Currency>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ObjectiveType> getObjectiveType() const;
    bool objectiveTypeIsSet() const;
    void unsetObjective_type();

    void setObjectiveType(const std::shared_ptr<ObjectiveType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ActionType> getBillableEvent() const;
    bool billableEventIsSet() const;
    void unsetBillable_event();

    void setBillableEvent(const std::shared_ptr<ActionType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OptimizationGoalMetadata> getOptimizationGoalMetadata() const;
    bool optimizationGoalMetadataIsSet() const;
    void unsetOptimization_goal_metadata();

    void setOptimizationGoalMetadata(const std::shared_ptr<OptimizationGoalMetadata>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CreativeType> getCreativeType() const;
    bool creativeTypeIsSet() const;
    void unsetCreative_type();

    void setCreativeType(const std::shared_ptr<CreativeType>& value);


protected:
    std::vector<std::shared_ptr<Country>> m_Countries;
    bool m_CountriesIsSet;
    std::shared_ptr<Currency> m_Currency;
    bool m_CurrencyIsSet;
    std::shared_ptr<ObjectiveType> m_Objective_type;
    bool m_Objective_typeIsSet;
    std::shared_ptr<ActionType> m_Billable_event;
    bool m_Billable_eventIsSet;
    std::shared_ptr<OptimizationGoalMetadata> m_Optimization_goal_metadata;
    bool m_Optimization_goal_metadataIsSet;
    std::shared_ptr<CreativeType> m_Creative_type;
    bool m_Creative_typeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BidFloorSpec_H_ */
