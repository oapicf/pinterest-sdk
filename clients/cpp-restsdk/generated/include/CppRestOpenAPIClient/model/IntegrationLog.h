/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * IntegrationLog.h
 *
 * Schema for log sent from an integration application.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_IntegrationLog_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_IntegrationLog_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/IntegrationLogClientRequest.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/IntegrationLogClientError.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class IntegrationLogClientError;
class IntegrationLogClientRequest;


/// <summary>
/// Schema for log sent from an integration application.
/// </summary>
class  IntegrationLog
    : public ModelBase
{
public:
    IntegrationLog();
    virtual ~IntegrationLog();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// IntegrationLog members

    /// <summary>
    /// Timestamp in milliseconds of when the log was executed at the client.
    /// </summary>
    int32_t getClientTimestamp() const;
    bool clientTimestampIsSet() const;
    void unsetClient_timestamp();

    void setClientTimestamp(int32_t value);

    /// <summary>
    /// Log event type
    /// </summary>
    utility::string_t getEventType() const;
    bool eventTypeIsSet() const;
    void unsetEvent_type();

    void setEventType(const utility::string_t& value);

    /// <summary>
    /// Log level type
    /// </summary>
    utility::string_t getLogLevel() const;
    bool logLevelIsSet() const;
    void unsetLog_level();

    void setLogLevel(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getExternalBusinessId() const;
    bool externalBusinessIdIsSet() const;
    void unsetExternal_business_id();

    void setExternalBusinessId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAdvertiserId() const;
    bool advertiserIdIsSet() const;
    void unsetAdvertiser_id();

    void setAdvertiserId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMerchantId() const;
    bool merchantIdIsSet() const;
    void unsetMerchant_id();

    void setMerchantId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTagId() const;
    bool tagIdIsSet() const;
    void unsetTag_id();

    void setTagId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFeedProfileId() const;
    bool feedProfileIdIsSet() const;
    void unsetFeed_profile_id();

    void setFeedProfileId(const utility::string_t& value);

    /// <summary>
    /// Explanation of the event that occured.
    /// </summary>
    utility::string_t getMessage() const;
    bool messageIsSet() const;
    void unsetMessage();

    void setMessage(const utility::string_t& value);

    /// <summary>
    /// Version number of the integration application.
    /// </summary>
    utility::string_t getAppVersionNumber() const;
    bool appVersionNumberIsSet() const;
    void unsetApp_version_number();

    void setAppVersionNumber(const utility::string_t& value);

    /// <summary>
    /// Version number of the platform the integration application is running on.
    /// </summary>
    utility::string_t getPlatformVersionNumber() const;
    bool platformVersionNumberIsSet() const;
    void unsetPlatform_version_number();

    void setPlatformVersionNumber(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<IntegrationLogClientError> getError() const;
    bool errorIsSet() const;
    void unsetError();

    void setError(const std::shared_ptr<IntegrationLogClientError>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<IntegrationLogClientRequest> getRequest() const;
    bool requestIsSet() const;
    void unsetRequest();

    void setRequest(const std::shared_ptr<IntegrationLogClientRequest>& value);


protected:
    int32_t m_Client_timestamp;
    bool m_Client_timestampIsSet;
    utility::string_t m_Event_type;
    bool m_Event_typeIsSet;
    utility::string_t m_Log_level;
    bool m_Log_levelIsSet;
    utility::string_t m_External_business_id;
    bool m_External_business_idIsSet;
    utility::string_t m_Advertiser_id;
    bool m_Advertiser_idIsSet;
    utility::string_t m_Merchant_id;
    bool m_Merchant_idIsSet;
    utility::string_t m_Tag_id;
    bool m_Tag_idIsSet;
    utility::string_t m_Feed_profile_id;
    bool m_Feed_profile_idIsSet;
    utility::string_t m_Message;
    bool m_MessageIsSet;
    utility::string_t m_App_version_number;
    bool m_App_version_numberIsSet;
    utility::string_t m_Platform_version_number;
    bool m_Platform_version_numberIsSet;
    std::shared_ptr<IntegrationLogClientError> m_Error;
    bool m_ErrorIsSet;
    std::shared_ptr<IntegrationLogClientRequest> m_Request;
    bool m_RequestIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_IntegrationLog_H_ */
