/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TargetingSpec.h
 *
 * Ad group targeting specification defining the ad group target audience. For example, &#x60;{\&quot;APPTYPE\&quot;:[\&quot;iphone\&quot;], \&quot;GENDER\&quot;:[\&quot;male\&quot;], \&quot;LOCALE\&quot;:[\&quot;en-US\&quot;], \&quot;LOCATION\&quot;:[\&quot;501\&quot;], \&quot;AGE_BUCKET\&quot;:[\&quot;25-34\&quot;]}&#x60;
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_TargetingSpec_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_TargetingSpec_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/TargetingSpec_SHOPPING_RETARGETING.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class TargetingSpec_SHOPPING_RETARGETING;


/// <summary>
/// Ad group targeting specification defining the ad group target audience. For example, &#x60;{\&quot;APPTYPE\&quot;:[\&quot;iphone\&quot;], \&quot;GENDER\&quot;:[\&quot;male\&quot;], \&quot;LOCALE\&quot;:[\&quot;en-US\&quot;], \&quot;LOCATION\&quot;:[\&quot;501\&quot;], \&quot;AGE_BUCKET\&quot;:[\&quot;25-34\&quot;]}&#x60;
/// </summary>
class  TargetingSpec
    : public ModelBase
{
public:
    TargetingSpec();
    virtual ~TargetingSpec();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// TargetingSpec members

    /// <summary>
    /// Age ranges. If the AGE_BUCKET field is missing, the default behavior in terms of ad delivery is that **All age buckets** will be targeted.
    /// </summary>
    std::vector<utility::string_t>& getAGEBUCKET();
    bool aGEBUCKETIsSet() const;
    void unsetAGE_BUCKET();

    void setAGEBUCKET(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Allowed devices. If the APPTYPE field is missing, the default behavior in terms of ad delivery is that **All devices/apptypes** will be targeted.
    /// </summary>
    std::vector<utility::string_t>& getAPPTYPE();
    bool aPPTYPEIsSet() const;
    void unsetAPPTYPE();

    void setAPPTYPE(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Excluded customer list IDs. Used to drive new customer acquisition goals. For example: [\&quot;2542620905475\&quot;]. Audience lists need to have at least 100 people with Pinterest accounts in them. If the AUDIENCE_EXCLUDE field is missing, the default behavior in terms of ad delivery is that **No users will be excluded**.
    /// </summary>
    std::vector<utility::string_t>& getAUDIENCEEXCLUDE();
    bool aUDIENCEEXCLUDEIsSet() const;
    void unsetAUDIENCE_EXCLUDE();

    void setAUDIENCEEXCLUDE(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Targeted customer list IDs. For example: [\&quot;2542620905473\&quot;]. Audience lists need to have at least 100 people with Pinterest accounts in them Audience lists need to have at least 100 people with Pinterest accounts in them. If the AUDIENCE_INCLUDE field is missing, the default behavior in terms of ad delivery is that **All users will be included**.
    /// </summary>
    std::vector<utility::string_t>& getAUDIENCEINCLUDE();
    bool aUDIENCEINCLUDEIsSet() const;
    void unsetAUDIENCE_INCLUDE();

    void setAUDIENCEINCLUDE(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Targeted genders. Values: [\&quot;unknown\&quot;,\&quot;male\&quot;,\&quot;female\&quot;]. If the GENDER field is missing, the default behavior in terms of ad delivery is that **All genders will be targeted**.
    /// </summary>
    std::vector<utility::string_t>& getGENDER();
    bool gENDERIsSet() const;
    void unsetGENDER();

    void setGENDER(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Location region codes, e.g., \&quot;BE-VOV\&quot; (East Flanders, Belgium) For complete list, &lt;a href&#x3D;\&quot;https://help.pinterest.com/sub/helpcenter/partner/pinterest_location_targeting_codes.xlsx\&quot; target&#x3D;\&quot;_blank\&quot;&gt;click here&lt;/a&gt; or postal codes, e.g., \&quot;US-94107\&quot;. Use either region codes or postal codes but not both. At least one of LOCATION or GEO must be specified. If the GEO field is missing, then only LOCATION values will be targeted (see LOCATION field below).
    /// </summary>
    std::vector<utility::string_t>& getGEO();
    bool gEOIsSet() const;
    void unsetGEO();

    void setGEO(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Array of interest object IDs. If the INTEREST field is missing, the default behavior in terms of ad delivery is that **All interests will be targeted**.
    /// </summary>
    std::vector<utility::string_t>& getINTEREST();
    bool iNTERESTIsSet() const;
    void unsetINTEREST();

    void setINTEREST(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 24 ISO 639-1 two letter language codes. If the LOCALE field is missing, the default behavior in terms of ad delivery is that **All languages will be targeted, only english non-sublanguage will be targeted**.
    /// </summary>
    std::vector<utility::string_t>& getLOCALE();
    bool lOCALEIsSet() const;
    void unsetLOCALE();

    void setLOCALE(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 22 ISO Alpha 2 two letter country codes or US Nielsen DMA (Designated Market Area) codes (location region codes) (e.g., [\&quot;US\&quot;, \&quot;807\&quot;]). For complete list, click here. Location-Country and Location-Metro codes apply. At least one of LOCATION or GEO must be specified. If the LOCATION field is missing, then only GEO values will be targeted (see GEO field above).
    /// </summary>
    std::vector<utility::string_t>& getLOCATION();
    bool lOCATIONIsSet() const;
    void unsetLOCATION();

    void setLOCATION(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Array of object: lookback_window [Integer]: Number of days ago to start lookback timeframe for dynamic retargeting tag_types [Array of integer]: Event types to target for dynamic retargeting exclusion_window [Integer]: Number of days ago to stop lookback timeframe for dynamic retargeting
    /// </summary>
    std::vector<std::shared_ptr<TargetingSpec_SHOPPING_RETARGETING>>& getSHOPPINGRETARGETING();
    bool sHOPPINGRETARGETINGIsSet() const;
    void unsetSHOPPING_RETARGETING();

    void setSHOPPINGRETARGETING(const std::vector<std::shared_ptr<TargetingSpec_SHOPPING_RETARGETING>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getTARGETINGSTRATEGY();
    bool tARGETINGSTRATEGYIsSet() const;
    void unsetTARGETING_STRATEGY();

    void setTARGETINGSTRATEGY(const std::vector<utility::string_t>& value);


protected:
    std::vector<utility::string_t> m_AGE_BUCKET;
    bool m_AGE_BUCKETIsSet;
    std::vector<utility::string_t> m_APPTYPE;
    bool m_APPTYPEIsSet;
    std::vector<utility::string_t> m_AUDIENCE_EXCLUDE;
    bool m_AUDIENCE_EXCLUDEIsSet;
    std::vector<utility::string_t> m_AUDIENCE_INCLUDE;
    bool m_AUDIENCE_INCLUDEIsSet;
    std::vector<utility::string_t> m_GENDER;
    bool m_GENDERIsSet;
    std::vector<utility::string_t> m_GEO;
    bool m_GEOIsSet;
    std::vector<utility::string_t> m_INTEREST;
    bool m_INTERESTIsSet;
    std::vector<utility::string_t> m_LOCALE;
    bool m_LOCALEIsSet;
    std::vector<utility::string_t> m_LOCATION;
    bool m_LOCATIONIsSet;
    std::vector<std::shared_ptr<TargetingSpec_SHOPPING_RETARGETING>> m_SHOPPING_RETARGETING;
    bool m_SHOPPING_RETARGETINGIsSet;
    std::vector<utility::string_t> m_TARGETING_STRATEGY;
    bool m_TARGETING_STRATEGYIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_TargetingSpec_H_ */
