/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TargetingTemplateResponseData.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_TargetingTemplateResponseData_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_TargetingTemplateResponseData_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/TrackingUrls.h"
#include "CppRestOpenAPIClient/model/PlacementGroupType.h"
#include <cpprest/details/basic_types.h>
#include <vector>
#include "CppRestOpenAPIClient/model/TargetingSpec.h"
#include "CppRestOpenAPIClient/model/TargetingTemplateAudienceSizing.h"
#include "CppRestOpenAPIClient/model/TargetingTemplateKeyword.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class TargetingSpec;
class TargetingTemplateKeyword;
class TrackingUrls;
class TargetingTemplateAudienceSizing;


/// <summary>
/// 
/// </summary>
class  TargetingTemplateResponseData
    : public ModelBase
{
public:
    TargetingTemplateResponseData();
    virtual ~TargetingTemplateResponseData();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// TargetingTemplateResponseData members

    /// <summary>
    /// targeting template name
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Enable auto-targeting for ad group. Also known as &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/expanded-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;\&quot;expanded targeting\&quot;&lt;/a&gt;.
    /// </summary>
    bool isAutoTargetingEnabled() const;
    bool autoTargetingEnabledIsSet() const;
    void unsetAuto_targeting_enabled();

    void setAutoTargetingEnabled(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TargetingSpec> getTargetingAttributes() const;
    bool targetingAttributesIsSet() const;
    void unsetTargeting_attributes();

    void setTargetingAttributes(const std::shared_ptr<TargetingSpec>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PlacementGroupType> getPlacementGroup() const;
    bool placementGroupIsSet() const;
    void unsetPlacement_group();

    void setPlacementGroup(const std::shared_ptr<PlacementGroupType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<TargetingTemplateKeyword>>& getKeywords();
    bool keywordsIsSet() const;
    void unsetKeywords();

    void setKeywords(const std::vector<std::shared_ptr<TargetingTemplateKeyword>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TrackingUrls> getTrackingUrls() const;
    bool trackingUrlsIsSet() const;
    void unsetTracking_urls();

    void setTrackingUrls(const std::shared_ptr<TrackingUrls>& value);

    /// <summary>
    /// Targeting template ID.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Targeting template created time. Unix timestamp in seconds.
    /// </summary>
    int32_t getCreatedTime() const;
    bool createdTimeIsSet() const;
    void unsetCreated_time();

    void setCreatedTime(int32_t value);

    /// <summary>
    /// Targeting template updated time.Unix timestamp in seconds.
    /// </summary>
    int32_t getUpdatedTime() const;
    bool updatedTimeIsSet() const;
    void unsetUpdated_time();

    void setUpdatedTime(int32_t value);

    /// <summary>
    /// The ID of the advertiser that this targeting template belongs to.
    /// </summary>
    utility::string_t getAdAccountId() const;
    bool adAccountIdIsSet() const;
    void unsetAd_account_id();

    void setAdAccountId(const utility::string_t& value);

    /// <summary>
    /// Indicate targeting template is active or Deleted
    /// </summary>
    utility::string_t getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TargetingTemplateAudienceSizing> getSizing() const;
    bool sizingIsSet() const;
    void unsetSizing();

    void setSizing(const std::shared_ptr<TargetingTemplateAudienceSizing>& value);


protected:
    utility::string_t m_Name;
    bool m_NameIsSet;
    bool m_Auto_targeting_enabled;
    bool m_Auto_targeting_enabledIsSet;
    std::shared_ptr<TargetingSpec> m_Targeting_attributes;
    bool m_Targeting_attributesIsSet;
    std::shared_ptr<PlacementGroupType> m_Placement_group;
    bool m_Placement_groupIsSet;
    std::vector<std::shared_ptr<TargetingTemplateKeyword>> m_Keywords;
    bool m_KeywordsIsSet;
    std::shared_ptr<TrackingUrls> m_Tracking_urls;
    bool m_Tracking_urlsIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    int32_t m_Created_time;
    bool m_Created_timeIsSet;
    int32_t m_Updated_time;
    bool m_Updated_timeIsSet;
    utility::string_t m_Ad_account_id;
    bool m_Ad_account_idIsSet;
    utility::string_t m_Status;
    bool m_StatusIsSet;
    std::shared_ptr<TargetingTemplateAudienceSizing> m_Sizing;
    bool m_SizingIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_TargetingTemplateResponseData_H_ */
