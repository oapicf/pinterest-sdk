/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdAccountCreateSubscriptionRequest.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_AdAccountCreateSubscriptionRequest_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_AdAccountCreateSubscriptionRequest_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/AdAccountCreateSubscriptionRequest_partner_metadata.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class AdAccountCreateSubscriptionRequest_partner_metadata;


/// <summary>
/// 
/// </summary>
class  AdAccountCreateSubscriptionRequest
    : public ModelBase
{
public:
    AdAccountCreateSubscriptionRequest();
    virtual ~AdAccountCreateSubscriptionRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// AdAccountCreateSubscriptionRequest members

    /// <summary>
    /// Standard HTTPS webhook URL.
    /// </summary>
    utility::string_t getWebhookUrl() const;
    bool webhookUrlIsSet() const;
    void unsetWebhook_url();

    void setWebhookUrl(const utility::string_t& value);

    /// <summary>
    /// Lead form ID.
    /// </summary>
    utility::string_t getLeadFormId() const;
    bool leadFormIdIsSet() const;
    void unsetLead_form_id();

    void setLeadFormId(const utility::string_t& value);

    /// <summary>
    /// Partner access token. Only for clients that requires authentication. We recommend to avoid this param.
    /// </summary>
    utility::string_t getPartnerAccessToken() const;
    bool partnerAccessTokenIsSet() const;
    void unsetPartner_access_token();

    void setPartnerAccessToken(const utility::string_t& value);

    /// <summary>
    /// Partner refresh token. Only for clients that requires authentication. We recommend to avoid this param.
    /// </summary>
    utility::string_t getPartnerRefreshToken() const;
    bool partnerRefreshTokenIsSet() const;
    void unsetPartner_refresh_token();

    void setPartnerRefreshToken(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AdAccountCreateSubscriptionRequest_partner_metadata> getPartnerMetadata() const;
    bool partnerMetadataIsSet() const;
    void unsetPartner_metadata();

    void setPartnerMetadata(const std::shared_ptr<AdAccountCreateSubscriptionRequest_partner_metadata>& value);


protected:
    utility::string_t m_Webhook_url;
    bool m_Webhook_urlIsSet;
    utility::string_t m_Lead_form_id;
    bool m_Lead_form_idIsSet;
    utility::string_t m_Partner_access_token;
    bool m_Partner_access_tokenIsSet;
    utility::string_t m_Partner_refresh_token;
    bool m_Partner_refresh_tokenIsSet;
    std::shared_ptr<AdAccountCreateSubscriptionRequest_partner_metadata> m_Partner_metadata;
    bool m_Partner_metadataIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_AdAccountCreateSubscriptionRequest_H_ */
