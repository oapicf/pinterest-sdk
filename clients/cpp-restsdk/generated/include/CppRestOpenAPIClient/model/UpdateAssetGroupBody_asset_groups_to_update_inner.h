/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UpdateAssetGroupBody_asset_groups_to_update_inner.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_UpdateAssetGroupBody_asset_groups_to_update_inner_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_UpdateAssetGroupBody_asset_groups_to_update_inner_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/AssetGroupType.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// 
/// </summary>
class  UpdateAssetGroupBody_asset_groups_to_update_inner
    : public ModelBase
{
public:
    UpdateAssetGroupBody_asset_groups_to_update_inner();
    virtual ~UpdateAssetGroupBody_asset_groups_to_update_inner();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UpdateAssetGroupBody_asset_groups_to_update_inner members

    /// <summary>
    /// Unique identifier of the asset group to update.
    /// </summary>
    utility::string_t getAssetGroupId() const;
    bool assetGroupIdIsSet() const;
    void unsetAsset_group_id();

    void setAssetGroupId(const utility::string_t& value);

    /// <summary>
    /// Asset Group name
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Asset group description
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// Asset Group Types. Note: The asset group types are used for user reference and categorization purposes only and do not impact the functionality of the asset group.
    /// </summary>
    std::vector<std::shared_ptr<AssetGroupType>>& getAssetGroupTypes();
    bool assetGroupTypesIsSet() const;
    void unsetAsset_group_types();

    void setAssetGroupTypes(const std::vector<std::shared_ptr<AssetGroupType>>& value);

    /// <summary>
    /// A list of asset ids to add to the asset group.
    /// </summary>
    std::vector<utility::string_t>& getAssetsToAdd();
    bool assetsToAddIsSet() const;
    void unsetAssets_to_add();

    void setAssetsToAdd(const std::vector<utility::string_t>& value);

    /// <summary>
    /// A list of asset ids to remove from the asset group.
    /// </summary>
    std::vector<utility::string_t>& getAssetsToRemove();
    bool assetsToRemoveIsSet() const;
    void unsetAssets_to_remove();

    void setAssetsToRemove(const std::vector<utility::string_t>& value);


protected:
    utility::string_t m_Asset_group_id;
    bool m_Asset_group_idIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    std::vector<std::shared_ptr<AssetGroupType>> m_Asset_group_types;
    bool m_Asset_group_typesIsSet;
    std::vector<utility::string_t> m_Assets_to_add;
    bool m_Assets_to_addIsSet;
    std::vector<utility::string_t> m_Assets_to_remove;
    bool m_Assets_to_removeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_UpdateAssetGroupBody_asset_groups_to_update_inner_H_ */
