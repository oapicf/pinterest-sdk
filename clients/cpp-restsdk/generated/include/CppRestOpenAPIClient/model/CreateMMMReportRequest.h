/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateMMMReportRequest.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_CreateMMMReportRequest_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_CreateMMMReportRequest_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/MMMReportingColumn.h"
#include "CppRestOpenAPIClient/model/MMMReportingTargetingType.h"
#include <cpprest/details/basic_types.h>
#include <vector>
#include "CppRestOpenAPIClient/model/TargetingAdvertiserCountry.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// 
/// </summary>
class  CreateMMMReportRequest
    : public ModelBase
{
public:
    CreateMMMReportRequest();
    virtual ~CreateMMMReportRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CreateMMMReportRequest members

    /// <summary>
    /// Name of the Marketing Mix Modeling (MMM) report
    /// </summary>
    utility::string_t getReportName() const;
    bool reportNameIsSet() const;
    void unsetReport_name();

    void setReportName(const utility::string_t& value);

    /// <summary>
    /// Metric report start date (UTC). Format: YYYY-MM-DD
    /// </summary>
    utility::string_t getStartDate() const;
    bool startDateIsSet() const;
    void unsetStart_date();

    void setStartDate(const utility::string_t& value);

    /// <summary>
    /// Metric report end date (UTC). Format: YYYY-MM-DD
    /// </summary>
    utility::string_t getEndDate() const;
    bool endDateIsSet() const;
    void unsetEnd_date();

    void setEndDate(const utility::string_t& value);

    /// <summary>
    /// DAY - metrics are broken down daily.&lt;br&gt; WEEK - metrics are broken down weekly.
    /// </summary>
    utility::string_t getGranularity() const;
    bool granularityIsSet() const;
    void unsetGranularity();

    void setGranularity(const utility::string_t& value);

    /// <summary>
    /// Level of the report
    /// </summary>
    utility::string_t getLevel() const;
    bool levelIsSet() const;
    void unsetLevel();

    void setLevel(const utility::string_t& value);

    /// <summary>
    /// List of targeting types
    /// </summary>
    std::vector<std::shared_ptr<MMMReportingTargetingType>>& getTargetingTypes();
    bool targetingTypesIsSet() const;
    void unsetTargeting_types();

    void setTargetingTypes(const std::vector<std::shared_ptr<MMMReportingTargetingType>>& value);

    /// <summary>
    /// Metric and entity columns
    /// </summary>
    std::vector<std::shared_ptr<MMMReportingColumn>>& getColumns();
    bool columnsIsSet() const;
    void unsetColumns();

    void setColumns(const std::vector<std::shared_ptr<MMMReportingColumn>>& value);

    /// <summary>
    /// A List of countries for filtering
    /// </summary>
    std::vector<std::shared_ptr<TargetingAdvertiserCountry>>& getCountries();
    bool countriesIsSet() const;
    void unsetCountries();

    void setCountries(const std::vector<std::shared_ptr<TargetingAdvertiserCountry>>& value);


protected:
    utility::string_t m_Report_name;
    bool m_Report_nameIsSet;
    utility::string_t m_Start_date;
    bool m_Start_dateIsSet;
    utility::string_t m_End_date;
    bool m_End_dateIsSet;
    utility::string_t m_Granularity;
    bool m_GranularityIsSet;
    utility::string_t m_Level;
    bool m_LevelIsSet;
    std::vector<std::shared_ptr<MMMReportingTargetingType>> m_Targeting_types;
    bool m_Targeting_typesIsSet;
    std::vector<std::shared_ptr<MMMReportingColumn>> m_Columns;
    bool m_ColumnsIsSet;
    std::vector<std::shared_ptr<TargetingAdvertiserCountry>> m_Countries;
    bool m_CountriesIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_CreateMMMReportRequest_H_ */
