/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * InviteExceptionResponse.h
 *
 * An exception object if there is an error performing the action. Will only be provided if there is an error.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_InviteExceptionResponse_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_InviteExceptionResponse_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// An exception object if there is an error performing the action. Will only be provided if there is an error.
/// </summary>
class  InviteExceptionResponse
    : public ModelBase
{
public:
    InviteExceptionResponse();
    virtual ~InviteExceptionResponse();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// InviteExceptionResponse members

    /// <summary>
    /// Unique identifier of the invite/request.
    /// </summary>
    utility::string_t getInviteOrRequestId() const;
    bool inviteOrRequestIdIsSet() const;
    void unsetInvite_or_request_id();

    void setInviteOrRequestId(const utility::string_t& value);

    /// <summary>
    /// Error code associated with the error in performing the action on the invite/request.
    /// </summary>
    int32_t getCode() const;
    bool codeIsSet() const;
    void unsetCode();

    void setCode(int32_t value);

    /// <summary>
    /// Error message associated with the error in performing the action on the invite/request.
    /// </summary>
    utility::string_t getMessage() const;
    bool messageIsSet() const;
    void unsetMessage();

    void setMessage(const utility::string_t& value);

    /// <summary>
    /// A list of users&#39; usernames or emails OR a list of partner ids that caused the error.
    /// </summary>
    std::vector<utility::string_t>& getUsersOrPartnerIds();
    bool usersOrPartnerIdsIsSet() const;
    void unsetUsers_or_partner_ids();

    void setUsersOrPartnerIds(const std::vector<utility::string_t>& value);


protected:
    utility::string_t m_Invite_or_request_id;
    bool m_Invite_or_request_idIsSet;
    int32_t m_Code;
    bool m_CodeIsSet;
    utility::string_t m_Message;
    bool m_MessageIsSet;
    std::vector<utility::string_t> m_Users_or_partner_ids;
    bool m_Users_or_partner_idsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_InviteExceptionResponse_H_ */
