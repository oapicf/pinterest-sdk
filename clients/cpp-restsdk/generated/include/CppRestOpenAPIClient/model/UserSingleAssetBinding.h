/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UserSingleAssetBinding.h
 *
 * An object containing the permissions a business member/partner has on the asset.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_UserSingleAssetBinding_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_UserSingleAssetBinding_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>
#include "CppRestOpenAPIClient/model/BusinessAccessUserSummary.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class BusinessAccessUserSummary;


/// <summary>
/// An object containing the permissions a business member/partner has on the asset.
/// </summary>
class  UserSingleAssetBinding
    : public ModelBase
{
public:
    UserSingleAssetBinding();
    virtual ~UserSingleAssetBinding();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UserSingleAssetBinding members

    /// <summary>
    /// Permission levels member or partner has on an asset.
    /// </summary>
    std::vector<utility::string_t>& getPermissions();
    bool permissionsIsSet() const;
    void unsetPermissions();

    void setPermissions(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BusinessAccessUserSummary> getUser() const;
    bool userIsSet() const;
    void unsetUser();

    void setUser(const std::shared_ptr<BusinessAccessUserSummary>& value);


protected:
    std::vector<utility::string_t> m_Permissions;
    bool m_PermissionsIsSet;
    std::shared_ptr<BusinessAccessUserSummary> m_User;
    bool m_UserIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_UserSingleAssetBinding_H_ */
