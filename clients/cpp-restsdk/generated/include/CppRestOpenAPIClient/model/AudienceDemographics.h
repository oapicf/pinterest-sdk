/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AudienceDemographics.h
 *
 * Audience demographics
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_AudienceDemographics_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_AudienceDemographics_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/AudienceDemographicValue.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class AudienceDemographicValue;


/// <summary>
/// Audience demographics
/// </summary>
class  AudienceDemographics
    : public ModelBase
{
public:
    AudienceDemographics();
    virtual ~AudienceDemographics();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// AudienceDemographics members

    /// <summary>
    /// Ages distribution.
    /// </summary>
    std::vector<std::shared_ptr<AudienceDemographicValue>>& getAges();
    bool agesIsSet() const;
    void unsetAges();

    void setAges(const std::vector<std::shared_ptr<AudienceDemographicValue>>& value);

    /// <summary>
    /// Gender distribution.
    /// </summary>
    std::vector<std::shared_ptr<AudienceDemographicValue>>& getGenders();
    bool gendersIsSet() const;
    void unsetGenders();

    void setGenders(const std::vector<std::shared_ptr<AudienceDemographicValue>>& value);

    /// <summary>
    /// Device usage distribution.
    /// </summary>
    std::vector<std::shared_ptr<AudienceDemographicValue>>& getDevices();
    bool devicesIsSet() const;
    void unsetDevices();

    void setDevices(const std::vector<std::shared_ptr<AudienceDemographicValue>>& value);

    /// <summary>
    /// Geographic metro area distribution.
    /// </summary>
    std::vector<std::shared_ptr<AudienceDemographicValue>>& getMetros();
    bool metrosIsSet() const;
    void unsetMetros();

    void setMetros(const std::vector<std::shared_ptr<AudienceDemographicValue>>& value);

    /// <summary>
    /// Country area distribution.
    /// </summary>
    std::vector<std::shared_ptr<AudienceDemographicValue>>& getCountries();
    bool countriesIsSet() const;
    void unsetCountries();

    void setCountries(const std::vector<std::shared_ptr<AudienceDemographicValue>>& value);


protected:
    std::vector<std::shared_ptr<AudienceDemographicValue>> m_Ages;
    bool m_AgesIsSet;
    std::vector<std::shared_ptr<AudienceDemographicValue>> m_Genders;
    bool m_GendersIsSet;
    std::vector<std::shared_ptr<AudienceDemographicValue>> m_Devices;
    bool m_DevicesIsSet;
    std::vector<std::shared_ptr<AudienceDemographicValue>> m_Metros;
    bool m_MetrosIsSet;
    std::vector<std::shared_ptr<AudienceDemographicValue>> m_Countries;
    bool m_CountriesIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_AudienceDemographics_H_ */
