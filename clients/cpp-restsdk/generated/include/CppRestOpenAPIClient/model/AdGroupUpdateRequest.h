/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdGroupUpdateRequest.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_AdGroupUpdateRequest_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_AdGroupUpdateRequest_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/ActionType.h"
#include "CppRestOpenAPIClient/model/OptimizationGoalMetadata.h"
#include "CppRestOpenAPIClient/model/TrackingUrls.h"
#include "CppRestOpenAPIClient/model/BudgetType.h"
#include "CppRestOpenAPIClient/model/EntityStatus.h"
#include "CppRestOpenAPIClient/model/PacingDeliveryType.h"
#include "CppRestOpenAPIClient/model/PlacementGroupType.h"
#include <cpprest/details/basic_types.h>
#include <vector>
#include "CppRestOpenAPIClient/model/TargetingSpec.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class OptimizationGoalMetadata;
class TargetingSpec;
class TrackingUrls;


/// <summary>
/// 
/// </summary>
class  AdGroupUpdateRequest
    : public ModelBase
{
public:
    AdGroupUpdateRequest();
    virtual ~AdGroupUpdateRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// AdGroupUpdateRequest members

    /// <summary>
    /// Ad group name.
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Ad group/entity status.
    /// </summary>
    std::shared_ptr<EntityStatus> getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const std::shared_ptr<EntityStatus>& value);

    /// <summary>
    /// Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
    /// </summary>
    int32_t getBudgetInMicroCurrency() const;
    bool budgetInMicroCurrencyIsSet() const;
    void unsetBudget_in_micro_currency();

    void setBudgetInMicroCurrency(int32_t value);

    /// <summary>
    /// Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
    /// </summary>
    int32_t getBidInMicroCurrency() const;
    bool bidInMicroCurrencyIsSet() const;
    void unsetBid_in_micro_currency();

    void setBidInMicroCurrency(int32_t value);

    /// <summary>
    /// Optimization goals for objective-based performance campaigns. **REQUIRED** when campaign&#39;s &#x60;objective_type&#x60; is set to &#x60;\&quot;WEB_CONVERSION\&quot;&#x60;.
    /// </summary>
    std::shared_ptr<OptimizationGoalMetadata> getOptimizationGoalMetadata() const;
    bool optimizationGoalMetadataIsSet() const;
    void unsetOptimization_goal_metadata();

    void setOptimizationGoalMetadata(const std::shared_ptr<OptimizationGoalMetadata>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BudgetType> getBudgetType() const;
    bool budgetTypeIsSet() const;
    void unsetBudget_type();

    void setBudgetType(const std::shared_ptr<BudgetType>& value);

    /// <summary>
    /// Ad group start time. Unix timestamp in seconds. Defaults to current time.
    /// </summary>
    int32_t getStartTime() const;
    bool startTimeIsSet() const;
    void unsetStart_time();

    void setStartTime(int32_t value);

    /// <summary>
    /// Ad group end time. Unix timestamp in seconds.
    /// </summary>
    int32_t getEndTime() const;
    bool endTimeIsSet() const;
    void unsetEnd_time();

    void setEndTime(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TargetingSpec> getTargetingSpec() const;
    bool targetingSpecIsSet() const;
    void unsetTargeting_spec();

    void setTargetingSpec(const std::shared_ptr<TargetingSpec>& value);

    /// <summary>
    /// Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION &lt;a href&#x3D;\&quot;/docs/redoc/#section/Billable-event\&quot;&gt;billable_event&lt;/a&gt; value. This field **REQUIRES** the &#x60;end_time&#x60; field.
    /// </summary>
    int32_t getLifetimeFrequencyCap() const;
    bool lifetimeFrequencyCapIsSet() const;
    void unsetLifetime_frequency_cap();

    void setLifetimeFrequencyCap(int32_t value);

    /// <summary>
    /// Third-party tracking URLs.&lt;br&gt; JSON object with the format: {\&quot;&lt;a href&#x3D;\&quot;/docs/redoc/#section/Tracking-URL-event\&quot;&gt;Tracking event enum&lt;/a&gt;\&quot;:[URL string array],...}&lt;br&gt; For example: {\&quot;impression\&quot;: [\&quot;URL1\&quot;, \&quot;URL2\&quot;], \&quot;click\&quot;: [\&quot;URL1\&quot;, \&quot;URL2\&quot;, \&quot;URL3\&quot;]}.&lt;br&gt;Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.&lt;br&gt;&lt;br&gt; For more information, see &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Third-party and dynamic tracking&lt;/a&gt;.
    /// </summary>
    std::shared_ptr<TrackingUrls> getTrackingUrls() const;
    bool trackingUrlsIsSet() const;
    void unsetTracking_urls();

    void setTrackingUrls(const std::shared_ptr<TrackingUrls>& value);

    /// <summary>
    /// Enable auto-targeting for ad group. Also known as &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/expanded-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;\&quot;expanded targeting\&quot;&lt;/a&gt;.
    /// </summary>
    bool isAutoTargetingEnabled() const;
    bool autoTargetingEnabledIsSet() const;
    void unsetAuto_targeting_enabled();

    void setAutoTargetingEnabled(bool value);

    /// <summary>
    /// &lt;a href&#x3D;\&quot;/docs/redoc/#section/Placement-group\&quot;&gt;Placement group&lt;/a&gt;.
    /// </summary>
    std::shared_ptr<PlacementGroupType> getPlacementGroup() const;
    bool placementGroupIsSet() const;
    void unsetPlacement_group();

    void setPlacementGroup(const std::shared_ptr<PlacementGroupType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PacingDeliveryType> getPacingDeliveryType() const;
    bool pacingDeliveryTypeIsSet() const;
    void unsetPacing_delivery_type();

    void setPacingDeliveryType(const std::shared_ptr<PacingDeliveryType>& value);

    /// <summary>
    /// Campaign ID of the ad group.
    /// </summary>
    utility::string_t getCampaignId() const;
    bool campaignIdIsSet() const;
    void unsetCampaign_id();

    void setCampaignId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ActionType> getBillableEvent() const;
    bool billableEventIsSet() const;
    void unsetBillable_event();

    void setBillableEvent(const std::shared_ptr<ActionType>& value);

    /// <summary>
    /// Bid strategy type. For Campaigns with Video Completion objectives, the only supported bid strategy type is AUTOMATIC_BID.
    /// </summary>
    utility::string_t getBidStrategyType() const;
    bool bidStrategyTypeIsSet() const;
    void unsetBid_strategy_type();

    void setBidStrategyType(const utility::string_t& value);

    /// <summary>
    /// Targeting template IDs applied to the ad group. We currently only support 1 targeting template per ad group. To use targeting templates, do not set any other targeting fields: targeting_spec, tracking_urls, auto_targeting_enabled, placement_group. To clear all targeting template IDs, set this field to [&#39;0&#39;].
    /// </summary>
    std::vector<utility::string_t>& getTargetingTemplateIds();
    bool targetingTemplateIdsIsSet() const;
    void unsetTargeting_template_ids();

    void setTargetingTemplateIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Ad group ID.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);


protected:
    utility::string_t m_Name;
    bool m_NameIsSet;
    std::shared_ptr<EntityStatus> m_Status;
    bool m_StatusIsSet;
    int32_t m_Budget_in_micro_currency;
    bool m_Budget_in_micro_currencyIsSet;
    int32_t m_Bid_in_micro_currency;
    bool m_Bid_in_micro_currencyIsSet;
    std::shared_ptr<OptimizationGoalMetadata> m_Optimization_goal_metadata;
    bool m_Optimization_goal_metadataIsSet;
    std::shared_ptr<BudgetType> m_Budget_type;
    bool m_Budget_typeIsSet;
    int32_t m_Start_time;
    bool m_Start_timeIsSet;
    int32_t m_End_time;
    bool m_End_timeIsSet;
    std::shared_ptr<TargetingSpec> m_Targeting_spec;
    bool m_Targeting_specIsSet;
    int32_t m_Lifetime_frequency_cap;
    bool m_Lifetime_frequency_capIsSet;
    std::shared_ptr<TrackingUrls> m_Tracking_urls;
    bool m_Tracking_urlsIsSet;
    bool m_Auto_targeting_enabled;
    bool m_Auto_targeting_enabledIsSet;
    std::shared_ptr<PlacementGroupType> m_Placement_group;
    bool m_Placement_groupIsSet;
    std::shared_ptr<PacingDeliveryType> m_Pacing_delivery_type;
    bool m_Pacing_delivery_typeIsSet;
    utility::string_t m_Campaign_id;
    bool m_Campaign_idIsSet;
    std::shared_ptr<ActionType> m_Billable_event;
    bool m_Billable_eventIsSet;
    utility::string_t m_Bid_strategy_type;
    bool m_Bid_strategy_typeIsSet;
    std::vector<utility::string_t> m_Targeting_template_ids;
    bool m_Targeting_template_idsIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_AdGroupUpdateRequest_H_ */
