/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AudienceCreateCustomRequest.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_AudienceCreateCustomRequest_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_AudienceCreateCustomRequest_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/AudienceRule.h"
#include "CppRestOpenAPIClient/model/AudienceSharingType.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/AudienceDataParty.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class AudienceRule;


/// <summary>
/// 
/// </summary>
class  AudienceCreateCustomRequest
    : public ModelBase
{
public:
    AudienceCreateCustomRequest();
    virtual ~AudienceCreateCustomRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// AudienceCreateCustomRequest members

    /// <summary>
    /// Ad account ID.
    /// </summary>
    utility::string_t getAdAccountId() const;
    bool adAccountIdIsSet() const;
    void unsetAd_account_id();

    void setAdAccountId(const utility::string_t& value);

    /// <summary>
    /// Audience name.
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AudienceRule> getRule() const;
    bool ruleIsSet() const;
    void unsetRule();

    void setRule(const std::shared_ptr<AudienceRule>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AudienceSharingType> getSharingType() const;
    bool sharingTypeIsSet() const;
    void unsetSharing_type();

    void setSharingType(const std::shared_ptr<AudienceSharingType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AudienceDataParty> getDataParty() const;
    bool dataPartyIsSet() const;
    void unsetData_party();

    void setDataParty(const std::shared_ptr<AudienceDataParty>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCategory() const;
    bool categoryIsSet() const;
    void unsetCategory();

    void setCategory(const utility::string_t& value);


protected:
    utility::string_t m_Ad_account_id;
    bool m_Ad_account_idIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    std::shared_ptr<AudienceRule> m_Rule;
    bool m_RuleIsSet;
    std::shared_ptr<AudienceSharingType> m_Sharing_type;
    bool m_Sharing_typeIsSet;
    std::shared_ptr<AudienceDataParty> m_Data_party;
    bool m_Data_partyIsSet;
    utility::string_t m_Category;
    bool m_CategoryIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_AudienceCreateCustomRequest_H_ */
