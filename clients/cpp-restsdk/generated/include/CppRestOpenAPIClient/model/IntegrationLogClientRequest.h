/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * IntegrationLogClientRequest.h
 *
 * HTTP request details included in the log sent by the client.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_IntegrationLogClientRequest_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_IntegrationLogClientRequest_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <map>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// HTTP request details included in the log sent by the client.
/// </summary>
class  IntegrationLogClientRequest
    : public ModelBase
{
public:
    IntegrationLogClientRequest();
    virtual ~IntegrationLogClientRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// IntegrationLogClientRequest members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMethod() const;
    bool methodIsSet() const;
    void unsetMethod();

    void setMethod(const utility::string_t& value);

    /// <summary>
    /// HTTP request host from host header.
    /// </summary>
    utility::string_t getHost() const;
    bool hostIsSet() const;
    void unsetHost();

    void setHost(const utility::string_t& value);

    /// <summary>
    /// HTTP request path.
    /// </summary>
    utility::string_t getPath() const;
    bool pathIsSet() const;
    void unsetPath();

    void setPath(const utility::string_t& value);

    /// <summary>
    /// HTTP request headers as key-value pairs.
    /// </summary>
    std::map<utility::string_t, utility::string_t>& getRequestHeaders();
    bool requestHeadersIsSet() const;
    void unsetRequest_headers();

    void setRequestHeaders(const std::map<utility::string_t, utility::string_t>& value);

    /// <summary>
    /// HTTP response headers as key-value pairs.
    /// </summary>
    std::map<utility::string_t, utility::string_t>& getResponseHeaders();
    bool responseHeadersIsSet() const;
    void unsetResponse_headers();

    void setResponseHeaders(const std::map<utility::string_t, utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getResponseStatusCode() const;
    bool responseStatusCodeIsSet() const;
    void unsetResponse_status_code();

    void setResponseStatusCode(int32_t value);


protected:
    utility::string_t m_Method;
    bool m_MethodIsSet;
    utility::string_t m_Host;
    bool m_HostIsSet;
    utility::string_t m_Path;
    bool m_PathIsSet;
    std::map<utility::string_t, utility::string_t> m_Request_headers;
    bool m_Request_headersIsSet;
    std::map<utility::string_t, utility::string_t> m_Response_headers;
    bool m_Response_headersIsSet;
    int32_t m_Response_status_code;
    bool m_Response_status_codeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_IntegrationLogClientRequest_H_ */
