/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsCreativeAssetsProductMetadata.h
 *
 * Creative assets product metadata entity
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_CatalogsCreativeAssetsProductMetadata_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_CatalogsCreativeAssetsProductMetadata_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/CreativeAssetsVisibilityType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Creative assets product metadata entity
/// </summary>
class  CatalogsCreativeAssetsProductMetadata
    : public ModelBase
{
public:
    CatalogsCreativeAssetsProductMetadata();
    virtual ~CatalogsCreativeAssetsProductMetadata();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CatalogsCreativeAssetsProductMetadata members

    /// <summary>
    /// The user-created unique ID that represents the creative assets item.
    /// </summary>
    utility::string_t getCreativeAssetsId() const;
    bool creativeAssetsIdIsSet() const;
    void unsetCreative_assets_id();

    void setCreativeAssetsId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CreativeAssetsVisibilityType> getVisibility() const;
    bool visibilityIsSet() const;
    void unsetVisibility();

    void setVisibility(const std::shared_ptr<CreativeAssetsVisibilityType>& value);


protected:
    utility::string_t m_Creative_assets_id;
    bool m_Creative_assets_idIsSet;
    std::shared_ptr<CreativeAssetsVisibilityType> m_Visibility;
    bool m_VisibilityIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_CatalogsCreativeAssetsProductMetadata_H_ */
