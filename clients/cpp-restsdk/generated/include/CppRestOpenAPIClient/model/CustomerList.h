/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CustomerList.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_CustomerList_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_CustomerList_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/Object.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// 
/// </summary>
class  CustomerList
    : public ModelBase
{
public:
    CustomerList();
    virtual ~CustomerList();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CustomerList members

    /// <summary>
    /// Associated ad account ID.
    /// </summary>
    utility::string_t getAdAccountId() const;
    bool adAccountIdIsSet() const;
    void unsetAd_account_id();

    void setAdAccountId(const utility::string_t& value);

    /// <summary>
    /// Creation time. Unix timestamp in seconds.
    /// </summary>
    double getCreatedTime() const;
    bool createdTimeIsSet() const;
    void unsetCreated_time();

    void setCreatedTime(double value);

    /// <summary>
    /// Customer list ID.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Customer list name.
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Total number of list updates.  List creation counts as one batch. Each &lt;a href&#x3D;\&quot;/docs/redoc/#operation/ads_v3_customer_list_add_handler_PUT\&quot;&gt;Append&lt;/a&gt; or &lt;a href&#x3D;\&quot;/docs/redoc/#operation/ads_v3_customer_list_remove_handler_PUT\&quot;&gt;Remove API&lt;/a&gt; call counts as another. List creation via the Ads Manager UI could result in more than one batch since the UI breaks up large lists.
    /// </summary>
    double getNumBatches() const;
    bool numBatchesIsSet() const;
    void unsetNum_batches();

    void setNumBatches(double value);

    /// <summary>
    /// Number of removed user records. In a &lt;a href&#x3D;\&quot;/docs/redoc/#operation/ads_v3_customer_list_remove_handler_PUT\&quot;&gt;Remove API&lt;/a&gt; call, this counter increases even if the user is not found in the list.
    /// </summary>
    double getNumRemovedUserRecords() const;
    bool numRemovedUserRecordsIsSet() const;
    void unsetNum_removed_user_records();

    void setNumRemovedUserRecords(double value);

    /// <summary>
    /// Number of uploaded user records. In an &lt;a href&#x3D;\&quot;/docs/redoc/#operation/ads_v3_customer_list_add_handler_PUT\&quot;&gt;Append API&lt;/a&gt; call, this counter increases even if the uploaded user is already in the list.
    /// </summary>
    double getNumUploadedUserRecords() const;
    bool numUploadedUserRecordsIsSet() const;
    void unsetNum_uploaded_user_records();

    void setNumUploadedUserRecords(double value);

    /// <summary>
    /// Customer list status. TOO_SMALL - the list has less than 100 Pinterest users.
    /// </summary>
    utility::string_t getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const utility::string_t& value);

    /// <summary>
    /// Always \&quot;customerlist\&quot;.
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const utility::string_t& value);

    /// <summary>
    /// Last update time. Unix timestamp in seconds.
    /// </summary>
    double getUpdatedTime() const;
    bool updatedTimeIsSet() const;
    void unsetUpdated_time();

    void setUpdatedTime(double value);

    /// <summary>
    /// Customer list errors
    /// </summary>
    std::shared_ptr<Object> getExceptions() const;
    bool exceptionsIsSet() const;
    void unsetExceptions();

    void setExceptions(const std::shared_ptr<Object>& value);


protected:
    utility::string_t m_Ad_account_id;
    bool m_Ad_account_idIsSet;
    double m_Created_time;
    bool m_Created_timeIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    double m_Num_batches;
    bool m_Num_batchesIsSet;
    double m_Num_removed_user_records;
    bool m_Num_removed_user_recordsIsSet;
    double m_Num_uploaded_user_records;
    bool m_Num_uploaded_user_recordsIsSet;
    utility::string_t m_Status;
    bool m_StatusIsSet;
    utility::string_t m_Type;
    bool m_TypeIsSet;
    double m_Updated_time;
    bool m_Updated_timeIsSet;
    std::shared_ptr<Object> m_Exceptions;
    bool m_ExceptionsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_CustomerList_H_ */
