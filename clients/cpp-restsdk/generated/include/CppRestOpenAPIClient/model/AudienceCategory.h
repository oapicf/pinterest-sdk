/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AudienceCategory.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_AudienceCategory_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_AudienceCategory_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/AudienceSubcategory.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class AudienceSubcategory;


/// <summary>
/// 
/// </summary>
class  AudienceCategory
    : public ModelBase
{
public:
    AudienceCategory();
    virtual ~AudienceCategory();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// AudienceCategory members

    /// <summary>
    /// Interest unique key (same as ID).
    /// </summary>
    utility::string_t getKey() const;
    bool keyIsSet() const;
    void unsetKey();

    void setKey(const utility::string_t& value);

    /// <summary>
    /// Interest name.
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Interest&#39;s percent of category&#39;s total audience.
    /// </summary>
    double getRatio() const;
    bool ratioIsSet() const;
    void unsetRatio();

    void setRatio(double value);

    /// <summary>
    /// Interest affinity index.
    /// </summary>
    double getIndex() const;
    bool indexIsSet() const;
    void unsetIndex();

    void setIndex(double value);

    /// <summary>
    /// Interest ID.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Subcategory interest distribution
    /// </summary>
    std::vector<std::shared_ptr<AudienceSubcategory>>& getSubcategories();
    bool subcategoriesIsSet() const;
    void unsetSubcategories();

    void setSubcategories(const std::vector<std::shared_ptr<AudienceSubcategory>>& value);


protected:
    utility::string_t m_Key;
    bool m_KeyIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    double m_Ratio;
    bool m_RatioIsSet;
    double m_Index;
    bool m_IndexIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    std::vector<std::shared_ptr<AudienceSubcategory>> m_Subcategories;
    bool m_SubcategoriesIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_AudienceCategory_H_ */
