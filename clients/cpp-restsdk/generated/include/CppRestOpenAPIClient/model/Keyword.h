/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Keyword.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Keyword_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Keyword_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/MatchTypeResponse.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// 
/// </summary>
class  Keyword
    : public ModelBase
{
public:
    Keyword();
    virtual ~Keyword();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Keyword members

    /// <summary>
    /// &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; bid field has been deprecated. Input will not be set and field will return null. Keyword custom bid in microcurrency - null if inherited from parent ad group.
    /// </summary>
    int32_t getBid() const;
    bool bidIsSet() const;
    void unsetBid();

    void setBid(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<MatchTypeResponse> getMatchType() const;
    bool matchTypeIsSet() const;
    void unsetMatch_type();

    void setMatchType(const std::shared_ptr<MatchTypeResponse>& value);

    /// <summary>
    /// Keyword value (120 chars max).
    /// </summary>
    utility::string_t getValue() const;
    bool valueIsSet() const;
    void unsetValue();

    void setValue(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isArchived() const;
    bool archivedIsSet() const;
    void unsetArchived();

    void setArchived(bool value);

    /// <summary>
    /// Keyword ID .
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Keyword parent entity ID (advertiser, campaign, ad group).
    /// </summary>
    utility::string_t getParentId() const;
    bool parentIdIsSet() const;
    void unsetParent_id();

    void setParentId(const utility::string_t& value);

    /// <summary>
    /// Parent entity type
    /// </summary>
    utility::string_t getParentType() const;
    bool parentTypeIsSet() const;
    void unsetParent_type();

    void setParentType(const utility::string_t& value);

    /// <summary>
    /// Always keyword
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const utility::string_t& value);


protected:
    int32_t m_Bid;
    bool m_BidIsSet;
    std::shared_ptr<MatchTypeResponse> m_Match_type;
    bool m_Match_typeIsSet;
    utility::string_t m_Value;
    bool m_ValueIsSet;
    bool m_Archived;
    bool m_ArchivedIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Parent_id;
    bool m_Parent_idIsSet;
    utility::string_t m_Parent_type;
    bool m_Parent_typeIsSet;
    utility::string_t m_Type;
    bool m_TypeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Keyword_H_ */
