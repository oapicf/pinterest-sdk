/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsRetailProductMetadata.h
 *
 * Retail product metadata entity
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_CatalogsRetailProductMetadata_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_CatalogsRetailProductMetadata_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/NonNullableCatalogsCurrency.h"
#include "CppRestOpenAPIClient/model/NonNullableProductAvailabilityType.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Retail product metadata entity
/// </summary>
class  CatalogsRetailProductMetadata
    : public ModelBase
{
public:
    CatalogsRetailProductMetadata();
    virtual ~CatalogsRetailProductMetadata();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CatalogsRetailProductMetadata members

    /// <summary>
    /// The user-created unique ID that represents the product.
    /// </summary>
    utility::string_t getItemId() const;
    bool itemIdIsSet() const;
    void unsetItem_id();

    void setItemId(const utility::string_t& value);

    /// <summary>
    /// The parent ID of the product.
    /// </summary>
    utility::string_t getItemGroupId() const;
    bool itemGroupIdIsSet() const;
    void unsetItem_group_id();

    void setItemGroupId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<NonNullableProductAvailabilityType> getAvailability() const;
    bool availabilityIsSet() const;
    void unsetAvailability();

    void setAvailability(const std::shared_ptr<NonNullableProductAvailabilityType>& value);

    /// <summary>
    /// The price of the product.
    /// </summary>
    double getPrice() const;
    bool priceIsSet() const;
    void unsetPrice();

    void setPrice(double value);

    /// <summary>
    /// The discounted price of the product.
    /// </summary>
    double getSalePrice() const;
    bool salePriceIsSet() const;
    void unsetSale_price();

    void setSalePrice(double value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<NonNullableCatalogsCurrency> getCurrency() const;
    bool currencyIsSet() const;
    void unsetCurrency();

    void setCurrency(const std::shared_ptr<NonNullableCatalogsCurrency>& value);


protected:
    utility::string_t m_Item_id;
    bool m_Item_idIsSet;
    utility::string_t m_Item_group_id;
    bool m_Item_group_idIsSet;
    std::shared_ptr<NonNullableProductAvailabilityType> m_Availability;
    bool m_AvailabilityIsSet;
    double m_Price;
    bool m_PriceIsSet;
    double m_Sale_price;
    bool m_Sale_priceIsSet;
    std::shared_ptr<NonNullableCatalogsCurrency> m_Currency;
    bool m_CurrencyIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_CatalogsRetailProductMetadata_H_ */
