/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SSIOAccountAddress.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_SSIOAccountAddress_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_SSIOAccountAddress_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// 
/// </summary>
class  SSIOAccountAddress
    : public ModelBase
{
public:
    SSIOAccountAddress();
    virtual ~SSIOAccountAddress();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SSIOAccountAddress members

    /// <summary>
    /// Address display
    /// </summary>
    utility::string_t getDisplay() const;
    bool displayIsSet() const;
    void unsetDisplay();

    void setDisplay(const utility::string_t& value);

    /// <summary>
    /// Purpose for which the address is used, usually Billing or Businness
    /// </summary>
    utility::string_t getPurpose() const;
    bool purposeIsSet() const;
    void unsetPurpose();

    void setPurpose(const utility::string_t& value);

    /// <summary>
    /// Salesforce id for address
    /// </summary>
    utility::string_t getAddressId() const;
    bool addressIdIsSet() const;
    void unsetAddress_id();

    void setAddressId(const utility::string_t& value);

    /// <summary>
    /// Legal entity for this insertion order
    /// </summary>
    utility::string_t getOrderLegalEntity() const;
    bool orderLegalEntityIsSet() const;
    void unsetOrder_legal_entity();

    void setOrderLegalEntity(const utility::string_t& value);


protected:
    utility::string_t m_Display;
    bool m_DisplayIsSet;
    utility::string_t m_Purpose;
    bool m_PurposeIsSet;
    utility::string_t m_Address_id;
    bool m_Address_idIsSet;
    utility::string_t m_Order_legal_entity;
    bool m_Order_legal_entityIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_SSIOAccountAddress_H_ */
