/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PinMediaWithVideo.h
 *
 * Pin with video.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_PinMediaWithVideo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_PinMediaWithVideo_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/PinMedia.h"
#include "CppRestOpenAPIClient/model/PinMediaWithImage_allOf_images.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class PinMediaWithImage_allOf_images;


/// <summary>
/// Pin with video.
/// </summary>
class  PinMediaWithVideo
    : public ModelBase
{
public:
    PinMediaWithVideo();
    virtual ~PinMediaWithVideo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PinMediaWithVideo members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PinMediaWithImage_allOf_images> getImages() const;
    bool imagesIsSet() const;
    void unsetImages();

    void setImages(const std::shared_ptr<PinMediaWithImage_allOf_images>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCoverImageUrl() const;
    bool coverImageUrlIsSet() const;
    void unsetCover_image_url();

    void setCoverImageUrl(const utility::string_t& value);

    /// <summary>
    /// Video url (720p). &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This field is limited and not available to all apps.
    /// </summary>
    utility::string_t getVideoUrl() const;
    bool videoUrlIsSet() const;
    void unsetVideo_url();

    void setVideoUrl(const utility::string_t& value);

    /// <summary>
    /// Duration (in milliseconds)
    /// </summary>
    double getDuration() const;
    bool durationIsSet() const;
    void unsetDuration();

    void setDuration(double value);

    /// <summary>
    /// Height (in pixels)
    /// </summary>
    int32_t getHeight() const;
    bool heightIsSet() const;
    void unsetHeight();

    void setHeight(int32_t value);

    /// <summary>
    /// Width (in pixels)
    /// </summary>
    int32_t getWidth() const;
    bool widthIsSet() const;
    void unsetWidth();

    void setWidth(int32_t value);


protected:
    std::shared_ptr<PinMediaWithImage_allOf_images> m_Images;
    bool m_ImagesIsSet;
    utility::string_t m_Cover_image_url;
    bool m_Cover_image_urlIsSet;
    utility::string_t m_Video_url;
    bool m_Video_urlIsSet;
    double m_Duration;
    bool m_DurationIsSet;
    int32_t m_Height;
    bool m_HeightIsSet;
    int32_t m_Width;
    bool m_WidthIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_PinMediaWithVideo_H_ */
