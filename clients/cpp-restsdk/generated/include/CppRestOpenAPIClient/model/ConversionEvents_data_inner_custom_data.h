/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ConversionEvents_data_inner_custom_data.h
 *
 * Object containing other custom data.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ConversionEvents_data_inner_custom_data_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ConversionEvents_data_inner_custom_data_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/ConversionEvents_data_inner_custom_data_contents_inner.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class ConversionEvents_data_inner_custom_data_contents_inner;


/// <summary>
/// Object containing other custom data.
/// </summary>
class  ConversionEvents_data_inner_custom_data
    : public ModelBase
{
public:
    ConversionEvents_data_inner_custom_data();
    virtual ~ConversionEvents_data_inner_custom_data();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ConversionEvents_data_inner_custom_data members

    /// <summary>
    /// The ISO-4217 currency code. If not provided, we will default to the advertiser&#39;s currency set during account creation. Your campaign performance needs this field to report right ROAS/CPA.
    /// </summary>
    utility::string_t getCurrency() const;
    bool currencyIsSet() const;
    void unsetCurrency();

    void setCurrency(const utility::string_t& value);

    /// <summary>
    /// Total value of the event. Accepted as a string in the request; it will be parsed into a double. For example, if there are two items in a checkout event, the value should be the total price. We recommend to use pre-tax, pre-shipping final value.
    /// </summary>
    utility::string_t getValue() const;
    bool valueIsSet() const;
    void unsetValue();

    void setValue(const utility::string_t& value);

    /// <summary>
    /// List of products IDs. We recommend using this if you are a merchant for PageVisit, AddToCart and Checkouts. For detail, please check &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt; (Install the Pinterest tag section).
    /// </summary>
    std::vector<utility::string_t>& getContentIds();
    bool contentIdsIsSet() const;
    void unsetContent_ids();

    void setContentIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// The name of the page or product associated with the event.
    /// </summary>
    utility::string_t getContentName() const;
    bool contentNameIsSet() const;
    void unsetContent_name();

    void setContentName(const utility::string_t& value);

    /// <summary>
    /// The category of the content associated with the event.
    /// </summary>
    utility::string_t getContentCategory() const;
    bool contentCategoryIsSet() const;
    void unsetContent_category();

    void setContentCategory(const utility::string_t& value);

    /// <summary>
    /// The brand of the content associated with the event.
    /// </summary>
    utility::string_t getContentBrand() const;
    bool contentBrandIsSet() const;
    void unsetContent_brand();

    void setContentBrand(const utility::string_t& value);

    /// <summary>
    /// A list of objects containing information about products, such as price and quantity. We recommend using this if you are a merchant for PageVisit, AddToCart and Checkouts. For detail, please check &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt; (Install the Pinterest tag section).
    /// </summary>
    std::vector<std::shared_ptr<ConversionEvents_data_inner_custom_data_contents_inner>>& getContents();
    bool contentsIsSet() const;
    void unsetContents();

    void setContents(const std::vector<std::shared_ptr<ConversionEvents_data_inner_custom_data_contents_inner>>& value);

    /// <summary>
    /// Total number of products of the event. For example, the total number of items purchased in a checkout event. We recommend using this if you are a merchant for AddToCart and Checkouts. For detail, please check &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt; (Install the Pinterest tag section).
    /// </summary>
    int64_t getNumItems() const;
    bool numItemsIsSet() const;
    void unsetNum_items();

    void setNumItems(int64_t value);

    /// <summary>
    /// The order ID. We recommend sending order_id to help us deduplicate events when necessary. This also helps to run other measurement products at Pinterest.
    /// </summary>
    utility::string_t getOrderId() const;
    bool orderIdIsSet() const;
    void unsetOrder_id();

    void setOrderId(const utility::string_t& value);

    /// <summary>
    /// The search string related to the user conversion event.
    /// </summary>
    utility::string_t getSearchString() const;
    bool searchStringIsSet() const;
    void unsetSearch_string();

    void setSearchString(const utility::string_t& value);

    /// <summary>
    /// Flags for different privacy rights laws to opt out users of sharing personal information. Values should be comma separated. Please follow the &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/limited-data-processing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Help Center&lt;/a&gt; and &lt;a href&#x3D;\&quot;/docs/api-features/conversion-overview/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;dev site&lt;/a&gt; for specific opt_out_type set up.
    /// </summary>
    utility::string_t getOptOutType() const;
    bool optOutTypeIsSet() const;
    void unsetOpt_out_type();

    void setOptOutType(const utility::string_t& value);

    /// <summary>
    /// Named partner. Not required, this is for Pinterest internal use only. Please do not use this unless specifically guided.
    /// </summary>
    utility::string_t getNp() const;
    bool npIsSet() const;
    void unsetNp();

    void setNp(const utility::string_t& value);


protected:
    utility::string_t m_Currency;
    bool m_CurrencyIsSet;
    utility::string_t m_Value;
    bool m_ValueIsSet;
    std::vector<utility::string_t> m_Content_ids;
    bool m_Content_idsIsSet;
    utility::string_t m_Content_name;
    bool m_Content_nameIsSet;
    utility::string_t m_Content_category;
    bool m_Content_categoryIsSet;
    utility::string_t m_Content_brand;
    bool m_Content_brandIsSet;
    std::vector<std::shared_ptr<ConversionEvents_data_inner_custom_data_contents_inner>> m_Contents;
    bool m_ContentsIsSet;
    int64_t m_Num_items;
    bool m_Num_itemsIsSet;
    utility::string_t m_Order_id;
    bool m_Order_idIsSet;
    utility::string_t m_Search_string;
    bool m_Search_stringIsSet;
    utility::string_t m_Opt_out_type;
    bool m_Opt_out_typeIsSet;
    utility::string_t m_Np;
    bool m_NpIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ConversionEvents_data_inner_custom_data_H_ */
