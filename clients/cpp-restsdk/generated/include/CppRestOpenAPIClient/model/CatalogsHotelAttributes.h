/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsHotelAttributes.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_CatalogsHotelAttributes_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_CatalogsHotelAttributes_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/CatalogsHotelAttributes_allOf_main_image.h"
#include "CppRestOpenAPIClient/model/CatalogsHotelAddress.h"
#include <cpprest/details/basic_types.h>
#include <vector>
#include "CppRestOpenAPIClient/model/CatalogsHotelGuestRatings.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class CatalogsHotelAddress;
class CatalogsHotelGuestRatings;
class CatalogsHotelAttributes_allOf_main_image;


/// <summary>
/// 
/// </summary>
class  CatalogsHotelAttributes
    : public ModelBase
{
public:
    CatalogsHotelAttributes();
    virtual ~CatalogsHotelAttributes();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CatalogsHotelAttributes members

    /// <summary>
    /// The hotel&#39;s name.
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Link to the product page
    /// </summary>
    utility::string_t getLink() const;
    bool linkIsSet() const;
    void unsetLink();

    void setLink(const utility::string_t& value);

    /// <summary>
    /// Brief description of the hotel.
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// The brand to which this hotel belongs to.
    /// </summary>
    utility::string_t getBrand() const;
    bool brandIsSet() const;
    void unsetBrand();

    void setBrand(const utility::string_t& value);

    /// <summary>
    /// Latitude of the hotel.
    /// </summary>
    double getLatitude() const;
    bool latitudeIsSet() const;
    void unsetLatitude();

    void setLatitude(double value);

    /// <summary>
    /// Longitude of the hotel.
    /// </summary>
    double getLongitude() const;
    bool longitudeIsSet() const;
    void unsetLongitude();

    void setLongitude(double value);

    /// <summary>
    /// A list of neighborhoods where the hotel is located
    /// </summary>
    std::vector<utility::string_t>& getNeighborhood();
    bool neighborhoodIsSet() const;
    void unsetNeighborhood();

    void setNeighborhood(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsHotelAddress> getAddress() const;
    bool addressIsSet() const;
    void unsetAddress();

    void setAddress(const std::shared_ptr<CatalogsHotelAddress>& value);

    /// <summary>
    /// Custom grouping of hotels
    /// </summary>
    utility::string_t getCustomLabel0() const;
    bool customLabel0IsSet() const;
    void unsetCustom_label_0();

    void setCustomLabel0(const utility::string_t& value);

    /// <summary>
    /// Custom grouping of hotels
    /// </summary>
    utility::string_t getCustomLabel1() const;
    bool customLabel1IsSet() const;
    void unsetCustom_label_1();

    void setCustomLabel1(const utility::string_t& value);

    /// <summary>
    /// Custom grouping of hotels
    /// </summary>
    utility::string_t getCustomLabel2() const;
    bool customLabel2IsSet() const;
    void unsetCustom_label_2();

    void setCustomLabel2(const utility::string_t& value);

    /// <summary>
    /// Custom grouping of hotels
    /// </summary>
    utility::string_t getCustomLabel3() const;
    bool customLabel3IsSet() const;
    void unsetCustom_label_3();

    void setCustomLabel3(const utility::string_t& value);

    /// <summary>
    /// Custom grouping of hotels
    /// </summary>
    utility::string_t getCustomLabel4() const;
    bool customLabel4IsSet() const;
    void unsetCustom_label_4();

    void setCustomLabel4(const utility::string_t& value);

    /// <summary>
    /// The type of property. The category can be any type of internal description desired.
    /// </summary>
    utility::string_t getCategory() const;
    bool categoryIsSet() const;
    void unsetCategory();

    void setCategory(const utility::string_t& value);

    /// <summary>
    /// Base price of the hotel room per night followed by the ISO currency code
    /// </summary>
    utility::string_t getBasePrice() const;
    bool basePriceIsSet() const;
    void unsetBase_price();

    void setBasePrice(const utility::string_t& value);

    /// <summary>
    /// Sale price of a hotel room per night. Used to advertise discounts off the regular price of the hotel.
    /// </summary>
    utility::string_t getSalePrice() const;
    bool salePriceIsSet() const;
    void unsetSale_price();

    void setSalePrice(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsHotelGuestRatings> getGuestRatings() const;
    bool guestRatingsIsSet() const;
    void unsetGuest_ratings();

    void setGuestRatings(const std::shared_ptr<CatalogsHotelGuestRatings>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsHotelAttributes_allOf_main_image> getMainImage() const;
    bool mainImageIsSet() const;
    void unsetMain_image();

    void setMainImage(const std::shared_ptr<CatalogsHotelAttributes_allOf_main_image>& value);

    /// <summary>
    /// &lt;p&gt;&lt;&#x3D; 2000 characters&lt;/p&gt; &lt;p&gt;The links to additional images for your hotel. Up to ten additional images can be used to show a hotel from different angles. Must begin with http:// or https://.&lt;/p&gt;
    /// </summary>
    std::vector<utility::string_t>& getAdditionalImageLink();
    bool additionalImageLinkIsSet() const;
    void unsetAdditional_image_link();

    void setAdditionalImageLink(const std::vector<utility::string_t>& value);


protected:
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Link;
    bool m_LinkIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    utility::string_t m_Brand;
    bool m_BrandIsSet;
    double m_Latitude;
    bool m_LatitudeIsSet;
    double m_Longitude;
    bool m_LongitudeIsSet;
    std::vector<utility::string_t> m_Neighborhood;
    bool m_NeighborhoodIsSet;
    std::shared_ptr<CatalogsHotelAddress> m_Address;
    bool m_AddressIsSet;
    utility::string_t m_Custom_label_0;
    bool m_Custom_label_0IsSet;
    utility::string_t m_Custom_label_1;
    bool m_Custom_label_1IsSet;
    utility::string_t m_Custom_label_2;
    bool m_Custom_label_2IsSet;
    utility::string_t m_Custom_label_3;
    bool m_Custom_label_3IsSet;
    utility::string_t m_Custom_label_4;
    bool m_Custom_label_4IsSet;
    utility::string_t m_Category;
    bool m_CategoryIsSet;
    utility::string_t m_Base_price;
    bool m_Base_priceIsSet;
    utility::string_t m_Sale_price;
    bool m_Sale_priceIsSet;
    std::shared_ptr<CatalogsHotelGuestRatings> m_Guest_ratings;
    bool m_Guest_ratingsIsSet;
    std::shared_ptr<CatalogsHotelAttributes_allOf_main_image> m_Main_image;
    bool m_Main_imageIsSet;
    std::vector<utility::string_t> m_Additional_image_link;
    bool m_Additional_image_linkIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_CatalogsHotelAttributes_H_ */
