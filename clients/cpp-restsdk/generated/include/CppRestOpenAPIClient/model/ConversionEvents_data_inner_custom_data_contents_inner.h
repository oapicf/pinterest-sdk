/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ConversionEvents_data_inner_custom_data_contents_inner.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ConversionEvents_data_inner_custom_data_contents_inner_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ConversionEvents_data_inner_custom_data_contents_inner_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// 
/// </summary>
class  ConversionEvents_data_inner_custom_data_contents_inner
    : public ModelBase
{
public:
    ConversionEvents_data_inner_custom_data_contents_inner();
    virtual ~ConversionEvents_data_inner_custom_data_contents_inner();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ConversionEvents_data_inner_custom_data_contents_inner members

    /// <summary>
    /// The id of a product. We recommend using this if you are a merchant for AddToCart and Checkouts. For detail, please check &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt; (Install the Pinterest tag section).
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// The price of a product. Accepted as a string in the request; it will be parsed into a double. This is the original item value before any discount. We recommend using this if you are a merchant for PageVisit, AddToCart and Checkouts. For detail, please check &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt; (Install the Pinterest tag section).
    /// </summary>
    utility::string_t getItemPrice() const;
    bool itemPriceIsSet() const;
    void unsetItem_price();

    void setItemPrice(const utility::string_t& value);

    /// <summary>
    /// The amount of a product. We recommend using this if you are a merchant for AddToCart and Checkouts. For detail, please check &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt; (Install the Pinterest tag section).
    /// </summary>
    int64_t getQuantity() const;
    bool quantityIsSet() const;
    void unsetQuantity();

    void setQuantity(int64_t value);

    /// <summary>
    /// The name of a product.
    /// </summary>
    utility::string_t getItemName() const;
    bool itemNameIsSet() const;
    void unsetItem_name();

    void setItemName(const utility::string_t& value);

    /// <summary>
    /// The category of a product.
    /// </summary>
    utility::string_t getItemCategory() const;
    bool itemCategoryIsSet() const;
    void unsetItem_category();

    void setItemCategory(const utility::string_t& value);

    /// <summary>
    /// The brand of a product.
    /// </summary>
    utility::string_t getItemBrand() const;
    bool itemBrandIsSet() const;
    void unsetItem_brand();

    void setItemBrand(const utility::string_t& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Item_price;
    bool m_Item_priceIsSet;
    int64_t m_Quantity;
    bool m_QuantityIsSet;
    utility::string_t m_Item_name;
    bool m_Item_nameIsSet;
    utility::string_t m_Item_category;
    bool m_Item_categoryIsSet;
    utility::string_t m_Item_brand;
    bool m_Item_brandIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ConversionEvents_data_inner_custom_data_contents_inner_H_ */
