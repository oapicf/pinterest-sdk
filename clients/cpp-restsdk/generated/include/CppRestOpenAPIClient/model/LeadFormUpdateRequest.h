/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * LeadFormUpdateRequest.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_LeadFormUpdateRequest_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_LeadFormUpdateRequest_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/LeadFormQuestion.h"
#include "CppRestOpenAPIClient/model/LeadFormStatus.h"
#include <cpprest/details/basic_types.h>
#include <vector>
#include "CppRestOpenAPIClient/model/LeadFormCommon_policy_links_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class LeadFormQuestion;
class LeadFormCommon_policy_links_inner;


/// <summary>
/// 
/// </summary>
class  LeadFormUpdateRequest
    : public ModelBase
{
public:
    LeadFormUpdateRequest();
    virtual ~LeadFormUpdateRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// LeadFormUpdateRequest members

    /// <summary>
    /// Internal name of the lead form.
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// A link to the advertiser&#39;s privacy policy. This will be included in the lead form&#39;s disclosure language.
    /// </summary>
    utility::string_t getPrivacyPolicyLink() const;
    bool privacyPolicyLinkIsSet() const;
    void unsetPrivacy_policy_link();

    void setPrivacyPolicyLink(const utility::string_t& value);

    /// <summary>
    /// Whether the advertiser has accepted Pinterest&#39;s terms of service for creating a lead ad.  By sending us TRUE for this parameter, you agree that (i) you will use any personal information received in compliance with the privacy policy you share with Pinterest, and (ii) you will comply with Pinterest&#39;s &lt;a href&#x3D;\&quot;https://policy.pinterest.com/en/lead-ad-terms\&quot;&gt;Lead Ad Terms&lt;/a&gt;. As a reminder, all advertising on Pinterest is subject to the &lt;a href&#x3D;\&quot;https://business.pinterest.com/en/pinterest-advertising-services-agreement/\&quot;&gt;Pinterest Advertising Services Agreement&lt;/a&gt; or an equivalent agreement as set forth on an IO
    /// </summary>
    bool isHasAcceptedTerms() const;
    bool hasAcceptedTermsIsSet() const;
    void unsetHas_accepted_terms();

    void setHasAcceptedTerms(bool value);

    /// <summary>
    /// A message for people who complete the form to let them know what happens next.
    /// </summary>
    utility::string_t getCompletionMessage() const;
    bool completionMessageIsSet() const;
    void unsetCompletion_message();

    void setCompletionMessage(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LeadFormStatus> getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const std::shared_ptr<LeadFormStatus>& value);

    /// <summary>
    /// Additional disclosure language to be included in the lead form.
    /// </summary>
    utility::string_t getDisclosureLanguage() const;
    bool disclosureLanguageIsSet() const;
    void unsetDisclosure_language();

    void setDisclosureLanguage(const utility::string_t& value);

    /// <summary>
    /// List of questions to be displayed on the lead form.
    /// </summary>
    std::vector<std::shared_ptr<LeadFormQuestion>>& getQuestions();
    bool questionsIsSet() const;
    void unsetQuestions();

    void setQuestions(const std::vector<std::shared_ptr<LeadFormQuestion>>& value);

    /// <summary>
    /// List of additional policy links to be displayed on the lead form.
    /// </summary>
    std::vector<std::shared_ptr<LeadFormCommon_policy_links_inner>>& getPolicyLinks();
    bool policyLinksIsSet() const;
    void unsetPolicy_links();

    void setPolicyLinks(const std::vector<std::shared_ptr<LeadFormCommon_policy_links_inner>>& value);

    /// <summary>
    /// The ID of this lead form to be updated
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);


protected:
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Privacy_policy_link;
    bool m_Privacy_policy_linkIsSet;
    bool m_Has_accepted_terms;
    bool m_Has_accepted_termsIsSet;
    utility::string_t m_Completion_message;
    bool m_Completion_messageIsSet;
    std::shared_ptr<LeadFormStatus> m_Status;
    bool m_StatusIsSet;
    utility::string_t m_Disclosure_language;
    bool m_Disclosure_languageIsSet;
    std::vector<std::shared_ptr<LeadFormQuestion>> m_Questions;
    bool m_QuestionsIsSet;
    std::vector<std::shared_ptr<LeadFormCommon_policy_links_inner>> m_Policy_links;
    bool m_Policy_linksIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_LeadFormUpdateRequest_H_ */
