/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BusinessAccessInviteApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_BusinessAccessInviteApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_BusinessAccessInviteApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/AuthRespondInvitesBody.h"
#include "CppRestOpenAPIClient/model/CancelInvitesBody.h"
#include "CppRestOpenAPIClient/model/CreateAssetAccessRequestBody.h"
#include "CppRestOpenAPIClient/model/CreateAssetAccessRequestResponse.h"
#include "CppRestOpenAPIClient/model/CreateAssetInvitesRequest.h"
#include "CppRestOpenAPIClient/model/CreateInvitesResultsResponseArray.h"
#include "CppRestOpenAPIClient/model/CreateMembershipOrPartnershipInvitesBody.h"
#include "CppRestOpenAPIClient/model/DeleteInvitesResultsResponseArray.h"
#include "CppRestOpenAPIClient/model/Error.h"
#include "CppRestOpenAPIClient/model/Get_invites_200_response.h"
#include "CppRestOpenAPIClient/model/InviteType.h"
#include "CppRestOpenAPIClient/model/RespondToInvitesResponseArray.h"
#include "CppRestOpenAPIClient/model/UpdateInvitesResultsResponseArray.h"
#include <vector>
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  BusinessAccessInviteApi 
{
public:

    explicit BusinessAccessInviteApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~BusinessAccessInviteApi();

    /// <summary>
    /// Create a request to access an existing partner&#39;s assets.
    /// </summary>
    /// <remarks>
    /// Create a request to access an existing partner&#39;s assets with the specified permissions. The request will be sent to the partner for approval. The assets that can be requested are ad accounts and profiles.
    /// </remarks>
    /// <param name="businessId">Unique identifier of the requesting business.</param>
    /// <param name="createAssetAccessRequestBody"></param>
    pplx::task<std::shared_ptr<CreateAssetAccessRequestResponse>> assetAccessRequests_create(
        utility::string_t businessId,
        std::shared_ptr<CreateAssetAccessRequestBody> createAssetAccessRequestBody
    ) const;
    /// <summary>
    /// Cancel invites/requests
    /// </summary>
    /// <remarks>
    /// Cancel membership/partnership invites and/or requests.
    /// </remarks>
    /// <param name="businessId">Business id</param>
    /// <param name="cancelInvitesBody">A list with invite ids</param>
    pplx::task<std::shared_ptr<DeleteInvitesResultsResponseArray>> cancelInvitesOrRequests(
        utility::string_t businessId,
        std::shared_ptr<CancelInvitesBody> cancelInvitesBody
    ) const;
    /// <summary>
    /// Update invite/request with an asset permission
    /// </summary>
    /// <remarks>
    /// Assign asset permissions information to an existing invite/request. Can be used to: - Request access to a partner&#39;s asset. Note: This is only for when no existing partnership exists. If an existing   partnership exists, use \&quot;Create a request to access an existing partner&#39;s assets\&quot; to request access to your   partner&#39;s assets.     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot; - Invite a partner to access your business assets. Note: This is only for when there is no existing partnership.   If there is an existing partnership, use \&quot;Assign/Update partner asset permissions\&quot; to assign a partner access to   new assets.     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot; - Invite a member to access your business assets. Note: This is only for when there is no existing membership.   If there is an existing membership, use \&quot;Assign/Update member asset permissions\&quot; to assign a member access to new   assets.     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;  To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview.
    /// </remarks>
    /// <param name="businessId">Unique identifier of the requesting business.</param>
    /// <param name="createAssetInvitesRequest">A list of invites/requests together with the asset permissions to be assigned to the invite/request. </param>
    pplx::task<std::shared_ptr<UpdateInvitesResultsResponseArray>> createAssetInvites(
        utility::string_t businessId,
        std::shared_ptr<CreateAssetInvitesRequest> createAssetInvitesRequest
    ) const;
    /// <summary>
    /// Create invites or requests
    /// </summary>
    /// <remarks>
    /// Create batch invites or requests. Can create batch invites or requests as described below. - Invite members to join the business. This would required specifying the following:     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;     - business_role&#x3D;\&quot;EMPLOYEE\&quot; OR business_role&#x3D;\&quot;BIZ_ADMIN\&quot; (To learn more about business roles, visit     https://help.pinterest.com/en/business/article/profile-permissions-in-business-access.)     - members - Invite partners to access your business assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners - Request to be a partner so you can access their assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners
    /// </remarks>
    /// <param name="businessId">Business id</param>
    /// <param name="createMembershipOrPartnershipInvitesBody">An object with the properties: invite_type, partners, members, business_role</param>
    pplx::task<std::shared_ptr<CreateInvitesResultsResponseArray>> createMembershipOrPartnershipInvites(
        utility::string_t businessId,
        std::shared_ptr<CreateMembershipOrPartnershipInvitesBody> createMembershipOrPartnershipInvitesBody
    ) const;
    /// <summary>
    /// Get invites/requests
    /// </summary>
    /// <remarks>
    /// Get the membership/partnership invites and/or requests for the authorized user.
    /// </remarks>
    /// <param name="businessId">Unique identifier of the requesting business.</param>
    /// <param name="isMember">A boolean field to indicate whether the invite is to create a partnership or a membership. (optional, default to false)</param>
    /// <param name="inviteStatus">A list of invite statuses to filter invites by. Only invites whose status is in the provided statuses will be returned. (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="inviteType">Invite type to filter invites by. Only invites of the specified type will be returned. (optional, default to new InviteType())</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 0)</param>
    pplx::task<std::shared_ptr<Get_invites_200_response>> get_invites(
        utility::string_t businessId,
        boost::optional<bool> isMember,
        boost::optional<std::vector<utility::string_t>> inviteStatus,
        boost::optional<std::shared_ptr<InviteType>> inviteType,
        boost::optional<utility::string_t> bookmark,
        boost::optional<int32_t> pageSize
    ) const;
    /// <summary>
    /// Accept or decline an invite/request
    /// </summary>
    /// <remarks>
    /// Accept or decline invites or requests.
    /// </remarks>
    /// <param name="authRespondInvitesBody"></param>
    pplx::task<std::shared_ptr<RespondToInvitesResponseArray>> respondBusinessAccessInvites(
        std::shared_ptr<AuthRespondInvitesBody> authRespondInvitesBody
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_BusinessAccessInviteApi_H_ */

