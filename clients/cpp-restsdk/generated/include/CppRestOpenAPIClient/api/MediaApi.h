/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MediaApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_MediaApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_MediaApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/Error.h"
#include "CppRestOpenAPIClient/model/MediaUpload.h"
#include "CppRestOpenAPIClient/model/MediaUploadDetails.h"
#include "CppRestOpenAPIClient/model/MediaUploadRequest.h"
#include "CppRestOpenAPIClient/model/Media_list_200_response.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  MediaApi 
{
public:

    explicit MediaApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~MediaApi();

    /// <summary>
    /// Register media upload
    /// </summary>
    /// <remarks>
    /// Register your intent to upload media  The response includes all of the information needed to upload the media to Pinterest.  To upload the media, make an HTTP POST request (using &lt;tt&gt;curl&lt;/tt&gt;, for example) to &lt;tt&gt;upload_url&lt;/tt&gt; using the &lt;tt&gt;Content-Type&lt;/tt&gt; header value. Send the media file&#39;s contents as the request&#39;s &lt;tt&gt;file&lt;/tt&gt; parameter and also include all of the parameters from &lt;tt&gt;upload_parameters&lt;/tt&gt;.  &lt;strong&gt;&lt;a href&#x3D;&#39;/docs/api-features/creating-boards-and-pins/#creating-video-pins&#39;&gt;Learn more&lt;/a&gt;&lt;/strong&gt; about video Pin creation.
    /// </remarks>
    /// <param name="mediaUploadRequest">Create a media upload request</param>
    pplx::task<std::shared_ptr<MediaUpload>> media_create(
        std::shared_ptr<MediaUploadRequest> mediaUploadRequest
    ) const;
    /// <summary>
    /// Get media upload details
    /// </summary>
    /// <remarks>
    /// Get details for a registered media upload, including its current status.  &lt;strong&gt;&lt;a href&#x3D;&#39;/docs/api-features/creating-boards-and-pins/#creating-video-pins&#39;&gt;Learn more&lt;/a&gt;&lt;/strong&gt; about video Pin creation.
    /// </remarks>
    /// <param name="mediaId">Media identifier</param>
    pplx::task<std::shared_ptr<MediaUploadDetails>> media_get(
        utility::string_t mediaId
    ) const;
    /// <summary>
    /// List media uploads
    /// </summary>
    /// <remarks>
    /// List media uploads filtered by given parameters.  &lt;strong&gt;&lt;a href&#x3D;&#39;/docs/api-features/creating-boards-and-pins/#creating-video-pins&#39;&gt;Learn more&lt;/a&gt;&lt;/strong&gt; about video Pin creation.
    /// </remarks>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 0)</param>
    pplx::task<std::shared_ptr<Media_list_200_response>> media_list(
        boost::optional<utility::string_t> bookmark,
        boost::optional<int32_t> pageSize
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_MediaApi_H_ */

