/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UserAccountApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_UserAccountApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_UserAccountApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/Account.h"
#include "CppRestOpenAPIClient/model/AnalyticsMetricsResponse.h"
#include "CppRestOpenAPIClient/model/Boards_user_follows_list_200_response.h"
#include "CppRestOpenAPIClient/model/Error.h"
#include "CppRestOpenAPIClient/model/FollowUserRequest.h"
#include "CppRestOpenAPIClient/model/Followers_list_200_response.h"
#include "CppRestOpenAPIClient/model/LinkedBusiness.h"
#include "CppRestOpenAPIClient/model/TopPinsAnalyticsResponse.h"
#include "CppRestOpenAPIClient/model/TopVideoPinsAnalyticsResponse.h"
#include "CppRestOpenAPIClient/model/UserFollowingFeedType.h"
#include "CppRestOpenAPIClient/model/UserSummary.h"
#include "CppRestOpenAPIClient/model/UserWebsiteSummary.h"
#include "CppRestOpenAPIClient/model/UserWebsiteVerificationCode.h"
#include "CppRestOpenAPIClient/model/UserWebsiteVerifyRequest.h"
#include "CppRestOpenAPIClient/model/User_account_followed_interests_200_response.h"
#include "CppRestOpenAPIClient/model/User_following_get_200_response.h"
#include "CppRestOpenAPIClient/model/User_websites_get_200_response.h"
#include <map>
#include <vector>
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  UserAccountApi 
{
public:

    explicit UserAccountApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~UserAccountApi();

    /// <summary>
    /// List following boards
    /// </summary>
    /// <remarks>
    /// Get a list of the boards a user follows. The request returns a board summary object array.
    /// </remarks>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 0)</param>
    /// <param name="explicitFollowing">Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional, default to false)</param>
    /// <param name="adAccountId">Unique identifier of an ad account. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<Boards_user_follows_list_200_response>> boardsUserFollows_list(
        boost::optional<utility::string_t> bookmark,
        boost::optional<int32_t> pageSize,
        boost::optional<bool> explicitFollowing,
        boost::optional<utility::string_t> adAccountId
    ) const;
    /// <summary>
    /// Follow user
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Use this request, as a signed-in user, to follow another user.
    /// </remarks>
    /// <param name="username">A valid username</param>
    /// <param name="followUserRequest">Follow a user.</param>
    pplx::task<std::shared_ptr<UserSummary>> followUser_update(
        utility::string_t username,
        std::shared_ptr<FollowUserRequest> followUserRequest
    ) const;
    /// <summary>
    /// List followers
    /// </summary>
    /// <remarks>
    /// Get a list of your followers.
    /// </remarks>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 0)</param>
    pplx::task<std::shared_ptr<Followers_list_200_response>> followers_list(
        boost::optional<utility::string_t> bookmark,
        boost::optional<int32_t> pageSize
    ) const;
    /// <summary>
    /// List linked businesses
    /// </summary>
    /// <remarks>
    /// Get a list of your linked business accounts.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<LinkedBusiness>>> linkedBusinessAccounts_get(
    ) const;
    /// <summary>
    /// Unverify website
    /// </summary>
    /// <remarks>
    /// Unverifu a website verified by the signed-in user.
    /// </remarks>
    /// <param name="website">Website with path or domain only</param>
    pplx::task<void> unverifyWebsite_delete(
        utility::string_t website
    ) const;
    /// <summary>
    /// Get user account analytics
    /// </summary>
    /// <remarks>
    /// Get analytics for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
    /// </remarks>
    /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
    /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
    /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="contentType">Filter to paid or organic data. Default is all. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="source">Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="metricTypes">Metric types to get data for, default is all.  (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="splitField">How to split the data into groups. Not including this param means data won&#39;t be split. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="adAccountId">Unique identifier of an ad account. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::map<utility::string_t, std::shared_ptr<AnalyticsMetricsResponse>>> userAccount_analytics(
        utility::datetime startDate,
        utility::datetime endDate,
        boost::optional<utility::string_t> fromClaimedContent,
        boost::optional<utility::string_t> pinFormat,
        boost::optional<utility::string_t> appTypes,
        boost::optional<utility::string_t> contentType,
        boost::optional<utility::string_t> source,
        boost::optional<std::vector<utility::string_t>> metricTypes,
        boost::optional<utility::string_t> splitField,
        boost::optional<utility::string_t> adAccountId
    ) const;
    /// <summary>
    /// Get user account top pins analytics
    /// </summary>
    /// <remarks>
    /// Gets analytics data about a user&#39;s top pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
    /// </remarks>
    /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
    /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
    /// <param name="sortBy">Specify sorting order for metrics</param>
    /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="contentType">Filter to paid or organic data. Default is all. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="source">Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="metricTypes">Metric types to get data for, default is all.  (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="numOfPins">Number of pins to include, default is 10. Max is 50. (optional, default to 0)</param>
    /// <param name="createdInLastNDays">Get metrics for pins created in the last \&quot;n\&quot; days. (optional, default to 0)</param>
    /// <param name="adAccountId">Unique identifier of an ad account. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<TopPinsAnalyticsResponse>> userAccount_analytics_topPins(
        utility::datetime startDate,
        utility::datetime endDate,
        utility::string_t sortBy,
        boost::optional<utility::string_t> fromClaimedContent,
        boost::optional<utility::string_t> pinFormat,
        boost::optional<utility::string_t> appTypes,
        boost::optional<utility::string_t> contentType,
        boost::optional<utility::string_t> source,
        boost::optional<std::vector<utility::string_t>> metricTypes,
        boost::optional<int32_t> numOfPins,
        boost::optional<int32_t> createdInLastNDays,
        boost::optional<utility::string_t> adAccountId
    ) const;
    /// <summary>
    /// Get user account top video pins analytics
    /// </summary>
    /// <remarks>
    /// Gets analytics data about a user&#39;s top video pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
    /// </remarks>
    /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
    /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
    /// <param name="sortBy">Specify sorting order for video metrics</param>
    /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="contentType">Filter to paid or organic data. Default is all. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="source">Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="metricTypes">Metric types to get video data for, default is all.  (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="numOfPins">Number of pins to include, default is 10. Max is 50. (optional, default to 0)</param>
    /// <param name="createdInLastNDays">Get metrics for pins created in the last \&quot;n\&quot; days. (optional, default to 0)</param>
    /// <param name="adAccountId">Unique identifier of an ad account. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<TopVideoPinsAnalyticsResponse>> userAccount_analytics_topVideoPins(
        utility::datetime startDate,
        utility::datetime endDate,
        utility::string_t sortBy,
        boost::optional<utility::string_t> fromClaimedContent,
        boost::optional<utility::string_t> pinFormat,
        boost::optional<utility::string_t> appTypes,
        boost::optional<utility::string_t> contentType,
        boost::optional<utility::string_t> source,
        boost::optional<std::vector<utility::string_t>> metricTypes,
        boost::optional<int32_t> numOfPins,
        boost::optional<int32_t> createdInLastNDays,
        boost::optional<utility::string_t> adAccountId
    ) const;
    /// <summary>
    /// List following interests
    /// </summary>
    /// <remarks>
    /// Get a list of a user&#39;s following interests in one place.
    /// </remarks>
    /// <param name="username">A valid username</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 0)</param>
    pplx::task<std::shared_ptr<User_account_followed_interests_200_response>> userAccount_followedInterests(
        utility::string_t username,
        boost::optional<utility::string_t> bookmark,
        boost::optional<int32_t> pageSize
    ) const;
    /// <summary>
    /// Get user account
    /// </summary>
    /// <remarks>
    /// Get account information for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/getting-started/using-business-access/&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<Account>> userAccount_get(
        boost::optional<utility::string_t> adAccountId
    ) const;
    /// <summary>
    /// List following
    /// </summary>
    /// <remarks>
    /// Get a list of who a certain user follows.
    /// </remarks>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 0)</param>
    /// <param name="feedType">Thrift param specifying what type of followees will be kept. Default to include all followees. (optional, default to new UserFollowingFeedType())</param>
    /// <param name="explicitFollowing">Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional, default to false)</param>
    /// <param name="adAccountId">Unique identifier of an ad account. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<User_following_get_200_response>> userFollowing_get(
        boost::optional<utility::string_t> bookmark,
        boost::optional<int32_t> pageSize,
        boost::optional<UserFollowingFeedType> feedType,
        boost::optional<bool> explicitFollowing,
        boost::optional<utility::string_t> adAccountId
    ) const;
    /// <summary>
    /// Get user websites
    /// </summary>
    /// <remarks>
    /// Get user websites, claimed or not
    /// </remarks>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 0)</param>
    pplx::task<std::shared_ptr<User_websites_get_200_response>> userWebsites_get(
        boost::optional<utility::string_t> bookmark,
        boost::optional<int32_t> pageSize
    ) const;
    /// <summary>
    /// Verify website
    /// </summary>
    /// <remarks>
    /// Verify a website as a signed-in user.
    /// </remarks>
    /// <param name="userWebsiteVerifyRequest">Verify a website.</param>
    /// <param name="adAccountId">Unique identifier of an ad account. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<UserWebsiteSummary>> verifyWebsite_update(
        std::shared_ptr<UserWebsiteVerifyRequest> userWebsiteVerifyRequest,
        boost::optional<utility::string_t> adAccountId
    ) const;
    /// <summary>
    /// Get user verification code for website claiming
    /// </summary>
    /// <remarks>
    /// Get verification code for user to install on the website to claim it.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<UserWebsiteVerificationCode>> websiteVerification_get(
        boost::optional<utility::string_t> adAccountId
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_UserAccountApi_H_ */

