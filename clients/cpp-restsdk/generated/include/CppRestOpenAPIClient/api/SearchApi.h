/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SearchApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_SearchApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_SearchApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/Error.h"
#include "CppRestOpenAPIClient/model/Pins_list_200_response.h"
#include "CppRestOpenAPIClient/model/Search_partner_pins_200_response.h"
#include "CppRestOpenAPIClient/model/Search_user_boards_get_200_response.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  SearchApi 
{
public:

    explicit SearchApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~SearchApi();

    /// <summary>
    /// Search pins by a given search term
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get the top 10 Pins by a given search term.
    /// </remarks>
    /// <param name="term">Search term to look up pins.</param>
    /// <param name="countryCode">Two letter country code (ISO 3166-1 alpha-2)</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="locale">Search locale. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="limit">Max search result size (optional, default to 0)</param>
    pplx::task<std::shared_ptr<Search_partner_pins_200_response>> searchPartnerPins(
        utility::string_t term,
        utility::string_t countryCode,
        boost::optional<utility::string_t> bookmark,
        boost::optional<utility::string_t> locale,
        boost::optional<int32_t> limit
    ) const;
    /// <summary>
    /// Search user&#39;s boards
    /// </summary>
    /// <remarks>
    /// Search for boards for the \&quot;operation user_account\&quot;. This includes boards of all board types. - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/getting-started/using-business-access/&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 0)</param>
    /// <param name="query">Search query. Can contain pin description keywords or comma-separated pin IDs. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<Search_user_boards_get_200_response>> searchUserBoards_get(
        boost::optional<utility::string_t> adAccountId,
        boost::optional<utility::string_t> bookmark,
        boost::optional<int32_t> pageSize,
        boost::optional<utility::string_t> query
    ) const;
    /// <summary>
    /// Search user&#39;s Pins
    /// </summary>
    /// <remarks>
    /// Search for pins for the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/getting-started/using-business-access/&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
    /// </remarks>
    /// <param name="query">Search query. Can contain pin description keywords or comma-separated pin IDs.</param>
    /// <param name="adAccountId">Unique identifier of an ad account. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<Pins_list_200_response>> searchUserPins_list(
        utility::string_t query,
        boost::optional<utility::string_t> adAccountId,
        boost::optional<utility::string_t> bookmark
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_SearchApi_H_ */

