/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdsApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_AdsApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_AdsApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/AdArrayResponse.h"
#include "CppRestOpenAPIClient/model/AdCreateRequest.h"
#include "CppRestOpenAPIClient/model/AdPreviewRequest.h"
#include "CppRestOpenAPIClient/model/AdPreviewURLResponse.h"
#include "CppRestOpenAPIClient/model/AdResponse.h"
#include "CppRestOpenAPIClient/model/AdUpdateRequest.h"
#include "CppRestOpenAPIClient/model/AdsAnalyticsAdTargetingType.h"
#include "CppRestOpenAPIClient/model/AdsAnalyticsResponse_inner.h"
#include "CppRestOpenAPIClient/model/Ads_list_200_response.h"
#include "CppRestOpenAPIClient/model/ConversionReportAttributionType.h"
#include "CppRestOpenAPIClient/model/Error.h"
#include "CppRestOpenAPIClient/model/Granularity.h"
#include "CppRestOpenAPIClient/model/MetricsResponse.h"
#include <vector>
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  AdsApi 
{
public:

    explicit AdsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~AdsApi();

    /// <summary>
    /// Create ad preview with pin or image
    /// </summary>
    /// <remarks>
    /// Create an ad preview given an ad account ID and either an existing organic pin ID or the URL for an image to be used to create the Pin and the ad. &lt;p/&gt; If you are creating a preview from an existing Pin, that Pin must be promotable: that is, it must have a clickthrough link and meet other requirements. (See &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/promoted-pins-overview\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Ads Overview&lt;/a&gt;.) &lt;p/&gt; You can view the returned preview URL on a webpage or iframe for 7 days, after which the URL expires. Collection ads are not currently supported ad preview.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="adPreviewRequest">Create ad preview with pin or image.</param>
    pplx::task<std::shared_ptr<AdPreviewURLResponse>> adPreviews_create(
        utility::string_t adAccountId,
        std::shared_ptr<AdPreviewRequest> adPreviewRequest
    ) const;
    /// <summary>
    /// Get targeting analytics for ads
    /// </summary>
    /// <remarks>
    /// Get targeting analytics for one or more ads. For the requested ad(s) and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \&quot;age_bucket\&quot;) for applicable values (e.g. \&quot;45-49\&quot;). &lt;p/&gt; - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="adIds">List of Ad Ids to use to filter the results.</param>
    /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
    /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
    /// <param name="targetingTypes">Targeting type breakdowns for the report. The reporting per targeting type &lt;br&gt; is independent from each other. [\&quot;AGE_BUCKET_AND_GENDER\&quot;] is in BETA and not yet available to all users.</param>
    /// <param name="columns">Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned</param>
    /// <param name="granularity">TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly</param>
    /// <param name="clickWindowDays">Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to 0)</param>
    /// <param name="engagementWindowDays">Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to 0)</param>
    /// <param name="viewWindowDays">Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (optional, default to 0)</param>
    /// <param name="conversionReportTime">The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="attributionTypes">List of types of attribution for the conversion report (optional, default to new ConversionReportAttributionType())</param>
    pplx::task<std::shared_ptr<MetricsResponse>> adTargetingAnalytics_get(
        utility::string_t adAccountId,
        std::vector<utility::string_t> adIds,
        utility::datetime startDate,
        utility::datetime endDate,
        std::vector<std::shared_ptr<AdsAnalyticsAdTargetingType>> targetingTypes,
        std::vector<utility::string_t> columns,
        std::shared_ptr<Granularity> granularity,
        boost::optional<int32_t> clickWindowDays,
        boost::optional<int32_t> engagementWindowDays,
        boost::optional<int32_t> viewWindowDays,
        boost::optional<utility::string_t> conversionReportTime,
        boost::optional<std::shared_ptr<ConversionReportAttributionType>> attributionTypes
    ) const;
    /// <summary>
    /// Get ad analytics
    /// </summary>
    /// <remarks>
    /// Get analytics for the specified ads in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - The request must contain either ad_ids or both campaign_ids and pin_ids. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.</param>
    /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.</param>
    /// <param name="columns">Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned</param>
    /// <param name="granularity">TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly</param>
    /// <param name="adIds">List of Ad Ids to use to filter the results. (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="clickWindowDays">Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to 0)</param>
    /// <param name="engagementWindowDays">Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to 0)</param>
    /// <param name="viewWindowDays">Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (optional, default to 0)</param>
    /// <param name="conversionReportTime">The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pinIds">List of Pin IDs. (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="campaignIds">List of Campaign Ids to use to filter the results. (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    pplx::task<std::vector<std::shared_ptr<AdsAnalyticsResponse_inner>>> ads_analytics(
        utility::string_t adAccountId,
        utility::datetime startDate,
        utility::datetime endDate,
        std::vector<utility::string_t> columns,
        std::shared_ptr<Granularity> granularity,
        boost::optional<std::vector<utility::string_t>> adIds,
        boost::optional<int32_t> clickWindowDays,
        boost::optional<int32_t> engagementWindowDays,
        boost::optional<int32_t> viewWindowDays,
        boost::optional<utility::string_t> conversionReportTime,
        boost::optional<std::vector<utility::string_t>> pinIds,
        boost::optional<std::vector<utility::string_t>> campaignIds
    ) const;
    /// <summary>
    /// Create ads
    /// </summary>
    /// <remarks>
    /// Create multiple new ads. Request must contain ad_group_id, creative_type, and the source Pin pin_id.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="adCreateRequest">List of ads to create, size limit [1, 30].</param>
    pplx::task<std::shared_ptr<AdArrayResponse>> ads_create(
        utility::string_t adAccountId,
        std::vector<std::shared_ptr<AdCreateRequest>> adCreateRequest
    ) const;
    /// <summary>
    /// Get ad
    /// </summary>
    /// <remarks>
    /// Get a specific ad given the ad ID. If your pin is rejected, rejected_reasons will contain additional information from the Ad Review process. For more information about our policies and rejection reasons see the &lt;a href&#x3D;\&quot;https://www.pinterest.com/_/_/policy/advertising-guidelines/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Pinterest advertising standards&lt;/a&gt;.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="adId">Unique identifier of an ad.</param>
    pplx::task<std::shared_ptr<AdResponse>> ads_get(
        utility::string_t adAccountId,
        utility::string_t adId
    ) const;
    /// <summary>
    /// List ads
    /// </summary>
    /// <remarks>
    /// List ads that meet the filters provided:   - Listed campaign ids or ad group ids or ad ids   - Listed entity statuses &lt;p/&gt; If no filter is provided, all ads in the ad account are returned. &lt;p/&gt; &lt;strong&gt;Note:&lt;/strong&gt;&lt;p/&gt; Provide only campaign_id or ad_group_id or ad_id. Do not provide more than one type. &lt;p/&gt; Review status is provided for each ad; if review_status is REJECTED, the rejected_reasons field will contain additional information. For more, see &lt;a href&#x3D;\&quot;https://policy.pinterest.com/en/advertising-guidelines\&quot;&gt;Pinterest advertising standards&lt;/a&gt;.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="campaignIds">List of Campaign Ids to use to filter the results. (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="adGroupIds">List of Ad group Ids to use to filter the results. (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="adIds">List of Ad Ids to use to filter the results. (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="entityStatuses">Entity status (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 0)</param>
    /// <param name="order">The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<Ads_list_200_response>> ads_list(
        utility::string_t adAccountId,
        boost::optional<std::vector<utility::string_t>> campaignIds,
        boost::optional<std::vector<utility::string_t>> adGroupIds,
        boost::optional<std::vector<utility::string_t>> adIds,
        boost::optional<std::vector<utility::string_t>> entityStatuses,
        boost::optional<int32_t> pageSize,
        boost::optional<utility::string_t> order,
        boost::optional<utility::string_t> bookmark
    ) const;
    /// <summary>
    /// Update ads
    /// </summary>
    /// <remarks>
    /// Update multiple existing ads
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="adUpdateRequest">List of ads to update, size limit [1, 30]</param>
    pplx::task<std::shared_ptr<AdArrayResponse>> ads_update(
        utility::string_t adAccountId,
        std::vector<std::shared_ptr<AdUpdateRequest>> adUpdateRequest
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_AdsApi_H_ */

