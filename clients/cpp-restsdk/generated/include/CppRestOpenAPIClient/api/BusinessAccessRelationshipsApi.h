/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BusinessAccessRelationshipsApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_BusinessAccessRelationshipsApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_BusinessAccessRelationshipsApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/DeletePartnersRequest.h"
#include "CppRestOpenAPIClient/model/DeletePartnersResponse.h"
#include "CppRestOpenAPIClient/model/DeletedMembersResponse.h"
#include "CppRestOpenAPIClient/model/Error.h"
#include "CppRestOpenAPIClient/model/Get_business_employers_200_response.h"
#include "CppRestOpenAPIClient/model/Get_business_members_200_response.h"
#include "CppRestOpenAPIClient/model/Get_business_partners_200_response.h"
#include "CppRestOpenAPIClient/model/MemberBusinessRole.h"
#include "CppRestOpenAPIClient/model/MembersToDeleteBody.h"
#include "CppRestOpenAPIClient/model/PartnerType.h"
#include "CppRestOpenAPIClient/model/UpdateMemberBusinessRoleBody.h"
#include "CppRestOpenAPIClient/model/UpdateMemberResultsResponseArray.h"
#include <vector>
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  BusinessAccessRelationshipsApi 
{
public:

    explicit BusinessAccessRelationshipsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~BusinessAccessRelationshipsApi();

    /// <summary>
    /// Terminate business memberships
    /// </summary>
    /// <remarks>
    /// Terminate memberships between the specified members and your business.
    /// </remarks>
    /// <param name="businessId">Business id</param>
    /// <param name="membersToDeleteBody">List of members with role to delete.</param>
    pplx::task<std::shared_ptr<DeletedMembersResponse>> deleteBusinessMembership(
        utility::string_t businessId,
        std::shared_ptr<MembersToDeleteBody> membersToDeleteBody
    ) const;
    /// <summary>
    /// Terminate business partnerships
    /// </summary>
    /// <remarks>
    /// Terminate partnerships between the specified partners and your business. Note: You may only batch terminate partners of the same partner type.
    /// </remarks>
    /// <param name="businessId">Unique identifier of the requesting business.</param>
    /// <param name="deletePartnersRequest">An object containing a \&quot;partner_ids\&quot; property composed of a list of partner IDs and a \&quot;partners_type\&quot; property specifying the type of partners to delete. </param>
    pplx::task<std::shared_ptr<DeletePartnersResponse>> deleteBusinessPartners(
        utility::string_t businessId,
        std::shared_ptr<DeletePartnersRequest> deletePartnersRequest
    ) const;
    /// <summary>
    /// List business employers for user
    /// </summary>
    /// <remarks>
    /// Get all of the viewing user&#39;s business employers.
    /// </remarks>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 0)</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<Get_business_employers_200_response>> get_businessEmployers(
        boost::optional<int32_t> pageSize,
        boost::optional<utility::string_t> bookmark
    ) const;
    /// <summary>
    /// Get business members
    /// </summary>
    /// <remarks>
    /// Get all members of the specified business. The return response will include the member&#39;s business_role and assets they have access to if assets_summary&#x3D;TRUE
    /// </remarks>
    /// <param name="businessId">Unique identifier of the requesting business.</param>
    /// <param name="assetsSummary">Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are (optional, default to false)</param>
    /// <param name="businessRoles">A list of business roles to filter the members by. Only members whose roles are in the specified roles will be returned. (optional, default to std::vector&lt;std::shared_ptr&lt;MemberBusinessRole&gt;&gt;())</param>
    /// <param name="memberIds">A list of business members ids separated by comma. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 0)</param>
    pplx::task<std::shared_ptr<Get_business_members_200_response>> get_businessMembers(
        utility::string_t businessId,
        boost::optional<bool> assetsSummary,
        boost::optional<std::vector<std::shared_ptr<MemberBusinessRole>>> businessRoles,
        boost::optional<utility::string_t> memberIds,
        boost::optional<int32_t> startIndex,
        boost::optional<utility::string_t> bookmark,
        boost::optional<int32_t> pageSize
    ) const;
    /// <summary>
    /// Get business partners
    /// </summary>
    /// <remarks>
    /// Get all partners of the specified business.  If the assets_summary&#x3D;TRUE and: - partner_type&#x3D;INTERNAL, the business assets returned are your business assets the partner has access to. - partner_type&#x3D;EXTERNAL, the business assets returned are your partner&#39;s business assets the partner has granted you   access to.
    /// </remarks>
    /// <param name="businessId">Unique identifier of the requesting business.</param>
    /// <param name="assetsSummary">Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are (optional, default to false)</param>
    /// <param name="partnerType">Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset. (optional, default to new PartnerType())</param>
    /// <param name="partnerIds">A list of business partner ids separated by commas used to filter the results. Only partners with the specified ids will be returned. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="startIndex">An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 0)</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<Get_business_partners_200_response>> get_businessPartners(
        utility::string_t businessId,
        boost::optional<bool> assetsSummary,
        boost::optional<std::shared_ptr<PartnerType>> partnerType,
        boost::optional<utility::string_t> partnerIds,
        boost::optional<int32_t> startIndex,
        boost::optional<int32_t> pageSize,
        boost::optional<utility::string_t> bookmark
    ) const;
    /// <summary>
    /// Update member&#39;s business role
    /// </summary>
    /// <remarks>
    /// Update a member&#39;s business role within the business.
    /// </remarks>
    /// <param name="businessId">Business id</param>
    /// <param name="updateMemberBusinessRoleBody">List of objects with the member id and the business_role.</param>
    pplx::task<std::shared_ptr<UpdateMemberResultsResponseArray>> update_businessMemberships(
        utility::string_t businessId,
        std::vector<std::shared_ptr<UpdateMemberBusinessRoleBody>> updateMemberBusinessRoleBody
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_BusinessAccessRelationshipsApi_H_ */

