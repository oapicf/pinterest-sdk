/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * IntegrationsApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_IntegrationsApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_IntegrationsApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/DetailedError.h"
#include "CppRestOpenAPIClient/model/Error.h"
#include "CppRestOpenAPIClient/model/IntegrationLogsRequest.h"
#include "CppRestOpenAPIClient/model/IntegrationLogsSuccessResponse.h"
#include "CppRestOpenAPIClient/model/IntegrationMetadata.h"
#include "CppRestOpenAPIClient/model/IntegrationRecord.h"
#include "CppRestOpenAPIClient/model/IntegrationRequest.h"
#include "CppRestOpenAPIClient/model/IntegrationRequestPatch.h"
#include "CppRestOpenAPIClient/model/Integrations_get_list_200_response.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  IntegrationsApi 
{
public:

    explicit IntegrationsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~IntegrationsApi();

    /// <summary>
    /// Delete commerce integration
    /// </summary>
    /// <remarks>
    /// Delete commerce integration metadata for the given external business ID. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
    /// </remarks>
    /// <param name="externalBusinessId">External business ID for the integration.</param>
    pplx::task<void> integrationsCommerce_del(
        utility::string_t externalBusinessId
    ) const;
    /// <summary>
    /// Get commerce integration
    /// </summary>
    /// <remarks>
    /// Get commerce integration metadata associated with the given external business ID. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
    /// </remarks>
    /// <param name="externalBusinessId">External business ID for the integration.</param>
    pplx::task<std::shared_ptr<IntegrationMetadata>> integrationsCommerce_get(
        utility::string_t externalBusinessId
    ) const;
    /// <summary>
    /// Update commerce integration
    /// </summary>
    /// <remarks>
    /// Update commerce integration metadata for the given external business ID. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
    /// </remarks>
    /// <param name="externalBusinessId">External business ID for the integration.</param>
    /// <param name="integrationRequestPatch">Parameters to get create/update the Integration Metadata (optional)</param>
    pplx::task<std::shared_ptr<IntegrationMetadata>> integrationsCommerce_patch(
        utility::string_t externalBusinessId,
        boost::optional<std::shared_ptr<IntegrationRequestPatch>> integrationRequestPatch
    ) const;
    /// <summary>
    /// Create commerce integration
    /// </summary>
    /// <remarks>
    /// Create commerce integration metadata to link an external business ID with a Pinterest merchant &amp; ad account. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
    /// </remarks>
    /// <param name="integrationRequest">Parameters to get create/update the Integration Metadata (optional)</param>
    pplx::task<std::shared_ptr<IntegrationMetadata>> integrationsCommerce_post(
        boost::optional<std::shared_ptr<IntegrationRequest>> integrationRequest
    ) const;
    /// <summary>
    /// Receives batched logs from integration applications.
    /// </summary>
    /// <remarks>
    /// This endpoint receives batched logs from integration applications on partner platforms. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
    /// </remarks>
    /// <param name="integrationLogsRequest">Ingest log information from external integration application.</param>
    pplx::task<std::shared_ptr<IntegrationLogsSuccessResponse>> integrationsLogs_post(
        std::shared_ptr<IntegrationLogsRequest> integrationLogsRequest
    ) const;
    /// <summary>
    /// Get integration metadata
    /// </summary>
    /// <remarks>
    /// Get integration metadata by ID. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
    /// </remarks>
    /// <param name="id">Integration ID.</param>
    pplx::task<std::shared_ptr<IntegrationRecord>> integrations_getById(
        utility::string_t id
    ) const;
    /// <summary>
    /// Get integration metadata list
    /// </summary>
    /// <remarks>
    /// Get integration metadata list. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
    /// </remarks>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 0)</param>
    pplx::task<std::shared_ptr<Integrations_get_list_200_response>> integrations_getList(
        boost::optional<utility::string_t> bookmark,
        boost::optional<int32_t> pageSize
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_IntegrationsApi_H_ */

