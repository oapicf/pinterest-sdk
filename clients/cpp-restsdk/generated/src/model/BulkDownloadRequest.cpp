/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/BulkDownloadRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



BulkDownloadRequest::BulkDownloadRequest()
{
    m_Entity_typesIsSet = false;
    m_Entity_idsIsSet = false;
    m_Updated_since = utility::conversions::to_string_t("");
    m_Updated_sinceIsSet = false;
    m_Campaign_filterIsSet = false;
    m_Output_formatIsSet = false;
}

BulkDownloadRequest::~BulkDownloadRequest()
{
}

void BulkDownloadRequest::validate()
{
    // TODO: implement validation
}

web::json::value BulkDownloadRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entity_typesIsSet)
    {
        val[utility::conversions::to_string_t(U("entity_types"))] = ModelBase::toJson(m_Entity_types);
    }
    if(m_Entity_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("entity_ids"))] = ModelBase::toJson(m_Entity_ids);
    }
    if(m_Updated_sinceIsSet)
    {
        val[utility::conversions::to_string_t(U("updated_since"))] = ModelBase::toJson(m_Updated_since);
    }
    if(m_Campaign_filterIsSet)
    {
        val[utility::conversions::to_string_t(U("campaign_filter"))] = ModelBase::toJson(m_Campaign_filter);
    }
    if(m_Output_formatIsSet)
    {
        val[utility::conversions::to_string_t(U("output_format"))] = ModelBase::toJson(m_Output_format);
    }

    return val;
}

bool BulkDownloadRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entity_types"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entity_types")));
        if(!fieldValue.is_null())
        {
            std::vector<BulkEntityType> refVal_setEntityTypes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntityTypes);
            setEntityTypes(refVal_setEntityTypes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("entity_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entity_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setEntityIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntityIds);
            setEntityIds(refVal_setEntityIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updated_since"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updated_since")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUpdatedSince;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedSince);
            setUpdatedSince(refVal_setUpdatedSince);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("campaign_filter"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("campaign_filter")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BulkDownloadRequest_campaign_filter> refVal_setCampaignFilter;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCampaignFilter);
            setCampaignFilter(refVal_setCampaignFilter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("output_format"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("output_format")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BulkOutputFormat> refVal_setOutputFormat;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOutputFormat);
            setOutputFormat(refVal_setOutputFormat);
        }
    }
    return ok;
}

void BulkDownloadRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entity_typesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entity_types")), m_Entity_types));
    }
    if(m_Entity_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entity_ids")), m_Entity_ids));
    }
    if(m_Updated_sinceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updated_since")), m_Updated_since));
    }
    if(m_Campaign_filterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("campaign_filter")), m_Campaign_filter));
    }
    if(m_Output_formatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("output_format")), m_Output_format));
    }
}

bool BulkDownloadRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entity_types"))))
    {
        std::vector<BulkEntityType> refVal_setEntityTypes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entity_types"))), refVal_setEntityTypes );
        setEntityTypes(refVal_setEntityTypes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("entity_ids"))))
    {
        std::vector<utility::string_t> refVal_setEntityIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entity_ids"))), refVal_setEntityIds );
        setEntityIds(refVal_setEntityIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updated_since"))))
    {
        utility::string_t refVal_setUpdatedSince;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updated_since"))), refVal_setUpdatedSince );
        setUpdatedSince(refVal_setUpdatedSince);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("campaign_filter"))))
    {
        std::shared_ptr<BulkDownloadRequest_campaign_filter> refVal_setCampaignFilter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("campaign_filter"))), refVal_setCampaignFilter );
        setCampaignFilter(refVal_setCampaignFilter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("output_format"))))
    {
        std::shared_ptr<BulkOutputFormat> refVal_setOutputFormat;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("output_format"))), refVal_setOutputFormat );
        setOutputFormat(refVal_setOutputFormat);
    }
    return ok;
}

std::vector<BulkEntityType>& BulkDownloadRequest::getEntityTypes()
{
    return m_Entity_types;
}

void BulkDownloadRequest::setEntityTypes(const std::vector<BulkEntityType>& value)
{
    m_Entity_types = value;
    m_Entity_typesIsSet = true;
}

bool BulkDownloadRequest::entityTypesIsSet() const
{
    return m_Entity_typesIsSet;
}

void BulkDownloadRequest::unsetEntity_types()
{
    m_Entity_typesIsSet = false;
}
std::vector<utility::string_t>& BulkDownloadRequest::getEntityIds()
{
    return m_Entity_ids;
}

void BulkDownloadRequest::setEntityIds(const std::vector<utility::string_t>& value)
{
    m_Entity_ids = value;
    m_Entity_idsIsSet = true;
}

bool BulkDownloadRequest::entityIdsIsSet() const
{
    return m_Entity_idsIsSet;
}

void BulkDownloadRequest::unsetEntity_ids()
{
    m_Entity_idsIsSet = false;
}
utility::string_t BulkDownloadRequest::getUpdatedSince() const
{
    return m_Updated_since;
}

void BulkDownloadRequest::setUpdatedSince(const utility::string_t& value)
{
    m_Updated_since = value;
    m_Updated_sinceIsSet = true;
}

bool BulkDownloadRequest::updatedSinceIsSet() const
{
    return m_Updated_sinceIsSet;
}

void BulkDownloadRequest::unsetUpdated_since()
{
    m_Updated_sinceIsSet = false;
}
std::shared_ptr<BulkDownloadRequest_campaign_filter> BulkDownloadRequest::getCampaignFilter() const
{
    return m_Campaign_filter;
}

void BulkDownloadRequest::setCampaignFilter(const std::shared_ptr<BulkDownloadRequest_campaign_filter>& value)
{
    m_Campaign_filter = value;
    m_Campaign_filterIsSet = true;
}

bool BulkDownloadRequest::campaignFilterIsSet() const
{
    return m_Campaign_filterIsSet;
}

void BulkDownloadRequest::unsetCampaign_filter()
{
    m_Campaign_filterIsSet = false;
}
std::shared_ptr<BulkOutputFormat> BulkDownloadRequest::getOutputFormat() const
{
    return m_Output_format;
}

void BulkDownloadRequest::setOutputFormat(const std::shared_ptr<BulkOutputFormat>& value)
{
    m_Output_format = value;
    m_Output_formatIsSet = true;
}

bool BulkDownloadRequest::outputFormatIsSet() const
{
    return m_Output_formatIsSet;
}

void BulkDownloadRequest::unsetOutput_format()
{
    m_Output_formatIsSet = false;
}
}
}
}
}


