/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AudienceDemographics.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AudienceDemographics::AudienceDemographics()
{
    m_AgesIsSet = false;
    m_GendersIsSet = false;
    m_DevicesIsSet = false;
    m_MetrosIsSet = false;
    m_CountriesIsSet = false;
}

AudienceDemographics::~AudienceDemographics()
{
}

void AudienceDemographics::validate()
{
    // TODO: implement validation
}

web::json::value AudienceDemographics::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AgesIsSet)
    {
        val[utility::conversions::to_string_t(U("ages"))] = ModelBase::toJson(m_Ages);
    }
    if(m_GendersIsSet)
    {
        val[utility::conversions::to_string_t(U("genders"))] = ModelBase::toJson(m_Genders);
    }
    if(m_DevicesIsSet)
    {
        val[utility::conversions::to_string_t(U("devices"))] = ModelBase::toJson(m_Devices);
    }
    if(m_MetrosIsSet)
    {
        val[utility::conversions::to_string_t(U("metros"))] = ModelBase::toJson(m_Metros);
    }
    if(m_CountriesIsSet)
    {
        val[utility::conversions::to_string_t(U("countries"))] = ModelBase::toJson(m_Countries);
    }

    return val;
}

bool AudienceDemographics::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("ages"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ages")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<AudienceDemographicValue>> refVal_setAges;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAges);
            setAges(refVal_setAges);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("genders"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("genders")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<AudienceDemographicValue>> refVal_setGenders;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGenders);
            setGenders(refVal_setGenders);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("devices"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("devices")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<AudienceDemographicValue>> refVal_setDevices;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDevices);
            setDevices(refVal_setDevices);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("metros"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("metros")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<AudienceDemographicValue>> refVal_setMetros;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMetros);
            setMetros(refVal_setMetros);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("countries"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("countries")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<AudienceDemographicValue>> refVal_setCountries;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCountries);
            setCountries(refVal_setCountries);
        }
    }
    return ok;
}

void AudienceDemographics::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AgesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ages")), m_Ages));
    }
    if(m_GendersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("genders")), m_Genders));
    }
    if(m_DevicesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("devices")), m_Devices));
    }
    if(m_MetrosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("metros")), m_Metros));
    }
    if(m_CountriesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("countries")), m_Countries));
    }
}

bool AudienceDemographics::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("ages"))))
    {
        std::vector<std::shared_ptr<AudienceDemographicValue>> refVal_setAges;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ages"))), refVal_setAges );
        setAges(refVal_setAges);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("genders"))))
    {
        std::vector<std::shared_ptr<AudienceDemographicValue>> refVal_setGenders;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("genders"))), refVal_setGenders );
        setGenders(refVal_setGenders);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("devices"))))
    {
        std::vector<std::shared_ptr<AudienceDemographicValue>> refVal_setDevices;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("devices"))), refVal_setDevices );
        setDevices(refVal_setDevices);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("metros"))))
    {
        std::vector<std::shared_ptr<AudienceDemographicValue>> refVal_setMetros;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("metros"))), refVal_setMetros );
        setMetros(refVal_setMetros);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("countries"))))
    {
        std::vector<std::shared_ptr<AudienceDemographicValue>> refVal_setCountries;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("countries"))), refVal_setCountries );
        setCountries(refVal_setCountries);
    }
    return ok;
}

std::vector<std::shared_ptr<AudienceDemographicValue>>& AudienceDemographics::getAges()
{
    return m_Ages;
}

void AudienceDemographics::setAges(const std::vector<std::shared_ptr<AudienceDemographicValue>>& value)
{
    m_Ages = value;
    m_AgesIsSet = true;
}

bool AudienceDemographics::agesIsSet() const
{
    return m_AgesIsSet;
}

void AudienceDemographics::unsetAges()
{
    m_AgesIsSet = false;
}
std::vector<std::shared_ptr<AudienceDemographicValue>>& AudienceDemographics::getGenders()
{
    return m_Genders;
}

void AudienceDemographics::setGenders(const std::vector<std::shared_ptr<AudienceDemographicValue>>& value)
{
    m_Genders = value;
    m_GendersIsSet = true;
}

bool AudienceDemographics::gendersIsSet() const
{
    return m_GendersIsSet;
}

void AudienceDemographics::unsetGenders()
{
    m_GendersIsSet = false;
}
std::vector<std::shared_ptr<AudienceDemographicValue>>& AudienceDemographics::getDevices()
{
    return m_Devices;
}

void AudienceDemographics::setDevices(const std::vector<std::shared_ptr<AudienceDemographicValue>>& value)
{
    m_Devices = value;
    m_DevicesIsSet = true;
}

bool AudienceDemographics::devicesIsSet() const
{
    return m_DevicesIsSet;
}

void AudienceDemographics::unsetDevices()
{
    m_DevicesIsSet = false;
}
std::vector<std::shared_ptr<AudienceDemographicValue>>& AudienceDemographics::getMetros()
{
    return m_Metros;
}

void AudienceDemographics::setMetros(const std::vector<std::shared_ptr<AudienceDemographicValue>>& value)
{
    m_Metros = value;
    m_MetrosIsSet = true;
}

bool AudienceDemographics::metrosIsSet() const
{
    return m_MetrosIsSet;
}

void AudienceDemographics::unsetMetros()
{
    m_MetrosIsSet = false;
}
std::vector<std::shared_ptr<AudienceDemographicValue>>& AudienceDemographics::getCountries()
{
    return m_Countries;
}

void AudienceDemographics::setCountries(const std::vector<std::shared_ptr<AudienceDemographicValue>>& value)
{
    m_Countries = value;
    m_CountriesIsSet = true;
}

bool AudienceDemographics::countriesIsSet() const
{
    return m_CountriesIsSet;
}

void AudienceDemographics::unsetCountries()
{
    m_CountriesIsSet = false;
}
}
}
}
}


