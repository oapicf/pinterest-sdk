/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CatalogsProductGroupFilterKeys.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CatalogsProductGroupFilterKeys::CatalogsProductGroupFilterKeys()
{
    m_MIN_PRICEIsSet = false;
    m_MAX_PRICEIsSet = false;
    m_CURRENCYIsSet = false;
    m_ITEM_IDIsSet = false;
    m_AVAILABILITYIsSet = false;
    m_BRANDIsSet = false;
    m_CONDITIONIsSet = false;
    m_CUSTOM_LABEL_0IsSet = false;
    m_CUSTOM_LABEL_1IsSet = false;
    m_CUSTOM_LABEL_2IsSet = false;
    m_CUSTOM_LABEL_3IsSet = false;
    m_CUSTOM_LABEL_4IsSet = false;
    m_ITEM_GROUP_IDIsSet = false;
    m_GENDERIsSet = false;
    m_MEDIA_TYPEIsSet = false;
    m_PRODUCT_TYPE_4IsSet = false;
    m_PRODUCT_TYPE_3IsSet = false;
    m_PRODUCT_TYPE_2IsSet = false;
    m_PRODUCT_TYPE_1IsSet = false;
    m_PRODUCT_TYPE_0IsSet = false;
    m_GOOGLE_PRODUCT_CATEGORY_6IsSet = false;
    m_GOOGLE_PRODUCT_CATEGORY_5IsSet = false;
    m_GOOGLE_PRODUCT_CATEGORY_4IsSet = false;
    m_GOOGLE_PRODUCT_CATEGORY_3IsSet = false;
    m_GOOGLE_PRODUCT_CATEGORY_2IsSet = false;
    m_GOOGLE_PRODUCT_CATEGORY_1IsSet = false;
    m_GOOGLE_PRODUCT_CATEGORY_0IsSet = false;
    m_PRODUCT_GROUPIsSet = false;
}

CatalogsProductGroupFilterKeys::~CatalogsProductGroupFilterKeys()
{
}

void CatalogsProductGroupFilterKeys::validate()
{
    // TODO: implement validation
}

web::json::value CatalogsProductGroupFilterKeys::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MIN_PRICEIsSet)
    {
        val[utility::conversions::to_string_t(U("MIN_PRICE"))] = ModelBase::toJson(m_MIN_PRICE);
    }
    if(m_MAX_PRICEIsSet)
    {
        val[utility::conversions::to_string_t(U("MAX_PRICE"))] = ModelBase::toJson(m_MAX_PRICE);
    }
    if(m_CURRENCYIsSet)
    {
        val[utility::conversions::to_string_t(U("CURRENCY"))] = ModelBase::toJson(m_CURRENCY);
    }
    if(m_ITEM_IDIsSet)
    {
        val[utility::conversions::to_string_t(U("ITEM_ID"))] = ModelBase::toJson(m_ITEM_ID);
    }
    if(m_AVAILABILITYIsSet)
    {
        val[utility::conversions::to_string_t(U("AVAILABILITY"))] = ModelBase::toJson(m_AVAILABILITY);
    }
    if(m_BRANDIsSet)
    {
        val[utility::conversions::to_string_t(U("BRAND"))] = ModelBase::toJson(m_BRAND);
    }
    if(m_CONDITIONIsSet)
    {
        val[utility::conversions::to_string_t(U("CONDITION"))] = ModelBase::toJson(m_CONDITION);
    }
    if(m_CUSTOM_LABEL_0IsSet)
    {
        val[utility::conversions::to_string_t(U("CUSTOM_LABEL_0"))] = ModelBase::toJson(m_CUSTOM_LABEL_0);
    }
    if(m_CUSTOM_LABEL_1IsSet)
    {
        val[utility::conversions::to_string_t(U("CUSTOM_LABEL_1"))] = ModelBase::toJson(m_CUSTOM_LABEL_1);
    }
    if(m_CUSTOM_LABEL_2IsSet)
    {
        val[utility::conversions::to_string_t(U("CUSTOM_LABEL_2"))] = ModelBase::toJson(m_CUSTOM_LABEL_2);
    }
    if(m_CUSTOM_LABEL_3IsSet)
    {
        val[utility::conversions::to_string_t(U("CUSTOM_LABEL_3"))] = ModelBase::toJson(m_CUSTOM_LABEL_3);
    }
    if(m_CUSTOM_LABEL_4IsSet)
    {
        val[utility::conversions::to_string_t(U("CUSTOM_LABEL_4"))] = ModelBase::toJson(m_CUSTOM_LABEL_4);
    }
    if(m_ITEM_GROUP_IDIsSet)
    {
        val[utility::conversions::to_string_t(U("ITEM_GROUP_ID"))] = ModelBase::toJson(m_ITEM_GROUP_ID);
    }
    if(m_GENDERIsSet)
    {
        val[utility::conversions::to_string_t(U("GENDER"))] = ModelBase::toJson(m_GENDER);
    }
    if(m_MEDIA_TYPEIsSet)
    {
        val[utility::conversions::to_string_t(U("MEDIA_TYPE"))] = ModelBase::toJson(m_MEDIA_TYPE);
    }
    if(m_PRODUCT_TYPE_4IsSet)
    {
        val[utility::conversions::to_string_t(U("PRODUCT_TYPE_4"))] = ModelBase::toJson(m_PRODUCT_TYPE_4);
    }
    if(m_PRODUCT_TYPE_3IsSet)
    {
        val[utility::conversions::to_string_t(U("PRODUCT_TYPE_3"))] = ModelBase::toJson(m_PRODUCT_TYPE_3);
    }
    if(m_PRODUCT_TYPE_2IsSet)
    {
        val[utility::conversions::to_string_t(U("PRODUCT_TYPE_2"))] = ModelBase::toJson(m_PRODUCT_TYPE_2);
    }
    if(m_PRODUCT_TYPE_1IsSet)
    {
        val[utility::conversions::to_string_t(U("PRODUCT_TYPE_1"))] = ModelBase::toJson(m_PRODUCT_TYPE_1);
    }
    if(m_PRODUCT_TYPE_0IsSet)
    {
        val[utility::conversions::to_string_t(U("PRODUCT_TYPE_0"))] = ModelBase::toJson(m_PRODUCT_TYPE_0);
    }
    if(m_GOOGLE_PRODUCT_CATEGORY_6IsSet)
    {
        val[utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_6"))] = ModelBase::toJson(m_GOOGLE_PRODUCT_CATEGORY_6);
    }
    if(m_GOOGLE_PRODUCT_CATEGORY_5IsSet)
    {
        val[utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_5"))] = ModelBase::toJson(m_GOOGLE_PRODUCT_CATEGORY_5);
    }
    if(m_GOOGLE_PRODUCT_CATEGORY_4IsSet)
    {
        val[utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_4"))] = ModelBase::toJson(m_GOOGLE_PRODUCT_CATEGORY_4);
    }
    if(m_GOOGLE_PRODUCT_CATEGORY_3IsSet)
    {
        val[utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_3"))] = ModelBase::toJson(m_GOOGLE_PRODUCT_CATEGORY_3);
    }
    if(m_GOOGLE_PRODUCT_CATEGORY_2IsSet)
    {
        val[utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_2"))] = ModelBase::toJson(m_GOOGLE_PRODUCT_CATEGORY_2);
    }
    if(m_GOOGLE_PRODUCT_CATEGORY_1IsSet)
    {
        val[utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_1"))] = ModelBase::toJson(m_GOOGLE_PRODUCT_CATEGORY_1);
    }
    if(m_GOOGLE_PRODUCT_CATEGORY_0IsSet)
    {
        val[utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_0"))] = ModelBase::toJson(m_GOOGLE_PRODUCT_CATEGORY_0);
    }
    if(m_PRODUCT_GROUPIsSet)
    {
        val[utility::conversions::to_string_t(U("PRODUCT_GROUP"))] = ModelBase::toJson(m_PRODUCT_GROUP);
    }

    return val;
}

bool CatalogsProductGroupFilterKeys::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("MIN_PRICE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MIN_PRICE")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupPricingCriteria> refVal_setMINPRICE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMINPRICE);
            setMINPRICE(refVal_setMINPRICE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MAX_PRICE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MAX_PRICE")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupPricingCriteria> refVal_setMAXPRICE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMAXPRICE);
            setMAXPRICE(refVal_setMAXPRICE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CURRENCY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CURRENCY")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupCurrencyCriteria> refVal_setCURRENCY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCURRENCY);
            setCURRENCY(refVal_setCURRENCY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ITEM_ID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ITEM_ID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setITEMID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setITEMID);
            setITEMID(refVal_setITEMID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("AVAILABILITY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("AVAILABILITY")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setAVAILABILITY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAVAILABILITY);
            setAVAILABILITY(refVal_setAVAILABILITY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("BRAND"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("BRAND")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setBRAND;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBRAND);
            setBRAND(refVal_setBRAND);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CONDITION"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CONDITION")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCONDITION;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCONDITION);
            setCONDITION(refVal_setCONDITION);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CUSTOM_LABEL_0"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CUSTOM_LABEL_0")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCUSTOMLABEL0;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCUSTOMLABEL0);
            setCUSTOMLABEL0(refVal_setCUSTOMLABEL0);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CUSTOM_LABEL_1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CUSTOM_LABEL_1")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCUSTOMLABEL1;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCUSTOMLABEL1);
            setCUSTOMLABEL1(refVal_setCUSTOMLABEL1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CUSTOM_LABEL_2"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CUSTOM_LABEL_2")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCUSTOMLABEL2;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCUSTOMLABEL2);
            setCUSTOMLABEL2(refVal_setCUSTOMLABEL2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CUSTOM_LABEL_3"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CUSTOM_LABEL_3")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCUSTOMLABEL3;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCUSTOMLABEL3);
            setCUSTOMLABEL3(refVal_setCUSTOMLABEL3);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CUSTOM_LABEL_4"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CUSTOM_LABEL_4")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCUSTOMLABEL4;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCUSTOMLABEL4);
            setCUSTOMLABEL4(refVal_setCUSTOMLABEL4);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ITEM_GROUP_ID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ITEM_GROUP_ID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setITEMGROUPID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setITEMGROUPID);
            setITEMGROUPID(refVal_setITEMGROUPID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("GENDER"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("GENDER")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleGenderCriteria> refVal_setGENDER;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGENDER);
            setGENDER(refVal_setGENDER);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MEDIA_TYPE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MEDIA_TYPE")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleMediaTypesCriteria> refVal_setMEDIATYPE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMEDIATYPE);
            setMEDIATYPE(refVal_setMEDIATYPE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("PRODUCT_TYPE_4"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("PRODUCT_TYPE_4")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setPRODUCTTYPE4;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPRODUCTTYPE4);
            setPRODUCTTYPE4(refVal_setPRODUCTTYPE4);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("PRODUCT_TYPE_3"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("PRODUCT_TYPE_3")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setPRODUCTTYPE3;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPRODUCTTYPE3);
            setPRODUCTTYPE3(refVal_setPRODUCTTYPE3);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("PRODUCT_TYPE_2"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("PRODUCT_TYPE_2")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setPRODUCTTYPE2;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPRODUCTTYPE2);
            setPRODUCTTYPE2(refVal_setPRODUCTTYPE2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("PRODUCT_TYPE_1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("PRODUCT_TYPE_1")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setPRODUCTTYPE1;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPRODUCTTYPE1);
            setPRODUCTTYPE1(refVal_setPRODUCTTYPE1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("PRODUCT_TYPE_0"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("PRODUCT_TYPE_0")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setPRODUCTTYPE0;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPRODUCTTYPE0);
            setPRODUCTTYPE0(refVal_setPRODUCTTYPE0);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_6"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_6")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setGOOGLEPRODUCTCATEGORY6;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGOOGLEPRODUCTCATEGORY6);
            setGOOGLEPRODUCTCATEGORY6(refVal_setGOOGLEPRODUCTCATEGORY6);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_5"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_5")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setGOOGLEPRODUCTCATEGORY5;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGOOGLEPRODUCTCATEGORY5);
            setGOOGLEPRODUCTCATEGORY5(refVal_setGOOGLEPRODUCTCATEGORY5);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_4"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_4")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setGOOGLEPRODUCTCATEGORY4;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGOOGLEPRODUCTCATEGORY4);
            setGOOGLEPRODUCTCATEGORY4(refVal_setGOOGLEPRODUCTCATEGORY4);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_3"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_3")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setGOOGLEPRODUCTCATEGORY3;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGOOGLEPRODUCTCATEGORY3);
            setGOOGLEPRODUCTCATEGORY3(refVal_setGOOGLEPRODUCTCATEGORY3);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_2"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_2")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setGOOGLEPRODUCTCATEGORY2;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGOOGLEPRODUCTCATEGORY2);
            setGOOGLEPRODUCTCATEGORY2(refVal_setGOOGLEPRODUCTCATEGORY2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_1")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setGOOGLEPRODUCTCATEGORY1;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGOOGLEPRODUCTCATEGORY1);
            setGOOGLEPRODUCTCATEGORY1(refVal_setGOOGLEPRODUCTCATEGORY1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_0"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_0")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setGOOGLEPRODUCTCATEGORY0;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGOOGLEPRODUCTCATEGORY0);
            setGOOGLEPRODUCTCATEGORY0(refVal_setGOOGLEPRODUCTCATEGORY0);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("PRODUCT_GROUP"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("PRODUCT_GROUP")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setPRODUCTGROUP;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPRODUCTGROUP);
            setPRODUCTGROUP(refVal_setPRODUCTGROUP);
        }
    }
    return ok;
}

void CatalogsProductGroupFilterKeys::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_MIN_PRICEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MIN_PRICE")), m_MIN_PRICE));
    }
    if(m_MAX_PRICEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MAX_PRICE")), m_MAX_PRICE));
    }
    if(m_CURRENCYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CURRENCY")), m_CURRENCY));
    }
    if(m_ITEM_IDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ITEM_ID")), m_ITEM_ID));
    }
    if(m_AVAILABILITYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("AVAILABILITY")), m_AVAILABILITY));
    }
    if(m_BRANDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("BRAND")), m_BRAND));
    }
    if(m_CONDITIONIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CONDITION")), m_CONDITION));
    }
    if(m_CUSTOM_LABEL_0IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CUSTOM_LABEL_0")), m_CUSTOM_LABEL_0));
    }
    if(m_CUSTOM_LABEL_1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CUSTOM_LABEL_1")), m_CUSTOM_LABEL_1));
    }
    if(m_CUSTOM_LABEL_2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CUSTOM_LABEL_2")), m_CUSTOM_LABEL_2));
    }
    if(m_CUSTOM_LABEL_3IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CUSTOM_LABEL_3")), m_CUSTOM_LABEL_3));
    }
    if(m_CUSTOM_LABEL_4IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CUSTOM_LABEL_4")), m_CUSTOM_LABEL_4));
    }
    if(m_ITEM_GROUP_IDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ITEM_GROUP_ID")), m_ITEM_GROUP_ID));
    }
    if(m_GENDERIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("GENDER")), m_GENDER));
    }
    if(m_MEDIA_TYPEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MEDIA_TYPE")), m_MEDIA_TYPE));
    }
    if(m_PRODUCT_TYPE_4IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("PRODUCT_TYPE_4")), m_PRODUCT_TYPE_4));
    }
    if(m_PRODUCT_TYPE_3IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("PRODUCT_TYPE_3")), m_PRODUCT_TYPE_3));
    }
    if(m_PRODUCT_TYPE_2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("PRODUCT_TYPE_2")), m_PRODUCT_TYPE_2));
    }
    if(m_PRODUCT_TYPE_1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("PRODUCT_TYPE_1")), m_PRODUCT_TYPE_1));
    }
    if(m_PRODUCT_TYPE_0IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("PRODUCT_TYPE_0")), m_PRODUCT_TYPE_0));
    }
    if(m_GOOGLE_PRODUCT_CATEGORY_6IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_6")), m_GOOGLE_PRODUCT_CATEGORY_6));
    }
    if(m_GOOGLE_PRODUCT_CATEGORY_5IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_5")), m_GOOGLE_PRODUCT_CATEGORY_5));
    }
    if(m_GOOGLE_PRODUCT_CATEGORY_4IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_4")), m_GOOGLE_PRODUCT_CATEGORY_4));
    }
    if(m_GOOGLE_PRODUCT_CATEGORY_3IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_3")), m_GOOGLE_PRODUCT_CATEGORY_3));
    }
    if(m_GOOGLE_PRODUCT_CATEGORY_2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_2")), m_GOOGLE_PRODUCT_CATEGORY_2));
    }
    if(m_GOOGLE_PRODUCT_CATEGORY_1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_1")), m_GOOGLE_PRODUCT_CATEGORY_1));
    }
    if(m_GOOGLE_PRODUCT_CATEGORY_0IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_0")), m_GOOGLE_PRODUCT_CATEGORY_0));
    }
    if(m_PRODUCT_GROUPIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("PRODUCT_GROUP")), m_PRODUCT_GROUP));
    }
}

bool CatalogsProductGroupFilterKeys::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("MIN_PRICE"))))
    {
        std::shared_ptr<CatalogsProductGroupPricingCriteria> refVal_setMINPRICE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MIN_PRICE"))), refVal_setMINPRICE );
        setMINPRICE(refVal_setMINPRICE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MAX_PRICE"))))
    {
        std::shared_ptr<CatalogsProductGroupPricingCriteria> refVal_setMAXPRICE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MAX_PRICE"))), refVal_setMAXPRICE );
        setMAXPRICE(refVal_setMAXPRICE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CURRENCY"))))
    {
        std::shared_ptr<CatalogsProductGroupCurrencyCriteria> refVal_setCURRENCY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CURRENCY"))), refVal_setCURRENCY );
        setCURRENCY(refVal_setCURRENCY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ITEM_ID"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setITEMID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ITEM_ID"))), refVal_setITEMID );
        setITEMID(refVal_setITEMID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("AVAILABILITY"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setAVAILABILITY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("AVAILABILITY"))), refVal_setAVAILABILITY );
        setAVAILABILITY(refVal_setAVAILABILITY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("BRAND"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setBRAND;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("BRAND"))), refVal_setBRAND );
        setBRAND(refVal_setBRAND);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CONDITION"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCONDITION;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CONDITION"))), refVal_setCONDITION );
        setCONDITION(refVal_setCONDITION);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_0"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCUSTOMLABEL0;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_0"))), refVal_setCUSTOMLABEL0 );
        setCUSTOMLABEL0(refVal_setCUSTOMLABEL0);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_1"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCUSTOMLABEL1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_1"))), refVal_setCUSTOMLABEL1 );
        setCUSTOMLABEL1(refVal_setCUSTOMLABEL1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_2"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCUSTOMLABEL2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_2"))), refVal_setCUSTOMLABEL2 );
        setCUSTOMLABEL2(refVal_setCUSTOMLABEL2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_3"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCUSTOMLABEL3;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_3"))), refVal_setCUSTOMLABEL3 );
        setCUSTOMLABEL3(refVal_setCUSTOMLABEL3);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_4"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCUSTOMLABEL4;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_4"))), refVal_setCUSTOMLABEL4 );
        setCUSTOMLABEL4(refVal_setCUSTOMLABEL4);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ITEM_GROUP_ID"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setITEMGROUPID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ITEM_GROUP_ID"))), refVal_setITEMGROUPID );
        setITEMGROUPID(refVal_setITEMGROUPID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("GENDER"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleGenderCriteria> refVal_setGENDER;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("GENDER"))), refVal_setGENDER );
        setGENDER(refVal_setGENDER);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MEDIA_TYPE"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleMediaTypesCriteria> refVal_setMEDIATYPE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MEDIA_TYPE"))), refVal_setMEDIATYPE );
        setMEDIATYPE(refVal_setMEDIATYPE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("PRODUCT_TYPE_4"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setPRODUCTTYPE4;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("PRODUCT_TYPE_4"))), refVal_setPRODUCTTYPE4 );
        setPRODUCTTYPE4(refVal_setPRODUCTTYPE4);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("PRODUCT_TYPE_3"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setPRODUCTTYPE3;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("PRODUCT_TYPE_3"))), refVal_setPRODUCTTYPE3 );
        setPRODUCTTYPE3(refVal_setPRODUCTTYPE3);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("PRODUCT_TYPE_2"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setPRODUCTTYPE2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("PRODUCT_TYPE_2"))), refVal_setPRODUCTTYPE2 );
        setPRODUCTTYPE2(refVal_setPRODUCTTYPE2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("PRODUCT_TYPE_1"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setPRODUCTTYPE1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("PRODUCT_TYPE_1"))), refVal_setPRODUCTTYPE1 );
        setPRODUCTTYPE1(refVal_setPRODUCTTYPE1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("PRODUCT_TYPE_0"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setPRODUCTTYPE0;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("PRODUCT_TYPE_0"))), refVal_setPRODUCTTYPE0 );
        setPRODUCTTYPE0(refVal_setPRODUCTTYPE0);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_6"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setGOOGLEPRODUCTCATEGORY6;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_6"))), refVal_setGOOGLEPRODUCTCATEGORY6 );
        setGOOGLEPRODUCTCATEGORY6(refVal_setGOOGLEPRODUCTCATEGORY6);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_5"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setGOOGLEPRODUCTCATEGORY5;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_5"))), refVal_setGOOGLEPRODUCTCATEGORY5 );
        setGOOGLEPRODUCTCATEGORY5(refVal_setGOOGLEPRODUCTCATEGORY5);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_4"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setGOOGLEPRODUCTCATEGORY4;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_4"))), refVal_setGOOGLEPRODUCTCATEGORY4 );
        setGOOGLEPRODUCTCATEGORY4(refVal_setGOOGLEPRODUCTCATEGORY4);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_3"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setGOOGLEPRODUCTCATEGORY3;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_3"))), refVal_setGOOGLEPRODUCTCATEGORY3 );
        setGOOGLEPRODUCTCATEGORY3(refVal_setGOOGLEPRODUCTCATEGORY3);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_2"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setGOOGLEPRODUCTCATEGORY2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_2"))), refVal_setGOOGLEPRODUCTCATEGORY2 );
        setGOOGLEPRODUCTCATEGORY2(refVal_setGOOGLEPRODUCTCATEGORY2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_1"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setGOOGLEPRODUCTCATEGORY1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_1"))), refVal_setGOOGLEPRODUCTCATEGORY1 );
        setGOOGLEPRODUCTCATEGORY1(refVal_setGOOGLEPRODUCTCATEGORY1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_0"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setGOOGLEPRODUCTCATEGORY0;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_0"))), refVal_setGOOGLEPRODUCTCATEGORY0 );
        setGOOGLEPRODUCTCATEGORY0(refVal_setGOOGLEPRODUCTCATEGORY0);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("PRODUCT_GROUP"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setPRODUCTGROUP;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("PRODUCT_GROUP"))), refVal_setPRODUCTGROUP );
        setPRODUCTGROUP(refVal_setPRODUCTGROUP);
    }
    return ok;
}

std::shared_ptr<CatalogsProductGroupPricingCriteria> CatalogsProductGroupFilterKeys::getMINPRICE() const
{
    return m_MIN_PRICE;
}

void CatalogsProductGroupFilterKeys::setMINPRICE(const std::shared_ptr<CatalogsProductGroupPricingCriteria>& value)
{
    m_MIN_PRICE = value;
    m_MIN_PRICEIsSet = true;
}

bool CatalogsProductGroupFilterKeys::mINPRICEIsSet() const
{
    return m_MIN_PRICEIsSet;
}

void CatalogsProductGroupFilterKeys::unsetMIN_PRICE()
{
    m_MIN_PRICEIsSet = false;
}
std::shared_ptr<CatalogsProductGroupPricingCriteria> CatalogsProductGroupFilterKeys::getMAXPRICE() const
{
    return m_MAX_PRICE;
}

void CatalogsProductGroupFilterKeys::setMAXPRICE(const std::shared_ptr<CatalogsProductGroupPricingCriteria>& value)
{
    m_MAX_PRICE = value;
    m_MAX_PRICEIsSet = true;
}

bool CatalogsProductGroupFilterKeys::mAXPRICEIsSet() const
{
    return m_MAX_PRICEIsSet;
}

void CatalogsProductGroupFilterKeys::unsetMAX_PRICE()
{
    m_MAX_PRICEIsSet = false;
}
std::shared_ptr<CatalogsProductGroupCurrencyCriteria> CatalogsProductGroupFilterKeys::getCURRENCY() const
{
    return m_CURRENCY;
}

void CatalogsProductGroupFilterKeys::setCURRENCY(const std::shared_ptr<CatalogsProductGroupCurrencyCriteria>& value)
{
    m_CURRENCY = value;
    m_CURRENCYIsSet = true;
}

bool CatalogsProductGroupFilterKeys::cURRENCYIsSet() const
{
    return m_CURRENCYIsSet;
}

void CatalogsProductGroupFilterKeys::unsetCURRENCY()
{
    m_CURRENCYIsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> CatalogsProductGroupFilterKeys::getITEMID() const
{
    return m_ITEM_ID;
}

void CatalogsProductGroupFilterKeys::setITEMID(const std::shared_ptr<CatalogsProductGroupMultipleStringCriteria>& value)
{
    m_ITEM_ID = value;
    m_ITEM_IDIsSet = true;
}

bool CatalogsProductGroupFilterKeys::iTEMIDIsSet() const
{
    return m_ITEM_IDIsSet;
}

void CatalogsProductGroupFilterKeys::unsetITEM_ID()
{
    m_ITEM_IDIsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> CatalogsProductGroupFilterKeys::getAVAILABILITY() const
{
    return m_AVAILABILITY;
}

void CatalogsProductGroupFilterKeys::setAVAILABILITY(const std::shared_ptr<CatalogsProductGroupMultipleStringCriteria>& value)
{
    m_AVAILABILITY = value;
    m_AVAILABILITYIsSet = true;
}

bool CatalogsProductGroupFilterKeys::aVAILABILITYIsSet() const
{
    return m_AVAILABILITYIsSet;
}

void CatalogsProductGroupFilterKeys::unsetAVAILABILITY()
{
    m_AVAILABILITYIsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> CatalogsProductGroupFilterKeys::getBRAND() const
{
    return m_BRAND;
}

void CatalogsProductGroupFilterKeys::setBRAND(const std::shared_ptr<CatalogsProductGroupMultipleStringCriteria>& value)
{
    m_BRAND = value;
    m_BRANDIsSet = true;
}

bool CatalogsProductGroupFilterKeys::bRANDIsSet() const
{
    return m_BRANDIsSet;
}

void CatalogsProductGroupFilterKeys::unsetBRAND()
{
    m_BRANDIsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> CatalogsProductGroupFilterKeys::getCONDITION() const
{
    return m_CONDITION;
}

void CatalogsProductGroupFilterKeys::setCONDITION(const std::shared_ptr<CatalogsProductGroupMultipleStringCriteria>& value)
{
    m_CONDITION = value;
    m_CONDITIONIsSet = true;
}

bool CatalogsProductGroupFilterKeys::cONDITIONIsSet() const
{
    return m_CONDITIONIsSet;
}

void CatalogsProductGroupFilterKeys::unsetCONDITION()
{
    m_CONDITIONIsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> CatalogsProductGroupFilterKeys::getCUSTOMLABEL0() const
{
    return m_CUSTOM_LABEL_0;
}

void CatalogsProductGroupFilterKeys::setCUSTOMLABEL0(const std::shared_ptr<CatalogsProductGroupMultipleStringCriteria>& value)
{
    m_CUSTOM_LABEL_0 = value;
    m_CUSTOM_LABEL_0IsSet = true;
}

bool CatalogsProductGroupFilterKeys::cUSTOMLABEL0IsSet() const
{
    return m_CUSTOM_LABEL_0IsSet;
}

void CatalogsProductGroupFilterKeys::unsetCUSTOM_LABEL_0()
{
    m_CUSTOM_LABEL_0IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> CatalogsProductGroupFilterKeys::getCUSTOMLABEL1() const
{
    return m_CUSTOM_LABEL_1;
}

void CatalogsProductGroupFilterKeys::setCUSTOMLABEL1(const std::shared_ptr<CatalogsProductGroupMultipleStringCriteria>& value)
{
    m_CUSTOM_LABEL_1 = value;
    m_CUSTOM_LABEL_1IsSet = true;
}

bool CatalogsProductGroupFilterKeys::cUSTOMLABEL1IsSet() const
{
    return m_CUSTOM_LABEL_1IsSet;
}

void CatalogsProductGroupFilterKeys::unsetCUSTOM_LABEL_1()
{
    m_CUSTOM_LABEL_1IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> CatalogsProductGroupFilterKeys::getCUSTOMLABEL2() const
{
    return m_CUSTOM_LABEL_2;
}

void CatalogsProductGroupFilterKeys::setCUSTOMLABEL2(const std::shared_ptr<CatalogsProductGroupMultipleStringCriteria>& value)
{
    m_CUSTOM_LABEL_2 = value;
    m_CUSTOM_LABEL_2IsSet = true;
}

bool CatalogsProductGroupFilterKeys::cUSTOMLABEL2IsSet() const
{
    return m_CUSTOM_LABEL_2IsSet;
}

void CatalogsProductGroupFilterKeys::unsetCUSTOM_LABEL_2()
{
    m_CUSTOM_LABEL_2IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> CatalogsProductGroupFilterKeys::getCUSTOMLABEL3() const
{
    return m_CUSTOM_LABEL_3;
}

void CatalogsProductGroupFilterKeys::setCUSTOMLABEL3(const std::shared_ptr<CatalogsProductGroupMultipleStringCriteria>& value)
{
    m_CUSTOM_LABEL_3 = value;
    m_CUSTOM_LABEL_3IsSet = true;
}

bool CatalogsProductGroupFilterKeys::cUSTOMLABEL3IsSet() const
{
    return m_CUSTOM_LABEL_3IsSet;
}

void CatalogsProductGroupFilterKeys::unsetCUSTOM_LABEL_3()
{
    m_CUSTOM_LABEL_3IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> CatalogsProductGroupFilterKeys::getCUSTOMLABEL4() const
{
    return m_CUSTOM_LABEL_4;
}

void CatalogsProductGroupFilterKeys::setCUSTOMLABEL4(const std::shared_ptr<CatalogsProductGroupMultipleStringCriteria>& value)
{
    m_CUSTOM_LABEL_4 = value;
    m_CUSTOM_LABEL_4IsSet = true;
}

bool CatalogsProductGroupFilterKeys::cUSTOMLABEL4IsSet() const
{
    return m_CUSTOM_LABEL_4IsSet;
}

void CatalogsProductGroupFilterKeys::unsetCUSTOM_LABEL_4()
{
    m_CUSTOM_LABEL_4IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> CatalogsProductGroupFilterKeys::getITEMGROUPID() const
{
    return m_ITEM_GROUP_ID;
}

void CatalogsProductGroupFilterKeys::setITEMGROUPID(const std::shared_ptr<CatalogsProductGroupMultipleStringCriteria>& value)
{
    m_ITEM_GROUP_ID = value;
    m_ITEM_GROUP_IDIsSet = true;
}

bool CatalogsProductGroupFilterKeys::iTEMGROUPIDIsSet() const
{
    return m_ITEM_GROUP_IDIsSet;
}

void CatalogsProductGroupFilterKeys::unsetITEM_GROUP_ID()
{
    m_ITEM_GROUP_IDIsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleGenderCriteria> CatalogsProductGroupFilterKeys::getGENDER() const
{
    return m_GENDER;
}

void CatalogsProductGroupFilterKeys::setGENDER(const std::shared_ptr<CatalogsProductGroupMultipleGenderCriteria>& value)
{
    m_GENDER = value;
    m_GENDERIsSet = true;
}

bool CatalogsProductGroupFilterKeys::gENDERIsSet() const
{
    return m_GENDERIsSet;
}

void CatalogsProductGroupFilterKeys::unsetGENDER()
{
    m_GENDERIsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleMediaTypesCriteria> CatalogsProductGroupFilterKeys::getMEDIATYPE() const
{
    return m_MEDIA_TYPE;
}

void CatalogsProductGroupFilterKeys::setMEDIATYPE(const std::shared_ptr<CatalogsProductGroupMultipleMediaTypesCriteria>& value)
{
    m_MEDIA_TYPE = value;
    m_MEDIA_TYPEIsSet = true;
}

bool CatalogsProductGroupFilterKeys::mEDIATYPEIsSet() const
{
    return m_MEDIA_TYPEIsSet;
}

void CatalogsProductGroupFilterKeys::unsetMEDIA_TYPE()
{
    m_MEDIA_TYPEIsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> CatalogsProductGroupFilterKeys::getPRODUCTTYPE4() const
{
    return m_PRODUCT_TYPE_4;
}

void CatalogsProductGroupFilterKeys::setPRODUCTTYPE4(const std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria>& value)
{
    m_PRODUCT_TYPE_4 = value;
    m_PRODUCT_TYPE_4IsSet = true;
}

bool CatalogsProductGroupFilterKeys::pRODUCTTYPE4IsSet() const
{
    return m_PRODUCT_TYPE_4IsSet;
}

void CatalogsProductGroupFilterKeys::unsetPRODUCT_TYPE_4()
{
    m_PRODUCT_TYPE_4IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> CatalogsProductGroupFilterKeys::getPRODUCTTYPE3() const
{
    return m_PRODUCT_TYPE_3;
}

void CatalogsProductGroupFilterKeys::setPRODUCTTYPE3(const std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria>& value)
{
    m_PRODUCT_TYPE_3 = value;
    m_PRODUCT_TYPE_3IsSet = true;
}

bool CatalogsProductGroupFilterKeys::pRODUCTTYPE3IsSet() const
{
    return m_PRODUCT_TYPE_3IsSet;
}

void CatalogsProductGroupFilterKeys::unsetPRODUCT_TYPE_3()
{
    m_PRODUCT_TYPE_3IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> CatalogsProductGroupFilterKeys::getPRODUCTTYPE2() const
{
    return m_PRODUCT_TYPE_2;
}

void CatalogsProductGroupFilterKeys::setPRODUCTTYPE2(const std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria>& value)
{
    m_PRODUCT_TYPE_2 = value;
    m_PRODUCT_TYPE_2IsSet = true;
}

bool CatalogsProductGroupFilterKeys::pRODUCTTYPE2IsSet() const
{
    return m_PRODUCT_TYPE_2IsSet;
}

void CatalogsProductGroupFilterKeys::unsetPRODUCT_TYPE_2()
{
    m_PRODUCT_TYPE_2IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> CatalogsProductGroupFilterKeys::getPRODUCTTYPE1() const
{
    return m_PRODUCT_TYPE_1;
}

void CatalogsProductGroupFilterKeys::setPRODUCTTYPE1(const std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria>& value)
{
    m_PRODUCT_TYPE_1 = value;
    m_PRODUCT_TYPE_1IsSet = true;
}

bool CatalogsProductGroupFilterKeys::pRODUCTTYPE1IsSet() const
{
    return m_PRODUCT_TYPE_1IsSet;
}

void CatalogsProductGroupFilterKeys::unsetPRODUCT_TYPE_1()
{
    m_PRODUCT_TYPE_1IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> CatalogsProductGroupFilterKeys::getPRODUCTTYPE0() const
{
    return m_PRODUCT_TYPE_0;
}

void CatalogsProductGroupFilterKeys::setPRODUCTTYPE0(const std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria>& value)
{
    m_PRODUCT_TYPE_0 = value;
    m_PRODUCT_TYPE_0IsSet = true;
}

bool CatalogsProductGroupFilterKeys::pRODUCTTYPE0IsSet() const
{
    return m_PRODUCT_TYPE_0IsSet;
}

void CatalogsProductGroupFilterKeys::unsetPRODUCT_TYPE_0()
{
    m_PRODUCT_TYPE_0IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> CatalogsProductGroupFilterKeys::getGOOGLEPRODUCTCATEGORY6() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_6;
}

void CatalogsProductGroupFilterKeys::setGOOGLEPRODUCTCATEGORY6(const std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria>& value)
{
    m_GOOGLE_PRODUCT_CATEGORY_6 = value;
    m_GOOGLE_PRODUCT_CATEGORY_6IsSet = true;
}

bool CatalogsProductGroupFilterKeys::gOOGLEPRODUCTCATEGORY6IsSet() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_6IsSet;
}

void CatalogsProductGroupFilterKeys::unsetGOOGLE_PRODUCT_CATEGORY_6()
{
    m_GOOGLE_PRODUCT_CATEGORY_6IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> CatalogsProductGroupFilterKeys::getGOOGLEPRODUCTCATEGORY5() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_5;
}

void CatalogsProductGroupFilterKeys::setGOOGLEPRODUCTCATEGORY5(const std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria>& value)
{
    m_GOOGLE_PRODUCT_CATEGORY_5 = value;
    m_GOOGLE_PRODUCT_CATEGORY_5IsSet = true;
}

bool CatalogsProductGroupFilterKeys::gOOGLEPRODUCTCATEGORY5IsSet() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_5IsSet;
}

void CatalogsProductGroupFilterKeys::unsetGOOGLE_PRODUCT_CATEGORY_5()
{
    m_GOOGLE_PRODUCT_CATEGORY_5IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> CatalogsProductGroupFilterKeys::getGOOGLEPRODUCTCATEGORY4() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_4;
}

void CatalogsProductGroupFilterKeys::setGOOGLEPRODUCTCATEGORY4(const std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria>& value)
{
    m_GOOGLE_PRODUCT_CATEGORY_4 = value;
    m_GOOGLE_PRODUCT_CATEGORY_4IsSet = true;
}

bool CatalogsProductGroupFilterKeys::gOOGLEPRODUCTCATEGORY4IsSet() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_4IsSet;
}

void CatalogsProductGroupFilterKeys::unsetGOOGLE_PRODUCT_CATEGORY_4()
{
    m_GOOGLE_PRODUCT_CATEGORY_4IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> CatalogsProductGroupFilterKeys::getGOOGLEPRODUCTCATEGORY3() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_3;
}

void CatalogsProductGroupFilterKeys::setGOOGLEPRODUCTCATEGORY3(const std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria>& value)
{
    m_GOOGLE_PRODUCT_CATEGORY_3 = value;
    m_GOOGLE_PRODUCT_CATEGORY_3IsSet = true;
}

bool CatalogsProductGroupFilterKeys::gOOGLEPRODUCTCATEGORY3IsSet() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_3IsSet;
}

void CatalogsProductGroupFilterKeys::unsetGOOGLE_PRODUCT_CATEGORY_3()
{
    m_GOOGLE_PRODUCT_CATEGORY_3IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> CatalogsProductGroupFilterKeys::getGOOGLEPRODUCTCATEGORY2() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_2;
}

void CatalogsProductGroupFilterKeys::setGOOGLEPRODUCTCATEGORY2(const std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria>& value)
{
    m_GOOGLE_PRODUCT_CATEGORY_2 = value;
    m_GOOGLE_PRODUCT_CATEGORY_2IsSet = true;
}

bool CatalogsProductGroupFilterKeys::gOOGLEPRODUCTCATEGORY2IsSet() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_2IsSet;
}

void CatalogsProductGroupFilterKeys::unsetGOOGLE_PRODUCT_CATEGORY_2()
{
    m_GOOGLE_PRODUCT_CATEGORY_2IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> CatalogsProductGroupFilterKeys::getGOOGLEPRODUCTCATEGORY1() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_1;
}

void CatalogsProductGroupFilterKeys::setGOOGLEPRODUCTCATEGORY1(const std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria>& value)
{
    m_GOOGLE_PRODUCT_CATEGORY_1 = value;
    m_GOOGLE_PRODUCT_CATEGORY_1IsSet = true;
}

bool CatalogsProductGroupFilterKeys::gOOGLEPRODUCTCATEGORY1IsSet() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_1IsSet;
}

void CatalogsProductGroupFilterKeys::unsetGOOGLE_PRODUCT_CATEGORY_1()
{
    m_GOOGLE_PRODUCT_CATEGORY_1IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> CatalogsProductGroupFilterKeys::getGOOGLEPRODUCTCATEGORY0() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_0;
}

void CatalogsProductGroupFilterKeys::setGOOGLEPRODUCTCATEGORY0(const std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria>& value)
{
    m_GOOGLE_PRODUCT_CATEGORY_0 = value;
    m_GOOGLE_PRODUCT_CATEGORY_0IsSet = true;
}

bool CatalogsProductGroupFilterKeys::gOOGLEPRODUCTCATEGORY0IsSet() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_0IsSet;
}

void CatalogsProductGroupFilterKeys::unsetGOOGLE_PRODUCT_CATEGORY_0()
{
    m_GOOGLE_PRODUCT_CATEGORY_0IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> CatalogsProductGroupFilterKeys::getPRODUCTGROUP() const
{
    return m_PRODUCT_GROUP;
}

void CatalogsProductGroupFilterKeys::setPRODUCTGROUP(const std::shared_ptr<CatalogsProductGroupMultipleStringCriteria>& value)
{
    m_PRODUCT_GROUP = value;
    m_PRODUCT_GROUPIsSet = true;
}

bool CatalogsProductGroupFilterKeys::pRODUCTGROUPIsSet() const
{
    return m_PRODUCT_GROUPIsSet;
}

void CatalogsProductGroupFilterKeys::unsetPRODUCT_GROUP()
{
    m_PRODUCT_GROUPIsSet = false;
}
}
}
}
}


