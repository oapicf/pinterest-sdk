/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/OptimizationGoalMetadata_frequency_goal_metadata.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OptimizationGoalMetadata_frequency_goal_metadata::OptimizationGoalMetadata_frequency_goal_metadata()
{
    m_Frequency = 0;
    m_FrequencyIsSet = false;
    m_Timerange = utility::conversions::to_string_t("");
    m_TimerangeIsSet = false;
}

OptimizationGoalMetadata_frequency_goal_metadata::~OptimizationGoalMetadata_frequency_goal_metadata()
{
}

void OptimizationGoalMetadata_frequency_goal_metadata::validate()
{
    // TODO: implement validation
}

web::json::value OptimizationGoalMetadata_frequency_goal_metadata::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FrequencyIsSet)
    {
        val[utility::conversions::to_string_t(U("frequency"))] = ModelBase::toJson(m_Frequency);
    }
    if(m_TimerangeIsSet)
    {
        val[utility::conversions::to_string_t(U("timerange"))] = ModelBase::toJson(m_Timerange);
    }

    return val;
}

bool OptimizationGoalMetadata_frequency_goal_metadata::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("frequency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("frequency")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFrequency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFrequency);
            setFrequency(refVal_setFrequency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timerange"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timerange")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTimerange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimerange);
            setTimerange(refVal_setTimerange);
        }
    }
    return ok;
}

void OptimizationGoalMetadata_frequency_goal_metadata::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_FrequencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("frequency")), m_Frequency));
    }
    if(m_TimerangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timerange")), m_Timerange));
    }
}

bool OptimizationGoalMetadata_frequency_goal_metadata::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("frequency"))))
    {
        int32_t refVal_setFrequency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("frequency"))), refVal_setFrequency );
        setFrequency(refVal_setFrequency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timerange"))))
    {
        utility::string_t refVal_setTimerange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timerange"))), refVal_setTimerange );
        setTimerange(refVal_setTimerange);
    }
    return ok;
}

int32_t OptimizationGoalMetadata_frequency_goal_metadata::getFrequency() const
{
    return m_Frequency;
}

void OptimizationGoalMetadata_frequency_goal_metadata::setFrequency(int32_t value)
{
    m_Frequency = value;
    m_FrequencyIsSet = true;
}

bool OptimizationGoalMetadata_frequency_goal_metadata::frequencyIsSet() const
{
    return m_FrequencyIsSet;
}

void OptimizationGoalMetadata_frequency_goal_metadata::unsetFrequency()
{
    m_FrequencyIsSet = false;
}
utility::string_t OptimizationGoalMetadata_frequency_goal_metadata::getTimerange() const
{
    return m_Timerange;
}

void OptimizationGoalMetadata_frequency_goal_metadata::setTimerange(const utility::string_t& value)
{
    m_Timerange = value;
    m_TimerangeIsSet = true;
}

bool OptimizationGoalMetadata_frequency_goal_metadata::timerangeIsSet() const
{
    return m_TimerangeIsSet;
}

void OptimizationGoalMetadata_frequency_goal_metadata::unsetTimerange()
{
    m_TimerangeIsSet = false;
}
}
}
}
}


