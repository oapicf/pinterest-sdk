/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/UserWebsiteSummary.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



UserWebsiteSummary::UserWebsiteSummary()
{
    m_Website = utility::conversions::to_string_t("");
    m_WebsiteIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_Verified_at = utility::conversions::to_string_t("");
    m_Verified_atIsSet = false;
}

UserWebsiteSummary::~UserWebsiteSummary()
{
}

void UserWebsiteSummary::validate()
{
    // TODO: implement validation
}

web::json::value UserWebsiteSummary::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_WebsiteIsSet)
    {
        val[utility::conversions::to_string_t(U("website"))] = ModelBase::toJson(m_Website);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_Verified_atIsSet)
    {
        val[utility::conversions::to_string_t(U("verified_at"))] = ModelBase::toJson(m_Verified_at);
    }

    return val;
}

bool UserWebsiteSummary::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("website"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("website")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWebsite;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWebsite);
            setWebsite(refVal_setWebsite);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("verified_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("verified_at")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVerifiedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVerifiedAt);
            setVerifiedAt(refVal_setVerifiedAt);
        }
    }
    return ok;
}

void UserWebsiteSummary::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_WebsiteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("website")), m_Website));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_Verified_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("verified_at")), m_Verified_at));
    }
}

bool UserWebsiteSummary::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("website"))))
    {
        utility::string_t refVal_setWebsite;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("website"))), refVal_setWebsite );
        setWebsite(refVal_setWebsite);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("verified_at"))))
    {
        utility::string_t refVal_setVerifiedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("verified_at"))), refVal_setVerifiedAt );
        setVerifiedAt(refVal_setVerifiedAt);
    }
    return ok;
}

utility::string_t UserWebsiteSummary::getWebsite() const
{
    return m_Website;
}

void UserWebsiteSummary::setWebsite(const utility::string_t& value)
{
    m_Website = value;
    m_WebsiteIsSet = true;
}

bool UserWebsiteSummary::websiteIsSet() const
{
    return m_WebsiteIsSet;
}

void UserWebsiteSummary::unsetWebsite()
{
    m_WebsiteIsSet = false;
}
utility::string_t UserWebsiteSummary::getStatus() const
{
    return m_Status;
}

void UserWebsiteSummary::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool UserWebsiteSummary::statusIsSet() const
{
    return m_StatusIsSet;
}

void UserWebsiteSummary::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::string_t UserWebsiteSummary::getVerifiedAt() const
{
    return m_Verified_at;
}

void UserWebsiteSummary::setVerifiedAt(const utility::string_t& value)
{
    m_Verified_at = value;
    m_Verified_atIsSet = true;
}

bool UserWebsiteSummary::verifiedAtIsSet() const
{
    return m_Verified_atIsSet;
}

void UserWebsiteSummary::unsetVerified_at()
{
    m_Verified_atIsSet = false;
}
}
}
}
}


