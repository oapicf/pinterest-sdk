/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreativeType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


namespace
{
using EnumUnderlyingType = utility::string_t;

CreativeType::eCreativeType toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("REGULAR")))
        return CreativeType::eCreativeType::CreativeType_REGULAR;
    if (val == utility::conversions::to_string_t(U("VIDEO")))
        return CreativeType::eCreativeType::CreativeType_VIDEO;
    if (val == utility::conversions::to_string_t(U("SHOPPING")))
        return CreativeType::eCreativeType::CreativeType_SHOPPING;
    if (val == utility::conversions::to_string_t(U("CAROUSEL")))
        return CreativeType::eCreativeType::CreativeType_CAROUSEL;
    if (val == utility::conversions::to_string_t(U("MAX_VIDEO")))
        return CreativeType::eCreativeType::CreativeType_MAX_VIDEO;
    if (val == utility::conversions::to_string_t(U("SHOP_THE_PIN")))
        return CreativeType::eCreativeType::CreativeType_SHOP_THE_PIN;
    if (val == utility::conversions::to_string_t(U("COLLECTION")))
        return CreativeType::eCreativeType::CreativeType_COLLECTION;
    if (val == utility::conversions::to_string_t(U("IDEA")))
        return CreativeType::eCreativeType::CreativeType_IDEA;
    if (val == utility::conversions::to_string_t(U("SHOWCASE")))
        return CreativeType::eCreativeType::CreativeType_SHOWCASE;
    if (val == utility::conversions::to_string_t(U("QUIZ")))
        return CreativeType::eCreativeType::CreativeType_QUIZ;
    return {};
}

EnumUnderlyingType fromEnum(CreativeType::eCreativeType e)
{
    switch (e)
    {
    case CreativeType::eCreativeType::CreativeType_REGULAR:
        return U("REGULAR");
    case CreativeType::eCreativeType::CreativeType_VIDEO:
        return U("VIDEO");
    case CreativeType::eCreativeType::CreativeType_SHOPPING:
        return U("SHOPPING");
    case CreativeType::eCreativeType::CreativeType_CAROUSEL:
        return U("CAROUSEL");
    case CreativeType::eCreativeType::CreativeType_MAX_VIDEO:
        return U("MAX_VIDEO");
    case CreativeType::eCreativeType::CreativeType_SHOP_THE_PIN:
        return U("SHOP_THE_PIN");
    case CreativeType::eCreativeType::CreativeType_COLLECTION:
        return U("COLLECTION");
    case CreativeType::eCreativeType::CreativeType_IDEA:
        return U("IDEA");
    case CreativeType::eCreativeType::CreativeType_SHOWCASE:
        return U("SHOWCASE");
    case CreativeType::eCreativeType::CreativeType_QUIZ:
        return U("QUIZ");
    default:
        break;
    }
    return {};
}
}

CreativeType::CreativeType()
{
}

CreativeType::~CreativeType()
{
}

void CreativeType::validate()
{
    // TODO: implement validation
}

web::json::value CreativeType::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool CreativeType::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void CreativeType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool CreativeType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

CreativeType::eCreativeType CreativeType::getValue() const
{
   return m_value;
}

void CreativeType::setValue(CreativeType::eCreativeType const value)
{
   m_value = value;
}


}
}
}
}


