/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Audience.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Audience::Audience()
{
    m_Ad_account_id = utility::conversions::to_string_t("");
    m_Ad_account_idIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Audience_type = utility::conversions::to_string_t("");
    m_Audience_typeIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_RuleIsSet = false;
    m_Size = 0;
    m_SizeIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Created_timestamp = 0;
    m_Created_timestampIsSet = false;
    m_Updated_timestamp = 0;
    m_Updated_timestampIsSet = false;
}

Audience::~Audience()
{
}

void Audience::validate()
{
    // TODO: implement validation
}

web::json::value Audience::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Ad_account_idIsSet)
    {
        val[utility::conversions::to_string_t(U("ad_account_id"))] = ModelBase::toJson(m_Ad_account_id);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_Audience_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("audience_type"))] = ModelBase::toJson(m_Audience_type);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_RuleIsSet)
    {
        val[utility::conversions::to_string_t(U("rule"))] = ModelBase::toJson(m_Rule);
    }
    if(m_SizeIsSet)
    {
        val[utility::conversions::to_string_t(U("size"))] = ModelBase::toJson(m_Size);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_Created_timestampIsSet)
    {
        val[utility::conversions::to_string_t(U("created_timestamp"))] = ModelBase::toJson(m_Created_timestamp);
    }
    if(m_Updated_timestampIsSet)
    {
        val[utility::conversions::to_string_t(U("updated_timestamp"))] = ModelBase::toJson(m_Updated_timestamp);
    }

    return val;
}

bool Audience::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("ad_account_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ad_account_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAdAccountId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdAccountId);
            setAdAccountId(refVal_setAdAccountId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("audience_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("audience_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAudienceType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAudienceType);
            setAudienceType(refVal_setAudienceType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rule"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rule")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AudienceRule> refVal_setRule;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRule);
            setRule(refVal_setRule);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("size")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSize);
            setSize(refVal_setSize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_timestamp")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCreatedTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedTimestamp);
            setCreatedTimestamp(refVal_setCreatedTimestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updated_timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updated_timestamp")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setUpdatedTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedTimestamp);
            setUpdatedTimestamp(refVal_setUpdatedTimestamp);
        }
    }
    return ok;
}

void Audience::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Ad_account_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ad_account_id")), m_Ad_account_id));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_Audience_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("audience_type")), m_Audience_type));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_RuleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rule")), m_Rule));
    }
    if(m_SizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("size")), m_Size));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_Created_timestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_timestamp")), m_Created_timestamp));
    }
    if(m_Updated_timestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updated_timestamp")), m_Updated_timestamp));
    }
}

bool Audience::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("ad_account_id"))))
    {
        utility::string_t refVal_setAdAccountId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ad_account_id"))), refVal_setAdAccountId );
        setAdAccountId(refVal_setAdAccountId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("audience_type"))))
    {
        utility::string_t refVal_setAudienceType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("audience_type"))), refVal_setAudienceType );
        setAudienceType(refVal_setAudienceType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rule"))))
    {
        std::shared_ptr<AudienceRule> refVal_setRule;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rule"))), refVal_setRule );
        setRule(refVal_setRule);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("size"))))
    {
        int32_t refVal_setSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("size"))), refVal_setSize );
        setSize(refVal_setSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_timestamp"))))
    {
        int32_t refVal_setCreatedTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_timestamp"))), refVal_setCreatedTimestamp );
        setCreatedTimestamp(refVal_setCreatedTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updated_timestamp"))))
    {
        int32_t refVal_setUpdatedTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updated_timestamp"))), refVal_setUpdatedTimestamp );
        setUpdatedTimestamp(refVal_setUpdatedTimestamp);
    }
    return ok;
}

utility::string_t Audience::getAdAccountId() const
{
    return m_Ad_account_id;
}

void Audience::setAdAccountId(const utility::string_t& value)
{
    m_Ad_account_id = value;
    m_Ad_account_idIsSet = true;
}

bool Audience::adAccountIdIsSet() const
{
    return m_Ad_account_idIsSet;
}

void Audience::unsetAd_account_id()
{
    m_Ad_account_idIsSet = false;
}
utility::string_t Audience::getId() const
{
    return m_Id;
}

void Audience::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Audience::idIsSet() const
{
    return m_IdIsSet;
}

void Audience::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Audience::getName() const
{
    return m_Name;
}

void Audience::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Audience::nameIsSet() const
{
    return m_NameIsSet;
}

void Audience::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t Audience::getAudienceType() const
{
    return m_Audience_type;
}

void Audience::setAudienceType(const utility::string_t& value)
{
    m_Audience_type = value;
    m_Audience_typeIsSet = true;
}

bool Audience::audienceTypeIsSet() const
{
    return m_Audience_typeIsSet;
}

void Audience::unsetAudience_type()
{
    m_Audience_typeIsSet = false;
}
utility::string_t Audience::getDescription() const
{
    return m_Description;
}

void Audience::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool Audience::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void Audience::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::shared_ptr<AudienceRule> Audience::getRule() const
{
    return m_Rule;
}

void Audience::setRule(const std::shared_ptr<AudienceRule>& value)
{
    m_Rule = value;
    m_RuleIsSet = true;
}

bool Audience::ruleIsSet() const
{
    return m_RuleIsSet;
}

void Audience::unsetRule()
{
    m_RuleIsSet = false;
}
int32_t Audience::getSize() const
{
    return m_Size;
}

void Audience::setSize(int32_t value)
{
    m_Size = value;
    m_SizeIsSet = true;
}

bool Audience::sizeIsSet() const
{
    return m_SizeIsSet;
}

void Audience::unsetSize()
{
    m_SizeIsSet = false;
}
utility::string_t Audience::getStatus() const
{
    return m_Status;
}

void Audience::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool Audience::statusIsSet() const
{
    return m_StatusIsSet;
}

void Audience::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::string_t Audience::getType() const
{
    return m_Type;
}

void Audience::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool Audience::typeIsSet() const
{
    return m_TypeIsSet;
}

void Audience::unsetType()
{
    m_TypeIsSet = false;
}
int32_t Audience::getCreatedTimestamp() const
{
    return m_Created_timestamp;
}

void Audience::setCreatedTimestamp(int32_t value)
{
    m_Created_timestamp = value;
    m_Created_timestampIsSet = true;
}

bool Audience::createdTimestampIsSet() const
{
    return m_Created_timestampIsSet;
}

void Audience::unsetCreated_timestamp()
{
    m_Created_timestampIsSet = false;
}
int32_t Audience::getUpdatedTimestamp() const
{
    return m_Updated_timestamp;
}

void Audience::setUpdatedTimestamp(int32_t value)
{
    m_Updated_timestamp = value;
    m_Updated_timestampIsSet = true;
}

bool Audience::updatedTimestampIsSet() const
{
    return m_Updated_timestampIsSet;
}

void Audience::unsetUpdated_timestamp()
{
    m_Updated_timestampIsSet = false;
}
}
}
}
}


