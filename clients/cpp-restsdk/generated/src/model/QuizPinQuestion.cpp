/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/QuizPinQuestion.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



QuizPinQuestion::QuizPinQuestion()
{
    m_Question_id = 0.0;
    m_Question_idIsSet = false;
    m_Question_text = utility::conversions::to_string_t("");
    m_Question_textIsSet = false;
    m_OptionsIsSet = false;
}

QuizPinQuestion::~QuizPinQuestion()
{
}

void QuizPinQuestion::validate()
{
    // TODO: implement validation
}

web::json::value QuizPinQuestion::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Question_idIsSet)
    {
        val[utility::conversions::to_string_t(U("question_id"))] = ModelBase::toJson(m_Question_id);
    }
    if(m_Question_textIsSet)
    {
        val[utility::conversions::to_string_t(U("question_text"))] = ModelBase::toJson(m_Question_text);
    }
    if(m_OptionsIsSet)
    {
        val[utility::conversions::to_string_t(U("options"))] = ModelBase::toJson(m_Options);
    }

    return val;
}

bool QuizPinQuestion::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("question_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("question_id")));
        if(!fieldValue.is_null())
        {
            double refVal_setQuestionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQuestionId);
            setQuestionId(refVal_setQuestionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("question_text"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("question_text")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setQuestionText;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQuestionText);
            setQuestionText(refVal_setQuestionText);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("options"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("options")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<QuizPinOption>> refVal_setOptions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOptions);
            setOptions(refVal_setOptions);
        }
    }
    return ok;
}

void QuizPinQuestion::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Question_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("question_id")), m_Question_id));
    }
    if(m_Question_textIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("question_text")), m_Question_text));
    }
    if(m_OptionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("options")), m_Options));
    }
}

bool QuizPinQuestion::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("question_id"))))
    {
        double refVal_setQuestionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("question_id"))), refVal_setQuestionId );
        setQuestionId(refVal_setQuestionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("question_text"))))
    {
        utility::string_t refVal_setQuestionText;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("question_text"))), refVal_setQuestionText );
        setQuestionText(refVal_setQuestionText);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("options"))))
    {
        std::vector<std::shared_ptr<QuizPinOption>> refVal_setOptions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("options"))), refVal_setOptions );
        setOptions(refVal_setOptions);
    }
    return ok;
}

double QuizPinQuestion::getQuestionId() const
{
    return m_Question_id;
}

void QuizPinQuestion::setQuestionId(double value)
{
    m_Question_id = value;
    m_Question_idIsSet = true;
}

bool QuizPinQuestion::questionIdIsSet() const
{
    return m_Question_idIsSet;
}

void QuizPinQuestion::unsetQuestion_id()
{
    m_Question_idIsSet = false;
}
utility::string_t QuizPinQuestion::getQuestionText() const
{
    return m_Question_text;
}

void QuizPinQuestion::setQuestionText(const utility::string_t& value)
{
    m_Question_text = value;
    m_Question_textIsSet = true;
}

bool QuizPinQuestion::questionTextIsSet() const
{
    return m_Question_textIsSet;
}

void QuizPinQuestion::unsetQuestion_text()
{
    m_Question_textIsSet = false;
}
std::vector<std::shared_ptr<QuizPinOption>>& QuizPinQuestion::getOptions()
{
    return m_Options;
}

void QuizPinQuestion::setOptions(const std::vector<std::shared_ptr<QuizPinOption>>& value)
{
    m_Options = value;
    m_OptionsIsSet = true;
}

bool QuizPinQuestion::optionsIsSet() const
{
    return m_OptionsIsSet;
}

void QuizPinQuestion::unsetOptions()
{
    m_OptionsIsSet = false;
}
}
}
}
}


