/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows::OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows()
{
    m_Click_window_days = 0;
    m_Click_window_daysIsSet = false;
    m_Engagement_window_days = 0;
    m_Engagement_window_daysIsSet = false;
    m_View_window_days = 0;
    m_View_window_daysIsSet = false;
}

OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows::~OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows()
{
}

void OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows::validate()
{
    // TODO: implement validation
}

web::json::value OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Click_window_daysIsSet)
    {
        val[utility::conversions::to_string_t(U("click_window_days"))] = ModelBase::toJson(m_Click_window_days);
    }
    if(m_Engagement_window_daysIsSet)
    {
        val[utility::conversions::to_string_t(U("engagement_window_days"))] = ModelBase::toJson(m_Engagement_window_days);
    }
    if(m_View_window_daysIsSet)
    {
        val[utility::conversions::to_string_t(U("view_window_days"))] = ModelBase::toJson(m_View_window_days);
    }

    return val;
}

bool OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("click_window_days"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("click_window_days")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setClickWindowDays;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClickWindowDays);
            setClickWindowDays(refVal_setClickWindowDays);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("engagement_window_days"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("engagement_window_days")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setEngagementWindowDays;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEngagementWindowDays);
            setEngagementWindowDays(refVal_setEngagementWindowDays);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("view_window_days"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("view_window_days")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setViewWindowDays;
            ok &= ModelBase::fromJson(fieldValue, refVal_setViewWindowDays);
            setViewWindowDays(refVal_setViewWindowDays);
        }
    }
    return ok;
}

void OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Click_window_daysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("click_window_days")), m_Click_window_days));
    }
    if(m_Engagement_window_daysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("engagement_window_days")), m_Engagement_window_days));
    }
    if(m_View_window_daysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("view_window_days")), m_View_window_days));
    }
}

bool OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("click_window_days"))))
    {
        int32_t refVal_setClickWindowDays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("click_window_days"))), refVal_setClickWindowDays );
        setClickWindowDays(refVal_setClickWindowDays);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("engagement_window_days"))))
    {
        int32_t refVal_setEngagementWindowDays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("engagement_window_days"))), refVal_setEngagementWindowDays );
        setEngagementWindowDays(refVal_setEngagementWindowDays);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("view_window_days"))))
    {
        int32_t refVal_setViewWindowDays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("view_window_days"))), refVal_setViewWindowDays );
        setViewWindowDays(refVal_setViewWindowDays);
    }
    return ok;
}

int32_t OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows::getClickWindowDays() const
{
    return m_Click_window_days;
}

void OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows::setClickWindowDays(int32_t value)
{
    m_Click_window_days = value;
    m_Click_window_daysIsSet = true;
}

bool OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows::clickWindowDaysIsSet() const
{
    return m_Click_window_daysIsSet;
}

void OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows::unsetClick_window_days()
{
    m_Click_window_daysIsSet = false;
}
int32_t OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows::getEngagementWindowDays() const
{
    return m_Engagement_window_days;
}

void OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows::setEngagementWindowDays(int32_t value)
{
    m_Engagement_window_days = value;
    m_Engagement_window_daysIsSet = true;
}

bool OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows::engagementWindowDaysIsSet() const
{
    return m_Engagement_window_daysIsSet;
}

void OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows::unsetEngagement_window_days()
{
    m_Engagement_window_daysIsSet = false;
}
int32_t OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows::getViewWindowDays() const
{
    return m_View_window_days;
}

void OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows::setViewWindowDays(int32_t value)
{
    m_View_window_days = value;
    m_View_window_daysIsSet = true;
}

bool OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows::viewWindowDaysIsSet() const
{
    return m_View_window_daysIsSet;
}

void OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows::unsetView_window_days()
{
    m_View_window_daysIsSet = false;
}
}
}
}
}


