/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CatalogsItemValidationWarnings.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CatalogsItemValidationWarnings::CatalogsItemValidationWarnings()
{
    m_AD_LINK_FORMAT_WARNINGIsSet = false;
    m_AD_LINK_SAME_AS_LINKIsSet = false;
    m_ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONGIsSet = false;
    m_ADDITIONAL_IMAGE_LINK_WARNINGIsSet = false;
    m_ADWORDS_FORMAT_WARNINGIsSet = false;
    m_ADWORDS_SAME_AS_LINKIsSet = false;
    m_AGE_GROUP_INVALIDIsSet = false;
    m_SIZE_SYSTEM_INVALIDIsSet = false;
    m_ANDROID_DEEP_LINK_INVALIDIsSet = false;
    m_AVAILABILITY_DATE_INVALIDIsSet = false;
    m_COUNTRY_DOES_NOT_MAP_TO_CURRENCYIsSet = false;
    m_CUSTOM_LABEL_LENGTH_TOO_LONGIsSet = false;
    m_DESCRIPTION_LENGTH_TOO_LONGIsSet = false;
    m_EXPIRATION_DATE_INVALIDIsSet = false;
    m_GENDER_INVALIDIsSet = false;
    m_GTIN_INVALIDIsSet = false;
    m_IMAGE_LINK_WARNINGIsSet = false;
    m_IOS_DEEP_LINK_INVALIDIsSet = false;
    m_IS_BUNDLE_INVALIDIsSet = false;
    m_ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILUREIsSet = false;
    m_LINK_FORMAT_WARNINGIsSet = false;
    m_MIN_AD_PRICE_INVALIDIsSet = false;
    m_MPN_INVALIDIsSet = false;
    m_MULTIPACK_INVALIDIsSet = false;
    m_OPTIONAL_CONDITION_INVALIDIsSet = false;
    m_OPTIONAL_CONDITION_MISSINGIsSet = false;
    m_OPTIONAL_PRODUCT_CATEGORY_INVALIDIsSet = false;
    m_OPTIONAL_PRODUCT_CATEGORY_MISSINGIsSet = false;
    m_PRODUCT_CATEGORY_DEPTH_WARNINGIsSet = false;
    m_PRODUCT_TYPE_LENGTH_TOO_LONGIsSet = false;
    m_SALES_PRICE_INVALIDIsSet = false;
    m_SALES_PRICE_TOO_LOWIsSet = false;
    m_SALES_PRICE_TOO_HIGHIsSet = false;
    m_SALE_DATE_INVALIDIsSet = false;
    m_SHIPPING_INVALIDIsSet = false;
    m_SHIPPING_HEIGHT_INVALIDIsSet = false;
    m_SHIPPING_WEIGHT_INVALIDIsSet = false;
    m_SHIPPING_WIDTH_INVALIDIsSet = false;
    m_SIZE_TYPE_INVALIDIsSet = false;
    m_TAX_INVALIDIsSet = false;
    m_TITLE_LENGTH_TOO_LONGIsSet = false;
    m_TOO_MANY_ADDITIONAL_IMAGE_LINKSIsSet = false;
    m_UTM_SOURCE_AUTO_CORRECTEDIsSet = false;
    m_WEIGHT_UNIT_INVALIDIsSet = false;
}

CatalogsItemValidationWarnings::~CatalogsItemValidationWarnings()
{
}

void CatalogsItemValidationWarnings::validate()
{
    // TODO: implement validation
}

web::json::value CatalogsItemValidationWarnings::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AD_LINK_FORMAT_WARNINGIsSet)
    {
        val[utility::conversions::to_string_t(U("AD_LINK_FORMAT_WARNING"))] = ModelBase::toJson(m_AD_LINK_FORMAT_WARNING);
    }
    if(m_AD_LINK_SAME_AS_LINKIsSet)
    {
        val[utility::conversions::to_string_t(U("AD_LINK_SAME_AS_LINK"))] = ModelBase::toJson(m_AD_LINK_SAME_AS_LINK);
    }
    if(m_ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONGIsSet)
    {
        val[utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG"))] = ModelBase::toJson(m_ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG);
    }
    if(m_ADDITIONAL_IMAGE_LINK_WARNINGIsSet)
    {
        val[utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LINK_WARNING"))] = ModelBase::toJson(m_ADDITIONAL_IMAGE_LINK_WARNING);
    }
    if(m_ADWORDS_FORMAT_WARNINGIsSet)
    {
        val[utility::conversions::to_string_t(U("ADWORDS_FORMAT_WARNING"))] = ModelBase::toJson(m_ADWORDS_FORMAT_WARNING);
    }
    if(m_ADWORDS_SAME_AS_LINKIsSet)
    {
        val[utility::conversions::to_string_t(U("ADWORDS_SAME_AS_LINK"))] = ModelBase::toJson(m_ADWORDS_SAME_AS_LINK);
    }
    if(m_AGE_GROUP_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("AGE_GROUP_INVALID"))] = ModelBase::toJson(m_AGE_GROUP_INVALID);
    }
    if(m_SIZE_SYSTEM_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("SIZE_SYSTEM_INVALID"))] = ModelBase::toJson(m_SIZE_SYSTEM_INVALID);
    }
    if(m_ANDROID_DEEP_LINK_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("ANDROID_DEEP_LINK_INVALID"))] = ModelBase::toJson(m_ANDROID_DEEP_LINK_INVALID);
    }
    if(m_AVAILABILITY_DATE_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("AVAILABILITY_DATE_INVALID"))] = ModelBase::toJson(m_AVAILABILITY_DATE_INVALID);
    }
    if(m_COUNTRY_DOES_NOT_MAP_TO_CURRENCYIsSet)
    {
        val[utility::conversions::to_string_t(U("COUNTRY_DOES_NOT_MAP_TO_CURRENCY"))] = ModelBase::toJson(m_COUNTRY_DOES_NOT_MAP_TO_CURRENCY);
    }
    if(m_CUSTOM_LABEL_LENGTH_TOO_LONGIsSet)
    {
        val[utility::conversions::to_string_t(U("CUSTOM_LABEL_LENGTH_TOO_LONG"))] = ModelBase::toJson(m_CUSTOM_LABEL_LENGTH_TOO_LONG);
    }
    if(m_DESCRIPTION_LENGTH_TOO_LONGIsSet)
    {
        val[utility::conversions::to_string_t(U("DESCRIPTION_LENGTH_TOO_LONG"))] = ModelBase::toJson(m_DESCRIPTION_LENGTH_TOO_LONG);
    }
    if(m_EXPIRATION_DATE_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("EXPIRATION_DATE_INVALID"))] = ModelBase::toJson(m_EXPIRATION_DATE_INVALID);
    }
    if(m_GENDER_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("GENDER_INVALID"))] = ModelBase::toJson(m_GENDER_INVALID);
    }
    if(m_GTIN_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("GTIN_INVALID"))] = ModelBase::toJson(m_GTIN_INVALID);
    }
    if(m_IMAGE_LINK_WARNINGIsSet)
    {
        val[utility::conversions::to_string_t(U("IMAGE_LINK_WARNING"))] = ModelBase::toJson(m_IMAGE_LINK_WARNING);
    }
    if(m_IOS_DEEP_LINK_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("IOS_DEEP_LINK_INVALID"))] = ModelBase::toJson(m_IOS_DEEP_LINK_INVALID);
    }
    if(m_IS_BUNDLE_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("IS_BUNDLE_INVALID"))] = ModelBase::toJson(m_IS_BUNDLE_INVALID);
    }
    if(m_ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILUREIsSet)
    {
        val[utility::conversions::to_string_t(U("ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE"))] = ModelBase::toJson(m_ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE);
    }
    if(m_LINK_FORMAT_WARNINGIsSet)
    {
        val[utility::conversions::to_string_t(U("LINK_FORMAT_WARNING"))] = ModelBase::toJson(m_LINK_FORMAT_WARNING);
    }
    if(m_MIN_AD_PRICE_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("MIN_AD_PRICE_INVALID"))] = ModelBase::toJson(m_MIN_AD_PRICE_INVALID);
    }
    if(m_MPN_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("MPN_INVALID"))] = ModelBase::toJson(m_MPN_INVALID);
    }
    if(m_MULTIPACK_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("MULTIPACK_INVALID"))] = ModelBase::toJson(m_MULTIPACK_INVALID);
    }
    if(m_OPTIONAL_CONDITION_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("OPTIONAL_CONDITION_INVALID"))] = ModelBase::toJson(m_OPTIONAL_CONDITION_INVALID);
    }
    if(m_OPTIONAL_CONDITION_MISSINGIsSet)
    {
        val[utility::conversions::to_string_t(U("OPTIONAL_CONDITION_MISSING"))] = ModelBase::toJson(m_OPTIONAL_CONDITION_MISSING);
    }
    if(m_OPTIONAL_PRODUCT_CATEGORY_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("OPTIONAL_PRODUCT_CATEGORY_INVALID"))] = ModelBase::toJson(m_OPTIONAL_PRODUCT_CATEGORY_INVALID);
    }
    if(m_OPTIONAL_PRODUCT_CATEGORY_MISSINGIsSet)
    {
        val[utility::conversions::to_string_t(U("OPTIONAL_PRODUCT_CATEGORY_MISSING"))] = ModelBase::toJson(m_OPTIONAL_PRODUCT_CATEGORY_MISSING);
    }
    if(m_PRODUCT_CATEGORY_DEPTH_WARNINGIsSet)
    {
        val[utility::conversions::to_string_t(U("PRODUCT_CATEGORY_DEPTH_WARNING"))] = ModelBase::toJson(m_PRODUCT_CATEGORY_DEPTH_WARNING);
    }
    if(m_PRODUCT_TYPE_LENGTH_TOO_LONGIsSet)
    {
        val[utility::conversions::to_string_t(U("PRODUCT_TYPE_LENGTH_TOO_LONG"))] = ModelBase::toJson(m_PRODUCT_TYPE_LENGTH_TOO_LONG);
    }
    if(m_SALES_PRICE_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("SALES_PRICE_INVALID"))] = ModelBase::toJson(m_SALES_PRICE_INVALID);
    }
    if(m_SALES_PRICE_TOO_LOWIsSet)
    {
        val[utility::conversions::to_string_t(U("SALES_PRICE_TOO_LOW"))] = ModelBase::toJson(m_SALES_PRICE_TOO_LOW);
    }
    if(m_SALES_PRICE_TOO_HIGHIsSet)
    {
        val[utility::conversions::to_string_t(U("SALES_PRICE_TOO_HIGH"))] = ModelBase::toJson(m_SALES_PRICE_TOO_HIGH);
    }
    if(m_SALE_DATE_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("SALE_DATE_INVALID"))] = ModelBase::toJson(m_SALE_DATE_INVALID);
    }
    if(m_SHIPPING_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("SHIPPING_INVALID"))] = ModelBase::toJson(m_SHIPPING_INVALID);
    }
    if(m_SHIPPING_HEIGHT_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("SHIPPING_HEIGHT_INVALID"))] = ModelBase::toJson(m_SHIPPING_HEIGHT_INVALID);
    }
    if(m_SHIPPING_WEIGHT_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("SHIPPING_WEIGHT_INVALID"))] = ModelBase::toJson(m_SHIPPING_WEIGHT_INVALID);
    }
    if(m_SHIPPING_WIDTH_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("SHIPPING_WIDTH_INVALID"))] = ModelBase::toJson(m_SHIPPING_WIDTH_INVALID);
    }
    if(m_SIZE_TYPE_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("SIZE_TYPE_INVALID"))] = ModelBase::toJson(m_SIZE_TYPE_INVALID);
    }
    if(m_TAX_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("TAX_INVALID"))] = ModelBase::toJson(m_TAX_INVALID);
    }
    if(m_TITLE_LENGTH_TOO_LONGIsSet)
    {
        val[utility::conversions::to_string_t(U("TITLE_LENGTH_TOO_LONG"))] = ModelBase::toJson(m_TITLE_LENGTH_TOO_LONG);
    }
    if(m_TOO_MANY_ADDITIONAL_IMAGE_LINKSIsSet)
    {
        val[utility::conversions::to_string_t(U("TOO_MANY_ADDITIONAL_IMAGE_LINKS"))] = ModelBase::toJson(m_TOO_MANY_ADDITIONAL_IMAGE_LINKS);
    }
    if(m_UTM_SOURCE_AUTO_CORRECTEDIsSet)
    {
        val[utility::conversions::to_string_t(U("UTM_SOURCE_AUTO_CORRECTED"))] = ModelBase::toJson(m_UTM_SOURCE_AUTO_CORRECTED);
    }
    if(m_WEIGHT_UNIT_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("WEIGHT_UNIT_INVALID"))] = ModelBase::toJson(m_WEIGHT_UNIT_INVALID);
    }

    return val;
}

bool CatalogsItemValidationWarnings::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("AD_LINK_FORMAT_WARNING"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("AD_LINK_FORMAT_WARNING")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setADLINKFORMATWARNING;
            ok &= ModelBase::fromJson(fieldValue, refVal_setADLINKFORMATWARNING);
            setADLINKFORMATWARNING(refVal_setADLINKFORMATWARNING);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("AD_LINK_SAME_AS_LINK"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("AD_LINK_SAME_AS_LINK")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setADLINKSAMEASLINK;
            ok &= ModelBase::fromJson(fieldValue, refVal_setADLINKSAMEASLINK);
            setADLINKSAMEASLINK(refVal_setADLINKSAMEASLINK);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setADDITIONALIMAGELINKLENGTHTOOLONG;
            ok &= ModelBase::fromJson(fieldValue, refVal_setADDITIONALIMAGELINKLENGTHTOOLONG);
            setADDITIONALIMAGELINKLENGTHTOOLONG(refVal_setADDITIONALIMAGELINKLENGTHTOOLONG);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LINK_WARNING"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LINK_WARNING")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setADDITIONALIMAGELINKWARNING;
            ok &= ModelBase::fromJson(fieldValue, refVal_setADDITIONALIMAGELINKWARNING);
            setADDITIONALIMAGELINKWARNING(refVal_setADDITIONALIMAGELINKWARNING);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ADWORDS_FORMAT_WARNING"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ADWORDS_FORMAT_WARNING")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setADWORDSFORMATWARNING;
            ok &= ModelBase::fromJson(fieldValue, refVal_setADWORDSFORMATWARNING);
            setADWORDSFORMATWARNING(refVal_setADWORDSFORMATWARNING);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ADWORDS_SAME_AS_LINK"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ADWORDS_SAME_AS_LINK")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setADWORDSSAMEASLINK;
            ok &= ModelBase::fromJson(fieldValue, refVal_setADWORDSSAMEASLINK);
            setADWORDSSAMEASLINK(refVal_setADWORDSSAMEASLINK);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("AGE_GROUP_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("AGE_GROUP_INVALID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setAGEGROUPINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAGEGROUPINVALID);
            setAGEGROUPINVALID(refVal_setAGEGROUPINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("SIZE_SYSTEM_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("SIZE_SYSTEM_INVALID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setSIZESYSTEMINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSIZESYSTEMINVALID);
            setSIZESYSTEMINVALID(refVal_setSIZESYSTEMINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ANDROID_DEEP_LINK_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ANDROID_DEEP_LINK_INVALID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setANDROIDDEEPLINKINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setANDROIDDEEPLINKINVALID);
            setANDROIDDEEPLINKINVALID(refVal_setANDROIDDEEPLINKINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("AVAILABILITY_DATE_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("AVAILABILITY_DATE_INVALID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setAVAILABILITYDATEINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAVAILABILITYDATEINVALID);
            setAVAILABILITYDATEINVALID(refVal_setAVAILABILITYDATEINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("COUNTRY_DOES_NOT_MAP_TO_CURRENCY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("COUNTRY_DOES_NOT_MAP_TO_CURRENCY")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setCOUNTRYDOESNOTMAPTOCURRENCY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCOUNTRYDOESNOTMAPTOCURRENCY);
            setCOUNTRYDOESNOTMAPTOCURRENCY(refVal_setCOUNTRYDOESNOTMAPTOCURRENCY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CUSTOM_LABEL_LENGTH_TOO_LONG"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CUSTOM_LABEL_LENGTH_TOO_LONG")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setCUSTOMLABELLENGTHTOOLONG;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCUSTOMLABELLENGTHTOOLONG);
            setCUSTOMLABELLENGTHTOOLONG(refVal_setCUSTOMLABELLENGTHTOOLONG);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("DESCRIPTION_LENGTH_TOO_LONG"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("DESCRIPTION_LENGTH_TOO_LONG")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setDESCRIPTIONLENGTHTOOLONG;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDESCRIPTIONLENGTHTOOLONG);
            setDESCRIPTIONLENGTHTOOLONG(refVal_setDESCRIPTIONLENGTHTOOLONG);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("EXPIRATION_DATE_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("EXPIRATION_DATE_INVALID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setEXPIRATIONDATEINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEXPIRATIONDATEINVALID);
            setEXPIRATIONDATEINVALID(refVal_setEXPIRATIONDATEINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("GENDER_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("GENDER_INVALID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setGENDERINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGENDERINVALID);
            setGENDERINVALID(refVal_setGENDERINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("GTIN_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("GTIN_INVALID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setGTININVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGTININVALID);
            setGTININVALID(refVal_setGTININVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("IMAGE_LINK_WARNING"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("IMAGE_LINK_WARNING")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setIMAGELINKWARNING;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIMAGELINKWARNING);
            setIMAGELINKWARNING(refVal_setIMAGELINKWARNING);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("IOS_DEEP_LINK_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("IOS_DEEP_LINK_INVALID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setIOSDEEPLINKINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIOSDEEPLINKINVALID);
            setIOSDEEPLINKINVALID(refVal_setIOSDEEPLINKINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("IS_BUNDLE_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("IS_BUNDLE_INVALID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setISBUNDLEINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setISBUNDLEINVALID);
            setISBUNDLEINVALID(refVal_setISBUNDLEINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setITEMADDITIONALIMAGEDOWNLOADFAILURE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setITEMADDITIONALIMAGEDOWNLOADFAILURE);
            setITEMADDITIONALIMAGEDOWNLOADFAILURE(refVal_setITEMADDITIONALIMAGEDOWNLOADFAILURE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LINK_FORMAT_WARNING"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LINK_FORMAT_WARNING")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setLINKFORMATWARNING;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLINKFORMATWARNING);
            setLINKFORMATWARNING(refVal_setLINKFORMATWARNING);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MIN_AD_PRICE_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MIN_AD_PRICE_INVALID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setMINADPRICEINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMINADPRICEINVALID);
            setMINADPRICEINVALID(refVal_setMINADPRICEINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MPN_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MPN_INVALID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setMPNINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMPNINVALID);
            setMPNINVALID(refVal_setMPNINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MULTIPACK_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MULTIPACK_INVALID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setMULTIPACKINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMULTIPACKINVALID);
            setMULTIPACKINVALID(refVal_setMULTIPACKINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("OPTIONAL_CONDITION_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("OPTIONAL_CONDITION_INVALID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setOPTIONALCONDITIONINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOPTIONALCONDITIONINVALID);
            setOPTIONALCONDITIONINVALID(refVal_setOPTIONALCONDITIONINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("OPTIONAL_CONDITION_MISSING"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("OPTIONAL_CONDITION_MISSING")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setOPTIONALCONDITIONMISSING;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOPTIONALCONDITIONMISSING);
            setOPTIONALCONDITIONMISSING(refVal_setOPTIONALCONDITIONMISSING);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("OPTIONAL_PRODUCT_CATEGORY_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("OPTIONAL_PRODUCT_CATEGORY_INVALID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setOPTIONALPRODUCTCATEGORYINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOPTIONALPRODUCTCATEGORYINVALID);
            setOPTIONALPRODUCTCATEGORYINVALID(refVal_setOPTIONALPRODUCTCATEGORYINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("OPTIONAL_PRODUCT_CATEGORY_MISSING"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("OPTIONAL_PRODUCT_CATEGORY_MISSING")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setOPTIONALPRODUCTCATEGORYMISSING;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOPTIONALPRODUCTCATEGORYMISSING);
            setOPTIONALPRODUCTCATEGORYMISSING(refVal_setOPTIONALPRODUCTCATEGORYMISSING);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("PRODUCT_CATEGORY_DEPTH_WARNING"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("PRODUCT_CATEGORY_DEPTH_WARNING")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setPRODUCTCATEGORYDEPTHWARNING;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPRODUCTCATEGORYDEPTHWARNING);
            setPRODUCTCATEGORYDEPTHWARNING(refVal_setPRODUCTCATEGORYDEPTHWARNING);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("PRODUCT_TYPE_LENGTH_TOO_LONG"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("PRODUCT_TYPE_LENGTH_TOO_LONG")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setPRODUCTTYPELENGTHTOOLONG;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPRODUCTTYPELENGTHTOOLONG);
            setPRODUCTTYPELENGTHTOOLONG(refVal_setPRODUCTTYPELENGTHTOOLONG);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("SALES_PRICE_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("SALES_PRICE_INVALID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setSALESPRICEINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSALESPRICEINVALID);
            setSALESPRICEINVALID(refVal_setSALESPRICEINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("SALES_PRICE_TOO_LOW"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("SALES_PRICE_TOO_LOW")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setSALESPRICETOOLOW;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSALESPRICETOOLOW);
            setSALESPRICETOOLOW(refVal_setSALESPRICETOOLOW);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("SALES_PRICE_TOO_HIGH"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("SALES_PRICE_TOO_HIGH")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setSALESPRICETOOHIGH;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSALESPRICETOOHIGH);
            setSALESPRICETOOHIGH(refVal_setSALESPRICETOOHIGH);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("SALE_DATE_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("SALE_DATE_INVALID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setSALEDATEINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSALEDATEINVALID);
            setSALEDATEINVALID(refVal_setSALEDATEINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("SHIPPING_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("SHIPPING_INVALID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setSHIPPINGINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSHIPPINGINVALID);
            setSHIPPINGINVALID(refVal_setSHIPPINGINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("SHIPPING_HEIGHT_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("SHIPPING_HEIGHT_INVALID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setSHIPPINGHEIGHTINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSHIPPINGHEIGHTINVALID);
            setSHIPPINGHEIGHTINVALID(refVal_setSHIPPINGHEIGHTINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("SHIPPING_WEIGHT_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("SHIPPING_WEIGHT_INVALID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setSHIPPINGWEIGHTINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSHIPPINGWEIGHTINVALID);
            setSHIPPINGWEIGHTINVALID(refVal_setSHIPPINGWEIGHTINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("SHIPPING_WIDTH_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("SHIPPING_WIDTH_INVALID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setSHIPPINGWIDTHINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSHIPPINGWIDTHINVALID);
            setSHIPPINGWIDTHINVALID(refVal_setSHIPPINGWIDTHINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("SIZE_TYPE_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("SIZE_TYPE_INVALID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setSIZETYPEINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSIZETYPEINVALID);
            setSIZETYPEINVALID(refVal_setSIZETYPEINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("TAX_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("TAX_INVALID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setTAXINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTAXINVALID);
            setTAXINVALID(refVal_setTAXINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("TITLE_LENGTH_TOO_LONG"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("TITLE_LENGTH_TOO_LONG")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setTITLELENGTHTOOLONG;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTITLELENGTHTOOLONG);
            setTITLELENGTHTOOLONG(refVal_setTITLELENGTHTOOLONG);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("TOO_MANY_ADDITIONAL_IMAGE_LINKS"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("TOO_MANY_ADDITIONAL_IMAGE_LINKS")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setTOOMANYADDITIONALIMAGELINKS;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTOOMANYADDITIONALIMAGELINKS);
            setTOOMANYADDITIONALIMAGELINKS(refVal_setTOOMANYADDITIONALIMAGELINKS);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("UTM_SOURCE_AUTO_CORRECTED"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("UTM_SOURCE_AUTO_CORRECTED")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setUTMSOURCEAUTOCORRECTED;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUTMSOURCEAUTOCORRECTED);
            setUTMSOURCEAUTOCORRECTED(refVal_setUTMSOURCEAUTOCORRECTED);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("WEIGHT_UNIT_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("WEIGHT_UNIT_INVALID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setWEIGHTUNITINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWEIGHTUNITINVALID);
            setWEIGHTUNITINVALID(refVal_setWEIGHTUNITINVALID);
        }
    }
    return ok;
}

void CatalogsItemValidationWarnings::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AD_LINK_FORMAT_WARNINGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("AD_LINK_FORMAT_WARNING")), m_AD_LINK_FORMAT_WARNING));
    }
    if(m_AD_LINK_SAME_AS_LINKIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("AD_LINK_SAME_AS_LINK")), m_AD_LINK_SAME_AS_LINK));
    }
    if(m_ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG")), m_ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG));
    }
    if(m_ADDITIONAL_IMAGE_LINK_WARNINGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LINK_WARNING")), m_ADDITIONAL_IMAGE_LINK_WARNING));
    }
    if(m_ADWORDS_FORMAT_WARNINGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ADWORDS_FORMAT_WARNING")), m_ADWORDS_FORMAT_WARNING));
    }
    if(m_ADWORDS_SAME_AS_LINKIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ADWORDS_SAME_AS_LINK")), m_ADWORDS_SAME_AS_LINK));
    }
    if(m_AGE_GROUP_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("AGE_GROUP_INVALID")), m_AGE_GROUP_INVALID));
    }
    if(m_SIZE_SYSTEM_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("SIZE_SYSTEM_INVALID")), m_SIZE_SYSTEM_INVALID));
    }
    if(m_ANDROID_DEEP_LINK_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ANDROID_DEEP_LINK_INVALID")), m_ANDROID_DEEP_LINK_INVALID));
    }
    if(m_AVAILABILITY_DATE_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("AVAILABILITY_DATE_INVALID")), m_AVAILABILITY_DATE_INVALID));
    }
    if(m_COUNTRY_DOES_NOT_MAP_TO_CURRENCYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("COUNTRY_DOES_NOT_MAP_TO_CURRENCY")), m_COUNTRY_DOES_NOT_MAP_TO_CURRENCY));
    }
    if(m_CUSTOM_LABEL_LENGTH_TOO_LONGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CUSTOM_LABEL_LENGTH_TOO_LONG")), m_CUSTOM_LABEL_LENGTH_TOO_LONG));
    }
    if(m_DESCRIPTION_LENGTH_TOO_LONGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("DESCRIPTION_LENGTH_TOO_LONG")), m_DESCRIPTION_LENGTH_TOO_LONG));
    }
    if(m_EXPIRATION_DATE_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("EXPIRATION_DATE_INVALID")), m_EXPIRATION_DATE_INVALID));
    }
    if(m_GENDER_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("GENDER_INVALID")), m_GENDER_INVALID));
    }
    if(m_GTIN_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("GTIN_INVALID")), m_GTIN_INVALID));
    }
    if(m_IMAGE_LINK_WARNINGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("IMAGE_LINK_WARNING")), m_IMAGE_LINK_WARNING));
    }
    if(m_IOS_DEEP_LINK_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("IOS_DEEP_LINK_INVALID")), m_IOS_DEEP_LINK_INVALID));
    }
    if(m_IS_BUNDLE_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("IS_BUNDLE_INVALID")), m_IS_BUNDLE_INVALID));
    }
    if(m_ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILUREIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE")), m_ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE));
    }
    if(m_LINK_FORMAT_WARNINGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LINK_FORMAT_WARNING")), m_LINK_FORMAT_WARNING));
    }
    if(m_MIN_AD_PRICE_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MIN_AD_PRICE_INVALID")), m_MIN_AD_PRICE_INVALID));
    }
    if(m_MPN_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MPN_INVALID")), m_MPN_INVALID));
    }
    if(m_MULTIPACK_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MULTIPACK_INVALID")), m_MULTIPACK_INVALID));
    }
    if(m_OPTIONAL_CONDITION_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("OPTIONAL_CONDITION_INVALID")), m_OPTIONAL_CONDITION_INVALID));
    }
    if(m_OPTIONAL_CONDITION_MISSINGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("OPTIONAL_CONDITION_MISSING")), m_OPTIONAL_CONDITION_MISSING));
    }
    if(m_OPTIONAL_PRODUCT_CATEGORY_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("OPTIONAL_PRODUCT_CATEGORY_INVALID")), m_OPTIONAL_PRODUCT_CATEGORY_INVALID));
    }
    if(m_OPTIONAL_PRODUCT_CATEGORY_MISSINGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("OPTIONAL_PRODUCT_CATEGORY_MISSING")), m_OPTIONAL_PRODUCT_CATEGORY_MISSING));
    }
    if(m_PRODUCT_CATEGORY_DEPTH_WARNINGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("PRODUCT_CATEGORY_DEPTH_WARNING")), m_PRODUCT_CATEGORY_DEPTH_WARNING));
    }
    if(m_PRODUCT_TYPE_LENGTH_TOO_LONGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("PRODUCT_TYPE_LENGTH_TOO_LONG")), m_PRODUCT_TYPE_LENGTH_TOO_LONG));
    }
    if(m_SALES_PRICE_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("SALES_PRICE_INVALID")), m_SALES_PRICE_INVALID));
    }
    if(m_SALES_PRICE_TOO_LOWIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("SALES_PRICE_TOO_LOW")), m_SALES_PRICE_TOO_LOW));
    }
    if(m_SALES_PRICE_TOO_HIGHIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("SALES_PRICE_TOO_HIGH")), m_SALES_PRICE_TOO_HIGH));
    }
    if(m_SALE_DATE_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("SALE_DATE_INVALID")), m_SALE_DATE_INVALID));
    }
    if(m_SHIPPING_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("SHIPPING_INVALID")), m_SHIPPING_INVALID));
    }
    if(m_SHIPPING_HEIGHT_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("SHIPPING_HEIGHT_INVALID")), m_SHIPPING_HEIGHT_INVALID));
    }
    if(m_SHIPPING_WEIGHT_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("SHIPPING_WEIGHT_INVALID")), m_SHIPPING_WEIGHT_INVALID));
    }
    if(m_SHIPPING_WIDTH_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("SHIPPING_WIDTH_INVALID")), m_SHIPPING_WIDTH_INVALID));
    }
    if(m_SIZE_TYPE_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("SIZE_TYPE_INVALID")), m_SIZE_TYPE_INVALID));
    }
    if(m_TAX_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("TAX_INVALID")), m_TAX_INVALID));
    }
    if(m_TITLE_LENGTH_TOO_LONGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("TITLE_LENGTH_TOO_LONG")), m_TITLE_LENGTH_TOO_LONG));
    }
    if(m_TOO_MANY_ADDITIONAL_IMAGE_LINKSIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("TOO_MANY_ADDITIONAL_IMAGE_LINKS")), m_TOO_MANY_ADDITIONAL_IMAGE_LINKS));
    }
    if(m_UTM_SOURCE_AUTO_CORRECTEDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("UTM_SOURCE_AUTO_CORRECTED")), m_UTM_SOURCE_AUTO_CORRECTED));
    }
    if(m_WEIGHT_UNIT_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("WEIGHT_UNIT_INVALID")), m_WEIGHT_UNIT_INVALID));
    }
}

bool CatalogsItemValidationWarnings::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("AD_LINK_FORMAT_WARNING"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setADLINKFORMATWARNING;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("AD_LINK_FORMAT_WARNING"))), refVal_setADLINKFORMATWARNING );
        setADLINKFORMATWARNING(refVal_setADLINKFORMATWARNING);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("AD_LINK_SAME_AS_LINK"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setADLINKSAMEASLINK;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("AD_LINK_SAME_AS_LINK"))), refVal_setADLINKSAMEASLINK );
        setADLINKSAMEASLINK(refVal_setADLINKSAMEASLINK);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setADDITIONALIMAGELINKLENGTHTOOLONG;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG"))), refVal_setADDITIONALIMAGELINKLENGTHTOOLONG );
        setADDITIONALIMAGELINKLENGTHTOOLONG(refVal_setADDITIONALIMAGELINKLENGTHTOOLONG);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LINK_WARNING"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setADDITIONALIMAGELINKWARNING;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LINK_WARNING"))), refVal_setADDITIONALIMAGELINKWARNING );
        setADDITIONALIMAGELINKWARNING(refVal_setADDITIONALIMAGELINKWARNING);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ADWORDS_FORMAT_WARNING"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setADWORDSFORMATWARNING;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ADWORDS_FORMAT_WARNING"))), refVal_setADWORDSFORMATWARNING );
        setADWORDSFORMATWARNING(refVal_setADWORDSFORMATWARNING);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ADWORDS_SAME_AS_LINK"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setADWORDSSAMEASLINK;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ADWORDS_SAME_AS_LINK"))), refVal_setADWORDSSAMEASLINK );
        setADWORDSSAMEASLINK(refVal_setADWORDSSAMEASLINK);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("AGE_GROUP_INVALID"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setAGEGROUPINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("AGE_GROUP_INVALID"))), refVal_setAGEGROUPINVALID );
        setAGEGROUPINVALID(refVal_setAGEGROUPINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("SIZE_SYSTEM_INVALID"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setSIZESYSTEMINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("SIZE_SYSTEM_INVALID"))), refVal_setSIZESYSTEMINVALID );
        setSIZESYSTEMINVALID(refVal_setSIZESYSTEMINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ANDROID_DEEP_LINK_INVALID"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setANDROIDDEEPLINKINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ANDROID_DEEP_LINK_INVALID"))), refVal_setANDROIDDEEPLINKINVALID );
        setANDROIDDEEPLINKINVALID(refVal_setANDROIDDEEPLINKINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("AVAILABILITY_DATE_INVALID"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setAVAILABILITYDATEINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("AVAILABILITY_DATE_INVALID"))), refVal_setAVAILABILITYDATEINVALID );
        setAVAILABILITYDATEINVALID(refVal_setAVAILABILITYDATEINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("COUNTRY_DOES_NOT_MAP_TO_CURRENCY"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setCOUNTRYDOESNOTMAPTOCURRENCY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("COUNTRY_DOES_NOT_MAP_TO_CURRENCY"))), refVal_setCOUNTRYDOESNOTMAPTOCURRENCY );
        setCOUNTRYDOESNOTMAPTOCURRENCY(refVal_setCOUNTRYDOESNOTMAPTOCURRENCY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_LENGTH_TOO_LONG"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setCUSTOMLABELLENGTHTOOLONG;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_LENGTH_TOO_LONG"))), refVal_setCUSTOMLABELLENGTHTOOLONG );
        setCUSTOMLABELLENGTHTOOLONG(refVal_setCUSTOMLABELLENGTHTOOLONG);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("DESCRIPTION_LENGTH_TOO_LONG"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setDESCRIPTIONLENGTHTOOLONG;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("DESCRIPTION_LENGTH_TOO_LONG"))), refVal_setDESCRIPTIONLENGTHTOOLONG );
        setDESCRIPTIONLENGTHTOOLONG(refVal_setDESCRIPTIONLENGTHTOOLONG);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("EXPIRATION_DATE_INVALID"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setEXPIRATIONDATEINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("EXPIRATION_DATE_INVALID"))), refVal_setEXPIRATIONDATEINVALID );
        setEXPIRATIONDATEINVALID(refVal_setEXPIRATIONDATEINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("GENDER_INVALID"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setGENDERINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("GENDER_INVALID"))), refVal_setGENDERINVALID );
        setGENDERINVALID(refVal_setGENDERINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("GTIN_INVALID"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setGTININVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("GTIN_INVALID"))), refVal_setGTININVALID );
        setGTININVALID(refVal_setGTININVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("IMAGE_LINK_WARNING"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setIMAGELINKWARNING;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("IMAGE_LINK_WARNING"))), refVal_setIMAGELINKWARNING );
        setIMAGELINKWARNING(refVal_setIMAGELINKWARNING);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("IOS_DEEP_LINK_INVALID"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setIOSDEEPLINKINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("IOS_DEEP_LINK_INVALID"))), refVal_setIOSDEEPLINKINVALID );
        setIOSDEEPLINKINVALID(refVal_setIOSDEEPLINKINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("IS_BUNDLE_INVALID"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setISBUNDLEINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("IS_BUNDLE_INVALID"))), refVal_setISBUNDLEINVALID );
        setISBUNDLEINVALID(refVal_setISBUNDLEINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setITEMADDITIONALIMAGEDOWNLOADFAILURE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE"))), refVal_setITEMADDITIONALIMAGEDOWNLOADFAILURE );
        setITEMADDITIONALIMAGEDOWNLOADFAILURE(refVal_setITEMADDITIONALIMAGEDOWNLOADFAILURE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LINK_FORMAT_WARNING"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setLINKFORMATWARNING;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LINK_FORMAT_WARNING"))), refVal_setLINKFORMATWARNING );
        setLINKFORMATWARNING(refVal_setLINKFORMATWARNING);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MIN_AD_PRICE_INVALID"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setMINADPRICEINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MIN_AD_PRICE_INVALID"))), refVal_setMINADPRICEINVALID );
        setMINADPRICEINVALID(refVal_setMINADPRICEINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MPN_INVALID"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setMPNINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MPN_INVALID"))), refVal_setMPNINVALID );
        setMPNINVALID(refVal_setMPNINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MULTIPACK_INVALID"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setMULTIPACKINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MULTIPACK_INVALID"))), refVal_setMULTIPACKINVALID );
        setMULTIPACKINVALID(refVal_setMULTIPACKINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("OPTIONAL_CONDITION_INVALID"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setOPTIONALCONDITIONINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("OPTIONAL_CONDITION_INVALID"))), refVal_setOPTIONALCONDITIONINVALID );
        setOPTIONALCONDITIONINVALID(refVal_setOPTIONALCONDITIONINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("OPTIONAL_CONDITION_MISSING"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setOPTIONALCONDITIONMISSING;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("OPTIONAL_CONDITION_MISSING"))), refVal_setOPTIONALCONDITIONMISSING );
        setOPTIONALCONDITIONMISSING(refVal_setOPTIONALCONDITIONMISSING);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("OPTIONAL_PRODUCT_CATEGORY_INVALID"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setOPTIONALPRODUCTCATEGORYINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("OPTIONAL_PRODUCT_CATEGORY_INVALID"))), refVal_setOPTIONALPRODUCTCATEGORYINVALID );
        setOPTIONALPRODUCTCATEGORYINVALID(refVal_setOPTIONALPRODUCTCATEGORYINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("OPTIONAL_PRODUCT_CATEGORY_MISSING"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setOPTIONALPRODUCTCATEGORYMISSING;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("OPTIONAL_PRODUCT_CATEGORY_MISSING"))), refVal_setOPTIONALPRODUCTCATEGORYMISSING );
        setOPTIONALPRODUCTCATEGORYMISSING(refVal_setOPTIONALPRODUCTCATEGORYMISSING);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("PRODUCT_CATEGORY_DEPTH_WARNING"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setPRODUCTCATEGORYDEPTHWARNING;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("PRODUCT_CATEGORY_DEPTH_WARNING"))), refVal_setPRODUCTCATEGORYDEPTHWARNING );
        setPRODUCTCATEGORYDEPTHWARNING(refVal_setPRODUCTCATEGORYDEPTHWARNING);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("PRODUCT_TYPE_LENGTH_TOO_LONG"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setPRODUCTTYPELENGTHTOOLONG;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("PRODUCT_TYPE_LENGTH_TOO_LONG"))), refVal_setPRODUCTTYPELENGTHTOOLONG );
        setPRODUCTTYPELENGTHTOOLONG(refVal_setPRODUCTTYPELENGTHTOOLONG);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("SALES_PRICE_INVALID"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setSALESPRICEINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("SALES_PRICE_INVALID"))), refVal_setSALESPRICEINVALID );
        setSALESPRICEINVALID(refVal_setSALESPRICEINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("SALES_PRICE_TOO_LOW"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setSALESPRICETOOLOW;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("SALES_PRICE_TOO_LOW"))), refVal_setSALESPRICETOOLOW );
        setSALESPRICETOOLOW(refVal_setSALESPRICETOOLOW);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("SALES_PRICE_TOO_HIGH"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setSALESPRICETOOHIGH;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("SALES_PRICE_TOO_HIGH"))), refVal_setSALESPRICETOOHIGH );
        setSALESPRICETOOHIGH(refVal_setSALESPRICETOOHIGH);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("SALE_DATE_INVALID"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setSALEDATEINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("SALE_DATE_INVALID"))), refVal_setSALEDATEINVALID );
        setSALEDATEINVALID(refVal_setSALEDATEINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("SHIPPING_INVALID"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setSHIPPINGINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("SHIPPING_INVALID"))), refVal_setSHIPPINGINVALID );
        setSHIPPINGINVALID(refVal_setSHIPPINGINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("SHIPPING_HEIGHT_INVALID"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setSHIPPINGHEIGHTINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("SHIPPING_HEIGHT_INVALID"))), refVal_setSHIPPINGHEIGHTINVALID );
        setSHIPPINGHEIGHTINVALID(refVal_setSHIPPINGHEIGHTINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("SHIPPING_WEIGHT_INVALID"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setSHIPPINGWEIGHTINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("SHIPPING_WEIGHT_INVALID"))), refVal_setSHIPPINGWEIGHTINVALID );
        setSHIPPINGWEIGHTINVALID(refVal_setSHIPPINGWEIGHTINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("SHIPPING_WIDTH_INVALID"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setSHIPPINGWIDTHINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("SHIPPING_WIDTH_INVALID"))), refVal_setSHIPPINGWIDTHINVALID );
        setSHIPPINGWIDTHINVALID(refVal_setSHIPPINGWIDTHINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("SIZE_TYPE_INVALID"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setSIZETYPEINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("SIZE_TYPE_INVALID"))), refVal_setSIZETYPEINVALID );
        setSIZETYPEINVALID(refVal_setSIZETYPEINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("TAX_INVALID"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setTAXINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("TAX_INVALID"))), refVal_setTAXINVALID );
        setTAXINVALID(refVal_setTAXINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("TITLE_LENGTH_TOO_LONG"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setTITLELENGTHTOOLONG;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("TITLE_LENGTH_TOO_LONG"))), refVal_setTITLELENGTHTOOLONG );
        setTITLELENGTHTOOLONG(refVal_setTITLELENGTHTOOLONG);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("TOO_MANY_ADDITIONAL_IMAGE_LINKS"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setTOOMANYADDITIONALIMAGELINKS;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("TOO_MANY_ADDITIONAL_IMAGE_LINKS"))), refVal_setTOOMANYADDITIONALIMAGELINKS );
        setTOOMANYADDITIONALIMAGELINKS(refVal_setTOOMANYADDITIONALIMAGELINKS);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("UTM_SOURCE_AUTO_CORRECTED"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setUTMSOURCEAUTOCORRECTED;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("UTM_SOURCE_AUTO_CORRECTED"))), refVal_setUTMSOURCEAUTOCORRECTED );
        setUTMSOURCEAUTOCORRECTED(refVal_setUTMSOURCEAUTOCORRECTED);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("WEIGHT_UNIT_INVALID"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setWEIGHTUNITINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("WEIGHT_UNIT_INVALID"))), refVal_setWEIGHTUNITINVALID );
        setWEIGHTUNITINVALID(refVal_setWEIGHTUNITINVALID);
    }
    return ok;
}

std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getADLINKFORMATWARNING() const
{
    return m_AD_LINK_FORMAT_WARNING;
}

void CatalogsItemValidationWarnings::setADLINKFORMATWARNING(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_AD_LINK_FORMAT_WARNING = value;
    m_AD_LINK_FORMAT_WARNINGIsSet = true;
}

bool CatalogsItemValidationWarnings::aDLINKFORMATWARNINGIsSet() const
{
    return m_AD_LINK_FORMAT_WARNINGIsSet;
}

void CatalogsItemValidationWarnings::unsetAD_LINK_FORMAT_WARNING()
{
    m_AD_LINK_FORMAT_WARNINGIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getADLINKSAMEASLINK() const
{
    return m_AD_LINK_SAME_AS_LINK;
}

void CatalogsItemValidationWarnings::setADLINKSAMEASLINK(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_AD_LINK_SAME_AS_LINK = value;
    m_AD_LINK_SAME_AS_LINKIsSet = true;
}

bool CatalogsItemValidationWarnings::aDLINKSAMEASLINKIsSet() const
{
    return m_AD_LINK_SAME_AS_LINKIsSet;
}

void CatalogsItemValidationWarnings::unsetAD_LINK_SAME_AS_LINK()
{
    m_AD_LINK_SAME_AS_LINKIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getADDITIONALIMAGELINKLENGTHTOOLONG() const
{
    return m_ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG;
}

void CatalogsItemValidationWarnings::setADDITIONALIMAGELINKLENGTHTOOLONG(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG = value;
    m_ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONGIsSet = true;
}

bool CatalogsItemValidationWarnings::aDDITIONALIMAGELINKLENGTHTOOLONGIsSet() const
{
    return m_ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONGIsSet;
}

void CatalogsItemValidationWarnings::unsetADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG()
{
    m_ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONGIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getADDITIONALIMAGELINKWARNING() const
{
    return m_ADDITIONAL_IMAGE_LINK_WARNING;
}

void CatalogsItemValidationWarnings::setADDITIONALIMAGELINKWARNING(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_ADDITIONAL_IMAGE_LINK_WARNING = value;
    m_ADDITIONAL_IMAGE_LINK_WARNINGIsSet = true;
}

bool CatalogsItemValidationWarnings::aDDITIONALIMAGELINKWARNINGIsSet() const
{
    return m_ADDITIONAL_IMAGE_LINK_WARNINGIsSet;
}

void CatalogsItemValidationWarnings::unsetADDITIONAL_IMAGE_LINK_WARNING()
{
    m_ADDITIONAL_IMAGE_LINK_WARNINGIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getADWORDSFORMATWARNING() const
{
    return m_ADWORDS_FORMAT_WARNING;
}

void CatalogsItemValidationWarnings::setADWORDSFORMATWARNING(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_ADWORDS_FORMAT_WARNING = value;
    m_ADWORDS_FORMAT_WARNINGIsSet = true;
}

bool CatalogsItemValidationWarnings::aDWORDSFORMATWARNINGIsSet() const
{
    return m_ADWORDS_FORMAT_WARNINGIsSet;
}

void CatalogsItemValidationWarnings::unsetADWORDS_FORMAT_WARNING()
{
    m_ADWORDS_FORMAT_WARNINGIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getADWORDSSAMEASLINK() const
{
    return m_ADWORDS_SAME_AS_LINK;
}

void CatalogsItemValidationWarnings::setADWORDSSAMEASLINK(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_ADWORDS_SAME_AS_LINK = value;
    m_ADWORDS_SAME_AS_LINKIsSet = true;
}

bool CatalogsItemValidationWarnings::aDWORDSSAMEASLINKIsSet() const
{
    return m_ADWORDS_SAME_AS_LINKIsSet;
}

void CatalogsItemValidationWarnings::unsetADWORDS_SAME_AS_LINK()
{
    m_ADWORDS_SAME_AS_LINKIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getAGEGROUPINVALID() const
{
    return m_AGE_GROUP_INVALID;
}

void CatalogsItemValidationWarnings::setAGEGROUPINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_AGE_GROUP_INVALID = value;
    m_AGE_GROUP_INVALIDIsSet = true;
}

bool CatalogsItemValidationWarnings::aGEGROUPINVALIDIsSet() const
{
    return m_AGE_GROUP_INVALIDIsSet;
}

void CatalogsItemValidationWarnings::unsetAGE_GROUP_INVALID()
{
    m_AGE_GROUP_INVALIDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getSIZESYSTEMINVALID() const
{
    return m_SIZE_SYSTEM_INVALID;
}

void CatalogsItemValidationWarnings::setSIZESYSTEMINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_SIZE_SYSTEM_INVALID = value;
    m_SIZE_SYSTEM_INVALIDIsSet = true;
}

bool CatalogsItemValidationWarnings::sIZESYSTEMINVALIDIsSet() const
{
    return m_SIZE_SYSTEM_INVALIDIsSet;
}

void CatalogsItemValidationWarnings::unsetSIZE_SYSTEM_INVALID()
{
    m_SIZE_SYSTEM_INVALIDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getANDROIDDEEPLINKINVALID() const
{
    return m_ANDROID_DEEP_LINK_INVALID;
}

void CatalogsItemValidationWarnings::setANDROIDDEEPLINKINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_ANDROID_DEEP_LINK_INVALID = value;
    m_ANDROID_DEEP_LINK_INVALIDIsSet = true;
}

bool CatalogsItemValidationWarnings::aNDROIDDEEPLINKINVALIDIsSet() const
{
    return m_ANDROID_DEEP_LINK_INVALIDIsSet;
}

void CatalogsItemValidationWarnings::unsetANDROID_DEEP_LINK_INVALID()
{
    m_ANDROID_DEEP_LINK_INVALIDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getAVAILABILITYDATEINVALID() const
{
    return m_AVAILABILITY_DATE_INVALID;
}

void CatalogsItemValidationWarnings::setAVAILABILITYDATEINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_AVAILABILITY_DATE_INVALID = value;
    m_AVAILABILITY_DATE_INVALIDIsSet = true;
}

bool CatalogsItemValidationWarnings::aVAILABILITYDATEINVALIDIsSet() const
{
    return m_AVAILABILITY_DATE_INVALIDIsSet;
}

void CatalogsItemValidationWarnings::unsetAVAILABILITY_DATE_INVALID()
{
    m_AVAILABILITY_DATE_INVALIDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getCOUNTRYDOESNOTMAPTOCURRENCY() const
{
    return m_COUNTRY_DOES_NOT_MAP_TO_CURRENCY;
}

void CatalogsItemValidationWarnings::setCOUNTRYDOESNOTMAPTOCURRENCY(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_COUNTRY_DOES_NOT_MAP_TO_CURRENCY = value;
    m_COUNTRY_DOES_NOT_MAP_TO_CURRENCYIsSet = true;
}

bool CatalogsItemValidationWarnings::cOUNTRYDOESNOTMAPTOCURRENCYIsSet() const
{
    return m_COUNTRY_DOES_NOT_MAP_TO_CURRENCYIsSet;
}

void CatalogsItemValidationWarnings::unsetCOUNTRY_DOES_NOT_MAP_TO_CURRENCY()
{
    m_COUNTRY_DOES_NOT_MAP_TO_CURRENCYIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getCUSTOMLABELLENGTHTOOLONG() const
{
    return m_CUSTOM_LABEL_LENGTH_TOO_LONG;
}

void CatalogsItemValidationWarnings::setCUSTOMLABELLENGTHTOOLONG(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_CUSTOM_LABEL_LENGTH_TOO_LONG = value;
    m_CUSTOM_LABEL_LENGTH_TOO_LONGIsSet = true;
}

bool CatalogsItemValidationWarnings::cUSTOMLABELLENGTHTOOLONGIsSet() const
{
    return m_CUSTOM_LABEL_LENGTH_TOO_LONGIsSet;
}

void CatalogsItemValidationWarnings::unsetCUSTOM_LABEL_LENGTH_TOO_LONG()
{
    m_CUSTOM_LABEL_LENGTH_TOO_LONGIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getDESCRIPTIONLENGTHTOOLONG() const
{
    return m_DESCRIPTION_LENGTH_TOO_LONG;
}

void CatalogsItemValidationWarnings::setDESCRIPTIONLENGTHTOOLONG(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_DESCRIPTION_LENGTH_TOO_LONG = value;
    m_DESCRIPTION_LENGTH_TOO_LONGIsSet = true;
}

bool CatalogsItemValidationWarnings::dESCRIPTIONLENGTHTOOLONGIsSet() const
{
    return m_DESCRIPTION_LENGTH_TOO_LONGIsSet;
}

void CatalogsItemValidationWarnings::unsetDESCRIPTION_LENGTH_TOO_LONG()
{
    m_DESCRIPTION_LENGTH_TOO_LONGIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getEXPIRATIONDATEINVALID() const
{
    return m_EXPIRATION_DATE_INVALID;
}

void CatalogsItemValidationWarnings::setEXPIRATIONDATEINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_EXPIRATION_DATE_INVALID = value;
    m_EXPIRATION_DATE_INVALIDIsSet = true;
}

bool CatalogsItemValidationWarnings::eXPIRATIONDATEINVALIDIsSet() const
{
    return m_EXPIRATION_DATE_INVALIDIsSet;
}

void CatalogsItemValidationWarnings::unsetEXPIRATION_DATE_INVALID()
{
    m_EXPIRATION_DATE_INVALIDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getGENDERINVALID() const
{
    return m_GENDER_INVALID;
}

void CatalogsItemValidationWarnings::setGENDERINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_GENDER_INVALID = value;
    m_GENDER_INVALIDIsSet = true;
}

bool CatalogsItemValidationWarnings::gENDERINVALIDIsSet() const
{
    return m_GENDER_INVALIDIsSet;
}

void CatalogsItemValidationWarnings::unsetGENDER_INVALID()
{
    m_GENDER_INVALIDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getGTININVALID() const
{
    return m_GTIN_INVALID;
}

void CatalogsItemValidationWarnings::setGTININVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_GTIN_INVALID = value;
    m_GTIN_INVALIDIsSet = true;
}

bool CatalogsItemValidationWarnings::gTININVALIDIsSet() const
{
    return m_GTIN_INVALIDIsSet;
}

void CatalogsItemValidationWarnings::unsetGTIN_INVALID()
{
    m_GTIN_INVALIDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getIMAGELINKWARNING() const
{
    return m_IMAGE_LINK_WARNING;
}

void CatalogsItemValidationWarnings::setIMAGELINKWARNING(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_IMAGE_LINK_WARNING = value;
    m_IMAGE_LINK_WARNINGIsSet = true;
}

bool CatalogsItemValidationWarnings::iMAGELINKWARNINGIsSet() const
{
    return m_IMAGE_LINK_WARNINGIsSet;
}

void CatalogsItemValidationWarnings::unsetIMAGE_LINK_WARNING()
{
    m_IMAGE_LINK_WARNINGIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getIOSDEEPLINKINVALID() const
{
    return m_IOS_DEEP_LINK_INVALID;
}

void CatalogsItemValidationWarnings::setIOSDEEPLINKINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_IOS_DEEP_LINK_INVALID = value;
    m_IOS_DEEP_LINK_INVALIDIsSet = true;
}

bool CatalogsItemValidationWarnings::iOSDEEPLINKINVALIDIsSet() const
{
    return m_IOS_DEEP_LINK_INVALIDIsSet;
}

void CatalogsItemValidationWarnings::unsetIOS_DEEP_LINK_INVALID()
{
    m_IOS_DEEP_LINK_INVALIDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getISBUNDLEINVALID() const
{
    return m_IS_BUNDLE_INVALID;
}

void CatalogsItemValidationWarnings::setISBUNDLEINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_IS_BUNDLE_INVALID = value;
    m_IS_BUNDLE_INVALIDIsSet = true;
}

bool CatalogsItemValidationWarnings::iSBUNDLEINVALIDIsSet() const
{
    return m_IS_BUNDLE_INVALIDIsSet;
}

void CatalogsItemValidationWarnings::unsetIS_BUNDLE_INVALID()
{
    m_IS_BUNDLE_INVALIDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getITEMADDITIONALIMAGEDOWNLOADFAILURE() const
{
    return m_ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE;
}

void CatalogsItemValidationWarnings::setITEMADDITIONALIMAGEDOWNLOADFAILURE(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE = value;
    m_ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILUREIsSet = true;
}

bool CatalogsItemValidationWarnings::iTEMADDITIONALIMAGEDOWNLOADFAILUREIsSet() const
{
    return m_ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILUREIsSet;
}

void CatalogsItemValidationWarnings::unsetITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE()
{
    m_ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILUREIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getLINKFORMATWARNING() const
{
    return m_LINK_FORMAT_WARNING;
}

void CatalogsItemValidationWarnings::setLINKFORMATWARNING(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_LINK_FORMAT_WARNING = value;
    m_LINK_FORMAT_WARNINGIsSet = true;
}

bool CatalogsItemValidationWarnings::lINKFORMATWARNINGIsSet() const
{
    return m_LINK_FORMAT_WARNINGIsSet;
}

void CatalogsItemValidationWarnings::unsetLINK_FORMAT_WARNING()
{
    m_LINK_FORMAT_WARNINGIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getMINADPRICEINVALID() const
{
    return m_MIN_AD_PRICE_INVALID;
}

void CatalogsItemValidationWarnings::setMINADPRICEINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_MIN_AD_PRICE_INVALID = value;
    m_MIN_AD_PRICE_INVALIDIsSet = true;
}

bool CatalogsItemValidationWarnings::mINADPRICEINVALIDIsSet() const
{
    return m_MIN_AD_PRICE_INVALIDIsSet;
}

void CatalogsItemValidationWarnings::unsetMIN_AD_PRICE_INVALID()
{
    m_MIN_AD_PRICE_INVALIDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getMPNINVALID() const
{
    return m_MPN_INVALID;
}

void CatalogsItemValidationWarnings::setMPNINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_MPN_INVALID = value;
    m_MPN_INVALIDIsSet = true;
}

bool CatalogsItemValidationWarnings::mPNINVALIDIsSet() const
{
    return m_MPN_INVALIDIsSet;
}

void CatalogsItemValidationWarnings::unsetMPN_INVALID()
{
    m_MPN_INVALIDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getMULTIPACKINVALID() const
{
    return m_MULTIPACK_INVALID;
}

void CatalogsItemValidationWarnings::setMULTIPACKINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_MULTIPACK_INVALID = value;
    m_MULTIPACK_INVALIDIsSet = true;
}

bool CatalogsItemValidationWarnings::mULTIPACKINVALIDIsSet() const
{
    return m_MULTIPACK_INVALIDIsSet;
}

void CatalogsItemValidationWarnings::unsetMULTIPACK_INVALID()
{
    m_MULTIPACK_INVALIDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getOPTIONALCONDITIONINVALID() const
{
    return m_OPTIONAL_CONDITION_INVALID;
}

void CatalogsItemValidationWarnings::setOPTIONALCONDITIONINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_OPTIONAL_CONDITION_INVALID = value;
    m_OPTIONAL_CONDITION_INVALIDIsSet = true;
}

bool CatalogsItemValidationWarnings::oPTIONALCONDITIONINVALIDIsSet() const
{
    return m_OPTIONAL_CONDITION_INVALIDIsSet;
}

void CatalogsItemValidationWarnings::unsetOPTIONAL_CONDITION_INVALID()
{
    m_OPTIONAL_CONDITION_INVALIDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getOPTIONALCONDITIONMISSING() const
{
    return m_OPTIONAL_CONDITION_MISSING;
}

void CatalogsItemValidationWarnings::setOPTIONALCONDITIONMISSING(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_OPTIONAL_CONDITION_MISSING = value;
    m_OPTIONAL_CONDITION_MISSINGIsSet = true;
}

bool CatalogsItemValidationWarnings::oPTIONALCONDITIONMISSINGIsSet() const
{
    return m_OPTIONAL_CONDITION_MISSINGIsSet;
}

void CatalogsItemValidationWarnings::unsetOPTIONAL_CONDITION_MISSING()
{
    m_OPTIONAL_CONDITION_MISSINGIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getOPTIONALPRODUCTCATEGORYINVALID() const
{
    return m_OPTIONAL_PRODUCT_CATEGORY_INVALID;
}

void CatalogsItemValidationWarnings::setOPTIONALPRODUCTCATEGORYINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_OPTIONAL_PRODUCT_CATEGORY_INVALID = value;
    m_OPTIONAL_PRODUCT_CATEGORY_INVALIDIsSet = true;
}

bool CatalogsItemValidationWarnings::oPTIONALPRODUCTCATEGORYINVALIDIsSet() const
{
    return m_OPTIONAL_PRODUCT_CATEGORY_INVALIDIsSet;
}

void CatalogsItemValidationWarnings::unsetOPTIONAL_PRODUCT_CATEGORY_INVALID()
{
    m_OPTIONAL_PRODUCT_CATEGORY_INVALIDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getOPTIONALPRODUCTCATEGORYMISSING() const
{
    return m_OPTIONAL_PRODUCT_CATEGORY_MISSING;
}

void CatalogsItemValidationWarnings::setOPTIONALPRODUCTCATEGORYMISSING(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_OPTIONAL_PRODUCT_CATEGORY_MISSING = value;
    m_OPTIONAL_PRODUCT_CATEGORY_MISSINGIsSet = true;
}

bool CatalogsItemValidationWarnings::oPTIONALPRODUCTCATEGORYMISSINGIsSet() const
{
    return m_OPTIONAL_PRODUCT_CATEGORY_MISSINGIsSet;
}

void CatalogsItemValidationWarnings::unsetOPTIONAL_PRODUCT_CATEGORY_MISSING()
{
    m_OPTIONAL_PRODUCT_CATEGORY_MISSINGIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getPRODUCTCATEGORYDEPTHWARNING() const
{
    return m_PRODUCT_CATEGORY_DEPTH_WARNING;
}

void CatalogsItemValidationWarnings::setPRODUCTCATEGORYDEPTHWARNING(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_PRODUCT_CATEGORY_DEPTH_WARNING = value;
    m_PRODUCT_CATEGORY_DEPTH_WARNINGIsSet = true;
}

bool CatalogsItemValidationWarnings::pRODUCTCATEGORYDEPTHWARNINGIsSet() const
{
    return m_PRODUCT_CATEGORY_DEPTH_WARNINGIsSet;
}

void CatalogsItemValidationWarnings::unsetPRODUCT_CATEGORY_DEPTH_WARNING()
{
    m_PRODUCT_CATEGORY_DEPTH_WARNINGIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getPRODUCTTYPELENGTHTOOLONG() const
{
    return m_PRODUCT_TYPE_LENGTH_TOO_LONG;
}

void CatalogsItemValidationWarnings::setPRODUCTTYPELENGTHTOOLONG(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_PRODUCT_TYPE_LENGTH_TOO_LONG = value;
    m_PRODUCT_TYPE_LENGTH_TOO_LONGIsSet = true;
}

bool CatalogsItemValidationWarnings::pRODUCTTYPELENGTHTOOLONGIsSet() const
{
    return m_PRODUCT_TYPE_LENGTH_TOO_LONGIsSet;
}

void CatalogsItemValidationWarnings::unsetPRODUCT_TYPE_LENGTH_TOO_LONG()
{
    m_PRODUCT_TYPE_LENGTH_TOO_LONGIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getSALESPRICEINVALID() const
{
    return m_SALES_PRICE_INVALID;
}

void CatalogsItemValidationWarnings::setSALESPRICEINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_SALES_PRICE_INVALID = value;
    m_SALES_PRICE_INVALIDIsSet = true;
}

bool CatalogsItemValidationWarnings::sALESPRICEINVALIDIsSet() const
{
    return m_SALES_PRICE_INVALIDIsSet;
}

void CatalogsItemValidationWarnings::unsetSALES_PRICE_INVALID()
{
    m_SALES_PRICE_INVALIDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getSALESPRICETOOLOW() const
{
    return m_SALES_PRICE_TOO_LOW;
}

void CatalogsItemValidationWarnings::setSALESPRICETOOLOW(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_SALES_PRICE_TOO_LOW = value;
    m_SALES_PRICE_TOO_LOWIsSet = true;
}

bool CatalogsItemValidationWarnings::sALESPRICETOOLOWIsSet() const
{
    return m_SALES_PRICE_TOO_LOWIsSet;
}

void CatalogsItemValidationWarnings::unsetSALES_PRICE_TOO_LOW()
{
    m_SALES_PRICE_TOO_LOWIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getSALESPRICETOOHIGH() const
{
    return m_SALES_PRICE_TOO_HIGH;
}

void CatalogsItemValidationWarnings::setSALESPRICETOOHIGH(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_SALES_PRICE_TOO_HIGH = value;
    m_SALES_PRICE_TOO_HIGHIsSet = true;
}

bool CatalogsItemValidationWarnings::sALESPRICETOOHIGHIsSet() const
{
    return m_SALES_PRICE_TOO_HIGHIsSet;
}

void CatalogsItemValidationWarnings::unsetSALES_PRICE_TOO_HIGH()
{
    m_SALES_PRICE_TOO_HIGHIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getSALEDATEINVALID() const
{
    return m_SALE_DATE_INVALID;
}

void CatalogsItemValidationWarnings::setSALEDATEINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_SALE_DATE_INVALID = value;
    m_SALE_DATE_INVALIDIsSet = true;
}

bool CatalogsItemValidationWarnings::sALEDATEINVALIDIsSet() const
{
    return m_SALE_DATE_INVALIDIsSet;
}

void CatalogsItemValidationWarnings::unsetSALE_DATE_INVALID()
{
    m_SALE_DATE_INVALIDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getSHIPPINGINVALID() const
{
    return m_SHIPPING_INVALID;
}

void CatalogsItemValidationWarnings::setSHIPPINGINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_SHIPPING_INVALID = value;
    m_SHIPPING_INVALIDIsSet = true;
}

bool CatalogsItemValidationWarnings::sHIPPINGINVALIDIsSet() const
{
    return m_SHIPPING_INVALIDIsSet;
}

void CatalogsItemValidationWarnings::unsetSHIPPING_INVALID()
{
    m_SHIPPING_INVALIDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getSHIPPINGHEIGHTINVALID() const
{
    return m_SHIPPING_HEIGHT_INVALID;
}

void CatalogsItemValidationWarnings::setSHIPPINGHEIGHTINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_SHIPPING_HEIGHT_INVALID = value;
    m_SHIPPING_HEIGHT_INVALIDIsSet = true;
}

bool CatalogsItemValidationWarnings::sHIPPINGHEIGHTINVALIDIsSet() const
{
    return m_SHIPPING_HEIGHT_INVALIDIsSet;
}

void CatalogsItemValidationWarnings::unsetSHIPPING_HEIGHT_INVALID()
{
    m_SHIPPING_HEIGHT_INVALIDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getSHIPPINGWEIGHTINVALID() const
{
    return m_SHIPPING_WEIGHT_INVALID;
}

void CatalogsItemValidationWarnings::setSHIPPINGWEIGHTINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_SHIPPING_WEIGHT_INVALID = value;
    m_SHIPPING_WEIGHT_INVALIDIsSet = true;
}

bool CatalogsItemValidationWarnings::sHIPPINGWEIGHTINVALIDIsSet() const
{
    return m_SHIPPING_WEIGHT_INVALIDIsSet;
}

void CatalogsItemValidationWarnings::unsetSHIPPING_WEIGHT_INVALID()
{
    m_SHIPPING_WEIGHT_INVALIDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getSHIPPINGWIDTHINVALID() const
{
    return m_SHIPPING_WIDTH_INVALID;
}

void CatalogsItemValidationWarnings::setSHIPPINGWIDTHINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_SHIPPING_WIDTH_INVALID = value;
    m_SHIPPING_WIDTH_INVALIDIsSet = true;
}

bool CatalogsItemValidationWarnings::sHIPPINGWIDTHINVALIDIsSet() const
{
    return m_SHIPPING_WIDTH_INVALIDIsSet;
}

void CatalogsItemValidationWarnings::unsetSHIPPING_WIDTH_INVALID()
{
    m_SHIPPING_WIDTH_INVALIDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getSIZETYPEINVALID() const
{
    return m_SIZE_TYPE_INVALID;
}

void CatalogsItemValidationWarnings::setSIZETYPEINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_SIZE_TYPE_INVALID = value;
    m_SIZE_TYPE_INVALIDIsSet = true;
}

bool CatalogsItemValidationWarnings::sIZETYPEINVALIDIsSet() const
{
    return m_SIZE_TYPE_INVALIDIsSet;
}

void CatalogsItemValidationWarnings::unsetSIZE_TYPE_INVALID()
{
    m_SIZE_TYPE_INVALIDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getTAXINVALID() const
{
    return m_TAX_INVALID;
}

void CatalogsItemValidationWarnings::setTAXINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_TAX_INVALID = value;
    m_TAX_INVALIDIsSet = true;
}

bool CatalogsItemValidationWarnings::tAXINVALIDIsSet() const
{
    return m_TAX_INVALIDIsSet;
}

void CatalogsItemValidationWarnings::unsetTAX_INVALID()
{
    m_TAX_INVALIDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getTITLELENGTHTOOLONG() const
{
    return m_TITLE_LENGTH_TOO_LONG;
}

void CatalogsItemValidationWarnings::setTITLELENGTHTOOLONG(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_TITLE_LENGTH_TOO_LONG = value;
    m_TITLE_LENGTH_TOO_LONGIsSet = true;
}

bool CatalogsItemValidationWarnings::tITLELENGTHTOOLONGIsSet() const
{
    return m_TITLE_LENGTH_TOO_LONGIsSet;
}

void CatalogsItemValidationWarnings::unsetTITLE_LENGTH_TOO_LONG()
{
    m_TITLE_LENGTH_TOO_LONGIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getTOOMANYADDITIONALIMAGELINKS() const
{
    return m_TOO_MANY_ADDITIONAL_IMAGE_LINKS;
}

void CatalogsItemValidationWarnings::setTOOMANYADDITIONALIMAGELINKS(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_TOO_MANY_ADDITIONAL_IMAGE_LINKS = value;
    m_TOO_MANY_ADDITIONAL_IMAGE_LINKSIsSet = true;
}

bool CatalogsItemValidationWarnings::tOOMANYADDITIONALIMAGELINKSIsSet() const
{
    return m_TOO_MANY_ADDITIONAL_IMAGE_LINKSIsSet;
}

void CatalogsItemValidationWarnings::unsetTOO_MANY_ADDITIONAL_IMAGE_LINKS()
{
    m_TOO_MANY_ADDITIONAL_IMAGE_LINKSIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getUTMSOURCEAUTOCORRECTED() const
{
    return m_UTM_SOURCE_AUTO_CORRECTED;
}

void CatalogsItemValidationWarnings::setUTMSOURCEAUTOCORRECTED(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_UTM_SOURCE_AUTO_CORRECTED = value;
    m_UTM_SOURCE_AUTO_CORRECTEDIsSet = true;
}

bool CatalogsItemValidationWarnings::uTMSOURCEAUTOCORRECTEDIsSet() const
{
    return m_UTM_SOURCE_AUTO_CORRECTEDIsSet;
}

void CatalogsItemValidationWarnings::unsetUTM_SOURCE_AUTO_CORRECTED()
{
    m_UTM_SOURCE_AUTO_CORRECTEDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationWarnings::getWEIGHTUNITINVALID() const
{
    return m_WEIGHT_UNIT_INVALID;
}

void CatalogsItemValidationWarnings::setWEIGHTUNITINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_WEIGHT_UNIT_INVALID = value;
    m_WEIGHT_UNIT_INVALIDIsSet = true;
}

bool CatalogsItemValidationWarnings::wEIGHTUNITINVALIDIsSet() const
{
    return m_WEIGHT_UNIT_INVALIDIsSet;
}

void CatalogsItemValidationWarnings::unsetWEIGHT_UNIT_INVALID()
{
    m_WEIGHT_UNIT_INVALIDIsSet = false;
}
}
}
}
}


