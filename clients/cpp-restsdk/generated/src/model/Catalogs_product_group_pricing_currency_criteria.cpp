/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Catalogs_product_group_pricing_currency_criteria.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Catalogs_product_group_pricing_currency_criteria::Catalogs_product_group_pricing_currency_criteria()
{
    m_r_operator = utility::conversions::to_string_t("");
    m_r_operatorIsSet = false;
    m_Value = 0.0;
    m_ValueIsSet = false;
    m_CurrencyIsSet = false;
    m_Negated = false;
    m_NegatedIsSet = false;
}

Catalogs_product_group_pricing_currency_criteria::~Catalogs_product_group_pricing_currency_criteria()
{
}

void Catalogs_product_group_pricing_currency_criteria::validate()
{
    // TODO: implement validation
}

web::json::value Catalogs_product_group_pricing_currency_criteria::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_r_operatorIsSet)
    {
        val[utility::conversions::to_string_t(U("operator"))] = ModelBase::toJson(m_r_operator);
    }
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t(U("value"))] = ModelBase::toJson(m_Value);
    }
    if(m_CurrencyIsSet)
    {
        val[utility::conversions::to_string_t(U("currency"))] = ModelBase::toJson(m_Currency);
    }
    if(m_NegatedIsSet)
    {
        val[utility::conversions::to_string_t(U("negated"))] = ModelBase::toJson(m_Negated);
    }

    return val;
}

bool Catalogs_product_group_pricing_currency_criteria::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("operator"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("operator")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setROperator;
            ok &= ModelBase::fromJson(fieldValue, refVal_setROperator);
            setROperator(refVal_setROperator);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("value"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("value")));
        if(!fieldValue.is_null())
        {
            double refVal_setValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValue);
            setValue(refVal_setValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("currency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("currency")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<NonNullableCatalogsCurrency> refVal_setCurrency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCurrency);
            setCurrency(refVal_setCurrency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("negated"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("negated")));
        if(!fieldValue.is_null())
        {
            bool refVal_setNegated;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNegated);
            setNegated(refVal_setNegated);
        }
    }
    return ok;
}

void Catalogs_product_group_pricing_currency_criteria::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_r_operatorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("operator")), m_r_operator));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("value")), m_Value));
    }
    if(m_CurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("currency")), m_Currency));
    }
    if(m_NegatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("negated")), m_Negated));
    }
}

bool Catalogs_product_group_pricing_currency_criteria::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("operator"))))
    {
        utility::string_t refVal_setROperator;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("operator"))), refVal_setROperator );
        setROperator(refVal_setROperator);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("value"))))
    {
        double refVal_setValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("value"))), refVal_setValue );
        setValue(refVal_setValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("currency"))))
    {
        std::shared_ptr<NonNullableCatalogsCurrency> refVal_setCurrency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("currency"))), refVal_setCurrency );
        setCurrency(refVal_setCurrency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("negated"))))
    {
        bool refVal_setNegated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("negated"))), refVal_setNegated );
        setNegated(refVal_setNegated);
    }
    return ok;
}

utility::string_t Catalogs_product_group_pricing_currency_criteria::getROperator() const
{
    return m_r_operator;
}

void Catalogs_product_group_pricing_currency_criteria::setROperator(const utility::string_t& value)
{
    m_r_operator = value;
    m_r_operatorIsSet = true;
}

bool Catalogs_product_group_pricing_currency_criteria::rOperatorIsSet() const
{
    return m_r_operatorIsSet;
}

void Catalogs_product_group_pricing_currency_criteria::unsetr_operator()
{
    m_r_operatorIsSet = false;
}
double Catalogs_product_group_pricing_currency_criteria::getValue() const
{
    return m_Value;
}

void Catalogs_product_group_pricing_currency_criteria::setValue(double value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool Catalogs_product_group_pricing_currency_criteria::valueIsSet() const
{
    return m_ValueIsSet;
}

void Catalogs_product_group_pricing_currency_criteria::unsetValue()
{
    m_ValueIsSet = false;
}
std::shared_ptr<NonNullableCatalogsCurrency> Catalogs_product_group_pricing_currency_criteria::getCurrency() const
{
    return m_Currency;
}

void Catalogs_product_group_pricing_currency_criteria::setCurrency(const std::shared_ptr<NonNullableCatalogsCurrency>& value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}

bool Catalogs_product_group_pricing_currency_criteria::currencyIsSet() const
{
    return m_CurrencyIsSet;
}

void Catalogs_product_group_pricing_currency_criteria::unsetCurrency()
{
    m_CurrencyIsSet = false;
}
bool Catalogs_product_group_pricing_currency_criteria::isNegated() const
{
    return m_Negated;
}

void Catalogs_product_group_pricing_currency_criteria::setNegated(bool value)
{
    m_Negated = value;
    m_NegatedIsSet = true;
}

bool Catalogs_product_group_pricing_currency_criteria::negatedIsSet() const
{
    return m_NegatedIsSet;
}

void Catalogs_product_group_pricing_currency_criteria::unsetNegated()
{
    m_NegatedIsSet = false;
}
}
}
}
}


