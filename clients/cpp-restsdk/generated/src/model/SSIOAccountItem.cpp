/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SSIOAccountItem.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



SSIOAccountItem::SSIOAccountItem()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Io_terms_id = utility::conversions::to_string_t("");
    m_Io_terms_idIsSet = false;
    m_Io_terms = utility::conversions::to_string_t("");
    m_Io_termsIsSet = false;
    m_Us_terms_id = utility::conversions::to_string_t("");
    m_Us_terms_idIsSet = false;
    m_Us_terms = utility::conversions::to_string_t("");
    m_Us_termsIsSet = false;
    m_Row_terms_id = utility::conversions::to_string_t("");
    m_Row_terms_idIsSet = false;
    m_Row_terms = utility::conversions::to_string_t("");
    m_Row_termsIsSet = false;
    m_Io_type = utility::conversions::to_string_t("");
    m_Io_typeIsSet = false;
    m_AddressesIsSet = false;
}

SSIOAccountItem::~SSIOAccountItem()
{
}

void SSIOAccountItem::validate()
{
    // TODO: implement validation
}

web::json::value SSIOAccountItem::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Io_terms_idIsSet)
    {
        val[utility::conversions::to_string_t(U("io_terms_id"))] = ModelBase::toJson(m_Io_terms_id);
    }
    if(m_Io_termsIsSet)
    {
        val[utility::conversions::to_string_t(U("io_terms"))] = ModelBase::toJson(m_Io_terms);
    }
    if(m_Us_terms_idIsSet)
    {
        val[utility::conversions::to_string_t(U("us_terms_id"))] = ModelBase::toJson(m_Us_terms_id);
    }
    if(m_Us_termsIsSet)
    {
        val[utility::conversions::to_string_t(U("us_terms"))] = ModelBase::toJson(m_Us_terms);
    }
    if(m_Row_terms_idIsSet)
    {
        val[utility::conversions::to_string_t(U("row_terms_id"))] = ModelBase::toJson(m_Row_terms_id);
    }
    if(m_Row_termsIsSet)
    {
        val[utility::conversions::to_string_t(U("row_terms"))] = ModelBase::toJson(m_Row_terms);
    }
    if(m_Io_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("io_type"))] = ModelBase::toJson(m_Io_type);
    }
    if(m_AddressesIsSet)
    {
        val[utility::conversions::to_string_t(U("addresses"))] = ModelBase::toJson(m_Addresses);
    }

    return val;
}

bool SSIOAccountItem::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("io_terms_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("io_terms_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIoTermsId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIoTermsId);
            setIoTermsId(refVal_setIoTermsId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("io_terms"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("io_terms")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIoTerms;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIoTerms);
            setIoTerms(refVal_setIoTerms);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("us_terms_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("us_terms_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUsTermsId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUsTermsId);
            setUsTermsId(refVal_setUsTermsId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("us_terms"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("us_terms")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUsTerms;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUsTerms);
            setUsTerms(refVal_setUsTerms);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("row_terms_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("row_terms_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRowTermsId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRowTermsId);
            setRowTermsId(refVal_setRowTermsId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("row_terms"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("row_terms")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRowTerms;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRowTerms);
            setRowTerms(refVal_setRowTerms);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("io_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("io_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIoType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIoType);
            setIoType(refVal_setIoType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("addresses"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("addresses")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SSIOAccountAddress>> refVal_setAddresses;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAddresses);
            setAddresses(refVal_setAddresses);
        }
    }
    return ok;
}

void SSIOAccountItem::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Io_terms_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("io_terms_id")), m_Io_terms_id));
    }
    if(m_Io_termsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("io_terms")), m_Io_terms));
    }
    if(m_Us_terms_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("us_terms_id")), m_Us_terms_id));
    }
    if(m_Us_termsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("us_terms")), m_Us_terms));
    }
    if(m_Row_terms_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("row_terms_id")), m_Row_terms_id));
    }
    if(m_Row_termsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("row_terms")), m_Row_terms));
    }
    if(m_Io_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("io_type")), m_Io_type));
    }
    if(m_AddressesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("addresses")), m_Addresses));
    }
}

bool SSIOAccountItem::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("io_terms_id"))))
    {
        utility::string_t refVal_setIoTermsId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("io_terms_id"))), refVal_setIoTermsId );
        setIoTermsId(refVal_setIoTermsId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("io_terms"))))
    {
        utility::string_t refVal_setIoTerms;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("io_terms"))), refVal_setIoTerms );
        setIoTerms(refVal_setIoTerms);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("us_terms_id"))))
    {
        utility::string_t refVal_setUsTermsId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("us_terms_id"))), refVal_setUsTermsId );
        setUsTermsId(refVal_setUsTermsId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("us_terms"))))
    {
        utility::string_t refVal_setUsTerms;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("us_terms"))), refVal_setUsTerms );
        setUsTerms(refVal_setUsTerms);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("row_terms_id"))))
    {
        utility::string_t refVal_setRowTermsId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("row_terms_id"))), refVal_setRowTermsId );
        setRowTermsId(refVal_setRowTermsId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("row_terms"))))
    {
        utility::string_t refVal_setRowTerms;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("row_terms"))), refVal_setRowTerms );
        setRowTerms(refVal_setRowTerms);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("io_type"))))
    {
        utility::string_t refVal_setIoType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("io_type"))), refVal_setIoType );
        setIoType(refVal_setIoType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("addresses"))))
    {
        std::vector<std::shared_ptr<SSIOAccountAddress>> refVal_setAddresses;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("addresses"))), refVal_setAddresses );
        setAddresses(refVal_setAddresses);
    }
    return ok;
}

utility::string_t SSIOAccountItem::getId() const
{
    return m_Id;
}

void SSIOAccountItem::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool SSIOAccountItem::idIsSet() const
{
    return m_IdIsSet;
}

void SSIOAccountItem::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t SSIOAccountItem::getIoTermsId() const
{
    return m_Io_terms_id;
}

void SSIOAccountItem::setIoTermsId(const utility::string_t& value)
{
    m_Io_terms_id = value;
    m_Io_terms_idIsSet = true;
}

bool SSIOAccountItem::ioTermsIdIsSet() const
{
    return m_Io_terms_idIsSet;
}

void SSIOAccountItem::unsetIo_terms_id()
{
    m_Io_terms_idIsSet = false;
}
utility::string_t SSIOAccountItem::getIoTerms() const
{
    return m_Io_terms;
}

void SSIOAccountItem::setIoTerms(const utility::string_t& value)
{
    m_Io_terms = value;
    m_Io_termsIsSet = true;
}

bool SSIOAccountItem::ioTermsIsSet() const
{
    return m_Io_termsIsSet;
}

void SSIOAccountItem::unsetIo_terms()
{
    m_Io_termsIsSet = false;
}
utility::string_t SSIOAccountItem::getUsTermsId() const
{
    return m_Us_terms_id;
}

void SSIOAccountItem::setUsTermsId(const utility::string_t& value)
{
    m_Us_terms_id = value;
    m_Us_terms_idIsSet = true;
}

bool SSIOAccountItem::usTermsIdIsSet() const
{
    return m_Us_terms_idIsSet;
}

void SSIOAccountItem::unsetUs_terms_id()
{
    m_Us_terms_idIsSet = false;
}
utility::string_t SSIOAccountItem::getUsTerms() const
{
    return m_Us_terms;
}

void SSIOAccountItem::setUsTerms(const utility::string_t& value)
{
    m_Us_terms = value;
    m_Us_termsIsSet = true;
}

bool SSIOAccountItem::usTermsIsSet() const
{
    return m_Us_termsIsSet;
}

void SSIOAccountItem::unsetUs_terms()
{
    m_Us_termsIsSet = false;
}
utility::string_t SSIOAccountItem::getRowTermsId() const
{
    return m_Row_terms_id;
}

void SSIOAccountItem::setRowTermsId(const utility::string_t& value)
{
    m_Row_terms_id = value;
    m_Row_terms_idIsSet = true;
}

bool SSIOAccountItem::rowTermsIdIsSet() const
{
    return m_Row_terms_idIsSet;
}

void SSIOAccountItem::unsetRow_terms_id()
{
    m_Row_terms_idIsSet = false;
}
utility::string_t SSIOAccountItem::getRowTerms() const
{
    return m_Row_terms;
}

void SSIOAccountItem::setRowTerms(const utility::string_t& value)
{
    m_Row_terms = value;
    m_Row_termsIsSet = true;
}

bool SSIOAccountItem::rowTermsIsSet() const
{
    return m_Row_termsIsSet;
}

void SSIOAccountItem::unsetRow_terms()
{
    m_Row_termsIsSet = false;
}
utility::string_t SSIOAccountItem::getIoType() const
{
    return m_Io_type;
}

void SSIOAccountItem::setIoType(const utility::string_t& value)
{
    m_Io_type = value;
    m_Io_typeIsSet = true;
}

bool SSIOAccountItem::ioTypeIsSet() const
{
    return m_Io_typeIsSet;
}

void SSIOAccountItem::unsetIo_type()
{
    m_Io_typeIsSet = false;
}
std::vector<std::shared_ptr<SSIOAccountAddress>>& SSIOAccountItem::getAddresses()
{
    return m_Addresses;
}

void SSIOAccountItem::setAddresses(const std::vector<std::shared_ptr<SSIOAccountAddress>>& value)
{
    m_Addresses = value;
    m_AddressesIsSet = true;
}

bool SSIOAccountItem::addressesIsSet() const
{
    return m_AddressesIsSet;
}

void SSIOAccountItem::unsetAddresses()
{
    m_AddressesIsSet = false;
}
}
}
}
}


