/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/TargetingTemplateCommon.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



TargetingTemplateCommon::TargetingTemplateCommon()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Auto_targeting_enabled = false;
    m_Auto_targeting_enabledIsSet = false;
    m_Targeting_attributesIsSet = false;
    m_Placement_groupIsSet = false;
    m_KeywordsIsSet = false;
    m_Tracking_urlsIsSet = false;
}

TargetingTemplateCommon::~TargetingTemplateCommon()
{
}

void TargetingTemplateCommon::validate()
{
    // TODO: implement validation
}

web::json::value TargetingTemplateCommon::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_Auto_targeting_enabledIsSet)
    {
        val[utility::conversions::to_string_t(U("auto_targeting_enabled"))] = ModelBase::toJson(m_Auto_targeting_enabled);
    }
    if(m_Targeting_attributesIsSet)
    {
        val[utility::conversions::to_string_t(U("targeting_attributes"))] = ModelBase::toJson(m_Targeting_attributes);
    }
    if(m_Placement_groupIsSet)
    {
        val[utility::conversions::to_string_t(U("placement_group"))] = ModelBase::toJson(m_Placement_group);
    }
    if(m_KeywordsIsSet)
    {
        val[utility::conversions::to_string_t(U("keywords"))] = ModelBase::toJson(m_Keywords);
    }
    if(m_Tracking_urlsIsSet)
    {
        val[utility::conversions::to_string_t(U("tracking_urls"))] = ModelBase::toJson(m_Tracking_urls);
    }

    return val;
}

bool TargetingTemplateCommon::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("auto_targeting_enabled"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("auto_targeting_enabled")));
        if(!fieldValue.is_null())
        {
            bool refVal_setAutoTargetingEnabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAutoTargetingEnabled);
            setAutoTargetingEnabled(refVal_setAutoTargetingEnabled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("targeting_attributes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("targeting_attributes")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TargetingSpec> refVal_setTargetingAttributes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTargetingAttributes);
            setTargetingAttributes(refVal_setTargetingAttributes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("placement_group"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("placement_group")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PlacementGroupType> refVal_setPlacementGroup;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlacementGroup);
            setPlacementGroup(refVal_setPlacementGroup);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("keywords"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("keywords")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<TargetingTemplateKeyword>> refVal_setKeywords;
            ok &= ModelBase::fromJson(fieldValue, refVal_setKeywords);
            setKeywords(refVal_setKeywords);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tracking_urls"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tracking_urls")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TrackingUrls> refVal_setTrackingUrls;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTrackingUrls);
            setTrackingUrls(refVal_setTrackingUrls);
        }
    }
    return ok;
}

void TargetingTemplateCommon::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_Auto_targeting_enabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("auto_targeting_enabled")), m_Auto_targeting_enabled));
    }
    if(m_Targeting_attributesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("targeting_attributes")), m_Targeting_attributes));
    }
    if(m_Placement_groupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("placement_group")), m_Placement_group));
    }
    if(m_KeywordsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("keywords")), m_Keywords));
    }
    if(m_Tracking_urlsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tracking_urls")), m_Tracking_urls));
    }
}

bool TargetingTemplateCommon::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("auto_targeting_enabled"))))
    {
        bool refVal_setAutoTargetingEnabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("auto_targeting_enabled"))), refVal_setAutoTargetingEnabled );
        setAutoTargetingEnabled(refVal_setAutoTargetingEnabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("targeting_attributes"))))
    {
        std::shared_ptr<TargetingSpec> refVal_setTargetingAttributes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("targeting_attributes"))), refVal_setTargetingAttributes );
        setTargetingAttributes(refVal_setTargetingAttributes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("placement_group"))))
    {
        std::shared_ptr<PlacementGroupType> refVal_setPlacementGroup;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("placement_group"))), refVal_setPlacementGroup );
        setPlacementGroup(refVal_setPlacementGroup);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("keywords"))))
    {
        std::vector<std::shared_ptr<TargetingTemplateKeyword>> refVal_setKeywords;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("keywords"))), refVal_setKeywords );
        setKeywords(refVal_setKeywords);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tracking_urls"))))
    {
        std::shared_ptr<TrackingUrls> refVal_setTrackingUrls;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tracking_urls"))), refVal_setTrackingUrls );
        setTrackingUrls(refVal_setTrackingUrls);
    }
    return ok;
}

utility::string_t TargetingTemplateCommon::getName() const
{
    return m_Name;
}

void TargetingTemplateCommon::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool TargetingTemplateCommon::nameIsSet() const
{
    return m_NameIsSet;
}

void TargetingTemplateCommon::unsetName()
{
    m_NameIsSet = false;
}
bool TargetingTemplateCommon::isAutoTargetingEnabled() const
{
    return m_Auto_targeting_enabled;
}

void TargetingTemplateCommon::setAutoTargetingEnabled(bool value)
{
    m_Auto_targeting_enabled = value;
    m_Auto_targeting_enabledIsSet = true;
}

bool TargetingTemplateCommon::autoTargetingEnabledIsSet() const
{
    return m_Auto_targeting_enabledIsSet;
}

void TargetingTemplateCommon::unsetAuto_targeting_enabled()
{
    m_Auto_targeting_enabledIsSet = false;
}
std::shared_ptr<TargetingSpec> TargetingTemplateCommon::getTargetingAttributes() const
{
    return m_Targeting_attributes;
}

void TargetingTemplateCommon::setTargetingAttributes(const std::shared_ptr<TargetingSpec>& value)
{
    m_Targeting_attributes = value;
    m_Targeting_attributesIsSet = true;
}

bool TargetingTemplateCommon::targetingAttributesIsSet() const
{
    return m_Targeting_attributesIsSet;
}

void TargetingTemplateCommon::unsetTargeting_attributes()
{
    m_Targeting_attributesIsSet = false;
}
std::shared_ptr<PlacementGroupType> TargetingTemplateCommon::getPlacementGroup() const
{
    return m_Placement_group;
}

void TargetingTemplateCommon::setPlacementGroup(const std::shared_ptr<PlacementGroupType>& value)
{
    m_Placement_group = value;
    m_Placement_groupIsSet = true;
}

bool TargetingTemplateCommon::placementGroupIsSet() const
{
    return m_Placement_groupIsSet;
}

void TargetingTemplateCommon::unsetPlacement_group()
{
    m_Placement_groupIsSet = false;
}
std::vector<std::shared_ptr<TargetingTemplateKeyword>>& TargetingTemplateCommon::getKeywords()
{
    return m_Keywords;
}

void TargetingTemplateCommon::setKeywords(const std::vector<std::shared_ptr<TargetingTemplateKeyword>>& value)
{
    m_Keywords = value;
    m_KeywordsIsSet = true;
}

bool TargetingTemplateCommon::keywordsIsSet() const
{
    return m_KeywordsIsSet;
}

void TargetingTemplateCommon::unsetKeywords()
{
    m_KeywordsIsSet = false;
}
std::shared_ptr<TrackingUrls> TargetingTemplateCommon::getTrackingUrls() const
{
    return m_Tracking_urls;
}

void TargetingTemplateCommon::setTrackingUrls(const std::shared_ptr<TrackingUrls>& value)
{
    m_Tracking_urls = value;
    m_Tracking_urlsIsSet = true;
}

bool TargetingTemplateCommon::trackingUrlsIsSet() const
{
    return m_Tracking_urlsIsSet;
}

void TargetingTemplateCommon::unsetTracking_urls()
{
    m_Tracking_urlsIsSet = false;
}
}
}
}
}


