/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CatalogsReportFeedIngestionStats.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CatalogsReportFeedIngestionStats::CatalogsReportFeedIngestionStats()
{
    m_Report_type = utility::conversions::to_string_t("");
    m_Report_typeIsSet = false;
    m_Catalog_id = utility::conversions::to_string_t("");
    m_Catalog_idIsSet = false;
    m_Code = 0;
    m_CodeIsSet = false;
    m_Code_label = utility::conversions::to_string_t("");
    m_Code_labelIsSet = false;
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
    m_Occurrences = 0;
    m_OccurrencesIsSet = false;
    m_Severity = utility::conversions::to_string_t("");
    m_SeverityIsSet = false;
}

CatalogsReportFeedIngestionStats::~CatalogsReportFeedIngestionStats()
{
}

void CatalogsReportFeedIngestionStats::validate()
{
    // TODO: implement validation
}

web::json::value CatalogsReportFeedIngestionStats::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Report_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("report_type"))] = ModelBase::toJson(m_Report_type);
    }
    if(m_Catalog_idIsSet)
    {
        val[utility::conversions::to_string_t(U("catalog_id"))] = ModelBase::toJson(m_Catalog_id);
    }
    if(m_CodeIsSet)
    {
        val[utility::conversions::to_string_t(U("code"))] = ModelBase::toJson(m_Code);
    }
    if(m_Code_labelIsSet)
    {
        val[utility::conversions::to_string_t(U("code_label"))] = ModelBase::toJson(m_Code_label);
    }
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t(U("message"))] = ModelBase::toJson(m_Message);
    }
    if(m_OccurrencesIsSet)
    {
        val[utility::conversions::to_string_t(U("occurrences"))] = ModelBase::toJson(m_Occurrences);
    }
    if(m_SeverityIsSet)
    {
        val[utility::conversions::to_string_t(U("severity"))] = ModelBase::toJson(m_Severity);
    }

    return val;
}

bool CatalogsReportFeedIngestionStats::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("report_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("report_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setReportType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReportType);
            setReportType(refVal_setReportType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("catalog_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("catalog_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCatalogId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCatalogId);
            setCatalogId(refVal_setCatalogId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("code")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCode);
            setCode(refVal_setCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("code_label"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("code_label")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCodeLabel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCodeLabel);
            setCodeLabel(refVal_setCodeLabel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("message"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("message")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessage);
            setMessage(refVal_setMessage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("occurrences"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("occurrences")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setOccurrences;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOccurrences);
            setOccurrences(refVal_setOccurrences);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("severity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("severity")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSeverity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSeverity);
            setSeverity(refVal_setSeverity);
        }
    }
    return ok;
}

void CatalogsReportFeedIngestionStats::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Report_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("report_type")), m_Report_type));
    }
    if(m_Catalog_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("catalog_id")), m_Catalog_id));
    }
    if(m_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("code")), m_Code));
    }
    if(m_Code_labelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("code_label")), m_Code_label));
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("message")), m_Message));
    }
    if(m_OccurrencesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("occurrences")), m_Occurrences));
    }
    if(m_SeverityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("severity")), m_Severity));
    }
}

bool CatalogsReportFeedIngestionStats::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("report_type"))))
    {
        utility::string_t refVal_setReportType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("report_type"))), refVal_setReportType );
        setReportType(refVal_setReportType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("catalog_id"))))
    {
        utility::string_t refVal_setCatalogId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("catalog_id"))), refVal_setCatalogId );
        setCatalogId(refVal_setCatalogId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("code"))))
    {
        int32_t refVal_setCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("code"))), refVal_setCode );
        setCode(refVal_setCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("code_label"))))
    {
        utility::string_t refVal_setCodeLabel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("code_label"))), refVal_setCodeLabel );
        setCodeLabel(refVal_setCodeLabel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("message"))))
    {
        utility::string_t refVal_setMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("message"))), refVal_setMessage );
        setMessage(refVal_setMessage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("occurrences"))))
    {
        int32_t refVal_setOccurrences;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("occurrences"))), refVal_setOccurrences );
        setOccurrences(refVal_setOccurrences);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("severity"))))
    {
        utility::string_t refVal_setSeverity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("severity"))), refVal_setSeverity );
        setSeverity(refVal_setSeverity);
    }
    return ok;
}

utility::string_t CatalogsReportFeedIngestionStats::getReportType() const
{
    return m_Report_type;
}

void CatalogsReportFeedIngestionStats::setReportType(const utility::string_t& value)
{
    m_Report_type = value;
    m_Report_typeIsSet = true;
}

bool CatalogsReportFeedIngestionStats::reportTypeIsSet() const
{
    return m_Report_typeIsSet;
}

void CatalogsReportFeedIngestionStats::unsetReport_type()
{
    m_Report_typeIsSet = false;
}
utility::string_t CatalogsReportFeedIngestionStats::getCatalogId() const
{
    return m_Catalog_id;
}

void CatalogsReportFeedIngestionStats::setCatalogId(const utility::string_t& value)
{
    m_Catalog_id = value;
    m_Catalog_idIsSet = true;
}

bool CatalogsReportFeedIngestionStats::catalogIdIsSet() const
{
    return m_Catalog_idIsSet;
}

void CatalogsReportFeedIngestionStats::unsetCatalog_id()
{
    m_Catalog_idIsSet = false;
}
int32_t CatalogsReportFeedIngestionStats::getCode() const
{
    return m_Code;
}

void CatalogsReportFeedIngestionStats::setCode(int32_t value)
{
    m_Code = value;
    m_CodeIsSet = true;
}

bool CatalogsReportFeedIngestionStats::codeIsSet() const
{
    return m_CodeIsSet;
}

void CatalogsReportFeedIngestionStats::unsetCode()
{
    m_CodeIsSet = false;
}
utility::string_t CatalogsReportFeedIngestionStats::getCodeLabel() const
{
    return m_Code_label;
}

void CatalogsReportFeedIngestionStats::setCodeLabel(const utility::string_t& value)
{
    m_Code_label = value;
    m_Code_labelIsSet = true;
}

bool CatalogsReportFeedIngestionStats::codeLabelIsSet() const
{
    return m_Code_labelIsSet;
}

void CatalogsReportFeedIngestionStats::unsetCode_label()
{
    m_Code_labelIsSet = false;
}
utility::string_t CatalogsReportFeedIngestionStats::getMessage() const
{
    return m_Message;
}

void CatalogsReportFeedIngestionStats::setMessage(const utility::string_t& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}

bool CatalogsReportFeedIngestionStats::messageIsSet() const
{
    return m_MessageIsSet;
}

void CatalogsReportFeedIngestionStats::unsetMessage()
{
    m_MessageIsSet = false;
}
int32_t CatalogsReportFeedIngestionStats::getOccurrences() const
{
    return m_Occurrences;
}

void CatalogsReportFeedIngestionStats::setOccurrences(int32_t value)
{
    m_Occurrences = value;
    m_OccurrencesIsSet = true;
}

bool CatalogsReportFeedIngestionStats::occurrencesIsSet() const
{
    return m_OccurrencesIsSet;
}

void CatalogsReportFeedIngestionStats::unsetOccurrences()
{
    m_OccurrencesIsSet = false;
}
utility::string_t CatalogsReportFeedIngestionStats::getSeverity() const
{
    return m_Severity;
}

void CatalogsReportFeedIngestionStats::setSeverity(const utility::string_t& value)
{
    m_Severity = value;
    m_SeverityIsSet = true;
}

bool CatalogsReportFeedIngestionStats::severityIsSet() const
{
    return m_SeverityIsSet;
}

void CatalogsReportFeedIngestionStats::unsetSeverity()
{
    m_SeverityIsSet = false;
}
}
}
}
}


