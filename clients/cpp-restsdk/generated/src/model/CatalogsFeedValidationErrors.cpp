/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CatalogsFeedValidationErrors.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CatalogsFeedValidationErrors::CatalogsFeedValidationErrors()
{
    m_FETCH_ERROR = 0;
    m_FETCH_ERRORIsSet = false;
    m_FETCH_INACTIVE_FEED_ERROR = 0;
    m_FETCH_INACTIVE_FEED_ERRORIsSet = false;
    m_ENCODING_ERROR = 0;
    m_ENCODING_ERRORIsSet = false;
    m_DELIMITER_ERROR = 0;
    m_DELIMITER_ERRORIsSet = false;
    m_REQUIRED_COLUMNS_MISSING = 0;
    m_REQUIRED_COLUMNS_MISSINGIsSet = false;
    m_DUPLICATE_PRODUCTS = 0;
    m_DUPLICATE_PRODUCTSIsSet = false;
    m_IMAGE_LINK_INVALID = 0;
    m_IMAGE_LINK_INVALIDIsSet = false;
    m_ITEMID_MISSING = 0;
    m_ITEMID_MISSINGIsSet = false;
    m_TITLE_MISSING = 0;
    m_TITLE_MISSINGIsSet = false;
    m_DESCRIPTION_MISSING = 0;
    m_DESCRIPTION_MISSINGIsSet = false;
    m_PRODUCT_LINK_MISSING = 0;
    m_PRODUCT_LINK_MISSINGIsSet = false;
    m_IMAGE_LINK_MISSING = 0;
    m_IMAGE_LINK_MISSINGIsSet = false;
    m_AVAILABILITY_INVALID = 0;
    m_AVAILABILITY_INVALIDIsSet = false;
    m_PRODUCT_PRICE_INVALID = 0;
    m_PRODUCT_PRICE_INVALIDIsSet = false;
    m_LINK_FORMAT_INVALID = 0;
    m_LINK_FORMAT_INVALIDIsSet = false;
    m_PARSE_LINE_ERROR = 0;
    m_PARSE_LINE_ERRORIsSet = false;
    m_ADWORDS_FORMAT_INVALID = 0;
    m_ADWORDS_FORMAT_INVALIDIsSet = false;
    m_INTERNAL_SERVICE_ERROR = 0;
    m_INTERNAL_SERVICE_ERRORIsSet = false;
    m_NO_VERIFIED_DOMAIN = 0;
    m_NO_VERIFIED_DOMAINIsSet = false;
    m_ADULT_INVALID = 0;
    m_ADULT_INVALIDIsSet = false;
    m_IMAGE_LINK_LENGTH_TOO_LONG = 0;
    m_IMAGE_LINK_LENGTH_TOO_LONGIsSet = false;
    m_INVALID_DOMAIN = 0;
    m_INVALID_DOMAINIsSet = false;
    m_FEED_LENGTH_TOO_LONG = 0;
    m_FEED_LENGTH_TOO_LONGIsSet = false;
    m_LINK_LENGTH_TOO_LONG = 0;
    m_LINK_LENGTH_TOO_LONGIsSet = false;
    m_MALFORMED_XML = 0;
    m_MALFORMED_XMLIsSet = false;
    m_PRICE_MISSING = 0;
    m_PRICE_MISSINGIsSet = false;
    m_FEED_TOO_SMALL = 0;
    m_FEED_TOO_SMALLIsSet = false;
    m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED = 0;
    m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDEDIsSet = false;
    m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE = 0;
    m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILUREIsSet = false;
    m_PINJOIN_CONTENT_UNSAFE = 0;
    m_PINJOIN_CONTENT_UNSAFEIsSet = false;
    m_BLOCKLISTED_IMAGE_SIGNATURE = 0;
    m_BLOCKLISTED_IMAGE_SIGNATUREIsSet = false;
    m_LIST_PRICE_INVALID = 0;
    m_LIST_PRICE_INVALIDIsSet = false;
    m_PRICE_CANNOT_BE_DETERMINED = 0;
    m_PRICE_CANNOT_BE_DETERMINEDIsSet = false;
}

CatalogsFeedValidationErrors::~CatalogsFeedValidationErrors()
{
}

void CatalogsFeedValidationErrors::validate()
{
    // TODO: implement validation
}

web::json::value CatalogsFeedValidationErrors::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FETCH_ERRORIsSet)
    {
        val[utility::conversions::to_string_t(U("FETCH_ERROR"))] = ModelBase::toJson(m_FETCH_ERROR);
    }
    if(m_FETCH_INACTIVE_FEED_ERRORIsSet)
    {
        val[utility::conversions::to_string_t(U("FETCH_INACTIVE_FEED_ERROR"))] = ModelBase::toJson(m_FETCH_INACTIVE_FEED_ERROR);
    }
    if(m_ENCODING_ERRORIsSet)
    {
        val[utility::conversions::to_string_t(U("ENCODING_ERROR"))] = ModelBase::toJson(m_ENCODING_ERROR);
    }
    if(m_DELIMITER_ERRORIsSet)
    {
        val[utility::conversions::to_string_t(U("DELIMITER_ERROR"))] = ModelBase::toJson(m_DELIMITER_ERROR);
    }
    if(m_REQUIRED_COLUMNS_MISSINGIsSet)
    {
        val[utility::conversions::to_string_t(U("REQUIRED_COLUMNS_MISSING"))] = ModelBase::toJson(m_REQUIRED_COLUMNS_MISSING);
    }
    if(m_DUPLICATE_PRODUCTSIsSet)
    {
        val[utility::conversions::to_string_t(U("DUPLICATE_PRODUCTS"))] = ModelBase::toJson(m_DUPLICATE_PRODUCTS);
    }
    if(m_IMAGE_LINK_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("IMAGE_LINK_INVALID"))] = ModelBase::toJson(m_IMAGE_LINK_INVALID);
    }
    if(m_ITEMID_MISSINGIsSet)
    {
        val[utility::conversions::to_string_t(U("ITEMID_MISSING"))] = ModelBase::toJson(m_ITEMID_MISSING);
    }
    if(m_TITLE_MISSINGIsSet)
    {
        val[utility::conversions::to_string_t(U("TITLE_MISSING"))] = ModelBase::toJson(m_TITLE_MISSING);
    }
    if(m_DESCRIPTION_MISSINGIsSet)
    {
        val[utility::conversions::to_string_t(U("DESCRIPTION_MISSING"))] = ModelBase::toJson(m_DESCRIPTION_MISSING);
    }
    if(m_PRODUCT_LINK_MISSINGIsSet)
    {
        val[utility::conversions::to_string_t(U("PRODUCT_LINK_MISSING"))] = ModelBase::toJson(m_PRODUCT_LINK_MISSING);
    }
    if(m_IMAGE_LINK_MISSINGIsSet)
    {
        val[utility::conversions::to_string_t(U("IMAGE_LINK_MISSING"))] = ModelBase::toJson(m_IMAGE_LINK_MISSING);
    }
    if(m_AVAILABILITY_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("AVAILABILITY_INVALID"))] = ModelBase::toJson(m_AVAILABILITY_INVALID);
    }
    if(m_PRODUCT_PRICE_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("PRODUCT_PRICE_INVALID"))] = ModelBase::toJson(m_PRODUCT_PRICE_INVALID);
    }
    if(m_LINK_FORMAT_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("LINK_FORMAT_INVALID"))] = ModelBase::toJson(m_LINK_FORMAT_INVALID);
    }
    if(m_PARSE_LINE_ERRORIsSet)
    {
        val[utility::conversions::to_string_t(U("PARSE_LINE_ERROR"))] = ModelBase::toJson(m_PARSE_LINE_ERROR);
    }
    if(m_ADWORDS_FORMAT_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("ADWORDS_FORMAT_INVALID"))] = ModelBase::toJson(m_ADWORDS_FORMAT_INVALID);
    }
    if(m_INTERNAL_SERVICE_ERRORIsSet)
    {
        val[utility::conversions::to_string_t(U("INTERNAL_SERVICE_ERROR"))] = ModelBase::toJson(m_INTERNAL_SERVICE_ERROR);
    }
    if(m_NO_VERIFIED_DOMAINIsSet)
    {
        val[utility::conversions::to_string_t(U("NO_VERIFIED_DOMAIN"))] = ModelBase::toJson(m_NO_VERIFIED_DOMAIN);
    }
    if(m_ADULT_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("ADULT_INVALID"))] = ModelBase::toJson(m_ADULT_INVALID);
    }
    if(m_IMAGE_LINK_LENGTH_TOO_LONGIsSet)
    {
        val[utility::conversions::to_string_t(U("IMAGE_LINK_LENGTH_TOO_LONG"))] = ModelBase::toJson(m_IMAGE_LINK_LENGTH_TOO_LONG);
    }
    if(m_INVALID_DOMAINIsSet)
    {
        val[utility::conversions::to_string_t(U("INVALID_DOMAIN"))] = ModelBase::toJson(m_INVALID_DOMAIN);
    }
    if(m_FEED_LENGTH_TOO_LONGIsSet)
    {
        val[utility::conversions::to_string_t(U("FEED_LENGTH_TOO_LONG"))] = ModelBase::toJson(m_FEED_LENGTH_TOO_LONG);
    }
    if(m_LINK_LENGTH_TOO_LONGIsSet)
    {
        val[utility::conversions::to_string_t(U("LINK_LENGTH_TOO_LONG"))] = ModelBase::toJson(m_LINK_LENGTH_TOO_LONG);
    }
    if(m_MALFORMED_XMLIsSet)
    {
        val[utility::conversions::to_string_t(U("MALFORMED_XML"))] = ModelBase::toJson(m_MALFORMED_XML);
    }
    if(m_PRICE_MISSINGIsSet)
    {
        val[utility::conversions::to_string_t(U("PRICE_MISSING"))] = ModelBase::toJson(m_PRICE_MISSING);
    }
    if(m_FEED_TOO_SMALLIsSet)
    {
        val[utility::conversions::to_string_t(U("FEED_TOO_SMALL"))] = ModelBase::toJson(m_FEED_TOO_SMALL);
    }
    if(m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDEDIsSet)
    {
        val[utility::conversions::to_string_t(U("MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED"))] = ModelBase::toJson(m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED);
    }
    if(m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILUREIsSet)
    {
        val[utility::conversions::to_string_t(U("ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE"))] = ModelBase::toJson(m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE);
    }
    if(m_PINJOIN_CONTENT_UNSAFEIsSet)
    {
        val[utility::conversions::to_string_t(U("PINJOIN_CONTENT_UNSAFE"))] = ModelBase::toJson(m_PINJOIN_CONTENT_UNSAFE);
    }
    if(m_BLOCKLISTED_IMAGE_SIGNATUREIsSet)
    {
        val[utility::conversions::to_string_t(U("BLOCKLISTED_IMAGE_SIGNATURE"))] = ModelBase::toJson(m_BLOCKLISTED_IMAGE_SIGNATURE);
    }
    if(m_LIST_PRICE_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("LIST_PRICE_INVALID"))] = ModelBase::toJson(m_LIST_PRICE_INVALID);
    }
    if(m_PRICE_CANNOT_BE_DETERMINEDIsSet)
    {
        val[utility::conversions::to_string_t(U("PRICE_CANNOT_BE_DETERMINED"))] = ModelBase::toJson(m_PRICE_CANNOT_BE_DETERMINED);
    }

    return val;
}

bool CatalogsFeedValidationErrors::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("FETCH_ERROR"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("FETCH_ERROR")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFETCHERROR;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFETCHERROR);
            setFETCHERROR(refVal_setFETCHERROR);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("FETCH_INACTIVE_FEED_ERROR"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("FETCH_INACTIVE_FEED_ERROR")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFETCHINACTIVEFEEDERROR;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFETCHINACTIVEFEEDERROR);
            setFETCHINACTIVEFEEDERROR(refVal_setFETCHINACTIVEFEEDERROR);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ENCODING_ERROR"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ENCODING_ERROR")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setENCODINGERROR;
            ok &= ModelBase::fromJson(fieldValue, refVal_setENCODINGERROR);
            setENCODINGERROR(refVal_setENCODINGERROR);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("DELIMITER_ERROR"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("DELIMITER_ERROR")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDELIMITERERROR;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDELIMITERERROR);
            setDELIMITERERROR(refVal_setDELIMITERERROR);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("REQUIRED_COLUMNS_MISSING"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("REQUIRED_COLUMNS_MISSING")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setREQUIREDCOLUMNSMISSING;
            ok &= ModelBase::fromJson(fieldValue, refVal_setREQUIREDCOLUMNSMISSING);
            setREQUIREDCOLUMNSMISSING(refVal_setREQUIREDCOLUMNSMISSING);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("DUPLICATE_PRODUCTS"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("DUPLICATE_PRODUCTS")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDUPLICATEPRODUCTS;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDUPLICATEPRODUCTS);
            setDUPLICATEPRODUCTS(refVal_setDUPLICATEPRODUCTS);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("IMAGE_LINK_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("IMAGE_LINK_INVALID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setIMAGELINKINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIMAGELINKINVALID);
            setIMAGELINKINVALID(refVal_setIMAGELINKINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ITEMID_MISSING"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ITEMID_MISSING")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setITEMIDMISSING;
            ok &= ModelBase::fromJson(fieldValue, refVal_setITEMIDMISSING);
            setITEMIDMISSING(refVal_setITEMIDMISSING);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("TITLE_MISSING"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("TITLE_MISSING")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTITLEMISSING;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTITLEMISSING);
            setTITLEMISSING(refVal_setTITLEMISSING);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("DESCRIPTION_MISSING"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("DESCRIPTION_MISSING")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDESCRIPTIONMISSING;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDESCRIPTIONMISSING);
            setDESCRIPTIONMISSING(refVal_setDESCRIPTIONMISSING);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("PRODUCT_LINK_MISSING"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("PRODUCT_LINK_MISSING")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPRODUCTLINKMISSING;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPRODUCTLINKMISSING);
            setPRODUCTLINKMISSING(refVal_setPRODUCTLINKMISSING);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("IMAGE_LINK_MISSING"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("IMAGE_LINK_MISSING")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setIMAGELINKMISSING;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIMAGELINKMISSING);
            setIMAGELINKMISSING(refVal_setIMAGELINKMISSING);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("AVAILABILITY_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("AVAILABILITY_INVALID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAVAILABILITYINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAVAILABILITYINVALID);
            setAVAILABILITYINVALID(refVal_setAVAILABILITYINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("PRODUCT_PRICE_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("PRODUCT_PRICE_INVALID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPRODUCTPRICEINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPRODUCTPRICEINVALID);
            setPRODUCTPRICEINVALID(refVal_setPRODUCTPRICEINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LINK_FORMAT_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LINK_FORMAT_INVALID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLINKFORMATINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLINKFORMATINVALID);
            setLINKFORMATINVALID(refVal_setLINKFORMATINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("PARSE_LINE_ERROR"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("PARSE_LINE_ERROR")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPARSELINEERROR;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPARSELINEERROR);
            setPARSELINEERROR(refVal_setPARSELINEERROR);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ADWORDS_FORMAT_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ADWORDS_FORMAT_INVALID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setADWORDSFORMATINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setADWORDSFORMATINVALID);
            setADWORDSFORMATINVALID(refVal_setADWORDSFORMATINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("INTERNAL_SERVICE_ERROR"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("INTERNAL_SERVICE_ERROR")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setINTERNALSERVICEERROR;
            ok &= ModelBase::fromJson(fieldValue, refVal_setINTERNALSERVICEERROR);
            setINTERNALSERVICEERROR(refVal_setINTERNALSERVICEERROR);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("NO_VERIFIED_DOMAIN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("NO_VERIFIED_DOMAIN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setNOVERIFIEDDOMAIN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNOVERIFIEDDOMAIN);
            setNOVERIFIEDDOMAIN(refVal_setNOVERIFIEDDOMAIN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ADULT_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ADULT_INVALID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setADULTINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setADULTINVALID);
            setADULTINVALID(refVal_setADULTINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("IMAGE_LINK_LENGTH_TOO_LONG"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("IMAGE_LINK_LENGTH_TOO_LONG")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setIMAGELINKLENGTHTOOLONG;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIMAGELINKLENGTHTOOLONG);
            setIMAGELINKLENGTHTOOLONG(refVal_setIMAGELINKLENGTHTOOLONG);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("INVALID_DOMAIN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("INVALID_DOMAIN")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setINVALIDDOMAIN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setINVALIDDOMAIN);
            setINVALIDDOMAIN(refVal_setINVALIDDOMAIN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("FEED_LENGTH_TOO_LONG"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("FEED_LENGTH_TOO_LONG")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFEEDLENGTHTOOLONG;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFEEDLENGTHTOOLONG);
            setFEEDLENGTHTOOLONG(refVal_setFEEDLENGTHTOOLONG);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LINK_LENGTH_TOO_LONG"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LINK_LENGTH_TOO_LONG")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLINKLENGTHTOOLONG;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLINKLENGTHTOOLONG);
            setLINKLENGTHTOOLONG(refVal_setLINKLENGTHTOOLONG);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MALFORMED_XML"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MALFORMED_XML")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMALFORMEDXML;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMALFORMEDXML);
            setMALFORMEDXML(refVal_setMALFORMEDXML);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("PRICE_MISSING"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("PRICE_MISSING")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPRICEMISSING;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPRICEMISSING);
            setPRICEMISSING(refVal_setPRICEMISSING);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("FEED_TOO_SMALL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("FEED_TOO_SMALL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFEEDTOOSMALL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFEEDTOOSMALL);
            setFEEDTOOSMALL(refVal_setFEEDTOOSMALL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMAXITEMSPERITEMGROUPEXCEEDED;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMAXITEMSPERITEMGROUPEXCEEDED);
            setMAXITEMSPERITEMGROUPEXCEEDED(refVal_setMAXITEMSPERITEMGROUPEXCEEDED);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setITEMMAINIMAGEDOWNLOADFAILURE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setITEMMAINIMAGEDOWNLOADFAILURE);
            setITEMMAINIMAGEDOWNLOADFAILURE(refVal_setITEMMAINIMAGEDOWNLOADFAILURE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("PINJOIN_CONTENT_UNSAFE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("PINJOIN_CONTENT_UNSAFE")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPINJOINCONTENTUNSAFE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPINJOINCONTENTUNSAFE);
            setPINJOINCONTENTUNSAFE(refVal_setPINJOINCONTENTUNSAFE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("BLOCKLISTED_IMAGE_SIGNATURE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("BLOCKLISTED_IMAGE_SIGNATURE")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBLOCKLISTEDIMAGESIGNATURE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBLOCKLISTEDIMAGESIGNATURE);
            setBLOCKLISTEDIMAGESIGNATURE(refVal_setBLOCKLISTEDIMAGESIGNATURE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LIST_PRICE_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LIST_PRICE_INVALID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLISTPRICEINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLISTPRICEINVALID);
            setLISTPRICEINVALID(refVal_setLISTPRICEINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("PRICE_CANNOT_BE_DETERMINED"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("PRICE_CANNOT_BE_DETERMINED")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPRICECANNOTBEDETERMINED;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPRICECANNOTBEDETERMINED);
            setPRICECANNOTBEDETERMINED(refVal_setPRICECANNOTBEDETERMINED);
        }
    }
    return ok;
}

void CatalogsFeedValidationErrors::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_FETCH_ERRORIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("FETCH_ERROR")), m_FETCH_ERROR));
    }
    if(m_FETCH_INACTIVE_FEED_ERRORIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("FETCH_INACTIVE_FEED_ERROR")), m_FETCH_INACTIVE_FEED_ERROR));
    }
    if(m_ENCODING_ERRORIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ENCODING_ERROR")), m_ENCODING_ERROR));
    }
    if(m_DELIMITER_ERRORIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("DELIMITER_ERROR")), m_DELIMITER_ERROR));
    }
    if(m_REQUIRED_COLUMNS_MISSINGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("REQUIRED_COLUMNS_MISSING")), m_REQUIRED_COLUMNS_MISSING));
    }
    if(m_DUPLICATE_PRODUCTSIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("DUPLICATE_PRODUCTS")), m_DUPLICATE_PRODUCTS));
    }
    if(m_IMAGE_LINK_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("IMAGE_LINK_INVALID")), m_IMAGE_LINK_INVALID));
    }
    if(m_ITEMID_MISSINGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ITEMID_MISSING")), m_ITEMID_MISSING));
    }
    if(m_TITLE_MISSINGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("TITLE_MISSING")), m_TITLE_MISSING));
    }
    if(m_DESCRIPTION_MISSINGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("DESCRIPTION_MISSING")), m_DESCRIPTION_MISSING));
    }
    if(m_PRODUCT_LINK_MISSINGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("PRODUCT_LINK_MISSING")), m_PRODUCT_LINK_MISSING));
    }
    if(m_IMAGE_LINK_MISSINGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("IMAGE_LINK_MISSING")), m_IMAGE_LINK_MISSING));
    }
    if(m_AVAILABILITY_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("AVAILABILITY_INVALID")), m_AVAILABILITY_INVALID));
    }
    if(m_PRODUCT_PRICE_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("PRODUCT_PRICE_INVALID")), m_PRODUCT_PRICE_INVALID));
    }
    if(m_LINK_FORMAT_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LINK_FORMAT_INVALID")), m_LINK_FORMAT_INVALID));
    }
    if(m_PARSE_LINE_ERRORIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("PARSE_LINE_ERROR")), m_PARSE_LINE_ERROR));
    }
    if(m_ADWORDS_FORMAT_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ADWORDS_FORMAT_INVALID")), m_ADWORDS_FORMAT_INVALID));
    }
    if(m_INTERNAL_SERVICE_ERRORIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("INTERNAL_SERVICE_ERROR")), m_INTERNAL_SERVICE_ERROR));
    }
    if(m_NO_VERIFIED_DOMAINIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("NO_VERIFIED_DOMAIN")), m_NO_VERIFIED_DOMAIN));
    }
    if(m_ADULT_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ADULT_INVALID")), m_ADULT_INVALID));
    }
    if(m_IMAGE_LINK_LENGTH_TOO_LONGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("IMAGE_LINK_LENGTH_TOO_LONG")), m_IMAGE_LINK_LENGTH_TOO_LONG));
    }
    if(m_INVALID_DOMAINIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("INVALID_DOMAIN")), m_INVALID_DOMAIN));
    }
    if(m_FEED_LENGTH_TOO_LONGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("FEED_LENGTH_TOO_LONG")), m_FEED_LENGTH_TOO_LONG));
    }
    if(m_LINK_LENGTH_TOO_LONGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LINK_LENGTH_TOO_LONG")), m_LINK_LENGTH_TOO_LONG));
    }
    if(m_MALFORMED_XMLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MALFORMED_XML")), m_MALFORMED_XML));
    }
    if(m_PRICE_MISSINGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("PRICE_MISSING")), m_PRICE_MISSING));
    }
    if(m_FEED_TOO_SMALLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("FEED_TOO_SMALL")), m_FEED_TOO_SMALL));
    }
    if(m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDEDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED")), m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED));
    }
    if(m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILUREIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE")), m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE));
    }
    if(m_PINJOIN_CONTENT_UNSAFEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("PINJOIN_CONTENT_UNSAFE")), m_PINJOIN_CONTENT_UNSAFE));
    }
    if(m_BLOCKLISTED_IMAGE_SIGNATUREIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("BLOCKLISTED_IMAGE_SIGNATURE")), m_BLOCKLISTED_IMAGE_SIGNATURE));
    }
    if(m_LIST_PRICE_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LIST_PRICE_INVALID")), m_LIST_PRICE_INVALID));
    }
    if(m_PRICE_CANNOT_BE_DETERMINEDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("PRICE_CANNOT_BE_DETERMINED")), m_PRICE_CANNOT_BE_DETERMINED));
    }
}

bool CatalogsFeedValidationErrors::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("FETCH_ERROR"))))
    {
        int32_t refVal_setFETCHERROR;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("FETCH_ERROR"))), refVal_setFETCHERROR );
        setFETCHERROR(refVal_setFETCHERROR);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("FETCH_INACTIVE_FEED_ERROR"))))
    {
        int32_t refVal_setFETCHINACTIVEFEEDERROR;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("FETCH_INACTIVE_FEED_ERROR"))), refVal_setFETCHINACTIVEFEEDERROR );
        setFETCHINACTIVEFEEDERROR(refVal_setFETCHINACTIVEFEEDERROR);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ENCODING_ERROR"))))
    {
        int32_t refVal_setENCODINGERROR;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ENCODING_ERROR"))), refVal_setENCODINGERROR );
        setENCODINGERROR(refVal_setENCODINGERROR);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("DELIMITER_ERROR"))))
    {
        int32_t refVal_setDELIMITERERROR;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("DELIMITER_ERROR"))), refVal_setDELIMITERERROR );
        setDELIMITERERROR(refVal_setDELIMITERERROR);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("REQUIRED_COLUMNS_MISSING"))))
    {
        int32_t refVal_setREQUIREDCOLUMNSMISSING;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("REQUIRED_COLUMNS_MISSING"))), refVal_setREQUIREDCOLUMNSMISSING );
        setREQUIREDCOLUMNSMISSING(refVal_setREQUIREDCOLUMNSMISSING);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("DUPLICATE_PRODUCTS"))))
    {
        int32_t refVal_setDUPLICATEPRODUCTS;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("DUPLICATE_PRODUCTS"))), refVal_setDUPLICATEPRODUCTS );
        setDUPLICATEPRODUCTS(refVal_setDUPLICATEPRODUCTS);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("IMAGE_LINK_INVALID"))))
    {
        int32_t refVal_setIMAGELINKINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("IMAGE_LINK_INVALID"))), refVal_setIMAGELINKINVALID );
        setIMAGELINKINVALID(refVal_setIMAGELINKINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ITEMID_MISSING"))))
    {
        int32_t refVal_setITEMIDMISSING;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ITEMID_MISSING"))), refVal_setITEMIDMISSING );
        setITEMIDMISSING(refVal_setITEMIDMISSING);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("TITLE_MISSING"))))
    {
        int32_t refVal_setTITLEMISSING;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("TITLE_MISSING"))), refVal_setTITLEMISSING );
        setTITLEMISSING(refVal_setTITLEMISSING);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("DESCRIPTION_MISSING"))))
    {
        int32_t refVal_setDESCRIPTIONMISSING;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("DESCRIPTION_MISSING"))), refVal_setDESCRIPTIONMISSING );
        setDESCRIPTIONMISSING(refVal_setDESCRIPTIONMISSING);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("PRODUCT_LINK_MISSING"))))
    {
        int32_t refVal_setPRODUCTLINKMISSING;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("PRODUCT_LINK_MISSING"))), refVal_setPRODUCTLINKMISSING );
        setPRODUCTLINKMISSING(refVal_setPRODUCTLINKMISSING);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("IMAGE_LINK_MISSING"))))
    {
        int32_t refVal_setIMAGELINKMISSING;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("IMAGE_LINK_MISSING"))), refVal_setIMAGELINKMISSING );
        setIMAGELINKMISSING(refVal_setIMAGELINKMISSING);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("AVAILABILITY_INVALID"))))
    {
        int32_t refVal_setAVAILABILITYINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("AVAILABILITY_INVALID"))), refVal_setAVAILABILITYINVALID );
        setAVAILABILITYINVALID(refVal_setAVAILABILITYINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("PRODUCT_PRICE_INVALID"))))
    {
        int32_t refVal_setPRODUCTPRICEINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("PRODUCT_PRICE_INVALID"))), refVal_setPRODUCTPRICEINVALID );
        setPRODUCTPRICEINVALID(refVal_setPRODUCTPRICEINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LINK_FORMAT_INVALID"))))
    {
        int32_t refVal_setLINKFORMATINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LINK_FORMAT_INVALID"))), refVal_setLINKFORMATINVALID );
        setLINKFORMATINVALID(refVal_setLINKFORMATINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("PARSE_LINE_ERROR"))))
    {
        int32_t refVal_setPARSELINEERROR;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("PARSE_LINE_ERROR"))), refVal_setPARSELINEERROR );
        setPARSELINEERROR(refVal_setPARSELINEERROR);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ADWORDS_FORMAT_INVALID"))))
    {
        int32_t refVal_setADWORDSFORMATINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ADWORDS_FORMAT_INVALID"))), refVal_setADWORDSFORMATINVALID );
        setADWORDSFORMATINVALID(refVal_setADWORDSFORMATINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("INTERNAL_SERVICE_ERROR"))))
    {
        int32_t refVal_setINTERNALSERVICEERROR;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("INTERNAL_SERVICE_ERROR"))), refVal_setINTERNALSERVICEERROR );
        setINTERNALSERVICEERROR(refVal_setINTERNALSERVICEERROR);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("NO_VERIFIED_DOMAIN"))))
    {
        int32_t refVal_setNOVERIFIEDDOMAIN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("NO_VERIFIED_DOMAIN"))), refVal_setNOVERIFIEDDOMAIN );
        setNOVERIFIEDDOMAIN(refVal_setNOVERIFIEDDOMAIN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ADULT_INVALID"))))
    {
        int32_t refVal_setADULTINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ADULT_INVALID"))), refVal_setADULTINVALID );
        setADULTINVALID(refVal_setADULTINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("IMAGE_LINK_LENGTH_TOO_LONG"))))
    {
        int32_t refVal_setIMAGELINKLENGTHTOOLONG;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("IMAGE_LINK_LENGTH_TOO_LONG"))), refVal_setIMAGELINKLENGTHTOOLONG );
        setIMAGELINKLENGTHTOOLONG(refVal_setIMAGELINKLENGTHTOOLONG);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("INVALID_DOMAIN"))))
    {
        int32_t refVal_setINVALIDDOMAIN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("INVALID_DOMAIN"))), refVal_setINVALIDDOMAIN );
        setINVALIDDOMAIN(refVal_setINVALIDDOMAIN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("FEED_LENGTH_TOO_LONG"))))
    {
        int32_t refVal_setFEEDLENGTHTOOLONG;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("FEED_LENGTH_TOO_LONG"))), refVal_setFEEDLENGTHTOOLONG );
        setFEEDLENGTHTOOLONG(refVal_setFEEDLENGTHTOOLONG);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LINK_LENGTH_TOO_LONG"))))
    {
        int32_t refVal_setLINKLENGTHTOOLONG;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LINK_LENGTH_TOO_LONG"))), refVal_setLINKLENGTHTOOLONG );
        setLINKLENGTHTOOLONG(refVal_setLINKLENGTHTOOLONG);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MALFORMED_XML"))))
    {
        int32_t refVal_setMALFORMEDXML;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MALFORMED_XML"))), refVal_setMALFORMEDXML );
        setMALFORMEDXML(refVal_setMALFORMEDXML);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("PRICE_MISSING"))))
    {
        int32_t refVal_setPRICEMISSING;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("PRICE_MISSING"))), refVal_setPRICEMISSING );
        setPRICEMISSING(refVal_setPRICEMISSING);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("FEED_TOO_SMALL"))))
    {
        int32_t refVal_setFEEDTOOSMALL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("FEED_TOO_SMALL"))), refVal_setFEEDTOOSMALL );
        setFEEDTOOSMALL(refVal_setFEEDTOOSMALL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED"))))
    {
        int32_t refVal_setMAXITEMSPERITEMGROUPEXCEEDED;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED"))), refVal_setMAXITEMSPERITEMGROUPEXCEEDED );
        setMAXITEMSPERITEMGROUPEXCEEDED(refVal_setMAXITEMSPERITEMGROUPEXCEEDED);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE"))))
    {
        int32_t refVal_setITEMMAINIMAGEDOWNLOADFAILURE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE"))), refVal_setITEMMAINIMAGEDOWNLOADFAILURE );
        setITEMMAINIMAGEDOWNLOADFAILURE(refVal_setITEMMAINIMAGEDOWNLOADFAILURE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("PINJOIN_CONTENT_UNSAFE"))))
    {
        int32_t refVal_setPINJOINCONTENTUNSAFE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("PINJOIN_CONTENT_UNSAFE"))), refVal_setPINJOINCONTENTUNSAFE );
        setPINJOINCONTENTUNSAFE(refVal_setPINJOINCONTENTUNSAFE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("BLOCKLISTED_IMAGE_SIGNATURE"))))
    {
        int32_t refVal_setBLOCKLISTEDIMAGESIGNATURE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("BLOCKLISTED_IMAGE_SIGNATURE"))), refVal_setBLOCKLISTEDIMAGESIGNATURE );
        setBLOCKLISTEDIMAGESIGNATURE(refVal_setBLOCKLISTEDIMAGESIGNATURE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LIST_PRICE_INVALID"))))
    {
        int32_t refVal_setLISTPRICEINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LIST_PRICE_INVALID"))), refVal_setLISTPRICEINVALID );
        setLISTPRICEINVALID(refVal_setLISTPRICEINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("PRICE_CANNOT_BE_DETERMINED"))))
    {
        int32_t refVal_setPRICECANNOTBEDETERMINED;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("PRICE_CANNOT_BE_DETERMINED"))), refVal_setPRICECANNOTBEDETERMINED );
        setPRICECANNOTBEDETERMINED(refVal_setPRICECANNOTBEDETERMINED);
    }
    return ok;
}

int32_t CatalogsFeedValidationErrors::getFETCHERROR() const
{
    return m_FETCH_ERROR;
}

void CatalogsFeedValidationErrors::setFETCHERROR(int32_t value)
{
    m_FETCH_ERROR = value;
    m_FETCH_ERRORIsSet = true;
}

bool CatalogsFeedValidationErrors::fETCHERRORIsSet() const
{
    return m_FETCH_ERRORIsSet;
}

void CatalogsFeedValidationErrors::unsetFETCH_ERROR()
{
    m_FETCH_ERRORIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getFETCHINACTIVEFEEDERROR() const
{
    return m_FETCH_INACTIVE_FEED_ERROR;
}

void CatalogsFeedValidationErrors::setFETCHINACTIVEFEEDERROR(int32_t value)
{
    m_FETCH_INACTIVE_FEED_ERROR = value;
    m_FETCH_INACTIVE_FEED_ERRORIsSet = true;
}

bool CatalogsFeedValidationErrors::fETCHINACTIVEFEEDERRORIsSet() const
{
    return m_FETCH_INACTIVE_FEED_ERRORIsSet;
}

void CatalogsFeedValidationErrors::unsetFETCH_INACTIVE_FEED_ERROR()
{
    m_FETCH_INACTIVE_FEED_ERRORIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getENCODINGERROR() const
{
    return m_ENCODING_ERROR;
}

void CatalogsFeedValidationErrors::setENCODINGERROR(int32_t value)
{
    m_ENCODING_ERROR = value;
    m_ENCODING_ERRORIsSet = true;
}

bool CatalogsFeedValidationErrors::eNCODINGERRORIsSet() const
{
    return m_ENCODING_ERRORIsSet;
}

void CatalogsFeedValidationErrors::unsetENCODING_ERROR()
{
    m_ENCODING_ERRORIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getDELIMITERERROR() const
{
    return m_DELIMITER_ERROR;
}

void CatalogsFeedValidationErrors::setDELIMITERERROR(int32_t value)
{
    m_DELIMITER_ERROR = value;
    m_DELIMITER_ERRORIsSet = true;
}

bool CatalogsFeedValidationErrors::dELIMITERERRORIsSet() const
{
    return m_DELIMITER_ERRORIsSet;
}

void CatalogsFeedValidationErrors::unsetDELIMITER_ERROR()
{
    m_DELIMITER_ERRORIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getREQUIREDCOLUMNSMISSING() const
{
    return m_REQUIRED_COLUMNS_MISSING;
}

void CatalogsFeedValidationErrors::setREQUIREDCOLUMNSMISSING(int32_t value)
{
    m_REQUIRED_COLUMNS_MISSING = value;
    m_REQUIRED_COLUMNS_MISSINGIsSet = true;
}

bool CatalogsFeedValidationErrors::rEQUIREDCOLUMNSMISSINGIsSet() const
{
    return m_REQUIRED_COLUMNS_MISSINGIsSet;
}

void CatalogsFeedValidationErrors::unsetREQUIRED_COLUMNS_MISSING()
{
    m_REQUIRED_COLUMNS_MISSINGIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getDUPLICATEPRODUCTS() const
{
    return m_DUPLICATE_PRODUCTS;
}

void CatalogsFeedValidationErrors::setDUPLICATEPRODUCTS(int32_t value)
{
    m_DUPLICATE_PRODUCTS = value;
    m_DUPLICATE_PRODUCTSIsSet = true;
}

bool CatalogsFeedValidationErrors::dUPLICATEPRODUCTSIsSet() const
{
    return m_DUPLICATE_PRODUCTSIsSet;
}

void CatalogsFeedValidationErrors::unsetDUPLICATE_PRODUCTS()
{
    m_DUPLICATE_PRODUCTSIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getIMAGELINKINVALID() const
{
    return m_IMAGE_LINK_INVALID;
}

void CatalogsFeedValidationErrors::setIMAGELINKINVALID(int32_t value)
{
    m_IMAGE_LINK_INVALID = value;
    m_IMAGE_LINK_INVALIDIsSet = true;
}

bool CatalogsFeedValidationErrors::iMAGELINKINVALIDIsSet() const
{
    return m_IMAGE_LINK_INVALIDIsSet;
}

void CatalogsFeedValidationErrors::unsetIMAGE_LINK_INVALID()
{
    m_IMAGE_LINK_INVALIDIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getITEMIDMISSING() const
{
    return m_ITEMID_MISSING;
}

void CatalogsFeedValidationErrors::setITEMIDMISSING(int32_t value)
{
    m_ITEMID_MISSING = value;
    m_ITEMID_MISSINGIsSet = true;
}

bool CatalogsFeedValidationErrors::iTEMIDMISSINGIsSet() const
{
    return m_ITEMID_MISSINGIsSet;
}

void CatalogsFeedValidationErrors::unsetITEMID_MISSING()
{
    m_ITEMID_MISSINGIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getTITLEMISSING() const
{
    return m_TITLE_MISSING;
}

void CatalogsFeedValidationErrors::setTITLEMISSING(int32_t value)
{
    m_TITLE_MISSING = value;
    m_TITLE_MISSINGIsSet = true;
}

bool CatalogsFeedValidationErrors::tITLEMISSINGIsSet() const
{
    return m_TITLE_MISSINGIsSet;
}

void CatalogsFeedValidationErrors::unsetTITLE_MISSING()
{
    m_TITLE_MISSINGIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getDESCRIPTIONMISSING() const
{
    return m_DESCRIPTION_MISSING;
}

void CatalogsFeedValidationErrors::setDESCRIPTIONMISSING(int32_t value)
{
    m_DESCRIPTION_MISSING = value;
    m_DESCRIPTION_MISSINGIsSet = true;
}

bool CatalogsFeedValidationErrors::dESCRIPTIONMISSINGIsSet() const
{
    return m_DESCRIPTION_MISSINGIsSet;
}

void CatalogsFeedValidationErrors::unsetDESCRIPTION_MISSING()
{
    m_DESCRIPTION_MISSINGIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getPRODUCTLINKMISSING() const
{
    return m_PRODUCT_LINK_MISSING;
}

void CatalogsFeedValidationErrors::setPRODUCTLINKMISSING(int32_t value)
{
    m_PRODUCT_LINK_MISSING = value;
    m_PRODUCT_LINK_MISSINGIsSet = true;
}

bool CatalogsFeedValidationErrors::pRODUCTLINKMISSINGIsSet() const
{
    return m_PRODUCT_LINK_MISSINGIsSet;
}

void CatalogsFeedValidationErrors::unsetPRODUCT_LINK_MISSING()
{
    m_PRODUCT_LINK_MISSINGIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getIMAGELINKMISSING() const
{
    return m_IMAGE_LINK_MISSING;
}

void CatalogsFeedValidationErrors::setIMAGELINKMISSING(int32_t value)
{
    m_IMAGE_LINK_MISSING = value;
    m_IMAGE_LINK_MISSINGIsSet = true;
}

bool CatalogsFeedValidationErrors::iMAGELINKMISSINGIsSet() const
{
    return m_IMAGE_LINK_MISSINGIsSet;
}

void CatalogsFeedValidationErrors::unsetIMAGE_LINK_MISSING()
{
    m_IMAGE_LINK_MISSINGIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getAVAILABILITYINVALID() const
{
    return m_AVAILABILITY_INVALID;
}

void CatalogsFeedValidationErrors::setAVAILABILITYINVALID(int32_t value)
{
    m_AVAILABILITY_INVALID = value;
    m_AVAILABILITY_INVALIDIsSet = true;
}

bool CatalogsFeedValidationErrors::aVAILABILITYINVALIDIsSet() const
{
    return m_AVAILABILITY_INVALIDIsSet;
}

void CatalogsFeedValidationErrors::unsetAVAILABILITY_INVALID()
{
    m_AVAILABILITY_INVALIDIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getPRODUCTPRICEINVALID() const
{
    return m_PRODUCT_PRICE_INVALID;
}

void CatalogsFeedValidationErrors::setPRODUCTPRICEINVALID(int32_t value)
{
    m_PRODUCT_PRICE_INVALID = value;
    m_PRODUCT_PRICE_INVALIDIsSet = true;
}

bool CatalogsFeedValidationErrors::pRODUCTPRICEINVALIDIsSet() const
{
    return m_PRODUCT_PRICE_INVALIDIsSet;
}

void CatalogsFeedValidationErrors::unsetPRODUCT_PRICE_INVALID()
{
    m_PRODUCT_PRICE_INVALIDIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getLINKFORMATINVALID() const
{
    return m_LINK_FORMAT_INVALID;
}

void CatalogsFeedValidationErrors::setLINKFORMATINVALID(int32_t value)
{
    m_LINK_FORMAT_INVALID = value;
    m_LINK_FORMAT_INVALIDIsSet = true;
}

bool CatalogsFeedValidationErrors::lINKFORMATINVALIDIsSet() const
{
    return m_LINK_FORMAT_INVALIDIsSet;
}

void CatalogsFeedValidationErrors::unsetLINK_FORMAT_INVALID()
{
    m_LINK_FORMAT_INVALIDIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getPARSELINEERROR() const
{
    return m_PARSE_LINE_ERROR;
}

void CatalogsFeedValidationErrors::setPARSELINEERROR(int32_t value)
{
    m_PARSE_LINE_ERROR = value;
    m_PARSE_LINE_ERRORIsSet = true;
}

bool CatalogsFeedValidationErrors::pARSELINEERRORIsSet() const
{
    return m_PARSE_LINE_ERRORIsSet;
}

void CatalogsFeedValidationErrors::unsetPARSE_LINE_ERROR()
{
    m_PARSE_LINE_ERRORIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getADWORDSFORMATINVALID() const
{
    return m_ADWORDS_FORMAT_INVALID;
}

void CatalogsFeedValidationErrors::setADWORDSFORMATINVALID(int32_t value)
{
    m_ADWORDS_FORMAT_INVALID = value;
    m_ADWORDS_FORMAT_INVALIDIsSet = true;
}

bool CatalogsFeedValidationErrors::aDWORDSFORMATINVALIDIsSet() const
{
    return m_ADWORDS_FORMAT_INVALIDIsSet;
}

void CatalogsFeedValidationErrors::unsetADWORDS_FORMAT_INVALID()
{
    m_ADWORDS_FORMAT_INVALIDIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getINTERNALSERVICEERROR() const
{
    return m_INTERNAL_SERVICE_ERROR;
}

void CatalogsFeedValidationErrors::setINTERNALSERVICEERROR(int32_t value)
{
    m_INTERNAL_SERVICE_ERROR = value;
    m_INTERNAL_SERVICE_ERRORIsSet = true;
}

bool CatalogsFeedValidationErrors::iNTERNALSERVICEERRORIsSet() const
{
    return m_INTERNAL_SERVICE_ERRORIsSet;
}

void CatalogsFeedValidationErrors::unsetINTERNAL_SERVICE_ERROR()
{
    m_INTERNAL_SERVICE_ERRORIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getNOVERIFIEDDOMAIN() const
{
    return m_NO_VERIFIED_DOMAIN;
}

void CatalogsFeedValidationErrors::setNOVERIFIEDDOMAIN(int32_t value)
{
    m_NO_VERIFIED_DOMAIN = value;
    m_NO_VERIFIED_DOMAINIsSet = true;
}

bool CatalogsFeedValidationErrors::nOVERIFIEDDOMAINIsSet() const
{
    return m_NO_VERIFIED_DOMAINIsSet;
}

void CatalogsFeedValidationErrors::unsetNO_VERIFIED_DOMAIN()
{
    m_NO_VERIFIED_DOMAINIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getADULTINVALID() const
{
    return m_ADULT_INVALID;
}

void CatalogsFeedValidationErrors::setADULTINVALID(int32_t value)
{
    m_ADULT_INVALID = value;
    m_ADULT_INVALIDIsSet = true;
}

bool CatalogsFeedValidationErrors::aDULTINVALIDIsSet() const
{
    return m_ADULT_INVALIDIsSet;
}

void CatalogsFeedValidationErrors::unsetADULT_INVALID()
{
    m_ADULT_INVALIDIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getIMAGELINKLENGTHTOOLONG() const
{
    return m_IMAGE_LINK_LENGTH_TOO_LONG;
}

void CatalogsFeedValidationErrors::setIMAGELINKLENGTHTOOLONG(int32_t value)
{
    m_IMAGE_LINK_LENGTH_TOO_LONG = value;
    m_IMAGE_LINK_LENGTH_TOO_LONGIsSet = true;
}

bool CatalogsFeedValidationErrors::iMAGELINKLENGTHTOOLONGIsSet() const
{
    return m_IMAGE_LINK_LENGTH_TOO_LONGIsSet;
}

void CatalogsFeedValidationErrors::unsetIMAGE_LINK_LENGTH_TOO_LONG()
{
    m_IMAGE_LINK_LENGTH_TOO_LONGIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getINVALIDDOMAIN() const
{
    return m_INVALID_DOMAIN;
}

void CatalogsFeedValidationErrors::setINVALIDDOMAIN(int32_t value)
{
    m_INVALID_DOMAIN = value;
    m_INVALID_DOMAINIsSet = true;
}

bool CatalogsFeedValidationErrors::iNVALIDDOMAINIsSet() const
{
    return m_INVALID_DOMAINIsSet;
}

void CatalogsFeedValidationErrors::unsetINVALID_DOMAIN()
{
    m_INVALID_DOMAINIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getFEEDLENGTHTOOLONG() const
{
    return m_FEED_LENGTH_TOO_LONG;
}

void CatalogsFeedValidationErrors::setFEEDLENGTHTOOLONG(int32_t value)
{
    m_FEED_LENGTH_TOO_LONG = value;
    m_FEED_LENGTH_TOO_LONGIsSet = true;
}

bool CatalogsFeedValidationErrors::fEEDLENGTHTOOLONGIsSet() const
{
    return m_FEED_LENGTH_TOO_LONGIsSet;
}

void CatalogsFeedValidationErrors::unsetFEED_LENGTH_TOO_LONG()
{
    m_FEED_LENGTH_TOO_LONGIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getLINKLENGTHTOOLONG() const
{
    return m_LINK_LENGTH_TOO_LONG;
}

void CatalogsFeedValidationErrors::setLINKLENGTHTOOLONG(int32_t value)
{
    m_LINK_LENGTH_TOO_LONG = value;
    m_LINK_LENGTH_TOO_LONGIsSet = true;
}

bool CatalogsFeedValidationErrors::lINKLENGTHTOOLONGIsSet() const
{
    return m_LINK_LENGTH_TOO_LONGIsSet;
}

void CatalogsFeedValidationErrors::unsetLINK_LENGTH_TOO_LONG()
{
    m_LINK_LENGTH_TOO_LONGIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getMALFORMEDXML() const
{
    return m_MALFORMED_XML;
}

void CatalogsFeedValidationErrors::setMALFORMEDXML(int32_t value)
{
    m_MALFORMED_XML = value;
    m_MALFORMED_XMLIsSet = true;
}

bool CatalogsFeedValidationErrors::mALFORMEDXMLIsSet() const
{
    return m_MALFORMED_XMLIsSet;
}

void CatalogsFeedValidationErrors::unsetMALFORMED_XML()
{
    m_MALFORMED_XMLIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getPRICEMISSING() const
{
    return m_PRICE_MISSING;
}

void CatalogsFeedValidationErrors::setPRICEMISSING(int32_t value)
{
    m_PRICE_MISSING = value;
    m_PRICE_MISSINGIsSet = true;
}

bool CatalogsFeedValidationErrors::pRICEMISSINGIsSet() const
{
    return m_PRICE_MISSINGIsSet;
}

void CatalogsFeedValidationErrors::unsetPRICE_MISSING()
{
    m_PRICE_MISSINGIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getFEEDTOOSMALL() const
{
    return m_FEED_TOO_SMALL;
}

void CatalogsFeedValidationErrors::setFEEDTOOSMALL(int32_t value)
{
    m_FEED_TOO_SMALL = value;
    m_FEED_TOO_SMALLIsSet = true;
}

bool CatalogsFeedValidationErrors::fEEDTOOSMALLIsSet() const
{
    return m_FEED_TOO_SMALLIsSet;
}

void CatalogsFeedValidationErrors::unsetFEED_TOO_SMALL()
{
    m_FEED_TOO_SMALLIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getMAXITEMSPERITEMGROUPEXCEEDED() const
{
    return m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED;
}

void CatalogsFeedValidationErrors::setMAXITEMSPERITEMGROUPEXCEEDED(int32_t value)
{
    m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED = value;
    m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDEDIsSet = true;
}

bool CatalogsFeedValidationErrors::mAXITEMSPERITEMGROUPEXCEEDEDIsSet() const
{
    return m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDEDIsSet;
}

void CatalogsFeedValidationErrors::unsetMAX_ITEMS_PER_ITEM_GROUP_EXCEEDED()
{
    m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDEDIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getITEMMAINIMAGEDOWNLOADFAILURE() const
{
    return m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE;
}

void CatalogsFeedValidationErrors::setITEMMAINIMAGEDOWNLOADFAILURE(int32_t value)
{
    m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE = value;
    m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILUREIsSet = true;
}

bool CatalogsFeedValidationErrors::iTEMMAINIMAGEDOWNLOADFAILUREIsSet() const
{
    return m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILUREIsSet;
}

void CatalogsFeedValidationErrors::unsetITEM_MAIN_IMAGE_DOWNLOAD_FAILURE()
{
    m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILUREIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getPINJOINCONTENTUNSAFE() const
{
    return m_PINJOIN_CONTENT_UNSAFE;
}

void CatalogsFeedValidationErrors::setPINJOINCONTENTUNSAFE(int32_t value)
{
    m_PINJOIN_CONTENT_UNSAFE = value;
    m_PINJOIN_CONTENT_UNSAFEIsSet = true;
}

bool CatalogsFeedValidationErrors::pINJOINCONTENTUNSAFEIsSet() const
{
    return m_PINJOIN_CONTENT_UNSAFEIsSet;
}

void CatalogsFeedValidationErrors::unsetPINJOIN_CONTENT_UNSAFE()
{
    m_PINJOIN_CONTENT_UNSAFEIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getBLOCKLISTEDIMAGESIGNATURE() const
{
    return m_BLOCKLISTED_IMAGE_SIGNATURE;
}

void CatalogsFeedValidationErrors::setBLOCKLISTEDIMAGESIGNATURE(int32_t value)
{
    m_BLOCKLISTED_IMAGE_SIGNATURE = value;
    m_BLOCKLISTED_IMAGE_SIGNATUREIsSet = true;
}

bool CatalogsFeedValidationErrors::bLOCKLISTEDIMAGESIGNATUREIsSet() const
{
    return m_BLOCKLISTED_IMAGE_SIGNATUREIsSet;
}

void CatalogsFeedValidationErrors::unsetBLOCKLISTED_IMAGE_SIGNATURE()
{
    m_BLOCKLISTED_IMAGE_SIGNATUREIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getLISTPRICEINVALID() const
{
    return m_LIST_PRICE_INVALID;
}

void CatalogsFeedValidationErrors::setLISTPRICEINVALID(int32_t value)
{
    m_LIST_PRICE_INVALID = value;
    m_LIST_PRICE_INVALIDIsSet = true;
}

bool CatalogsFeedValidationErrors::lISTPRICEINVALIDIsSet() const
{
    return m_LIST_PRICE_INVALIDIsSet;
}

void CatalogsFeedValidationErrors::unsetLIST_PRICE_INVALID()
{
    m_LIST_PRICE_INVALIDIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getPRICECANNOTBEDETERMINED() const
{
    return m_PRICE_CANNOT_BE_DETERMINED;
}

void CatalogsFeedValidationErrors::setPRICECANNOTBEDETERMINED(int32_t value)
{
    m_PRICE_CANNOT_BE_DETERMINED = value;
    m_PRICE_CANNOT_BE_DETERMINEDIsSet = true;
}

bool CatalogsFeedValidationErrors::pRICECANNOTBEDETERMINEDIsSet() const
{
    return m_PRICE_CANNOT_BE_DETERMINEDIsSet;
}

void CatalogsFeedValidationErrors::unsetPRICE_CANNOT_BE_DETERMINED()
{
    m_PRICE_CANNOT_BE_DETERMINEDIsSet = false;
}
}
}
}
}


