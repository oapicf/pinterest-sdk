/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SharedAudienceAccount.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



SharedAudienceAccount::SharedAudienceAccount()
{
    m_Account_id = utility::conversions::to_string_t("");
    m_Account_idIsSet = false;
    m_Account_name = utility::conversions::to_string_t("");
    m_Account_nameIsSet = false;
    m_Account_type = utility::conversions::to_string_t("");
    m_Account_typeIsSet = false;
    m_Shared_on_timestamp = 0;
    m_Shared_on_timestampIsSet = false;
}

SharedAudienceAccount::~SharedAudienceAccount()
{
}

void SharedAudienceAccount::validate()
{
    // TODO: implement validation
}

web::json::value SharedAudienceAccount::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Account_idIsSet)
    {
        val[utility::conversions::to_string_t(U("account_id"))] = ModelBase::toJson(m_Account_id);
    }
    if(m_Account_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("account_name"))] = ModelBase::toJson(m_Account_name);
    }
    if(m_Account_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("account_type"))] = ModelBase::toJson(m_Account_type);
    }
    if(m_Shared_on_timestampIsSet)
    {
        val[utility::conversions::to_string_t(U("shared_on_timestamp"))] = ModelBase::toJson(m_Shared_on_timestamp);
    }

    return val;
}

bool SharedAudienceAccount::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("account_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("account_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAccountId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccountId);
            setAccountId(refVal_setAccountId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("account_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("account_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAccountName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccountName);
            setAccountName(refVal_setAccountName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("account_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("account_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAccountType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccountType);
            setAccountType(refVal_setAccountType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shared_on_timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shared_on_timestamp")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSharedOnTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSharedOnTimestamp);
            setSharedOnTimestamp(refVal_setSharedOnTimestamp);
        }
    }
    return ok;
}

void SharedAudienceAccount::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Account_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("account_id")), m_Account_id));
    }
    if(m_Account_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("account_name")), m_Account_name));
    }
    if(m_Account_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("account_type")), m_Account_type));
    }
    if(m_Shared_on_timestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shared_on_timestamp")), m_Shared_on_timestamp));
    }
}

bool SharedAudienceAccount::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("account_id"))))
    {
        utility::string_t refVal_setAccountId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("account_id"))), refVal_setAccountId );
        setAccountId(refVal_setAccountId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("account_name"))))
    {
        utility::string_t refVal_setAccountName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("account_name"))), refVal_setAccountName );
        setAccountName(refVal_setAccountName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("account_type"))))
    {
        utility::string_t refVal_setAccountType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("account_type"))), refVal_setAccountType );
        setAccountType(refVal_setAccountType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shared_on_timestamp"))))
    {
        int32_t refVal_setSharedOnTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shared_on_timestamp"))), refVal_setSharedOnTimestamp );
        setSharedOnTimestamp(refVal_setSharedOnTimestamp);
    }
    return ok;
}

utility::string_t SharedAudienceAccount::getAccountId() const
{
    return m_Account_id;
}

void SharedAudienceAccount::setAccountId(const utility::string_t& value)
{
    m_Account_id = value;
    m_Account_idIsSet = true;
}

bool SharedAudienceAccount::accountIdIsSet() const
{
    return m_Account_idIsSet;
}

void SharedAudienceAccount::unsetAccount_id()
{
    m_Account_idIsSet = false;
}
utility::string_t SharedAudienceAccount::getAccountName() const
{
    return m_Account_name;
}

void SharedAudienceAccount::setAccountName(const utility::string_t& value)
{
    m_Account_name = value;
    m_Account_nameIsSet = true;
}

bool SharedAudienceAccount::accountNameIsSet() const
{
    return m_Account_nameIsSet;
}

void SharedAudienceAccount::unsetAccount_name()
{
    m_Account_nameIsSet = false;
}
utility::string_t SharedAudienceAccount::getAccountType() const
{
    return m_Account_type;
}

void SharedAudienceAccount::setAccountType(const utility::string_t& value)
{
    m_Account_type = value;
    m_Account_typeIsSet = true;
}

bool SharedAudienceAccount::accountTypeIsSet() const
{
    return m_Account_typeIsSet;
}

void SharedAudienceAccount::unsetAccount_type()
{
    m_Account_typeIsSet = false;
}
int32_t SharedAudienceAccount::getSharedOnTimestamp() const
{
    return m_Shared_on_timestamp;
}

void SharedAudienceAccount::setSharedOnTimestamp(int32_t value)
{
    m_Shared_on_timestamp = value;
    m_Shared_on_timestampIsSet = true;
}

bool SharedAudienceAccount::sharedOnTimestampIsSet() const
{
    return m_Shared_on_timestampIsSet;
}

void SharedAudienceAccount::unsetShared_on_timestamp()
{
    m_Shared_on_timestampIsSet = false;
}
}
}
}
}


