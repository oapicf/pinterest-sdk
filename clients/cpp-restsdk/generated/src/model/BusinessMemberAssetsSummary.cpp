/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/BusinessMemberAssetsSummary.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



BusinessMemberAssetsSummary::BusinessMemberAssetsSummary()
{
    m_Ad_accountsIsSet = false;
    m_ProfilesIsSet = false;
}

BusinessMemberAssetsSummary::~BusinessMemberAssetsSummary()
{
}

void BusinessMemberAssetsSummary::validate()
{
    // TODO: implement validation
}

web::json::value BusinessMemberAssetsSummary::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Ad_accountsIsSet)
    {
        val[utility::conversions::to_string_t(U("ad_accounts"))] = ModelBase::toJson(m_Ad_accounts);
    }
    if(m_ProfilesIsSet)
    {
        val[utility::conversions::to_string_t(U("profiles"))] = ModelBase::toJson(m_Profiles);
    }

    return val;
}

bool BusinessMemberAssetsSummary::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("ad_accounts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ad_accounts")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BusinessMemberAssetsSummary_ad_accounts_inner>> refVal_setAdAccounts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdAccounts);
            setAdAccounts(refVal_setAdAccounts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("profiles"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("profiles")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BusinessMemberAssetsSummary_profiles_inner>> refVal_setProfiles;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProfiles);
            setProfiles(refVal_setProfiles);
        }
    }
    return ok;
}

void BusinessMemberAssetsSummary::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Ad_accountsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ad_accounts")), m_Ad_accounts));
    }
    if(m_ProfilesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("profiles")), m_Profiles));
    }
}

bool BusinessMemberAssetsSummary::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("ad_accounts"))))
    {
        std::vector<std::shared_ptr<BusinessMemberAssetsSummary_ad_accounts_inner>> refVal_setAdAccounts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ad_accounts"))), refVal_setAdAccounts );
        setAdAccounts(refVal_setAdAccounts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("profiles"))))
    {
        std::vector<std::shared_ptr<BusinessMemberAssetsSummary_profiles_inner>> refVal_setProfiles;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("profiles"))), refVal_setProfiles );
        setProfiles(refVal_setProfiles);
    }
    return ok;
}

std::vector<std::shared_ptr<BusinessMemberAssetsSummary_ad_accounts_inner>>& BusinessMemberAssetsSummary::getAdAccounts()
{
    return m_Ad_accounts;
}

void BusinessMemberAssetsSummary::setAdAccounts(const std::vector<std::shared_ptr<BusinessMemberAssetsSummary_ad_accounts_inner>>& value)
{
    m_Ad_accounts = value;
    m_Ad_accountsIsSet = true;
}

bool BusinessMemberAssetsSummary::adAccountsIsSet() const
{
    return m_Ad_accountsIsSet;
}

void BusinessMemberAssetsSummary::unsetAd_accounts()
{
    m_Ad_accountsIsSet = false;
}
std::vector<std::shared_ptr<BusinessMemberAssetsSummary_profiles_inner>>& BusinessMemberAssetsSummary::getProfiles()
{
    return m_Profiles;
}

void BusinessMemberAssetsSummary::setProfiles(const std::vector<std::shared_ptr<BusinessMemberAssetsSummary_profiles_inner>>& value)
{
    m_Profiles = value;
    m_ProfilesIsSet = true;
}

bool BusinessMemberAssetsSummary::profilesIsSet() const
{
    return m_ProfilesIsSet;
}

void BusinessMemberAssetsSummary::unsetProfiles()
{
    m_ProfilesIsSet = false;
}
}
}
}
}


