/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CatalogsFeedValidationWarnings.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CatalogsFeedValidationWarnings::CatalogsFeedValidationWarnings()
{
    m_AD_LINK_FORMAT_WARNING = 0;
    m_AD_LINK_FORMAT_WARNINGIsSet = false;
    m_AD_LINK_SAME_AS_LINK = 0;
    m_AD_LINK_SAME_AS_LINKIsSet = false;
    m_TITLE_LENGTH_TOO_LONG = 0;
    m_TITLE_LENGTH_TOO_LONGIsSet = false;
    m_DESCRIPTION_LENGTH_TOO_LONG = 0;
    m_DESCRIPTION_LENGTH_TOO_LONGIsSet = false;
    m_GENDER_INVALID = 0;
    m_GENDER_INVALIDIsSet = false;
    m_AGE_GROUP_INVALID = 0;
    m_AGE_GROUP_INVALIDIsSet = false;
    m_SIZE_TYPE_INVALID = 0;
    m_SIZE_TYPE_INVALIDIsSet = false;
    m_SIZE_SYSTEM_INVALID = 0;
    m_SIZE_SYSTEM_INVALIDIsSet = false;
    m_LINK_FORMAT_WARNING = 0;
    m_LINK_FORMAT_WARNINGIsSet = false;
    m_SALES_PRICE_INVALID = 0;
    m_SALES_PRICE_INVALIDIsSet = false;
    m_PRODUCT_CATEGORY_DEPTH_WARNING = 0;
    m_PRODUCT_CATEGORY_DEPTH_WARNINGIsSet = false;
    m_ADWORDS_FORMAT_WARNING = 0;
    m_ADWORDS_FORMAT_WARNINGIsSet = false;
    m_ADWORDS_SAME_AS_LINK = 0;
    m_ADWORDS_SAME_AS_LINKIsSet = false;
    m_DUPLICATE_HEADERS = 0;
    m_DUPLICATE_HEADERSIsSet = false;
    m_FETCH_SAME_SIGNATURE = 0;
    m_FETCH_SAME_SIGNATUREIsSet = false;
    m_ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG = 0;
    m_ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONGIsSet = false;
    m_ADDITIONAL_IMAGE_LINK_WARNING = 0;
    m_ADDITIONAL_IMAGE_LINK_WARNINGIsSet = false;
    m_IMAGE_LINK_WARNING = 0;
    m_IMAGE_LINK_WARNINGIsSet = false;
    m_SHIPPING_INVALID = 0;
    m_SHIPPING_INVALIDIsSet = false;
    m_TAX_INVALID = 0;
    m_TAX_INVALIDIsSet = false;
    m_SHIPPING_WEIGHT_INVALID = 0;
    m_SHIPPING_WEIGHT_INVALIDIsSet = false;
    m_EXPIRATION_DATE_INVALID = 0;
    m_EXPIRATION_DATE_INVALIDIsSet = false;
    m_AVAILABILITY_DATE_INVALID = 0;
    m_AVAILABILITY_DATE_INVALIDIsSet = false;
    m_SALE_DATE_INVALID = 0;
    m_SALE_DATE_INVALIDIsSet = false;
    m_WEIGHT_UNIT_INVALID = 0;
    m_WEIGHT_UNIT_INVALIDIsSet = false;
    m_IS_BUNDLE_INVALID = 0;
    m_IS_BUNDLE_INVALIDIsSet = false;
    m_UPDATED_TIME_INVALID = 0;
    m_UPDATED_TIME_INVALIDIsSet = false;
    m_CUSTOM_LABEL_LENGTH_TOO_LONG = 0;
    m_CUSTOM_LABEL_LENGTH_TOO_LONGIsSet = false;
    m_PRODUCT_TYPE_LENGTH_TOO_LONG = 0;
    m_PRODUCT_TYPE_LENGTH_TOO_LONGIsSet = false;
    m_TOO_MANY_ADDITIONAL_IMAGE_LINKS = 0;
    m_TOO_MANY_ADDITIONAL_IMAGE_LINKSIsSet = false;
    m_MULTIPACK_INVALID = 0;
    m_MULTIPACK_INVALIDIsSet = false;
    m_INDEXED_PRODUCT_COUNT_LARGE_DELTA = 0;
    m_INDEXED_PRODUCT_COUNT_LARGE_DELTAIsSet = false;
    m_ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE = 0;
    m_ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILUREIsSet = false;
    m_OPTIONAL_PRODUCT_CATEGORY_MISSING = 0;
    m_OPTIONAL_PRODUCT_CATEGORY_MISSINGIsSet = false;
    m_OPTIONAL_PRODUCT_CATEGORY_INVALID = 0;
    m_OPTIONAL_PRODUCT_CATEGORY_INVALIDIsSet = false;
    m_OPTIONAL_CONDITION_MISSING = 0;
    m_OPTIONAL_CONDITION_MISSINGIsSet = false;
    m_OPTIONAL_CONDITION_INVALID = 0;
    m_OPTIONAL_CONDITION_INVALIDIsSet = false;
    m_IOS_DEEP_LINK_INVALID = 0;
    m_IOS_DEEP_LINK_INVALIDIsSet = false;
    m_ANDROID_DEEP_LINK_INVALID = 0;
    m_ANDROID_DEEP_LINK_INVALIDIsSet = false;
    m_UTM_SOURCE_AUTO_CORRECTED = 0;
    m_UTM_SOURCE_AUTO_CORRECTEDIsSet = false;
    m_COUNTRY_DOES_NOT_MAP_TO_CURRENCY = 0;
    m_COUNTRY_DOES_NOT_MAP_TO_CURRENCYIsSet = false;
    m_MIN_AD_PRICE_INVALID = 0;
    m_MIN_AD_PRICE_INVALIDIsSet = false;
    m_GTIN_INVALID = 0;
    m_GTIN_INVALIDIsSet = false;
    m_INCONSISTENT_CURRENCY_VALUES = 0;
    m_INCONSISTENT_CURRENCY_VALUESIsSet = false;
    m_SALES_PRICE_TOO_LOW = 0;
    m_SALES_PRICE_TOO_LOWIsSet = false;
    m_SHIPPING_WIDTH_INVALID = 0;
    m_SHIPPING_WIDTH_INVALIDIsSet = false;
    m_SHIPPING_HEIGHT_INVALID = 0;
    m_SHIPPING_HEIGHT_INVALIDIsSet = false;
    m_SALES_PRICE_TOO_HIGH = 0;
    m_SALES_PRICE_TOO_HIGHIsSet = false;
    m_MPN_INVALID = 0;
    m_MPN_INVALIDIsSet = false;
}

CatalogsFeedValidationWarnings::~CatalogsFeedValidationWarnings()
{
}

void CatalogsFeedValidationWarnings::validate()
{
    // TODO: implement validation
}

web::json::value CatalogsFeedValidationWarnings::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AD_LINK_FORMAT_WARNINGIsSet)
    {
        val[utility::conversions::to_string_t(U("AD_LINK_FORMAT_WARNING"))] = ModelBase::toJson(m_AD_LINK_FORMAT_WARNING);
    }
    if(m_AD_LINK_SAME_AS_LINKIsSet)
    {
        val[utility::conversions::to_string_t(U("AD_LINK_SAME_AS_LINK"))] = ModelBase::toJson(m_AD_LINK_SAME_AS_LINK);
    }
    if(m_TITLE_LENGTH_TOO_LONGIsSet)
    {
        val[utility::conversions::to_string_t(U("TITLE_LENGTH_TOO_LONG"))] = ModelBase::toJson(m_TITLE_LENGTH_TOO_LONG);
    }
    if(m_DESCRIPTION_LENGTH_TOO_LONGIsSet)
    {
        val[utility::conversions::to_string_t(U("DESCRIPTION_LENGTH_TOO_LONG"))] = ModelBase::toJson(m_DESCRIPTION_LENGTH_TOO_LONG);
    }
    if(m_GENDER_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("GENDER_INVALID"))] = ModelBase::toJson(m_GENDER_INVALID);
    }
    if(m_AGE_GROUP_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("AGE_GROUP_INVALID"))] = ModelBase::toJson(m_AGE_GROUP_INVALID);
    }
    if(m_SIZE_TYPE_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("SIZE_TYPE_INVALID"))] = ModelBase::toJson(m_SIZE_TYPE_INVALID);
    }
    if(m_SIZE_SYSTEM_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("SIZE_SYSTEM_INVALID"))] = ModelBase::toJson(m_SIZE_SYSTEM_INVALID);
    }
    if(m_LINK_FORMAT_WARNINGIsSet)
    {
        val[utility::conversions::to_string_t(U("LINK_FORMAT_WARNING"))] = ModelBase::toJson(m_LINK_FORMAT_WARNING);
    }
    if(m_SALES_PRICE_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("SALES_PRICE_INVALID"))] = ModelBase::toJson(m_SALES_PRICE_INVALID);
    }
    if(m_PRODUCT_CATEGORY_DEPTH_WARNINGIsSet)
    {
        val[utility::conversions::to_string_t(U("PRODUCT_CATEGORY_DEPTH_WARNING"))] = ModelBase::toJson(m_PRODUCT_CATEGORY_DEPTH_WARNING);
    }
    if(m_ADWORDS_FORMAT_WARNINGIsSet)
    {
        val[utility::conversions::to_string_t(U("ADWORDS_FORMAT_WARNING"))] = ModelBase::toJson(m_ADWORDS_FORMAT_WARNING);
    }
    if(m_ADWORDS_SAME_AS_LINKIsSet)
    {
        val[utility::conversions::to_string_t(U("ADWORDS_SAME_AS_LINK"))] = ModelBase::toJson(m_ADWORDS_SAME_AS_LINK);
    }
    if(m_DUPLICATE_HEADERSIsSet)
    {
        val[utility::conversions::to_string_t(U("DUPLICATE_HEADERS"))] = ModelBase::toJson(m_DUPLICATE_HEADERS);
    }
    if(m_FETCH_SAME_SIGNATUREIsSet)
    {
        val[utility::conversions::to_string_t(U("FETCH_SAME_SIGNATURE"))] = ModelBase::toJson(m_FETCH_SAME_SIGNATURE);
    }
    if(m_ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONGIsSet)
    {
        val[utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG"))] = ModelBase::toJson(m_ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG);
    }
    if(m_ADDITIONAL_IMAGE_LINK_WARNINGIsSet)
    {
        val[utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LINK_WARNING"))] = ModelBase::toJson(m_ADDITIONAL_IMAGE_LINK_WARNING);
    }
    if(m_IMAGE_LINK_WARNINGIsSet)
    {
        val[utility::conversions::to_string_t(U("IMAGE_LINK_WARNING"))] = ModelBase::toJson(m_IMAGE_LINK_WARNING);
    }
    if(m_SHIPPING_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("SHIPPING_INVALID"))] = ModelBase::toJson(m_SHIPPING_INVALID);
    }
    if(m_TAX_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("TAX_INVALID"))] = ModelBase::toJson(m_TAX_INVALID);
    }
    if(m_SHIPPING_WEIGHT_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("SHIPPING_WEIGHT_INVALID"))] = ModelBase::toJson(m_SHIPPING_WEIGHT_INVALID);
    }
    if(m_EXPIRATION_DATE_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("EXPIRATION_DATE_INVALID"))] = ModelBase::toJson(m_EXPIRATION_DATE_INVALID);
    }
    if(m_AVAILABILITY_DATE_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("AVAILABILITY_DATE_INVALID"))] = ModelBase::toJson(m_AVAILABILITY_DATE_INVALID);
    }
    if(m_SALE_DATE_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("SALE_DATE_INVALID"))] = ModelBase::toJson(m_SALE_DATE_INVALID);
    }
    if(m_WEIGHT_UNIT_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("WEIGHT_UNIT_INVALID"))] = ModelBase::toJson(m_WEIGHT_UNIT_INVALID);
    }
    if(m_IS_BUNDLE_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("IS_BUNDLE_INVALID"))] = ModelBase::toJson(m_IS_BUNDLE_INVALID);
    }
    if(m_UPDATED_TIME_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("UPDATED_TIME_INVALID"))] = ModelBase::toJson(m_UPDATED_TIME_INVALID);
    }
    if(m_CUSTOM_LABEL_LENGTH_TOO_LONGIsSet)
    {
        val[utility::conversions::to_string_t(U("CUSTOM_LABEL_LENGTH_TOO_LONG"))] = ModelBase::toJson(m_CUSTOM_LABEL_LENGTH_TOO_LONG);
    }
    if(m_PRODUCT_TYPE_LENGTH_TOO_LONGIsSet)
    {
        val[utility::conversions::to_string_t(U("PRODUCT_TYPE_LENGTH_TOO_LONG"))] = ModelBase::toJson(m_PRODUCT_TYPE_LENGTH_TOO_LONG);
    }
    if(m_TOO_MANY_ADDITIONAL_IMAGE_LINKSIsSet)
    {
        val[utility::conversions::to_string_t(U("TOO_MANY_ADDITIONAL_IMAGE_LINKS"))] = ModelBase::toJson(m_TOO_MANY_ADDITIONAL_IMAGE_LINKS);
    }
    if(m_MULTIPACK_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("MULTIPACK_INVALID"))] = ModelBase::toJson(m_MULTIPACK_INVALID);
    }
    if(m_INDEXED_PRODUCT_COUNT_LARGE_DELTAIsSet)
    {
        val[utility::conversions::to_string_t(U("INDEXED_PRODUCT_COUNT_LARGE_DELTA"))] = ModelBase::toJson(m_INDEXED_PRODUCT_COUNT_LARGE_DELTA);
    }
    if(m_ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILUREIsSet)
    {
        val[utility::conversions::to_string_t(U("ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE"))] = ModelBase::toJson(m_ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE);
    }
    if(m_OPTIONAL_PRODUCT_CATEGORY_MISSINGIsSet)
    {
        val[utility::conversions::to_string_t(U("OPTIONAL_PRODUCT_CATEGORY_MISSING"))] = ModelBase::toJson(m_OPTIONAL_PRODUCT_CATEGORY_MISSING);
    }
    if(m_OPTIONAL_PRODUCT_CATEGORY_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("OPTIONAL_PRODUCT_CATEGORY_INVALID"))] = ModelBase::toJson(m_OPTIONAL_PRODUCT_CATEGORY_INVALID);
    }
    if(m_OPTIONAL_CONDITION_MISSINGIsSet)
    {
        val[utility::conversions::to_string_t(U("OPTIONAL_CONDITION_MISSING"))] = ModelBase::toJson(m_OPTIONAL_CONDITION_MISSING);
    }
    if(m_OPTIONAL_CONDITION_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("OPTIONAL_CONDITION_INVALID"))] = ModelBase::toJson(m_OPTIONAL_CONDITION_INVALID);
    }
    if(m_IOS_DEEP_LINK_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("IOS_DEEP_LINK_INVALID"))] = ModelBase::toJson(m_IOS_DEEP_LINK_INVALID);
    }
    if(m_ANDROID_DEEP_LINK_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("ANDROID_DEEP_LINK_INVALID"))] = ModelBase::toJson(m_ANDROID_DEEP_LINK_INVALID);
    }
    if(m_UTM_SOURCE_AUTO_CORRECTEDIsSet)
    {
        val[utility::conversions::to_string_t(U("UTM_SOURCE_AUTO_CORRECTED"))] = ModelBase::toJson(m_UTM_SOURCE_AUTO_CORRECTED);
    }
    if(m_COUNTRY_DOES_NOT_MAP_TO_CURRENCYIsSet)
    {
        val[utility::conversions::to_string_t(U("COUNTRY_DOES_NOT_MAP_TO_CURRENCY"))] = ModelBase::toJson(m_COUNTRY_DOES_NOT_MAP_TO_CURRENCY);
    }
    if(m_MIN_AD_PRICE_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("MIN_AD_PRICE_INVALID"))] = ModelBase::toJson(m_MIN_AD_PRICE_INVALID);
    }
    if(m_GTIN_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("GTIN_INVALID"))] = ModelBase::toJson(m_GTIN_INVALID);
    }
    if(m_INCONSISTENT_CURRENCY_VALUESIsSet)
    {
        val[utility::conversions::to_string_t(U("INCONSISTENT_CURRENCY_VALUES"))] = ModelBase::toJson(m_INCONSISTENT_CURRENCY_VALUES);
    }
    if(m_SALES_PRICE_TOO_LOWIsSet)
    {
        val[utility::conversions::to_string_t(U("SALES_PRICE_TOO_LOW"))] = ModelBase::toJson(m_SALES_PRICE_TOO_LOW);
    }
    if(m_SHIPPING_WIDTH_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("SHIPPING_WIDTH_INVALID"))] = ModelBase::toJson(m_SHIPPING_WIDTH_INVALID);
    }
    if(m_SHIPPING_HEIGHT_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("SHIPPING_HEIGHT_INVALID"))] = ModelBase::toJson(m_SHIPPING_HEIGHT_INVALID);
    }
    if(m_SALES_PRICE_TOO_HIGHIsSet)
    {
        val[utility::conversions::to_string_t(U("SALES_PRICE_TOO_HIGH"))] = ModelBase::toJson(m_SALES_PRICE_TOO_HIGH);
    }
    if(m_MPN_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("MPN_INVALID"))] = ModelBase::toJson(m_MPN_INVALID);
    }

    return val;
}

bool CatalogsFeedValidationWarnings::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("AD_LINK_FORMAT_WARNING"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("AD_LINK_FORMAT_WARNING")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setADLINKFORMATWARNING;
            ok &= ModelBase::fromJson(fieldValue, refVal_setADLINKFORMATWARNING);
            setADLINKFORMATWARNING(refVal_setADLINKFORMATWARNING);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("AD_LINK_SAME_AS_LINK"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("AD_LINK_SAME_AS_LINK")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setADLINKSAMEASLINK;
            ok &= ModelBase::fromJson(fieldValue, refVal_setADLINKSAMEASLINK);
            setADLINKSAMEASLINK(refVal_setADLINKSAMEASLINK);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("TITLE_LENGTH_TOO_LONG"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("TITLE_LENGTH_TOO_LONG")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTITLELENGTHTOOLONG;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTITLELENGTHTOOLONG);
            setTITLELENGTHTOOLONG(refVal_setTITLELENGTHTOOLONG);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("DESCRIPTION_LENGTH_TOO_LONG"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("DESCRIPTION_LENGTH_TOO_LONG")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDESCRIPTIONLENGTHTOOLONG;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDESCRIPTIONLENGTHTOOLONG);
            setDESCRIPTIONLENGTHTOOLONG(refVal_setDESCRIPTIONLENGTHTOOLONG);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("GENDER_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("GENDER_INVALID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setGENDERINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGENDERINVALID);
            setGENDERINVALID(refVal_setGENDERINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("AGE_GROUP_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("AGE_GROUP_INVALID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAGEGROUPINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAGEGROUPINVALID);
            setAGEGROUPINVALID(refVal_setAGEGROUPINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("SIZE_TYPE_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("SIZE_TYPE_INVALID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSIZETYPEINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSIZETYPEINVALID);
            setSIZETYPEINVALID(refVal_setSIZETYPEINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("SIZE_SYSTEM_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("SIZE_SYSTEM_INVALID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSIZESYSTEMINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSIZESYSTEMINVALID);
            setSIZESYSTEMINVALID(refVal_setSIZESYSTEMINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LINK_FORMAT_WARNING"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LINK_FORMAT_WARNING")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLINKFORMATWARNING;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLINKFORMATWARNING);
            setLINKFORMATWARNING(refVal_setLINKFORMATWARNING);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("SALES_PRICE_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("SALES_PRICE_INVALID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSALESPRICEINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSALESPRICEINVALID);
            setSALESPRICEINVALID(refVal_setSALESPRICEINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("PRODUCT_CATEGORY_DEPTH_WARNING"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("PRODUCT_CATEGORY_DEPTH_WARNING")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPRODUCTCATEGORYDEPTHWARNING;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPRODUCTCATEGORYDEPTHWARNING);
            setPRODUCTCATEGORYDEPTHWARNING(refVal_setPRODUCTCATEGORYDEPTHWARNING);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ADWORDS_FORMAT_WARNING"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ADWORDS_FORMAT_WARNING")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setADWORDSFORMATWARNING;
            ok &= ModelBase::fromJson(fieldValue, refVal_setADWORDSFORMATWARNING);
            setADWORDSFORMATWARNING(refVal_setADWORDSFORMATWARNING);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ADWORDS_SAME_AS_LINK"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ADWORDS_SAME_AS_LINK")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setADWORDSSAMEASLINK;
            ok &= ModelBase::fromJson(fieldValue, refVal_setADWORDSSAMEASLINK);
            setADWORDSSAMEASLINK(refVal_setADWORDSSAMEASLINK);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("DUPLICATE_HEADERS"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("DUPLICATE_HEADERS")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDUPLICATEHEADERS;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDUPLICATEHEADERS);
            setDUPLICATEHEADERS(refVal_setDUPLICATEHEADERS);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("FETCH_SAME_SIGNATURE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("FETCH_SAME_SIGNATURE")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFETCHSAMESIGNATURE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFETCHSAMESIGNATURE);
            setFETCHSAMESIGNATURE(refVal_setFETCHSAMESIGNATURE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setADDITIONALIMAGELINKLENGTHTOOLONG;
            ok &= ModelBase::fromJson(fieldValue, refVal_setADDITIONALIMAGELINKLENGTHTOOLONG);
            setADDITIONALIMAGELINKLENGTHTOOLONG(refVal_setADDITIONALIMAGELINKLENGTHTOOLONG);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LINK_WARNING"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LINK_WARNING")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setADDITIONALIMAGELINKWARNING;
            ok &= ModelBase::fromJson(fieldValue, refVal_setADDITIONALIMAGELINKWARNING);
            setADDITIONALIMAGELINKWARNING(refVal_setADDITIONALIMAGELINKWARNING);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("IMAGE_LINK_WARNING"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("IMAGE_LINK_WARNING")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setIMAGELINKWARNING;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIMAGELINKWARNING);
            setIMAGELINKWARNING(refVal_setIMAGELINKWARNING);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("SHIPPING_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("SHIPPING_INVALID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSHIPPINGINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSHIPPINGINVALID);
            setSHIPPINGINVALID(refVal_setSHIPPINGINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("TAX_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("TAX_INVALID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTAXINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTAXINVALID);
            setTAXINVALID(refVal_setTAXINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("SHIPPING_WEIGHT_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("SHIPPING_WEIGHT_INVALID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSHIPPINGWEIGHTINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSHIPPINGWEIGHTINVALID);
            setSHIPPINGWEIGHTINVALID(refVal_setSHIPPINGWEIGHTINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("EXPIRATION_DATE_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("EXPIRATION_DATE_INVALID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setEXPIRATIONDATEINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEXPIRATIONDATEINVALID);
            setEXPIRATIONDATEINVALID(refVal_setEXPIRATIONDATEINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("AVAILABILITY_DATE_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("AVAILABILITY_DATE_INVALID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAVAILABILITYDATEINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAVAILABILITYDATEINVALID);
            setAVAILABILITYDATEINVALID(refVal_setAVAILABILITYDATEINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("SALE_DATE_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("SALE_DATE_INVALID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSALEDATEINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSALEDATEINVALID);
            setSALEDATEINVALID(refVal_setSALEDATEINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("WEIGHT_UNIT_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("WEIGHT_UNIT_INVALID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setWEIGHTUNITINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWEIGHTUNITINVALID);
            setWEIGHTUNITINVALID(refVal_setWEIGHTUNITINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("IS_BUNDLE_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("IS_BUNDLE_INVALID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setISBUNDLEINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setISBUNDLEINVALID);
            setISBUNDLEINVALID(refVal_setISBUNDLEINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("UPDATED_TIME_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("UPDATED_TIME_INVALID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setUPDATEDTIMEINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUPDATEDTIMEINVALID);
            setUPDATEDTIMEINVALID(refVal_setUPDATEDTIMEINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CUSTOM_LABEL_LENGTH_TOO_LONG"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CUSTOM_LABEL_LENGTH_TOO_LONG")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCUSTOMLABELLENGTHTOOLONG;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCUSTOMLABELLENGTHTOOLONG);
            setCUSTOMLABELLENGTHTOOLONG(refVal_setCUSTOMLABELLENGTHTOOLONG);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("PRODUCT_TYPE_LENGTH_TOO_LONG"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("PRODUCT_TYPE_LENGTH_TOO_LONG")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPRODUCTTYPELENGTHTOOLONG;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPRODUCTTYPELENGTHTOOLONG);
            setPRODUCTTYPELENGTHTOOLONG(refVal_setPRODUCTTYPELENGTHTOOLONG);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("TOO_MANY_ADDITIONAL_IMAGE_LINKS"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("TOO_MANY_ADDITIONAL_IMAGE_LINKS")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTOOMANYADDITIONALIMAGELINKS;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTOOMANYADDITIONALIMAGELINKS);
            setTOOMANYADDITIONALIMAGELINKS(refVal_setTOOMANYADDITIONALIMAGELINKS);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MULTIPACK_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MULTIPACK_INVALID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMULTIPACKINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMULTIPACKINVALID);
            setMULTIPACKINVALID(refVal_setMULTIPACKINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("INDEXED_PRODUCT_COUNT_LARGE_DELTA"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("INDEXED_PRODUCT_COUNT_LARGE_DELTA")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setINDEXEDPRODUCTCOUNTLARGEDELTA;
            ok &= ModelBase::fromJson(fieldValue, refVal_setINDEXEDPRODUCTCOUNTLARGEDELTA);
            setINDEXEDPRODUCTCOUNTLARGEDELTA(refVal_setINDEXEDPRODUCTCOUNTLARGEDELTA);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setITEMADDITIONALIMAGEDOWNLOADFAILURE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setITEMADDITIONALIMAGEDOWNLOADFAILURE);
            setITEMADDITIONALIMAGEDOWNLOADFAILURE(refVal_setITEMADDITIONALIMAGEDOWNLOADFAILURE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("OPTIONAL_PRODUCT_CATEGORY_MISSING"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("OPTIONAL_PRODUCT_CATEGORY_MISSING")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setOPTIONALPRODUCTCATEGORYMISSING;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOPTIONALPRODUCTCATEGORYMISSING);
            setOPTIONALPRODUCTCATEGORYMISSING(refVal_setOPTIONALPRODUCTCATEGORYMISSING);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("OPTIONAL_PRODUCT_CATEGORY_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("OPTIONAL_PRODUCT_CATEGORY_INVALID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setOPTIONALPRODUCTCATEGORYINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOPTIONALPRODUCTCATEGORYINVALID);
            setOPTIONALPRODUCTCATEGORYINVALID(refVal_setOPTIONALPRODUCTCATEGORYINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("OPTIONAL_CONDITION_MISSING"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("OPTIONAL_CONDITION_MISSING")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setOPTIONALCONDITIONMISSING;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOPTIONALCONDITIONMISSING);
            setOPTIONALCONDITIONMISSING(refVal_setOPTIONALCONDITIONMISSING);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("OPTIONAL_CONDITION_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("OPTIONAL_CONDITION_INVALID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setOPTIONALCONDITIONINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOPTIONALCONDITIONINVALID);
            setOPTIONALCONDITIONINVALID(refVal_setOPTIONALCONDITIONINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("IOS_DEEP_LINK_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("IOS_DEEP_LINK_INVALID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setIOSDEEPLINKINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIOSDEEPLINKINVALID);
            setIOSDEEPLINKINVALID(refVal_setIOSDEEPLINKINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ANDROID_DEEP_LINK_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ANDROID_DEEP_LINK_INVALID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setANDROIDDEEPLINKINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setANDROIDDEEPLINKINVALID);
            setANDROIDDEEPLINKINVALID(refVal_setANDROIDDEEPLINKINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("UTM_SOURCE_AUTO_CORRECTED"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("UTM_SOURCE_AUTO_CORRECTED")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setUTMSOURCEAUTOCORRECTED;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUTMSOURCEAUTOCORRECTED);
            setUTMSOURCEAUTOCORRECTED(refVal_setUTMSOURCEAUTOCORRECTED);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("COUNTRY_DOES_NOT_MAP_TO_CURRENCY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("COUNTRY_DOES_NOT_MAP_TO_CURRENCY")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCOUNTRYDOESNOTMAPTOCURRENCY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCOUNTRYDOESNOTMAPTOCURRENCY);
            setCOUNTRYDOESNOTMAPTOCURRENCY(refVal_setCOUNTRYDOESNOTMAPTOCURRENCY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MIN_AD_PRICE_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MIN_AD_PRICE_INVALID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMINADPRICEINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMINADPRICEINVALID);
            setMINADPRICEINVALID(refVal_setMINADPRICEINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("GTIN_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("GTIN_INVALID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setGTININVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGTININVALID);
            setGTININVALID(refVal_setGTININVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("INCONSISTENT_CURRENCY_VALUES"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("INCONSISTENT_CURRENCY_VALUES")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setINCONSISTENTCURRENCYVALUES;
            ok &= ModelBase::fromJson(fieldValue, refVal_setINCONSISTENTCURRENCYVALUES);
            setINCONSISTENTCURRENCYVALUES(refVal_setINCONSISTENTCURRENCYVALUES);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("SALES_PRICE_TOO_LOW"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("SALES_PRICE_TOO_LOW")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSALESPRICETOOLOW;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSALESPRICETOOLOW);
            setSALESPRICETOOLOW(refVal_setSALESPRICETOOLOW);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("SHIPPING_WIDTH_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("SHIPPING_WIDTH_INVALID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSHIPPINGWIDTHINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSHIPPINGWIDTHINVALID);
            setSHIPPINGWIDTHINVALID(refVal_setSHIPPINGWIDTHINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("SHIPPING_HEIGHT_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("SHIPPING_HEIGHT_INVALID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSHIPPINGHEIGHTINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSHIPPINGHEIGHTINVALID);
            setSHIPPINGHEIGHTINVALID(refVal_setSHIPPINGHEIGHTINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("SALES_PRICE_TOO_HIGH"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("SALES_PRICE_TOO_HIGH")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSALESPRICETOOHIGH;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSALESPRICETOOHIGH);
            setSALESPRICETOOHIGH(refVal_setSALESPRICETOOHIGH);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MPN_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MPN_INVALID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMPNINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMPNINVALID);
            setMPNINVALID(refVal_setMPNINVALID);
        }
    }
    return ok;
}

void CatalogsFeedValidationWarnings::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AD_LINK_FORMAT_WARNINGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("AD_LINK_FORMAT_WARNING")), m_AD_LINK_FORMAT_WARNING));
    }
    if(m_AD_LINK_SAME_AS_LINKIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("AD_LINK_SAME_AS_LINK")), m_AD_LINK_SAME_AS_LINK));
    }
    if(m_TITLE_LENGTH_TOO_LONGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("TITLE_LENGTH_TOO_LONG")), m_TITLE_LENGTH_TOO_LONG));
    }
    if(m_DESCRIPTION_LENGTH_TOO_LONGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("DESCRIPTION_LENGTH_TOO_LONG")), m_DESCRIPTION_LENGTH_TOO_LONG));
    }
    if(m_GENDER_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("GENDER_INVALID")), m_GENDER_INVALID));
    }
    if(m_AGE_GROUP_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("AGE_GROUP_INVALID")), m_AGE_GROUP_INVALID));
    }
    if(m_SIZE_TYPE_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("SIZE_TYPE_INVALID")), m_SIZE_TYPE_INVALID));
    }
    if(m_SIZE_SYSTEM_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("SIZE_SYSTEM_INVALID")), m_SIZE_SYSTEM_INVALID));
    }
    if(m_LINK_FORMAT_WARNINGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LINK_FORMAT_WARNING")), m_LINK_FORMAT_WARNING));
    }
    if(m_SALES_PRICE_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("SALES_PRICE_INVALID")), m_SALES_PRICE_INVALID));
    }
    if(m_PRODUCT_CATEGORY_DEPTH_WARNINGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("PRODUCT_CATEGORY_DEPTH_WARNING")), m_PRODUCT_CATEGORY_DEPTH_WARNING));
    }
    if(m_ADWORDS_FORMAT_WARNINGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ADWORDS_FORMAT_WARNING")), m_ADWORDS_FORMAT_WARNING));
    }
    if(m_ADWORDS_SAME_AS_LINKIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ADWORDS_SAME_AS_LINK")), m_ADWORDS_SAME_AS_LINK));
    }
    if(m_DUPLICATE_HEADERSIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("DUPLICATE_HEADERS")), m_DUPLICATE_HEADERS));
    }
    if(m_FETCH_SAME_SIGNATUREIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("FETCH_SAME_SIGNATURE")), m_FETCH_SAME_SIGNATURE));
    }
    if(m_ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG")), m_ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG));
    }
    if(m_ADDITIONAL_IMAGE_LINK_WARNINGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LINK_WARNING")), m_ADDITIONAL_IMAGE_LINK_WARNING));
    }
    if(m_IMAGE_LINK_WARNINGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("IMAGE_LINK_WARNING")), m_IMAGE_LINK_WARNING));
    }
    if(m_SHIPPING_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("SHIPPING_INVALID")), m_SHIPPING_INVALID));
    }
    if(m_TAX_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("TAX_INVALID")), m_TAX_INVALID));
    }
    if(m_SHIPPING_WEIGHT_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("SHIPPING_WEIGHT_INVALID")), m_SHIPPING_WEIGHT_INVALID));
    }
    if(m_EXPIRATION_DATE_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("EXPIRATION_DATE_INVALID")), m_EXPIRATION_DATE_INVALID));
    }
    if(m_AVAILABILITY_DATE_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("AVAILABILITY_DATE_INVALID")), m_AVAILABILITY_DATE_INVALID));
    }
    if(m_SALE_DATE_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("SALE_DATE_INVALID")), m_SALE_DATE_INVALID));
    }
    if(m_WEIGHT_UNIT_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("WEIGHT_UNIT_INVALID")), m_WEIGHT_UNIT_INVALID));
    }
    if(m_IS_BUNDLE_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("IS_BUNDLE_INVALID")), m_IS_BUNDLE_INVALID));
    }
    if(m_UPDATED_TIME_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("UPDATED_TIME_INVALID")), m_UPDATED_TIME_INVALID));
    }
    if(m_CUSTOM_LABEL_LENGTH_TOO_LONGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CUSTOM_LABEL_LENGTH_TOO_LONG")), m_CUSTOM_LABEL_LENGTH_TOO_LONG));
    }
    if(m_PRODUCT_TYPE_LENGTH_TOO_LONGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("PRODUCT_TYPE_LENGTH_TOO_LONG")), m_PRODUCT_TYPE_LENGTH_TOO_LONG));
    }
    if(m_TOO_MANY_ADDITIONAL_IMAGE_LINKSIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("TOO_MANY_ADDITIONAL_IMAGE_LINKS")), m_TOO_MANY_ADDITIONAL_IMAGE_LINKS));
    }
    if(m_MULTIPACK_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MULTIPACK_INVALID")), m_MULTIPACK_INVALID));
    }
    if(m_INDEXED_PRODUCT_COUNT_LARGE_DELTAIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("INDEXED_PRODUCT_COUNT_LARGE_DELTA")), m_INDEXED_PRODUCT_COUNT_LARGE_DELTA));
    }
    if(m_ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILUREIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE")), m_ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE));
    }
    if(m_OPTIONAL_PRODUCT_CATEGORY_MISSINGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("OPTIONAL_PRODUCT_CATEGORY_MISSING")), m_OPTIONAL_PRODUCT_CATEGORY_MISSING));
    }
    if(m_OPTIONAL_PRODUCT_CATEGORY_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("OPTIONAL_PRODUCT_CATEGORY_INVALID")), m_OPTIONAL_PRODUCT_CATEGORY_INVALID));
    }
    if(m_OPTIONAL_CONDITION_MISSINGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("OPTIONAL_CONDITION_MISSING")), m_OPTIONAL_CONDITION_MISSING));
    }
    if(m_OPTIONAL_CONDITION_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("OPTIONAL_CONDITION_INVALID")), m_OPTIONAL_CONDITION_INVALID));
    }
    if(m_IOS_DEEP_LINK_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("IOS_DEEP_LINK_INVALID")), m_IOS_DEEP_LINK_INVALID));
    }
    if(m_ANDROID_DEEP_LINK_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ANDROID_DEEP_LINK_INVALID")), m_ANDROID_DEEP_LINK_INVALID));
    }
    if(m_UTM_SOURCE_AUTO_CORRECTEDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("UTM_SOURCE_AUTO_CORRECTED")), m_UTM_SOURCE_AUTO_CORRECTED));
    }
    if(m_COUNTRY_DOES_NOT_MAP_TO_CURRENCYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("COUNTRY_DOES_NOT_MAP_TO_CURRENCY")), m_COUNTRY_DOES_NOT_MAP_TO_CURRENCY));
    }
    if(m_MIN_AD_PRICE_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MIN_AD_PRICE_INVALID")), m_MIN_AD_PRICE_INVALID));
    }
    if(m_GTIN_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("GTIN_INVALID")), m_GTIN_INVALID));
    }
    if(m_INCONSISTENT_CURRENCY_VALUESIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("INCONSISTENT_CURRENCY_VALUES")), m_INCONSISTENT_CURRENCY_VALUES));
    }
    if(m_SALES_PRICE_TOO_LOWIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("SALES_PRICE_TOO_LOW")), m_SALES_PRICE_TOO_LOW));
    }
    if(m_SHIPPING_WIDTH_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("SHIPPING_WIDTH_INVALID")), m_SHIPPING_WIDTH_INVALID));
    }
    if(m_SHIPPING_HEIGHT_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("SHIPPING_HEIGHT_INVALID")), m_SHIPPING_HEIGHT_INVALID));
    }
    if(m_SALES_PRICE_TOO_HIGHIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("SALES_PRICE_TOO_HIGH")), m_SALES_PRICE_TOO_HIGH));
    }
    if(m_MPN_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MPN_INVALID")), m_MPN_INVALID));
    }
}

bool CatalogsFeedValidationWarnings::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("AD_LINK_FORMAT_WARNING"))))
    {
        int32_t refVal_setADLINKFORMATWARNING;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("AD_LINK_FORMAT_WARNING"))), refVal_setADLINKFORMATWARNING );
        setADLINKFORMATWARNING(refVal_setADLINKFORMATWARNING);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("AD_LINK_SAME_AS_LINK"))))
    {
        int32_t refVal_setADLINKSAMEASLINK;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("AD_LINK_SAME_AS_LINK"))), refVal_setADLINKSAMEASLINK );
        setADLINKSAMEASLINK(refVal_setADLINKSAMEASLINK);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("TITLE_LENGTH_TOO_LONG"))))
    {
        int32_t refVal_setTITLELENGTHTOOLONG;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("TITLE_LENGTH_TOO_LONG"))), refVal_setTITLELENGTHTOOLONG );
        setTITLELENGTHTOOLONG(refVal_setTITLELENGTHTOOLONG);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("DESCRIPTION_LENGTH_TOO_LONG"))))
    {
        int32_t refVal_setDESCRIPTIONLENGTHTOOLONG;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("DESCRIPTION_LENGTH_TOO_LONG"))), refVal_setDESCRIPTIONLENGTHTOOLONG );
        setDESCRIPTIONLENGTHTOOLONG(refVal_setDESCRIPTIONLENGTHTOOLONG);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("GENDER_INVALID"))))
    {
        int32_t refVal_setGENDERINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("GENDER_INVALID"))), refVal_setGENDERINVALID );
        setGENDERINVALID(refVal_setGENDERINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("AGE_GROUP_INVALID"))))
    {
        int32_t refVal_setAGEGROUPINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("AGE_GROUP_INVALID"))), refVal_setAGEGROUPINVALID );
        setAGEGROUPINVALID(refVal_setAGEGROUPINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("SIZE_TYPE_INVALID"))))
    {
        int32_t refVal_setSIZETYPEINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("SIZE_TYPE_INVALID"))), refVal_setSIZETYPEINVALID );
        setSIZETYPEINVALID(refVal_setSIZETYPEINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("SIZE_SYSTEM_INVALID"))))
    {
        int32_t refVal_setSIZESYSTEMINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("SIZE_SYSTEM_INVALID"))), refVal_setSIZESYSTEMINVALID );
        setSIZESYSTEMINVALID(refVal_setSIZESYSTEMINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LINK_FORMAT_WARNING"))))
    {
        int32_t refVal_setLINKFORMATWARNING;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LINK_FORMAT_WARNING"))), refVal_setLINKFORMATWARNING );
        setLINKFORMATWARNING(refVal_setLINKFORMATWARNING);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("SALES_PRICE_INVALID"))))
    {
        int32_t refVal_setSALESPRICEINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("SALES_PRICE_INVALID"))), refVal_setSALESPRICEINVALID );
        setSALESPRICEINVALID(refVal_setSALESPRICEINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("PRODUCT_CATEGORY_DEPTH_WARNING"))))
    {
        int32_t refVal_setPRODUCTCATEGORYDEPTHWARNING;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("PRODUCT_CATEGORY_DEPTH_WARNING"))), refVal_setPRODUCTCATEGORYDEPTHWARNING );
        setPRODUCTCATEGORYDEPTHWARNING(refVal_setPRODUCTCATEGORYDEPTHWARNING);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ADWORDS_FORMAT_WARNING"))))
    {
        int32_t refVal_setADWORDSFORMATWARNING;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ADWORDS_FORMAT_WARNING"))), refVal_setADWORDSFORMATWARNING );
        setADWORDSFORMATWARNING(refVal_setADWORDSFORMATWARNING);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ADWORDS_SAME_AS_LINK"))))
    {
        int32_t refVal_setADWORDSSAMEASLINK;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ADWORDS_SAME_AS_LINK"))), refVal_setADWORDSSAMEASLINK );
        setADWORDSSAMEASLINK(refVal_setADWORDSSAMEASLINK);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("DUPLICATE_HEADERS"))))
    {
        int32_t refVal_setDUPLICATEHEADERS;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("DUPLICATE_HEADERS"))), refVal_setDUPLICATEHEADERS );
        setDUPLICATEHEADERS(refVal_setDUPLICATEHEADERS);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("FETCH_SAME_SIGNATURE"))))
    {
        int32_t refVal_setFETCHSAMESIGNATURE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("FETCH_SAME_SIGNATURE"))), refVal_setFETCHSAMESIGNATURE );
        setFETCHSAMESIGNATURE(refVal_setFETCHSAMESIGNATURE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG"))))
    {
        int32_t refVal_setADDITIONALIMAGELINKLENGTHTOOLONG;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG"))), refVal_setADDITIONALIMAGELINKLENGTHTOOLONG );
        setADDITIONALIMAGELINKLENGTHTOOLONG(refVal_setADDITIONALIMAGELINKLENGTHTOOLONG);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LINK_WARNING"))))
    {
        int32_t refVal_setADDITIONALIMAGELINKWARNING;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LINK_WARNING"))), refVal_setADDITIONALIMAGELINKWARNING );
        setADDITIONALIMAGELINKWARNING(refVal_setADDITIONALIMAGELINKWARNING);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("IMAGE_LINK_WARNING"))))
    {
        int32_t refVal_setIMAGELINKWARNING;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("IMAGE_LINK_WARNING"))), refVal_setIMAGELINKWARNING );
        setIMAGELINKWARNING(refVal_setIMAGELINKWARNING);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("SHIPPING_INVALID"))))
    {
        int32_t refVal_setSHIPPINGINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("SHIPPING_INVALID"))), refVal_setSHIPPINGINVALID );
        setSHIPPINGINVALID(refVal_setSHIPPINGINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("TAX_INVALID"))))
    {
        int32_t refVal_setTAXINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("TAX_INVALID"))), refVal_setTAXINVALID );
        setTAXINVALID(refVal_setTAXINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("SHIPPING_WEIGHT_INVALID"))))
    {
        int32_t refVal_setSHIPPINGWEIGHTINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("SHIPPING_WEIGHT_INVALID"))), refVal_setSHIPPINGWEIGHTINVALID );
        setSHIPPINGWEIGHTINVALID(refVal_setSHIPPINGWEIGHTINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("EXPIRATION_DATE_INVALID"))))
    {
        int32_t refVal_setEXPIRATIONDATEINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("EXPIRATION_DATE_INVALID"))), refVal_setEXPIRATIONDATEINVALID );
        setEXPIRATIONDATEINVALID(refVal_setEXPIRATIONDATEINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("AVAILABILITY_DATE_INVALID"))))
    {
        int32_t refVal_setAVAILABILITYDATEINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("AVAILABILITY_DATE_INVALID"))), refVal_setAVAILABILITYDATEINVALID );
        setAVAILABILITYDATEINVALID(refVal_setAVAILABILITYDATEINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("SALE_DATE_INVALID"))))
    {
        int32_t refVal_setSALEDATEINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("SALE_DATE_INVALID"))), refVal_setSALEDATEINVALID );
        setSALEDATEINVALID(refVal_setSALEDATEINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("WEIGHT_UNIT_INVALID"))))
    {
        int32_t refVal_setWEIGHTUNITINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("WEIGHT_UNIT_INVALID"))), refVal_setWEIGHTUNITINVALID );
        setWEIGHTUNITINVALID(refVal_setWEIGHTUNITINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("IS_BUNDLE_INVALID"))))
    {
        int32_t refVal_setISBUNDLEINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("IS_BUNDLE_INVALID"))), refVal_setISBUNDLEINVALID );
        setISBUNDLEINVALID(refVal_setISBUNDLEINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("UPDATED_TIME_INVALID"))))
    {
        int32_t refVal_setUPDATEDTIMEINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("UPDATED_TIME_INVALID"))), refVal_setUPDATEDTIMEINVALID );
        setUPDATEDTIMEINVALID(refVal_setUPDATEDTIMEINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_LENGTH_TOO_LONG"))))
    {
        int32_t refVal_setCUSTOMLABELLENGTHTOOLONG;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_LENGTH_TOO_LONG"))), refVal_setCUSTOMLABELLENGTHTOOLONG );
        setCUSTOMLABELLENGTHTOOLONG(refVal_setCUSTOMLABELLENGTHTOOLONG);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("PRODUCT_TYPE_LENGTH_TOO_LONG"))))
    {
        int32_t refVal_setPRODUCTTYPELENGTHTOOLONG;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("PRODUCT_TYPE_LENGTH_TOO_LONG"))), refVal_setPRODUCTTYPELENGTHTOOLONG );
        setPRODUCTTYPELENGTHTOOLONG(refVal_setPRODUCTTYPELENGTHTOOLONG);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("TOO_MANY_ADDITIONAL_IMAGE_LINKS"))))
    {
        int32_t refVal_setTOOMANYADDITIONALIMAGELINKS;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("TOO_MANY_ADDITIONAL_IMAGE_LINKS"))), refVal_setTOOMANYADDITIONALIMAGELINKS );
        setTOOMANYADDITIONALIMAGELINKS(refVal_setTOOMANYADDITIONALIMAGELINKS);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MULTIPACK_INVALID"))))
    {
        int32_t refVal_setMULTIPACKINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MULTIPACK_INVALID"))), refVal_setMULTIPACKINVALID );
        setMULTIPACKINVALID(refVal_setMULTIPACKINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("INDEXED_PRODUCT_COUNT_LARGE_DELTA"))))
    {
        int32_t refVal_setINDEXEDPRODUCTCOUNTLARGEDELTA;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("INDEXED_PRODUCT_COUNT_LARGE_DELTA"))), refVal_setINDEXEDPRODUCTCOUNTLARGEDELTA );
        setINDEXEDPRODUCTCOUNTLARGEDELTA(refVal_setINDEXEDPRODUCTCOUNTLARGEDELTA);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE"))))
    {
        int32_t refVal_setITEMADDITIONALIMAGEDOWNLOADFAILURE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE"))), refVal_setITEMADDITIONALIMAGEDOWNLOADFAILURE );
        setITEMADDITIONALIMAGEDOWNLOADFAILURE(refVal_setITEMADDITIONALIMAGEDOWNLOADFAILURE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("OPTIONAL_PRODUCT_CATEGORY_MISSING"))))
    {
        int32_t refVal_setOPTIONALPRODUCTCATEGORYMISSING;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("OPTIONAL_PRODUCT_CATEGORY_MISSING"))), refVal_setOPTIONALPRODUCTCATEGORYMISSING );
        setOPTIONALPRODUCTCATEGORYMISSING(refVal_setOPTIONALPRODUCTCATEGORYMISSING);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("OPTIONAL_PRODUCT_CATEGORY_INVALID"))))
    {
        int32_t refVal_setOPTIONALPRODUCTCATEGORYINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("OPTIONAL_PRODUCT_CATEGORY_INVALID"))), refVal_setOPTIONALPRODUCTCATEGORYINVALID );
        setOPTIONALPRODUCTCATEGORYINVALID(refVal_setOPTIONALPRODUCTCATEGORYINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("OPTIONAL_CONDITION_MISSING"))))
    {
        int32_t refVal_setOPTIONALCONDITIONMISSING;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("OPTIONAL_CONDITION_MISSING"))), refVal_setOPTIONALCONDITIONMISSING );
        setOPTIONALCONDITIONMISSING(refVal_setOPTIONALCONDITIONMISSING);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("OPTIONAL_CONDITION_INVALID"))))
    {
        int32_t refVal_setOPTIONALCONDITIONINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("OPTIONAL_CONDITION_INVALID"))), refVal_setOPTIONALCONDITIONINVALID );
        setOPTIONALCONDITIONINVALID(refVal_setOPTIONALCONDITIONINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("IOS_DEEP_LINK_INVALID"))))
    {
        int32_t refVal_setIOSDEEPLINKINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("IOS_DEEP_LINK_INVALID"))), refVal_setIOSDEEPLINKINVALID );
        setIOSDEEPLINKINVALID(refVal_setIOSDEEPLINKINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ANDROID_DEEP_LINK_INVALID"))))
    {
        int32_t refVal_setANDROIDDEEPLINKINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ANDROID_DEEP_LINK_INVALID"))), refVal_setANDROIDDEEPLINKINVALID );
        setANDROIDDEEPLINKINVALID(refVal_setANDROIDDEEPLINKINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("UTM_SOURCE_AUTO_CORRECTED"))))
    {
        int32_t refVal_setUTMSOURCEAUTOCORRECTED;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("UTM_SOURCE_AUTO_CORRECTED"))), refVal_setUTMSOURCEAUTOCORRECTED );
        setUTMSOURCEAUTOCORRECTED(refVal_setUTMSOURCEAUTOCORRECTED);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("COUNTRY_DOES_NOT_MAP_TO_CURRENCY"))))
    {
        int32_t refVal_setCOUNTRYDOESNOTMAPTOCURRENCY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("COUNTRY_DOES_NOT_MAP_TO_CURRENCY"))), refVal_setCOUNTRYDOESNOTMAPTOCURRENCY );
        setCOUNTRYDOESNOTMAPTOCURRENCY(refVal_setCOUNTRYDOESNOTMAPTOCURRENCY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MIN_AD_PRICE_INVALID"))))
    {
        int32_t refVal_setMINADPRICEINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MIN_AD_PRICE_INVALID"))), refVal_setMINADPRICEINVALID );
        setMINADPRICEINVALID(refVal_setMINADPRICEINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("GTIN_INVALID"))))
    {
        int32_t refVal_setGTININVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("GTIN_INVALID"))), refVal_setGTININVALID );
        setGTININVALID(refVal_setGTININVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("INCONSISTENT_CURRENCY_VALUES"))))
    {
        int32_t refVal_setINCONSISTENTCURRENCYVALUES;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("INCONSISTENT_CURRENCY_VALUES"))), refVal_setINCONSISTENTCURRENCYVALUES );
        setINCONSISTENTCURRENCYVALUES(refVal_setINCONSISTENTCURRENCYVALUES);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("SALES_PRICE_TOO_LOW"))))
    {
        int32_t refVal_setSALESPRICETOOLOW;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("SALES_PRICE_TOO_LOW"))), refVal_setSALESPRICETOOLOW );
        setSALESPRICETOOLOW(refVal_setSALESPRICETOOLOW);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("SHIPPING_WIDTH_INVALID"))))
    {
        int32_t refVal_setSHIPPINGWIDTHINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("SHIPPING_WIDTH_INVALID"))), refVal_setSHIPPINGWIDTHINVALID );
        setSHIPPINGWIDTHINVALID(refVal_setSHIPPINGWIDTHINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("SHIPPING_HEIGHT_INVALID"))))
    {
        int32_t refVal_setSHIPPINGHEIGHTINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("SHIPPING_HEIGHT_INVALID"))), refVal_setSHIPPINGHEIGHTINVALID );
        setSHIPPINGHEIGHTINVALID(refVal_setSHIPPINGHEIGHTINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("SALES_PRICE_TOO_HIGH"))))
    {
        int32_t refVal_setSALESPRICETOOHIGH;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("SALES_PRICE_TOO_HIGH"))), refVal_setSALESPRICETOOHIGH );
        setSALESPRICETOOHIGH(refVal_setSALESPRICETOOHIGH);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MPN_INVALID"))))
    {
        int32_t refVal_setMPNINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MPN_INVALID"))), refVal_setMPNINVALID );
        setMPNINVALID(refVal_setMPNINVALID);
    }
    return ok;
}

int32_t CatalogsFeedValidationWarnings::getADLINKFORMATWARNING() const
{
    return m_AD_LINK_FORMAT_WARNING;
}

void CatalogsFeedValidationWarnings::setADLINKFORMATWARNING(int32_t value)
{
    m_AD_LINK_FORMAT_WARNING = value;
    m_AD_LINK_FORMAT_WARNINGIsSet = true;
}

bool CatalogsFeedValidationWarnings::aDLINKFORMATWARNINGIsSet() const
{
    return m_AD_LINK_FORMAT_WARNINGIsSet;
}

void CatalogsFeedValidationWarnings::unsetAD_LINK_FORMAT_WARNING()
{
    m_AD_LINK_FORMAT_WARNINGIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getADLINKSAMEASLINK() const
{
    return m_AD_LINK_SAME_AS_LINK;
}

void CatalogsFeedValidationWarnings::setADLINKSAMEASLINK(int32_t value)
{
    m_AD_LINK_SAME_AS_LINK = value;
    m_AD_LINK_SAME_AS_LINKIsSet = true;
}

bool CatalogsFeedValidationWarnings::aDLINKSAMEASLINKIsSet() const
{
    return m_AD_LINK_SAME_AS_LINKIsSet;
}

void CatalogsFeedValidationWarnings::unsetAD_LINK_SAME_AS_LINK()
{
    m_AD_LINK_SAME_AS_LINKIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getTITLELENGTHTOOLONG() const
{
    return m_TITLE_LENGTH_TOO_LONG;
}

void CatalogsFeedValidationWarnings::setTITLELENGTHTOOLONG(int32_t value)
{
    m_TITLE_LENGTH_TOO_LONG = value;
    m_TITLE_LENGTH_TOO_LONGIsSet = true;
}

bool CatalogsFeedValidationWarnings::tITLELENGTHTOOLONGIsSet() const
{
    return m_TITLE_LENGTH_TOO_LONGIsSet;
}

void CatalogsFeedValidationWarnings::unsetTITLE_LENGTH_TOO_LONG()
{
    m_TITLE_LENGTH_TOO_LONGIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getDESCRIPTIONLENGTHTOOLONG() const
{
    return m_DESCRIPTION_LENGTH_TOO_LONG;
}

void CatalogsFeedValidationWarnings::setDESCRIPTIONLENGTHTOOLONG(int32_t value)
{
    m_DESCRIPTION_LENGTH_TOO_LONG = value;
    m_DESCRIPTION_LENGTH_TOO_LONGIsSet = true;
}

bool CatalogsFeedValidationWarnings::dESCRIPTIONLENGTHTOOLONGIsSet() const
{
    return m_DESCRIPTION_LENGTH_TOO_LONGIsSet;
}

void CatalogsFeedValidationWarnings::unsetDESCRIPTION_LENGTH_TOO_LONG()
{
    m_DESCRIPTION_LENGTH_TOO_LONGIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getGENDERINVALID() const
{
    return m_GENDER_INVALID;
}

void CatalogsFeedValidationWarnings::setGENDERINVALID(int32_t value)
{
    m_GENDER_INVALID = value;
    m_GENDER_INVALIDIsSet = true;
}

bool CatalogsFeedValidationWarnings::gENDERINVALIDIsSet() const
{
    return m_GENDER_INVALIDIsSet;
}

void CatalogsFeedValidationWarnings::unsetGENDER_INVALID()
{
    m_GENDER_INVALIDIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getAGEGROUPINVALID() const
{
    return m_AGE_GROUP_INVALID;
}

void CatalogsFeedValidationWarnings::setAGEGROUPINVALID(int32_t value)
{
    m_AGE_GROUP_INVALID = value;
    m_AGE_GROUP_INVALIDIsSet = true;
}

bool CatalogsFeedValidationWarnings::aGEGROUPINVALIDIsSet() const
{
    return m_AGE_GROUP_INVALIDIsSet;
}

void CatalogsFeedValidationWarnings::unsetAGE_GROUP_INVALID()
{
    m_AGE_GROUP_INVALIDIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getSIZETYPEINVALID() const
{
    return m_SIZE_TYPE_INVALID;
}

void CatalogsFeedValidationWarnings::setSIZETYPEINVALID(int32_t value)
{
    m_SIZE_TYPE_INVALID = value;
    m_SIZE_TYPE_INVALIDIsSet = true;
}

bool CatalogsFeedValidationWarnings::sIZETYPEINVALIDIsSet() const
{
    return m_SIZE_TYPE_INVALIDIsSet;
}

void CatalogsFeedValidationWarnings::unsetSIZE_TYPE_INVALID()
{
    m_SIZE_TYPE_INVALIDIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getSIZESYSTEMINVALID() const
{
    return m_SIZE_SYSTEM_INVALID;
}

void CatalogsFeedValidationWarnings::setSIZESYSTEMINVALID(int32_t value)
{
    m_SIZE_SYSTEM_INVALID = value;
    m_SIZE_SYSTEM_INVALIDIsSet = true;
}

bool CatalogsFeedValidationWarnings::sIZESYSTEMINVALIDIsSet() const
{
    return m_SIZE_SYSTEM_INVALIDIsSet;
}

void CatalogsFeedValidationWarnings::unsetSIZE_SYSTEM_INVALID()
{
    m_SIZE_SYSTEM_INVALIDIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getLINKFORMATWARNING() const
{
    return m_LINK_FORMAT_WARNING;
}

void CatalogsFeedValidationWarnings::setLINKFORMATWARNING(int32_t value)
{
    m_LINK_FORMAT_WARNING = value;
    m_LINK_FORMAT_WARNINGIsSet = true;
}

bool CatalogsFeedValidationWarnings::lINKFORMATWARNINGIsSet() const
{
    return m_LINK_FORMAT_WARNINGIsSet;
}

void CatalogsFeedValidationWarnings::unsetLINK_FORMAT_WARNING()
{
    m_LINK_FORMAT_WARNINGIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getSALESPRICEINVALID() const
{
    return m_SALES_PRICE_INVALID;
}

void CatalogsFeedValidationWarnings::setSALESPRICEINVALID(int32_t value)
{
    m_SALES_PRICE_INVALID = value;
    m_SALES_PRICE_INVALIDIsSet = true;
}

bool CatalogsFeedValidationWarnings::sALESPRICEINVALIDIsSet() const
{
    return m_SALES_PRICE_INVALIDIsSet;
}

void CatalogsFeedValidationWarnings::unsetSALES_PRICE_INVALID()
{
    m_SALES_PRICE_INVALIDIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getPRODUCTCATEGORYDEPTHWARNING() const
{
    return m_PRODUCT_CATEGORY_DEPTH_WARNING;
}

void CatalogsFeedValidationWarnings::setPRODUCTCATEGORYDEPTHWARNING(int32_t value)
{
    m_PRODUCT_CATEGORY_DEPTH_WARNING = value;
    m_PRODUCT_CATEGORY_DEPTH_WARNINGIsSet = true;
}

bool CatalogsFeedValidationWarnings::pRODUCTCATEGORYDEPTHWARNINGIsSet() const
{
    return m_PRODUCT_CATEGORY_DEPTH_WARNINGIsSet;
}

void CatalogsFeedValidationWarnings::unsetPRODUCT_CATEGORY_DEPTH_WARNING()
{
    m_PRODUCT_CATEGORY_DEPTH_WARNINGIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getADWORDSFORMATWARNING() const
{
    return m_ADWORDS_FORMAT_WARNING;
}

void CatalogsFeedValidationWarnings::setADWORDSFORMATWARNING(int32_t value)
{
    m_ADWORDS_FORMAT_WARNING = value;
    m_ADWORDS_FORMAT_WARNINGIsSet = true;
}

bool CatalogsFeedValidationWarnings::aDWORDSFORMATWARNINGIsSet() const
{
    return m_ADWORDS_FORMAT_WARNINGIsSet;
}

void CatalogsFeedValidationWarnings::unsetADWORDS_FORMAT_WARNING()
{
    m_ADWORDS_FORMAT_WARNINGIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getADWORDSSAMEASLINK() const
{
    return m_ADWORDS_SAME_AS_LINK;
}

void CatalogsFeedValidationWarnings::setADWORDSSAMEASLINK(int32_t value)
{
    m_ADWORDS_SAME_AS_LINK = value;
    m_ADWORDS_SAME_AS_LINKIsSet = true;
}

bool CatalogsFeedValidationWarnings::aDWORDSSAMEASLINKIsSet() const
{
    return m_ADWORDS_SAME_AS_LINKIsSet;
}

void CatalogsFeedValidationWarnings::unsetADWORDS_SAME_AS_LINK()
{
    m_ADWORDS_SAME_AS_LINKIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getDUPLICATEHEADERS() const
{
    return m_DUPLICATE_HEADERS;
}

void CatalogsFeedValidationWarnings::setDUPLICATEHEADERS(int32_t value)
{
    m_DUPLICATE_HEADERS = value;
    m_DUPLICATE_HEADERSIsSet = true;
}

bool CatalogsFeedValidationWarnings::dUPLICATEHEADERSIsSet() const
{
    return m_DUPLICATE_HEADERSIsSet;
}

void CatalogsFeedValidationWarnings::unsetDUPLICATE_HEADERS()
{
    m_DUPLICATE_HEADERSIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getFETCHSAMESIGNATURE() const
{
    return m_FETCH_SAME_SIGNATURE;
}

void CatalogsFeedValidationWarnings::setFETCHSAMESIGNATURE(int32_t value)
{
    m_FETCH_SAME_SIGNATURE = value;
    m_FETCH_SAME_SIGNATUREIsSet = true;
}

bool CatalogsFeedValidationWarnings::fETCHSAMESIGNATUREIsSet() const
{
    return m_FETCH_SAME_SIGNATUREIsSet;
}

void CatalogsFeedValidationWarnings::unsetFETCH_SAME_SIGNATURE()
{
    m_FETCH_SAME_SIGNATUREIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getADDITIONALIMAGELINKLENGTHTOOLONG() const
{
    return m_ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG;
}

void CatalogsFeedValidationWarnings::setADDITIONALIMAGELINKLENGTHTOOLONG(int32_t value)
{
    m_ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG = value;
    m_ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONGIsSet = true;
}

bool CatalogsFeedValidationWarnings::aDDITIONALIMAGELINKLENGTHTOOLONGIsSet() const
{
    return m_ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONGIsSet;
}

void CatalogsFeedValidationWarnings::unsetADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG()
{
    m_ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONGIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getADDITIONALIMAGELINKWARNING() const
{
    return m_ADDITIONAL_IMAGE_LINK_WARNING;
}

void CatalogsFeedValidationWarnings::setADDITIONALIMAGELINKWARNING(int32_t value)
{
    m_ADDITIONAL_IMAGE_LINK_WARNING = value;
    m_ADDITIONAL_IMAGE_LINK_WARNINGIsSet = true;
}

bool CatalogsFeedValidationWarnings::aDDITIONALIMAGELINKWARNINGIsSet() const
{
    return m_ADDITIONAL_IMAGE_LINK_WARNINGIsSet;
}

void CatalogsFeedValidationWarnings::unsetADDITIONAL_IMAGE_LINK_WARNING()
{
    m_ADDITIONAL_IMAGE_LINK_WARNINGIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getIMAGELINKWARNING() const
{
    return m_IMAGE_LINK_WARNING;
}

void CatalogsFeedValidationWarnings::setIMAGELINKWARNING(int32_t value)
{
    m_IMAGE_LINK_WARNING = value;
    m_IMAGE_LINK_WARNINGIsSet = true;
}

bool CatalogsFeedValidationWarnings::iMAGELINKWARNINGIsSet() const
{
    return m_IMAGE_LINK_WARNINGIsSet;
}

void CatalogsFeedValidationWarnings::unsetIMAGE_LINK_WARNING()
{
    m_IMAGE_LINK_WARNINGIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getSHIPPINGINVALID() const
{
    return m_SHIPPING_INVALID;
}

void CatalogsFeedValidationWarnings::setSHIPPINGINVALID(int32_t value)
{
    m_SHIPPING_INVALID = value;
    m_SHIPPING_INVALIDIsSet = true;
}

bool CatalogsFeedValidationWarnings::sHIPPINGINVALIDIsSet() const
{
    return m_SHIPPING_INVALIDIsSet;
}

void CatalogsFeedValidationWarnings::unsetSHIPPING_INVALID()
{
    m_SHIPPING_INVALIDIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getTAXINVALID() const
{
    return m_TAX_INVALID;
}

void CatalogsFeedValidationWarnings::setTAXINVALID(int32_t value)
{
    m_TAX_INVALID = value;
    m_TAX_INVALIDIsSet = true;
}

bool CatalogsFeedValidationWarnings::tAXINVALIDIsSet() const
{
    return m_TAX_INVALIDIsSet;
}

void CatalogsFeedValidationWarnings::unsetTAX_INVALID()
{
    m_TAX_INVALIDIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getSHIPPINGWEIGHTINVALID() const
{
    return m_SHIPPING_WEIGHT_INVALID;
}

void CatalogsFeedValidationWarnings::setSHIPPINGWEIGHTINVALID(int32_t value)
{
    m_SHIPPING_WEIGHT_INVALID = value;
    m_SHIPPING_WEIGHT_INVALIDIsSet = true;
}

bool CatalogsFeedValidationWarnings::sHIPPINGWEIGHTINVALIDIsSet() const
{
    return m_SHIPPING_WEIGHT_INVALIDIsSet;
}

void CatalogsFeedValidationWarnings::unsetSHIPPING_WEIGHT_INVALID()
{
    m_SHIPPING_WEIGHT_INVALIDIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getEXPIRATIONDATEINVALID() const
{
    return m_EXPIRATION_DATE_INVALID;
}

void CatalogsFeedValidationWarnings::setEXPIRATIONDATEINVALID(int32_t value)
{
    m_EXPIRATION_DATE_INVALID = value;
    m_EXPIRATION_DATE_INVALIDIsSet = true;
}

bool CatalogsFeedValidationWarnings::eXPIRATIONDATEINVALIDIsSet() const
{
    return m_EXPIRATION_DATE_INVALIDIsSet;
}

void CatalogsFeedValidationWarnings::unsetEXPIRATION_DATE_INVALID()
{
    m_EXPIRATION_DATE_INVALIDIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getAVAILABILITYDATEINVALID() const
{
    return m_AVAILABILITY_DATE_INVALID;
}

void CatalogsFeedValidationWarnings::setAVAILABILITYDATEINVALID(int32_t value)
{
    m_AVAILABILITY_DATE_INVALID = value;
    m_AVAILABILITY_DATE_INVALIDIsSet = true;
}

bool CatalogsFeedValidationWarnings::aVAILABILITYDATEINVALIDIsSet() const
{
    return m_AVAILABILITY_DATE_INVALIDIsSet;
}

void CatalogsFeedValidationWarnings::unsetAVAILABILITY_DATE_INVALID()
{
    m_AVAILABILITY_DATE_INVALIDIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getSALEDATEINVALID() const
{
    return m_SALE_DATE_INVALID;
}

void CatalogsFeedValidationWarnings::setSALEDATEINVALID(int32_t value)
{
    m_SALE_DATE_INVALID = value;
    m_SALE_DATE_INVALIDIsSet = true;
}

bool CatalogsFeedValidationWarnings::sALEDATEINVALIDIsSet() const
{
    return m_SALE_DATE_INVALIDIsSet;
}

void CatalogsFeedValidationWarnings::unsetSALE_DATE_INVALID()
{
    m_SALE_DATE_INVALIDIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getWEIGHTUNITINVALID() const
{
    return m_WEIGHT_UNIT_INVALID;
}

void CatalogsFeedValidationWarnings::setWEIGHTUNITINVALID(int32_t value)
{
    m_WEIGHT_UNIT_INVALID = value;
    m_WEIGHT_UNIT_INVALIDIsSet = true;
}

bool CatalogsFeedValidationWarnings::wEIGHTUNITINVALIDIsSet() const
{
    return m_WEIGHT_UNIT_INVALIDIsSet;
}

void CatalogsFeedValidationWarnings::unsetWEIGHT_UNIT_INVALID()
{
    m_WEIGHT_UNIT_INVALIDIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getISBUNDLEINVALID() const
{
    return m_IS_BUNDLE_INVALID;
}

void CatalogsFeedValidationWarnings::setISBUNDLEINVALID(int32_t value)
{
    m_IS_BUNDLE_INVALID = value;
    m_IS_BUNDLE_INVALIDIsSet = true;
}

bool CatalogsFeedValidationWarnings::iSBUNDLEINVALIDIsSet() const
{
    return m_IS_BUNDLE_INVALIDIsSet;
}

void CatalogsFeedValidationWarnings::unsetIS_BUNDLE_INVALID()
{
    m_IS_BUNDLE_INVALIDIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getUPDATEDTIMEINVALID() const
{
    return m_UPDATED_TIME_INVALID;
}

void CatalogsFeedValidationWarnings::setUPDATEDTIMEINVALID(int32_t value)
{
    m_UPDATED_TIME_INVALID = value;
    m_UPDATED_TIME_INVALIDIsSet = true;
}

bool CatalogsFeedValidationWarnings::uPDATEDTIMEINVALIDIsSet() const
{
    return m_UPDATED_TIME_INVALIDIsSet;
}

void CatalogsFeedValidationWarnings::unsetUPDATED_TIME_INVALID()
{
    m_UPDATED_TIME_INVALIDIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getCUSTOMLABELLENGTHTOOLONG() const
{
    return m_CUSTOM_LABEL_LENGTH_TOO_LONG;
}

void CatalogsFeedValidationWarnings::setCUSTOMLABELLENGTHTOOLONG(int32_t value)
{
    m_CUSTOM_LABEL_LENGTH_TOO_LONG = value;
    m_CUSTOM_LABEL_LENGTH_TOO_LONGIsSet = true;
}

bool CatalogsFeedValidationWarnings::cUSTOMLABELLENGTHTOOLONGIsSet() const
{
    return m_CUSTOM_LABEL_LENGTH_TOO_LONGIsSet;
}

void CatalogsFeedValidationWarnings::unsetCUSTOM_LABEL_LENGTH_TOO_LONG()
{
    m_CUSTOM_LABEL_LENGTH_TOO_LONGIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getPRODUCTTYPELENGTHTOOLONG() const
{
    return m_PRODUCT_TYPE_LENGTH_TOO_LONG;
}

void CatalogsFeedValidationWarnings::setPRODUCTTYPELENGTHTOOLONG(int32_t value)
{
    m_PRODUCT_TYPE_LENGTH_TOO_LONG = value;
    m_PRODUCT_TYPE_LENGTH_TOO_LONGIsSet = true;
}

bool CatalogsFeedValidationWarnings::pRODUCTTYPELENGTHTOOLONGIsSet() const
{
    return m_PRODUCT_TYPE_LENGTH_TOO_LONGIsSet;
}

void CatalogsFeedValidationWarnings::unsetPRODUCT_TYPE_LENGTH_TOO_LONG()
{
    m_PRODUCT_TYPE_LENGTH_TOO_LONGIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getTOOMANYADDITIONALIMAGELINKS() const
{
    return m_TOO_MANY_ADDITIONAL_IMAGE_LINKS;
}

void CatalogsFeedValidationWarnings::setTOOMANYADDITIONALIMAGELINKS(int32_t value)
{
    m_TOO_MANY_ADDITIONAL_IMAGE_LINKS = value;
    m_TOO_MANY_ADDITIONAL_IMAGE_LINKSIsSet = true;
}

bool CatalogsFeedValidationWarnings::tOOMANYADDITIONALIMAGELINKSIsSet() const
{
    return m_TOO_MANY_ADDITIONAL_IMAGE_LINKSIsSet;
}

void CatalogsFeedValidationWarnings::unsetTOO_MANY_ADDITIONAL_IMAGE_LINKS()
{
    m_TOO_MANY_ADDITIONAL_IMAGE_LINKSIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getMULTIPACKINVALID() const
{
    return m_MULTIPACK_INVALID;
}

void CatalogsFeedValidationWarnings::setMULTIPACKINVALID(int32_t value)
{
    m_MULTIPACK_INVALID = value;
    m_MULTIPACK_INVALIDIsSet = true;
}

bool CatalogsFeedValidationWarnings::mULTIPACKINVALIDIsSet() const
{
    return m_MULTIPACK_INVALIDIsSet;
}

void CatalogsFeedValidationWarnings::unsetMULTIPACK_INVALID()
{
    m_MULTIPACK_INVALIDIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getINDEXEDPRODUCTCOUNTLARGEDELTA() const
{
    return m_INDEXED_PRODUCT_COUNT_LARGE_DELTA;
}

void CatalogsFeedValidationWarnings::setINDEXEDPRODUCTCOUNTLARGEDELTA(int32_t value)
{
    m_INDEXED_PRODUCT_COUNT_LARGE_DELTA = value;
    m_INDEXED_PRODUCT_COUNT_LARGE_DELTAIsSet = true;
}

bool CatalogsFeedValidationWarnings::iNDEXEDPRODUCTCOUNTLARGEDELTAIsSet() const
{
    return m_INDEXED_PRODUCT_COUNT_LARGE_DELTAIsSet;
}

void CatalogsFeedValidationWarnings::unsetINDEXED_PRODUCT_COUNT_LARGE_DELTA()
{
    m_INDEXED_PRODUCT_COUNT_LARGE_DELTAIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getITEMADDITIONALIMAGEDOWNLOADFAILURE() const
{
    return m_ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE;
}

void CatalogsFeedValidationWarnings::setITEMADDITIONALIMAGEDOWNLOADFAILURE(int32_t value)
{
    m_ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE = value;
    m_ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILUREIsSet = true;
}

bool CatalogsFeedValidationWarnings::iTEMADDITIONALIMAGEDOWNLOADFAILUREIsSet() const
{
    return m_ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILUREIsSet;
}

void CatalogsFeedValidationWarnings::unsetITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE()
{
    m_ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILUREIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getOPTIONALPRODUCTCATEGORYMISSING() const
{
    return m_OPTIONAL_PRODUCT_CATEGORY_MISSING;
}

void CatalogsFeedValidationWarnings::setOPTIONALPRODUCTCATEGORYMISSING(int32_t value)
{
    m_OPTIONAL_PRODUCT_CATEGORY_MISSING = value;
    m_OPTIONAL_PRODUCT_CATEGORY_MISSINGIsSet = true;
}

bool CatalogsFeedValidationWarnings::oPTIONALPRODUCTCATEGORYMISSINGIsSet() const
{
    return m_OPTIONAL_PRODUCT_CATEGORY_MISSINGIsSet;
}

void CatalogsFeedValidationWarnings::unsetOPTIONAL_PRODUCT_CATEGORY_MISSING()
{
    m_OPTIONAL_PRODUCT_CATEGORY_MISSINGIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getOPTIONALPRODUCTCATEGORYINVALID() const
{
    return m_OPTIONAL_PRODUCT_CATEGORY_INVALID;
}

void CatalogsFeedValidationWarnings::setOPTIONALPRODUCTCATEGORYINVALID(int32_t value)
{
    m_OPTIONAL_PRODUCT_CATEGORY_INVALID = value;
    m_OPTIONAL_PRODUCT_CATEGORY_INVALIDIsSet = true;
}

bool CatalogsFeedValidationWarnings::oPTIONALPRODUCTCATEGORYINVALIDIsSet() const
{
    return m_OPTIONAL_PRODUCT_CATEGORY_INVALIDIsSet;
}

void CatalogsFeedValidationWarnings::unsetOPTIONAL_PRODUCT_CATEGORY_INVALID()
{
    m_OPTIONAL_PRODUCT_CATEGORY_INVALIDIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getOPTIONALCONDITIONMISSING() const
{
    return m_OPTIONAL_CONDITION_MISSING;
}

void CatalogsFeedValidationWarnings::setOPTIONALCONDITIONMISSING(int32_t value)
{
    m_OPTIONAL_CONDITION_MISSING = value;
    m_OPTIONAL_CONDITION_MISSINGIsSet = true;
}

bool CatalogsFeedValidationWarnings::oPTIONALCONDITIONMISSINGIsSet() const
{
    return m_OPTIONAL_CONDITION_MISSINGIsSet;
}

void CatalogsFeedValidationWarnings::unsetOPTIONAL_CONDITION_MISSING()
{
    m_OPTIONAL_CONDITION_MISSINGIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getOPTIONALCONDITIONINVALID() const
{
    return m_OPTIONAL_CONDITION_INVALID;
}

void CatalogsFeedValidationWarnings::setOPTIONALCONDITIONINVALID(int32_t value)
{
    m_OPTIONAL_CONDITION_INVALID = value;
    m_OPTIONAL_CONDITION_INVALIDIsSet = true;
}

bool CatalogsFeedValidationWarnings::oPTIONALCONDITIONINVALIDIsSet() const
{
    return m_OPTIONAL_CONDITION_INVALIDIsSet;
}

void CatalogsFeedValidationWarnings::unsetOPTIONAL_CONDITION_INVALID()
{
    m_OPTIONAL_CONDITION_INVALIDIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getIOSDEEPLINKINVALID() const
{
    return m_IOS_DEEP_LINK_INVALID;
}

void CatalogsFeedValidationWarnings::setIOSDEEPLINKINVALID(int32_t value)
{
    m_IOS_DEEP_LINK_INVALID = value;
    m_IOS_DEEP_LINK_INVALIDIsSet = true;
}

bool CatalogsFeedValidationWarnings::iOSDEEPLINKINVALIDIsSet() const
{
    return m_IOS_DEEP_LINK_INVALIDIsSet;
}

void CatalogsFeedValidationWarnings::unsetIOS_DEEP_LINK_INVALID()
{
    m_IOS_DEEP_LINK_INVALIDIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getANDROIDDEEPLINKINVALID() const
{
    return m_ANDROID_DEEP_LINK_INVALID;
}

void CatalogsFeedValidationWarnings::setANDROIDDEEPLINKINVALID(int32_t value)
{
    m_ANDROID_DEEP_LINK_INVALID = value;
    m_ANDROID_DEEP_LINK_INVALIDIsSet = true;
}

bool CatalogsFeedValidationWarnings::aNDROIDDEEPLINKINVALIDIsSet() const
{
    return m_ANDROID_DEEP_LINK_INVALIDIsSet;
}

void CatalogsFeedValidationWarnings::unsetANDROID_DEEP_LINK_INVALID()
{
    m_ANDROID_DEEP_LINK_INVALIDIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getUTMSOURCEAUTOCORRECTED() const
{
    return m_UTM_SOURCE_AUTO_CORRECTED;
}

void CatalogsFeedValidationWarnings::setUTMSOURCEAUTOCORRECTED(int32_t value)
{
    m_UTM_SOURCE_AUTO_CORRECTED = value;
    m_UTM_SOURCE_AUTO_CORRECTEDIsSet = true;
}

bool CatalogsFeedValidationWarnings::uTMSOURCEAUTOCORRECTEDIsSet() const
{
    return m_UTM_SOURCE_AUTO_CORRECTEDIsSet;
}

void CatalogsFeedValidationWarnings::unsetUTM_SOURCE_AUTO_CORRECTED()
{
    m_UTM_SOURCE_AUTO_CORRECTEDIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getCOUNTRYDOESNOTMAPTOCURRENCY() const
{
    return m_COUNTRY_DOES_NOT_MAP_TO_CURRENCY;
}

void CatalogsFeedValidationWarnings::setCOUNTRYDOESNOTMAPTOCURRENCY(int32_t value)
{
    m_COUNTRY_DOES_NOT_MAP_TO_CURRENCY = value;
    m_COUNTRY_DOES_NOT_MAP_TO_CURRENCYIsSet = true;
}

bool CatalogsFeedValidationWarnings::cOUNTRYDOESNOTMAPTOCURRENCYIsSet() const
{
    return m_COUNTRY_DOES_NOT_MAP_TO_CURRENCYIsSet;
}

void CatalogsFeedValidationWarnings::unsetCOUNTRY_DOES_NOT_MAP_TO_CURRENCY()
{
    m_COUNTRY_DOES_NOT_MAP_TO_CURRENCYIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getMINADPRICEINVALID() const
{
    return m_MIN_AD_PRICE_INVALID;
}

void CatalogsFeedValidationWarnings::setMINADPRICEINVALID(int32_t value)
{
    m_MIN_AD_PRICE_INVALID = value;
    m_MIN_AD_PRICE_INVALIDIsSet = true;
}

bool CatalogsFeedValidationWarnings::mINADPRICEINVALIDIsSet() const
{
    return m_MIN_AD_PRICE_INVALIDIsSet;
}

void CatalogsFeedValidationWarnings::unsetMIN_AD_PRICE_INVALID()
{
    m_MIN_AD_PRICE_INVALIDIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getGTININVALID() const
{
    return m_GTIN_INVALID;
}

void CatalogsFeedValidationWarnings::setGTININVALID(int32_t value)
{
    m_GTIN_INVALID = value;
    m_GTIN_INVALIDIsSet = true;
}

bool CatalogsFeedValidationWarnings::gTININVALIDIsSet() const
{
    return m_GTIN_INVALIDIsSet;
}

void CatalogsFeedValidationWarnings::unsetGTIN_INVALID()
{
    m_GTIN_INVALIDIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getINCONSISTENTCURRENCYVALUES() const
{
    return m_INCONSISTENT_CURRENCY_VALUES;
}

void CatalogsFeedValidationWarnings::setINCONSISTENTCURRENCYVALUES(int32_t value)
{
    m_INCONSISTENT_CURRENCY_VALUES = value;
    m_INCONSISTENT_CURRENCY_VALUESIsSet = true;
}

bool CatalogsFeedValidationWarnings::iNCONSISTENTCURRENCYVALUESIsSet() const
{
    return m_INCONSISTENT_CURRENCY_VALUESIsSet;
}

void CatalogsFeedValidationWarnings::unsetINCONSISTENT_CURRENCY_VALUES()
{
    m_INCONSISTENT_CURRENCY_VALUESIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getSALESPRICETOOLOW() const
{
    return m_SALES_PRICE_TOO_LOW;
}

void CatalogsFeedValidationWarnings::setSALESPRICETOOLOW(int32_t value)
{
    m_SALES_PRICE_TOO_LOW = value;
    m_SALES_PRICE_TOO_LOWIsSet = true;
}

bool CatalogsFeedValidationWarnings::sALESPRICETOOLOWIsSet() const
{
    return m_SALES_PRICE_TOO_LOWIsSet;
}

void CatalogsFeedValidationWarnings::unsetSALES_PRICE_TOO_LOW()
{
    m_SALES_PRICE_TOO_LOWIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getSHIPPINGWIDTHINVALID() const
{
    return m_SHIPPING_WIDTH_INVALID;
}

void CatalogsFeedValidationWarnings::setSHIPPINGWIDTHINVALID(int32_t value)
{
    m_SHIPPING_WIDTH_INVALID = value;
    m_SHIPPING_WIDTH_INVALIDIsSet = true;
}

bool CatalogsFeedValidationWarnings::sHIPPINGWIDTHINVALIDIsSet() const
{
    return m_SHIPPING_WIDTH_INVALIDIsSet;
}

void CatalogsFeedValidationWarnings::unsetSHIPPING_WIDTH_INVALID()
{
    m_SHIPPING_WIDTH_INVALIDIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getSHIPPINGHEIGHTINVALID() const
{
    return m_SHIPPING_HEIGHT_INVALID;
}

void CatalogsFeedValidationWarnings::setSHIPPINGHEIGHTINVALID(int32_t value)
{
    m_SHIPPING_HEIGHT_INVALID = value;
    m_SHIPPING_HEIGHT_INVALIDIsSet = true;
}

bool CatalogsFeedValidationWarnings::sHIPPINGHEIGHTINVALIDIsSet() const
{
    return m_SHIPPING_HEIGHT_INVALIDIsSet;
}

void CatalogsFeedValidationWarnings::unsetSHIPPING_HEIGHT_INVALID()
{
    m_SHIPPING_HEIGHT_INVALIDIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getSALESPRICETOOHIGH() const
{
    return m_SALES_PRICE_TOO_HIGH;
}

void CatalogsFeedValidationWarnings::setSALESPRICETOOHIGH(int32_t value)
{
    m_SALES_PRICE_TOO_HIGH = value;
    m_SALES_PRICE_TOO_HIGHIsSet = true;
}

bool CatalogsFeedValidationWarnings::sALESPRICETOOHIGHIsSet() const
{
    return m_SALES_PRICE_TOO_HIGHIsSet;
}

void CatalogsFeedValidationWarnings::unsetSALES_PRICE_TOO_HIGH()
{
    m_SALES_PRICE_TOO_HIGHIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getMPNINVALID() const
{
    return m_MPN_INVALID;
}

void CatalogsFeedValidationWarnings::setMPNINVALID(int32_t value)
{
    m_MPN_INVALID = value;
    m_MPN_INVALIDIsSet = true;
}

bool CatalogsFeedValidationWarnings::mPNINVALIDIsSet() const
{
    return m_MPN_INVALIDIsSet;
}

void CatalogsFeedValidationWarnings::unsetMPN_INVALID()
{
    m_MPN_INVALIDIsSet = false;
}
}
}
}
}


