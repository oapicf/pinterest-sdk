/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ConversionApiResponse.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ConversionApiResponse::ConversionApiResponse()
{
    m_Num_events_received = 0;
    m_Num_events_receivedIsSet = false;
    m_Num_events_processed = 0;
    m_Num_events_processedIsSet = false;
    m_EventsIsSet = false;
}

ConversionApiResponse::~ConversionApiResponse()
{
}

void ConversionApiResponse::validate()
{
    // TODO: implement validation
}

web::json::value ConversionApiResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Num_events_receivedIsSet)
    {
        val[utility::conversions::to_string_t(U("num_events_received"))] = ModelBase::toJson(m_Num_events_received);
    }
    if(m_Num_events_processedIsSet)
    {
        val[utility::conversions::to_string_t(U("num_events_processed"))] = ModelBase::toJson(m_Num_events_processed);
    }
    if(m_EventsIsSet)
    {
        val[utility::conversions::to_string_t(U("events"))] = ModelBase::toJson(m_Events);
    }

    return val;
}

bool ConversionApiResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("num_events_received"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("num_events_received")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setNumEventsReceived;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNumEventsReceived);
            setNumEventsReceived(refVal_setNumEventsReceived);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("num_events_processed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("num_events_processed")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setNumEventsProcessed;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNumEventsProcessed);
            setNumEventsProcessed(refVal_setNumEventsProcessed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("events"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("events")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ConversionApiResponse_events_inner>> refVal_setEvents;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEvents);
            setEvents(refVal_setEvents);
        }
    }
    return ok;
}

void ConversionApiResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Num_events_receivedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("num_events_received")), m_Num_events_received));
    }
    if(m_Num_events_processedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("num_events_processed")), m_Num_events_processed));
    }
    if(m_EventsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("events")), m_Events));
    }
}

bool ConversionApiResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("num_events_received"))))
    {
        int32_t refVal_setNumEventsReceived;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("num_events_received"))), refVal_setNumEventsReceived );
        setNumEventsReceived(refVal_setNumEventsReceived);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("num_events_processed"))))
    {
        int32_t refVal_setNumEventsProcessed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("num_events_processed"))), refVal_setNumEventsProcessed );
        setNumEventsProcessed(refVal_setNumEventsProcessed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("events"))))
    {
        std::vector<std::shared_ptr<ConversionApiResponse_events_inner>> refVal_setEvents;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("events"))), refVal_setEvents );
        setEvents(refVal_setEvents);
    }
    return ok;
}

int32_t ConversionApiResponse::getNumEventsReceived() const
{
    return m_Num_events_received;
}

void ConversionApiResponse::setNumEventsReceived(int32_t value)
{
    m_Num_events_received = value;
    m_Num_events_receivedIsSet = true;
}

bool ConversionApiResponse::numEventsReceivedIsSet() const
{
    return m_Num_events_receivedIsSet;
}

void ConversionApiResponse::unsetNum_events_received()
{
    m_Num_events_receivedIsSet = false;
}
int32_t ConversionApiResponse::getNumEventsProcessed() const
{
    return m_Num_events_processed;
}

void ConversionApiResponse::setNumEventsProcessed(int32_t value)
{
    m_Num_events_processed = value;
    m_Num_events_processedIsSet = true;
}

bool ConversionApiResponse::numEventsProcessedIsSet() const
{
    return m_Num_events_processedIsSet;
}

void ConversionApiResponse::unsetNum_events_processed()
{
    m_Num_events_processedIsSet = false;
}
std::vector<std::shared_ptr<ConversionApiResponse_events_inner>>& ConversionApiResponse::getEvents()
{
    return m_Events;
}

void ConversionApiResponse::setEvents(const std::vector<std::shared_ptr<ConversionApiResponse_events_inner>>& value)
{
    m_Events = value;
    m_EventsIsSet = true;
}

bool ConversionApiResponse::eventsIsSet() const
{
    return m_EventsIsSet;
}

void ConversionApiResponse::unsetEvents()
{
    m_EventsIsSet = false;
}
}
}
}
}


