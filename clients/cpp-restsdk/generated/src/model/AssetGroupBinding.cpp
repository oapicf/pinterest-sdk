/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AssetGroupBinding.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AssetGroupBinding::AssetGroupBinding()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Asset_group_name = utility::conversions::to_string_t("");
    m_Asset_group_nameIsSet = false;
    m_Asset_group_description = utility::conversions::to_string_t("");
    m_Asset_group_descriptionIsSet = false;
    m_Asset_group_typesIsSet = false;
    m_Ad_accounts_idsIsSet = false;
    m_Profiles_idsIsSet = false;
    m_Created_time = 0;
    m_Created_timeIsSet = false;
    m_Updated_time = 0;
    m_Updated_timeIsSet = false;
    m_OwnerIsSet = false;
    m_Created_byIsSet = false;
}

AssetGroupBinding::~AssetGroupBinding()
{
}

void AssetGroupBinding::validate()
{
    // TODO: implement validation
}

web::json::value AssetGroupBinding::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Asset_group_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("asset_group_name"))] = ModelBase::toJson(m_Asset_group_name);
    }
    if(m_Asset_group_descriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("asset_group_description"))] = ModelBase::toJson(m_Asset_group_description);
    }
    if(m_Asset_group_typesIsSet)
    {
        val[utility::conversions::to_string_t(U("asset_group_types"))] = ModelBase::toJson(m_Asset_group_types);
    }
    if(m_Ad_accounts_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("ad_accounts_ids"))] = ModelBase::toJson(m_Ad_accounts_ids);
    }
    if(m_Profiles_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("profiles_ids"))] = ModelBase::toJson(m_Profiles_ids);
    }
    if(m_Created_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("created_time"))] = ModelBase::toJson(m_Created_time);
    }
    if(m_Updated_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("updated_time"))] = ModelBase::toJson(m_Updated_time);
    }
    if(m_OwnerIsSet)
    {
        val[utility::conversions::to_string_t(U("owner"))] = ModelBase::toJson(m_Owner);
    }
    if(m_Created_byIsSet)
    {
        val[utility::conversions::to_string_t(U("created_by"))] = ModelBase::toJson(m_Created_by);
    }

    return val;
}

bool AssetGroupBinding::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("asset_group_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("asset_group_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssetGroupName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetGroupName);
            setAssetGroupName(refVal_setAssetGroupName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("asset_group_description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("asset_group_description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssetGroupDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetGroupDescription);
            setAssetGroupDescription(refVal_setAssetGroupDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("asset_group_types"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("asset_group_types")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setAssetGroupTypes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetGroupTypes);
            setAssetGroupTypes(refVal_setAssetGroupTypes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ad_accounts_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ad_accounts_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setAdAccountsIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdAccountsIds);
            setAdAccountsIds(refVal_setAdAccountsIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("profiles_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("profiles_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setProfilesIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProfilesIds);
            setProfilesIds(refVal_setProfilesIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_time")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCreatedTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedTime);
            setCreatedTime(refVal_setCreatedTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updated_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updated_time")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setUpdatedTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedTime);
            setUpdatedTime(refVal_setUpdatedTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("owner"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("owner")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BusinessAccessUserSummary> refVal_setOwner;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOwner);
            setOwner(refVal_setOwner);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_by"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_by")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BusinessAccessUserSummary> refVal_setCreatedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedBy);
            setCreatedBy(refVal_setCreatedBy);
        }
    }
    return ok;
}

void AssetGroupBinding::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Asset_group_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("asset_group_name")), m_Asset_group_name));
    }
    if(m_Asset_group_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("asset_group_description")), m_Asset_group_description));
    }
    if(m_Asset_group_typesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("asset_group_types")), m_Asset_group_types));
    }
    if(m_Ad_accounts_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ad_accounts_ids")), m_Ad_accounts_ids));
    }
    if(m_Profiles_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("profiles_ids")), m_Profiles_ids));
    }
    if(m_Created_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_time")), m_Created_time));
    }
    if(m_Updated_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updated_time")), m_Updated_time));
    }
    if(m_OwnerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("owner")), m_Owner));
    }
    if(m_Created_byIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_by")), m_Created_by));
    }
}

bool AssetGroupBinding::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("asset_group_name"))))
    {
        utility::string_t refVal_setAssetGroupName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("asset_group_name"))), refVal_setAssetGroupName );
        setAssetGroupName(refVal_setAssetGroupName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("asset_group_description"))))
    {
        utility::string_t refVal_setAssetGroupDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("asset_group_description"))), refVal_setAssetGroupDescription );
        setAssetGroupDescription(refVal_setAssetGroupDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("asset_group_types"))))
    {
        std::vector<utility::string_t> refVal_setAssetGroupTypes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("asset_group_types"))), refVal_setAssetGroupTypes );
        setAssetGroupTypes(refVal_setAssetGroupTypes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ad_accounts_ids"))))
    {
        std::vector<utility::string_t> refVal_setAdAccountsIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ad_accounts_ids"))), refVal_setAdAccountsIds );
        setAdAccountsIds(refVal_setAdAccountsIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("profiles_ids"))))
    {
        std::vector<utility::string_t> refVal_setProfilesIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("profiles_ids"))), refVal_setProfilesIds );
        setProfilesIds(refVal_setProfilesIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_time"))))
    {
        int32_t refVal_setCreatedTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_time"))), refVal_setCreatedTime );
        setCreatedTime(refVal_setCreatedTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updated_time"))))
    {
        int32_t refVal_setUpdatedTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updated_time"))), refVal_setUpdatedTime );
        setUpdatedTime(refVal_setUpdatedTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("owner"))))
    {
        std::shared_ptr<BusinessAccessUserSummary> refVal_setOwner;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("owner"))), refVal_setOwner );
        setOwner(refVal_setOwner);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_by"))))
    {
        std::shared_ptr<BusinessAccessUserSummary> refVal_setCreatedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_by"))), refVal_setCreatedBy );
        setCreatedBy(refVal_setCreatedBy);
    }
    return ok;
}

utility::string_t AssetGroupBinding::getId() const
{
    return m_Id;
}

void AssetGroupBinding::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool AssetGroupBinding::idIsSet() const
{
    return m_IdIsSet;
}

void AssetGroupBinding::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t AssetGroupBinding::getAssetGroupName() const
{
    return m_Asset_group_name;
}

void AssetGroupBinding::setAssetGroupName(const utility::string_t& value)
{
    m_Asset_group_name = value;
    m_Asset_group_nameIsSet = true;
}

bool AssetGroupBinding::assetGroupNameIsSet() const
{
    return m_Asset_group_nameIsSet;
}

void AssetGroupBinding::unsetAsset_group_name()
{
    m_Asset_group_nameIsSet = false;
}
utility::string_t AssetGroupBinding::getAssetGroupDescription() const
{
    return m_Asset_group_description;
}

void AssetGroupBinding::setAssetGroupDescription(const utility::string_t& value)
{
    m_Asset_group_description = value;
    m_Asset_group_descriptionIsSet = true;
}

bool AssetGroupBinding::assetGroupDescriptionIsSet() const
{
    return m_Asset_group_descriptionIsSet;
}

void AssetGroupBinding::unsetAsset_group_description()
{
    m_Asset_group_descriptionIsSet = false;
}
std::vector<utility::string_t>& AssetGroupBinding::getAssetGroupTypes()
{
    return m_Asset_group_types;
}

void AssetGroupBinding::setAssetGroupTypes(const std::vector<utility::string_t>& value)
{
    m_Asset_group_types = value;
    m_Asset_group_typesIsSet = true;
}

bool AssetGroupBinding::assetGroupTypesIsSet() const
{
    return m_Asset_group_typesIsSet;
}

void AssetGroupBinding::unsetAsset_group_types()
{
    m_Asset_group_typesIsSet = false;
}
std::vector<utility::string_t>& AssetGroupBinding::getAdAccountsIds()
{
    return m_Ad_accounts_ids;
}

void AssetGroupBinding::setAdAccountsIds(const std::vector<utility::string_t>& value)
{
    m_Ad_accounts_ids = value;
    m_Ad_accounts_idsIsSet = true;
}

bool AssetGroupBinding::adAccountsIdsIsSet() const
{
    return m_Ad_accounts_idsIsSet;
}

void AssetGroupBinding::unsetAd_accounts_ids()
{
    m_Ad_accounts_idsIsSet = false;
}
std::vector<utility::string_t>& AssetGroupBinding::getProfilesIds()
{
    return m_Profiles_ids;
}

void AssetGroupBinding::setProfilesIds(const std::vector<utility::string_t>& value)
{
    m_Profiles_ids = value;
    m_Profiles_idsIsSet = true;
}

bool AssetGroupBinding::profilesIdsIsSet() const
{
    return m_Profiles_idsIsSet;
}

void AssetGroupBinding::unsetProfiles_ids()
{
    m_Profiles_idsIsSet = false;
}
int32_t AssetGroupBinding::getCreatedTime() const
{
    return m_Created_time;
}

void AssetGroupBinding::setCreatedTime(int32_t value)
{
    m_Created_time = value;
    m_Created_timeIsSet = true;
}

bool AssetGroupBinding::createdTimeIsSet() const
{
    return m_Created_timeIsSet;
}

void AssetGroupBinding::unsetCreated_time()
{
    m_Created_timeIsSet = false;
}
int32_t AssetGroupBinding::getUpdatedTime() const
{
    return m_Updated_time;
}

void AssetGroupBinding::setUpdatedTime(int32_t value)
{
    m_Updated_time = value;
    m_Updated_timeIsSet = true;
}

bool AssetGroupBinding::updatedTimeIsSet() const
{
    return m_Updated_timeIsSet;
}

void AssetGroupBinding::unsetUpdated_time()
{
    m_Updated_timeIsSet = false;
}
std::shared_ptr<BusinessAccessUserSummary> AssetGroupBinding::getOwner() const
{
    return m_Owner;
}

void AssetGroupBinding::setOwner(const std::shared_ptr<BusinessAccessUserSummary>& value)
{
    m_Owner = value;
    m_OwnerIsSet = true;
}

bool AssetGroupBinding::ownerIsSet() const
{
    return m_OwnerIsSet;
}

void AssetGroupBinding::unsetOwner()
{
    m_OwnerIsSet = false;
}
std::shared_ptr<BusinessAccessUserSummary> AssetGroupBinding::getCreatedBy() const
{
    return m_Created_by;
}

void AssetGroupBinding::setCreatedBy(const std::shared_ptr<BusinessAccessUserSummary>& value)
{
    m_Created_by = value;
    m_Created_byIsSet = true;
}

bool AssetGroupBinding::createdByIsSet() const
{
    return m_Created_byIsSet;
}

void AssetGroupBinding::unsetCreated_by()
{
    m_Created_byIsSet = false;
}
}
}
}
}


