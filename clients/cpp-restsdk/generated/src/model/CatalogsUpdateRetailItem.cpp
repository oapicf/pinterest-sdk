/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CatalogsUpdateRetailItem.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CatalogsUpdateRetailItem::CatalogsUpdateRetailItem()
{
    m_Item_id = utility::conversions::to_string_t("");
    m_Item_idIsSet = false;
    m_Operation = utility::conversions::to_string_t("");
    m_OperationIsSet = false;
    m_AttributesIsSet = false;
    m_Update_maskIsSet = false;
}

CatalogsUpdateRetailItem::~CatalogsUpdateRetailItem()
{
}

void CatalogsUpdateRetailItem::validate()
{
    // TODO: implement validation
}

web::json::value CatalogsUpdateRetailItem::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Item_idIsSet)
    {
        val[utility::conversions::to_string_t(U("item_id"))] = ModelBase::toJson(m_Item_id);
    }
    if(m_OperationIsSet)
    {
        val[utility::conversions::to_string_t(U("operation"))] = ModelBase::toJson(m_Operation);
    }
    if(m_AttributesIsSet)
    {
        val[utility::conversions::to_string_t(U("attributes"))] = ModelBase::toJson(m_Attributes);
    }
    if(m_Update_maskIsSet)
    {
        val[utility::conversions::to_string_t(U("update_mask"))] = ModelBase::toJson(m_Update_mask);
    }

    return val;
}

bool CatalogsUpdateRetailItem::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("item_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("item_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setItemId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setItemId);
            setItemId(refVal_setItemId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("operation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("operation")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOperation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOperation);
            setOperation(refVal_setOperation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("attributes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("attributes")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UpdatableItemAttributes> refVal_setAttributes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAttributes);
            setAttributes(refVal_setAttributes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("update_mask"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("update_mask")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<UpdateMaskFieldType>> refVal_setUpdateMask;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdateMask);
            setUpdateMask(refVal_setUpdateMask);
        }
    }
    return ok;
}

void CatalogsUpdateRetailItem::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Item_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("item_id")), m_Item_id));
    }
    if(m_OperationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("operation")), m_Operation));
    }
    if(m_AttributesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("attributes")), m_Attributes));
    }
    if(m_Update_maskIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("update_mask")), m_Update_mask));
    }
}

bool CatalogsUpdateRetailItem::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("item_id"))))
    {
        utility::string_t refVal_setItemId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("item_id"))), refVal_setItemId );
        setItemId(refVal_setItemId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("operation"))))
    {
        utility::string_t refVal_setOperation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("operation"))), refVal_setOperation );
        setOperation(refVal_setOperation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("attributes"))))
    {
        std::shared_ptr<UpdatableItemAttributes> refVal_setAttributes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("attributes"))), refVal_setAttributes );
        setAttributes(refVal_setAttributes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("update_mask"))))
    {
        std::vector<std::shared_ptr<UpdateMaskFieldType>> refVal_setUpdateMask;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("update_mask"))), refVal_setUpdateMask );
        setUpdateMask(refVal_setUpdateMask);
    }
    return ok;
}

utility::string_t CatalogsUpdateRetailItem::getItemId() const
{
    return m_Item_id;
}

void CatalogsUpdateRetailItem::setItemId(const utility::string_t& value)
{
    m_Item_id = value;
    m_Item_idIsSet = true;
}

bool CatalogsUpdateRetailItem::itemIdIsSet() const
{
    return m_Item_idIsSet;
}

void CatalogsUpdateRetailItem::unsetItem_id()
{
    m_Item_idIsSet = false;
}
utility::string_t CatalogsUpdateRetailItem::getOperation() const
{
    return m_Operation;
}

void CatalogsUpdateRetailItem::setOperation(const utility::string_t& value)
{
    m_Operation = value;
    m_OperationIsSet = true;
}

bool CatalogsUpdateRetailItem::operationIsSet() const
{
    return m_OperationIsSet;
}

void CatalogsUpdateRetailItem::unsetOperation()
{
    m_OperationIsSet = false;
}
std::shared_ptr<UpdatableItemAttributes> CatalogsUpdateRetailItem::getAttributes() const
{
    return m_Attributes;
}

void CatalogsUpdateRetailItem::setAttributes(const std::shared_ptr<UpdatableItemAttributes>& value)
{
    m_Attributes = value;
    m_AttributesIsSet = true;
}

bool CatalogsUpdateRetailItem::attributesIsSet() const
{
    return m_AttributesIsSet;
}

void CatalogsUpdateRetailItem::unsetAttributes()
{
    m_AttributesIsSet = false;
}
std::vector<std::shared_ptr<UpdateMaskFieldType>>& CatalogsUpdateRetailItem::getUpdateMask()
{
    return m_Update_mask;
}

void CatalogsUpdateRetailItem::setUpdateMask(const std::vector<std::shared_ptr<UpdateMaskFieldType>>& value)
{
    m_Update_mask = value;
    m_Update_maskIsSet = true;
}

bool CatalogsUpdateRetailItem::updateMaskIsSet() const
{
    return m_Update_maskIsSet;
}

void CatalogsUpdateRetailItem::unsetUpdate_mask()
{
    m_Update_maskIsSet = false;
}
}
}
}
}


