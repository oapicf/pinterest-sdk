/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CatalogsUpdatableCreativeAssetsAttributes.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CatalogsUpdatableCreativeAssetsAttributes::CatalogsUpdatableCreativeAssetsAttributes()
{
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Link = utility::conversions::to_string_t("");
    m_LinkIsSet = false;
    m_Ios_deep_link = utility::conversions::to_string_t("");
    m_Ios_deep_linkIsSet = false;
    m_Android_deep_link = utility::conversions::to_string_t("");
    m_Android_deep_linkIsSet = false;
    m_Google_product_category = utility::conversions::to_string_t("");
    m_Google_product_categoryIsSet = false;
    m_Custom_label_0 = utility::conversions::to_string_t("");
    m_Custom_label_0IsSet = false;
    m_Custom_label_1 = utility::conversions::to_string_t("");
    m_Custom_label_1IsSet = false;
    m_Custom_label_2 = utility::conversions::to_string_t("");
    m_Custom_label_2IsSet = false;
    m_Custom_label_3 = utility::conversions::to_string_t("");
    m_Custom_label_3IsSet = false;
    m_Custom_label_4 = utility::conversions::to_string_t("");
    m_Custom_label_4IsSet = false;
    m_Visibility = utility::conversions::to_string_t("");
    m_VisibilityIsSet = false;
}

CatalogsUpdatableCreativeAssetsAttributes::~CatalogsUpdatableCreativeAssetsAttributes()
{
}

void CatalogsUpdatableCreativeAssetsAttributes::validate()
{
    // TODO: implement validation
}

web::json::value CatalogsUpdatableCreativeAssetsAttributes::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t(U("title"))] = ModelBase::toJson(m_Title);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_LinkIsSet)
    {
        val[utility::conversions::to_string_t(U("link"))] = ModelBase::toJson(m_Link);
    }
    if(m_Ios_deep_linkIsSet)
    {
        val[utility::conversions::to_string_t(U("ios_deep_link"))] = ModelBase::toJson(m_Ios_deep_link);
    }
    if(m_Android_deep_linkIsSet)
    {
        val[utility::conversions::to_string_t(U("android_deep_link"))] = ModelBase::toJson(m_Android_deep_link);
    }
    if(m_Google_product_categoryIsSet)
    {
        val[utility::conversions::to_string_t(U("google_product_category"))] = ModelBase::toJson(m_Google_product_category);
    }
    if(m_Custom_label_0IsSet)
    {
        val[utility::conversions::to_string_t(U("custom_label_0"))] = ModelBase::toJson(m_Custom_label_0);
    }
    if(m_Custom_label_1IsSet)
    {
        val[utility::conversions::to_string_t(U("custom_label_1"))] = ModelBase::toJson(m_Custom_label_1);
    }
    if(m_Custom_label_2IsSet)
    {
        val[utility::conversions::to_string_t(U("custom_label_2"))] = ModelBase::toJson(m_Custom_label_2);
    }
    if(m_Custom_label_3IsSet)
    {
        val[utility::conversions::to_string_t(U("custom_label_3"))] = ModelBase::toJson(m_Custom_label_3);
    }
    if(m_Custom_label_4IsSet)
    {
        val[utility::conversions::to_string_t(U("custom_label_4"))] = ModelBase::toJson(m_Custom_label_4);
    }
    if(m_VisibilityIsSet)
    {
        val[utility::conversions::to_string_t(U("visibility"))] = ModelBase::toJson(m_Visibility);
    }

    return val;
}

bool CatalogsUpdatableCreativeAssetsAttributes::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("title"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("title")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTitle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTitle);
            setTitle(refVal_setTitle);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("link"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("link")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLink;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLink);
            setLink(refVal_setLink);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ios_deep_link"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ios_deep_link")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIosDeepLink;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIosDeepLink);
            setIosDeepLink(refVal_setIosDeepLink);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("android_deep_link"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("android_deep_link")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAndroidDeepLink;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAndroidDeepLink);
            setAndroidDeepLink(refVal_setAndroidDeepLink);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("google_product_category"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("google_product_category")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGoogleProductCategory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGoogleProductCategory);
            setGoogleProductCategory(refVal_setGoogleProductCategory);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("custom_label_0"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("custom_label_0")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCustomLabel0;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomLabel0);
            setCustomLabel0(refVal_setCustomLabel0);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("custom_label_1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("custom_label_1")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCustomLabel1;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomLabel1);
            setCustomLabel1(refVal_setCustomLabel1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("custom_label_2"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("custom_label_2")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCustomLabel2;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomLabel2);
            setCustomLabel2(refVal_setCustomLabel2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("custom_label_3"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("custom_label_3")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCustomLabel3;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomLabel3);
            setCustomLabel3(refVal_setCustomLabel3);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("custom_label_4"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("custom_label_4")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCustomLabel4;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomLabel4);
            setCustomLabel4(refVal_setCustomLabel4);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("visibility"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("visibility")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVisibility;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVisibility);
            setVisibility(refVal_setVisibility);
        }
    }
    return ok;
}

void CatalogsUpdatableCreativeAssetsAttributes::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("title")), m_Title));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_LinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("link")), m_Link));
    }
    if(m_Ios_deep_linkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ios_deep_link")), m_Ios_deep_link));
    }
    if(m_Android_deep_linkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("android_deep_link")), m_Android_deep_link));
    }
    if(m_Google_product_categoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("google_product_category")), m_Google_product_category));
    }
    if(m_Custom_label_0IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("custom_label_0")), m_Custom_label_0));
    }
    if(m_Custom_label_1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("custom_label_1")), m_Custom_label_1));
    }
    if(m_Custom_label_2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("custom_label_2")), m_Custom_label_2));
    }
    if(m_Custom_label_3IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("custom_label_3")), m_Custom_label_3));
    }
    if(m_Custom_label_4IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("custom_label_4")), m_Custom_label_4));
    }
    if(m_VisibilityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("visibility")), m_Visibility));
    }
}

bool CatalogsUpdatableCreativeAssetsAttributes::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("title"))))
    {
        utility::string_t refVal_setTitle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("title"))), refVal_setTitle );
        setTitle(refVal_setTitle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("link"))))
    {
        utility::string_t refVal_setLink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("link"))), refVal_setLink );
        setLink(refVal_setLink);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ios_deep_link"))))
    {
        utility::string_t refVal_setIosDeepLink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ios_deep_link"))), refVal_setIosDeepLink );
        setIosDeepLink(refVal_setIosDeepLink);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("android_deep_link"))))
    {
        utility::string_t refVal_setAndroidDeepLink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("android_deep_link"))), refVal_setAndroidDeepLink );
        setAndroidDeepLink(refVal_setAndroidDeepLink);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("google_product_category"))))
    {
        utility::string_t refVal_setGoogleProductCategory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("google_product_category"))), refVal_setGoogleProductCategory );
        setGoogleProductCategory(refVal_setGoogleProductCategory);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("custom_label_0"))))
    {
        utility::string_t refVal_setCustomLabel0;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("custom_label_0"))), refVal_setCustomLabel0 );
        setCustomLabel0(refVal_setCustomLabel0);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("custom_label_1"))))
    {
        utility::string_t refVal_setCustomLabel1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("custom_label_1"))), refVal_setCustomLabel1 );
        setCustomLabel1(refVal_setCustomLabel1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("custom_label_2"))))
    {
        utility::string_t refVal_setCustomLabel2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("custom_label_2"))), refVal_setCustomLabel2 );
        setCustomLabel2(refVal_setCustomLabel2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("custom_label_3"))))
    {
        utility::string_t refVal_setCustomLabel3;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("custom_label_3"))), refVal_setCustomLabel3 );
        setCustomLabel3(refVal_setCustomLabel3);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("custom_label_4"))))
    {
        utility::string_t refVal_setCustomLabel4;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("custom_label_4"))), refVal_setCustomLabel4 );
        setCustomLabel4(refVal_setCustomLabel4);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("visibility"))))
    {
        utility::string_t refVal_setVisibility;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("visibility"))), refVal_setVisibility );
        setVisibility(refVal_setVisibility);
    }
    return ok;
}

utility::string_t CatalogsUpdatableCreativeAssetsAttributes::getTitle() const
{
    return m_Title;
}

void CatalogsUpdatableCreativeAssetsAttributes::setTitle(const utility::string_t& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}

bool CatalogsUpdatableCreativeAssetsAttributes::titleIsSet() const
{
    return m_TitleIsSet;
}

void CatalogsUpdatableCreativeAssetsAttributes::unsetTitle()
{
    m_TitleIsSet = false;
}
utility::string_t CatalogsUpdatableCreativeAssetsAttributes::getDescription() const
{
    return m_Description;
}

void CatalogsUpdatableCreativeAssetsAttributes::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool CatalogsUpdatableCreativeAssetsAttributes::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void CatalogsUpdatableCreativeAssetsAttributes::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t CatalogsUpdatableCreativeAssetsAttributes::getLink() const
{
    return m_Link;
}

void CatalogsUpdatableCreativeAssetsAttributes::setLink(const utility::string_t& value)
{
    m_Link = value;
    m_LinkIsSet = true;
}

bool CatalogsUpdatableCreativeAssetsAttributes::linkIsSet() const
{
    return m_LinkIsSet;
}

void CatalogsUpdatableCreativeAssetsAttributes::unsetLink()
{
    m_LinkIsSet = false;
}
utility::string_t CatalogsUpdatableCreativeAssetsAttributes::getIosDeepLink() const
{
    return m_Ios_deep_link;
}

void CatalogsUpdatableCreativeAssetsAttributes::setIosDeepLink(const utility::string_t& value)
{
    m_Ios_deep_link = value;
    m_Ios_deep_linkIsSet = true;
}

bool CatalogsUpdatableCreativeAssetsAttributes::iosDeepLinkIsSet() const
{
    return m_Ios_deep_linkIsSet;
}

void CatalogsUpdatableCreativeAssetsAttributes::unsetIos_deep_link()
{
    m_Ios_deep_linkIsSet = false;
}
utility::string_t CatalogsUpdatableCreativeAssetsAttributes::getAndroidDeepLink() const
{
    return m_Android_deep_link;
}

void CatalogsUpdatableCreativeAssetsAttributes::setAndroidDeepLink(const utility::string_t& value)
{
    m_Android_deep_link = value;
    m_Android_deep_linkIsSet = true;
}

bool CatalogsUpdatableCreativeAssetsAttributes::androidDeepLinkIsSet() const
{
    return m_Android_deep_linkIsSet;
}

void CatalogsUpdatableCreativeAssetsAttributes::unsetAndroid_deep_link()
{
    m_Android_deep_linkIsSet = false;
}
utility::string_t CatalogsUpdatableCreativeAssetsAttributes::getGoogleProductCategory() const
{
    return m_Google_product_category;
}

void CatalogsUpdatableCreativeAssetsAttributes::setGoogleProductCategory(const utility::string_t& value)
{
    m_Google_product_category = value;
    m_Google_product_categoryIsSet = true;
}

bool CatalogsUpdatableCreativeAssetsAttributes::googleProductCategoryIsSet() const
{
    return m_Google_product_categoryIsSet;
}

void CatalogsUpdatableCreativeAssetsAttributes::unsetGoogle_product_category()
{
    m_Google_product_categoryIsSet = false;
}
utility::string_t CatalogsUpdatableCreativeAssetsAttributes::getCustomLabel0() const
{
    return m_Custom_label_0;
}

void CatalogsUpdatableCreativeAssetsAttributes::setCustomLabel0(const utility::string_t& value)
{
    m_Custom_label_0 = value;
    m_Custom_label_0IsSet = true;
}

bool CatalogsUpdatableCreativeAssetsAttributes::customLabel0IsSet() const
{
    return m_Custom_label_0IsSet;
}

void CatalogsUpdatableCreativeAssetsAttributes::unsetCustom_label_0()
{
    m_Custom_label_0IsSet = false;
}
utility::string_t CatalogsUpdatableCreativeAssetsAttributes::getCustomLabel1() const
{
    return m_Custom_label_1;
}

void CatalogsUpdatableCreativeAssetsAttributes::setCustomLabel1(const utility::string_t& value)
{
    m_Custom_label_1 = value;
    m_Custom_label_1IsSet = true;
}

bool CatalogsUpdatableCreativeAssetsAttributes::customLabel1IsSet() const
{
    return m_Custom_label_1IsSet;
}

void CatalogsUpdatableCreativeAssetsAttributes::unsetCustom_label_1()
{
    m_Custom_label_1IsSet = false;
}
utility::string_t CatalogsUpdatableCreativeAssetsAttributes::getCustomLabel2() const
{
    return m_Custom_label_2;
}

void CatalogsUpdatableCreativeAssetsAttributes::setCustomLabel2(const utility::string_t& value)
{
    m_Custom_label_2 = value;
    m_Custom_label_2IsSet = true;
}

bool CatalogsUpdatableCreativeAssetsAttributes::customLabel2IsSet() const
{
    return m_Custom_label_2IsSet;
}

void CatalogsUpdatableCreativeAssetsAttributes::unsetCustom_label_2()
{
    m_Custom_label_2IsSet = false;
}
utility::string_t CatalogsUpdatableCreativeAssetsAttributes::getCustomLabel3() const
{
    return m_Custom_label_3;
}

void CatalogsUpdatableCreativeAssetsAttributes::setCustomLabel3(const utility::string_t& value)
{
    m_Custom_label_3 = value;
    m_Custom_label_3IsSet = true;
}

bool CatalogsUpdatableCreativeAssetsAttributes::customLabel3IsSet() const
{
    return m_Custom_label_3IsSet;
}

void CatalogsUpdatableCreativeAssetsAttributes::unsetCustom_label_3()
{
    m_Custom_label_3IsSet = false;
}
utility::string_t CatalogsUpdatableCreativeAssetsAttributes::getCustomLabel4() const
{
    return m_Custom_label_4;
}

void CatalogsUpdatableCreativeAssetsAttributes::setCustomLabel4(const utility::string_t& value)
{
    m_Custom_label_4 = value;
    m_Custom_label_4IsSet = true;
}

bool CatalogsUpdatableCreativeAssetsAttributes::customLabel4IsSet() const
{
    return m_Custom_label_4IsSet;
}

void CatalogsUpdatableCreativeAssetsAttributes::unsetCustom_label_4()
{
    m_Custom_label_4IsSet = false;
}
utility::string_t CatalogsUpdatableCreativeAssetsAttributes::getVisibility() const
{
    return m_Visibility;
}

void CatalogsUpdatableCreativeAssetsAttributes::setVisibility(const utility::string_t& value)
{
    m_Visibility = value;
    m_VisibilityIsSet = true;
}

bool CatalogsUpdatableCreativeAssetsAttributes::visibilityIsSet() const
{
    return m_VisibilityIsSet;
}

void CatalogsUpdatableCreativeAssetsAttributes::unsetVisibility()
{
    m_VisibilityIsSet = false;
}
}
}
}
}


