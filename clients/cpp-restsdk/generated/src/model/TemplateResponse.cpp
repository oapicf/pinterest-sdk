/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/TemplateResponse.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



TemplateResponse::TemplateResponse()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Ad_account_id = utility::conversions::to_string_t("");
    m_Ad_account_idIsSet = false;
    m_Ad_account_idsIsSet = false;
    m_User_id = utility::conversions::to_string_t("");
    m_User_idIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Report_start_relative_days_in_past = 0.0;
    m_Report_start_relative_days_in_pastIsSet = false;
    m_Report_end_relative_days_in_past = 0.0;
    m_Report_end_relative_days_in_pastIsSet = false;
    m_Date_rangeIsSet = false;
    m_Report_levelIsSet = false;
    m_Report_formatIsSet = false;
    m_ColumnsIsSet = false;
    m_GranularityIsSet = false;
    m_View_window_days = 0.0;
    m_View_window_daysIsSet = false;
    m_Click_window_days = 0.0;
    m_Click_window_daysIsSet = false;
    m_Engagement_window_days = 0.0;
    m_Engagement_window_daysIsSet = false;
    m_Conversion_report_time_type = utility::conversions::to_string_t("");
    m_Conversion_report_time_typeIsSet = false;
    m_Filters_json = utility::conversions::to_string_t("");
    m_Filters_jsonIsSet = false;
    m_Is_owned_by_user = false;
    m_Is_owned_by_userIsSet = false;
    m_Is_scheduled = false;
    m_Is_scheduledIsSet = false;
    m_Creation_source = utility::conversions::to_string_t("");
    m_Creation_sourceIsSet = false;
    m_Is_deleted = false;
    m_Is_deletedIsSet = false;
    m_Updated_time = 0.0;
    m_Updated_timeIsSet = false;
    m_Custom_column_idsIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Ingestion_sourcesIsSet = false;
}

TemplateResponse::~TemplateResponse()
{
}

void TemplateResponse::validate()
{
    // TODO: implement validation
}

web::json::value TemplateResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Ad_account_idIsSet)
    {
        val[utility::conversions::to_string_t(U("ad_account_id"))] = ModelBase::toJson(m_Ad_account_id);
    }
    if(m_Ad_account_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("ad_account_ids"))] = ModelBase::toJson(m_Ad_account_ids);
    }
    if(m_User_idIsSet)
    {
        val[utility::conversions::to_string_t(U("user_id"))] = ModelBase::toJson(m_User_id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_Report_start_relative_days_in_pastIsSet)
    {
        val[utility::conversions::to_string_t(U("report_start_relative_days_in_past"))] = ModelBase::toJson(m_Report_start_relative_days_in_past);
    }
    if(m_Report_end_relative_days_in_pastIsSet)
    {
        val[utility::conversions::to_string_t(U("report_end_relative_days_in_past"))] = ModelBase::toJson(m_Report_end_relative_days_in_past);
    }
    if(m_Date_rangeIsSet)
    {
        val[utility::conversions::to_string_t(U("date_range"))] = ModelBase::toJson(m_Date_range);
    }
    if(m_Report_levelIsSet)
    {
        val[utility::conversions::to_string_t(U("report_level"))] = ModelBase::toJson(m_Report_level);
    }
    if(m_Report_formatIsSet)
    {
        val[utility::conversions::to_string_t(U("report_format"))] = ModelBase::toJson(m_Report_format);
    }
    if(m_ColumnsIsSet)
    {
        val[utility::conversions::to_string_t(U("columns"))] = ModelBase::toJson(m_Columns);
    }
    if(m_GranularityIsSet)
    {
        val[utility::conversions::to_string_t(U("granularity"))] = ModelBase::toJson(m_Granularity);
    }
    if(m_View_window_daysIsSet)
    {
        val[utility::conversions::to_string_t(U("view_window_days"))] = ModelBase::toJson(m_View_window_days);
    }
    if(m_Click_window_daysIsSet)
    {
        val[utility::conversions::to_string_t(U("click_window_days"))] = ModelBase::toJson(m_Click_window_days);
    }
    if(m_Engagement_window_daysIsSet)
    {
        val[utility::conversions::to_string_t(U("engagement_window_days"))] = ModelBase::toJson(m_Engagement_window_days);
    }
    if(m_Conversion_report_time_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("conversion_report_time_type"))] = ModelBase::toJson(m_Conversion_report_time_type);
    }
    if(m_Filters_jsonIsSet)
    {
        val[utility::conversions::to_string_t(U("filters_json"))] = ModelBase::toJson(m_Filters_json);
    }
    if(m_Is_owned_by_userIsSet)
    {
        val[utility::conversions::to_string_t(U("is_owned_by_user"))] = ModelBase::toJson(m_Is_owned_by_user);
    }
    if(m_Is_scheduledIsSet)
    {
        val[utility::conversions::to_string_t(U("is_scheduled"))] = ModelBase::toJson(m_Is_scheduled);
    }
    if(m_Creation_sourceIsSet)
    {
        val[utility::conversions::to_string_t(U("creation_source"))] = ModelBase::toJson(m_Creation_source);
    }
    if(m_Is_deletedIsSet)
    {
        val[utility::conversions::to_string_t(U("is_deleted"))] = ModelBase::toJson(m_Is_deleted);
    }
    if(m_Updated_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("updated_time"))] = ModelBase::toJson(m_Updated_time);
    }
    if(m_Custom_column_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("custom_column_ids"))] = ModelBase::toJson(m_Custom_column_ids);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_Ingestion_sourcesIsSet)
    {
        val[utility::conversions::to_string_t(U("ingestion_sources"))] = ModelBase::toJson(m_Ingestion_sources);
    }

    return val;
}

bool TemplateResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ad_account_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ad_account_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAdAccountId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdAccountId);
            setAdAccountId(refVal_setAdAccountId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ad_account_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ad_account_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setAdAccountIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdAccountIds);
            setAdAccountIds(refVal_setAdAccountIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserId);
            setUserId(refVal_setUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("report_start_relative_days_in_past"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("report_start_relative_days_in_past")));
        if(!fieldValue.is_null())
        {
            double refVal_setReportStartRelativeDaysInPast;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReportStartRelativeDaysInPast);
            setReportStartRelativeDaysInPast(refVal_setReportStartRelativeDaysInPast);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("report_end_relative_days_in_past"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("report_end_relative_days_in_past")));
        if(!fieldValue.is_null())
        {
            double refVal_setReportEndRelativeDaysInPast;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReportEndRelativeDaysInPast);
            setReportEndRelativeDaysInPast(refVal_setReportEndRelativeDaysInPast);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("date_range"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("date_range")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TemplateResponse_date_range> refVal_setDateRange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateRange);
            setDateRange(refVal_setDateRange);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("report_level"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("report_level")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<MetricsReportingLevel> refVal_setReportLevel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReportLevel);
            setReportLevel(refVal_setReportLevel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("report_format"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("report_format")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DataOutputFormat> refVal_setReportFormat;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReportFormat);
            setReportFormat(refVal_setReportFormat);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("columns"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("columns")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setColumns;
            ok &= ModelBase::fromJson(fieldValue, refVal_setColumns);
            setColumns(refVal_setColumns);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("granularity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("granularity")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Granularity> refVal_setGranularity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGranularity);
            setGranularity(refVal_setGranularity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("view_window_days"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("view_window_days")));
        if(!fieldValue.is_null())
        {
            double refVal_setViewWindowDays;
            ok &= ModelBase::fromJson(fieldValue, refVal_setViewWindowDays);
            setViewWindowDays(refVal_setViewWindowDays);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("click_window_days"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("click_window_days")));
        if(!fieldValue.is_null())
        {
            double refVal_setClickWindowDays;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClickWindowDays);
            setClickWindowDays(refVal_setClickWindowDays);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("engagement_window_days"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("engagement_window_days")));
        if(!fieldValue.is_null())
        {
            double refVal_setEngagementWindowDays;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEngagementWindowDays);
            setEngagementWindowDays(refVal_setEngagementWindowDays);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("conversion_report_time_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("conversion_report_time_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setConversionReportTimeType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConversionReportTimeType);
            setConversionReportTimeType(refVal_setConversionReportTimeType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("filters_json"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("filters_json")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFiltersJson;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFiltersJson);
            setFiltersJson(refVal_setFiltersJson);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_owned_by_user"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_owned_by_user")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsOwnedByUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsOwnedByUser);
            setIsOwnedByUser(refVal_setIsOwnedByUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_scheduled"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_scheduled")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsScheduled;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsScheduled);
            setIsScheduled(refVal_setIsScheduled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("creation_source"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("creation_source")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCreationSource;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreationSource);
            setCreationSource(refVal_setCreationSource);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_deleted"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_deleted")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsDeleted;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsDeleted);
            setIsDeleted(refVal_setIsDeleted);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updated_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updated_time")));
        if(!fieldValue.is_null())
        {
            double refVal_setUpdatedTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedTime);
            setUpdatedTime(refVal_setUpdatedTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("custom_column_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("custom_column_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<utility::string_t>> refVal_setCustomColumnIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomColumnIds);
            setCustomColumnIds(refVal_setCustomColumnIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ingestion_sources"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ingestion_sources")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setIngestionSources;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIngestionSources);
            setIngestionSources(refVal_setIngestionSources);
        }
    }
    return ok;
}

void TemplateResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Ad_account_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ad_account_id")), m_Ad_account_id));
    }
    if(m_Ad_account_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ad_account_ids")), m_Ad_account_ids));
    }
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user_id")), m_User_id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_Report_start_relative_days_in_pastIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("report_start_relative_days_in_past")), m_Report_start_relative_days_in_past));
    }
    if(m_Report_end_relative_days_in_pastIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("report_end_relative_days_in_past")), m_Report_end_relative_days_in_past));
    }
    if(m_Date_rangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("date_range")), m_Date_range));
    }
    if(m_Report_levelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("report_level")), m_Report_level));
    }
    if(m_Report_formatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("report_format")), m_Report_format));
    }
    if(m_ColumnsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("columns")), m_Columns));
    }
    if(m_GranularityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("granularity")), m_Granularity));
    }
    if(m_View_window_daysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("view_window_days")), m_View_window_days));
    }
    if(m_Click_window_daysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("click_window_days")), m_Click_window_days));
    }
    if(m_Engagement_window_daysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("engagement_window_days")), m_Engagement_window_days));
    }
    if(m_Conversion_report_time_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("conversion_report_time_type")), m_Conversion_report_time_type));
    }
    if(m_Filters_jsonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("filters_json")), m_Filters_json));
    }
    if(m_Is_owned_by_userIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_owned_by_user")), m_Is_owned_by_user));
    }
    if(m_Is_scheduledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_scheduled")), m_Is_scheduled));
    }
    if(m_Creation_sourceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("creation_source")), m_Creation_source));
    }
    if(m_Is_deletedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_deleted")), m_Is_deleted));
    }
    if(m_Updated_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updated_time")), m_Updated_time));
    }
    if(m_Custom_column_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("custom_column_ids")), m_Custom_column_ids));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_Ingestion_sourcesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ingestion_sources")), m_Ingestion_sources));
    }
}

bool TemplateResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ad_account_id"))))
    {
        utility::string_t refVal_setAdAccountId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ad_account_id"))), refVal_setAdAccountId );
        setAdAccountId(refVal_setAdAccountId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ad_account_ids"))))
    {
        std::vector<utility::string_t> refVal_setAdAccountIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ad_account_ids"))), refVal_setAdAccountIds );
        setAdAccountIds(refVal_setAdAccountIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user_id"))))
    {
        utility::string_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user_id"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("report_start_relative_days_in_past"))))
    {
        double refVal_setReportStartRelativeDaysInPast;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("report_start_relative_days_in_past"))), refVal_setReportStartRelativeDaysInPast );
        setReportStartRelativeDaysInPast(refVal_setReportStartRelativeDaysInPast);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("report_end_relative_days_in_past"))))
    {
        double refVal_setReportEndRelativeDaysInPast;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("report_end_relative_days_in_past"))), refVal_setReportEndRelativeDaysInPast );
        setReportEndRelativeDaysInPast(refVal_setReportEndRelativeDaysInPast);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("date_range"))))
    {
        std::shared_ptr<TemplateResponse_date_range> refVal_setDateRange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("date_range"))), refVal_setDateRange );
        setDateRange(refVal_setDateRange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("report_level"))))
    {
        std::shared_ptr<MetricsReportingLevel> refVal_setReportLevel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("report_level"))), refVal_setReportLevel );
        setReportLevel(refVal_setReportLevel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("report_format"))))
    {
        std::shared_ptr<DataOutputFormat> refVal_setReportFormat;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("report_format"))), refVal_setReportFormat );
        setReportFormat(refVal_setReportFormat);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("columns"))))
    {
        std::vector<utility::string_t> refVal_setColumns;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("columns"))), refVal_setColumns );
        setColumns(refVal_setColumns);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("granularity"))))
    {
        std::shared_ptr<Granularity> refVal_setGranularity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("granularity"))), refVal_setGranularity );
        setGranularity(refVal_setGranularity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("view_window_days"))))
    {
        double refVal_setViewWindowDays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("view_window_days"))), refVal_setViewWindowDays );
        setViewWindowDays(refVal_setViewWindowDays);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("click_window_days"))))
    {
        double refVal_setClickWindowDays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("click_window_days"))), refVal_setClickWindowDays );
        setClickWindowDays(refVal_setClickWindowDays);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("engagement_window_days"))))
    {
        double refVal_setEngagementWindowDays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("engagement_window_days"))), refVal_setEngagementWindowDays );
        setEngagementWindowDays(refVal_setEngagementWindowDays);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("conversion_report_time_type"))))
    {
        utility::string_t refVal_setConversionReportTimeType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("conversion_report_time_type"))), refVal_setConversionReportTimeType );
        setConversionReportTimeType(refVal_setConversionReportTimeType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("filters_json"))))
    {
        utility::string_t refVal_setFiltersJson;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("filters_json"))), refVal_setFiltersJson );
        setFiltersJson(refVal_setFiltersJson);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_owned_by_user"))))
    {
        bool refVal_setIsOwnedByUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_owned_by_user"))), refVal_setIsOwnedByUser );
        setIsOwnedByUser(refVal_setIsOwnedByUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_scheduled"))))
    {
        bool refVal_setIsScheduled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_scheduled"))), refVal_setIsScheduled );
        setIsScheduled(refVal_setIsScheduled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("creation_source"))))
    {
        utility::string_t refVal_setCreationSource;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("creation_source"))), refVal_setCreationSource );
        setCreationSource(refVal_setCreationSource);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_deleted"))))
    {
        bool refVal_setIsDeleted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_deleted"))), refVal_setIsDeleted );
        setIsDeleted(refVal_setIsDeleted);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updated_time"))))
    {
        double refVal_setUpdatedTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updated_time"))), refVal_setUpdatedTime );
        setUpdatedTime(refVal_setUpdatedTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("custom_column_ids"))))
    {
        std::vector<std::shared_ptr<utility::string_t>> refVal_setCustomColumnIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("custom_column_ids"))), refVal_setCustomColumnIds );
        setCustomColumnIds(refVal_setCustomColumnIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ingestion_sources"))))
    {
        std::vector<utility::string_t> refVal_setIngestionSources;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ingestion_sources"))), refVal_setIngestionSources );
        setIngestionSources(refVal_setIngestionSources);
    }
    return ok;
}

utility::string_t TemplateResponse::getId() const
{
    return m_Id;
}

void TemplateResponse::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool TemplateResponse::idIsSet() const
{
    return m_IdIsSet;
}

void TemplateResponse::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t TemplateResponse::getAdAccountId() const
{
    return m_Ad_account_id;
}

void TemplateResponse::setAdAccountId(const utility::string_t& value)
{
    m_Ad_account_id = value;
    m_Ad_account_idIsSet = true;
}

bool TemplateResponse::adAccountIdIsSet() const
{
    return m_Ad_account_idIsSet;
}

void TemplateResponse::unsetAd_account_id()
{
    m_Ad_account_idIsSet = false;
}
std::vector<utility::string_t>& TemplateResponse::getAdAccountIds()
{
    return m_Ad_account_ids;
}

void TemplateResponse::setAdAccountIds(const std::vector<utility::string_t>& value)
{
    m_Ad_account_ids = value;
    m_Ad_account_idsIsSet = true;
}

bool TemplateResponse::adAccountIdsIsSet() const
{
    return m_Ad_account_idsIsSet;
}

void TemplateResponse::unsetAd_account_ids()
{
    m_Ad_account_idsIsSet = false;
}
utility::string_t TemplateResponse::getUserId() const
{
    return m_User_id;
}

void TemplateResponse::setUserId(const utility::string_t& value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}

bool TemplateResponse::userIdIsSet() const
{
    return m_User_idIsSet;
}

void TemplateResponse::unsetUser_id()
{
    m_User_idIsSet = false;
}
utility::string_t TemplateResponse::getName() const
{
    return m_Name;
}

void TemplateResponse::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool TemplateResponse::nameIsSet() const
{
    return m_NameIsSet;
}

void TemplateResponse::unsetName()
{
    m_NameIsSet = false;
}
double TemplateResponse::getReportStartRelativeDaysInPast() const
{
    return m_Report_start_relative_days_in_past;
}

void TemplateResponse::setReportStartRelativeDaysInPast(double value)
{
    m_Report_start_relative_days_in_past = value;
    m_Report_start_relative_days_in_pastIsSet = true;
}

bool TemplateResponse::reportStartRelativeDaysInPastIsSet() const
{
    return m_Report_start_relative_days_in_pastIsSet;
}

void TemplateResponse::unsetReport_start_relative_days_in_past()
{
    m_Report_start_relative_days_in_pastIsSet = false;
}
double TemplateResponse::getReportEndRelativeDaysInPast() const
{
    return m_Report_end_relative_days_in_past;
}

void TemplateResponse::setReportEndRelativeDaysInPast(double value)
{
    m_Report_end_relative_days_in_past = value;
    m_Report_end_relative_days_in_pastIsSet = true;
}

bool TemplateResponse::reportEndRelativeDaysInPastIsSet() const
{
    return m_Report_end_relative_days_in_pastIsSet;
}

void TemplateResponse::unsetReport_end_relative_days_in_past()
{
    m_Report_end_relative_days_in_pastIsSet = false;
}
std::shared_ptr<TemplateResponse_date_range> TemplateResponse::getDateRange() const
{
    return m_Date_range;
}

void TemplateResponse::setDateRange(const std::shared_ptr<TemplateResponse_date_range>& value)
{
    m_Date_range = value;
    m_Date_rangeIsSet = true;
}

bool TemplateResponse::dateRangeIsSet() const
{
    return m_Date_rangeIsSet;
}

void TemplateResponse::unsetDate_range()
{
    m_Date_rangeIsSet = false;
}
std::shared_ptr<MetricsReportingLevel> TemplateResponse::getReportLevel() const
{
    return m_Report_level;
}

void TemplateResponse::setReportLevel(const std::shared_ptr<MetricsReportingLevel>& value)
{
    m_Report_level = value;
    m_Report_levelIsSet = true;
}

bool TemplateResponse::reportLevelIsSet() const
{
    return m_Report_levelIsSet;
}

void TemplateResponse::unsetReport_level()
{
    m_Report_levelIsSet = false;
}
std::shared_ptr<DataOutputFormat> TemplateResponse::getReportFormat() const
{
    return m_Report_format;
}

void TemplateResponse::setReportFormat(const std::shared_ptr<DataOutputFormat>& value)
{
    m_Report_format = value;
    m_Report_formatIsSet = true;
}

bool TemplateResponse::reportFormatIsSet() const
{
    return m_Report_formatIsSet;
}

void TemplateResponse::unsetReport_format()
{
    m_Report_formatIsSet = false;
}
std::vector<utility::string_t>& TemplateResponse::getColumns()
{
    return m_Columns;
}

void TemplateResponse::setColumns(const std::vector<utility::string_t>& value)
{
    m_Columns = value;
    m_ColumnsIsSet = true;
}

bool TemplateResponse::columnsIsSet() const
{
    return m_ColumnsIsSet;
}

void TemplateResponse::unsetColumns()
{
    m_ColumnsIsSet = false;
}
std::shared_ptr<Granularity> TemplateResponse::getGranularity() const
{
    return m_Granularity;
}

void TemplateResponse::setGranularity(const std::shared_ptr<Granularity>& value)
{
    m_Granularity = value;
    m_GranularityIsSet = true;
}

bool TemplateResponse::granularityIsSet() const
{
    return m_GranularityIsSet;
}

void TemplateResponse::unsetGranularity()
{
    m_GranularityIsSet = false;
}
double TemplateResponse::getViewWindowDays() const
{
    return m_View_window_days;
}

void TemplateResponse::setViewWindowDays(double value)
{
    m_View_window_days = value;
    m_View_window_daysIsSet = true;
}

bool TemplateResponse::viewWindowDaysIsSet() const
{
    return m_View_window_daysIsSet;
}

void TemplateResponse::unsetView_window_days()
{
    m_View_window_daysIsSet = false;
}
double TemplateResponse::getClickWindowDays() const
{
    return m_Click_window_days;
}

void TemplateResponse::setClickWindowDays(double value)
{
    m_Click_window_days = value;
    m_Click_window_daysIsSet = true;
}

bool TemplateResponse::clickWindowDaysIsSet() const
{
    return m_Click_window_daysIsSet;
}

void TemplateResponse::unsetClick_window_days()
{
    m_Click_window_daysIsSet = false;
}
double TemplateResponse::getEngagementWindowDays() const
{
    return m_Engagement_window_days;
}

void TemplateResponse::setEngagementWindowDays(double value)
{
    m_Engagement_window_days = value;
    m_Engagement_window_daysIsSet = true;
}

bool TemplateResponse::engagementWindowDaysIsSet() const
{
    return m_Engagement_window_daysIsSet;
}

void TemplateResponse::unsetEngagement_window_days()
{
    m_Engagement_window_daysIsSet = false;
}
utility::string_t TemplateResponse::getConversionReportTimeType() const
{
    return m_Conversion_report_time_type;
}

void TemplateResponse::setConversionReportTimeType(const utility::string_t& value)
{
    m_Conversion_report_time_type = value;
    m_Conversion_report_time_typeIsSet = true;
}

bool TemplateResponse::conversionReportTimeTypeIsSet() const
{
    return m_Conversion_report_time_typeIsSet;
}

void TemplateResponse::unsetConversion_report_time_type()
{
    m_Conversion_report_time_typeIsSet = false;
}
utility::string_t TemplateResponse::getFiltersJson() const
{
    return m_Filters_json;
}

void TemplateResponse::setFiltersJson(const utility::string_t& value)
{
    m_Filters_json = value;
    m_Filters_jsonIsSet = true;
}

bool TemplateResponse::filtersJsonIsSet() const
{
    return m_Filters_jsonIsSet;
}

void TemplateResponse::unsetFilters_json()
{
    m_Filters_jsonIsSet = false;
}
bool TemplateResponse::isIsOwnedByUser() const
{
    return m_Is_owned_by_user;
}

void TemplateResponse::setIsOwnedByUser(bool value)
{
    m_Is_owned_by_user = value;
    m_Is_owned_by_userIsSet = true;
}

bool TemplateResponse::isOwnedByUserIsSet() const
{
    return m_Is_owned_by_userIsSet;
}

void TemplateResponse::unsetIs_owned_by_user()
{
    m_Is_owned_by_userIsSet = false;
}
bool TemplateResponse::isIsScheduled() const
{
    return m_Is_scheduled;
}

void TemplateResponse::setIsScheduled(bool value)
{
    m_Is_scheduled = value;
    m_Is_scheduledIsSet = true;
}

bool TemplateResponse::isScheduledIsSet() const
{
    return m_Is_scheduledIsSet;
}

void TemplateResponse::unsetIs_scheduled()
{
    m_Is_scheduledIsSet = false;
}
utility::string_t TemplateResponse::getCreationSource() const
{
    return m_Creation_source;
}

void TemplateResponse::setCreationSource(const utility::string_t& value)
{
    m_Creation_source = value;
    m_Creation_sourceIsSet = true;
}

bool TemplateResponse::creationSourceIsSet() const
{
    return m_Creation_sourceIsSet;
}

void TemplateResponse::unsetCreation_source()
{
    m_Creation_sourceIsSet = false;
}
bool TemplateResponse::isIsDeleted() const
{
    return m_Is_deleted;
}

void TemplateResponse::setIsDeleted(bool value)
{
    m_Is_deleted = value;
    m_Is_deletedIsSet = true;
}

bool TemplateResponse::isDeletedIsSet() const
{
    return m_Is_deletedIsSet;
}

void TemplateResponse::unsetIs_deleted()
{
    m_Is_deletedIsSet = false;
}
double TemplateResponse::getUpdatedTime() const
{
    return m_Updated_time;
}

void TemplateResponse::setUpdatedTime(double value)
{
    m_Updated_time = value;
    m_Updated_timeIsSet = true;
}

bool TemplateResponse::updatedTimeIsSet() const
{
    return m_Updated_timeIsSet;
}

void TemplateResponse::unsetUpdated_time()
{
    m_Updated_timeIsSet = false;
}
std::vector<std::shared_ptr<utility::string_t>>& TemplateResponse::getCustomColumnIds()
{
    return m_Custom_column_ids;
}

void TemplateResponse::setCustomColumnIds(const std::vector<std::shared_ptr<utility::string_t>>& value)
{
    m_Custom_column_ids = value;
    m_Custom_column_idsIsSet = true;
}

bool TemplateResponse::customColumnIdsIsSet() const
{
    return m_Custom_column_idsIsSet;
}

void TemplateResponse::unsetCustom_column_ids()
{
    m_Custom_column_idsIsSet = false;
}
utility::string_t TemplateResponse::getType() const
{
    return m_Type;
}

void TemplateResponse::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool TemplateResponse::typeIsSet() const
{
    return m_TypeIsSet;
}

void TemplateResponse::unsetType()
{
    m_TypeIsSet = false;
}
std::vector<utility::string_t>& TemplateResponse::getIngestionSources()
{
    return m_Ingestion_sources;
}

void TemplateResponse::setIngestionSources(const std::vector<utility::string_t>& value)
{
    m_Ingestion_sources = value;
    m_Ingestion_sourcesIsSet = true;
}

bool TemplateResponse::ingestionSourcesIsSet() const
{
    return m_Ingestion_sourcesIsSet;
}

void TemplateResponse::unsetIngestion_sources()
{
    m_Ingestion_sourcesIsSet = false;
}
}
}
}
}


