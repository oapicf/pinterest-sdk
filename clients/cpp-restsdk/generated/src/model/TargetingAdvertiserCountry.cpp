/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/TargetingAdvertiserCountry.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


namespace
{
using EnumUnderlyingType = utility::string_t;

TargetingAdvertiserCountry::eTargetingAdvertiserCountry toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("US")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_US;
    if (val == utility::conversions::to_string_t(U("GB")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_GB;
    if (val == utility::conversions::to_string_t(U("CA")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_CA;
    if (val == utility::conversions::to_string_t(U("IE")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_IE;
    if (val == utility::conversions::to_string_t(U("AU")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_AU;
    if (val == utility::conversions::to_string_t(U("NZ")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_NZ;
    if (val == utility::conversions::to_string_t(U("FR")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_FR;
    if (val == utility::conversions::to_string_t(U("SE")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_SE;
    if (val == utility::conversions::to_string_t(U("IL")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_IL;
    if (val == utility::conversions::to_string_t(U("DE")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_DE;
    if (val == utility::conversions::to_string_t(U("AT")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_AT;
    if (val == utility::conversions::to_string_t(U("IT")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_IT;
    if (val == utility::conversions::to_string_t(U("ES")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_ES;
    if (val == utility::conversions::to_string_t(U("NL")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_NL;
    if (val == utility::conversions::to_string_t(U("BE")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_BE;
    if (val == utility::conversions::to_string_t(U("PT")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_PT;
    if (val == utility::conversions::to_string_t(U("CH")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_CH;
    if (val == utility::conversions::to_string_t(U("HK")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_HK;
    if (val == utility::conversions::to_string_t(U("JP")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_JP;
    if (val == utility::conversions::to_string_t(U("KR")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_KR;
    if (val == utility::conversions::to_string_t(U("SG")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_SG;
    if (val == utility::conversions::to_string_t(U("NO")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_NO;
    if (val == utility::conversions::to_string_t(U("DK")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_DK;
    if (val == utility::conversions::to_string_t(U("FI")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_FI;
    if (val == utility::conversions::to_string_t(U("CY")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_CY;
    if (val == utility::conversions::to_string_t(U("LU")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_LU;
    if (val == utility::conversions::to_string_t(U("MT")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_MT;
    if (val == utility::conversions::to_string_t(U("PL")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_PL;
    if (val == utility::conversions::to_string_t(U("RO")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_RO;
    if (val == utility::conversions::to_string_t(U("HU")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_HU;
    if (val == utility::conversions::to_string_t(U("CZ")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_CZ;
    if (val == utility::conversions::to_string_t(U("GR")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_GR;
    if (val == utility::conversions::to_string_t(U("SK")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_SK;
    if (val == utility::conversions::to_string_t(U("BR")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_BR;
    if (val == utility::conversions::to_string_t(U("MX")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_MX;
    if (val == utility::conversions::to_string_t(U("AR")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_AR;
    if (val == utility::conversions::to_string_t(U("CL")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_CL;
    if (val == utility::conversions::to_string_t(U("CO")))
        return TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_CO;
    return {};
}

EnumUnderlyingType fromEnum(TargetingAdvertiserCountry::eTargetingAdvertiserCountry e)
{
    switch (e)
    {
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_US:
        return U("US");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_GB:
        return U("GB");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_CA:
        return U("CA");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_IE:
        return U("IE");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_AU:
        return U("AU");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_NZ:
        return U("NZ");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_FR:
        return U("FR");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_SE:
        return U("SE");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_IL:
        return U("IL");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_DE:
        return U("DE");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_AT:
        return U("AT");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_IT:
        return U("IT");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_ES:
        return U("ES");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_NL:
        return U("NL");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_BE:
        return U("BE");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_PT:
        return U("PT");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_CH:
        return U("CH");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_HK:
        return U("HK");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_JP:
        return U("JP");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_KR:
        return U("KR");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_SG:
        return U("SG");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_NO:
        return U("NO");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_DK:
        return U("DK");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_FI:
        return U("FI");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_CY:
        return U("CY");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_LU:
        return U("LU");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_MT:
        return U("MT");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_PL:
        return U("PL");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_RO:
        return U("RO");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_HU:
        return U("HU");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_CZ:
        return U("CZ");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_GR:
        return U("GR");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_SK:
        return U("SK");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_BR:
        return U("BR");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_MX:
        return U("MX");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_AR:
        return U("AR");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_CL:
        return U("CL");
    case TargetingAdvertiserCountry::eTargetingAdvertiserCountry::TargetingAdvertiserCountry_CO:
        return U("CO");
    default:
        break;
    }
    return {};
}
}

TargetingAdvertiserCountry::TargetingAdvertiserCountry()
{
}

TargetingAdvertiserCountry::~TargetingAdvertiserCountry()
{
}

void TargetingAdvertiserCountry::validate()
{
    // TODO: implement validation
}

web::json::value TargetingAdvertiserCountry::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool TargetingAdvertiserCountry::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void TargetingAdvertiserCountry::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool TargetingAdvertiserCountry::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

TargetingAdvertiserCountry::eTargetingAdvertiserCountry TargetingAdvertiserCountry::getValue() const
{
   return m_value;
}

void TargetingAdvertiserCountry::setValue(TargetingAdvertiserCountry::eTargetingAdvertiserCountry const value)
{
   m_value = value;
}


}
}
}
}


