/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CatalogsFeedIngestionWarnings.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CatalogsFeedIngestionWarnings::CatalogsFeedIngestionWarnings()
{
    m_ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERROR = 0;
    m_ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERRORIsSet = false;
    m_ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLE = 0;
    m_ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLEIsSet = false;
    m_ADDITIONAL_IMAGE_MALFORMED_URL = 0;
    m_ADDITIONAL_IMAGE_MALFORMED_URLIsSet = false;
    m_ADDITIONAL_IMAGE_FILE_NOT_FOUND = 0;
    m_ADDITIONAL_IMAGE_FILE_NOT_FOUNDIsSet = false;
    m_ADDITIONAL_IMAGE_INVALID_FILE = 0;
    m_ADDITIONAL_IMAGE_INVALID_FILEIsSet = false;
    m_HOTEL_PRICE_HEADER_IS_PRESENT = 0;
    m_HOTEL_PRICE_HEADER_IS_PRESENTIsSet = false;
}

CatalogsFeedIngestionWarnings::~CatalogsFeedIngestionWarnings()
{
}

void CatalogsFeedIngestionWarnings::validate()
{
    // TODO: implement validation
}

web::json::value CatalogsFeedIngestionWarnings::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERRORIsSet)
    {
        val[utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERROR"))] = ModelBase::toJson(m_ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERROR);
    }
    if(m_ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLEIsSet)
    {
        val[utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLE"))] = ModelBase::toJson(m_ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLE);
    }
    if(m_ADDITIONAL_IMAGE_MALFORMED_URLIsSet)
    {
        val[utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_MALFORMED_URL"))] = ModelBase::toJson(m_ADDITIONAL_IMAGE_MALFORMED_URL);
    }
    if(m_ADDITIONAL_IMAGE_FILE_NOT_FOUNDIsSet)
    {
        val[utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_FILE_NOT_FOUND"))] = ModelBase::toJson(m_ADDITIONAL_IMAGE_FILE_NOT_FOUND);
    }
    if(m_ADDITIONAL_IMAGE_INVALID_FILEIsSet)
    {
        val[utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_INVALID_FILE"))] = ModelBase::toJson(m_ADDITIONAL_IMAGE_INVALID_FILE);
    }
    if(m_HOTEL_PRICE_HEADER_IS_PRESENTIsSet)
    {
        val[utility::conversions::to_string_t(U("HOTEL_PRICE_HEADER_IS_PRESENT"))] = ModelBase::toJson(m_HOTEL_PRICE_HEADER_IS_PRESENT);
    }

    return val;
}

bool CatalogsFeedIngestionWarnings::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERROR"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERROR")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setADDITIONALIMAGELEVELINTERNALERROR;
            ok &= ModelBase::fromJson(fieldValue, refVal_setADDITIONALIMAGELEVELINTERNALERROR);
            setADDITIONALIMAGELEVELINTERNALERROR(refVal_setADDITIONALIMAGELEVELINTERNALERROR);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLE")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setADDITIONALIMAGEFILENOTACCESSIBLE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setADDITIONALIMAGEFILENOTACCESSIBLE);
            setADDITIONALIMAGEFILENOTACCESSIBLE(refVal_setADDITIONALIMAGEFILENOTACCESSIBLE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_MALFORMED_URL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_MALFORMED_URL")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setADDITIONALIMAGEMALFORMEDURL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setADDITIONALIMAGEMALFORMEDURL);
            setADDITIONALIMAGEMALFORMEDURL(refVal_setADDITIONALIMAGEMALFORMEDURL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_FILE_NOT_FOUND"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_FILE_NOT_FOUND")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setADDITIONALIMAGEFILENOTFOUND;
            ok &= ModelBase::fromJson(fieldValue, refVal_setADDITIONALIMAGEFILENOTFOUND);
            setADDITIONALIMAGEFILENOTFOUND(refVal_setADDITIONALIMAGEFILENOTFOUND);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_INVALID_FILE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_INVALID_FILE")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setADDITIONALIMAGEINVALIDFILE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setADDITIONALIMAGEINVALIDFILE);
            setADDITIONALIMAGEINVALIDFILE(refVal_setADDITIONALIMAGEINVALIDFILE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("HOTEL_PRICE_HEADER_IS_PRESENT"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("HOTEL_PRICE_HEADER_IS_PRESENT")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setHOTELPRICEHEADERISPRESENT;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHOTELPRICEHEADERISPRESENT);
            setHOTELPRICEHEADERISPRESENT(refVal_setHOTELPRICEHEADERISPRESENT);
        }
    }
    return ok;
}

void CatalogsFeedIngestionWarnings::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERRORIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERROR")), m_ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERROR));
    }
    if(m_ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLE")), m_ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLE));
    }
    if(m_ADDITIONAL_IMAGE_MALFORMED_URLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_MALFORMED_URL")), m_ADDITIONAL_IMAGE_MALFORMED_URL));
    }
    if(m_ADDITIONAL_IMAGE_FILE_NOT_FOUNDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_FILE_NOT_FOUND")), m_ADDITIONAL_IMAGE_FILE_NOT_FOUND));
    }
    if(m_ADDITIONAL_IMAGE_INVALID_FILEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_INVALID_FILE")), m_ADDITIONAL_IMAGE_INVALID_FILE));
    }
    if(m_HOTEL_PRICE_HEADER_IS_PRESENTIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("HOTEL_PRICE_HEADER_IS_PRESENT")), m_HOTEL_PRICE_HEADER_IS_PRESENT));
    }
}

bool CatalogsFeedIngestionWarnings::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERROR"))))
    {
        int32_t refVal_setADDITIONALIMAGELEVELINTERNALERROR;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERROR"))), refVal_setADDITIONALIMAGELEVELINTERNALERROR );
        setADDITIONALIMAGELEVELINTERNALERROR(refVal_setADDITIONALIMAGELEVELINTERNALERROR);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLE"))))
    {
        int32_t refVal_setADDITIONALIMAGEFILENOTACCESSIBLE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLE"))), refVal_setADDITIONALIMAGEFILENOTACCESSIBLE );
        setADDITIONALIMAGEFILENOTACCESSIBLE(refVal_setADDITIONALIMAGEFILENOTACCESSIBLE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_MALFORMED_URL"))))
    {
        int32_t refVal_setADDITIONALIMAGEMALFORMEDURL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_MALFORMED_URL"))), refVal_setADDITIONALIMAGEMALFORMEDURL );
        setADDITIONALIMAGEMALFORMEDURL(refVal_setADDITIONALIMAGEMALFORMEDURL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_FILE_NOT_FOUND"))))
    {
        int32_t refVal_setADDITIONALIMAGEFILENOTFOUND;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_FILE_NOT_FOUND"))), refVal_setADDITIONALIMAGEFILENOTFOUND );
        setADDITIONALIMAGEFILENOTFOUND(refVal_setADDITIONALIMAGEFILENOTFOUND);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_INVALID_FILE"))))
    {
        int32_t refVal_setADDITIONALIMAGEINVALIDFILE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_INVALID_FILE"))), refVal_setADDITIONALIMAGEINVALIDFILE );
        setADDITIONALIMAGEINVALIDFILE(refVal_setADDITIONALIMAGEINVALIDFILE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("HOTEL_PRICE_HEADER_IS_PRESENT"))))
    {
        int32_t refVal_setHOTELPRICEHEADERISPRESENT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("HOTEL_PRICE_HEADER_IS_PRESENT"))), refVal_setHOTELPRICEHEADERISPRESENT );
        setHOTELPRICEHEADERISPRESENT(refVal_setHOTELPRICEHEADERISPRESENT);
    }
    return ok;
}

int32_t CatalogsFeedIngestionWarnings::getADDITIONALIMAGELEVELINTERNALERROR() const
{
    return m_ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERROR;
}

void CatalogsFeedIngestionWarnings::setADDITIONALIMAGELEVELINTERNALERROR(int32_t value)
{
    m_ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERROR = value;
    m_ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERRORIsSet = true;
}

bool CatalogsFeedIngestionWarnings::aDDITIONALIMAGELEVELINTERNALERRORIsSet() const
{
    return m_ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERRORIsSet;
}

void CatalogsFeedIngestionWarnings::unsetADDITIONAL_IMAGE_LEVEL_INTERNAL_ERROR()
{
    m_ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERRORIsSet = false;
}
int32_t CatalogsFeedIngestionWarnings::getADDITIONALIMAGEFILENOTACCESSIBLE() const
{
    return m_ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLE;
}

void CatalogsFeedIngestionWarnings::setADDITIONALIMAGEFILENOTACCESSIBLE(int32_t value)
{
    m_ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLE = value;
    m_ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLEIsSet = true;
}

bool CatalogsFeedIngestionWarnings::aDDITIONALIMAGEFILENOTACCESSIBLEIsSet() const
{
    return m_ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLEIsSet;
}

void CatalogsFeedIngestionWarnings::unsetADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLE()
{
    m_ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLEIsSet = false;
}
int32_t CatalogsFeedIngestionWarnings::getADDITIONALIMAGEMALFORMEDURL() const
{
    return m_ADDITIONAL_IMAGE_MALFORMED_URL;
}

void CatalogsFeedIngestionWarnings::setADDITIONALIMAGEMALFORMEDURL(int32_t value)
{
    m_ADDITIONAL_IMAGE_MALFORMED_URL = value;
    m_ADDITIONAL_IMAGE_MALFORMED_URLIsSet = true;
}

bool CatalogsFeedIngestionWarnings::aDDITIONALIMAGEMALFORMEDURLIsSet() const
{
    return m_ADDITIONAL_IMAGE_MALFORMED_URLIsSet;
}

void CatalogsFeedIngestionWarnings::unsetADDITIONAL_IMAGE_MALFORMED_URL()
{
    m_ADDITIONAL_IMAGE_MALFORMED_URLIsSet = false;
}
int32_t CatalogsFeedIngestionWarnings::getADDITIONALIMAGEFILENOTFOUND() const
{
    return m_ADDITIONAL_IMAGE_FILE_NOT_FOUND;
}

void CatalogsFeedIngestionWarnings::setADDITIONALIMAGEFILENOTFOUND(int32_t value)
{
    m_ADDITIONAL_IMAGE_FILE_NOT_FOUND = value;
    m_ADDITIONAL_IMAGE_FILE_NOT_FOUNDIsSet = true;
}

bool CatalogsFeedIngestionWarnings::aDDITIONALIMAGEFILENOTFOUNDIsSet() const
{
    return m_ADDITIONAL_IMAGE_FILE_NOT_FOUNDIsSet;
}

void CatalogsFeedIngestionWarnings::unsetADDITIONAL_IMAGE_FILE_NOT_FOUND()
{
    m_ADDITIONAL_IMAGE_FILE_NOT_FOUNDIsSet = false;
}
int32_t CatalogsFeedIngestionWarnings::getADDITIONALIMAGEINVALIDFILE() const
{
    return m_ADDITIONAL_IMAGE_INVALID_FILE;
}

void CatalogsFeedIngestionWarnings::setADDITIONALIMAGEINVALIDFILE(int32_t value)
{
    m_ADDITIONAL_IMAGE_INVALID_FILE = value;
    m_ADDITIONAL_IMAGE_INVALID_FILEIsSet = true;
}

bool CatalogsFeedIngestionWarnings::aDDITIONALIMAGEINVALIDFILEIsSet() const
{
    return m_ADDITIONAL_IMAGE_INVALID_FILEIsSet;
}

void CatalogsFeedIngestionWarnings::unsetADDITIONAL_IMAGE_INVALID_FILE()
{
    m_ADDITIONAL_IMAGE_INVALID_FILEIsSet = false;
}
int32_t CatalogsFeedIngestionWarnings::getHOTELPRICEHEADERISPRESENT() const
{
    return m_HOTEL_PRICE_HEADER_IS_PRESENT;
}

void CatalogsFeedIngestionWarnings::setHOTELPRICEHEADERISPRESENT(int32_t value)
{
    m_HOTEL_PRICE_HEADER_IS_PRESENT = value;
    m_HOTEL_PRICE_HEADER_IS_PRESENTIsSet = true;
}

bool CatalogsFeedIngestionWarnings::hOTELPRICEHEADERISPRESENTIsSet() const
{
    return m_HOTEL_PRICE_HEADER_IS_PRESENTIsSet;
}

void CatalogsFeedIngestionWarnings::unsetHOTEL_PRICE_HEADER_IS_PRESENT()
{
    m_HOTEL_PRICE_HEADER_IS_PRESENTIsSet = false;
}
}
}
}
}


