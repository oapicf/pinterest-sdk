/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CatalogsCreativeAssetsItemsBatch.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CatalogsCreativeAssetsItemsBatch::CatalogsCreativeAssetsItemsBatch()
{
    m_Batch_id = utility::conversions::to_string_t("");
    m_Batch_idIsSet = false;
    m_Created_time = utility::datetime();
    m_Created_timeIsSet = false;
    m_Completed_time = utility::datetime();
    m_Completed_timeIsSet = false;
    m_StatusIsSet = false;
    m_Catalog_typeIsSet = false;
    m_ItemsIsSet = false;
}

CatalogsCreativeAssetsItemsBatch::~CatalogsCreativeAssetsItemsBatch()
{
}

void CatalogsCreativeAssetsItemsBatch::validate()
{
    // TODO: implement validation
}

web::json::value CatalogsCreativeAssetsItemsBatch::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Batch_idIsSet)
    {
        val[utility::conversions::to_string_t(U("batch_id"))] = ModelBase::toJson(m_Batch_id);
    }
    if(m_Created_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("created_time"))] = ModelBase::toJson(m_Created_time);
    }
    if(m_Completed_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("completed_time"))] = ModelBase::toJson(m_Completed_time);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_Catalog_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("catalog_type"))] = ModelBase::toJson(m_Catalog_type);
    }
    if(m_ItemsIsSet)
    {
        val[utility::conversions::to_string_t(U("items"))] = ModelBase::toJson(m_Items);
    }

    return val;
}

bool CatalogsCreativeAssetsItemsBatch::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("batch_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("batch_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBatchId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBatchId);
            setBatchId(refVal_setBatchId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedTime);
            setCreatedTime(refVal_setCreatedTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("completed_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("completed_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCompletedTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCompletedTime);
            setCompletedTime(refVal_setCompletedTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BatchOperationStatus> refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("catalog_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("catalog_type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsType> refVal_setCatalogType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCatalogType);
            setCatalogType(refVal_setCatalogType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("items"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("items")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<CreativeAssetsProcessingRecord>> refVal_setItems;
            ok &= ModelBase::fromJson(fieldValue, refVal_setItems);
            setItems(refVal_setItems);
        }
    }
    return ok;
}

void CatalogsCreativeAssetsItemsBatch::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Batch_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("batch_id")), m_Batch_id));
    }
    if(m_Created_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_time")), m_Created_time));
    }
    if(m_Completed_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("completed_time")), m_Completed_time));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_Catalog_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("catalog_type")), m_Catalog_type));
    }
    if(m_ItemsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("items")), m_Items));
    }
}

bool CatalogsCreativeAssetsItemsBatch::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("batch_id"))))
    {
        utility::string_t refVal_setBatchId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("batch_id"))), refVal_setBatchId );
        setBatchId(refVal_setBatchId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_time"))))
    {
        utility::datetime refVal_setCreatedTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_time"))), refVal_setCreatedTime );
        setCreatedTime(refVal_setCreatedTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("completed_time"))))
    {
        utility::datetime refVal_setCompletedTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("completed_time"))), refVal_setCompletedTime );
        setCompletedTime(refVal_setCompletedTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<BatchOperationStatus> refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("catalog_type"))))
    {
        std::shared_ptr<CatalogsType> refVal_setCatalogType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("catalog_type"))), refVal_setCatalogType );
        setCatalogType(refVal_setCatalogType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("items"))))
    {
        std::vector<std::shared_ptr<CreativeAssetsProcessingRecord>> refVal_setItems;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("items"))), refVal_setItems );
        setItems(refVal_setItems);
    }
    return ok;
}

utility::string_t CatalogsCreativeAssetsItemsBatch::getBatchId() const
{
    return m_Batch_id;
}

void CatalogsCreativeAssetsItemsBatch::setBatchId(const utility::string_t& value)
{
    m_Batch_id = value;
    m_Batch_idIsSet = true;
}

bool CatalogsCreativeAssetsItemsBatch::batchIdIsSet() const
{
    return m_Batch_idIsSet;
}

void CatalogsCreativeAssetsItemsBatch::unsetBatch_id()
{
    m_Batch_idIsSet = false;
}
utility::datetime CatalogsCreativeAssetsItemsBatch::getCreatedTime() const
{
    return m_Created_time;
}

void CatalogsCreativeAssetsItemsBatch::setCreatedTime(const utility::datetime& value)
{
    m_Created_time = value;
    m_Created_timeIsSet = true;
}

bool CatalogsCreativeAssetsItemsBatch::createdTimeIsSet() const
{
    return m_Created_timeIsSet;
}

void CatalogsCreativeAssetsItemsBatch::unsetCreated_time()
{
    m_Created_timeIsSet = false;
}
utility::datetime CatalogsCreativeAssetsItemsBatch::getCompletedTime() const
{
    return m_Completed_time;
}

void CatalogsCreativeAssetsItemsBatch::setCompletedTime(const utility::datetime& value)
{
    m_Completed_time = value;
    m_Completed_timeIsSet = true;
}

bool CatalogsCreativeAssetsItemsBatch::completedTimeIsSet() const
{
    return m_Completed_timeIsSet;
}

void CatalogsCreativeAssetsItemsBatch::unsetCompleted_time()
{
    m_Completed_timeIsSet = false;
}
std::shared_ptr<BatchOperationStatus> CatalogsCreativeAssetsItemsBatch::getStatus() const
{
    return m_Status;
}

void CatalogsCreativeAssetsItemsBatch::setStatus(const std::shared_ptr<BatchOperationStatus>& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool CatalogsCreativeAssetsItemsBatch::statusIsSet() const
{
    return m_StatusIsSet;
}

void CatalogsCreativeAssetsItemsBatch::unsetStatus()
{
    m_StatusIsSet = false;
}
std::shared_ptr<CatalogsType> CatalogsCreativeAssetsItemsBatch::getCatalogType() const
{
    return m_Catalog_type;
}

void CatalogsCreativeAssetsItemsBatch::setCatalogType(const std::shared_ptr<CatalogsType>& value)
{
    m_Catalog_type = value;
    m_Catalog_typeIsSet = true;
}

bool CatalogsCreativeAssetsItemsBatch::catalogTypeIsSet() const
{
    return m_Catalog_typeIsSet;
}

void CatalogsCreativeAssetsItemsBatch::unsetCatalog_type()
{
    m_Catalog_typeIsSet = false;
}
std::vector<std::shared_ptr<CreativeAssetsProcessingRecord>>& CatalogsCreativeAssetsItemsBatch::getItems()
{
    return m_Items;
}

void CatalogsCreativeAssetsItemsBatch::setItems(const std::vector<std::shared_ptr<CreativeAssetsProcessingRecord>>& value)
{
    m_Items = value;
    m_ItemsIsSet = true;
}

bool CatalogsCreativeAssetsItemsBatch::itemsIsSet() const
{
    return m_ItemsIsSet;
}

void CatalogsCreativeAssetsItemsBatch::unsetItems()
{
    m_ItemsIsSet = false;
}
}
}
}
}


