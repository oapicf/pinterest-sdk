/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AudienceCreateCustomRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AudienceCreateCustomRequest::AudienceCreateCustomRequest()
{
    m_Ad_account_id = utility::conversions::to_string_t("");
    m_Ad_account_idIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_RuleIsSet = false;
    m_Sharing_typeIsSet = false;
    m_Data_partyIsSet = false;
    m_Category = utility::conversions::to_string_t("");
    m_CategoryIsSet = false;
}

AudienceCreateCustomRequest::~AudienceCreateCustomRequest()
{
}

void AudienceCreateCustomRequest::validate()
{
    // TODO: implement validation
}

web::json::value AudienceCreateCustomRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Ad_account_idIsSet)
    {
        val[utility::conversions::to_string_t(U("ad_account_id"))] = ModelBase::toJson(m_Ad_account_id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_RuleIsSet)
    {
        val[utility::conversions::to_string_t(U("rule"))] = ModelBase::toJson(m_Rule);
    }
    if(m_Sharing_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("sharing_type"))] = ModelBase::toJson(m_Sharing_type);
    }
    if(m_Data_partyIsSet)
    {
        val[utility::conversions::to_string_t(U("data_party"))] = ModelBase::toJson(m_Data_party);
    }
    if(m_CategoryIsSet)
    {
        val[utility::conversions::to_string_t(U("category"))] = ModelBase::toJson(m_Category);
    }

    return val;
}

bool AudienceCreateCustomRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("ad_account_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ad_account_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAdAccountId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdAccountId);
            setAdAccountId(refVal_setAdAccountId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rule"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rule")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AudienceRule> refVal_setRule;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRule);
            setRule(refVal_setRule);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sharing_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sharing_type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AudienceSharingType> refVal_setSharingType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSharingType);
            setSharingType(refVal_setSharingType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("data_party"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("data_party")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AudienceDataParty> refVal_setDataParty;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataParty);
            setDataParty(refVal_setDataParty);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("category"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("category")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCategory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCategory);
            setCategory(refVal_setCategory);
        }
    }
    return ok;
}

void AudienceCreateCustomRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Ad_account_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ad_account_id")), m_Ad_account_id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_RuleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rule")), m_Rule));
    }
    if(m_Sharing_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sharing_type")), m_Sharing_type));
    }
    if(m_Data_partyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("data_party")), m_Data_party));
    }
    if(m_CategoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("category")), m_Category));
    }
}

bool AudienceCreateCustomRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("ad_account_id"))))
    {
        utility::string_t refVal_setAdAccountId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ad_account_id"))), refVal_setAdAccountId );
        setAdAccountId(refVal_setAdAccountId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rule"))))
    {
        std::shared_ptr<AudienceRule> refVal_setRule;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rule"))), refVal_setRule );
        setRule(refVal_setRule);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sharing_type"))))
    {
        std::shared_ptr<AudienceSharingType> refVal_setSharingType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sharing_type"))), refVal_setSharingType );
        setSharingType(refVal_setSharingType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("data_party"))))
    {
        std::shared_ptr<AudienceDataParty> refVal_setDataParty;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("data_party"))), refVal_setDataParty );
        setDataParty(refVal_setDataParty);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("category"))))
    {
        utility::string_t refVal_setCategory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("category"))), refVal_setCategory );
        setCategory(refVal_setCategory);
    }
    return ok;
}

utility::string_t AudienceCreateCustomRequest::getAdAccountId() const
{
    return m_Ad_account_id;
}

void AudienceCreateCustomRequest::setAdAccountId(const utility::string_t& value)
{
    m_Ad_account_id = value;
    m_Ad_account_idIsSet = true;
}

bool AudienceCreateCustomRequest::adAccountIdIsSet() const
{
    return m_Ad_account_idIsSet;
}

void AudienceCreateCustomRequest::unsetAd_account_id()
{
    m_Ad_account_idIsSet = false;
}
utility::string_t AudienceCreateCustomRequest::getName() const
{
    return m_Name;
}

void AudienceCreateCustomRequest::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool AudienceCreateCustomRequest::nameIsSet() const
{
    return m_NameIsSet;
}

void AudienceCreateCustomRequest::unsetName()
{
    m_NameIsSet = false;
}
std::shared_ptr<AudienceRule> AudienceCreateCustomRequest::getRule() const
{
    return m_Rule;
}

void AudienceCreateCustomRequest::setRule(const std::shared_ptr<AudienceRule>& value)
{
    m_Rule = value;
    m_RuleIsSet = true;
}

bool AudienceCreateCustomRequest::ruleIsSet() const
{
    return m_RuleIsSet;
}

void AudienceCreateCustomRequest::unsetRule()
{
    m_RuleIsSet = false;
}
std::shared_ptr<AudienceSharingType> AudienceCreateCustomRequest::getSharingType() const
{
    return m_Sharing_type;
}

void AudienceCreateCustomRequest::setSharingType(const std::shared_ptr<AudienceSharingType>& value)
{
    m_Sharing_type = value;
    m_Sharing_typeIsSet = true;
}

bool AudienceCreateCustomRequest::sharingTypeIsSet() const
{
    return m_Sharing_typeIsSet;
}

void AudienceCreateCustomRequest::unsetSharing_type()
{
    m_Sharing_typeIsSet = false;
}
std::shared_ptr<AudienceDataParty> AudienceCreateCustomRequest::getDataParty() const
{
    return m_Data_party;
}

void AudienceCreateCustomRequest::setDataParty(const std::shared_ptr<AudienceDataParty>& value)
{
    m_Data_party = value;
    m_Data_partyIsSet = true;
}

bool AudienceCreateCustomRequest::dataPartyIsSet() const
{
    return m_Data_partyIsSet;
}

void AudienceCreateCustomRequest::unsetData_party()
{
    m_Data_partyIsSet = false;
}
utility::string_t AudienceCreateCustomRequest::getCategory() const
{
    return m_Category;
}

void AudienceCreateCustomRequest::setCategory(const utility::string_t& value)
{
    m_Category = value;
    m_CategoryIsSet = true;
}

bool AudienceCreateCustomRequest::categoryIsSet() const
{
    return m_CategoryIsSet;
}

void AudienceCreateCustomRequest::unsetCategory()
{
    m_CategoryIsSet = false;
}
}
}
}
}


