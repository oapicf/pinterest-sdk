/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ProductType1Filter.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ProductType1Filter::ProductType1Filter()
{
    m_PRODUCT_TYPE_1IsSet = false;
}

ProductType1Filter::~ProductType1Filter()
{
}

void ProductType1Filter::validate()
{
    // TODO: implement validation
}

web::json::value ProductType1Filter::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PRODUCT_TYPE_1IsSet)
    {
        val[utility::conversions::to_string_t(U("PRODUCT_TYPE_1"))] = ModelBase::toJson(m_PRODUCT_TYPE_1);
    }

    return val;
}

bool ProductType1Filter::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("PRODUCT_TYPE_1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("PRODUCT_TYPE_1")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setPRODUCTTYPE1;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPRODUCTTYPE1);
            setPRODUCTTYPE1(refVal_setPRODUCTTYPE1);
        }
    }
    return ok;
}

void ProductType1Filter::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PRODUCT_TYPE_1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("PRODUCT_TYPE_1")), m_PRODUCT_TYPE_1));
    }
}

bool ProductType1Filter::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("PRODUCT_TYPE_1"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setPRODUCTTYPE1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("PRODUCT_TYPE_1"))), refVal_setPRODUCTTYPE1 );
        setPRODUCTTYPE1(refVal_setPRODUCTTYPE1);
    }
    return ok;
}

std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> ProductType1Filter::getPRODUCTTYPE1() const
{
    return m_PRODUCT_TYPE_1;
}

void ProductType1Filter::setPRODUCTTYPE1(const std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria>& value)
{
    m_PRODUCT_TYPE_1 = value;
    m_PRODUCT_TYPE_1IsSet = true;
}

bool ProductType1Filter::pRODUCTTYPE1IsSet() const
{
    return m_PRODUCT_TYPE_1IsSet;
}

void ProductType1Filter::unsetPRODUCT_TYPE_1()
{
    m_PRODUCT_TYPE_1IsSet = false;
}
}
}
}
}


