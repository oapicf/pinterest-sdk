/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/TrendingKeywordsResponse_trends_inner_time_series.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



TrendingKeywordsResponse_trends_inner_time_series::TrendingKeywordsResponse_trends_inner_time_series()
{
    m_dateIsSet = false;
}

TrendingKeywordsResponse_trends_inner_time_series::~TrendingKeywordsResponse_trends_inner_time_series()
{
}

void TrendingKeywordsResponse_trends_inner_time_series::validate()
{
    // TODO: implement validation
}

web::json::value TrendingKeywordsResponse_trends_inner_time_series::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_dateIsSet)
    {
        val[utility::conversions::to_string_t(U("date"))] = ModelBase::toJson(m_date);
    }

    return val;
}

bool TrendingKeywordsResponse_trends_inner_time_series::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("date")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDate);
            setDate(refVal_setDate);
        }
    }
    return ok;
}

void TrendingKeywordsResponse_trends_inner_time_series::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("date")), m_date));
    }
}

bool TrendingKeywordsResponse_trends_inner_time_series::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("date"))))
    {
        utility::datetime refVal_setDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("date"))), refVal_setDate );
        setDate(refVal_setDate);
    }
    return ok;
}

utility::datetime TrendingKeywordsResponse_trends_inner_time_series::getDate() const
{
    return m_date;
}

void TrendingKeywordsResponse_trends_inner_time_series::setDate(const utility::datetime& value)
{
    m_date = value;
    m_dateIsSet = true;
}

bool TrendingKeywordsResponse_trends_inner_time_series::dateIsSet() const
{
    return m_dateIsSet;
}

void TrendingKeywordsResponse_trends_inner_time_series::unsetdate()
{
    m_dateIsSet = false;
}
}
}
}
}


