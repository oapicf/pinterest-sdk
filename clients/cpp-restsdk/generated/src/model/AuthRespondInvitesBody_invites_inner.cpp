/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AuthRespondInvitesBody_invites_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AuthRespondInvitesBody_invites_inner::AuthRespondInvitesBody_invites_inner()
{
    m_ActionIsSet = false;
    m_Invite_id = utility::conversions::to_string_t("");
    m_Invite_idIsSet = false;
}

AuthRespondInvitesBody_invites_inner::~AuthRespondInvitesBody_invites_inner()
{
}

void AuthRespondInvitesBody_invites_inner::validate()
{
    // TODO: implement validation
}

web::json::value AuthRespondInvitesBody_invites_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ActionIsSet)
    {
        val[utility::conversions::to_string_t(U("action"))] = ModelBase::toJson(m_Action);
    }
    if(m_Invite_idIsSet)
    {
        val[utility::conversions::to_string_t(U("invite_id"))] = ModelBase::toJson(m_Invite_id);
    }

    return val;
}

bool AuthRespondInvitesBody_invites_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("action"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("action")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AuthRespondInvitesBody_invites_inner_action> refVal_setAction;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAction);
            setAction(refVal_setAction);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("invite_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("invite_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInviteId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInviteId);
            setInviteId(refVal_setInviteId);
        }
    }
    return ok;
}

void AuthRespondInvitesBody_invites_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ActionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("action")), m_Action));
    }
    if(m_Invite_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("invite_id")), m_Invite_id));
    }
}

bool AuthRespondInvitesBody_invites_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("action"))))
    {
        std::shared_ptr<AuthRespondInvitesBody_invites_inner_action> refVal_setAction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("action"))), refVal_setAction );
        setAction(refVal_setAction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("invite_id"))))
    {
        utility::string_t refVal_setInviteId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("invite_id"))), refVal_setInviteId );
        setInviteId(refVal_setInviteId);
    }
    return ok;
}

std::shared_ptr<AuthRespondInvitesBody_invites_inner_action> AuthRespondInvitesBody_invites_inner::getAction() const
{
    return m_Action;
}

void AuthRespondInvitesBody_invites_inner::setAction(const std::shared_ptr<AuthRespondInvitesBody_invites_inner_action>& value)
{
    m_Action = value;
    m_ActionIsSet = true;
}

bool AuthRespondInvitesBody_invites_inner::actionIsSet() const
{
    return m_ActionIsSet;
}

void AuthRespondInvitesBody_invites_inner::unsetAction()
{
    m_ActionIsSet = false;
}
utility::string_t AuthRespondInvitesBody_invites_inner::getInviteId() const
{
    return m_Invite_id;
}

void AuthRespondInvitesBody_invites_inner::setInviteId(const utility::string_t& value)
{
    m_Invite_id = value;
    m_Invite_idIsSet = true;
}

bool AuthRespondInvitesBody_invites_inner::inviteIdIsSet() const
{
    return m_Invite_idIsSet;
}

void AuthRespondInvitesBody_invites_inner::unsetInvite_id()
{
    m_Invite_idIsSet = false;
}
}
}
}
}


