/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateAssetGroupBody.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CreateAssetGroupBody::CreateAssetGroupBody()
{
    m_Asset_group_name = utility::conversions::to_string_t("");
    m_Asset_group_nameIsSet = false;
    m_Asset_group_description = utility::conversions::to_string_t("");
    m_Asset_group_descriptionIsSet = false;
    m_Asset_group_typesIsSet = false;
}

CreateAssetGroupBody::~CreateAssetGroupBody()
{
}

void CreateAssetGroupBody::validate()
{
    // TODO: implement validation
}

web::json::value CreateAssetGroupBody::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Asset_group_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("asset_group_name"))] = ModelBase::toJson(m_Asset_group_name);
    }
    if(m_Asset_group_descriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("asset_group_description"))] = ModelBase::toJson(m_Asset_group_description);
    }
    if(m_Asset_group_typesIsSet)
    {
        val[utility::conversions::to_string_t(U("asset_group_types"))] = ModelBase::toJson(m_Asset_group_types);
    }

    return val;
}

bool CreateAssetGroupBody::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("asset_group_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("asset_group_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssetGroupName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetGroupName);
            setAssetGroupName(refVal_setAssetGroupName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("asset_group_description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("asset_group_description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssetGroupDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetGroupDescription);
            setAssetGroupDescription(refVal_setAssetGroupDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("asset_group_types"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("asset_group_types")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<AssetGroupType>> refVal_setAssetGroupTypes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetGroupTypes);
            setAssetGroupTypes(refVal_setAssetGroupTypes);
        }
    }
    return ok;
}

void CreateAssetGroupBody::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Asset_group_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("asset_group_name")), m_Asset_group_name));
    }
    if(m_Asset_group_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("asset_group_description")), m_Asset_group_description));
    }
    if(m_Asset_group_typesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("asset_group_types")), m_Asset_group_types));
    }
}

bool CreateAssetGroupBody::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("asset_group_name"))))
    {
        utility::string_t refVal_setAssetGroupName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("asset_group_name"))), refVal_setAssetGroupName );
        setAssetGroupName(refVal_setAssetGroupName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("asset_group_description"))))
    {
        utility::string_t refVal_setAssetGroupDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("asset_group_description"))), refVal_setAssetGroupDescription );
        setAssetGroupDescription(refVal_setAssetGroupDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("asset_group_types"))))
    {
        std::vector<std::shared_ptr<AssetGroupType>> refVal_setAssetGroupTypes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("asset_group_types"))), refVal_setAssetGroupTypes );
        setAssetGroupTypes(refVal_setAssetGroupTypes);
    }
    return ok;
}

utility::string_t CreateAssetGroupBody::getAssetGroupName() const
{
    return m_Asset_group_name;
}

void CreateAssetGroupBody::setAssetGroupName(const utility::string_t& value)
{
    m_Asset_group_name = value;
    m_Asset_group_nameIsSet = true;
}

bool CreateAssetGroupBody::assetGroupNameIsSet() const
{
    return m_Asset_group_nameIsSet;
}

void CreateAssetGroupBody::unsetAsset_group_name()
{
    m_Asset_group_nameIsSet = false;
}
utility::string_t CreateAssetGroupBody::getAssetGroupDescription() const
{
    return m_Asset_group_description;
}

void CreateAssetGroupBody::setAssetGroupDescription(const utility::string_t& value)
{
    m_Asset_group_description = value;
    m_Asset_group_descriptionIsSet = true;
}

bool CreateAssetGroupBody::assetGroupDescriptionIsSet() const
{
    return m_Asset_group_descriptionIsSet;
}

void CreateAssetGroupBody::unsetAsset_group_description()
{
    m_Asset_group_descriptionIsSet = false;
}
std::vector<std::shared_ptr<AssetGroupType>>& CreateAssetGroupBody::getAssetGroupTypes()
{
    return m_Asset_group_types;
}

void CreateAssetGroupBody::setAssetGroupTypes(const std::vector<std::shared_ptr<AssetGroupType>>& value)
{
    m_Asset_group_types = value;
    m_Asset_group_typesIsSet = true;
}

bool CreateAssetGroupBody::assetGroupTypesIsSet() const
{
    return m_Asset_group_typesIsSet;
}

void CreateAssetGroupBody::unsetAsset_group_types()
{
    m_Asset_group_typesIsSet = false;
}
}
}
}
}


