/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/TargetingTemplateAudienceSizing_reach_estimate.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



TargetingTemplateAudienceSizing_reach_estimate::TargetingTemplateAudienceSizing_reach_estimate()
{
    m_Estimate = 0L;
    m_EstimateIsSet = false;
    m_Lower_bound = 0L;
    m_Lower_boundIsSet = false;
    m_Upper_bound = 0L;
    m_Upper_boundIsSet = false;
}

TargetingTemplateAudienceSizing_reach_estimate::~TargetingTemplateAudienceSizing_reach_estimate()
{
}

void TargetingTemplateAudienceSizing_reach_estimate::validate()
{
    // TODO: implement validation
}

web::json::value TargetingTemplateAudienceSizing_reach_estimate::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EstimateIsSet)
    {
        val[utility::conversions::to_string_t(U("estimate"))] = ModelBase::toJson(m_Estimate);
    }
    if(m_Lower_boundIsSet)
    {
        val[utility::conversions::to_string_t(U("lower_bound"))] = ModelBase::toJson(m_Lower_bound);
    }
    if(m_Upper_boundIsSet)
    {
        val[utility::conversions::to_string_t(U("upper_bound"))] = ModelBase::toJson(m_Upper_bound);
    }

    return val;
}

bool TargetingTemplateAudienceSizing_reach_estimate::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("estimate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("estimate")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setEstimate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEstimate);
            setEstimate(refVal_setEstimate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lower_bound"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lower_bound")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setLowerBound;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLowerBound);
            setLowerBound(refVal_setLowerBound);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("upper_bound"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("upper_bound")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setUpperBound;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpperBound);
            setUpperBound(refVal_setUpperBound);
        }
    }
    return ok;
}

void TargetingTemplateAudienceSizing_reach_estimate::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_EstimateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("estimate")), m_Estimate));
    }
    if(m_Lower_boundIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lower_bound")), m_Lower_bound));
    }
    if(m_Upper_boundIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("upper_bound")), m_Upper_bound));
    }
}

bool TargetingTemplateAudienceSizing_reach_estimate::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("estimate"))))
    {
        int64_t refVal_setEstimate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("estimate"))), refVal_setEstimate );
        setEstimate(refVal_setEstimate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lower_bound"))))
    {
        int64_t refVal_setLowerBound;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lower_bound"))), refVal_setLowerBound );
        setLowerBound(refVal_setLowerBound);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("upper_bound"))))
    {
        int64_t refVal_setUpperBound;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("upper_bound"))), refVal_setUpperBound );
        setUpperBound(refVal_setUpperBound);
    }
    return ok;
}

int64_t TargetingTemplateAudienceSizing_reach_estimate::getEstimate() const
{
    return m_Estimate;
}

void TargetingTemplateAudienceSizing_reach_estimate::setEstimate(int64_t value)
{
    m_Estimate = value;
    m_EstimateIsSet = true;
}

bool TargetingTemplateAudienceSizing_reach_estimate::estimateIsSet() const
{
    return m_EstimateIsSet;
}

void TargetingTemplateAudienceSizing_reach_estimate::unsetEstimate()
{
    m_EstimateIsSet = false;
}
int64_t TargetingTemplateAudienceSizing_reach_estimate::getLowerBound() const
{
    return m_Lower_bound;
}

void TargetingTemplateAudienceSizing_reach_estimate::setLowerBound(int64_t value)
{
    m_Lower_bound = value;
    m_Lower_boundIsSet = true;
}

bool TargetingTemplateAudienceSizing_reach_estimate::lowerBoundIsSet() const
{
    return m_Lower_boundIsSet;
}

void TargetingTemplateAudienceSizing_reach_estimate::unsetLower_bound()
{
    m_Lower_boundIsSet = false;
}
int64_t TargetingTemplateAudienceSizing_reach_estimate::getUpperBound() const
{
    return m_Upper_bound;
}

void TargetingTemplateAudienceSizing_reach_estimate::setUpperBound(int64_t value)
{
    m_Upper_bound = value;
    m_Upper_boundIsSet = true;
}

bool TargetingTemplateAudienceSizing_reach_estimate::upperBoundIsSet() const
{
    return m_Upper_boundIsSet;
}

void TargetingTemplateAudienceSizing_reach_estimate::unsetUpper_bound()
{
    m_Upper_boundIsSet = false;
}
}
}
}
}


