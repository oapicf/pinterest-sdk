/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ConversionEvents_data_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ConversionEvents_data_inner::ConversionEvents_data_inner()
{
    m_Event_name = utility::conversions::to_string_t("");
    m_Event_nameIsSet = false;
    m_Action_source = utility::conversions::to_string_t("");
    m_Action_sourceIsSet = false;
    m_Event_time = 0L;
    m_Event_timeIsSet = false;
    m_Event_id = utility::conversions::to_string_t("");
    m_Event_idIsSet = false;
    m_Event_source_url = utility::conversions::to_string_t("");
    m_Event_source_urlIsSet = false;
    m_Opt_out = false;
    m_Opt_outIsSet = false;
    m_Partner_name = utility::conversions::to_string_t("");
    m_Partner_nameIsSet = false;
    m_User_dataIsSet = false;
    m_Custom_dataIsSet = false;
    m_App_id = utility::conversions::to_string_t("");
    m_App_idIsSet = false;
    m_App_name = utility::conversions::to_string_t("");
    m_App_nameIsSet = false;
    m_App_version = utility::conversions::to_string_t("");
    m_App_versionIsSet = false;
    m_Device_brand = utility::conversions::to_string_t("");
    m_Device_brandIsSet = false;
    m_Device_carrier = utility::conversions::to_string_t("");
    m_Device_carrierIsSet = false;
    m_Device_model = utility::conversions::to_string_t("");
    m_Device_modelIsSet = false;
    m_Device_type = utility::conversions::to_string_t("");
    m_Device_typeIsSet = false;
    m_Os_version = utility::conversions::to_string_t("");
    m_Os_versionIsSet = false;
    m_Wifi = false;
    m_WifiIsSet = false;
    m_Language = utility::conversions::to_string_t("");
    m_LanguageIsSet = false;
}

ConversionEvents_data_inner::~ConversionEvents_data_inner()
{
}

void ConversionEvents_data_inner::validate()
{
    // TODO: implement validation
}

web::json::value ConversionEvents_data_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Event_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("event_name"))] = ModelBase::toJson(m_Event_name);
    }
    if(m_Action_sourceIsSet)
    {
        val[utility::conversions::to_string_t(U("action_source"))] = ModelBase::toJson(m_Action_source);
    }
    if(m_Event_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("event_time"))] = ModelBase::toJson(m_Event_time);
    }
    if(m_Event_idIsSet)
    {
        val[utility::conversions::to_string_t(U("event_id"))] = ModelBase::toJson(m_Event_id);
    }
    if(m_Event_source_urlIsSet)
    {
        val[utility::conversions::to_string_t(U("event_source_url"))] = ModelBase::toJson(m_Event_source_url);
    }
    if(m_Opt_outIsSet)
    {
        val[utility::conversions::to_string_t(U("opt_out"))] = ModelBase::toJson(m_Opt_out);
    }
    if(m_Partner_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("partner_name"))] = ModelBase::toJson(m_Partner_name);
    }
    if(m_User_dataIsSet)
    {
        val[utility::conversions::to_string_t(U("user_data"))] = ModelBase::toJson(m_User_data);
    }
    if(m_Custom_dataIsSet)
    {
        val[utility::conversions::to_string_t(U("custom_data"))] = ModelBase::toJson(m_Custom_data);
    }
    if(m_App_idIsSet)
    {
        val[utility::conversions::to_string_t(U("app_id"))] = ModelBase::toJson(m_App_id);
    }
    if(m_App_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("app_name"))] = ModelBase::toJson(m_App_name);
    }
    if(m_App_versionIsSet)
    {
        val[utility::conversions::to_string_t(U("app_version"))] = ModelBase::toJson(m_App_version);
    }
    if(m_Device_brandIsSet)
    {
        val[utility::conversions::to_string_t(U("device_brand"))] = ModelBase::toJson(m_Device_brand);
    }
    if(m_Device_carrierIsSet)
    {
        val[utility::conversions::to_string_t(U("device_carrier"))] = ModelBase::toJson(m_Device_carrier);
    }
    if(m_Device_modelIsSet)
    {
        val[utility::conversions::to_string_t(U("device_model"))] = ModelBase::toJson(m_Device_model);
    }
    if(m_Device_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("device_type"))] = ModelBase::toJson(m_Device_type);
    }
    if(m_Os_versionIsSet)
    {
        val[utility::conversions::to_string_t(U("os_version"))] = ModelBase::toJson(m_Os_version);
    }
    if(m_WifiIsSet)
    {
        val[utility::conversions::to_string_t(U("wifi"))] = ModelBase::toJson(m_Wifi);
    }
    if(m_LanguageIsSet)
    {
        val[utility::conversions::to_string_t(U("language"))] = ModelBase::toJson(m_Language);
    }

    return val;
}

bool ConversionEvents_data_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("event_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("event_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEventName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEventName);
            setEventName(refVal_setEventName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("action_source"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("action_source")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setActionSource;
            ok &= ModelBase::fromJson(fieldValue, refVal_setActionSource);
            setActionSource(refVal_setActionSource);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("event_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("event_time")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setEventTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEventTime);
            setEventTime(refVal_setEventTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("event_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("event_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEventId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEventId);
            setEventId(refVal_setEventId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("event_source_url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("event_source_url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEventSourceUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEventSourceUrl);
            setEventSourceUrl(refVal_setEventSourceUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("opt_out"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("opt_out")));
        if(!fieldValue.is_null())
        {
            bool refVal_setOptOut;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOptOut);
            setOptOut(refVal_setOptOut);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("partner_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("partner_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPartnerName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPartnerName);
            setPartnerName(refVal_setPartnerName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user_data"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user_data")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ConversionEventsUserData> refVal_setUserData;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserData);
            setUserData(refVal_setUserData);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("custom_data"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("custom_data")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ConversionEvents_data_inner_custom_data> refVal_setCustomData;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomData);
            setCustomData(refVal_setCustomData);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("app_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("app_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAppId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAppId);
            setAppId(refVal_setAppId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("app_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("app_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAppName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAppName);
            setAppName(refVal_setAppName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("app_version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("app_version")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAppVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAppVersion);
            setAppVersion(refVal_setAppVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("device_brand"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("device_brand")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDeviceBrand;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeviceBrand);
            setDeviceBrand(refVal_setDeviceBrand);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("device_carrier"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("device_carrier")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDeviceCarrier;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeviceCarrier);
            setDeviceCarrier(refVal_setDeviceCarrier);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("device_model"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("device_model")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDeviceModel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeviceModel);
            setDeviceModel(refVal_setDeviceModel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("device_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("device_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDeviceType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeviceType);
            setDeviceType(refVal_setDeviceType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("os_version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("os_version")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOsVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOsVersion);
            setOsVersion(refVal_setOsVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("wifi"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("wifi")));
        if(!fieldValue.is_null())
        {
            bool refVal_setWifi;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWifi);
            setWifi(refVal_setWifi);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("language"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("language")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLanguage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLanguage);
            setLanguage(refVal_setLanguage);
        }
    }
    return ok;
}

void ConversionEvents_data_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Event_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("event_name")), m_Event_name));
    }
    if(m_Action_sourceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("action_source")), m_Action_source));
    }
    if(m_Event_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("event_time")), m_Event_time));
    }
    if(m_Event_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("event_id")), m_Event_id));
    }
    if(m_Event_source_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("event_source_url")), m_Event_source_url));
    }
    if(m_Opt_outIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("opt_out")), m_Opt_out));
    }
    if(m_Partner_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("partner_name")), m_Partner_name));
    }
    if(m_User_dataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user_data")), m_User_data));
    }
    if(m_Custom_dataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("custom_data")), m_Custom_data));
    }
    if(m_App_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("app_id")), m_App_id));
    }
    if(m_App_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("app_name")), m_App_name));
    }
    if(m_App_versionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("app_version")), m_App_version));
    }
    if(m_Device_brandIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("device_brand")), m_Device_brand));
    }
    if(m_Device_carrierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("device_carrier")), m_Device_carrier));
    }
    if(m_Device_modelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("device_model")), m_Device_model));
    }
    if(m_Device_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("device_type")), m_Device_type));
    }
    if(m_Os_versionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("os_version")), m_Os_version));
    }
    if(m_WifiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("wifi")), m_Wifi));
    }
    if(m_LanguageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("language")), m_Language));
    }
}

bool ConversionEvents_data_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("event_name"))))
    {
        utility::string_t refVal_setEventName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("event_name"))), refVal_setEventName );
        setEventName(refVal_setEventName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("action_source"))))
    {
        utility::string_t refVal_setActionSource;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("action_source"))), refVal_setActionSource );
        setActionSource(refVal_setActionSource);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("event_time"))))
    {
        int64_t refVal_setEventTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("event_time"))), refVal_setEventTime );
        setEventTime(refVal_setEventTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("event_id"))))
    {
        utility::string_t refVal_setEventId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("event_id"))), refVal_setEventId );
        setEventId(refVal_setEventId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("event_source_url"))))
    {
        utility::string_t refVal_setEventSourceUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("event_source_url"))), refVal_setEventSourceUrl );
        setEventSourceUrl(refVal_setEventSourceUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("opt_out"))))
    {
        bool refVal_setOptOut;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("opt_out"))), refVal_setOptOut );
        setOptOut(refVal_setOptOut);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("partner_name"))))
    {
        utility::string_t refVal_setPartnerName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("partner_name"))), refVal_setPartnerName );
        setPartnerName(refVal_setPartnerName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user_data"))))
    {
        std::shared_ptr<ConversionEventsUserData> refVal_setUserData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user_data"))), refVal_setUserData );
        setUserData(refVal_setUserData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("custom_data"))))
    {
        std::shared_ptr<ConversionEvents_data_inner_custom_data> refVal_setCustomData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("custom_data"))), refVal_setCustomData );
        setCustomData(refVal_setCustomData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("app_id"))))
    {
        utility::string_t refVal_setAppId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("app_id"))), refVal_setAppId );
        setAppId(refVal_setAppId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("app_name"))))
    {
        utility::string_t refVal_setAppName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("app_name"))), refVal_setAppName );
        setAppName(refVal_setAppName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("app_version"))))
    {
        utility::string_t refVal_setAppVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("app_version"))), refVal_setAppVersion );
        setAppVersion(refVal_setAppVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("device_brand"))))
    {
        utility::string_t refVal_setDeviceBrand;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("device_brand"))), refVal_setDeviceBrand );
        setDeviceBrand(refVal_setDeviceBrand);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("device_carrier"))))
    {
        utility::string_t refVal_setDeviceCarrier;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("device_carrier"))), refVal_setDeviceCarrier );
        setDeviceCarrier(refVal_setDeviceCarrier);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("device_model"))))
    {
        utility::string_t refVal_setDeviceModel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("device_model"))), refVal_setDeviceModel );
        setDeviceModel(refVal_setDeviceModel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("device_type"))))
    {
        utility::string_t refVal_setDeviceType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("device_type"))), refVal_setDeviceType );
        setDeviceType(refVal_setDeviceType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("os_version"))))
    {
        utility::string_t refVal_setOsVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("os_version"))), refVal_setOsVersion );
        setOsVersion(refVal_setOsVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("wifi"))))
    {
        bool refVal_setWifi;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("wifi"))), refVal_setWifi );
        setWifi(refVal_setWifi);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("language"))))
    {
        utility::string_t refVal_setLanguage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("language"))), refVal_setLanguage );
        setLanguage(refVal_setLanguage);
    }
    return ok;
}

utility::string_t ConversionEvents_data_inner::getEventName() const
{
    return m_Event_name;
}

void ConversionEvents_data_inner::setEventName(const utility::string_t& value)
{
    m_Event_name = value;
    m_Event_nameIsSet = true;
}

bool ConversionEvents_data_inner::eventNameIsSet() const
{
    return m_Event_nameIsSet;
}

void ConversionEvents_data_inner::unsetEvent_name()
{
    m_Event_nameIsSet = false;
}
utility::string_t ConversionEvents_data_inner::getActionSource() const
{
    return m_Action_source;
}

void ConversionEvents_data_inner::setActionSource(const utility::string_t& value)
{
    m_Action_source = value;
    m_Action_sourceIsSet = true;
}

bool ConversionEvents_data_inner::actionSourceIsSet() const
{
    return m_Action_sourceIsSet;
}

void ConversionEvents_data_inner::unsetAction_source()
{
    m_Action_sourceIsSet = false;
}
int64_t ConversionEvents_data_inner::getEventTime() const
{
    return m_Event_time;
}

void ConversionEvents_data_inner::setEventTime(int64_t value)
{
    m_Event_time = value;
    m_Event_timeIsSet = true;
}

bool ConversionEvents_data_inner::eventTimeIsSet() const
{
    return m_Event_timeIsSet;
}

void ConversionEvents_data_inner::unsetEvent_time()
{
    m_Event_timeIsSet = false;
}
utility::string_t ConversionEvents_data_inner::getEventId() const
{
    return m_Event_id;
}

void ConversionEvents_data_inner::setEventId(const utility::string_t& value)
{
    m_Event_id = value;
    m_Event_idIsSet = true;
}

bool ConversionEvents_data_inner::eventIdIsSet() const
{
    return m_Event_idIsSet;
}

void ConversionEvents_data_inner::unsetEvent_id()
{
    m_Event_idIsSet = false;
}
utility::string_t ConversionEvents_data_inner::getEventSourceUrl() const
{
    return m_Event_source_url;
}

void ConversionEvents_data_inner::setEventSourceUrl(const utility::string_t& value)
{
    m_Event_source_url = value;
    m_Event_source_urlIsSet = true;
}

bool ConversionEvents_data_inner::eventSourceUrlIsSet() const
{
    return m_Event_source_urlIsSet;
}

void ConversionEvents_data_inner::unsetEvent_source_url()
{
    m_Event_source_urlIsSet = false;
}
bool ConversionEvents_data_inner::isOptOut() const
{
    return m_Opt_out;
}

void ConversionEvents_data_inner::setOptOut(bool value)
{
    m_Opt_out = value;
    m_Opt_outIsSet = true;
}

bool ConversionEvents_data_inner::optOutIsSet() const
{
    return m_Opt_outIsSet;
}

void ConversionEvents_data_inner::unsetOpt_out()
{
    m_Opt_outIsSet = false;
}
utility::string_t ConversionEvents_data_inner::getPartnerName() const
{
    return m_Partner_name;
}

void ConversionEvents_data_inner::setPartnerName(const utility::string_t& value)
{
    m_Partner_name = value;
    m_Partner_nameIsSet = true;
}

bool ConversionEvents_data_inner::partnerNameIsSet() const
{
    return m_Partner_nameIsSet;
}

void ConversionEvents_data_inner::unsetPartner_name()
{
    m_Partner_nameIsSet = false;
}
std::shared_ptr<ConversionEventsUserData> ConversionEvents_data_inner::getUserData() const
{
    return m_User_data;
}

void ConversionEvents_data_inner::setUserData(const std::shared_ptr<ConversionEventsUserData>& value)
{
    m_User_data = value;
    m_User_dataIsSet = true;
}

bool ConversionEvents_data_inner::userDataIsSet() const
{
    return m_User_dataIsSet;
}

void ConversionEvents_data_inner::unsetUser_data()
{
    m_User_dataIsSet = false;
}
std::shared_ptr<ConversionEvents_data_inner_custom_data> ConversionEvents_data_inner::getCustomData() const
{
    return m_Custom_data;
}

void ConversionEvents_data_inner::setCustomData(const std::shared_ptr<ConversionEvents_data_inner_custom_data>& value)
{
    m_Custom_data = value;
    m_Custom_dataIsSet = true;
}

bool ConversionEvents_data_inner::customDataIsSet() const
{
    return m_Custom_dataIsSet;
}

void ConversionEvents_data_inner::unsetCustom_data()
{
    m_Custom_dataIsSet = false;
}
utility::string_t ConversionEvents_data_inner::getAppId() const
{
    return m_App_id;
}

void ConversionEvents_data_inner::setAppId(const utility::string_t& value)
{
    m_App_id = value;
    m_App_idIsSet = true;
}

bool ConversionEvents_data_inner::appIdIsSet() const
{
    return m_App_idIsSet;
}

void ConversionEvents_data_inner::unsetApp_id()
{
    m_App_idIsSet = false;
}
utility::string_t ConversionEvents_data_inner::getAppName() const
{
    return m_App_name;
}

void ConversionEvents_data_inner::setAppName(const utility::string_t& value)
{
    m_App_name = value;
    m_App_nameIsSet = true;
}

bool ConversionEvents_data_inner::appNameIsSet() const
{
    return m_App_nameIsSet;
}

void ConversionEvents_data_inner::unsetApp_name()
{
    m_App_nameIsSet = false;
}
utility::string_t ConversionEvents_data_inner::getAppVersion() const
{
    return m_App_version;
}

void ConversionEvents_data_inner::setAppVersion(const utility::string_t& value)
{
    m_App_version = value;
    m_App_versionIsSet = true;
}

bool ConversionEvents_data_inner::appVersionIsSet() const
{
    return m_App_versionIsSet;
}

void ConversionEvents_data_inner::unsetApp_version()
{
    m_App_versionIsSet = false;
}
utility::string_t ConversionEvents_data_inner::getDeviceBrand() const
{
    return m_Device_brand;
}

void ConversionEvents_data_inner::setDeviceBrand(const utility::string_t& value)
{
    m_Device_brand = value;
    m_Device_brandIsSet = true;
}

bool ConversionEvents_data_inner::deviceBrandIsSet() const
{
    return m_Device_brandIsSet;
}

void ConversionEvents_data_inner::unsetDevice_brand()
{
    m_Device_brandIsSet = false;
}
utility::string_t ConversionEvents_data_inner::getDeviceCarrier() const
{
    return m_Device_carrier;
}

void ConversionEvents_data_inner::setDeviceCarrier(const utility::string_t& value)
{
    m_Device_carrier = value;
    m_Device_carrierIsSet = true;
}

bool ConversionEvents_data_inner::deviceCarrierIsSet() const
{
    return m_Device_carrierIsSet;
}

void ConversionEvents_data_inner::unsetDevice_carrier()
{
    m_Device_carrierIsSet = false;
}
utility::string_t ConversionEvents_data_inner::getDeviceModel() const
{
    return m_Device_model;
}

void ConversionEvents_data_inner::setDeviceModel(const utility::string_t& value)
{
    m_Device_model = value;
    m_Device_modelIsSet = true;
}

bool ConversionEvents_data_inner::deviceModelIsSet() const
{
    return m_Device_modelIsSet;
}

void ConversionEvents_data_inner::unsetDevice_model()
{
    m_Device_modelIsSet = false;
}
utility::string_t ConversionEvents_data_inner::getDeviceType() const
{
    return m_Device_type;
}

void ConversionEvents_data_inner::setDeviceType(const utility::string_t& value)
{
    m_Device_type = value;
    m_Device_typeIsSet = true;
}

bool ConversionEvents_data_inner::deviceTypeIsSet() const
{
    return m_Device_typeIsSet;
}

void ConversionEvents_data_inner::unsetDevice_type()
{
    m_Device_typeIsSet = false;
}
utility::string_t ConversionEvents_data_inner::getOsVersion() const
{
    return m_Os_version;
}

void ConversionEvents_data_inner::setOsVersion(const utility::string_t& value)
{
    m_Os_version = value;
    m_Os_versionIsSet = true;
}

bool ConversionEvents_data_inner::osVersionIsSet() const
{
    return m_Os_versionIsSet;
}

void ConversionEvents_data_inner::unsetOs_version()
{
    m_Os_versionIsSet = false;
}
bool ConversionEvents_data_inner::isWifi() const
{
    return m_Wifi;
}

void ConversionEvents_data_inner::setWifi(bool value)
{
    m_Wifi = value;
    m_WifiIsSet = true;
}

bool ConversionEvents_data_inner::wifiIsSet() const
{
    return m_WifiIsSet;
}

void ConversionEvents_data_inner::unsetWifi()
{
    m_WifiIsSet = false;
}
utility::string_t ConversionEvents_data_inner::getLanguage() const
{
    return m_Language;
}

void ConversionEvents_data_inner::setLanguage(const utility::string_t& value)
{
    m_Language = value;
    m_LanguageIsSet = true;
}

bool ConversionEvents_data_inner::languageIsSet() const
{
    return m_LanguageIsSet;
}

void ConversionEvents_data_inner::unsetLanguage()
{
    m_LanguageIsSet = false;
}
}
}
}
}


