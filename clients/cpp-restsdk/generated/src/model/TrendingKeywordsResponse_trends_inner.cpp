/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/TrendingKeywordsResponse_trends_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



TrendingKeywordsResponse_trends_inner::TrendingKeywordsResponse_trends_inner()
{
    m_Keyword = utility::conversions::to_string_t("");
    m_KeywordIsSet = false;
    m_Pct_growth_wow = 0;
    m_Pct_growth_wowIsSet = false;
    m_Pct_growth_mom = 0;
    m_Pct_growth_momIsSet = false;
    m_Pct_growth_yoy = 0;
    m_Pct_growth_yoyIsSet = false;
    m_Time_seriesIsSet = false;
}

TrendingKeywordsResponse_trends_inner::~TrendingKeywordsResponse_trends_inner()
{
}

void TrendingKeywordsResponse_trends_inner::validate()
{
    // TODO: implement validation
}

web::json::value TrendingKeywordsResponse_trends_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_KeywordIsSet)
    {
        val[utility::conversions::to_string_t(U("keyword"))] = ModelBase::toJson(m_Keyword);
    }
    if(m_Pct_growth_wowIsSet)
    {
        val[utility::conversions::to_string_t(U("pct_growth_wow"))] = ModelBase::toJson(m_Pct_growth_wow);
    }
    if(m_Pct_growth_momIsSet)
    {
        val[utility::conversions::to_string_t(U("pct_growth_mom"))] = ModelBase::toJson(m_Pct_growth_mom);
    }
    if(m_Pct_growth_yoyIsSet)
    {
        val[utility::conversions::to_string_t(U("pct_growth_yoy"))] = ModelBase::toJson(m_Pct_growth_yoy);
    }
    if(m_Time_seriesIsSet)
    {
        val[utility::conversions::to_string_t(U("time_series"))] = ModelBase::toJson(m_Time_series);
    }

    return val;
}

bool TrendingKeywordsResponse_trends_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("keyword"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("keyword")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setKeyword;
            ok &= ModelBase::fromJson(fieldValue, refVal_setKeyword);
            setKeyword(refVal_setKeyword);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pct_growth_wow"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pct_growth_wow")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPctGrowthWow;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPctGrowthWow);
            setPctGrowthWow(refVal_setPctGrowthWow);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pct_growth_mom"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pct_growth_mom")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPctGrowthMom;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPctGrowthMom);
            setPctGrowthMom(refVal_setPctGrowthMom);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pct_growth_yoy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pct_growth_yoy")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPctGrowthYoy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPctGrowthYoy);
            setPctGrowthYoy(refVal_setPctGrowthYoy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("time_series"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("time_series")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TrendingKeywordsResponse_trends_inner_time_series> refVal_setTimeSeries;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeSeries);
            setTimeSeries(refVal_setTimeSeries);
        }
    }
    return ok;
}

void TrendingKeywordsResponse_trends_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_KeywordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("keyword")), m_Keyword));
    }
    if(m_Pct_growth_wowIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pct_growth_wow")), m_Pct_growth_wow));
    }
    if(m_Pct_growth_momIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pct_growth_mom")), m_Pct_growth_mom));
    }
    if(m_Pct_growth_yoyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pct_growth_yoy")), m_Pct_growth_yoy));
    }
    if(m_Time_seriesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("time_series")), m_Time_series));
    }
}

bool TrendingKeywordsResponse_trends_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("keyword"))))
    {
        utility::string_t refVal_setKeyword;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("keyword"))), refVal_setKeyword );
        setKeyword(refVal_setKeyword);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pct_growth_wow"))))
    {
        int32_t refVal_setPctGrowthWow;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pct_growth_wow"))), refVal_setPctGrowthWow );
        setPctGrowthWow(refVal_setPctGrowthWow);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pct_growth_mom"))))
    {
        int32_t refVal_setPctGrowthMom;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pct_growth_mom"))), refVal_setPctGrowthMom );
        setPctGrowthMom(refVal_setPctGrowthMom);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pct_growth_yoy"))))
    {
        int32_t refVal_setPctGrowthYoy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pct_growth_yoy"))), refVal_setPctGrowthYoy );
        setPctGrowthYoy(refVal_setPctGrowthYoy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("time_series"))))
    {
        std::shared_ptr<TrendingKeywordsResponse_trends_inner_time_series> refVal_setTimeSeries;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("time_series"))), refVal_setTimeSeries );
        setTimeSeries(refVal_setTimeSeries);
    }
    return ok;
}

utility::string_t TrendingKeywordsResponse_trends_inner::getKeyword() const
{
    return m_Keyword;
}

void TrendingKeywordsResponse_trends_inner::setKeyword(const utility::string_t& value)
{
    m_Keyword = value;
    m_KeywordIsSet = true;
}

bool TrendingKeywordsResponse_trends_inner::keywordIsSet() const
{
    return m_KeywordIsSet;
}

void TrendingKeywordsResponse_trends_inner::unsetKeyword()
{
    m_KeywordIsSet = false;
}
int32_t TrendingKeywordsResponse_trends_inner::getPctGrowthWow() const
{
    return m_Pct_growth_wow;
}

void TrendingKeywordsResponse_trends_inner::setPctGrowthWow(int32_t value)
{
    m_Pct_growth_wow = value;
    m_Pct_growth_wowIsSet = true;
}

bool TrendingKeywordsResponse_trends_inner::pctGrowthWowIsSet() const
{
    return m_Pct_growth_wowIsSet;
}

void TrendingKeywordsResponse_trends_inner::unsetPct_growth_wow()
{
    m_Pct_growth_wowIsSet = false;
}
int32_t TrendingKeywordsResponse_trends_inner::getPctGrowthMom() const
{
    return m_Pct_growth_mom;
}

void TrendingKeywordsResponse_trends_inner::setPctGrowthMom(int32_t value)
{
    m_Pct_growth_mom = value;
    m_Pct_growth_momIsSet = true;
}

bool TrendingKeywordsResponse_trends_inner::pctGrowthMomIsSet() const
{
    return m_Pct_growth_momIsSet;
}

void TrendingKeywordsResponse_trends_inner::unsetPct_growth_mom()
{
    m_Pct_growth_momIsSet = false;
}
int32_t TrendingKeywordsResponse_trends_inner::getPctGrowthYoy() const
{
    return m_Pct_growth_yoy;
}

void TrendingKeywordsResponse_trends_inner::setPctGrowthYoy(int32_t value)
{
    m_Pct_growth_yoy = value;
    m_Pct_growth_yoyIsSet = true;
}

bool TrendingKeywordsResponse_trends_inner::pctGrowthYoyIsSet() const
{
    return m_Pct_growth_yoyIsSet;
}

void TrendingKeywordsResponse_trends_inner::unsetPct_growth_yoy()
{
    m_Pct_growth_yoyIsSet = false;
}
std::shared_ptr<TrendingKeywordsResponse_trends_inner_time_series> TrendingKeywordsResponse_trends_inner::getTimeSeries() const
{
    return m_Time_series;
}

void TrendingKeywordsResponse_trends_inner::setTimeSeries(const std::shared_ptr<TrendingKeywordsResponse_trends_inner_time_series>& value)
{
    m_Time_series = value;
    m_Time_seriesIsSet = true;
}

bool TrendingKeywordsResponse_trends_inner::timeSeriesIsSet() const
{
    return m_Time_seriesIsSet;
}

void TrendingKeywordsResponse_trends_inner::unsetTime_series()
{
    m_Time_seriesIsSet = false;
}
}
}
}
}


