/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/DeleteInvitesResultsResponseArray_items_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



DeleteInvitesResultsResponseArray_items_inner::DeleteInvitesResultsResponseArray_items_inner()
{
    m_ExceptionIsSet = false;
    m_InviteIsSet = false;
}

DeleteInvitesResultsResponseArray_items_inner::~DeleteInvitesResultsResponseArray_items_inner()
{
}

void DeleteInvitesResultsResponseArray_items_inner::validate()
{
    // TODO: implement validation
}

web::json::value DeleteInvitesResultsResponseArray_items_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ExceptionIsSet)
    {
        val[utility::conversions::to_string_t(U("exception"))] = ModelBase::toJson(m_Exception);
    }
    if(m_InviteIsSet)
    {
        val[utility::conversions::to_string_t(U("invite"))] = ModelBase::toJson(m_Invite);
    }

    return val;
}

bool DeleteInvitesResultsResponseArray_items_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("exception"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exception")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DeleteInvitesResultsResponseArray_items_inner_exception> refVal_setException;
            ok &= ModelBase::fromJson(fieldValue, refVal_setException);
            setException(refVal_setException);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("invite"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("invite")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BaseInviteDataResponse> refVal_setInvite;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInvite);
            setInvite(refVal_setInvite);
        }
    }
    return ok;
}

void DeleteInvitesResultsResponseArray_items_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ExceptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exception")), m_Exception));
    }
    if(m_InviteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("invite")), m_Invite));
    }
}

bool DeleteInvitesResultsResponseArray_items_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("exception"))))
    {
        std::shared_ptr<DeleteInvitesResultsResponseArray_items_inner_exception> refVal_setException;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exception"))), refVal_setException );
        setException(refVal_setException);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("invite"))))
    {
        std::shared_ptr<BaseInviteDataResponse> refVal_setInvite;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("invite"))), refVal_setInvite );
        setInvite(refVal_setInvite);
    }
    return ok;
}

std::shared_ptr<DeleteInvitesResultsResponseArray_items_inner_exception> DeleteInvitesResultsResponseArray_items_inner::getException() const
{
    return m_Exception;
}

void DeleteInvitesResultsResponseArray_items_inner::setException(const std::shared_ptr<DeleteInvitesResultsResponseArray_items_inner_exception>& value)
{
    m_Exception = value;
    m_ExceptionIsSet = true;
}

bool DeleteInvitesResultsResponseArray_items_inner::exceptionIsSet() const
{
    return m_ExceptionIsSet;
}

void DeleteInvitesResultsResponseArray_items_inner::unsetException()
{
    m_ExceptionIsSet = false;
}
std::shared_ptr<BaseInviteDataResponse> DeleteInvitesResultsResponseArray_items_inner::getInvite() const
{
    return m_Invite;
}

void DeleteInvitesResultsResponseArray_items_inner::setInvite(const std::shared_ptr<BaseInviteDataResponse>& value)
{
    m_Invite = value;
    m_InviteIsSet = true;
}

bool DeleteInvitesResultsResponseArray_items_inner::inviteIsSet() const
{
    return m_InviteIsSet;
}

void DeleteInvitesResultsResponseArray_items_inner::unsetInvite()
{
    m_InviteIsSet = false;
}
}
}
}
}


