/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/TemplateResponse_date_range_dynamic_date_range.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



TemplateResponse_date_range_dynamic_date_range::TemplateResponse_date_range_dynamic_date_range()
{
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Range = utility::conversions::to_string_t("");
    m_RangeIsSet = false;
}

TemplateResponse_date_range_dynamic_date_range::~TemplateResponse_date_range_dynamic_date_range()
{
}

void TemplateResponse_date_range_dynamic_date_range::validate()
{
    // TODO: implement validation
}

web::json::value TemplateResponse_date_range_dynamic_date_range::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_RangeIsSet)
    {
        val[utility::conversions::to_string_t(U("range"))] = ModelBase::toJson(m_Range);
    }

    return val;
}

bool TemplateResponse_date_range_dynamic_date_range::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("range"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("range")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRange);
            setRange(refVal_setRange);
        }
    }
    return ok;
}

void TemplateResponse_date_range_dynamic_date_range::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_RangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("range")), m_Range));
    }
}

bool TemplateResponse_date_range_dynamic_date_range::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("range"))))
    {
        utility::string_t refVal_setRange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("range"))), refVal_setRange );
        setRange(refVal_setRange);
    }
    return ok;
}

utility::string_t TemplateResponse_date_range_dynamic_date_range::getType() const
{
    return m_Type;
}

void TemplateResponse_date_range_dynamic_date_range::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool TemplateResponse_date_range_dynamic_date_range::typeIsSet() const
{
    return m_TypeIsSet;
}

void TemplateResponse_date_range_dynamic_date_range::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t TemplateResponse_date_range_dynamic_date_range::getRange() const
{
    return m_Range;
}

void TemplateResponse_date_range_dynamic_date_range::setRange(const utility::string_t& value)
{
    m_Range = value;
    m_RangeIsSet = true;
}

bool TemplateResponse_date_range_dynamic_date_range::rangeIsSet() const
{
    return m_RangeIsSet;
}

void TemplateResponse_date_range_dynamic_date_range::unsetRange()
{
    m_RangeIsSet = false;
}
}
}
}
}


