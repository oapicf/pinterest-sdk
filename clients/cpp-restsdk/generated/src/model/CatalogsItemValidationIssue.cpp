/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CatalogsItemValidationIssue.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


namespace
{
using EnumUnderlyingType = utility::string_t;

CatalogsItemValidationIssue::eCatalogsItemValidationIssue toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("AD_LINK_FORMAT_WARNING")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_AD_LINK_FORMAT_WARNING;
    if (val == utility::conversions::to_string_t(U("AD_LINK_SAME_AS_LINK")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_AD_LINK_SAME_AS_LINK;
    if (val == utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG;
    if (val == utility::conversions::to_string_t(U("ADDITIONAL_IMAGE_LINK_WARNING")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_ADDITIONAL_IMAGE_LINK_WARNING;
    if (val == utility::conversions::to_string_t(U("ADULT_INVALID")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_ADULT_INVALID;
    if (val == utility::conversions::to_string_t(U("ADWORDS_FORMAT_INVALID")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_ADWORDS_FORMAT_INVALID;
    if (val == utility::conversions::to_string_t(U("ADWORDS_FORMAT_WARNING")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_ADWORDS_FORMAT_WARNING;
    if (val == utility::conversions::to_string_t(U("ADWORDS_SAME_AS_LINK")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_ADWORDS_SAME_AS_LINK;
    if (val == utility::conversions::to_string_t(U("AGE_GROUP_INVALID")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_AGE_GROUP_INVALID;
    if (val == utility::conversions::to_string_t(U("ANDROID_DEEP_LINK_INVALID")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_ANDROID_DEEP_LINK_INVALID;
    if (val == utility::conversions::to_string_t(U("AVAILABILITY_DATE_INVALID")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_AVAILABILITY_DATE_INVALID;
    if (val == utility::conversions::to_string_t(U("AVAILABILITY_INVALID")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_AVAILABILITY_INVALID;
    if (val == utility::conversions::to_string_t(U("BLOCKLISTED_IMAGE_SIGNATURE")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_BLOCKLISTED_IMAGE_SIGNATURE;
    if (val == utility::conversions::to_string_t(U("COUNTRY_DOES_NOT_MAP_TO_CURRENCY")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_COUNTRY_DOES_NOT_MAP_TO_CURRENCY;
    if (val == utility::conversions::to_string_t(U("CUSTOM_LABEL_LENGTH_TOO_LONG")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_CUSTOM_LABEL_LENGTH_TOO_LONG;
    if (val == utility::conversions::to_string_t(U("DESCRIPTION_LENGTH_TOO_LONG")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_DESCRIPTION_LENGTH_TOO_LONG;
    if (val == utility::conversions::to_string_t(U("DESCRIPTION_MISSING")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_DESCRIPTION_MISSING;
    if (val == utility::conversions::to_string_t(U("DUPLICATE_PRODUCTS")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_DUPLICATE_PRODUCTS;
    if (val == utility::conversions::to_string_t(U("EXPIRATION_DATE_INVALID")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_EXPIRATION_DATE_INVALID;
    if (val == utility::conversions::to_string_t(U("GENDER_INVALID")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_GENDER_INVALID;
    if (val == utility::conversions::to_string_t(U("GTIN_INVALID")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_GTIN_INVALID;
    if (val == utility::conversions::to_string_t(U("IMAGE_LINK_INVALID")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_IMAGE_LINK_INVALID;
    if (val == utility::conversions::to_string_t(U("IMAGE_LINK_LENGTH_TOO_LONG")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_IMAGE_LINK_LENGTH_TOO_LONG;
    if (val == utility::conversions::to_string_t(U("IMAGE_LINK_MISSING")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_IMAGE_LINK_MISSING;
    if (val == utility::conversions::to_string_t(U("IMAGE_LINK_WARNING")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_IMAGE_LINK_WARNING;
    if (val == utility::conversions::to_string_t(U("INVALID_DOMAIN")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_INVALID_DOMAIN;
    if (val == utility::conversions::to_string_t(U("IOS_DEEP_LINK_INVALID")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_IOS_DEEP_LINK_INVALID;
    if (val == utility::conversions::to_string_t(U("IS_BUNDLE_INVALID")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_IS_BUNDLE_INVALID;
    if (val == utility::conversions::to_string_t(U("ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE;
    if (val == utility::conversions::to_string_t(U("ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE;
    if (val == utility::conversions::to_string_t(U("ITEMID_MISSING")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_ITEMID_MISSING;
    if (val == utility::conversions::to_string_t(U("LINK_FORMAT_INVALID")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_LINK_FORMAT_INVALID;
    if (val == utility::conversions::to_string_t(U("LINK_FORMAT_WARNING")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_LINK_FORMAT_WARNING;
    if (val == utility::conversions::to_string_t(U("LINK_LENGTH_TOO_LONG")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_LINK_LENGTH_TOO_LONG;
    if (val == utility::conversions::to_string_t(U("LIST_PRICE_INVALID")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_LIST_PRICE_INVALID;
    if (val == utility::conversions::to_string_t(U("MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED;
    if (val == utility::conversions::to_string_t(U("MIN_AD_PRICE_INVALID")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_MIN_AD_PRICE_INVALID;
    if (val == utility::conversions::to_string_t(U("MPN_INVALID")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_MPN_INVALID;
    if (val == utility::conversions::to_string_t(U("MULTIPACK_INVALID")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_MULTIPACK_INVALID;
    if (val == utility::conversions::to_string_t(U("OPTIONAL_CONDITION_INVALID")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_OPTIONAL_CONDITION_INVALID;
    if (val == utility::conversions::to_string_t(U("OPTIONAL_CONDITION_MISSING")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_OPTIONAL_CONDITION_MISSING;
    if (val == utility::conversions::to_string_t(U("OPTIONAL_PRODUCT_CATEGORY_INVALID")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_OPTIONAL_PRODUCT_CATEGORY_INVALID;
    if (val == utility::conversions::to_string_t(U("OPTIONAL_PRODUCT_CATEGORY_MISSING")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_OPTIONAL_PRODUCT_CATEGORY_MISSING;
    if (val == utility::conversions::to_string_t(U("PARSE_LINE_ERROR")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_PARSE_LINE_ERROR;
    if (val == utility::conversions::to_string_t(U("PINJOIN_CONTENT_UNSAFE")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_PINJOIN_CONTENT_UNSAFE;
    if (val == utility::conversions::to_string_t(U("PRICE_CANNOT_BE_DETERMINED")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_PRICE_CANNOT_BE_DETERMINED;
    if (val == utility::conversions::to_string_t(U("PRICE_MISSING")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_PRICE_MISSING;
    if (val == utility::conversions::to_string_t(U("PRODUCT_CATEGORY_DEPTH_WARNING")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_PRODUCT_CATEGORY_DEPTH_WARNING;
    if (val == utility::conversions::to_string_t(U("PRODUCT_LINK_MISSING")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_PRODUCT_LINK_MISSING;
    if (val == utility::conversions::to_string_t(U("PRODUCT_PRICE_INVALID")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_PRODUCT_PRICE_INVALID;
    if (val == utility::conversions::to_string_t(U("PRODUCT_TYPE_LENGTH_TOO_LONG")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_PRODUCT_TYPE_LENGTH_TOO_LONG;
    if (val == utility::conversions::to_string_t(U("SALE_DATE_INVALID")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_SALE_DATE_INVALID;
    if (val == utility::conversions::to_string_t(U("SALES_PRICE_INVALID")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_SALES_PRICE_INVALID;
    if (val == utility::conversions::to_string_t(U("SALES_PRICE_TOO_HIGH")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_SALES_PRICE_TOO_HIGH;
    if (val == utility::conversions::to_string_t(U("SALES_PRICE_TOO_LOW")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_SALES_PRICE_TOO_LOW;
    if (val == utility::conversions::to_string_t(U("SHIPPING_INVALID")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_SHIPPING_INVALID;
    if (val == utility::conversions::to_string_t(U("SHIPPING_HEIGHT_INVALID")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_SHIPPING_HEIGHT_INVALID;
    if (val == utility::conversions::to_string_t(U("SHIPPING_WEIGHT_INVALID")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_SHIPPING_WEIGHT_INVALID;
    if (val == utility::conversions::to_string_t(U("SHIPPING_WIDTH_INVALID")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_SHIPPING_WIDTH_INVALID;
    if (val == utility::conversions::to_string_t(U("SIZE_SYSTEM_INVALID")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_SIZE_SYSTEM_INVALID;
    if (val == utility::conversions::to_string_t(U("SIZE_TYPE_INVALID")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_SIZE_TYPE_INVALID;
    if (val == utility::conversions::to_string_t(U("TAX_INVALID")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_TAX_INVALID;
    if (val == utility::conversions::to_string_t(U("TITLE_LENGTH_TOO_LONG")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_TITLE_LENGTH_TOO_LONG;
    if (val == utility::conversions::to_string_t(U("TITLE_MISSING")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_TITLE_MISSING;
    if (val == utility::conversions::to_string_t(U("TOO_MANY_ADDITIONAL_IMAGE_LINKS")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_TOO_MANY_ADDITIONAL_IMAGE_LINKS;
    if (val == utility::conversions::to_string_t(U("UTM_SOURCE_AUTO_CORRECTED")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_UTM_SOURCE_AUTO_CORRECTED;
    if (val == utility::conversions::to_string_t(U("WEIGHT_UNIT_INVALID")))
        return CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_WEIGHT_UNIT_INVALID;
    return {};
}

EnumUnderlyingType fromEnum(CatalogsItemValidationIssue::eCatalogsItemValidationIssue e)
{
    switch (e)
    {
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_AD_LINK_FORMAT_WARNING:
        return U("AD_LINK_FORMAT_WARNING");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_AD_LINK_SAME_AS_LINK:
        return U("AD_LINK_SAME_AS_LINK");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG:
        return U("ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_ADDITIONAL_IMAGE_LINK_WARNING:
        return U("ADDITIONAL_IMAGE_LINK_WARNING");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_ADULT_INVALID:
        return U("ADULT_INVALID");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_ADWORDS_FORMAT_INVALID:
        return U("ADWORDS_FORMAT_INVALID");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_ADWORDS_FORMAT_WARNING:
        return U("ADWORDS_FORMAT_WARNING");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_ADWORDS_SAME_AS_LINK:
        return U("ADWORDS_SAME_AS_LINK");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_AGE_GROUP_INVALID:
        return U("AGE_GROUP_INVALID");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_ANDROID_DEEP_LINK_INVALID:
        return U("ANDROID_DEEP_LINK_INVALID");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_AVAILABILITY_DATE_INVALID:
        return U("AVAILABILITY_DATE_INVALID");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_AVAILABILITY_INVALID:
        return U("AVAILABILITY_INVALID");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_BLOCKLISTED_IMAGE_SIGNATURE:
        return U("BLOCKLISTED_IMAGE_SIGNATURE");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_COUNTRY_DOES_NOT_MAP_TO_CURRENCY:
        return U("COUNTRY_DOES_NOT_MAP_TO_CURRENCY");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_CUSTOM_LABEL_LENGTH_TOO_LONG:
        return U("CUSTOM_LABEL_LENGTH_TOO_LONG");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_DESCRIPTION_LENGTH_TOO_LONG:
        return U("DESCRIPTION_LENGTH_TOO_LONG");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_DESCRIPTION_MISSING:
        return U("DESCRIPTION_MISSING");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_DUPLICATE_PRODUCTS:
        return U("DUPLICATE_PRODUCTS");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_EXPIRATION_DATE_INVALID:
        return U("EXPIRATION_DATE_INVALID");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_GENDER_INVALID:
        return U("GENDER_INVALID");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_GTIN_INVALID:
        return U("GTIN_INVALID");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_IMAGE_LINK_INVALID:
        return U("IMAGE_LINK_INVALID");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_IMAGE_LINK_LENGTH_TOO_LONG:
        return U("IMAGE_LINK_LENGTH_TOO_LONG");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_IMAGE_LINK_MISSING:
        return U("IMAGE_LINK_MISSING");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_IMAGE_LINK_WARNING:
        return U("IMAGE_LINK_WARNING");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_INVALID_DOMAIN:
        return U("INVALID_DOMAIN");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_IOS_DEEP_LINK_INVALID:
        return U("IOS_DEEP_LINK_INVALID");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_IS_BUNDLE_INVALID:
        return U("IS_BUNDLE_INVALID");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE:
        return U("ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE:
        return U("ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_ITEMID_MISSING:
        return U("ITEMID_MISSING");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_LINK_FORMAT_INVALID:
        return U("LINK_FORMAT_INVALID");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_LINK_FORMAT_WARNING:
        return U("LINK_FORMAT_WARNING");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_LINK_LENGTH_TOO_LONG:
        return U("LINK_LENGTH_TOO_LONG");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_LIST_PRICE_INVALID:
        return U("LIST_PRICE_INVALID");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED:
        return U("MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_MIN_AD_PRICE_INVALID:
        return U("MIN_AD_PRICE_INVALID");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_MPN_INVALID:
        return U("MPN_INVALID");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_MULTIPACK_INVALID:
        return U("MULTIPACK_INVALID");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_OPTIONAL_CONDITION_INVALID:
        return U("OPTIONAL_CONDITION_INVALID");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_OPTIONAL_CONDITION_MISSING:
        return U("OPTIONAL_CONDITION_MISSING");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_OPTIONAL_PRODUCT_CATEGORY_INVALID:
        return U("OPTIONAL_PRODUCT_CATEGORY_INVALID");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_OPTIONAL_PRODUCT_CATEGORY_MISSING:
        return U("OPTIONAL_PRODUCT_CATEGORY_MISSING");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_PARSE_LINE_ERROR:
        return U("PARSE_LINE_ERROR");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_PINJOIN_CONTENT_UNSAFE:
        return U("PINJOIN_CONTENT_UNSAFE");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_PRICE_CANNOT_BE_DETERMINED:
        return U("PRICE_CANNOT_BE_DETERMINED");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_PRICE_MISSING:
        return U("PRICE_MISSING");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_PRODUCT_CATEGORY_DEPTH_WARNING:
        return U("PRODUCT_CATEGORY_DEPTH_WARNING");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_PRODUCT_LINK_MISSING:
        return U("PRODUCT_LINK_MISSING");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_PRODUCT_PRICE_INVALID:
        return U("PRODUCT_PRICE_INVALID");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_PRODUCT_TYPE_LENGTH_TOO_LONG:
        return U("PRODUCT_TYPE_LENGTH_TOO_LONG");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_SALE_DATE_INVALID:
        return U("SALE_DATE_INVALID");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_SALES_PRICE_INVALID:
        return U("SALES_PRICE_INVALID");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_SALES_PRICE_TOO_HIGH:
        return U("SALES_PRICE_TOO_HIGH");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_SALES_PRICE_TOO_LOW:
        return U("SALES_PRICE_TOO_LOW");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_SHIPPING_INVALID:
        return U("SHIPPING_INVALID");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_SHIPPING_HEIGHT_INVALID:
        return U("SHIPPING_HEIGHT_INVALID");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_SHIPPING_WEIGHT_INVALID:
        return U("SHIPPING_WEIGHT_INVALID");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_SHIPPING_WIDTH_INVALID:
        return U("SHIPPING_WIDTH_INVALID");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_SIZE_SYSTEM_INVALID:
        return U("SIZE_SYSTEM_INVALID");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_SIZE_TYPE_INVALID:
        return U("SIZE_TYPE_INVALID");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_TAX_INVALID:
        return U("TAX_INVALID");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_TITLE_LENGTH_TOO_LONG:
        return U("TITLE_LENGTH_TOO_LONG");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_TITLE_MISSING:
        return U("TITLE_MISSING");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_TOO_MANY_ADDITIONAL_IMAGE_LINKS:
        return U("TOO_MANY_ADDITIONAL_IMAGE_LINKS");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_UTM_SOURCE_AUTO_CORRECTED:
        return U("UTM_SOURCE_AUTO_CORRECTED");
    case CatalogsItemValidationIssue::eCatalogsItemValidationIssue::CatalogsItemValidationIssue_WEIGHT_UNIT_INVALID:
        return U("WEIGHT_UNIT_INVALID");
    default:
        break;
    }
    return {};
}
}

CatalogsItemValidationIssue::CatalogsItemValidationIssue()
{
}

CatalogsItemValidationIssue::~CatalogsItemValidationIssue()
{
}

void CatalogsItemValidationIssue::validate()
{
    // TODO: implement validation
}

web::json::value CatalogsItemValidationIssue::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool CatalogsItemValidationIssue::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void CatalogsItemValidationIssue::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool CatalogsItemValidationIssue::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

CatalogsItemValidationIssue::eCatalogsItemValidationIssue CatalogsItemValidationIssue::getValue() const
{
   return m_value;
}

void CatalogsItemValidationIssue::setValue(CatalogsItemValidationIssue::eCatalogsItemValidationIssue const value)
{
   m_value = value;
}


}
}
}
}


