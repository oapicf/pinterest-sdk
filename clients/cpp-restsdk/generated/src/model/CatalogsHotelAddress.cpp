/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CatalogsHotelAddress.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CatalogsHotelAddress::CatalogsHotelAddress()
{
    m_Addr1 = utility::conversions::to_string_t("");
    m_Addr1IsSet = false;
    m_City = utility::conversions::to_string_t("");
    m_CityIsSet = false;
    m_Region = utility::conversions::to_string_t("");
    m_RegionIsSet = false;
    m_Country = utility::conversions::to_string_t("");
    m_CountryIsSet = false;
    m_Postal_code = utility::conversions::to_string_t("");
    m_Postal_codeIsSet = false;
}

CatalogsHotelAddress::~CatalogsHotelAddress()
{
}

void CatalogsHotelAddress::validate()
{
    // TODO: implement validation
}

web::json::value CatalogsHotelAddress::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Addr1IsSet)
    {
        val[utility::conversions::to_string_t(U("addr1"))] = ModelBase::toJson(m_Addr1);
    }
    if(m_CityIsSet)
    {
        val[utility::conversions::to_string_t(U("city"))] = ModelBase::toJson(m_City);
    }
    if(m_RegionIsSet)
    {
        val[utility::conversions::to_string_t(U("region"))] = ModelBase::toJson(m_Region);
    }
    if(m_CountryIsSet)
    {
        val[utility::conversions::to_string_t(U("country"))] = ModelBase::toJson(m_Country);
    }
    if(m_Postal_codeIsSet)
    {
        val[utility::conversions::to_string_t(U("postal_code"))] = ModelBase::toJson(m_Postal_code);
    }

    return val;
}

bool CatalogsHotelAddress::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("addr1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("addr1")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAddr1;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAddr1);
            setAddr1(refVal_setAddr1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("city"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("city")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCity);
            setCity(refVal_setCity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("region"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("region")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRegion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRegion);
            setRegion(refVal_setRegion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("country"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("country")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCountry;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCountry);
            setCountry(refVal_setCountry);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("postal_code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("postal_code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPostalCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPostalCode);
            setPostalCode(refVal_setPostalCode);
        }
    }
    return ok;
}

void CatalogsHotelAddress::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Addr1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("addr1")), m_Addr1));
    }
    if(m_CityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("city")), m_City));
    }
    if(m_RegionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("region")), m_Region));
    }
    if(m_CountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("country")), m_Country));
    }
    if(m_Postal_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("postal_code")), m_Postal_code));
    }
}

bool CatalogsHotelAddress::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("addr1"))))
    {
        utility::string_t refVal_setAddr1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("addr1"))), refVal_setAddr1 );
        setAddr1(refVal_setAddr1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("city"))))
    {
        utility::string_t refVal_setCity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("city"))), refVal_setCity );
        setCity(refVal_setCity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("region"))))
    {
        utility::string_t refVal_setRegion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("region"))), refVal_setRegion );
        setRegion(refVal_setRegion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("country"))))
    {
        utility::string_t refVal_setCountry;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("country"))), refVal_setCountry );
        setCountry(refVal_setCountry);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("postal_code"))))
    {
        utility::string_t refVal_setPostalCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("postal_code"))), refVal_setPostalCode );
        setPostalCode(refVal_setPostalCode);
    }
    return ok;
}

utility::string_t CatalogsHotelAddress::getAddr1() const
{
    return m_Addr1;
}

void CatalogsHotelAddress::setAddr1(const utility::string_t& value)
{
    m_Addr1 = value;
    m_Addr1IsSet = true;
}

bool CatalogsHotelAddress::addr1IsSet() const
{
    return m_Addr1IsSet;
}

void CatalogsHotelAddress::unsetAddr1()
{
    m_Addr1IsSet = false;
}
utility::string_t CatalogsHotelAddress::getCity() const
{
    return m_City;
}

void CatalogsHotelAddress::setCity(const utility::string_t& value)
{
    m_City = value;
    m_CityIsSet = true;
}

bool CatalogsHotelAddress::cityIsSet() const
{
    return m_CityIsSet;
}

void CatalogsHotelAddress::unsetCity()
{
    m_CityIsSet = false;
}
utility::string_t CatalogsHotelAddress::getRegion() const
{
    return m_Region;
}

void CatalogsHotelAddress::setRegion(const utility::string_t& value)
{
    m_Region = value;
    m_RegionIsSet = true;
}

bool CatalogsHotelAddress::regionIsSet() const
{
    return m_RegionIsSet;
}

void CatalogsHotelAddress::unsetRegion()
{
    m_RegionIsSet = false;
}
utility::string_t CatalogsHotelAddress::getCountry() const
{
    return m_Country;
}

void CatalogsHotelAddress::setCountry(const utility::string_t& value)
{
    m_Country = value;
    m_CountryIsSet = true;
}

bool CatalogsHotelAddress::countryIsSet() const
{
    return m_CountryIsSet;
}

void CatalogsHotelAddress::unsetCountry()
{
    m_CountryIsSet = false;
}
utility::string_t CatalogsHotelAddress::getPostalCode() const
{
    return m_Postal_code;
}

void CatalogsHotelAddress::setPostalCode(const utility::string_t& value)
{
    m_Postal_code = value;
    m_Postal_codeIsSet = true;
}

bool CatalogsHotelAddress::postalCodeIsSet() const
{
    return m_Postal_codeIsSet;
}

void CatalogsHotelAddress::unsetPostal_code()
{
    m_Postal_codeIsSet = false;
}
}
}
}
}


