/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/MetricsReportingLevel.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


namespace
{
using EnumUnderlyingType = utility::string_t;

MetricsReportingLevel::eMetricsReportingLevel toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("ADVERTISER")))
        return MetricsReportingLevel::eMetricsReportingLevel::MetricsReportingLevel_ADVERTISER;
    if (val == utility::conversions::to_string_t(U("ADVERTISER_TARGETING")))
        return MetricsReportingLevel::eMetricsReportingLevel::MetricsReportingLevel_ADVERTISER_TARGETING;
    if (val == utility::conversions::to_string_t(U("CAMPAIGN")))
        return MetricsReportingLevel::eMetricsReportingLevel::MetricsReportingLevel_CAMPAIGN;
    if (val == utility::conversions::to_string_t(U("CAMPAIGN_TARGETING")))
        return MetricsReportingLevel::eMetricsReportingLevel::MetricsReportingLevel_CAMPAIGN_TARGETING;
    if (val == utility::conversions::to_string_t(U("AD_GROUP")))
        return MetricsReportingLevel::eMetricsReportingLevel::MetricsReportingLevel_AD_GROUP;
    if (val == utility::conversions::to_string_t(U("AD_GROUP_TARGETING")))
        return MetricsReportingLevel::eMetricsReportingLevel::MetricsReportingLevel_AD_GROUP_TARGETING;
    if (val == utility::conversions::to_string_t(U("PIN_PROMOTION")))
        return MetricsReportingLevel::eMetricsReportingLevel::MetricsReportingLevel_PIN_PROMOTION;
    if (val == utility::conversions::to_string_t(U("PIN_PROMOTION_TARGETING")))
        return MetricsReportingLevel::eMetricsReportingLevel::MetricsReportingLevel_PIN_PROMOTION_TARGETING;
    if (val == utility::conversions::to_string_t(U("KEYWORD")))
        return MetricsReportingLevel::eMetricsReportingLevel::MetricsReportingLevel_KEYWORD;
    if (val == utility::conversions::to_string_t(U("PRODUCT_GROUP")))
        return MetricsReportingLevel::eMetricsReportingLevel::MetricsReportingLevel_PRODUCT_GROUP;
    if (val == utility::conversions::to_string_t(U("PRODUCT_GROUP_TARGETING")))
        return MetricsReportingLevel::eMetricsReportingLevel::MetricsReportingLevel_PRODUCT_GROUP_TARGETING;
    if (val == utility::conversions::to_string_t(U("PRODUCT_ITEM")))
        return MetricsReportingLevel::eMetricsReportingLevel::MetricsReportingLevel_PRODUCT_ITEM;
    if (val == utility::conversions::to_string_t(U("PRODUCT_ITEM_TARGETING")))
        return MetricsReportingLevel::eMetricsReportingLevel::MetricsReportingLevel_PRODUCT_ITEM_TARGETING;
    return {};
}

EnumUnderlyingType fromEnum(MetricsReportingLevel::eMetricsReportingLevel e)
{
    switch (e)
    {
    case MetricsReportingLevel::eMetricsReportingLevel::MetricsReportingLevel_ADVERTISER:
        return U("ADVERTISER");
    case MetricsReportingLevel::eMetricsReportingLevel::MetricsReportingLevel_ADVERTISER_TARGETING:
        return U("ADVERTISER_TARGETING");
    case MetricsReportingLevel::eMetricsReportingLevel::MetricsReportingLevel_CAMPAIGN:
        return U("CAMPAIGN");
    case MetricsReportingLevel::eMetricsReportingLevel::MetricsReportingLevel_CAMPAIGN_TARGETING:
        return U("CAMPAIGN_TARGETING");
    case MetricsReportingLevel::eMetricsReportingLevel::MetricsReportingLevel_AD_GROUP:
        return U("AD_GROUP");
    case MetricsReportingLevel::eMetricsReportingLevel::MetricsReportingLevel_AD_GROUP_TARGETING:
        return U("AD_GROUP_TARGETING");
    case MetricsReportingLevel::eMetricsReportingLevel::MetricsReportingLevel_PIN_PROMOTION:
        return U("PIN_PROMOTION");
    case MetricsReportingLevel::eMetricsReportingLevel::MetricsReportingLevel_PIN_PROMOTION_TARGETING:
        return U("PIN_PROMOTION_TARGETING");
    case MetricsReportingLevel::eMetricsReportingLevel::MetricsReportingLevel_KEYWORD:
        return U("KEYWORD");
    case MetricsReportingLevel::eMetricsReportingLevel::MetricsReportingLevel_PRODUCT_GROUP:
        return U("PRODUCT_GROUP");
    case MetricsReportingLevel::eMetricsReportingLevel::MetricsReportingLevel_PRODUCT_GROUP_TARGETING:
        return U("PRODUCT_GROUP_TARGETING");
    case MetricsReportingLevel::eMetricsReportingLevel::MetricsReportingLevel_PRODUCT_ITEM:
        return U("PRODUCT_ITEM");
    case MetricsReportingLevel::eMetricsReportingLevel::MetricsReportingLevel_PRODUCT_ITEM_TARGETING:
        return U("PRODUCT_ITEM_TARGETING");
    default:
        break;
    }
    return {};
}
}

MetricsReportingLevel::MetricsReportingLevel()
{
}

MetricsReportingLevel::~MetricsReportingLevel()
{
}

void MetricsReportingLevel::validate()
{
    // TODO: implement validation
}

web::json::value MetricsReportingLevel::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool MetricsReportingLevel::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void MetricsReportingLevel::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool MetricsReportingLevel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

MetricsReportingLevel::eMetricsReportingLevel MetricsReportingLevel::getValue() const
{
   return m_value;
}

void MetricsReportingLevel::setValue(MetricsReportingLevel::eMetricsReportingLevel const value)
{
   m_value = value;
}


}
}
}
}


