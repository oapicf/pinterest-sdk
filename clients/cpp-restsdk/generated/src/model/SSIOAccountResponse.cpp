/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SSIOAccountResponse.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



SSIOAccountResponse::SSIOAccountResponse()
{
    m_Eligible = false;
    m_EligibleIsSet = false;
    m_Can_edit = false;
    m_Can_editIsSet = false;
    m_Billto_infosIsSet = false;
    m_Currency = utility::conversions::to_string_t("");
    m_CurrencyIsSet = false;
    m_Pmp_namesIsSet = false;
    m_Error = utility::conversions::to_string_t("");
    m_ErrorIsSet = false;
}

SSIOAccountResponse::~SSIOAccountResponse()
{
}

void SSIOAccountResponse::validate()
{
    // TODO: implement validation
}

web::json::value SSIOAccountResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EligibleIsSet)
    {
        val[utility::conversions::to_string_t(U("eligible"))] = ModelBase::toJson(m_Eligible);
    }
    if(m_Can_editIsSet)
    {
        val[utility::conversions::to_string_t(U("can_edit"))] = ModelBase::toJson(m_Can_edit);
    }
    if(m_Billto_infosIsSet)
    {
        val[utility::conversions::to_string_t(U("billto_infos"))] = ModelBase::toJson(m_Billto_infos);
    }
    if(m_CurrencyIsSet)
    {
        val[utility::conversions::to_string_t(U("currency"))] = ModelBase::toJson(m_Currency);
    }
    if(m_Pmp_namesIsSet)
    {
        val[utility::conversions::to_string_t(U("pmp_names"))] = ModelBase::toJson(m_Pmp_names);
    }
    if(m_ErrorIsSet)
    {
        val[utility::conversions::to_string_t(U("error"))] = ModelBase::toJson(m_Error);
    }

    return val;
}

bool SSIOAccountResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("eligible"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("eligible")));
        if(!fieldValue.is_null())
        {
            bool refVal_setEligible;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEligible);
            setEligible(refVal_setEligible);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("can_edit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("can_edit")));
        if(!fieldValue.is_null())
        {
            bool refVal_setCanEdit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCanEdit);
            setCanEdit(refVal_setCanEdit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("billto_infos"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("billto_infos")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SSIOAccountItem>> refVal_setBilltoInfos;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBilltoInfos);
            setBilltoInfos(refVal_setBilltoInfos);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("currency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("currency")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCurrency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCurrency);
            setCurrency(refVal_setCurrency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pmp_names"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pmp_names")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SSIOAccountPMPName>> refVal_setPmpNames;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPmpNames);
            setPmpNames(refVal_setPmpNames);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("error"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("error")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setError;
            ok &= ModelBase::fromJson(fieldValue, refVal_setError);
            setError(refVal_setError);
        }
    }
    return ok;
}

void SSIOAccountResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_EligibleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("eligible")), m_Eligible));
    }
    if(m_Can_editIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("can_edit")), m_Can_edit));
    }
    if(m_Billto_infosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("billto_infos")), m_Billto_infos));
    }
    if(m_CurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("currency")), m_Currency));
    }
    if(m_Pmp_namesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pmp_names")), m_Pmp_names));
    }
    if(m_ErrorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("error")), m_Error));
    }
}

bool SSIOAccountResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("eligible"))))
    {
        bool refVal_setEligible;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("eligible"))), refVal_setEligible );
        setEligible(refVal_setEligible);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("can_edit"))))
    {
        bool refVal_setCanEdit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("can_edit"))), refVal_setCanEdit );
        setCanEdit(refVal_setCanEdit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("billto_infos"))))
    {
        std::vector<std::shared_ptr<SSIOAccountItem>> refVal_setBilltoInfos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("billto_infos"))), refVal_setBilltoInfos );
        setBilltoInfos(refVal_setBilltoInfos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("currency"))))
    {
        utility::string_t refVal_setCurrency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("currency"))), refVal_setCurrency );
        setCurrency(refVal_setCurrency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pmp_names"))))
    {
        std::vector<std::shared_ptr<SSIOAccountPMPName>> refVal_setPmpNames;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pmp_names"))), refVal_setPmpNames );
        setPmpNames(refVal_setPmpNames);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("error"))))
    {
        utility::string_t refVal_setError;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("error"))), refVal_setError );
        setError(refVal_setError);
    }
    return ok;
}

bool SSIOAccountResponse::isEligible() const
{
    return m_Eligible;
}

void SSIOAccountResponse::setEligible(bool value)
{
    m_Eligible = value;
    m_EligibleIsSet = true;
}

bool SSIOAccountResponse::eligibleIsSet() const
{
    return m_EligibleIsSet;
}

void SSIOAccountResponse::unsetEligible()
{
    m_EligibleIsSet = false;
}
bool SSIOAccountResponse::isCanEdit() const
{
    return m_Can_edit;
}

void SSIOAccountResponse::setCanEdit(bool value)
{
    m_Can_edit = value;
    m_Can_editIsSet = true;
}

bool SSIOAccountResponse::canEditIsSet() const
{
    return m_Can_editIsSet;
}

void SSIOAccountResponse::unsetCan_edit()
{
    m_Can_editIsSet = false;
}
std::vector<std::shared_ptr<SSIOAccountItem>>& SSIOAccountResponse::getBilltoInfos()
{
    return m_Billto_infos;
}

void SSIOAccountResponse::setBilltoInfos(const std::vector<std::shared_ptr<SSIOAccountItem>>& value)
{
    m_Billto_infos = value;
    m_Billto_infosIsSet = true;
}

bool SSIOAccountResponse::billtoInfosIsSet() const
{
    return m_Billto_infosIsSet;
}

void SSIOAccountResponse::unsetBillto_infos()
{
    m_Billto_infosIsSet = false;
}
utility::string_t SSIOAccountResponse::getCurrency() const
{
    return m_Currency;
}

void SSIOAccountResponse::setCurrency(const utility::string_t& value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}

bool SSIOAccountResponse::currencyIsSet() const
{
    return m_CurrencyIsSet;
}

void SSIOAccountResponse::unsetCurrency()
{
    m_CurrencyIsSet = false;
}
std::vector<std::shared_ptr<SSIOAccountPMPName>>& SSIOAccountResponse::getPmpNames()
{
    return m_Pmp_names;
}

void SSIOAccountResponse::setPmpNames(const std::vector<std::shared_ptr<SSIOAccountPMPName>>& value)
{
    m_Pmp_names = value;
    m_Pmp_namesIsSet = true;
}

bool SSIOAccountResponse::pmpNamesIsSet() const
{
    return m_Pmp_namesIsSet;
}

void SSIOAccountResponse::unsetPmp_names()
{
    m_Pmp_namesIsSet = false;
}
utility::string_t SSIOAccountResponse::getError() const
{
    return m_Error;
}

void SSIOAccountResponse::setError(const utility::string_t& value)
{
    m_Error = value;
    m_ErrorIsSet = true;
}

bool SSIOAccountResponse::errorIsSet() const
{
    return m_ErrorIsSet;
}

void SSIOAccountResponse::unsetError()
{
    m_ErrorIsSet = false;
}
}
}
}
}


