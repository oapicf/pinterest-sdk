/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Board.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Board::Board()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Created_at = utility::datetime();
    m_Created_atIsSet = false;
    m_Board_pins_modified_at = utility::datetime();
    m_Board_pins_modified_atIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Collaborator_count = 0;
    m_Collaborator_countIsSet = false;
    m_Pin_count = 0;
    m_Pin_countIsSet = false;
    m_Follower_count = 0;
    m_Follower_countIsSet = false;
    m_MediaIsSet = false;
    m_OwnerIsSet = false;
    m_Privacy = utility::conversions::to_string_t("");
    m_PrivacyIsSet = false;
}

Board::~Board()
{
}

void Board::validate()
{
    // TODO: implement validation
}

web::json::value Board::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Created_atIsSet)
    {
        val[utility::conversions::to_string_t(U("created_at"))] = ModelBase::toJson(m_Created_at);
    }
    if(m_Board_pins_modified_atIsSet)
    {
        val[utility::conversions::to_string_t(U("board_pins_modified_at"))] = ModelBase::toJson(m_Board_pins_modified_at);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_Collaborator_countIsSet)
    {
        val[utility::conversions::to_string_t(U("collaborator_count"))] = ModelBase::toJson(m_Collaborator_count);
    }
    if(m_Pin_countIsSet)
    {
        val[utility::conversions::to_string_t(U("pin_count"))] = ModelBase::toJson(m_Pin_count);
    }
    if(m_Follower_countIsSet)
    {
        val[utility::conversions::to_string_t(U("follower_count"))] = ModelBase::toJson(m_Follower_count);
    }
    if(m_MediaIsSet)
    {
        val[utility::conversions::to_string_t(U("media"))] = ModelBase::toJson(m_Media);
    }
    if(m_OwnerIsSet)
    {
        val[utility::conversions::to_string_t(U("owner"))] = ModelBase::toJson(m_Owner);
    }
    if(m_PrivacyIsSet)
    {
        val[utility::conversions::to_string_t(U("privacy"))] = ModelBase::toJson(m_Privacy);
    }

    return val;
}

bool Board::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_at")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("board_pins_modified_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("board_pins_modified_at")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setBoardPinsModifiedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBoardPinsModifiedAt);
            setBoardPinsModifiedAt(refVal_setBoardPinsModifiedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("collaborator_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("collaborator_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCollaboratorCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCollaboratorCount);
            setCollaboratorCount(refVal_setCollaboratorCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pin_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pin_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPinCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPinCount);
            setPinCount(refVal_setPinCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("follower_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("follower_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFollowerCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFollowerCount);
            setFollowerCount(refVal_setFollowerCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("media"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("media")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Board_media> refVal_setMedia;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMedia);
            setMedia(refVal_setMedia);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("owner"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("owner")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BoardOwner> refVal_setOwner;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOwner);
            setOwner(refVal_setOwner);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("privacy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("privacy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPrivacy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrivacy);
            setPrivacy(refVal_setPrivacy);
        }
    }
    return ok;
}

void Board::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_at")), m_Created_at));
    }
    if(m_Board_pins_modified_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("board_pins_modified_at")), m_Board_pins_modified_at));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_Collaborator_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("collaborator_count")), m_Collaborator_count));
    }
    if(m_Pin_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pin_count")), m_Pin_count));
    }
    if(m_Follower_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("follower_count")), m_Follower_count));
    }
    if(m_MediaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("media")), m_Media));
    }
    if(m_OwnerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("owner")), m_Owner));
    }
    if(m_PrivacyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("privacy")), m_Privacy));
    }
}

bool Board::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_at"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_at"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("board_pins_modified_at"))))
    {
        utility::datetime refVal_setBoardPinsModifiedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("board_pins_modified_at"))), refVal_setBoardPinsModifiedAt );
        setBoardPinsModifiedAt(refVal_setBoardPinsModifiedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("collaborator_count"))))
    {
        int32_t refVal_setCollaboratorCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("collaborator_count"))), refVal_setCollaboratorCount );
        setCollaboratorCount(refVal_setCollaboratorCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pin_count"))))
    {
        int32_t refVal_setPinCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pin_count"))), refVal_setPinCount );
        setPinCount(refVal_setPinCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("follower_count"))))
    {
        int32_t refVal_setFollowerCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("follower_count"))), refVal_setFollowerCount );
        setFollowerCount(refVal_setFollowerCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("media"))))
    {
        std::shared_ptr<Board_media> refVal_setMedia;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("media"))), refVal_setMedia );
        setMedia(refVal_setMedia);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("owner"))))
    {
        std::shared_ptr<BoardOwner> refVal_setOwner;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("owner"))), refVal_setOwner );
        setOwner(refVal_setOwner);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("privacy"))))
    {
        utility::string_t refVal_setPrivacy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("privacy"))), refVal_setPrivacy );
        setPrivacy(refVal_setPrivacy);
    }
    return ok;
}

utility::string_t Board::getId() const
{
    return m_Id;
}

void Board::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Board::idIsSet() const
{
    return m_IdIsSet;
}

void Board::unsetId()
{
    m_IdIsSet = false;
}
utility::datetime Board::getCreatedAt() const
{
    return m_Created_at;
}

void Board::setCreatedAt(const utility::datetime& value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}

bool Board::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void Board::unsetCreated_at()
{
    m_Created_atIsSet = false;
}
utility::datetime Board::getBoardPinsModifiedAt() const
{
    return m_Board_pins_modified_at;
}

void Board::setBoardPinsModifiedAt(const utility::datetime& value)
{
    m_Board_pins_modified_at = value;
    m_Board_pins_modified_atIsSet = true;
}

bool Board::boardPinsModifiedAtIsSet() const
{
    return m_Board_pins_modified_atIsSet;
}

void Board::unsetBoard_pins_modified_at()
{
    m_Board_pins_modified_atIsSet = false;
}
utility::string_t Board::getName() const
{
    return m_Name;
}

void Board::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Board::nameIsSet() const
{
    return m_NameIsSet;
}

void Board::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t Board::getDescription() const
{
    return m_Description;
}

void Board::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool Board::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void Board::unsetDescription()
{
    m_DescriptionIsSet = false;
}
int32_t Board::getCollaboratorCount() const
{
    return m_Collaborator_count;
}

void Board::setCollaboratorCount(int32_t value)
{
    m_Collaborator_count = value;
    m_Collaborator_countIsSet = true;
}

bool Board::collaboratorCountIsSet() const
{
    return m_Collaborator_countIsSet;
}

void Board::unsetCollaborator_count()
{
    m_Collaborator_countIsSet = false;
}
int32_t Board::getPinCount() const
{
    return m_Pin_count;
}

void Board::setPinCount(int32_t value)
{
    m_Pin_count = value;
    m_Pin_countIsSet = true;
}

bool Board::pinCountIsSet() const
{
    return m_Pin_countIsSet;
}

void Board::unsetPin_count()
{
    m_Pin_countIsSet = false;
}
int32_t Board::getFollowerCount() const
{
    return m_Follower_count;
}

void Board::setFollowerCount(int32_t value)
{
    m_Follower_count = value;
    m_Follower_countIsSet = true;
}

bool Board::followerCountIsSet() const
{
    return m_Follower_countIsSet;
}

void Board::unsetFollower_count()
{
    m_Follower_countIsSet = false;
}
std::shared_ptr<Board_media> Board::getMedia() const
{
    return m_Media;
}

void Board::setMedia(const std::shared_ptr<Board_media>& value)
{
    m_Media = value;
    m_MediaIsSet = true;
}

bool Board::mediaIsSet() const
{
    return m_MediaIsSet;
}

void Board::unsetMedia()
{
    m_MediaIsSet = false;
}
std::shared_ptr<BoardOwner> Board::getOwner() const
{
    return m_Owner;
}

void Board::setOwner(const std::shared_ptr<BoardOwner>& value)
{
    m_Owner = value;
    m_OwnerIsSet = true;
}

bool Board::ownerIsSet() const
{
    return m_OwnerIsSet;
}

void Board::unsetOwner()
{
    m_OwnerIsSet = false;
}
utility::string_t Board::getPrivacy() const
{
    return m_Privacy;
}

void Board::setPrivacy(const utility::string_t& value)
{
    m_Privacy = value;
    m_PrivacyIsSet = true;
}

bool Board::privacyIsSet() const
{
    return m_PrivacyIsSet;
}

void Board::unsetPrivacy()
{
    m_PrivacyIsSet = false;
}
}
}
}
}


