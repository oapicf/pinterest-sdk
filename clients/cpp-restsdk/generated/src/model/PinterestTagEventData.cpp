/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PinterestTagEventData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



PinterestTagEventData::PinterestTagEventData()
{
    m_CurrencyIsSet = false;
    m_Lead_type = utility::conversions::to_string_t("");
    m_Lead_typeIsSet = false;
    m_Line_itemsIsSet = false;
    m_Order_id = utility::conversions::to_string_t("");
    m_Order_idIsSet = false;
    m_Order_quantity = 0;
    m_Order_quantityIsSet = false;
    m_Page_name = utility::conversions::to_string_t("");
    m_Page_nameIsSet = false;
    m_Promo_code = utility::conversions::to_string_t("");
    m_Promo_codeIsSet = false;
    m_Property = utility::conversions::to_string_t("");
    m_PropertyIsSet = false;
    m_Search_query = utility::conversions::to_string_t("");
    m_Search_queryIsSet = false;
    m_Value = utility::conversions::to_string_t("");
    m_ValueIsSet = false;
    m_Video_title = utility::conversions::to_string_t("");
    m_Video_titleIsSet = false;
}

PinterestTagEventData::~PinterestTagEventData()
{
}

void PinterestTagEventData::validate()
{
    // TODO: implement validation
}

web::json::value PinterestTagEventData::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CurrencyIsSet)
    {
        val[utility::conversions::to_string_t(U("currency"))] = ModelBase::toJson(m_Currency);
    }
    if(m_Lead_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("lead_type"))] = ModelBase::toJson(m_Lead_type);
    }
    if(m_Line_itemsIsSet)
    {
        val[utility::conversions::to_string_t(U("line_items"))] = ModelBase::toJson(m_Line_items);
    }
    if(m_Order_idIsSet)
    {
        val[utility::conversions::to_string_t(U("order_id"))] = ModelBase::toJson(m_Order_id);
    }
    if(m_Order_quantityIsSet)
    {
        val[utility::conversions::to_string_t(U("order_quantity"))] = ModelBase::toJson(m_Order_quantity);
    }
    if(m_Page_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("page_name"))] = ModelBase::toJson(m_Page_name);
    }
    if(m_Promo_codeIsSet)
    {
        val[utility::conversions::to_string_t(U("promo_code"))] = ModelBase::toJson(m_Promo_code);
    }
    if(m_PropertyIsSet)
    {
        val[utility::conversions::to_string_t(U("property"))] = ModelBase::toJson(m_Property);
    }
    if(m_Search_queryIsSet)
    {
        val[utility::conversions::to_string_t(U("search_query"))] = ModelBase::toJson(m_Search_query);
    }
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t(U("value"))] = ModelBase::toJson(m_Value);
    }
    if(m_Video_titleIsSet)
    {
        val[utility::conversions::to_string_t(U("video_title"))] = ModelBase::toJson(m_Video_title);
    }

    return val;
}

bool PinterestTagEventData::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("currency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("currency")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Currency> refVal_setCurrency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCurrency);
            setCurrency(refVal_setCurrency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lead_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lead_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLeadType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLeadType);
            setLeadType(refVal_setLeadType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("line_items"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("line_items")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LineItem> refVal_setLineItems;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLineItems);
            setLineItems(refVal_setLineItems);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("order_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("order_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOrderId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrderId);
            setOrderId(refVal_setOrderId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("order_quantity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("order_quantity")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setOrderQuantity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrderQuantity);
            setOrderQuantity(refVal_setOrderQuantity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("page_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("page_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPageName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPageName);
            setPageName(refVal_setPageName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("promo_code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("promo_code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPromoCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPromoCode);
            setPromoCode(refVal_setPromoCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("property"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("property")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProperty;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProperty);
            setProperty(refVal_setProperty);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("search_query"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("search_query")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSearchQuery;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSearchQuery);
            setSearchQuery(refVal_setSearchQuery);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("value"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("value")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValue);
            setValue(refVal_setValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("video_title"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("video_title")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVideoTitle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVideoTitle);
            setVideoTitle(refVal_setVideoTitle);
        }
    }
    return ok;
}

void PinterestTagEventData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("currency")), m_Currency));
    }
    if(m_Lead_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lead_type")), m_Lead_type));
    }
    if(m_Line_itemsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("line_items")), m_Line_items));
    }
    if(m_Order_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("order_id")), m_Order_id));
    }
    if(m_Order_quantityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("order_quantity")), m_Order_quantity));
    }
    if(m_Page_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("page_name")), m_Page_name));
    }
    if(m_Promo_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("promo_code")), m_Promo_code));
    }
    if(m_PropertyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("property")), m_Property));
    }
    if(m_Search_queryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("search_query")), m_Search_query));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("value")), m_Value));
    }
    if(m_Video_titleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("video_title")), m_Video_title));
    }
}

bool PinterestTagEventData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("currency"))))
    {
        std::shared_ptr<Currency> refVal_setCurrency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("currency"))), refVal_setCurrency );
        setCurrency(refVal_setCurrency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lead_type"))))
    {
        utility::string_t refVal_setLeadType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lead_type"))), refVal_setLeadType );
        setLeadType(refVal_setLeadType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("line_items"))))
    {
        std::shared_ptr<LineItem> refVal_setLineItems;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("line_items"))), refVal_setLineItems );
        setLineItems(refVal_setLineItems);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("order_id"))))
    {
        utility::string_t refVal_setOrderId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("order_id"))), refVal_setOrderId );
        setOrderId(refVal_setOrderId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("order_quantity"))))
    {
        int32_t refVal_setOrderQuantity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("order_quantity"))), refVal_setOrderQuantity );
        setOrderQuantity(refVal_setOrderQuantity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("page_name"))))
    {
        utility::string_t refVal_setPageName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("page_name"))), refVal_setPageName );
        setPageName(refVal_setPageName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("promo_code"))))
    {
        utility::string_t refVal_setPromoCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("promo_code"))), refVal_setPromoCode );
        setPromoCode(refVal_setPromoCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("property"))))
    {
        utility::string_t refVal_setProperty;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("property"))), refVal_setProperty );
        setProperty(refVal_setProperty);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("search_query"))))
    {
        utility::string_t refVal_setSearchQuery;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("search_query"))), refVal_setSearchQuery );
        setSearchQuery(refVal_setSearchQuery);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("value"))))
    {
        utility::string_t refVal_setValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("value"))), refVal_setValue );
        setValue(refVal_setValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("video_title"))))
    {
        utility::string_t refVal_setVideoTitle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("video_title"))), refVal_setVideoTitle );
        setVideoTitle(refVal_setVideoTitle);
    }
    return ok;
}

std::shared_ptr<Currency> PinterestTagEventData::getCurrency() const
{
    return m_Currency;
}

void PinterestTagEventData::setCurrency(const std::shared_ptr<Currency>& value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}

bool PinterestTagEventData::currencyIsSet() const
{
    return m_CurrencyIsSet;
}

void PinterestTagEventData::unsetCurrency()
{
    m_CurrencyIsSet = false;
}
utility::string_t PinterestTagEventData::getLeadType() const
{
    return m_Lead_type;
}

void PinterestTagEventData::setLeadType(const utility::string_t& value)
{
    m_Lead_type = value;
    m_Lead_typeIsSet = true;
}

bool PinterestTagEventData::leadTypeIsSet() const
{
    return m_Lead_typeIsSet;
}

void PinterestTagEventData::unsetLead_type()
{
    m_Lead_typeIsSet = false;
}
std::shared_ptr<LineItem> PinterestTagEventData::getLineItems() const
{
    return m_Line_items;
}

void PinterestTagEventData::setLineItems(const std::shared_ptr<LineItem>& value)
{
    m_Line_items = value;
    m_Line_itemsIsSet = true;
}

bool PinterestTagEventData::lineItemsIsSet() const
{
    return m_Line_itemsIsSet;
}

void PinterestTagEventData::unsetLine_items()
{
    m_Line_itemsIsSet = false;
}
utility::string_t PinterestTagEventData::getOrderId() const
{
    return m_Order_id;
}

void PinterestTagEventData::setOrderId(const utility::string_t& value)
{
    m_Order_id = value;
    m_Order_idIsSet = true;
}

bool PinterestTagEventData::orderIdIsSet() const
{
    return m_Order_idIsSet;
}

void PinterestTagEventData::unsetOrder_id()
{
    m_Order_idIsSet = false;
}
int32_t PinterestTagEventData::getOrderQuantity() const
{
    return m_Order_quantity;
}

void PinterestTagEventData::setOrderQuantity(int32_t value)
{
    m_Order_quantity = value;
    m_Order_quantityIsSet = true;
}

bool PinterestTagEventData::orderQuantityIsSet() const
{
    return m_Order_quantityIsSet;
}

void PinterestTagEventData::unsetOrder_quantity()
{
    m_Order_quantityIsSet = false;
}
utility::string_t PinterestTagEventData::getPageName() const
{
    return m_Page_name;
}

void PinterestTagEventData::setPageName(const utility::string_t& value)
{
    m_Page_name = value;
    m_Page_nameIsSet = true;
}

bool PinterestTagEventData::pageNameIsSet() const
{
    return m_Page_nameIsSet;
}

void PinterestTagEventData::unsetPage_name()
{
    m_Page_nameIsSet = false;
}
utility::string_t PinterestTagEventData::getPromoCode() const
{
    return m_Promo_code;
}

void PinterestTagEventData::setPromoCode(const utility::string_t& value)
{
    m_Promo_code = value;
    m_Promo_codeIsSet = true;
}

bool PinterestTagEventData::promoCodeIsSet() const
{
    return m_Promo_codeIsSet;
}

void PinterestTagEventData::unsetPromo_code()
{
    m_Promo_codeIsSet = false;
}
utility::string_t PinterestTagEventData::getProperty() const
{
    return m_Property;
}

void PinterestTagEventData::setProperty(const utility::string_t& value)
{
    m_Property = value;
    m_PropertyIsSet = true;
}

bool PinterestTagEventData::propertyIsSet() const
{
    return m_PropertyIsSet;
}

void PinterestTagEventData::unsetProperty()
{
    m_PropertyIsSet = false;
}
utility::string_t PinterestTagEventData::getSearchQuery() const
{
    return m_Search_query;
}

void PinterestTagEventData::setSearchQuery(const utility::string_t& value)
{
    m_Search_query = value;
    m_Search_queryIsSet = true;
}

bool PinterestTagEventData::searchQueryIsSet() const
{
    return m_Search_queryIsSet;
}

void PinterestTagEventData::unsetSearch_query()
{
    m_Search_queryIsSet = false;
}
utility::string_t PinterestTagEventData::getValue() const
{
    return m_Value;
}

void PinterestTagEventData::setValue(const utility::string_t& value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool PinterestTagEventData::valueIsSet() const
{
    return m_ValueIsSet;
}

void PinterestTagEventData::unsetValue()
{
    m_ValueIsSet = false;
}
utility::string_t PinterestTagEventData::getVideoTitle() const
{
    return m_Video_title;
}

void PinterestTagEventData::setVideoTitle(const utility::string_t& value)
{
    m_Video_title = value;
    m_Video_titleIsSet = true;
}

bool PinterestTagEventData::videoTitleIsSet() const
{
    return m_Video_titleIsSet;
}

void PinterestTagEventData::unsetVideo_title()
{
    m_Video_titleIsSet = false;
}
}
}
}
}


