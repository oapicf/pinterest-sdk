/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PlacementMultipliers.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



PlacementMultipliers::PlacementMultipliers()
{
    m_PLACEMENT = utility::conversions::to_string_t("");
    m_PLACEMENTIsSet = false;
}

PlacementMultipliers::~PlacementMultipliers()
{
}

void PlacementMultipliers::validate()
{
    // TODO: implement validation
}

web::json::value PlacementMultipliers::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PLACEMENTIsSet)
    {
        val[utility::conversions::to_string_t(U("PLACEMENT"))] = ModelBase::toJson(m_PLACEMENT);
    }

    return val;
}

bool PlacementMultipliers::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("PLACEMENT"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("PLACEMENT")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPLACEMENT;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPLACEMENT);
            setPLACEMENT(refVal_setPLACEMENT);
        }
    }
    return ok;
}

void PlacementMultipliers::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PLACEMENTIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("PLACEMENT")), m_PLACEMENT));
    }
}

bool PlacementMultipliers::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("PLACEMENT"))))
    {
        utility::string_t refVal_setPLACEMENT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("PLACEMENT"))), refVal_setPLACEMENT );
        setPLACEMENT(refVal_setPLACEMENT);
    }
    return ok;
}

utility::string_t PlacementMultipliers::getPLACEMENT() const
{
    return m_PLACEMENT;
}

void PlacementMultipliers::setPLACEMENT(const utility::string_t& value)
{
    m_PLACEMENT = value;
    m_PLACEMENTIsSet = true;
}

bool PlacementMultipliers::pLACEMENTIsSet() const
{
    return m_PLACEMENTIsSet;
}

void PlacementMultipliers::unsetPLACEMENT()
{
    m_PLACEMENTIsSet = false;
}
}
}
}
}


