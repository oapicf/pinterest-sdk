/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/BillingProfilesResponse.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



BillingProfilesResponse::BillingProfilesResponse()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Card_type = utility::conversions::to_string_t("");
    m_Card_typeIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_Advertiser_id = utility::conversions::to_string_t("");
    m_Advertiser_idIsSet = false;
    m_Payment_method_brand = utility::conversions::to_string_t("");
    m_Payment_method_brandIsSet = false;
}

BillingProfilesResponse::~BillingProfilesResponse()
{
}

void BillingProfilesResponse::validate()
{
    // TODO: implement validation
}

web::json::value BillingProfilesResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Card_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("card_type"))] = ModelBase::toJson(m_Card_type);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_Advertiser_idIsSet)
    {
        val[utility::conversions::to_string_t(U("advertiser_id"))] = ModelBase::toJson(m_Advertiser_id);
    }
    if(m_Payment_method_brandIsSet)
    {
        val[utility::conversions::to_string_t(U("payment_method_brand"))] = ModelBase::toJson(m_Payment_method_brand);
    }

    return val;
}

bool BillingProfilesResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("card_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("card_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCardType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCardType);
            setCardType(refVal_setCardType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("advertiser_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("advertiser_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAdvertiserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdvertiserId);
            setAdvertiserId(refVal_setAdvertiserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("payment_method_brand"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("payment_method_brand")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPaymentMethodBrand;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPaymentMethodBrand);
            setPaymentMethodBrand(refVal_setPaymentMethodBrand);
        }
    }
    return ok;
}

void BillingProfilesResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Card_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("card_type")), m_Card_type));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_Advertiser_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("advertiser_id")), m_Advertiser_id));
    }
    if(m_Payment_method_brandIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("payment_method_brand")), m_Payment_method_brand));
    }
}

bool BillingProfilesResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("card_type"))))
    {
        utility::string_t refVal_setCardType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("card_type"))), refVal_setCardType );
        setCardType(refVal_setCardType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("advertiser_id"))))
    {
        utility::string_t refVal_setAdvertiserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("advertiser_id"))), refVal_setAdvertiserId );
        setAdvertiserId(refVal_setAdvertiserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("payment_method_brand"))))
    {
        utility::string_t refVal_setPaymentMethodBrand;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("payment_method_brand"))), refVal_setPaymentMethodBrand );
        setPaymentMethodBrand(refVal_setPaymentMethodBrand);
    }
    return ok;
}

utility::string_t BillingProfilesResponse::getId() const
{
    return m_Id;
}

void BillingProfilesResponse::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BillingProfilesResponse::idIsSet() const
{
    return m_IdIsSet;
}

void BillingProfilesResponse::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t BillingProfilesResponse::getCardType() const
{
    return m_Card_type;
}

void BillingProfilesResponse::setCardType(const utility::string_t& value)
{
    m_Card_type = value;
    m_Card_typeIsSet = true;
}

bool BillingProfilesResponse::cardTypeIsSet() const
{
    return m_Card_typeIsSet;
}

void BillingProfilesResponse::unsetCard_type()
{
    m_Card_typeIsSet = false;
}
utility::string_t BillingProfilesResponse::getStatus() const
{
    return m_Status;
}

void BillingProfilesResponse::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool BillingProfilesResponse::statusIsSet() const
{
    return m_StatusIsSet;
}

void BillingProfilesResponse::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::string_t BillingProfilesResponse::getAdvertiserId() const
{
    return m_Advertiser_id;
}

void BillingProfilesResponse::setAdvertiserId(const utility::string_t& value)
{
    m_Advertiser_id = value;
    m_Advertiser_idIsSet = true;
}

bool BillingProfilesResponse::advertiserIdIsSet() const
{
    return m_Advertiser_idIsSet;
}

void BillingProfilesResponse::unsetAdvertiser_id()
{
    m_Advertiser_idIsSet = false;
}
utility::string_t BillingProfilesResponse::getPaymentMethodBrand() const
{
    return m_Payment_method_brand;
}

void BillingProfilesResponse::setPaymentMethodBrand(const utility::string_t& value)
{
    m_Payment_method_brand = value;
    m_Payment_method_brandIsSet = true;
}

bool BillingProfilesResponse::paymentMethodBrandIsSet() const
{
    return m_Payment_method_brandIsSet;
}

void BillingProfilesResponse::unsetPayment_method_brand()
{
    m_Payment_method_brandIsSet = false;
}
}
}
}
}


