/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/IntegrationLogClientRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



IntegrationLogClientRequest::IntegrationLogClientRequest()
{
    m_Method = utility::conversions::to_string_t("");
    m_MethodIsSet = false;
    m_Host = utility::conversions::to_string_t("");
    m_HostIsSet = false;
    m_Path = utility::conversions::to_string_t("");
    m_PathIsSet = false;
    m_Request_headersIsSet = false;
    m_Response_headersIsSet = false;
    m_Response_status_code = 0;
    m_Response_status_codeIsSet = false;
}

IntegrationLogClientRequest::~IntegrationLogClientRequest()
{
}

void IntegrationLogClientRequest::validate()
{
    // TODO: implement validation
}

web::json::value IntegrationLogClientRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MethodIsSet)
    {
        val[utility::conversions::to_string_t(U("method"))] = ModelBase::toJson(m_Method);
    }
    if(m_HostIsSet)
    {
        val[utility::conversions::to_string_t(U("host"))] = ModelBase::toJson(m_Host);
    }
    if(m_PathIsSet)
    {
        val[utility::conversions::to_string_t(U("path"))] = ModelBase::toJson(m_Path);
    }
    if(m_Request_headersIsSet)
    {
        val[utility::conversions::to_string_t(U("request_headers"))] = ModelBase::toJson(m_Request_headers);
    }
    if(m_Response_headersIsSet)
    {
        val[utility::conversions::to_string_t(U("response_headers"))] = ModelBase::toJson(m_Response_headers);
    }
    if(m_Response_status_codeIsSet)
    {
        val[utility::conversions::to_string_t(U("response_status_code"))] = ModelBase::toJson(m_Response_status_code);
    }

    return val;
}

bool IntegrationLogClientRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("method"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("method")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMethod;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMethod);
            setMethod(refVal_setMethod);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("host"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("host")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHost;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHost);
            setHost(refVal_setHost);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("path"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("path")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPath;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPath);
            setPath(refVal_setPath);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("request_headers"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("request_headers")));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, utility::string_t> refVal_setRequestHeaders;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRequestHeaders);
            setRequestHeaders(refVal_setRequestHeaders);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("response_headers"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("response_headers")));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, utility::string_t> refVal_setResponseHeaders;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResponseHeaders);
            setResponseHeaders(refVal_setResponseHeaders);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("response_status_code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("response_status_code")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setResponseStatusCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResponseStatusCode);
            setResponseStatusCode(refVal_setResponseStatusCode);
        }
    }
    return ok;
}

void IntegrationLogClientRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_MethodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("method")), m_Method));
    }
    if(m_HostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("host")), m_Host));
    }
    if(m_PathIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("path")), m_Path));
    }
    if(m_Request_headersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("request_headers")), m_Request_headers));
    }
    if(m_Response_headersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("response_headers")), m_Response_headers));
    }
    if(m_Response_status_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("response_status_code")), m_Response_status_code));
    }
}

bool IntegrationLogClientRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("method"))))
    {
        utility::string_t refVal_setMethod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("method"))), refVal_setMethod );
        setMethod(refVal_setMethod);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("host"))))
    {
        utility::string_t refVal_setHost;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("host"))), refVal_setHost );
        setHost(refVal_setHost);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("path"))))
    {
        utility::string_t refVal_setPath;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("path"))), refVal_setPath );
        setPath(refVal_setPath);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("request_headers"))))
    {
        std::map<utility::string_t, utility::string_t> refVal_setRequestHeaders;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("request_headers"))), refVal_setRequestHeaders );
        setRequestHeaders(refVal_setRequestHeaders);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("response_headers"))))
    {
        std::map<utility::string_t, utility::string_t> refVal_setResponseHeaders;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("response_headers"))), refVal_setResponseHeaders );
        setResponseHeaders(refVal_setResponseHeaders);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("response_status_code"))))
    {
        int32_t refVal_setResponseStatusCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("response_status_code"))), refVal_setResponseStatusCode );
        setResponseStatusCode(refVal_setResponseStatusCode);
    }
    return ok;
}

utility::string_t IntegrationLogClientRequest::getMethod() const
{
    return m_Method;
}

void IntegrationLogClientRequest::setMethod(const utility::string_t& value)
{
    m_Method = value;
    m_MethodIsSet = true;
}

bool IntegrationLogClientRequest::methodIsSet() const
{
    return m_MethodIsSet;
}

void IntegrationLogClientRequest::unsetMethod()
{
    m_MethodIsSet = false;
}
utility::string_t IntegrationLogClientRequest::getHost() const
{
    return m_Host;
}

void IntegrationLogClientRequest::setHost(const utility::string_t& value)
{
    m_Host = value;
    m_HostIsSet = true;
}

bool IntegrationLogClientRequest::hostIsSet() const
{
    return m_HostIsSet;
}

void IntegrationLogClientRequest::unsetHost()
{
    m_HostIsSet = false;
}
utility::string_t IntegrationLogClientRequest::getPath() const
{
    return m_Path;
}

void IntegrationLogClientRequest::setPath(const utility::string_t& value)
{
    m_Path = value;
    m_PathIsSet = true;
}

bool IntegrationLogClientRequest::pathIsSet() const
{
    return m_PathIsSet;
}

void IntegrationLogClientRequest::unsetPath()
{
    m_PathIsSet = false;
}
std::map<utility::string_t, utility::string_t>& IntegrationLogClientRequest::getRequestHeaders()
{
    return m_Request_headers;
}

void IntegrationLogClientRequest::setRequestHeaders(const std::map<utility::string_t, utility::string_t>& value)
{
    m_Request_headers = value;
    m_Request_headersIsSet = true;
}

bool IntegrationLogClientRequest::requestHeadersIsSet() const
{
    return m_Request_headersIsSet;
}

void IntegrationLogClientRequest::unsetRequest_headers()
{
    m_Request_headersIsSet = false;
}
std::map<utility::string_t, utility::string_t>& IntegrationLogClientRequest::getResponseHeaders()
{
    return m_Response_headers;
}

void IntegrationLogClientRequest::setResponseHeaders(const std::map<utility::string_t, utility::string_t>& value)
{
    m_Response_headers = value;
    m_Response_headersIsSet = true;
}

bool IntegrationLogClientRequest::responseHeadersIsSet() const
{
    return m_Response_headersIsSet;
}

void IntegrationLogClientRequest::unsetResponse_headers()
{
    m_Response_headersIsSet = false;
}
int32_t IntegrationLogClientRequest::getResponseStatusCode() const
{
    return m_Response_status_code;
}

void IntegrationLogClientRequest::setResponseStatusCode(int32_t value)
{
    m_Response_status_code = value;
    m_Response_status_codeIsSet = true;
}

bool IntegrationLogClientRequest::responseStatusCodeIsSet() const
{
    return m_Response_status_codeIsSet;
}

void IntegrationLogClientRequest::unsetResponse_status_code()
{
    m_Response_status_codeIsSet = false;
}
}
}
}
}


