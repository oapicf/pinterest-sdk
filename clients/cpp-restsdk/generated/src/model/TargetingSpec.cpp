/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/TargetingSpec.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



TargetingSpec::TargetingSpec()
{
    m_AGE_BUCKETIsSet = false;
    m_APPTYPEIsSet = false;
    m_AUDIENCE_EXCLUDEIsSet = false;
    m_AUDIENCE_INCLUDEIsSet = false;
    m_GENDERIsSet = false;
    m_GEOIsSet = false;
    m_INTERESTIsSet = false;
    m_LOCALEIsSet = false;
    m_LOCATIONIsSet = false;
    m_SHOPPING_RETARGETINGIsSet = false;
    m_TARGETING_STRATEGYIsSet = false;
}

TargetingSpec::~TargetingSpec()
{
}

void TargetingSpec::validate()
{
    // TODO: implement validation
}

web::json::value TargetingSpec::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AGE_BUCKETIsSet)
    {
        val[utility::conversions::to_string_t(U("AGE_BUCKET"))] = ModelBase::toJson(m_AGE_BUCKET);
    }
    if(m_APPTYPEIsSet)
    {
        val[utility::conversions::to_string_t(U("APPTYPE"))] = ModelBase::toJson(m_APPTYPE);
    }
    if(m_AUDIENCE_EXCLUDEIsSet)
    {
        val[utility::conversions::to_string_t(U("AUDIENCE_EXCLUDE"))] = ModelBase::toJson(m_AUDIENCE_EXCLUDE);
    }
    if(m_AUDIENCE_INCLUDEIsSet)
    {
        val[utility::conversions::to_string_t(U("AUDIENCE_INCLUDE"))] = ModelBase::toJson(m_AUDIENCE_INCLUDE);
    }
    if(m_GENDERIsSet)
    {
        val[utility::conversions::to_string_t(U("GENDER"))] = ModelBase::toJson(m_GENDER);
    }
    if(m_GEOIsSet)
    {
        val[utility::conversions::to_string_t(U("GEO"))] = ModelBase::toJson(m_GEO);
    }
    if(m_INTERESTIsSet)
    {
        val[utility::conversions::to_string_t(U("INTEREST"))] = ModelBase::toJson(m_INTEREST);
    }
    if(m_LOCALEIsSet)
    {
        val[utility::conversions::to_string_t(U("LOCALE"))] = ModelBase::toJson(m_LOCALE);
    }
    if(m_LOCATIONIsSet)
    {
        val[utility::conversions::to_string_t(U("LOCATION"))] = ModelBase::toJson(m_LOCATION);
    }
    if(m_SHOPPING_RETARGETINGIsSet)
    {
        val[utility::conversions::to_string_t(U("SHOPPING_RETARGETING"))] = ModelBase::toJson(m_SHOPPING_RETARGETING);
    }
    if(m_TARGETING_STRATEGYIsSet)
    {
        val[utility::conversions::to_string_t(U("TARGETING_STRATEGY"))] = ModelBase::toJson(m_TARGETING_STRATEGY);
    }

    return val;
}

bool TargetingSpec::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("AGE_BUCKET"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("AGE_BUCKET")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setAGEBUCKET;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAGEBUCKET);
            setAGEBUCKET(refVal_setAGEBUCKET);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("APPTYPE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("APPTYPE")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setAPPTYPE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAPPTYPE);
            setAPPTYPE(refVal_setAPPTYPE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("AUDIENCE_EXCLUDE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("AUDIENCE_EXCLUDE")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setAUDIENCEEXCLUDE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAUDIENCEEXCLUDE);
            setAUDIENCEEXCLUDE(refVal_setAUDIENCEEXCLUDE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("AUDIENCE_INCLUDE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("AUDIENCE_INCLUDE")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setAUDIENCEINCLUDE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAUDIENCEINCLUDE);
            setAUDIENCEINCLUDE(refVal_setAUDIENCEINCLUDE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("GENDER"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("GENDER")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setGENDER;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGENDER);
            setGENDER(refVal_setGENDER);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("GEO"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("GEO")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setGEO;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGEO);
            setGEO(refVal_setGEO);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("INTEREST"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("INTEREST")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setINTEREST;
            ok &= ModelBase::fromJson(fieldValue, refVal_setINTEREST);
            setINTEREST(refVal_setINTEREST);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LOCALE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LOCALE")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setLOCALE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLOCALE);
            setLOCALE(refVal_setLOCALE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LOCATION"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LOCATION")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setLOCATION;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLOCATION);
            setLOCATION(refVal_setLOCATION);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("SHOPPING_RETARGETING"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("SHOPPING_RETARGETING")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<TargetingSpec_SHOPPING_RETARGETING>> refVal_setSHOPPINGRETARGETING;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSHOPPINGRETARGETING);
            setSHOPPINGRETARGETING(refVal_setSHOPPINGRETARGETING);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("TARGETING_STRATEGY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("TARGETING_STRATEGY")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setTARGETINGSTRATEGY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTARGETINGSTRATEGY);
            setTARGETINGSTRATEGY(refVal_setTARGETINGSTRATEGY);
        }
    }
    return ok;
}

void TargetingSpec::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AGE_BUCKETIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("AGE_BUCKET")), m_AGE_BUCKET));
    }
    if(m_APPTYPEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("APPTYPE")), m_APPTYPE));
    }
    if(m_AUDIENCE_EXCLUDEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("AUDIENCE_EXCLUDE")), m_AUDIENCE_EXCLUDE));
    }
    if(m_AUDIENCE_INCLUDEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("AUDIENCE_INCLUDE")), m_AUDIENCE_INCLUDE));
    }
    if(m_GENDERIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("GENDER")), m_GENDER));
    }
    if(m_GEOIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("GEO")), m_GEO));
    }
    if(m_INTERESTIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("INTEREST")), m_INTEREST));
    }
    if(m_LOCALEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LOCALE")), m_LOCALE));
    }
    if(m_LOCATIONIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LOCATION")), m_LOCATION));
    }
    if(m_SHOPPING_RETARGETINGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("SHOPPING_RETARGETING")), m_SHOPPING_RETARGETING));
    }
    if(m_TARGETING_STRATEGYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("TARGETING_STRATEGY")), m_TARGETING_STRATEGY));
    }
}

bool TargetingSpec::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("AGE_BUCKET"))))
    {
        std::vector<utility::string_t> refVal_setAGEBUCKET;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("AGE_BUCKET"))), refVal_setAGEBUCKET );
        setAGEBUCKET(refVal_setAGEBUCKET);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("APPTYPE"))))
    {
        std::vector<utility::string_t> refVal_setAPPTYPE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("APPTYPE"))), refVal_setAPPTYPE );
        setAPPTYPE(refVal_setAPPTYPE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("AUDIENCE_EXCLUDE"))))
    {
        std::vector<utility::string_t> refVal_setAUDIENCEEXCLUDE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("AUDIENCE_EXCLUDE"))), refVal_setAUDIENCEEXCLUDE );
        setAUDIENCEEXCLUDE(refVal_setAUDIENCEEXCLUDE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("AUDIENCE_INCLUDE"))))
    {
        std::vector<utility::string_t> refVal_setAUDIENCEINCLUDE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("AUDIENCE_INCLUDE"))), refVal_setAUDIENCEINCLUDE );
        setAUDIENCEINCLUDE(refVal_setAUDIENCEINCLUDE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("GENDER"))))
    {
        std::vector<utility::string_t> refVal_setGENDER;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("GENDER"))), refVal_setGENDER );
        setGENDER(refVal_setGENDER);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("GEO"))))
    {
        std::vector<utility::string_t> refVal_setGEO;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("GEO"))), refVal_setGEO );
        setGEO(refVal_setGEO);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("INTEREST"))))
    {
        std::vector<utility::string_t> refVal_setINTEREST;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("INTEREST"))), refVal_setINTEREST );
        setINTEREST(refVal_setINTEREST);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LOCALE"))))
    {
        std::vector<utility::string_t> refVal_setLOCALE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LOCALE"))), refVal_setLOCALE );
        setLOCALE(refVal_setLOCALE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LOCATION"))))
    {
        std::vector<utility::string_t> refVal_setLOCATION;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LOCATION"))), refVal_setLOCATION );
        setLOCATION(refVal_setLOCATION);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("SHOPPING_RETARGETING"))))
    {
        std::vector<std::shared_ptr<TargetingSpec_SHOPPING_RETARGETING>> refVal_setSHOPPINGRETARGETING;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("SHOPPING_RETARGETING"))), refVal_setSHOPPINGRETARGETING );
        setSHOPPINGRETARGETING(refVal_setSHOPPINGRETARGETING);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("TARGETING_STRATEGY"))))
    {
        std::vector<utility::string_t> refVal_setTARGETINGSTRATEGY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("TARGETING_STRATEGY"))), refVal_setTARGETINGSTRATEGY );
        setTARGETINGSTRATEGY(refVal_setTARGETINGSTRATEGY);
    }
    return ok;
}

std::vector<utility::string_t>& TargetingSpec::getAGEBUCKET()
{
    return m_AGE_BUCKET;
}

void TargetingSpec::setAGEBUCKET(const std::vector<utility::string_t>& value)
{
    m_AGE_BUCKET = value;
    m_AGE_BUCKETIsSet = true;
}

bool TargetingSpec::aGEBUCKETIsSet() const
{
    return m_AGE_BUCKETIsSet;
}

void TargetingSpec::unsetAGE_BUCKET()
{
    m_AGE_BUCKETIsSet = false;
}
std::vector<utility::string_t>& TargetingSpec::getAPPTYPE()
{
    return m_APPTYPE;
}

void TargetingSpec::setAPPTYPE(const std::vector<utility::string_t>& value)
{
    m_APPTYPE = value;
    m_APPTYPEIsSet = true;
}

bool TargetingSpec::aPPTYPEIsSet() const
{
    return m_APPTYPEIsSet;
}

void TargetingSpec::unsetAPPTYPE()
{
    m_APPTYPEIsSet = false;
}
std::vector<utility::string_t>& TargetingSpec::getAUDIENCEEXCLUDE()
{
    return m_AUDIENCE_EXCLUDE;
}

void TargetingSpec::setAUDIENCEEXCLUDE(const std::vector<utility::string_t>& value)
{
    m_AUDIENCE_EXCLUDE = value;
    m_AUDIENCE_EXCLUDEIsSet = true;
}

bool TargetingSpec::aUDIENCEEXCLUDEIsSet() const
{
    return m_AUDIENCE_EXCLUDEIsSet;
}

void TargetingSpec::unsetAUDIENCE_EXCLUDE()
{
    m_AUDIENCE_EXCLUDEIsSet = false;
}
std::vector<utility::string_t>& TargetingSpec::getAUDIENCEINCLUDE()
{
    return m_AUDIENCE_INCLUDE;
}

void TargetingSpec::setAUDIENCEINCLUDE(const std::vector<utility::string_t>& value)
{
    m_AUDIENCE_INCLUDE = value;
    m_AUDIENCE_INCLUDEIsSet = true;
}

bool TargetingSpec::aUDIENCEINCLUDEIsSet() const
{
    return m_AUDIENCE_INCLUDEIsSet;
}

void TargetingSpec::unsetAUDIENCE_INCLUDE()
{
    m_AUDIENCE_INCLUDEIsSet = false;
}
std::vector<utility::string_t>& TargetingSpec::getGENDER()
{
    return m_GENDER;
}

void TargetingSpec::setGENDER(const std::vector<utility::string_t>& value)
{
    m_GENDER = value;
    m_GENDERIsSet = true;
}

bool TargetingSpec::gENDERIsSet() const
{
    return m_GENDERIsSet;
}

void TargetingSpec::unsetGENDER()
{
    m_GENDERIsSet = false;
}
std::vector<utility::string_t>& TargetingSpec::getGEO()
{
    return m_GEO;
}

void TargetingSpec::setGEO(const std::vector<utility::string_t>& value)
{
    m_GEO = value;
    m_GEOIsSet = true;
}

bool TargetingSpec::gEOIsSet() const
{
    return m_GEOIsSet;
}

void TargetingSpec::unsetGEO()
{
    m_GEOIsSet = false;
}
std::vector<utility::string_t>& TargetingSpec::getINTEREST()
{
    return m_INTEREST;
}

void TargetingSpec::setINTEREST(const std::vector<utility::string_t>& value)
{
    m_INTEREST = value;
    m_INTERESTIsSet = true;
}

bool TargetingSpec::iNTERESTIsSet() const
{
    return m_INTERESTIsSet;
}

void TargetingSpec::unsetINTEREST()
{
    m_INTERESTIsSet = false;
}
std::vector<utility::string_t>& TargetingSpec::getLOCALE()
{
    return m_LOCALE;
}

void TargetingSpec::setLOCALE(const std::vector<utility::string_t>& value)
{
    m_LOCALE = value;
    m_LOCALEIsSet = true;
}

bool TargetingSpec::lOCALEIsSet() const
{
    return m_LOCALEIsSet;
}

void TargetingSpec::unsetLOCALE()
{
    m_LOCALEIsSet = false;
}
std::vector<utility::string_t>& TargetingSpec::getLOCATION()
{
    return m_LOCATION;
}

void TargetingSpec::setLOCATION(const std::vector<utility::string_t>& value)
{
    m_LOCATION = value;
    m_LOCATIONIsSet = true;
}

bool TargetingSpec::lOCATIONIsSet() const
{
    return m_LOCATIONIsSet;
}

void TargetingSpec::unsetLOCATION()
{
    m_LOCATIONIsSet = false;
}
std::vector<std::shared_ptr<TargetingSpec_SHOPPING_RETARGETING>>& TargetingSpec::getSHOPPINGRETARGETING()
{
    return m_SHOPPING_RETARGETING;
}

void TargetingSpec::setSHOPPINGRETARGETING(const std::vector<std::shared_ptr<TargetingSpec_SHOPPING_RETARGETING>>& value)
{
    m_SHOPPING_RETARGETING = value;
    m_SHOPPING_RETARGETINGIsSet = true;
}

bool TargetingSpec::sHOPPINGRETARGETINGIsSet() const
{
    return m_SHOPPING_RETARGETINGIsSet;
}

void TargetingSpec::unsetSHOPPING_RETARGETING()
{
    m_SHOPPING_RETARGETINGIsSet = false;
}
std::vector<utility::string_t>& TargetingSpec::getTARGETINGSTRATEGY()
{
    return m_TARGETING_STRATEGY;
}

void TargetingSpec::setTARGETINGSTRATEGY(const std::vector<utility::string_t>& value)
{
    m_TARGETING_STRATEGY = value;
    m_TARGETING_STRATEGYIsSet = true;
}

bool TargetingSpec::tARGETINGSTRATEGYIsSet() const
{
    return m_TARGETING_STRATEGYIsSet;
}

void TargetingSpec::unsetTARGETING_STRATEGY()
{
    m_TARGETING_STRATEGYIsSet = false;
}
}
}
}
}


