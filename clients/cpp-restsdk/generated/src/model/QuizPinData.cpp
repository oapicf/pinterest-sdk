/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/QuizPinData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



QuizPinData::QuizPinData()
{
    m_QuestionsIsSet = false;
    m_ResultsIsSet = false;
    m_Tie_breaker_type = utility::conversions::to_string_t("");
    m_Tie_breaker_typeIsSet = false;
    m_Tie_breaker_custom_resultIsSet = false;
}

QuizPinData::~QuizPinData()
{
}

void QuizPinData::validate()
{
    // TODO: implement validation
}

web::json::value QuizPinData::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_QuestionsIsSet)
    {
        val[utility::conversions::to_string_t(U("questions"))] = ModelBase::toJson(m_Questions);
    }
    if(m_ResultsIsSet)
    {
        val[utility::conversions::to_string_t(U("results"))] = ModelBase::toJson(m_Results);
    }
    if(m_Tie_breaker_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("tie_breaker_type"))] = ModelBase::toJson(m_Tie_breaker_type);
    }
    if(m_Tie_breaker_custom_resultIsSet)
    {
        val[utility::conversions::to_string_t(U("tie_breaker_custom_result"))] = ModelBase::toJson(m_Tie_breaker_custom_result);
    }

    return val;
}

bool QuizPinData::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("questions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("questions")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<QuizPinQuestion>> refVal_setQuestions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQuestions);
            setQuestions(refVal_setQuestions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("results"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("results")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<QuizPinResult>> refVal_setResults;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResults);
            setResults(refVal_setResults);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tie_breaker_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tie_breaker_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTieBreakerType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTieBreakerType);
            setTieBreakerType(refVal_setTieBreakerType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tie_breaker_custom_result"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tie_breaker_custom_result")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<QuizPinResult> refVal_setTieBreakerCustomResult;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTieBreakerCustomResult);
            setTieBreakerCustomResult(refVal_setTieBreakerCustomResult);
        }
    }
    return ok;
}

void QuizPinData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_QuestionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("questions")), m_Questions));
    }
    if(m_ResultsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("results")), m_Results));
    }
    if(m_Tie_breaker_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tie_breaker_type")), m_Tie_breaker_type));
    }
    if(m_Tie_breaker_custom_resultIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tie_breaker_custom_result")), m_Tie_breaker_custom_result));
    }
}

bool QuizPinData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("questions"))))
    {
        std::vector<std::shared_ptr<QuizPinQuestion>> refVal_setQuestions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("questions"))), refVal_setQuestions );
        setQuestions(refVal_setQuestions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("results"))))
    {
        std::vector<std::shared_ptr<QuizPinResult>> refVal_setResults;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("results"))), refVal_setResults );
        setResults(refVal_setResults);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tie_breaker_type"))))
    {
        utility::string_t refVal_setTieBreakerType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tie_breaker_type"))), refVal_setTieBreakerType );
        setTieBreakerType(refVal_setTieBreakerType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tie_breaker_custom_result"))))
    {
        std::shared_ptr<QuizPinResult> refVal_setTieBreakerCustomResult;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tie_breaker_custom_result"))), refVal_setTieBreakerCustomResult );
        setTieBreakerCustomResult(refVal_setTieBreakerCustomResult);
    }
    return ok;
}

std::vector<std::shared_ptr<QuizPinQuestion>>& QuizPinData::getQuestions()
{
    return m_Questions;
}

void QuizPinData::setQuestions(const std::vector<std::shared_ptr<QuizPinQuestion>>& value)
{
    m_Questions = value;
    m_QuestionsIsSet = true;
}

bool QuizPinData::questionsIsSet() const
{
    return m_QuestionsIsSet;
}

void QuizPinData::unsetQuestions()
{
    m_QuestionsIsSet = false;
}
std::vector<std::shared_ptr<QuizPinResult>>& QuizPinData::getResults()
{
    return m_Results;
}

void QuizPinData::setResults(const std::vector<std::shared_ptr<QuizPinResult>>& value)
{
    m_Results = value;
    m_ResultsIsSet = true;
}

bool QuizPinData::resultsIsSet() const
{
    return m_ResultsIsSet;
}

void QuizPinData::unsetResults()
{
    m_ResultsIsSet = false;
}
utility::string_t QuizPinData::getTieBreakerType() const
{
    return m_Tie_breaker_type;
}

void QuizPinData::setTieBreakerType(const utility::string_t& value)
{
    m_Tie_breaker_type = value;
    m_Tie_breaker_typeIsSet = true;
}

bool QuizPinData::tieBreakerTypeIsSet() const
{
    return m_Tie_breaker_typeIsSet;
}

void QuizPinData::unsetTie_breaker_type()
{
    m_Tie_breaker_typeIsSet = false;
}
std::shared_ptr<QuizPinResult> QuizPinData::getTieBreakerCustomResult() const
{
    return m_Tie_breaker_custom_result;
}

void QuizPinData::setTieBreakerCustomResult(const std::shared_ptr<QuizPinResult>& value)
{
    m_Tie_breaker_custom_result = value;
    m_Tie_breaker_custom_resultIsSet = true;
}

bool QuizPinData::tieBreakerCustomResultIsSet() const
{
    return m_Tie_breaker_custom_resultIsSet;
}

void QuizPinData::unsetTie_breaker_custom_result()
{
    m_Tie_breaker_custom_resultIsSet = false;
}
}
}
}
}


