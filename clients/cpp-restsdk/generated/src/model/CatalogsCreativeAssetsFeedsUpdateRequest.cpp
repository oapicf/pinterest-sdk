/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CatalogsCreativeAssetsFeedsUpdateRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CatalogsCreativeAssetsFeedsUpdateRequest::CatalogsCreativeAssetsFeedsUpdateRequest()
{
    m_Default_currencyIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_FormatIsSet = false;
    m_CredentialsIsSet = false;
    m_Location = utility::conversions::to_string_t("");
    m_LocationIsSet = false;
    m_Preferred_processing_scheduleIsSet = false;
    m_StatusIsSet = false;
    m_Catalog_typeIsSet = false;
}

CatalogsCreativeAssetsFeedsUpdateRequest::~CatalogsCreativeAssetsFeedsUpdateRequest()
{
}

void CatalogsCreativeAssetsFeedsUpdateRequest::validate()
{
    // TODO: implement validation
}

web::json::value CatalogsCreativeAssetsFeedsUpdateRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Default_currencyIsSet)
    {
        val[utility::conversions::to_string_t(U("default_currency"))] = ModelBase::toJson(m_Default_currency);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_FormatIsSet)
    {
        val[utility::conversions::to_string_t(U("format"))] = ModelBase::toJson(m_Format);
    }
    if(m_CredentialsIsSet)
    {
        val[utility::conversions::to_string_t(U("credentials"))] = ModelBase::toJson(m_Credentials);
    }
    if(m_LocationIsSet)
    {
        val[utility::conversions::to_string_t(U("location"))] = ModelBase::toJson(m_Location);
    }
    if(m_Preferred_processing_scheduleIsSet)
    {
        val[utility::conversions::to_string_t(U("preferred_processing_schedule"))] = ModelBase::toJson(m_Preferred_processing_schedule);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_Catalog_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("catalog_type"))] = ModelBase::toJson(m_Catalog_type);
    }

    return val;
}

bool CatalogsCreativeAssetsFeedsUpdateRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("default_currency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("default_currency")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<NullableCurrency> refVal_setDefaultCurrency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDefaultCurrency);
            setDefaultCurrency(refVal_setDefaultCurrency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("format"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("format")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsFormat> refVal_setFormat;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFormat);
            setFormat(refVal_setFormat);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("credentials"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("credentials")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsFeedCredentials> refVal_setCredentials;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCredentials);
            setCredentials(refVal_setCredentials);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("location"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("location")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLocation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLocation);
            setLocation(refVal_setLocation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("preferred_processing_schedule"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("preferred_processing_schedule")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsFeedProcessingSchedule> refVal_setPreferredProcessingSchedule;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPreferredProcessingSchedule);
            setPreferredProcessingSchedule(refVal_setPreferredProcessingSchedule);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsStatus> refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("catalog_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("catalog_type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsType> refVal_setCatalogType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCatalogType);
            setCatalogType(refVal_setCatalogType);
        }
    }
    return ok;
}

void CatalogsCreativeAssetsFeedsUpdateRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Default_currencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("default_currency")), m_Default_currency));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_FormatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("format")), m_Format));
    }
    if(m_CredentialsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("credentials")), m_Credentials));
    }
    if(m_LocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("location")), m_Location));
    }
    if(m_Preferred_processing_scheduleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("preferred_processing_schedule")), m_Preferred_processing_schedule));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_Catalog_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("catalog_type")), m_Catalog_type));
    }
}

bool CatalogsCreativeAssetsFeedsUpdateRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("default_currency"))))
    {
        std::shared_ptr<NullableCurrency> refVal_setDefaultCurrency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("default_currency"))), refVal_setDefaultCurrency );
        setDefaultCurrency(refVal_setDefaultCurrency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("format"))))
    {
        std::shared_ptr<CatalogsFormat> refVal_setFormat;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("format"))), refVal_setFormat );
        setFormat(refVal_setFormat);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("credentials"))))
    {
        std::shared_ptr<CatalogsFeedCredentials> refVal_setCredentials;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("credentials"))), refVal_setCredentials );
        setCredentials(refVal_setCredentials);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("location"))))
    {
        utility::string_t refVal_setLocation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("location"))), refVal_setLocation );
        setLocation(refVal_setLocation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("preferred_processing_schedule"))))
    {
        std::shared_ptr<CatalogsFeedProcessingSchedule> refVal_setPreferredProcessingSchedule;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("preferred_processing_schedule"))), refVal_setPreferredProcessingSchedule );
        setPreferredProcessingSchedule(refVal_setPreferredProcessingSchedule);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<CatalogsStatus> refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("catalog_type"))))
    {
        std::shared_ptr<CatalogsType> refVal_setCatalogType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("catalog_type"))), refVal_setCatalogType );
        setCatalogType(refVal_setCatalogType);
    }
    return ok;
}

std::shared_ptr<NullableCurrency> CatalogsCreativeAssetsFeedsUpdateRequest::getDefaultCurrency() const
{
    return m_Default_currency;
}

void CatalogsCreativeAssetsFeedsUpdateRequest::setDefaultCurrency(const std::shared_ptr<NullableCurrency>& value)
{
    m_Default_currency = value;
    m_Default_currencyIsSet = true;
}

bool CatalogsCreativeAssetsFeedsUpdateRequest::defaultCurrencyIsSet() const
{
    return m_Default_currencyIsSet;
}

void CatalogsCreativeAssetsFeedsUpdateRequest::unsetDefault_currency()
{
    m_Default_currencyIsSet = false;
}
utility::string_t CatalogsCreativeAssetsFeedsUpdateRequest::getName() const
{
    return m_Name;
}

void CatalogsCreativeAssetsFeedsUpdateRequest::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool CatalogsCreativeAssetsFeedsUpdateRequest::nameIsSet() const
{
    return m_NameIsSet;
}

void CatalogsCreativeAssetsFeedsUpdateRequest::unsetName()
{
    m_NameIsSet = false;
}
std::shared_ptr<CatalogsFormat> CatalogsCreativeAssetsFeedsUpdateRequest::getFormat() const
{
    return m_Format;
}

void CatalogsCreativeAssetsFeedsUpdateRequest::setFormat(const std::shared_ptr<CatalogsFormat>& value)
{
    m_Format = value;
    m_FormatIsSet = true;
}

bool CatalogsCreativeAssetsFeedsUpdateRequest::formatIsSet() const
{
    return m_FormatIsSet;
}

void CatalogsCreativeAssetsFeedsUpdateRequest::unsetFormat()
{
    m_FormatIsSet = false;
}
std::shared_ptr<CatalogsFeedCredentials> CatalogsCreativeAssetsFeedsUpdateRequest::getCredentials() const
{
    return m_Credentials;
}

void CatalogsCreativeAssetsFeedsUpdateRequest::setCredentials(const std::shared_ptr<CatalogsFeedCredentials>& value)
{
    m_Credentials = value;
    m_CredentialsIsSet = true;
}

bool CatalogsCreativeAssetsFeedsUpdateRequest::credentialsIsSet() const
{
    return m_CredentialsIsSet;
}

void CatalogsCreativeAssetsFeedsUpdateRequest::unsetCredentials()
{
    m_CredentialsIsSet = false;
}
utility::string_t CatalogsCreativeAssetsFeedsUpdateRequest::getLocation() const
{
    return m_Location;
}

void CatalogsCreativeAssetsFeedsUpdateRequest::setLocation(const utility::string_t& value)
{
    m_Location = value;
    m_LocationIsSet = true;
}

bool CatalogsCreativeAssetsFeedsUpdateRequest::locationIsSet() const
{
    return m_LocationIsSet;
}

void CatalogsCreativeAssetsFeedsUpdateRequest::unsetLocation()
{
    m_LocationIsSet = false;
}
std::shared_ptr<CatalogsFeedProcessingSchedule> CatalogsCreativeAssetsFeedsUpdateRequest::getPreferredProcessingSchedule() const
{
    return m_Preferred_processing_schedule;
}

void CatalogsCreativeAssetsFeedsUpdateRequest::setPreferredProcessingSchedule(const std::shared_ptr<CatalogsFeedProcessingSchedule>& value)
{
    m_Preferred_processing_schedule = value;
    m_Preferred_processing_scheduleIsSet = true;
}

bool CatalogsCreativeAssetsFeedsUpdateRequest::preferredProcessingScheduleIsSet() const
{
    return m_Preferred_processing_scheduleIsSet;
}

void CatalogsCreativeAssetsFeedsUpdateRequest::unsetPreferred_processing_schedule()
{
    m_Preferred_processing_scheduleIsSet = false;
}
std::shared_ptr<CatalogsStatus> CatalogsCreativeAssetsFeedsUpdateRequest::getStatus() const
{
    return m_Status;
}

void CatalogsCreativeAssetsFeedsUpdateRequest::setStatus(const std::shared_ptr<CatalogsStatus>& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool CatalogsCreativeAssetsFeedsUpdateRequest::statusIsSet() const
{
    return m_StatusIsSet;
}

void CatalogsCreativeAssetsFeedsUpdateRequest::unsetStatus()
{
    m_StatusIsSet = false;
}
std::shared_ptr<CatalogsType> CatalogsCreativeAssetsFeedsUpdateRequest::getCatalogType() const
{
    return m_Catalog_type;
}

void CatalogsCreativeAssetsFeedsUpdateRequest::setCatalogType(const std::shared_ptr<CatalogsType>& value)
{
    m_Catalog_type = value;
    m_Catalog_typeIsSet = true;
}

bool CatalogsCreativeAssetsFeedsUpdateRequest::catalogTypeIsSet() const
{
    return m_Catalog_typeIsSet;
}

void CatalogsCreativeAssetsFeedsUpdateRequest::unsetCatalog_type()
{
    m_Catalog_typeIsSet = false;
}
}
}
}
}


