/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CancelInvitesBody.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CancelInvitesBody::CancelInvitesBody()
{
    m_Invite_idsIsSet = false;
}

CancelInvitesBody::~CancelInvitesBody()
{
}

void CancelInvitesBody::validate()
{
    // TODO: implement validation
}

web::json::value CancelInvitesBody::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Invite_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("invite_ids"))] = ModelBase::toJson(m_Invite_ids);
    }

    return val;
}

bool CancelInvitesBody::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("invite_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("invite_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setInviteIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInviteIds);
            setInviteIds(refVal_setInviteIds);
        }
    }
    return ok;
}

void CancelInvitesBody::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Invite_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("invite_ids")), m_Invite_ids));
    }
}

bool CancelInvitesBody::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("invite_ids"))))
    {
        std::vector<utility::string_t> refVal_setInviteIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("invite_ids"))), refVal_setInviteIds );
        setInviteIds(refVal_setInviteIds);
    }
    return ok;
}

std::vector<utility::string_t>& CancelInvitesBody::getInviteIds()
{
    return m_Invite_ids;
}

void CancelInvitesBody::setInviteIds(const std::vector<utility::string_t>& value)
{
    m_Invite_ids = value;
    m_Invite_idsIsSet = true;
}

bool CancelInvitesBody::inviteIdsIsSet() const
{
    return m_Invite_idsIsSet;
}

void CancelInvitesBody::unsetInvite_ids()
{
    m_Invite_idsIsSet = false;
}
}
}
}
}


