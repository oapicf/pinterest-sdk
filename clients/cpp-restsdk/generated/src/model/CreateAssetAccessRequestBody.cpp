/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateAssetAccessRequestBody.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CreateAssetAccessRequestBody::CreateAssetAccessRequestBody()
{
    m_Asset_requestsIsSet = false;
}

CreateAssetAccessRequestBody::~CreateAssetAccessRequestBody()
{
}

void CreateAssetAccessRequestBody::validate()
{
    // TODO: implement validation
}

web::json::value CreateAssetAccessRequestBody::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Asset_requestsIsSet)
    {
        val[utility::conversions::to_string_t(U("asset_requests"))] = ModelBase::toJson(m_Asset_requests);
    }

    return val;
}

bool CreateAssetAccessRequestBody::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("asset_requests"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("asset_requests")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<CreateAssetAccessRequestBody_asset_requests_inner>> refVal_setAssetRequests;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetRequests);
            setAssetRequests(refVal_setAssetRequests);
        }
    }
    return ok;
}

void CreateAssetAccessRequestBody::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Asset_requestsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("asset_requests")), m_Asset_requests));
    }
}

bool CreateAssetAccessRequestBody::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("asset_requests"))))
    {
        std::vector<std::shared_ptr<CreateAssetAccessRequestBody_asset_requests_inner>> refVal_setAssetRequests;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("asset_requests"))), refVal_setAssetRequests );
        setAssetRequests(refVal_setAssetRequests);
    }
    return ok;
}

std::vector<std::shared_ptr<CreateAssetAccessRequestBody_asset_requests_inner>>& CreateAssetAccessRequestBody::getAssetRequests()
{
    return m_Asset_requests;
}

void CreateAssetAccessRequestBody::setAssetRequests(const std::vector<std::shared_ptr<CreateAssetAccessRequestBody_asset_requests_inner>>& value)
{
    m_Asset_requests = value;
    m_Asset_requestsIsSet = true;
}

bool CreateAssetAccessRequestBody::assetRequestsIsSet() const
{
    return m_Asset_requestsIsSet;
}

void CreateAssetAccessRequestBody::unsetAsset_requests()
{
    m_Asset_requestsIsSet = false;
}
}
}
}
}


