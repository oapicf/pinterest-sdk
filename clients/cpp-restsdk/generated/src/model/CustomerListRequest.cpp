/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CustomerListRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CustomerListRequest::CustomerListRequest()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Records = utility::conversions::to_string_t("");
    m_RecordsIsSet = false;
    m_List_typeIsSet = false;
    m_ExceptionsIsSet = false;
}

CustomerListRequest::~CustomerListRequest()
{
}

void CustomerListRequest::validate()
{
    // TODO: implement validation
}

web::json::value CustomerListRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_RecordsIsSet)
    {
        val[utility::conversions::to_string_t(U("records"))] = ModelBase::toJson(m_Records);
    }
    if(m_List_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("list_type"))] = ModelBase::toJson(m_List_type);
    }
    if(m_ExceptionsIsSet)
    {
        val[utility::conversions::to_string_t(U("exceptions"))] = ModelBase::toJson(m_Exceptions);
    }

    return val;
}

bool CustomerListRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("records"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("records")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRecords;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecords);
            setRecords(refVal_setRecords);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("list_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("list_type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UserListType> refVal_setListType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setListType);
            setListType(refVal_setListType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("exceptions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exceptions")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setExceptions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExceptions);
            setExceptions(refVal_setExceptions);
        }
    }
    return ok;
}

void CustomerListRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_RecordsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("records")), m_Records));
    }
    if(m_List_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("list_type")), m_List_type));
    }
    if(m_ExceptionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exceptions")), m_Exceptions));
    }
}

bool CustomerListRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("records"))))
    {
        utility::string_t refVal_setRecords;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("records"))), refVal_setRecords );
        setRecords(refVal_setRecords);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("list_type"))))
    {
        std::shared_ptr<UserListType> refVal_setListType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("list_type"))), refVal_setListType );
        setListType(refVal_setListType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("exceptions"))))
    {
        std::shared_ptr<Object> refVal_setExceptions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exceptions"))), refVal_setExceptions );
        setExceptions(refVal_setExceptions);
    }
    return ok;
}

utility::string_t CustomerListRequest::getName() const
{
    return m_Name;
}

void CustomerListRequest::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool CustomerListRequest::nameIsSet() const
{
    return m_NameIsSet;
}

void CustomerListRequest::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t CustomerListRequest::getRecords() const
{
    return m_Records;
}

void CustomerListRequest::setRecords(const utility::string_t& value)
{
    m_Records = value;
    m_RecordsIsSet = true;
}

bool CustomerListRequest::recordsIsSet() const
{
    return m_RecordsIsSet;
}

void CustomerListRequest::unsetRecords()
{
    m_RecordsIsSet = false;
}
std::shared_ptr<UserListType> CustomerListRequest::getListType() const
{
    return m_List_type;
}

void CustomerListRequest::setListType(const std::shared_ptr<UserListType>& value)
{
    m_List_type = value;
    m_List_typeIsSet = true;
}

bool CustomerListRequest::listTypeIsSet() const
{
    return m_List_typeIsSet;
}

void CustomerListRequest::unsetList_type()
{
    m_List_typeIsSet = false;
}
std::shared_ptr<Object> CustomerListRequest::getExceptions() const
{
    return m_Exceptions;
}

void CustomerListRequest::setExceptions(const std::shared_ptr<Object>& value)
{
    m_Exceptions = value;
    m_ExceptionsIsSet = true;
}

bool CustomerListRequest::exceptionsIsSet() const
{
    return m_ExceptionsIsSet;
}

void CustomerListRequest::unsetExceptions()
{
    m_ExceptionsIsSet = false;
}
}
}
}
}


