/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/OauthAccessTokenResponse.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OauthAccessTokenResponse::OauthAccessTokenResponse()
{
    m_Response_type = utility::conversions::to_string_t("");
    m_Response_typeIsSet = false;
    m_Access_token = utility::conversions::to_string_t("");
    m_Access_tokenIsSet = false;
    m_Token_type = utility::conversions::to_string_t("");
    m_Token_typeIsSet = false;
    m_Expires_in = 0;
    m_Expires_inIsSet = false;
    m_Scope = utility::conversions::to_string_t("");
    m_ScopeIsSet = false;
}

OauthAccessTokenResponse::~OauthAccessTokenResponse()
{
}

void OauthAccessTokenResponse::validate()
{
    // TODO: implement validation
}

web::json::value OauthAccessTokenResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Response_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("response_type"))] = ModelBase::toJson(m_Response_type);
    }
    if(m_Access_tokenIsSet)
    {
        val[utility::conversions::to_string_t(U("access_token"))] = ModelBase::toJson(m_Access_token);
    }
    if(m_Token_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("token_type"))] = ModelBase::toJson(m_Token_type);
    }
    if(m_Expires_inIsSet)
    {
        val[utility::conversions::to_string_t(U("expires_in"))] = ModelBase::toJson(m_Expires_in);
    }
    if(m_ScopeIsSet)
    {
        val[utility::conversions::to_string_t(U("scope"))] = ModelBase::toJson(m_Scope);
    }

    return val;
}

bool OauthAccessTokenResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("response_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("response_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setResponseType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResponseType);
            setResponseType(refVal_setResponseType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("access_token"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("access_token")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAccessToken;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccessToken);
            setAccessToken(refVal_setAccessToken);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("token_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("token_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTokenType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTokenType);
            setTokenType(refVal_setTokenType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expires_in"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expires_in")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setExpiresIn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpiresIn);
            setExpiresIn(refVal_setExpiresIn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("scope"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("scope")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setScope;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScope);
            setScope(refVal_setScope);
        }
    }
    return ok;
}

void OauthAccessTokenResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Response_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("response_type")), m_Response_type));
    }
    if(m_Access_tokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("access_token")), m_Access_token));
    }
    if(m_Token_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("token_type")), m_Token_type));
    }
    if(m_Expires_inIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expires_in")), m_Expires_in));
    }
    if(m_ScopeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("scope")), m_Scope));
    }
}

bool OauthAccessTokenResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("response_type"))))
    {
        utility::string_t refVal_setResponseType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("response_type"))), refVal_setResponseType );
        setResponseType(refVal_setResponseType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("access_token"))))
    {
        utility::string_t refVal_setAccessToken;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("access_token"))), refVal_setAccessToken );
        setAccessToken(refVal_setAccessToken);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("token_type"))))
    {
        utility::string_t refVal_setTokenType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("token_type"))), refVal_setTokenType );
        setTokenType(refVal_setTokenType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expires_in"))))
    {
        int32_t refVal_setExpiresIn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expires_in"))), refVal_setExpiresIn );
        setExpiresIn(refVal_setExpiresIn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("scope"))))
    {
        utility::string_t refVal_setScope;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("scope"))), refVal_setScope );
        setScope(refVal_setScope);
    }
    return ok;
}

utility::string_t OauthAccessTokenResponse::getResponseType() const
{
    return m_Response_type;
}

void OauthAccessTokenResponse::setResponseType(const utility::string_t& value)
{
    m_Response_type = value;
    m_Response_typeIsSet = true;
}

bool OauthAccessTokenResponse::responseTypeIsSet() const
{
    return m_Response_typeIsSet;
}

void OauthAccessTokenResponse::unsetResponse_type()
{
    m_Response_typeIsSet = false;
}
utility::string_t OauthAccessTokenResponse::getAccessToken() const
{
    return m_Access_token;
}

void OauthAccessTokenResponse::setAccessToken(const utility::string_t& value)
{
    m_Access_token = value;
    m_Access_tokenIsSet = true;
}

bool OauthAccessTokenResponse::accessTokenIsSet() const
{
    return m_Access_tokenIsSet;
}

void OauthAccessTokenResponse::unsetAccess_token()
{
    m_Access_tokenIsSet = false;
}
utility::string_t OauthAccessTokenResponse::getTokenType() const
{
    return m_Token_type;
}

void OauthAccessTokenResponse::setTokenType(const utility::string_t& value)
{
    m_Token_type = value;
    m_Token_typeIsSet = true;
}

bool OauthAccessTokenResponse::tokenTypeIsSet() const
{
    return m_Token_typeIsSet;
}

void OauthAccessTokenResponse::unsetToken_type()
{
    m_Token_typeIsSet = false;
}
int32_t OauthAccessTokenResponse::getExpiresIn() const
{
    return m_Expires_in;
}

void OauthAccessTokenResponse::setExpiresIn(int32_t value)
{
    m_Expires_in = value;
    m_Expires_inIsSet = true;
}

bool OauthAccessTokenResponse::expiresInIsSet() const
{
    return m_Expires_inIsSet;
}

void OauthAccessTokenResponse::unsetExpires_in()
{
    m_Expires_inIsSet = false;
}
utility::string_t OauthAccessTokenResponse::getScope() const
{
    return m_Scope;
}

void OauthAccessTokenResponse::setScope(const utility::string_t& value)
{
    m_Scope = value;
    m_ScopeIsSet = true;
}

bool OauthAccessTokenResponse::scopeIsSet() const
{
    return m_ScopeIsSet;
}

void OauthAccessTokenResponse::unsetScope()
{
    m_ScopeIsSet = false;
}
}
}
}
}


