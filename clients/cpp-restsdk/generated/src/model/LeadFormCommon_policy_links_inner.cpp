/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/LeadFormCommon_policy_links_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



LeadFormCommon_policy_links_inner::LeadFormCommon_policy_links_inner()
{
    m_Label = utility::conversions::to_string_t("");
    m_LabelIsSet = false;
    m_Link = utility::conversions::to_string_t("");
    m_LinkIsSet = false;
}

LeadFormCommon_policy_links_inner::~LeadFormCommon_policy_links_inner()
{
}

void LeadFormCommon_policy_links_inner::validate()
{
    // TODO: implement validation
}

web::json::value LeadFormCommon_policy_links_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_LabelIsSet)
    {
        val[utility::conversions::to_string_t(U("label"))] = ModelBase::toJson(m_Label);
    }
    if(m_LinkIsSet)
    {
        val[utility::conversions::to_string_t(U("link"))] = ModelBase::toJson(m_Link);
    }

    return val;
}

bool LeadFormCommon_policy_links_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("label"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("label")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLabel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLabel);
            setLabel(refVal_setLabel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("link"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("link")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLink;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLink);
            setLink(refVal_setLink);
        }
    }
    return ok;
}

void LeadFormCommon_policy_links_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_LabelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("label")), m_Label));
    }
    if(m_LinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("link")), m_Link));
    }
}

bool LeadFormCommon_policy_links_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("label"))))
    {
        utility::string_t refVal_setLabel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("label"))), refVal_setLabel );
        setLabel(refVal_setLabel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("link"))))
    {
        utility::string_t refVal_setLink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("link"))), refVal_setLink );
        setLink(refVal_setLink);
    }
    return ok;
}

utility::string_t LeadFormCommon_policy_links_inner::getLabel() const
{
    return m_Label;
}

void LeadFormCommon_policy_links_inner::setLabel(const utility::string_t& value)
{
    m_Label = value;
    m_LabelIsSet = true;
}

bool LeadFormCommon_policy_links_inner::labelIsSet() const
{
    return m_LabelIsSet;
}

void LeadFormCommon_policy_links_inner::unsetLabel()
{
    m_LabelIsSet = false;
}
utility::string_t LeadFormCommon_policy_links_inner::getLink() const
{
    return m_Link;
}

void LeadFormCommon_policy_links_inner::setLink(const utility::string_t& value)
{
    m_Link = value;
    m_LinkIsSet = true;
}

bool LeadFormCommon_policy_links_inner::linkIsSet() const
{
    return m_LinkIsSet;
}

void LeadFormCommon_policy_links_inner::unsetLink()
{
    m_LinkIsSet = false;
}
}
}
}
}


