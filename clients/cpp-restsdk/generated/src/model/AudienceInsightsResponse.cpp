/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AudienceInsightsResponse.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AudienceInsightsResponse::AudienceInsightsResponse()
{
    m_CategoriesIsSet = false;
    m_DemographicsIsSet = false;
    m_TypeIsSet = false;
    m_date = utility::conversions::to_string_t("");
    m_dateIsSet = false;
    m_Size = 0;
    m_SizeIsSet = false;
    m_Size_is_upper_bound = false;
    m_Size_is_upper_boundIsSet = false;
}

AudienceInsightsResponse::~AudienceInsightsResponse()
{
}

void AudienceInsightsResponse::validate()
{
    // TODO: implement validation
}

web::json::value AudienceInsightsResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CategoriesIsSet)
    {
        val[utility::conversions::to_string_t(U("categories"))] = ModelBase::toJson(m_Categories);
    }
    if(m_DemographicsIsSet)
    {
        val[utility::conversions::to_string_t(U("demographics"))] = ModelBase::toJson(m_Demographics);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_dateIsSet)
    {
        val[utility::conversions::to_string_t(U("date"))] = ModelBase::toJson(m_date);
    }
    if(m_SizeIsSet)
    {
        val[utility::conversions::to_string_t(U("size"))] = ModelBase::toJson(m_Size);
    }
    if(m_Size_is_upper_boundIsSet)
    {
        val[utility::conversions::to_string_t(U("size_is_upper_bound"))] = ModelBase::toJson(m_Size_is_upper_bound);
    }

    return val;
}

bool AudienceInsightsResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("categories"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("categories")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<AudienceCategory>> refVal_setCategories;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCategories);
            setCategories(refVal_setCategories);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("demographics"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("demographics")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AudienceDemographics> refVal_setDemographics;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDemographics);
            setDemographics(refVal_setDemographics);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AudienceInsightType> refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("date")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDate);
            setDate(refVal_setDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("size")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSize);
            setSize(refVal_setSize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("size_is_upper_bound"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("size_is_upper_bound")));
        if(!fieldValue.is_null())
        {
            bool refVal_setSizeIsUpperBound;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSizeIsUpperBound);
            setSizeIsUpperBound(refVal_setSizeIsUpperBound);
        }
    }
    return ok;
}

void AudienceInsightsResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CategoriesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("categories")), m_Categories));
    }
    if(m_DemographicsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("demographics")), m_Demographics));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("date")), m_date));
    }
    if(m_SizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("size")), m_Size));
    }
    if(m_Size_is_upper_boundIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("size_is_upper_bound")), m_Size_is_upper_bound));
    }
}

bool AudienceInsightsResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("categories"))))
    {
        std::vector<std::shared_ptr<AudienceCategory>> refVal_setCategories;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("categories"))), refVal_setCategories );
        setCategories(refVal_setCategories);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("demographics"))))
    {
        std::shared_ptr<AudienceDemographics> refVal_setDemographics;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("demographics"))), refVal_setDemographics );
        setDemographics(refVal_setDemographics);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        std::shared_ptr<AudienceInsightType> refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("date"))))
    {
        utility::string_t refVal_setDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("date"))), refVal_setDate );
        setDate(refVal_setDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("size"))))
    {
        int32_t refVal_setSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("size"))), refVal_setSize );
        setSize(refVal_setSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("size_is_upper_bound"))))
    {
        bool refVal_setSizeIsUpperBound;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("size_is_upper_bound"))), refVal_setSizeIsUpperBound );
        setSizeIsUpperBound(refVal_setSizeIsUpperBound);
    }
    return ok;
}

std::vector<std::shared_ptr<AudienceCategory>>& AudienceInsightsResponse::getCategories()
{
    return m_Categories;
}

void AudienceInsightsResponse::setCategories(const std::vector<std::shared_ptr<AudienceCategory>>& value)
{
    m_Categories = value;
    m_CategoriesIsSet = true;
}

bool AudienceInsightsResponse::categoriesIsSet() const
{
    return m_CategoriesIsSet;
}

void AudienceInsightsResponse::unsetCategories()
{
    m_CategoriesIsSet = false;
}
std::shared_ptr<AudienceDemographics> AudienceInsightsResponse::getDemographics() const
{
    return m_Demographics;
}

void AudienceInsightsResponse::setDemographics(const std::shared_ptr<AudienceDemographics>& value)
{
    m_Demographics = value;
    m_DemographicsIsSet = true;
}

bool AudienceInsightsResponse::demographicsIsSet() const
{
    return m_DemographicsIsSet;
}

void AudienceInsightsResponse::unsetDemographics()
{
    m_DemographicsIsSet = false;
}
std::shared_ptr<AudienceInsightType> AudienceInsightsResponse::getType() const
{
    return m_Type;
}

void AudienceInsightsResponse::setType(const std::shared_ptr<AudienceInsightType>& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool AudienceInsightsResponse::typeIsSet() const
{
    return m_TypeIsSet;
}

void AudienceInsightsResponse::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t AudienceInsightsResponse::getDate() const
{
    return m_date;
}

void AudienceInsightsResponse::setDate(const utility::string_t& value)
{
    m_date = value;
    m_dateIsSet = true;
}

bool AudienceInsightsResponse::dateIsSet() const
{
    return m_dateIsSet;
}

void AudienceInsightsResponse::unsetdate()
{
    m_dateIsSet = false;
}
int32_t AudienceInsightsResponse::getSize() const
{
    return m_Size;
}

void AudienceInsightsResponse::setSize(int32_t value)
{
    m_Size = value;
    m_SizeIsSet = true;
}

bool AudienceInsightsResponse::sizeIsSet() const
{
    return m_SizeIsSet;
}

void AudienceInsightsResponse::unsetSize()
{
    m_SizeIsSet = false;
}
bool AudienceInsightsResponse::isSizeIsUpperBound() const
{
    return m_Size_is_upper_bound;
}

void AudienceInsightsResponse::setSizeIsUpperBound(bool value)
{
    m_Size_is_upper_bound = value;
    m_Size_is_upper_boundIsSet = true;
}

bool AudienceInsightsResponse::sizeIsUpperBoundIsSet() const
{
    return m_Size_is_upper_boundIsSet;
}

void AudienceInsightsResponse::unsetSize_is_upper_bound()
{
    m_Size_is_upper_boundIsSet = false;
}
}
}
}
}


