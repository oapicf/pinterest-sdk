/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ConversionApiResponse_events_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ConversionApiResponse_events_inner::ConversionApiResponse_events_inner()
{
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_Error_message = utility::conversions::to_string_t("");
    m_Error_messageIsSet = false;
    m_Warning_message = utility::conversions::to_string_t("");
    m_Warning_messageIsSet = false;
}

ConversionApiResponse_events_inner::~ConversionApiResponse_events_inner()
{
}

void ConversionApiResponse_events_inner::validate()
{
    // TODO: implement validation
}

web::json::value ConversionApiResponse_events_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_Error_messageIsSet)
    {
        val[utility::conversions::to_string_t(U("error_message"))] = ModelBase::toJson(m_Error_message);
    }
    if(m_Warning_messageIsSet)
    {
        val[utility::conversions::to_string_t(U("warning_message"))] = ModelBase::toJson(m_Warning_message);
    }

    return val;
}

bool ConversionApiResponse_events_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("error_message"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("error_message")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setErrorMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setErrorMessage);
            setErrorMessage(refVal_setErrorMessage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("warning_message"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("warning_message")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWarningMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWarningMessage);
            setWarningMessage(refVal_setWarningMessage);
        }
    }
    return ok;
}

void ConversionApiResponse_events_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_Error_messageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("error_message")), m_Error_message));
    }
    if(m_Warning_messageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("warning_message")), m_Warning_message));
    }
}

bool ConversionApiResponse_events_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("error_message"))))
    {
        utility::string_t refVal_setErrorMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("error_message"))), refVal_setErrorMessage );
        setErrorMessage(refVal_setErrorMessage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("warning_message"))))
    {
        utility::string_t refVal_setWarningMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("warning_message"))), refVal_setWarningMessage );
        setWarningMessage(refVal_setWarningMessage);
    }
    return ok;
}

utility::string_t ConversionApiResponse_events_inner::getStatus() const
{
    return m_Status;
}

void ConversionApiResponse_events_inner::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool ConversionApiResponse_events_inner::statusIsSet() const
{
    return m_StatusIsSet;
}

void ConversionApiResponse_events_inner::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::string_t ConversionApiResponse_events_inner::getErrorMessage() const
{
    return m_Error_message;
}

void ConversionApiResponse_events_inner::setErrorMessage(const utility::string_t& value)
{
    m_Error_message = value;
    m_Error_messageIsSet = true;
}

bool ConversionApiResponse_events_inner::errorMessageIsSet() const
{
    return m_Error_messageIsSet;
}

void ConversionApiResponse_events_inner::unsetError_message()
{
    m_Error_messageIsSet = false;
}
utility::string_t ConversionApiResponse_events_inner::getWarningMessage() const
{
    return m_Warning_message;
}

void ConversionApiResponse_events_inner::setWarningMessage(const utility::string_t& value)
{
    m_Warning_message = value;
    m_Warning_messageIsSet = true;
}

bool ConversionApiResponse_events_inner::warningMessageIsSet() const
{
    return m_Warning_messageIsSet;
}

void ConversionApiResponse_events_inner::unsetWarning_message()
{
    m_Warning_messageIsSet = false;
}
}
}
}
}


