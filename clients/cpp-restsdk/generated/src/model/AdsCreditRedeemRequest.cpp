/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AdsCreditRedeemRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AdsCreditRedeemRequest::AdsCreditRedeemRequest()
{
    m_OfferCodeHash = utility::conversions::to_string_t("");
    m_OfferCodeHashIsSet = false;
    m_ValidateOnly = false;
    m_ValidateOnlyIsSet = false;
}

AdsCreditRedeemRequest::~AdsCreditRedeemRequest()
{
}

void AdsCreditRedeemRequest::validate()
{
    // TODO: implement validation
}

web::json::value AdsCreditRedeemRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_OfferCodeHashIsSet)
    {
        val[utility::conversions::to_string_t(U("offerCodeHash"))] = ModelBase::toJson(m_OfferCodeHash);
    }
    if(m_ValidateOnlyIsSet)
    {
        val[utility::conversions::to_string_t(U("validateOnly"))] = ModelBase::toJson(m_ValidateOnly);
    }

    return val;
}

bool AdsCreditRedeemRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("offerCodeHash"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("offerCodeHash")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOfferCodeHash;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOfferCodeHash);
            setOfferCodeHash(refVal_setOfferCodeHash);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("validateOnly"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("validateOnly")));
        if(!fieldValue.is_null())
        {
            bool refVal_setValidateOnly;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValidateOnly);
            setValidateOnly(refVal_setValidateOnly);
        }
    }
    return ok;
}

void AdsCreditRedeemRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_OfferCodeHashIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("offerCodeHash")), m_OfferCodeHash));
    }
    if(m_ValidateOnlyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("validateOnly")), m_ValidateOnly));
    }
}

bool AdsCreditRedeemRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("offerCodeHash"))))
    {
        utility::string_t refVal_setOfferCodeHash;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("offerCodeHash"))), refVal_setOfferCodeHash );
        setOfferCodeHash(refVal_setOfferCodeHash);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("validateOnly"))))
    {
        bool refVal_setValidateOnly;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("validateOnly"))), refVal_setValidateOnly );
        setValidateOnly(refVal_setValidateOnly);
    }
    return ok;
}

utility::string_t AdsCreditRedeemRequest::getOfferCodeHash() const
{
    return m_OfferCodeHash;
}

void AdsCreditRedeemRequest::setOfferCodeHash(const utility::string_t& value)
{
    m_OfferCodeHash = value;
    m_OfferCodeHashIsSet = true;
}

bool AdsCreditRedeemRequest::offerCodeHashIsSet() const
{
    return m_OfferCodeHashIsSet;
}

void AdsCreditRedeemRequest::unsetOfferCodeHash()
{
    m_OfferCodeHashIsSet = false;
}
bool AdsCreditRedeemRequest::isValidateOnly() const
{
    return m_ValidateOnly;
}

void AdsCreditRedeemRequest::setValidateOnly(bool value)
{
    m_ValidateOnly = value;
    m_ValidateOnlyIsSet = true;
}

bool AdsCreditRedeemRequest::validateOnlyIsSet() const
{
    return m_ValidateOnlyIsSet;
}

void AdsCreditRedeemRequest::unsetValidateOnly()
{
    m_ValidateOnlyIsSet = false;
}
}
}
}
}


