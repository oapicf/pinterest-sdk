/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/UpdateMemberBusinessRoleBody.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



UpdateMemberBusinessRoleBody::UpdateMemberBusinessRoleBody()
{
    m_Business_roleIsSet = false;
    m_Member_id = utility::conversions::to_string_t("");
    m_Member_idIsSet = false;
}

UpdateMemberBusinessRoleBody::~UpdateMemberBusinessRoleBody()
{
}

void UpdateMemberBusinessRoleBody::validate()
{
    // TODO: implement validation
}

web::json::value UpdateMemberBusinessRoleBody::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Business_roleIsSet)
    {
        val[utility::conversions::to_string_t(U("business_role"))] = ModelBase::toJson(m_Business_role);
    }
    if(m_Member_idIsSet)
    {
        val[utility::conversions::to_string_t(U("member_id"))] = ModelBase::toJson(m_Member_id);
    }

    return val;
}

bool UpdateMemberBusinessRoleBody::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("business_role"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("business_role")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BusinessRoleForMembers> refVal_setBusinessRole;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBusinessRole);
            setBusinessRole(refVal_setBusinessRole);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("member_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("member_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMemberId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMemberId);
            setMemberId(refVal_setMemberId);
        }
    }
    return ok;
}

void UpdateMemberBusinessRoleBody::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Business_roleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("business_role")), m_Business_role));
    }
    if(m_Member_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("member_id")), m_Member_id));
    }
}

bool UpdateMemberBusinessRoleBody::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("business_role"))))
    {
        std::shared_ptr<BusinessRoleForMembers> refVal_setBusinessRole;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("business_role"))), refVal_setBusinessRole );
        setBusinessRole(refVal_setBusinessRole);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("member_id"))))
    {
        utility::string_t refVal_setMemberId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("member_id"))), refVal_setMemberId );
        setMemberId(refVal_setMemberId);
    }
    return ok;
}

std::shared_ptr<BusinessRoleForMembers> UpdateMemberBusinessRoleBody::getBusinessRole() const
{
    return m_Business_role;
}

void UpdateMemberBusinessRoleBody::setBusinessRole(const std::shared_ptr<BusinessRoleForMembers>& value)
{
    m_Business_role = value;
    m_Business_roleIsSet = true;
}

bool UpdateMemberBusinessRoleBody::businessRoleIsSet() const
{
    return m_Business_roleIsSet;
}

void UpdateMemberBusinessRoleBody::unsetBusiness_role()
{
    m_Business_roleIsSet = false;
}
utility::string_t UpdateMemberBusinessRoleBody::getMemberId() const
{
    return m_Member_id;
}

void UpdateMemberBusinessRoleBody::setMemberId(const utility::string_t& value)
{
    m_Member_id = value;
    m_Member_idIsSet = true;
}

bool UpdateMemberBusinessRoleBody::memberIdIsSet() const
{
    return m_Member_idIsSet;
}

void UpdateMemberBusinessRoleBody::unsetMember_id()
{
    m_Member_idIsSet = false;
}
}
}
}
}


