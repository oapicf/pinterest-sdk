/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CatalogsReportDistributionStats.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CatalogsReportDistributionStats::CatalogsReportDistributionStats()
{
    m_Report_type = utility::conversions::to_string_t("");
    m_Report_typeIsSet = false;
    m_Catalog_id = utility::conversions::to_string_t("");
    m_Catalog_idIsSet = false;
    m_Code = 0;
    m_CodeIsSet = false;
    m_Code_label = utility::conversions::to_string_t("");
    m_Code_labelIsSet = false;
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
    m_Occurrences = 0;
    m_OccurrencesIsSet = false;
    m_Ineligible_for_ads = false;
    m_Ineligible_for_adsIsSet = false;
    m_Ineligible_for_organic = false;
    m_Ineligible_for_organicIsSet = false;
}

CatalogsReportDistributionStats::~CatalogsReportDistributionStats()
{
}

void CatalogsReportDistributionStats::validate()
{
    // TODO: implement validation
}

web::json::value CatalogsReportDistributionStats::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Report_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("report_type"))] = ModelBase::toJson(m_Report_type);
    }
    if(m_Catalog_idIsSet)
    {
        val[utility::conversions::to_string_t(U("catalog_id"))] = ModelBase::toJson(m_Catalog_id);
    }
    if(m_CodeIsSet)
    {
        val[utility::conversions::to_string_t(U("code"))] = ModelBase::toJson(m_Code);
    }
    if(m_Code_labelIsSet)
    {
        val[utility::conversions::to_string_t(U("code_label"))] = ModelBase::toJson(m_Code_label);
    }
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t(U("message"))] = ModelBase::toJson(m_Message);
    }
    if(m_OccurrencesIsSet)
    {
        val[utility::conversions::to_string_t(U("occurrences"))] = ModelBase::toJson(m_Occurrences);
    }
    if(m_Ineligible_for_adsIsSet)
    {
        val[utility::conversions::to_string_t(U("ineligible_for_ads"))] = ModelBase::toJson(m_Ineligible_for_ads);
    }
    if(m_Ineligible_for_organicIsSet)
    {
        val[utility::conversions::to_string_t(U("ineligible_for_organic"))] = ModelBase::toJson(m_Ineligible_for_organic);
    }

    return val;
}

bool CatalogsReportDistributionStats::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("report_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("report_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setReportType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReportType);
            setReportType(refVal_setReportType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("catalog_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("catalog_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCatalogId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCatalogId);
            setCatalogId(refVal_setCatalogId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("code")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCode);
            setCode(refVal_setCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("code_label"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("code_label")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCodeLabel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCodeLabel);
            setCodeLabel(refVal_setCodeLabel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("message"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("message")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessage);
            setMessage(refVal_setMessage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("occurrences"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("occurrences")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setOccurrences;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOccurrences);
            setOccurrences(refVal_setOccurrences);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ineligible_for_ads"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ineligible_for_ads")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIneligibleForAds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIneligibleForAds);
            setIneligibleForAds(refVal_setIneligibleForAds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ineligible_for_organic"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ineligible_for_organic")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIneligibleForOrganic;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIneligibleForOrganic);
            setIneligibleForOrganic(refVal_setIneligibleForOrganic);
        }
    }
    return ok;
}

void CatalogsReportDistributionStats::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Report_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("report_type")), m_Report_type));
    }
    if(m_Catalog_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("catalog_id")), m_Catalog_id));
    }
    if(m_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("code")), m_Code));
    }
    if(m_Code_labelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("code_label")), m_Code_label));
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("message")), m_Message));
    }
    if(m_OccurrencesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("occurrences")), m_Occurrences));
    }
    if(m_Ineligible_for_adsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ineligible_for_ads")), m_Ineligible_for_ads));
    }
    if(m_Ineligible_for_organicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ineligible_for_organic")), m_Ineligible_for_organic));
    }
}

bool CatalogsReportDistributionStats::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("report_type"))))
    {
        utility::string_t refVal_setReportType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("report_type"))), refVal_setReportType );
        setReportType(refVal_setReportType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("catalog_id"))))
    {
        utility::string_t refVal_setCatalogId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("catalog_id"))), refVal_setCatalogId );
        setCatalogId(refVal_setCatalogId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("code"))))
    {
        int32_t refVal_setCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("code"))), refVal_setCode );
        setCode(refVal_setCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("code_label"))))
    {
        utility::string_t refVal_setCodeLabel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("code_label"))), refVal_setCodeLabel );
        setCodeLabel(refVal_setCodeLabel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("message"))))
    {
        utility::string_t refVal_setMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("message"))), refVal_setMessage );
        setMessage(refVal_setMessage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("occurrences"))))
    {
        int32_t refVal_setOccurrences;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("occurrences"))), refVal_setOccurrences );
        setOccurrences(refVal_setOccurrences);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ineligible_for_ads"))))
    {
        bool refVal_setIneligibleForAds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ineligible_for_ads"))), refVal_setIneligibleForAds );
        setIneligibleForAds(refVal_setIneligibleForAds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ineligible_for_organic"))))
    {
        bool refVal_setIneligibleForOrganic;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ineligible_for_organic"))), refVal_setIneligibleForOrganic );
        setIneligibleForOrganic(refVal_setIneligibleForOrganic);
    }
    return ok;
}

utility::string_t CatalogsReportDistributionStats::getReportType() const
{
    return m_Report_type;
}

void CatalogsReportDistributionStats::setReportType(const utility::string_t& value)
{
    m_Report_type = value;
    m_Report_typeIsSet = true;
}

bool CatalogsReportDistributionStats::reportTypeIsSet() const
{
    return m_Report_typeIsSet;
}

void CatalogsReportDistributionStats::unsetReport_type()
{
    m_Report_typeIsSet = false;
}
utility::string_t CatalogsReportDistributionStats::getCatalogId() const
{
    return m_Catalog_id;
}

void CatalogsReportDistributionStats::setCatalogId(const utility::string_t& value)
{
    m_Catalog_id = value;
    m_Catalog_idIsSet = true;
}

bool CatalogsReportDistributionStats::catalogIdIsSet() const
{
    return m_Catalog_idIsSet;
}

void CatalogsReportDistributionStats::unsetCatalog_id()
{
    m_Catalog_idIsSet = false;
}
int32_t CatalogsReportDistributionStats::getCode() const
{
    return m_Code;
}

void CatalogsReportDistributionStats::setCode(int32_t value)
{
    m_Code = value;
    m_CodeIsSet = true;
}

bool CatalogsReportDistributionStats::codeIsSet() const
{
    return m_CodeIsSet;
}

void CatalogsReportDistributionStats::unsetCode()
{
    m_CodeIsSet = false;
}
utility::string_t CatalogsReportDistributionStats::getCodeLabel() const
{
    return m_Code_label;
}

void CatalogsReportDistributionStats::setCodeLabel(const utility::string_t& value)
{
    m_Code_label = value;
    m_Code_labelIsSet = true;
}

bool CatalogsReportDistributionStats::codeLabelIsSet() const
{
    return m_Code_labelIsSet;
}

void CatalogsReportDistributionStats::unsetCode_label()
{
    m_Code_labelIsSet = false;
}
utility::string_t CatalogsReportDistributionStats::getMessage() const
{
    return m_Message;
}

void CatalogsReportDistributionStats::setMessage(const utility::string_t& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}

bool CatalogsReportDistributionStats::messageIsSet() const
{
    return m_MessageIsSet;
}

void CatalogsReportDistributionStats::unsetMessage()
{
    m_MessageIsSet = false;
}
int32_t CatalogsReportDistributionStats::getOccurrences() const
{
    return m_Occurrences;
}

void CatalogsReportDistributionStats::setOccurrences(int32_t value)
{
    m_Occurrences = value;
    m_OccurrencesIsSet = true;
}

bool CatalogsReportDistributionStats::occurrencesIsSet() const
{
    return m_OccurrencesIsSet;
}

void CatalogsReportDistributionStats::unsetOccurrences()
{
    m_OccurrencesIsSet = false;
}
bool CatalogsReportDistributionStats::isIneligibleForAds() const
{
    return m_Ineligible_for_ads;
}

void CatalogsReportDistributionStats::setIneligibleForAds(bool value)
{
    m_Ineligible_for_ads = value;
    m_Ineligible_for_adsIsSet = true;
}

bool CatalogsReportDistributionStats::ineligibleForAdsIsSet() const
{
    return m_Ineligible_for_adsIsSet;
}

void CatalogsReportDistributionStats::unsetIneligible_for_ads()
{
    m_Ineligible_for_adsIsSet = false;
}
bool CatalogsReportDistributionStats::isIneligibleForOrganic() const
{
    return m_Ineligible_for_organic;
}

void CatalogsReportDistributionStats::setIneligibleForOrganic(bool value)
{
    m_Ineligible_for_organic = value;
    m_Ineligible_for_organicIsSet = true;
}

bool CatalogsReportDistributionStats::ineligibleForOrganicIsSet() const
{
    return m_Ineligible_for_organicIsSet;
}

void CatalogsReportDistributionStats::unsetIneligible_for_organic()
{
    m_Ineligible_for_organicIsSet = false;
}
}
}
}
}


