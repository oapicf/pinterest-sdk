/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/TargetingTemplateUpdateRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



TargetingTemplateUpdateRequest::TargetingTemplateUpdateRequest()
{
    m_Operation_type = utility::conversions::to_string_t("");
    m_Operation_typeIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
}

TargetingTemplateUpdateRequest::~TargetingTemplateUpdateRequest()
{
}

void TargetingTemplateUpdateRequest::validate()
{
    // TODO: implement validation
}

web::json::value TargetingTemplateUpdateRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Operation_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("operation_type"))] = ModelBase::toJson(m_Operation_type);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }

    return val;
}

bool TargetingTemplateUpdateRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("operation_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("operation_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOperationType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOperationType);
            setOperationType(refVal_setOperationType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    return ok;
}

void TargetingTemplateUpdateRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Operation_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("operation_type")), m_Operation_type));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
}

bool TargetingTemplateUpdateRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("operation_type"))))
    {
        utility::string_t refVal_setOperationType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("operation_type"))), refVal_setOperationType );
        setOperationType(refVal_setOperationType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    return ok;
}

utility::string_t TargetingTemplateUpdateRequest::getOperationType() const
{
    return m_Operation_type;
}

void TargetingTemplateUpdateRequest::setOperationType(const utility::string_t& value)
{
    m_Operation_type = value;
    m_Operation_typeIsSet = true;
}

bool TargetingTemplateUpdateRequest::operationTypeIsSet() const
{
    return m_Operation_typeIsSet;
}

void TargetingTemplateUpdateRequest::unsetOperation_type()
{
    m_Operation_typeIsSet = false;
}
utility::string_t TargetingTemplateUpdateRequest::getId() const
{
    return m_Id;
}

void TargetingTemplateUpdateRequest::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool TargetingTemplateUpdateRequest::idIsSet() const
{
    return m_IdIsSet;
}

void TargetingTemplateUpdateRequest::unsetId()
{
    m_IdIsSet = false;
}
}
}
}
}


