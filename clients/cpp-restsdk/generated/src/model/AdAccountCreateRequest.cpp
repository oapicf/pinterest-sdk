/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AdAccountCreateRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AdAccountCreateRequest::AdAccountCreateRequest()
{
    m_CountryIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Owner_user_id = utility::conversions::to_string_t("");
    m_Owner_user_idIsSet = false;
}

AdAccountCreateRequest::~AdAccountCreateRequest()
{
}

void AdAccountCreateRequest::validate()
{
    // TODO: implement validation
}

web::json::value AdAccountCreateRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CountryIsSet)
    {
        val[utility::conversions::to_string_t(U("country"))] = ModelBase::toJson(m_Country);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_Owner_user_idIsSet)
    {
        val[utility::conversions::to_string_t(U("owner_user_id"))] = ModelBase::toJson(m_Owner_user_id);
    }

    return val;
}

bool AdAccountCreateRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("country"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("country")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Country> refVal_setCountry;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCountry);
            setCountry(refVal_setCountry);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("owner_user_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("owner_user_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOwnerUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOwnerUserId);
            setOwnerUserId(refVal_setOwnerUserId);
        }
    }
    return ok;
}

void AdAccountCreateRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("country")), m_Country));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_Owner_user_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("owner_user_id")), m_Owner_user_id));
    }
}

bool AdAccountCreateRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("country"))))
    {
        std::shared_ptr<Country> refVal_setCountry;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("country"))), refVal_setCountry );
        setCountry(refVal_setCountry);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("owner_user_id"))))
    {
        utility::string_t refVal_setOwnerUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("owner_user_id"))), refVal_setOwnerUserId );
        setOwnerUserId(refVal_setOwnerUserId);
    }
    return ok;
}

std::shared_ptr<Country> AdAccountCreateRequest::getCountry() const
{
    return m_Country;
}

void AdAccountCreateRequest::setCountry(const std::shared_ptr<Country>& value)
{
    m_Country = value;
    m_CountryIsSet = true;
}

bool AdAccountCreateRequest::countryIsSet() const
{
    return m_CountryIsSet;
}

void AdAccountCreateRequest::unsetCountry()
{
    m_CountryIsSet = false;
}
utility::string_t AdAccountCreateRequest::getName() const
{
    return m_Name;
}

void AdAccountCreateRequest::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool AdAccountCreateRequest::nameIsSet() const
{
    return m_NameIsSet;
}

void AdAccountCreateRequest::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t AdAccountCreateRequest::getOwnerUserId() const
{
    return m_Owner_user_id;
}

void AdAccountCreateRequest::setOwnerUserId(const utility::string_t& value)
{
    m_Owner_user_id = value;
    m_Owner_user_idIsSet = true;
}

bool AdAccountCreateRequest::ownerUserIdIsSet() const
{
    return m_Owner_user_idIsSet;
}

void AdAccountCreateRequest::unsetOwner_user_id()
{
    m_Owner_user_idIsSet = false;
}
}
}
}
}


