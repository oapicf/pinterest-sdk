/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AdGroupAudienceSizingRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AdGroupAudienceSizingRequest::AdGroupAudienceSizingRequest()
{
    m_Auto_targeting_enabled = false;
    m_Auto_targeting_enabledIsSet = false;
    m_Placement_groupIsSet = false;
    m_Creative_typesIsSet = false;
    m_Targeting_specIsSet = false;
    m_Product_group_idsIsSet = false;
    m_KeywordsIsSet = false;
}

AdGroupAudienceSizingRequest::~AdGroupAudienceSizingRequest()
{
}

void AdGroupAudienceSizingRequest::validate()
{
    // TODO: implement validation
}

web::json::value AdGroupAudienceSizingRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Auto_targeting_enabledIsSet)
    {
        val[utility::conversions::to_string_t(U("auto_targeting_enabled"))] = ModelBase::toJson(m_Auto_targeting_enabled);
    }
    if(m_Placement_groupIsSet)
    {
        val[utility::conversions::to_string_t(U("placement_group"))] = ModelBase::toJson(m_Placement_group);
    }
    if(m_Creative_typesIsSet)
    {
        val[utility::conversions::to_string_t(U("creative_types"))] = ModelBase::toJson(m_Creative_types);
    }
    if(m_Targeting_specIsSet)
    {
        val[utility::conversions::to_string_t(U("targeting_spec"))] = ModelBase::toJson(m_Targeting_spec);
    }
    if(m_Product_group_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("product_group_ids"))] = ModelBase::toJson(m_Product_group_ids);
    }
    if(m_KeywordsIsSet)
    {
        val[utility::conversions::to_string_t(U("keywords"))] = ModelBase::toJson(m_Keywords);
    }

    return val;
}

bool AdGroupAudienceSizingRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("auto_targeting_enabled"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("auto_targeting_enabled")));
        if(!fieldValue.is_null())
        {
            bool refVal_setAutoTargetingEnabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAutoTargetingEnabled);
            setAutoTargetingEnabled(refVal_setAutoTargetingEnabled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("placement_group"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("placement_group")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PlacementGroupType> refVal_setPlacementGroup;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlacementGroup);
            setPlacementGroup(refVal_setPlacementGroup);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("creative_types"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("creative_types")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setCreativeTypes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreativeTypes);
            setCreativeTypes(refVal_setCreativeTypes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("targeting_spec"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("targeting_spec")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TargetingSpec> refVal_setTargetingSpec;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTargetingSpec);
            setTargetingSpec(refVal_setTargetingSpec);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("product_group_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product_group_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setProductGroupIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProductGroupIds);
            setProductGroupIds(refVal_setProductGroupIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("keywords"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("keywords")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<AdGroupAudienceSizingRequest_keywords_inner>> refVal_setKeywords;
            ok &= ModelBase::fromJson(fieldValue, refVal_setKeywords);
            setKeywords(refVal_setKeywords);
        }
    }
    return ok;
}

void AdGroupAudienceSizingRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Auto_targeting_enabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("auto_targeting_enabled")), m_Auto_targeting_enabled));
    }
    if(m_Placement_groupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("placement_group")), m_Placement_group));
    }
    if(m_Creative_typesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("creative_types")), m_Creative_types));
    }
    if(m_Targeting_specIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("targeting_spec")), m_Targeting_spec));
    }
    if(m_Product_group_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product_group_ids")), m_Product_group_ids));
    }
    if(m_KeywordsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("keywords")), m_Keywords));
    }
}

bool AdGroupAudienceSizingRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("auto_targeting_enabled"))))
    {
        bool refVal_setAutoTargetingEnabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("auto_targeting_enabled"))), refVal_setAutoTargetingEnabled );
        setAutoTargetingEnabled(refVal_setAutoTargetingEnabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("placement_group"))))
    {
        std::shared_ptr<PlacementGroupType> refVal_setPlacementGroup;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("placement_group"))), refVal_setPlacementGroup );
        setPlacementGroup(refVal_setPlacementGroup);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("creative_types"))))
    {
        std::vector<utility::string_t> refVal_setCreativeTypes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("creative_types"))), refVal_setCreativeTypes );
        setCreativeTypes(refVal_setCreativeTypes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("targeting_spec"))))
    {
        std::shared_ptr<TargetingSpec> refVal_setTargetingSpec;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("targeting_spec"))), refVal_setTargetingSpec );
        setTargetingSpec(refVal_setTargetingSpec);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("product_group_ids"))))
    {
        std::vector<utility::string_t> refVal_setProductGroupIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product_group_ids"))), refVal_setProductGroupIds );
        setProductGroupIds(refVal_setProductGroupIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("keywords"))))
    {
        std::vector<std::shared_ptr<AdGroupAudienceSizingRequest_keywords_inner>> refVal_setKeywords;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("keywords"))), refVal_setKeywords );
        setKeywords(refVal_setKeywords);
    }
    return ok;
}

bool AdGroupAudienceSizingRequest::isAutoTargetingEnabled() const
{
    return m_Auto_targeting_enabled;
}

void AdGroupAudienceSizingRequest::setAutoTargetingEnabled(bool value)
{
    m_Auto_targeting_enabled = value;
    m_Auto_targeting_enabledIsSet = true;
}

bool AdGroupAudienceSizingRequest::autoTargetingEnabledIsSet() const
{
    return m_Auto_targeting_enabledIsSet;
}

void AdGroupAudienceSizingRequest::unsetAuto_targeting_enabled()
{
    m_Auto_targeting_enabledIsSet = false;
}
std::shared_ptr<PlacementGroupType> AdGroupAudienceSizingRequest::getPlacementGroup() const
{
    return m_Placement_group;
}

void AdGroupAudienceSizingRequest::setPlacementGroup(const std::shared_ptr<PlacementGroupType>& value)
{
    m_Placement_group = value;
    m_Placement_groupIsSet = true;
}

bool AdGroupAudienceSizingRequest::placementGroupIsSet() const
{
    return m_Placement_groupIsSet;
}

void AdGroupAudienceSizingRequest::unsetPlacement_group()
{
    m_Placement_groupIsSet = false;
}
std::vector<utility::string_t>& AdGroupAudienceSizingRequest::getCreativeTypes()
{
    return m_Creative_types;
}

void AdGroupAudienceSizingRequest::setCreativeTypes(const std::vector<utility::string_t>& value)
{
    m_Creative_types = value;
    m_Creative_typesIsSet = true;
}

bool AdGroupAudienceSizingRequest::creativeTypesIsSet() const
{
    return m_Creative_typesIsSet;
}

void AdGroupAudienceSizingRequest::unsetCreative_types()
{
    m_Creative_typesIsSet = false;
}
std::shared_ptr<TargetingSpec> AdGroupAudienceSizingRequest::getTargetingSpec() const
{
    return m_Targeting_spec;
}

void AdGroupAudienceSizingRequest::setTargetingSpec(const std::shared_ptr<TargetingSpec>& value)
{
    m_Targeting_spec = value;
    m_Targeting_specIsSet = true;
}

bool AdGroupAudienceSizingRequest::targetingSpecIsSet() const
{
    return m_Targeting_specIsSet;
}

void AdGroupAudienceSizingRequest::unsetTargeting_spec()
{
    m_Targeting_specIsSet = false;
}
std::vector<utility::string_t>& AdGroupAudienceSizingRequest::getProductGroupIds()
{
    return m_Product_group_ids;
}

void AdGroupAudienceSizingRequest::setProductGroupIds(const std::vector<utility::string_t>& value)
{
    m_Product_group_ids = value;
    m_Product_group_idsIsSet = true;
}

bool AdGroupAudienceSizingRequest::productGroupIdsIsSet() const
{
    return m_Product_group_idsIsSet;
}

void AdGroupAudienceSizingRequest::unsetProduct_group_ids()
{
    m_Product_group_idsIsSet = false;
}
std::vector<std::shared_ptr<AdGroupAudienceSizingRequest_keywords_inner>>& AdGroupAudienceSizingRequest::getKeywords()
{
    return m_Keywords;
}

void AdGroupAudienceSizingRequest::setKeywords(const std::vector<std::shared_ptr<AdGroupAudienceSizingRequest_keywords_inner>>& value)
{
    m_Keywords = value;
    m_KeywordsIsSet = true;
}

bool AdGroupAudienceSizingRequest::keywordsIsSet() const
{
    return m_KeywordsIsSet;
}

void AdGroupAudienceSizingRequest::unsetKeywords()
{
    m_KeywordsIsSet = false;
}
}
}
}
}


