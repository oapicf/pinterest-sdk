/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/MediaUpload.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



MediaUpload::MediaUpload()
{
    m_Media_id = utility::conversions::to_string_t("");
    m_Media_idIsSet = false;
    m_Media_typeIsSet = false;
    m_Upload_url = utility::conversions::to_string_t("");
    m_Upload_urlIsSet = false;
    m_Upload_parametersIsSet = false;
}

MediaUpload::~MediaUpload()
{
}

void MediaUpload::validate()
{
    // TODO: implement validation
}

web::json::value MediaUpload::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Media_idIsSet)
    {
        val[utility::conversions::to_string_t(U("media_id"))] = ModelBase::toJson(m_Media_id);
    }
    if(m_Media_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("media_type"))] = ModelBase::toJson(m_Media_type);
    }
    if(m_Upload_urlIsSet)
    {
        val[utility::conversions::to_string_t(U("upload_url"))] = ModelBase::toJson(m_Upload_url);
    }
    if(m_Upload_parametersIsSet)
    {
        val[utility::conversions::to_string_t(U("upload_parameters"))] = ModelBase::toJson(m_Upload_parameters);
    }

    return val;
}

bool MediaUpload::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("media_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("media_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMediaId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMediaId);
            setMediaId(refVal_setMediaId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("media_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("media_type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<MediaUploadType> refVal_setMediaType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMediaType);
            setMediaType(refVal_setMediaType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("upload_url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("upload_url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUploadUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUploadUrl);
            setUploadUrl(refVal_setUploadUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("upload_parameters"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("upload_parameters")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<MediaUpload_allOf_upload_parameters> refVal_setUploadParameters;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUploadParameters);
            setUploadParameters(refVal_setUploadParameters);
        }
    }
    return ok;
}

void MediaUpload::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Media_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("media_id")), m_Media_id));
    }
    if(m_Media_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("media_type")), m_Media_type));
    }
    if(m_Upload_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("upload_url")), m_Upload_url));
    }
    if(m_Upload_parametersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("upload_parameters")), m_Upload_parameters));
    }
}

bool MediaUpload::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("media_id"))))
    {
        utility::string_t refVal_setMediaId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("media_id"))), refVal_setMediaId );
        setMediaId(refVal_setMediaId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("media_type"))))
    {
        std::shared_ptr<MediaUploadType> refVal_setMediaType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("media_type"))), refVal_setMediaType );
        setMediaType(refVal_setMediaType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("upload_url"))))
    {
        utility::string_t refVal_setUploadUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("upload_url"))), refVal_setUploadUrl );
        setUploadUrl(refVal_setUploadUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("upload_parameters"))))
    {
        std::shared_ptr<MediaUpload_allOf_upload_parameters> refVal_setUploadParameters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("upload_parameters"))), refVal_setUploadParameters );
        setUploadParameters(refVal_setUploadParameters);
    }
    return ok;
}

utility::string_t MediaUpload::getMediaId() const
{
    return m_Media_id;
}

void MediaUpload::setMediaId(const utility::string_t& value)
{
    m_Media_id = value;
    m_Media_idIsSet = true;
}

bool MediaUpload::mediaIdIsSet() const
{
    return m_Media_idIsSet;
}

void MediaUpload::unsetMedia_id()
{
    m_Media_idIsSet = false;
}
std::shared_ptr<MediaUploadType> MediaUpload::getMediaType() const
{
    return m_Media_type;
}

void MediaUpload::setMediaType(const std::shared_ptr<MediaUploadType>& value)
{
    m_Media_type = value;
    m_Media_typeIsSet = true;
}

bool MediaUpload::mediaTypeIsSet() const
{
    return m_Media_typeIsSet;
}

void MediaUpload::unsetMedia_type()
{
    m_Media_typeIsSet = false;
}
utility::string_t MediaUpload::getUploadUrl() const
{
    return m_Upload_url;
}

void MediaUpload::setUploadUrl(const utility::string_t& value)
{
    m_Upload_url = value;
    m_Upload_urlIsSet = true;
}

bool MediaUpload::uploadUrlIsSet() const
{
    return m_Upload_urlIsSet;
}

void MediaUpload::unsetUpload_url()
{
    m_Upload_urlIsSet = false;
}
std::shared_ptr<MediaUpload_allOf_upload_parameters> MediaUpload::getUploadParameters() const
{
    return m_Upload_parameters;
}

void MediaUpload::setUploadParameters(const std::shared_ptr<MediaUpload_allOf_upload_parameters>& value)
{
    m_Upload_parameters = value;
    m_Upload_parametersIsSet = true;
}

bool MediaUpload::uploadParametersIsSet() const
{
    return m_Upload_parametersIsSet;
}

void MediaUpload::unsetUpload_parameters()
{
    m_Upload_parametersIsSet = false;
}
}
}
}
}


