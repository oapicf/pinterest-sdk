/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/IntegrationLogsInvalidLogResponse_rejected_logs_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



IntegrationLogsInvalidLogResponse_rejected_logs_inner::IntegrationLogsInvalidLogResponse_rejected_logs_inner()
{
    m_Log_index = 0;
    m_Log_indexIsSet = false;
    m_Field = utility::conversions::to_string_t("");
    m_FieldIsSet = false;
    m_Value = utility::conversions::to_string_t("");
    m_ValueIsSet = false;
    m_Reason = utility::conversions::to_string_t("");
    m_ReasonIsSet = false;
}

IntegrationLogsInvalidLogResponse_rejected_logs_inner::~IntegrationLogsInvalidLogResponse_rejected_logs_inner()
{
}

void IntegrationLogsInvalidLogResponse_rejected_logs_inner::validate()
{
    // TODO: implement validation
}

web::json::value IntegrationLogsInvalidLogResponse_rejected_logs_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Log_indexIsSet)
    {
        val[utility::conversions::to_string_t(U("log_index"))] = ModelBase::toJson(m_Log_index);
    }
    if(m_FieldIsSet)
    {
        val[utility::conversions::to_string_t(U("field"))] = ModelBase::toJson(m_Field);
    }
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t(U("value"))] = ModelBase::toJson(m_Value);
    }
    if(m_ReasonIsSet)
    {
        val[utility::conversions::to_string_t(U("reason"))] = ModelBase::toJson(m_Reason);
    }

    return val;
}

bool IntegrationLogsInvalidLogResponse_rejected_logs_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("log_index"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("log_index")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLogIndex;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLogIndex);
            setLogIndex(refVal_setLogIndex);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("field"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("field")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setField;
            ok &= ModelBase::fromJson(fieldValue, refVal_setField);
            setField(refVal_setField);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("value"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("value")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValue);
            setValue(refVal_setValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reason"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reason")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setReason;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReason);
            setReason(refVal_setReason);
        }
    }
    return ok;
}

void IntegrationLogsInvalidLogResponse_rejected_logs_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Log_indexIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("log_index")), m_Log_index));
    }
    if(m_FieldIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("field")), m_Field));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("value")), m_Value));
    }
    if(m_ReasonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reason")), m_Reason));
    }
}

bool IntegrationLogsInvalidLogResponse_rejected_logs_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("log_index"))))
    {
        int32_t refVal_setLogIndex;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("log_index"))), refVal_setLogIndex );
        setLogIndex(refVal_setLogIndex);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("field"))))
    {
        utility::string_t refVal_setField;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("field"))), refVal_setField );
        setField(refVal_setField);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("value"))))
    {
        utility::string_t refVal_setValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("value"))), refVal_setValue );
        setValue(refVal_setValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reason"))))
    {
        utility::string_t refVal_setReason;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reason"))), refVal_setReason );
        setReason(refVal_setReason);
    }
    return ok;
}

int32_t IntegrationLogsInvalidLogResponse_rejected_logs_inner::getLogIndex() const
{
    return m_Log_index;
}

void IntegrationLogsInvalidLogResponse_rejected_logs_inner::setLogIndex(int32_t value)
{
    m_Log_index = value;
    m_Log_indexIsSet = true;
}

bool IntegrationLogsInvalidLogResponse_rejected_logs_inner::logIndexIsSet() const
{
    return m_Log_indexIsSet;
}

void IntegrationLogsInvalidLogResponse_rejected_logs_inner::unsetLog_index()
{
    m_Log_indexIsSet = false;
}
utility::string_t IntegrationLogsInvalidLogResponse_rejected_logs_inner::getField() const
{
    return m_Field;
}

void IntegrationLogsInvalidLogResponse_rejected_logs_inner::setField(const utility::string_t& value)
{
    m_Field = value;
    m_FieldIsSet = true;
}

bool IntegrationLogsInvalidLogResponse_rejected_logs_inner::fieldIsSet() const
{
    return m_FieldIsSet;
}

void IntegrationLogsInvalidLogResponse_rejected_logs_inner::unsetField()
{
    m_FieldIsSet = false;
}
utility::string_t IntegrationLogsInvalidLogResponse_rejected_logs_inner::getValue() const
{
    return m_Value;
}

void IntegrationLogsInvalidLogResponse_rejected_logs_inner::setValue(const utility::string_t& value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool IntegrationLogsInvalidLogResponse_rejected_logs_inner::valueIsSet() const
{
    return m_ValueIsSet;
}

void IntegrationLogsInvalidLogResponse_rejected_logs_inner::unsetValue()
{
    m_ValueIsSet = false;
}
utility::string_t IntegrationLogsInvalidLogResponse_rejected_logs_inner::getReason() const
{
    return m_Reason;
}

void IntegrationLogsInvalidLogResponse_rejected_logs_inner::setReason(const utility::string_t& value)
{
    m_Reason = value;
    m_ReasonIsSet = true;
}

bool IntegrationLogsInvalidLogResponse_rejected_logs_inner::reasonIsSet() const
{
    return m_ReasonIsSet;
}

void IntegrationLogsInvalidLogResponse_rejected_logs_inner::unsetReason()
{
    m_ReasonIsSet = false;
}
}
}
}
}


