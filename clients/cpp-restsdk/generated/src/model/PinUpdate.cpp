/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PinUpdate.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



PinUpdate::PinUpdate()
{
    m_Alt_text = utility::conversions::to_string_t("");
    m_Alt_textIsSet = false;
    m_Board_id = utility::conversions::to_string_t("");
    m_Board_idIsSet = false;
    m_Board_section_id = utility::conversions::to_string_t("");
    m_Board_section_idIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Link = utility::conversions::to_string_t("");
    m_LinkIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_Carousel_slotsIsSet = false;
    m_Note = utility::conversions::to_string_t("");
    m_NoteIsSet = false;
}

PinUpdate::~PinUpdate()
{
}

void PinUpdate::validate()
{
    // TODO: implement validation
}

web::json::value PinUpdate::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Alt_textIsSet)
    {
        val[utility::conversions::to_string_t(U("alt_text"))] = ModelBase::toJson(m_Alt_text);
    }
    if(m_Board_idIsSet)
    {
        val[utility::conversions::to_string_t(U("board_id"))] = ModelBase::toJson(m_Board_id);
    }
    if(m_Board_section_idIsSet)
    {
        val[utility::conversions::to_string_t(U("board_section_id"))] = ModelBase::toJson(m_Board_section_id);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_LinkIsSet)
    {
        val[utility::conversions::to_string_t(U("link"))] = ModelBase::toJson(m_Link);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t(U("title"))] = ModelBase::toJson(m_Title);
    }
    if(m_Carousel_slotsIsSet)
    {
        val[utility::conversions::to_string_t(U("carousel_slots"))] = ModelBase::toJson(m_Carousel_slots);
    }
    if(m_NoteIsSet)
    {
        val[utility::conversions::to_string_t(U("note"))] = ModelBase::toJson(m_Note);
    }

    return val;
}

bool PinUpdate::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("alt_text"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("alt_text")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAltText;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAltText);
            setAltText(refVal_setAltText);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("board_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("board_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBoardId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBoardId);
            setBoardId(refVal_setBoardId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("board_section_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("board_section_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBoardSectionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBoardSectionId);
            setBoardSectionId(refVal_setBoardSectionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("link"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("link")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLink;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLink);
            setLink(refVal_setLink);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("title"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("title")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTitle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTitle);
            setTitle(refVal_setTitle);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("carousel_slots"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("carousel_slots")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<PinUpdate_carousel_slots_inner>> refVal_setCarouselSlots;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCarouselSlots);
            setCarouselSlots(refVal_setCarouselSlots);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("note"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("note")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNote;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNote);
            setNote(refVal_setNote);
        }
    }
    return ok;
}

void PinUpdate::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Alt_textIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("alt_text")), m_Alt_text));
    }
    if(m_Board_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("board_id")), m_Board_id));
    }
    if(m_Board_section_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("board_section_id")), m_Board_section_id));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_LinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("link")), m_Link));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("title")), m_Title));
    }
    if(m_Carousel_slotsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("carousel_slots")), m_Carousel_slots));
    }
    if(m_NoteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("note")), m_Note));
    }
}

bool PinUpdate::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("alt_text"))))
    {
        utility::string_t refVal_setAltText;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("alt_text"))), refVal_setAltText );
        setAltText(refVal_setAltText);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("board_id"))))
    {
        utility::string_t refVal_setBoardId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("board_id"))), refVal_setBoardId );
        setBoardId(refVal_setBoardId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("board_section_id"))))
    {
        utility::string_t refVal_setBoardSectionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("board_section_id"))), refVal_setBoardSectionId );
        setBoardSectionId(refVal_setBoardSectionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("link"))))
    {
        utility::string_t refVal_setLink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("link"))), refVal_setLink );
        setLink(refVal_setLink);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("title"))))
    {
        utility::string_t refVal_setTitle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("title"))), refVal_setTitle );
        setTitle(refVal_setTitle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("carousel_slots"))))
    {
        std::vector<std::shared_ptr<PinUpdate_carousel_slots_inner>> refVal_setCarouselSlots;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("carousel_slots"))), refVal_setCarouselSlots );
        setCarouselSlots(refVal_setCarouselSlots);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("note"))))
    {
        utility::string_t refVal_setNote;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("note"))), refVal_setNote );
        setNote(refVal_setNote);
    }
    return ok;
}

utility::string_t PinUpdate::getAltText() const
{
    return m_Alt_text;
}

void PinUpdate::setAltText(const utility::string_t& value)
{
    m_Alt_text = value;
    m_Alt_textIsSet = true;
}

bool PinUpdate::altTextIsSet() const
{
    return m_Alt_textIsSet;
}

void PinUpdate::unsetAlt_text()
{
    m_Alt_textIsSet = false;
}
utility::string_t PinUpdate::getBoardId() const
{
    return m_Board_id;
}

void PinUpdate::setBoardId(const utility::string_t& value)
{
    m_Board_id = value;
    m_Board_idIsSet = true;
}

bool PinUpdate::boardIdIsSet() const
{
    return m_Board_idIsSet;
}

void PinUpdate::unsetBoard_id()
{
    m_Board_idIsSet = false;
}
utility::string_t PinUpdate::getBoardSectionId() const
{
    return m_Board_section_id;
}

void PinUpdate::setBoardSectionId(const utility::string_t& value)
{
    m_Board_section_id = value;
    m_Board_section_idIsSet = true;
}

bool PinUpdate::boardSectionIdIsSet() const
{
    return m_Board_section_idIsSet;
}

void PinUpdate::unsetBoard_section_id()
{
    m_Board_section_idIsSet = false;
}
utility::string_t PinUpdate::getDescription() const
{
    return m_Description;
}

void PinUpdate::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool PinUpdate::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void PinUpdate::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t PinUpdate::getLink() const
{
    return m_Link;
}

void PinUpdate::setLink(const utility::string_t& value)
{
    m_Link = value;
    m_LinkIsSet = true;
}

bool PinUpdate::linkIsSet() const
{
    return m_LinkIsSet;
}

void PinUpdate::unsetLink()
{
    m_LinkIsSet = false;
}
utility::string_t PinUpdate::getTitle() const
{
    return m_Title;
}

void PinUpdate::setTitle(const utility::string_t& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}

bool PinUpdate::titleIsSet() const
{
    return m_TitleIsSet;
}

void PinUpdate::unsetTitle()
{
    m_TitleIsSet = false;
}
std::vector<std::shared_ptr<PinUpdate_carousel_slots_inner>>& PinUpdate::getCarouselSlots()
{
    return m_Carousel_slots;
}

void PinUpdate::setCarouselSlots(const std::vector<std::shared_ptr<PinUpdate_carousel_slots_inner>>& value)
{
    m_Carousel_slots = value;
    m_Carousel_slotsIsSet = true;
}

bool PinUpdate::carouselSlotsIsSet() const
{
    return m_Carousel_slotsIsSet;
}

void PinUpdate::unsetCarousel_slots()
{
    m_Carousel_slotsIsSet = false;
}
utility::string_t PinUpdate::getNote() const
{
    return m_Note;
}

void PinUpdate::setNote(const utility::string_t& value)
{
    m_Note = value;
    m_NoteIsSet = true;
}

bool PinUpdate::noteIsSet() const
{
    return m_NoteIsSet;
}

void PinUpdate::unsetNote()
{
    m_NoteIsSet = false;
}
}
}
}
}


