/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CatalogsDeleteHotelItem.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CatalogsDeleteHotelItem::CatalogsDeleteHotelItem()
{
    m_Hotel_id = utility::conversions::to_string_t("");
    m_Hotel_idIsSet = false;
    m_Operation = utility::conversions::to_string_t("");
    m_OperationIsSet = false;
}

CatalogsDeleteHotelItem::~CatalogsDeleteHotelItem()
{
}

void CatalogsDeleteHotelItem::validate()
{
    // TODO: implement validation
}

web::json::value CatalogsDeleteHotelItem::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Hotel_idIsSet)
    {
        val[utility::conversions::to_string_t(U("hotel_id"))] = ModelBase::toJson(m_Hotel_id);
    }
    if(m_OperationIsSet)
    {
        val[utility::conversions::to_string_t(U("operation"))] = ModelBase::toJson(m_Operation);
    }

    return val;
}

bool CatalogsDeleteHotelItem::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("hotel_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hotel_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHotelId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHotelId);
            setHotelId(refVal_setHotelId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("operation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("operation")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOperation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOperation);
            setOperation(refVal_setOperation);
        }
    }
    return ok;
}

void CatalogsDeleteHotelItem::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Hotel_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hotel_id")), m_Hotel_id));
    }
    if(m_OperationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("operation")), m_Operation));
    }
}

bool CatalogsDeleteHotelItem::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("hotel_id"))))
    {
        utility::string_t refVal_setHotelId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hotel_id"))), refVal_setHotelId );
        setHotelId(refVal_setHotelId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("operation"))))
    {
        utility::string_t refVal_setOperation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("operation"))), refVal_setOperation );
        setOperation(refVal_setOperation);
    }
    return ok;
}

utility::string_t CatalogsDeleteHotelItem::getHotelId() const
{
    return m_Hotel_id;
}

void CatalogsDeleteHotelItem::setHotelId(const utility::string_t& value)
{
    m_Hotel_id = value;
    m_Hotel_idIsSet = true;
}

bool CatalogsDeleteHotelItem::hotelIdIsSet() const
{
    return m_Hotel_idIsSet;
}

void CatalogsDeleteHotelItem::unsetHotel_id()
{
    m_Hotel_idIsSet = false;
}
utility::string_t CatalogsDeleteHotelItem::getOperation() const
{
    return m_Operation;
}

void CatalogsDeleteHotelItem::setOperation(const utility::string_t& value)
{
    m_Operation = value;
    m_OperationIsSet = true;
}

bool CatalogsDeleteHotelItem::operationIsSet() const
{
    return m_OperationIsSet;
}

void CatalogsDeleteHotelItem::unsetOperation()
{
    m_OperationIsSet = false;
}
}
}
}
}


