/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/UserWebsiteVerificationCode.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



UserWebsiteVerificationCode::UserWebsiteVerificationCode()
{
    m_Verification_code = utility::conversions::to_string_t("");
    m_Verification_codeIsSet = false;
    m_Dns_txt_record = utility::conversions::to_string_t("");
    m_Dns_txt_recordIsSet = false;
    m_Metatag = utility::conversions::to_string_t("");
    m_MetatagIsSet = false;
    m_Filename = utility::conversions::to_string_t("");
    m_FilenameIsSet = false;
    m_File_content = utility::conversions::to_string_t("");
    m_File_contentIsSet = false;
}

UserWebsiteVerificationCode::~UserWebsiteVerificationCode()
{
}

void UserWebsiteVerificationCode::validate()
{
    // TODO: implement validation
}

web::json::value UserWebsiteVerificationCode::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Verification_codeIsSet)
    {
        val[utility::conversions::to_string_t(U("verification_code"))] = ModelBase::toJson(m_Verification_code);
    }
    if(m_Dns_txt_recordIsSet)
    {
        val[utility::conversions::to_string_t(U("dns_txt_record"))] = ModelBase::toJson(m_Dns_txt_record);
    }
    if(m_MetatagIsSet)
    {
        val[utility::conversions::to_string_t(U("metatag"))] = ModelBase::toJson(m_Metatag);
    }
    if(m_FilenameIsSet)
    {
        val[utility::conversions::to_string_t(U("filename"))] = ModelBase::toJson(m_Filename);
    }
    if(m_File_contentIsSet)
    {
        val[utility::conversions::to_string_t(U("file_content"))] = ModelBase::toJson(m_File_content);
    }

    return val;
}

bool UserWebsiteVerificationCode::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("verification_code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("verification_code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVerificationCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVerificationCode);
            setVerificationCode(refVal_setVerificationCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dns_txt_record"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dns_txt_record")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDnsTxtRecord;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDnsTxtRecord);
            setDnsTxtRecord(refVal_setDnsTxtRecord);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("metatag"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("metatag")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMetatag;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMetatag);
            setMetatag(refVal_setMetatag);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("filename"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("filename")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFilename;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFilename);
            setFilename(refVal_setFilename);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("file_content"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("file_content")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFileContent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFileContent);
            setFileContent(refVal_setFileContent);
        }
    }
    return ok;
}

void UserWebsiteVerificationCode::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Verification_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("verification_code")), m_Verification_code));
    }
    if(m_Dns_txt_recordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dns_txt_record")), m_Dns_txt_record));
    }
    if(m_MetatagIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("metatag")), m_Metatag));
    }
    if(m_FilenameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("filename")), m_Filename));
    }
    if(m_File_contentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("file_content")), m_File_content));
    }
}

bool UserWebsiteVerificationCode::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("verification_code"))))
    {
        utility::string_t refVal_setVerificationCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("verification_code"))), refVal_setVerificationCode );
        setVerificationCode(refVal_setVerificationCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dns_txt_record"))))
    {
        utility::string_t refVal_setDnsTxtRecord;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dns_txt_record"))), refVal_setDnsTxtRecord );
        setDnsTxtRecord(refVal_setDnsTxtRecord);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("metatag"))))
    {
        utility::string_t refVal_setMetatag;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("metatag"))), refVal_setMetatag );
        setMetatag(refVal_setMetatag);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("filename"))))
    {
        utility::string_t refVal_setFilename;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("filename"))), refVal_setFilename );
        setFilename(refVal_setFilename);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("file_content"))))
    {
        utility::string_t refVal_setFileContent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("file_content"))), refVal_setFileContent );
        setFileContent(refVal_setFileContent);
    }
    return ok;
}

utility::string_t UserWebsiteVerificationCode::getVerificationCode() const
{
    return m_Verification_code;
}

void UserWebsiteVerificationCode::setVerificationCode(const utility::string_t& value)
{
    m_Verification_code = value;
    m_Verification_codeIsSet = true;
}

bool UserWebsiteVerificationCode::verificationCodeIsSet() const
{
    return m_Verification_codeIsSet;
}

void UserWebsiteVerificationCode::unsetVerification_code()
{
    m_Verification_codeIsSet = false;
}
utility::string_t UserWebsiteVerificationCode::getDnsTxtRecord() const
{
    return m_Dns_txt_record;
}

void UserWebsiteVerificationCode::setDnsTxtRecord(const utility::string_t& value)
{
    m_Dns_txt_record = value;
    m_Dns_txt_recordIsSet = true;
}

bool UserWebsiteVerificationCode::dnsTxtRecordIsSet() const
{
    return m_Dns_txt_recordIsSet;
}

void UserWebsiteVerificationCode::unsetDns_txt_record()
{
    m_Dns_txt_recordIsSet = false;
}
utility::string_t UserWebsiteVerificationCode::getMetatag() const
{
    return m_Metatag;
}

void UserWebsiteVerificationCode::setMetatag(const utility::string_t& value)
{
    m_Metatag = value;
    m_MetatagIsSet = true;
}

bool UserWebsiteVerificationCode::metatagIsSet() const
{
    return m_MetatagIsSet;
}

void UserWebsiteVerificationCode::unsetMetatag()
{
    m_MetatagIsSet = false;
}
utility::string_t UserWebsiteVerificationCode::getFilename() const
{
    return m_Filename;
}

void UserWebsiteVerificationCode::setFilename(const utility::string_t& value)
{
    m_Filename = value;
    m_FilenameIsSet = true;
}

bool UserWebsiteVerificationCode::filenameIsSet() const
{
    return m_FilenameIsSet;
}

void UserWebsiteVerificationCode::unsetFilename()
{
    m_FilenameIsSet = false;
}
utility::string_t UserWebsiteVerificationCode::getFileContent() const
{
    return m_File_content;
}

void UserWebsiteVerificationCode::setFileContent(const utility::string_t& value)
{
    m_File_content = value;
    m_File_contentIsSet = true;
}

bool UserWebsiteVerificationCode::fileContentIsSet() const
{
    return m_File_contentIsSet;
}

void UserWebsiteVerificationCode::unsetFile_content()
{
    m_File_contentIsSet = false;
}
}
}
}
}


