/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CatalogsCreativeAssetsProductGroupFilterKeys.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CatalogsCreativeAssetsProductGroupFilterKeys::CatalogsCreativeAssetsProductGroupFilterKeys()
{
    m_CREATIVE_ASSETS_IDIsSet = false;
    m_CUSTOM_LABEL_0IsSet = false;
    m_CUSTOM_LABEL_1IsSet = false;
    m_CUSTOM_LABEL_2IsSet = false;
    m_CUSTOM_LABEL_3IsSet = false;
    m_CUSTOM_LABEL_4IsSet = false;
    m_GOOGLE_PRODUCT_CATEGORY_6IsSet = false;
    m_GOOGLE_PRODUCT_CATEGORY_5IsSet = false;
    m_GOOGLE_PRODUCT_CATEGORY_4IsSet = false;
    m_GOOGLE_PRODUCT_CATEGORY_3IsSet = false;
    m_GOOGLE_PRODUCT_CATEGORY_2IsSet = false;
    m_GOOGLE_PRODUCT_CATEGORY_1IsSet = false;
    m_GOOGLE_PRODUCT_CATEGORY_0IsSet = false;
    m_MEDIA_TYPEIsSet = false;
}

CatalogsCreativeAssetsProductGroupFilterKeys::~CatalogsCreativeAssetsProductGroupFilterKeys()
{
}

void CatalogsCreativeAssetsProductGroupFilterKeys::validate()
{
    // TODO: implement validation
}

web::json::value CatalogsCreativeAssetsProductGroupFilterKeys::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CREATIVE_ASSETS_IDIsSet)
    {
        val[utility::conversions::to_string_t(U("CREATIVE_ASSETS_ID"))] = ModelBase::toJson(m_CREATIVE_ASSETS_ID);
    }
    if(m_CUSTOM_LABEL_0IsSet)
    {
        val[utility::conversions::to_string_t(U("CUSTOM_LABEL_0"))] = ModelBase::toJson(m_CUSTOM_LABEL_0);
    }
    if(m_CUSTOM_LABEL_1IsSet)
    {
        val[utility::conversions::to_string_t(U("CUSTOM_LABEL_1"))] = ModelBase::toJson(m_CUSTOM_LABEL_1);
    }
    if(m_CUSTOM_LABEL_2IsSet)
    {
        val[utility::conversions::to_string_t(U("CUSTOM_LABEL_2"))] = ModelBase::toJson(m_CUSTOM_LABEL_2);
    }
    if(m_CUSTOM_LABEL_3IsSet)
    {
        val[utility::conversions::to_string_t(U("CUSTOM_LABEL_3"))] = ModelBase::toJson(m_CUSTOM_LABEL_3);
    }
    if(m_CUSTOM_LABEL_4IsSet)
    {
        val[utility::conversions::to_string_t(U("CUSTOM_LABEL_4"))] = ModelBase::toJson(m_CUSTOM_LABEL_4);
    }
    if(m_GOOGLE_PRODUCT_CATEGORY_6IsSet)
    {
        val[utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_6"))] = ModelBase::toJson(m_GOOGLE_PRODUCT_CATEGORY_6);
    }
    if(m_GOOGLE_PRODUCT_CATEGORY_5IsSet)
    {
        val[utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_5"))] = ModelBase::toJson(m_GOOGLE_PRODUCT_CATEGORY_5);
    }
    if(m_GOOGLE_PRODUCT_CATEGORY_4IsSet)
    {
        val[utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_4"))] = ModelBase::toJson(m_GOOGLE_PRODUCT_CATEGORY_4);
    }
    if(m_GOOGLE_PRODUCT_CATEGORY_3IsSet)
    {
        val[utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_3"))] = ModelBase::toJson(m_GOOGLE_PRODUCT_CATEGORY_3);
    }
    if(m_GOOGLE_PRODUCT_CATEGORY_2IsSet)
    {
        val[utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_2"))] = ModelBase::toJson(m_GOOGLE_PRODUCT_CATEGORY_2);
    }
    if(m_GOOGLE_PRODUCT_CATEGORY_1IsSet)
    {
        val[utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_1"))] = ModelBase::toJson(m_GOOGLE_PRODUCT_CATEGORY_1);
    }
    if(m_GOOGLE_PRODUCT_CATEGORY_0IsSet)
    {
        val[utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_0"))] = ModelBase::toJson(m_GOOGLE_PRODUCT_CATEGORY_0);
    }
    if(m_MEDIA_TYPEIsSet)
    {
        val[utility::conversions::to_string_t(U("MEDIA_TYPE"))] = ModelBase::toJson(m_MEDIA_TYPE);
    }

    return val;
}

bool CatalogsCreativeAssetsProductGroupFilterKeys::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("CREATIVE_ASSETS_ID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CREATIVE_ASSETS_ID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCREATIVEASSETSID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCREATIVEASSETSID);
            setCREATIVEASSETSID(refVal_setCREATIVEASSETSID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CUSTOM_LABEL_0"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CUSTOM_LABEL_0")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCUSTOMLABEL0;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCUSTOMLABEL0);
            setCUSTOMLABEL0(refVal_setCUSTOMLABEL0);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CUSTOM_LABEL_1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CUSTOM_LABEL_1")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCUSTOMLABEL1;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCUSTOMLABEL1);
            setCUSTOMLABEL1(refVal_setCUSTOMLABEL1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CUSTOM_LABEL_2"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CUSTOM_LABEL_2")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCUSTOMLABEL2;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCUSTOMLABEL2);
            setCUSTOMLABEL2(refVal_setCUSTOMLABEL2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CUSTOM_LABEL_3"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CUSTOM_LABEL_3")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCUSTOMLABEL3;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCUSTOMLABEL3);
            setCUSTOMLABEL3(refVal_setCUSTOMLABEL3);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CUSTOM_LABEL_4"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CUSTOM_LABEL_4")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCUSTOMLABEL4;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCUSTOMLABEL4);
            setCUSTOMLABEL4(refVal_setCUSTOMLABEL4);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_6"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_6")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setGOOGLEPRODUCTCATEGORY6;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGOOGLEPRODUCTCATEGORY6);
            setGOOGLEPRODUCTCATEGORY6(refVal_setGOOGLEPRODUCTCATEGORY6);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_5"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_5")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setGOOGLEPRODUCTCATEGORY5;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGOOGLEPRODUCTCATEGORY5);
            setGOOGLEPRODUCTCATEGORY5(refVal_setGOOGLEPRODUCTCATEGORY5);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_4"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_4")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setGOOGLEPRODUCTCATEGORY4;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGOOGLEPRODUCTCATEGORY4);
            setGOOGLEPRODUCTCATEGORY4(refVal_setGOOGLEPRODUCTCATEGORY4);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_3"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_3")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setGOOGLEPRODUCTCATEGORY3;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGOOGLEPRODUCTCATEGORY3);
            setGOOGLEPRODUCTCATEGORY3(refVal_setGOOGLEPRODUCTCATEGORY3);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_2"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_2")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setGOOGLEPRODUCTCATEGORY2;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGOOGLEPRODUCTCATEGORY2);
            setGOOGLEPRODUCTCATEGORY2(refVal_setGOOGLEPRODUCTCATEGORY2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_1")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setGOOGLEPRODUCTCATEGORY1;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGOOGLEPRODUCTCATEGORY1);
            setGOOGLEPRODUCTCATEGORY1(refVal_setGOOGLEPRODUCTCATEGORY1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_0"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_0")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setGOOGLEPRODUCTCATEGORY0;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGOOGLEPRODUCTCATEGORY0);
            setGOOGLEPRODUCTCATEGORY0(refVal_setGOOGLEPRODUCTCATEGORY0);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MEDIA_TYPE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MEDIA_TYPE")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleMediaTypesCriteria> refVal_setMEDIATYPE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMEDIATYPE);
            setMEDIATYPE(refVal_setMEDIATYPE);
        }
    }
    return ok;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CREATIVE_ASSETS_IDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CREATIVE_ASSETS_ID")), m_CREATIVE_ASSETS_ID));
    }
    if(m_CUSTOM_LABEL_0IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CUSTOM_LABEL_0")), m_CUSTOM_LABEL_0));
    }
    if(m_CUSTOM_LABEL_1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CUSTOM_LABEL_1")), m_CUSTOM_LABEL_1));
    }
    if(m_CUSTOM_LABEL_2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CUSTOM_LABEL_2")), m_CUSTOM_LABEL_2));
    }
    if(m_CUSTOM_LABEL_3IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CUSTOM_LABEL_3")), m_CUSTOM_LABEL_3));
    }
    if(m_CUSTOM_LABEL_4IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CUSTOM_LABEL_4")), m_CUSTOM_LABEL_4));
    }
    if(m_GOOGLE_PRODUCT_CATEGORY_6IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_6")), m_GOOGLE_PRODUCT_CATEGORY_6));
    }
    if(m_GOOGLE_PRODUCT_CATEGORY_5IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_5")), m_GOOGLE_PRODUCT_CATEGORY_5));
    }
    if(m_GOOGLE_PRODUCT_CATEGORY_4IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_4")), m_GOOGLE_PRODUCT_CATEGORY_4));
    }
    if(m_GOOGLE_PRODUCT_CATEGORY_3IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_3")), m_GOOGLE_PRODUCT_CATEGORY_3));
    }
    if(m_GOOGLE_PRODUCT_CATEGORY_2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_2")), m_GOOGLE_PRODUCT_CATEGORY_2));
    }
    if(m_GOOGLE_PRODUCT_CATEGORY_1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_1")), m_GOOGLE_PRODUCT_CATEGORY_1));
    }
    if(m_GOOGLE_PRODUCT_CATEGORY_0IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_0")), m_GOOGLE_PRODUCT_CATEGORY_0));
    }
    if(m_MEDIA_TYPEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MEDIA_TYPE")), m_MEDIA_TYPE));
    }
}

bool CatalogsCreativeAssetsProductGroupFilterKeys::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("CREATIVE_ASSETS_ID"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCREATIVEASSETSID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CREATIVE_ASSETS_ID"))), refVal_setCREATIVEASSETSID );
        setCREATIVEASSETSID(refVal_setCREATIVEASSETSID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_0"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCUSTOMLABEL0;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_0"))), refVal_setCUSTOMLABEL0 );
        setCUSTOMLABEL0(refVal_setCUSTOMLABEL0);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_1"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCUSTOMLABEL1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_1"))), refVal_setCUSTOMLABEL1 );
        setCUSTOMLABEL1(refVal_setCUSTOMLABEL1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_2"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCUSTOMLABEL2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_2"))), refVal_setCUSTOMLABEL2 );
        setCUSTOMLABEL2(refVal_setCUSTOMLABEL2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_3"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCUSTOMLABEL3;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_3"))), refVal_setCUSTOMLABEL3 );
        setCUSTOMLABEL3(refVal_setCUSTOMLABEL3);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_4"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCUSTOMLABEL4;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_4"))), refVal_setCUSTOMLABEL4 );
        setCUSTOMLABEL4(refVal_setCUSTOMLABEL4);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_6"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setGOOGLEPRODUCTCATEGORY6;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_6"))), refVal_setGOOGLEPRODUCTCATEGORY6 );
        setGOOGLEPRODUCTCATEGORY6(refVal_setGOOGLEPRODUCTCATEGORY6);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_5"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setGOOGLEPRODUCTCATEGORY5;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_5"))), refVal_setGOOGLEPRODUCTCATEGORY5 );
        setGOOGLEPRODUCTCATEGORY5(refVal_setGOOGLEPRODUCTCATEGORY5);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_4"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setGOOGLEPRODUCTCATEGORY4;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_4"))), refVal_setGOOGLEPRODUCTCATEGORY4 );
        setGOOGLEPRODUCTCATEGORY4(refVal_setGOOGLEPRODUCTCATEGORY4);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_3"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setGOOGLEPRODUCTCATEGORY3;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_3"))), refVal_setGOOGLEPRODUCTCATEGORY3 );
        setGOOGLEPRODUCTCATEGORY3(refVal_setGOOGLEPRODUCTCATEGORY3);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_2"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setGOOGLEPRODUCTCATEGORY2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_2"))), refVal_setGOOGLEPRODUCTCATEGORY2 );
        setGOOGLEPRODUCTCATEGORY2(refVal_setGOOGLEPRODUCTCATEGORY2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_1"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setGOOGLEPRODUCTCATEGORY1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_1"))), refVal_setGOOGLEPRODUCTCATEGORY1 );
        setGOOGLEPRODUCTCATEGORY1(refVal_setGOOGLEPRODUCTCATEGORY1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_0"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> refVal_setGOOGLEPRODUCTCATEGORY0;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("GOOGLE_PRODUCT_CATEGORY_0"))), refVal_setGOOGLEPRODUCTCATEGORY0 );
        setGOOGLEPRODUCTCATEGORY0(refVal_setGOOGLEPRODUCTCATEGORY0);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MEDIA_TYPE"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleMediaTypesCriteria> refVal_setMEDIATYPE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MEDIA_TYPE"))), refVal_setMEDIATYPE );
        setMEDIATYPE(refVal_setMEDIATYPE);
    }
    return ok;
}

std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> CatalogsCreativeAssetsProductGroupFilterKeys::getCREATIVEASSETSID() const
{
    return m_CREATIVE_ASSETS_ID;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::setCREATIVEASSETSID(const std::shared_ptr<CatalogsProductGroupMultipleStringCriteria>& value)
{
    m_CREATIVE_ASSETS_ID = value;
    m_CREATIVE_ASSETS_IDIsSet = true;
}

bool CatalogsCreativeAssetsProductGroupFilterKeys::cREATIVEASSETSIDIsSet() const
{
    return m_CREATIVE_ASSETS_IDIsSet;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::unsetCREATIVE_ASSETS_ID()
{
    m_CREATIVE_ASSETS_IDIsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> CatalogsCreativeAssetsProductGroupFilterKeys::getCUSTOMLABEL0() const
{
    return m_CUSTOM_LABEL_0;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::setCUSTOMLABEL0(const std::shared_ptr<CatalogsProductGroupMultipleStringCriteria>& value)
{
    m_CUSTOM_LABEL_0 = value;
    m_CUSTOM_LABEL_0IsSet = true;
}

bool CatalogsCreativeAssetsProductGroupFilterKeys::cUSTOMLABEL0IsSet() const
{
    return m_CUSTOM_LABEL_0IsSet;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::unsetCUSTOM_LABEL_0()
{
    m_CUSTOM_LABEL_0IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> CatalogsCreativeAssetsProductGroupFilterKeys::getCUSTOMLABEL1() const
{
    return m_CUSTOM_LABEL_1;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::setCUSTOMLABEL1(const std::shared_ptr<CatalogsProductGroupMultipleStringCriteria>& value)
{
    m_CUSTOM_LABEL_1 = value;
    m_CUSTOM_LABEL_1IsSet = true;
}

bool CatalogsCreativeAssetsProductGroupFilterKeys::cUSTOMLABEL1IsSet() const
{
    return m_CUSTOM_LABEL_1IsSet;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::unsetCUSTOM_LABEL_1()
{
    m_CUSTOM_LABEL_1IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> CatalogsCreativeAssetsProductGroupFilterKeys::getCUSTOMLABEL2() const
{
    return m_CUSTOM_LABEL_2;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::setCUSTOMLABEL2(const std::shared_ptr<CatalogsProductGroupMultipleStringCriteria>& value)
{
    m_CUSTOM_LABEL_2 = value;
    m_CUSTOM_LABEL_2IsSet = true;
}

bool CatalogsCreativeAssetsProductGroupFilterKeys::cUSTOMLABEL2IsSet() const
{
    return m_CUSTOM_LABEL_2IsSet;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::unsetCUSTOM_LABEL_2()
{
    m_CUSTOM_LABEL_2IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> CatalogsCreativeAssetsProductGroupFilterKeys::getCUSTOMLABEL3() const
{
    return m_CUSTOM_LABEL_3;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::setCUSTOMLABEL3(const std::shared_ptr<CatalogsProductGroupMultipleStringCriteria>& value)
{
    m_CUSTOM_LABEL_3 = value;
    m_CUSTOM_LABEL_3IsSet = true;
}

bool CatalogsCreativeAssetsProductGroupFilterKeys::cUSTOMLABEL3IsSet() const
{
    return m_CUSTOM_LABEL_3IsSet;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::unsetCUSTOM_LABEL_3()
{
    m_CUSTOM_LABEL_3IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> CatalogsCreativeAssetsProductGroupFilterKeys::getCUSTOMLABEL4() const
{
    return m_CUSTOM_LABEL_4;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::setCUSTOMLABEL4(const std::shared_ptr<CatalogsProductGroupMultipleStringCriteria>& value)
{
    m_CUSTOM_LABEL_4 = value;
    m_CUSTOM_LABEL_4IsSet = true;
}

bool CatalogsCreativeAssetsProductGroupFilterKeys::cUSTOMLABEL4IsSet() const
{
    return m_CUSTOM_LABEL_4IsSet;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::unsetCUSTOM_LABEL_4()
{
    m_CUSTOM_LABEL_4IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> CatalogsCreativeAssetsProductGroupFilterKeys::getGOOGLEPRODUCTCATEGORY6() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_6;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::setGOOGLEPRODUCTCATEGORY6(const std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria>& value)
{
    m_GOOGLE_PRODUCT_CATEGORY_6 = value;
    m_GOOGLE_PRODUCT_CATEGORY_6IsSet = true;
}

bool CatalogsCreativeAssetsProductGroupFilterKeys::gOOGLEPRODUCTCATEGORY6IsSet() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_6IsSet;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::unsetGOOGLE_PRODUCT_CATEGORY_6()
{
    m_GOOGLE_PRODUCT_CATEGORY_6IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> CatalogsCreativeAssetsProductGroupFilterKeys::getGOOGLEPRODUCTCATEGORY5() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_5;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::setGOOGLEPRODUCTCATEGORY5(const std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria>& value)
{
    m_GOOGLE_PRODUCT_CATEGORY_5 = value;
    m_GOOGLE_PRODUCT_CATEGORY_5IsSet = true;
}

bool CatalogsCreativeAssetsProductGroupFilterKeys::gOOGLEPRODUCTCATEGORY5IsSet() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_5IsSet;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::unsetGOOGLE_PRODUCT_CATEGORY_5()
{
    m_GOOGLE_PRODUCT_CATEGORY_5IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> CatalogsCreativeAssetsProductGroupFilterKeys::getGOOGLEPRODUCTCATEGORY4() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_4;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::setGOOGLEPRODUCTCATEGORY4(const std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria>& value)
{
    m_GOOGLE_PRODUCT_CATEGORY_4 = value;
    m_GOOGLE_PRODUCT_CATEGORY_4IsSet = true;
}

bool CatalogsCreativeAssetsProductGroupFilterKeys::gOOGLEPRODUCTCATEGORY4IsSet() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_4IsSet;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::unsetGOOGLE_PRODUCT_CATEGORY_4()
{
    m_GOOGLE_PRODUCT_CATEGORY_4IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> CatalogsCreativeAssetsProductGroupFilterKeys::getGOOGLEPRODUCTCATEGORY3() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_3;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::setGOOGLEPRODUCTCATEGORY3(const std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria>& value)
{
    m_GOOGLE_PRODUCT_CATEGORY_3 = value;
    m_GOOGLE_PRODUCT_CATEGORY_3IsSet = true;
}

bool CatalogsCreativeAssetsProductGroupFilterKeys::gOOGLEPRODUCTCATEGORY3IsSet() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_3IsSet;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::unsetGOOGLE_PRODUCT_CATEGORY_3()
{
    m_GOOGLE_PRODUCT_CATEGORY_3IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> CatalogsCreativeAssetsProductGroupFilterKeys::getGOOGLEPRODUCTCATEGORY2() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_2;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::setGOOGLEPRODUCTCATEGORY2(const std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria>& value)
{
    m_GOOGLE_PRODUCT_CATEGORY_2 = value;
    m_GOOGLE_PRODUCT_CATEGORY_2IsSet = true;
}

bool CatalogsCreativeAssetsProductGroupFilterKeys::gOOGLEPRODUCTCATEGORY2IsSet() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_2IsSet;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::unsetGOOGLE_PRODUCT_CATEGORY_2()
{
    m_GOOGLE_PRODUCT_CATEGORY_2IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> CatalogsCreativeAssetsProductGroupFilterKeys::getGOOGLEPRODUCTCATEGORY1() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_1;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::setGOOGLEPRODUCTCATEGORY1(const std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria>& value)
{
    m_GOOGLE_PRODUCT_CATEGORY_1 = value;
    m_GOOGLE_PRODUCT_CATEGORY_1IsSet = true;
}

bool CatalogsCreativeAssetsProductGroupFilterKeys::gOOGLEPRODUCTCATEGORY1IsSet() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_1IsSet;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::unsetGOOGLE_PRODUCT_CATEGORY_1()
{
    m_GOOGLE_PRODUCT_CATEGORY_1IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria> CatalogsCreativeAssetsProductGroupFilterKeys::getGOOGLEPRODUCTCATEGORY0() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_0;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::setGOOGLEPRODUCTCATEGORY0(const std::shared_ptr<CatalogsProductGroupMultipleStringListCriteria>& value)
{
    m_GOOGLE_PRODUCT_CATEGORY_0 = value;
    m_GOOGLE_PRODUCT_CATEGORY_0IsSet = true;
}

bool CatalogsCreativeAssetsProductGroupFilterKeys::gOOGLEPRODUCTCATEGORY0IsSet() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_0IsSet;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::unsetGOOGLE_PRODUCT_CATEGORY_0()
{
    m_GOOGLE_PRODUCT_CATEGORY_0IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleMediaTypesCriteria> CatalogsCreativeAssetsProductGroupFilterKeys::getMEDIATYPE() const
{
    return m_MEDIA_TYPE;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::setMEDIATYPE(const std::shared_ptr<CatalogsProductGroupMultipleMediaTypesCriteria>& value)
{
    m_MEDIA_TYPE = value;
    m_MEDIA_TYPEIsSet = true;
}

bool CatalogsCreativeAssetsProductGroupFilterKeys::mEDIATYPEIsSet() const
{
    return m_MEDIA_TYPEIsSet;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::unsetMEDIA_TYPE()
{
    m_MEDIA_TYPEIsSet = false;
}
}
}
}
}


