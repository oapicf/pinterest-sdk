/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateMMMReportRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CreateMMMReportRequest::CreateMMMReportRequest()
{
    m_Report_name = utility::conversions::to_string_t("");
    m_Report_nameIsSet = false;
    m_Start_date = utility::conversions::to_string_t("");
    m_Start_dateIsSet = false;
    m_End_date = utility::conversions::to_string_t("");
    m_End_dateIsSet = false;
    m_Granularity = utility::conversions::to_string_t("");
    m_GranularityIsSet = false;
    m_Level = utility::conversions::to_string_t("");
    m_LevelIsSet = false;
    m_Targeting_typesIsSet = false;
    m_ColumnsIsSet = false;
    m_CountriesIsSet = false;
}

CreateMMMReportRequest::~CreateMMMReportRequest()
{
}

void CreateMMMReportRequest::validate()
{
    // TODO: implement validation
}

web::json::value CreateMMMReportRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Report_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("report_name"))] = ModelBase::toJson(m_Report_name);
    }
    if(m_Start_dateIsSet)
    {
        val[utility::conversions::to_string_t(U("start_date"))] = ModelBase::toJson(m_Start_date);
    }
    if(m_End_dateIsSet)
    {
        val[utility::conversions::to_string_t(U("end_date"))] = ModelBase::toJson(m_End_date);
    }
    if(m_GranularityIsSet)
    {
        val[utility::conversions::to_string_t(U("granularity"))] = ModelBase::toJson(m_Granularity);
    }
    if(m_LevelIsSet)
    {
        val[utility::conversions::to_string_t(U("level"))] = ModelBase::toJson(m_Level);
    }
    if(m_Targeting_typesIsSet)
    {
        val[utility::conversions::to_string_t(U("targeting_types"))] = ModelBase::toJson(m_Targeting_types);
    }
    if(m_ColumnsIsSet)
    {
        val[utility::conversions::to_string_t(U("columns"))] = ModelBase::toJson(m_Columns);
    }
    if(m_CountriesIsSet)
    {
        val[utility::conversions::to_string_t(U("countries"))] = ModelBase::toJson(m_Countries);
    }

    return val;
}

bool CreateMMMReportRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("report_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("report_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setReportName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReportName);
            setReportName(refVal_setReportName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("start_date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("start_date")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStartDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStartDate);
            setStartDate(refVal_setStartDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("end_date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("end_date")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEndDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEndDate);
            setEndDate(refVal_setEndDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("granularity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("granularity")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGranularity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGranularity);
            setGranularity(refVal_setGranularity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("level"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("level")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLevel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLevel);
            setLevel(refVal_setLevel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("targeting_types"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("targeting_types")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<MMMReportingTargetingType>> refVal_setTargetingTypes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTargetingTypes);
            setTargetingTypes(refVal_setTargetingTypes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("columns"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("columns")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<MMMReportingColumn>> refVal_setColumns;
            ok &= ModelBase::fromJson(fieldValue, refVal_setColumns);
            setColumns(refVal_setColumns);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("countries"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("countries")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<TargetingAdvertiserCountry>> refVal_setCountries;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCountries);
            setCountries(refVal_setCountries);
        }
    }
    return ok;
}

void CreateMMMReportRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Report_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("report_name")), m_Report_name));
    }
    if(m_Start_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("start_date")), m_Start_date));
    }
    if(m_End_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("end_date")), m_End_date));
    }
    if(m_GranularityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("granularity")), m_Granularity));
    }
    if(m_LevelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("level")), m_Level));
    }
    if(m_Targeting_typesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("targeting_types")), m_Targeting_types));
    }
    if(m_ColumnsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("columns")), m_Columns));
    }
    if(m_CountriesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("countries")), m_Countries));
    }
}

bool CreateMMMReportRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("report_name"))))
    {
        utility::string_t refVal_setReportName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("report_name"))), refVal_setReportName );
        setReportName(refVal_setReportName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("start_date"))))
    {
        utility::string_t refVal_setStartDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("start_date"))), refVal_setStartDate );
        setStartDate(refVal_setStartDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("end_date"))))
    {
        utility::string_t refVal_setEndDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("end_date"))), refVal_setEndDate );
        setEndDate(refVal_setEndDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("granularity"))))
    {
        utility::string_t refVal_setGranularity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("granularity"))), refVal_setGranularity );
        setGranularity(refVal_setGranularity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("level"))))
    {
        utility::string_t refVal_setLevel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("level"))), refVal_setLevel );
        setLevel(refVal_setLevel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("targeting_types"))))
    {
        std::vector<std::shared_ptr<MMMReportingTargetingType>> refVal_setTargetingTypes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("targeting_types"))), refVal_setTargetingTypes );
        setTargetingTypes(refVal_setTargetingTypes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("columns"))))
    {
        std::vector<std::shared_ptr<MMMReportingColumn>> refVal_setColumns;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("columns"))), refVal_setColumns );
        setColumns(refVal_setColumns);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("countries"))))
    {
        std::vector<std::shared_ptr<TargetingAdvertiserCountry>> refVal_setCountries;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("countries"))), refVal_setCountries );
        setCountries(refVal_setCountries);
    }
    return ok;
}

utility::string_t CreateMMMReportRequest::getReportName() const
{
    return m_Report_name;
}

void CreateMMMReportRequest::setReportName(const utility::string_t& value)
{
    m_Report_name = value;
    m_Report_nameIsSet = true;
}

bool CreateMMMReportRequest::reportNameIsSet() const
{
    return m_Report_nameIsSet;
}

void CreateMMMReportRequest::unsetReport_name()
{
    m_Report_nameIsSet = false;
}
utility::string_t CreateMMMReportRequest::getStartDate() const
{
    return m_Start_date;
}

void CreateMMMReportRequest::setStartDate(const utility::string_t& value)
{
    m_Start_date = value;
    m_Start_dateIsSet = true;
}

bool CreateMMMReportRequest::startDateIsSet() const
{
    return m_Start_dateIsSet;
}

void CreateMMMReportRequest::unsetStart_date()
{
    m_Start_dateIsSet = false;
}
utility::string_t CreateMMMReportRequest::getEndDate() const
{
    return m_End_date;
}

void CreateMMMReportRequest::setEndDate(const utility::string_t& value)
{
    m_End_date = value;
    m_End_dateIsSet = true;
}

bool CreateMMMReportRequest::endDateIsSet() const
{
    return m_End_dateIsSet;
}

void CreateMMMReportRequest::unsetEnd_date()
{
    m_End_dateIsSet = false;
}
utility::string_t CreateMMMReportRequest::getGranularity() const
{
    return m_Granularity;
}

void CreateMMMReportRequest::setGranularity(const utility::string_t& value)
{
    m_Granularity = value;
    m_GranularityIsSet = true;
}

bool CreateMMMReportRequest::granularityIsSet() const
{
    return m_GranularityIsSet;
}

void CreateMMMReportRequest::unsetGranularity()
{
    m_GranularityIsSet = false;
}
utility::string_t CreateMMMReportRequest::getLevel() const
{
    return m_Level;
}

void CreateMMMReportRequest::setLevel(const utility::string_t& value)
{
    m_Level = value;
    m_LevelIsSet = true;
}

bool CreateMMMReportRequest::levelIsSet() const
{
    return m_LevelIsSet;
}

void CreateMMMReportRequest::unsetLevel()
{
    m_LevelIsSet = false;
}
std::vector<std::shared_ptr<MMMReportingTargetingType>>& CreateMMMReportRequest::getTargetingTypes()
{
    return m_Targeting_types;
}

void CreateMMMReportRequest::setTargetingTypes(const std::vector<std::shared_ptr<MMMReportingTargetingType>>& value)
{
    m_Targeting_types = value;
    m_Targeting_typesIsSet = true;
}

bool CreateMMMReportRequest::targetingTypesIsSet() const
{
    return m_Targeting_typesIsSet;
}

void CreateMMMReportRequest::unsetTargeting_types()
{
    m_Targeting_typesIsSet = false;
}
std::vector<std::shared_ptr<MMMReportingColumn>>& CreateMMMReportRequest::getColumns()
{
    return m_Columns;
}

void CreateMMMReportRequest::setColumns(const std::vector<std::shared_ptr<MMMReportingColumn>>& value)
{
    m_Columns = value;
    m_ColumnsIsSet = true;
}

bool CreateMMMReportRequest::columnsIsSet() const
{
    return m_ColumnsIsSet;
}

void CreateMMMReportRequest::unsetColumns()
{
    m_ColumnsIsSet = false;
}
std::vector<std::shared_ptr<TargetingAdvertiserCountry>>& CreateMMMReportRequest::getCountries()
{
    return m_Countries;
}

void CreateMMMReportRequest::setCountries(const std::vector<std::shared_ptr<TargetingAdvertiserCountry>>& value)
{
    m_Countries = value;
    m_CountriesIsSet = true;
}

bool CreateMMMReportRequest::countriesIsSet() const
{
    return m_CountriesIsSet;
}

void CreateMMMReportRequest::unsetCountries()
{
    m_CountriesIsSet = false;
}
}
}
}
}


