/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/OptimizationGoalMetadata_conversion_tag_v3_goal_metadata.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OptimizationGoalMetadata_conversion_tag_v3_goal_metadata::OptimizationGoalMetadata_conversion_tag_v3_goal_metadata()
{
    m_Attribution_windowsIsSet = false;
    m_Conversion_event = utility::conversions::to_string_t("");
    m_Conversion_eventIsSet = false;
    m_Conversion_tag_id = utility::conversions::to_string_t("");
    m_Conversion_tag_idIsSet = false;
    m_Cpa_goal_value_in_micro_currency = utility::conversions::to_string_t("");
    m_Cpa_goal_value_in_micro_currencyIsSet = false;
    m_Is_roas_optimized = false;
    m_Is_roas_optimizedIsSet = false;
    m_Learning_mode_type = utility::conversions::to_string_t("");
    m_Learning_mode_typeIsSet = false;
}

OptimizationGoalMetadata_conversion_tag_v3_goal_metadata::~OptimizationGoalMetadata_conversion_tag_v3_goal_metadata()
{
}

void OptimizationGoalMetadata_conversion_tag_v3_goal_metadata::validate()
{
    // TODO: implement validation
}

web::json::value OptimizationGoalMetadata_conversion_tag_v3_goal_metadata::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Attribution_windowsIsSet)
    {
        val[utility::conversions::to_string_t(U("attribution_windows"))] = ModelBase::toJson(m_Attribution_windows);
    }
    if(m_Conversion_eventIsSet)
    {
        val[utility::conversions::to_string_t(U("conversion_event"))] = ModelBase::toJson(m_Conversion_event);
    }
    if(m_Conversion_tag_idIsSet)
    {
        val[utility::conversions::to_string_t(U("conversion_tag_id"))] = ModelBase::toJson(m_Conversion_tag_id);
    }
    if(m_Cpa_goal_value_in_micro_currencyIsSet)
    {
        val[utility::conversions::to_string_t(U("cpa_goal_value_in_micro_currency"))] = ModelBase::toJson(m_Cpa_goal_value_in_micro_currency);
    }
    if(m_Is_roas_optimizedIsSet)
    {
        val[utility::conversions::to_string_t(U("is_roas_optimized"))] = ModelBase::toJson(m_Is_roas_optimized);
    }
    if(m_Learning_mode_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("learning_mode_type"))] = ModelBase::toJson(m_Learning_mode_type);
    }

    return val;
}

bool OptimizationGoalMetadata_conversion_tag_v3_goal_metadata::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("attribution_windows"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("attribution_windows")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows> refVal_setAttributionWindows;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAttributionWindows);
            setAttributionWindows(refVal_setAttributionWindows);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("conversion_event"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("conversion_event")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setConversionEvent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConversionEvent);
            setConversionEvent(refVal_setConversionEvent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("conversion_tag_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("conversion_tag_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setConversionTagId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConversionTagId);
            setConversionTagId(refVal_setConversionTagId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cpa_goal_value_in_micro_currency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cpa_goal_value_in_micro_currency")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCpaGoalValueInMicroCurrency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCpaGoalValueInMicroCurrency);
            setCpaGoalValueInMicroCurrency(refVal_setCpaGoalValueInMicroCurrency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_roas_optimized"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_roas_optimized")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsRoasOptimized;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsRoasOptimized);
            setIsRoasOptimized(refVal_setIsRoasOptimized);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("learning_mode_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("learning_mode_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLearningModeType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLearningModeType);
            setLearningModeType(refVal_setLearningModeType);
        }
    }
    return ok;
}

void OptimizationGoalMetadata_conversion_tag_v3_goal_metadata::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Attribution_windowsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("attribution_windows")), m_Attribution_windows));
    }
    if(m_Conversion_eventIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("conversion_event")), m_Conversion_event));
    }
    if(m_Conversion_tag_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("conversion_tag_id")), m_Conversion_tag_id));
    }
    if(m_Cpa_goal_value_in_micro_currencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cpa_goal_value_in_micro_currency")), m_Cpa_goal_value_in_micro_currency));
    }
    if(m_Is_roas_optimizedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_roas_optimized")), m_Is_roas_optimized));
    }
    if(m_Learning_mode_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("learning_mode_type")), m_Learning_mode_type));
    }
}

bool OptimizationGoalMetadata_conversion_tag_v3_goal_metadata::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("attribution_windows"))))
    {
        std::shared_ptr<OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows> refVal_setAttributionWindows;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("attribution_windows"))), refVal_setAttributionWindows );
        setAttributionWindows(refVal_setAttributionWindows);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("conversion_event"))))
    {
        utility::string_t refVal_setConversionEvent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("conversion_event"))), refVal_setConversionEvent );
        setConversionEvent(refVal_setConversionEvent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("conversion_tag_id"))))
    {
        utility::string_t refVal_setConversionTagId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("conversion_tag_id"))), refVal_setConversionTagId );
        setConversionTagId(refVal_setConversionTagId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cpa_goal_value_in_micro_currency"))))
    {
        utility::string_t refVal_setCpaGoalValueInMicroCurrency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cpa_goal_value_in_micro_currency"))), refVal_setCpaGoalValueInMicroCurrency );
        setCpaGoalValueInMicroCurrency(refVal_setCpaGoalValueInMicroCurrency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_roas_optimized"))))
    {
        bool refVal_setIsRoasOptimized;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_roas_optimized"))), refVal_setIsRoasOptimized );
        setIsRoasOptimized(refVal_setIsRoasOptimized);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("learning_mode_type"))))
    {
        utility::string_t refVal_setLearningModeType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("learning_mode_type"))), refVal_setLearningModeType );
        setLearningModeType(refVal_setLearningModeType);
    }
    return ok;
}

std::shared_ptr<OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows> OptimizationGoalMetadata_conversion_tag_v3_goal_metadata::getAttributionWindows() const
{
    return m_Attribution_windows;
}

void OptimizationGoalMetadata_conversion_tag_v3_goal_metadata::setAttributionWindows(const std::shared_ptr<OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows>& value)
{
    m_Attribution_windows = value;
    m_Attribution_windowsIsSet = true;
}

bool OptimizationGoalMetadata_conversion_tag_v3_goal_metadata::attributionWindowsIsSet() const
{
    return m_Attribution_windowsIsSet;
}

void OptimizationGoalMetadata_conversion_tag_v3_goal_metadata::unsetAttribution_windows()
{
    m_Attribution_windowsIsSet = false;
}
utility::string_t OptimizationGoalMetadata_conversion_tag_v3_goal_metadata::getConversionEvent() const
{
    return m_Conversion_event;
}

void OptimizationGoalMetadata_conversion_tag_v3_goal_metadata::setConversionEvent(const utility::string_t& value)
{
    m_Conversion_event = value;
    m_Conversion_eventIsSet = true;
}

bool OptimizationGoalMetadata_conversion_tag_v3_goal_metadata::conversionEventIsSet() const
{
    return m_Conversion_eventIsSet;
}

void OptimizationGoalMetadata_conversion_tag_v3_goal_metadata::unsetConversion_event()
{
    m_Conversion_eventIsSet = false;
}
utility::string_t OptimizationGoalMetadata_conversion_tag_v3_goal_metadata::getConversionTagId() const
{
    return m_Conversion_tag_id;
}

void OptimizationGoalMetadata_conversion_tag_v3_goal_metadata::setConversionTagId(const utility::string_t& value)
{
    m_Conversion_tag_id = value;
    m_Conversion_tag_idIsSet = true;
}

bool OptimizationGoalMetadata_conversion_tag_v3_goal_metadata::conversionTagIdIsSet() const
{
    return m_Conversion_tag_idIsSet;
}

void OptimizationGoalMetadata_conversion_tag_v3_goal_metadata::unsetConversion_tag_id()
{
    m_Conversion_tag_idIsSet = false;
}
utility::string_t OptimizationGoalMetadata_conversion_tag_v3_goal_metadata::getCpaGoalValueInMicroCurrency() const
{
    return m_Cpa_goal_value_in_micro_currency;
}

void OptimizationGoalMetadata_conversion_tag_v3_goal_metadata::setCpaGoalValueInMicroCurrency(const utility::string_t& value)
{
    m_Cpa_goal_value_in_micro_currency = value;
    m_Cpa_goal_value_in_micro_currencyIsSet = true;
}

bool OptimizationGoalMetadata_conversion_tag_v3_goal_metadata::cpaGoalValueInMicroCurrencyIsSet() const
{
    return m_Cpa_goal_value_in_micro_currencyIsSet;
}

void OptimizationGoalMetadata_conversion_tag_v3_goal_metadata::unsetCpa_goal_value_in_micro_currency()
{
    m_Cpa_goal_value_in_micro_currencyIsSet = false;
}
bool OptimizationGoalMetadata_conversion_tag_v3_goal_metadata::isIsRoasOptimized() const
{
    return m_Is_roas_optimized;
}

void OptimizationGoalMetadata_conversion_tag_v3_goal_metadata::setIsRoasOptimized(bool value)
{
    m_Is_roas_optimized = value;
    m_Is_roas_optimizedIsSet = true;
}

bool OptimizationGoalMetadata_conversion_tag_v3_goal_metadata::isRoasOptimizedIsSet() const
{
    return m_Is_roas_optimizedIsSet;
}

void OptimizationGoalMetadata_conversion_tag_v3_goal_metadata::unsetIs_roas_optimized()
{
    m_Is_roas_optimizedIsSet = false;
}
utility::string_t OptimizationGoalMetadata_conversion_tag_v3_goal_metadata::getLearningModeType() const
{
    return m_Learning_mode_type;
}

void OptimizationGoalMetadata_conversion_tag_v3_goal_metadata::setLearningModeType(const utility::string_t& value)
{
    m_Learning_mode_type = value;
    m_Learning_mode_typeIsSet = true;
}

bool OptimizationGoalMetadata_conversion_tag_v3_goal_metadata::learningModeTypeIsSet() const
{
    return m_Learning_mode_typeIsSet;
}

void OptimizationGoalMetadata_conversion_tag_v3_goal_metadata::unsetLearning_mode_type()
{
    m_Learning_mode_typeIsSet = false;
}
}
}
}
}


