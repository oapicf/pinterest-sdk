/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CatalogsLocale.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


namespace
{
using EnumUnderlyingType = utility::string_t;

CatalogsLocale::eCatalogsLocale toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("af-ZA")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_AF_ZA;
    if (val == utility::conversions::to_string_t(U("ar-SA")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_AR_SA;
    if (val == utility::conversions::to_string_t(U("bg-BG")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_BG_BG;
    if (val == utility::conversions::to_string_t(U("bn-IN")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_BN_IN;
    if (val == utility::conversions::to_string_t(U("cs-CZ")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_CS_CZ;
    if (val == utility::conversions::to_string_t(U("da-DK")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_DA_DK;
    if (val == utility::conversions::to_string_t(U("de")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_DE;
    if (val == utility::conversions::to_string_t(U("el-GR")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_EL_GR;
    if (val == utility::conversions::to_string_t(U("en-AU")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_EN_AU;
    if (val == utility::conversions::to_string_t(U("en-CA")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_EN_CA;
    if (val == utility::conversions::to_string_t(U("en-GB")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_EN_GB;
    if (val == utility::conversions::to_string_t(U("en-IN")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_EN_IN;
    if (val == utility::conversions::to_string_t(U("en-US")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_EN_US;
    if (val == utility::conversions::to_string_t(U("es-419")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_ES_419;
    if (val == utility::conversions::to_string_t(U("es-AR")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_ES_AR;
    if (val == utility::conversions::to_string_t(U("es-ES")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_ES_ES;
    if (val == utility::conversions::to_string_t(U("es-MX")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_ES_MX;
    if (val == utility::conversions::to_string_t(U("fi-FI")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_FI_FI;
    if (val == utility::conversions::to_string_t(U("fr")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_FR;
    if (val == utility::conversions::to_string_t(U("fr-CA")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_FR_CA;
    if (val == utility::conversions::to_string_t(U("he-IL")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_HE_IL;
    if (val == utility::conversions::to_string_t(U("hi-IN")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_HI_IN;
    if (val == utility::conversions::to_string_t(U("hr-HR")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_HR_HR;
    if (val == utility::conversions::to_string_t(U("hu-HU")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_HU_HU;
    if (val == utility::conversions::to_string_t(U("id-ID")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_ID_ID;
    if (val == utility::conversions::to_string_t(U("it")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_IT;
    if (val == utility::conversions::to_string_t(U("ja")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_JA;
    if (val == utility::conversions::to_string_t(U("ko-KR")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_KO_KR;
    if (val == utility::conversions::to_string_t(U("ms-MY")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_MS_MY;
    if (val == utility::conversions::to_string_t(U("nb-NO")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_NB_NO;
    if (val == utility::conversions::to_string_t(U("nl")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_NL;
    if (val == utility::conversions::to_string_t(U("pl-PL")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_PL_PL;
    if (val == utility::conversions::to_string_t(U("pt-BR")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_PT_BR;
    if (val == utility::conversions::to_string_t(U("pt-PT")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_PT_PT;
    if (val == utility::conversions::to_string_t(U("ro-RO")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_RO_RO;
    if (val == utility::conversions::to_string_t(U("ru-RU")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_RU_RU;
    if (val == utility::conversions::to_string_t(U("sk-SK")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_SK_SK;
    if (val == utility::conversions::to_string_t(U("sv-SE")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_SV_SE;
    if (val == utility::conversions::to_string_t(U("te-IN")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_TE_IN;
    if (val == utility::conversions::to_string_t(U("th-TH")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_TH_TH;
    if (val == utility::conversions::to_string_t(U("tl-PH")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_TL_PH;
    if (val == utility::conversions::to_string_t(U("tr")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_TR;
    if (val == utility::conversions::to_string_t(U("uk-UA")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_UK_UA;
    if (val == utility::conversions::to_string_t(U("vi-VN")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_VI_VN;
    if (val == utility::conversions::to_string_t(U("zh-CN")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_ZH_CN;
    if (val == utility::conversions::to_string_t(U("zh-TW")))
        return CatalogsLocale::eCatalogsLocale::CatalogsLocale_ZH_TW;
    return {};
}

EnumUnderlyingType fromEnum(CatalogsLocale::eCatalogsLocale e)
{
    switch (e)
    {
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_AF_ZA:
        return U("af-ZA");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_AR_SA:
        return U("ar-SA");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_BG_BG:
        return U("bg-BG");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_BN_IN:
        return U("bn-IN");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_CS_CZ:
        return U("cs-CZ");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_DA_DK:
        return U("da-DK");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_DE:
        return U("de");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_EL_GR:
        return U("el-GR");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_EN_AU:
        return U("en-AU");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_EN_CA:
        return U("en-CA");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_EN_GB:
        return U("en-GB");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_EN_IN:
        return U("en-IN");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_EN_US:
        return U("en-US");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_ES_419:
        return U("es-419");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_ES_AR:
        return U("es-AR");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_ES_ES:
        return U("es-ES");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_ES_MX:
        return U("es-MX");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_FI_FI:
        return U("fi-FI");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_FR:
        return U("fr");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_FR_CA:
        return U("fr-CA");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_HE_IL:
        return U("he-IL");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_HI_IN:
        return U("hi-IN");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_HR_HR:
        return U("hr-HR");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_HU_HU:
        return U("hu-HU");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_ID_ID:
        return U("id-ID");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_IT:
        return U("it");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_JA:
        return U("ja");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_KO_KR:
        return U("ko-KR");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_MS_MY:
        return U("ms-MY");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_NB_NO:
        return U("nb-NO");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_NL:
        return U("nl");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_PL_PL:
        return U("pl-PL");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_PT_BR:
        return U("pt-BR");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_PT_PT:
        return U("pt-PT");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_RO_RO:
        return U("ro-RO");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_RU_RU:
        return U("ru-RU");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_SK_SK:
        return U("sk-SK");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_SV_SE:
        return U("sv-SE");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_TE_IN:
        return U("te-IN");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_TH_TH:
        return U("th-TH");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_TL_PH:
        return U("tl-PH");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_TR:
        return U("tr");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_UK_UA:
        return U("uk-UA");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_VI_VN:
        return U("vi-VN");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_ZH_CN:
        return U("zh-CN");
    case CatalogsLocale::eCatalogsLocale::CatalogsLocale_ZH_TW:
        return U("zh-TW");
    default:
        break;
    }
    return {};
}
}

CatalogsLocale::CatalogsLocale()
{
}

CatalogsLocale::~CatalogsLocale()
{
}

void CatalogsLocale::validate()
{
    // TODO: implement validation
}

web::json::value CatalogsLocale::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool CatalogsLocale::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void CatalogsLocale::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool CatalogsLocale::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

CatalogsLocale::eCatalogsLocale CatalogsLocale::getValue() const
{
   return m_value;
}

void CatalogsLocale::setValue(CatalogsLocale::eCatalogsLocale const value)
{
   m_value = value;
}


}
}
}
}


