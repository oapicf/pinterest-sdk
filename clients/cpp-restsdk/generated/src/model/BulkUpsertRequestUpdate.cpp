/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/BulkUpsertRequestUpdate.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



BulkUpsertRequestUpdate::BulkUpsertRequestUpdate()
{
    m_CampaignsIsSet = false;
    m_Ad_groupsIsSet = false;
    m_AdsIsSet = false;
    m_Product_groupsIsSet = false;
    m_KeywordsIsSet = false;
}

BulkUpsertRequestUpdate::~BulkUpsertRequestUpdate()
{
}

void BulkUpsertRequestUpdate::validate()
{
    // TODO: implement validation
}

web::json::value BulkUpsertRequestUpdate::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CampaignsIsSet)
    {
        val[utility::conversions::to_string_t(U("campaigns"))] = ModelBase::toJson(m_Campaigns);
    }
    if(m_Ad_groupsIsSet)
    {
        val[utility::conversions::to_string_t(U("ad_groups"))] = ModelBase::toJson(m_Ad_groups);
    }
    if(m_AdsIsSet)
    {
        val[utility::conversions::to_string_t(U("ads"))] = ModelBase::toJson(m_Ads);
    }
    if(m_Product_groupsIsSet)
    {
        val[utility::conversions::to_string_t(U("product_groups"))] = ModelBase::toJson(m_Product_groups);
    }
    if(m_KeywordsIsSet)
    {
        val[utility::conversions::to_string_t(U("keywords"))] = ModelBase::toJson(m_Keywords);
    }

    return val;
}

bool BulkUpsertRequestUpdate::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("campaigns"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("campaigns")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<CampaignUpdateRequest>> refVal_setCampaigns;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCampaigns);
            setCampaigns(refVal_setCampaigns);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ad_groups"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ad_groups")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<AdGroupUpdateRequest>> refVal_setAdGroups;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdGroups);
            setAdGroups(refVal_setAdGroups);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ads"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ads")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<AdUpdateRequest>> refVal_setAds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAds);
            setAds(refVal_setAds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("product_groups"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product_groups")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ProductGroupPromotionUpdateRequest>> refVal_setProductGroups;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProductGroups);
            setProductGroups(refVal_setProductGroups);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("keywords"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("keywords")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<KeywordUpdate>> refVal_setKeywords;
            ok &= ModelBase::fromJson(fieldValue, refVal_setKeywords);
            setKeywords(refVal_setKeywords);
        }
    }
    return ok;
}

void BulkUpsertRequestUpdate::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CampaignsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("campaigns")), m_Campaigns));
    }
    if(m_Ad_groupsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ad_groups")), m_Ad_groups));
    }
    if(m_AdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ads")), m_Ads));
    }
    if(m_Product_groupsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product_groups")), m_Product_groups));
    }
    if(m_KeywordsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("keywords")), m_Keywords));
    }
}

bool BulkUpsertRequestUpdate::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("campaigns"))))
    {
        std::vector<std::shared_ptr<CampaignUpdateRequest>> refVal_setCampaigns;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("campaigns"))), refVal_setCampaigns );
        setCampaigns(refVal_setCampaigns);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ad_groups"))))
    {
        std::vector<std::shared_ptr<AdGroupUpdateRequest>> refVal_setAdGroups;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ad_groups"))), refVal_setAdGroups );
        setAdGroups(refVal_setAdGroups);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ads"))))
    {
        std::vector<std::shared_ptr<AdUpdateRequest>> refVal_setAds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ads"))), refVal_setAds );
        setAds(refVal_setAds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("product_groups"))))
    {
        std::vector<std::shared_ptr<ProductGroupPromotionUpdateRequest>> refVal_setProductGroups;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product_groups"))), refVal_setProductGroups );
        setProductGroups(refVal_setProductGroups);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("keywords"))))
    {
        std::vector<std::shared_ptr<KeywordUpdate>> refVal_setKeywords;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("keywords"))), refVal_setKeywords );
        setKeywords(refVal_setKeywords);
    }
    return ok;
}

std::vector<std::shared_ptr<CampaignUpdateRequest>>& BulkUpsertRequestUpdate::getCampaigns()
{
    return m_Campaigns;
}

void BulkUpsertRequestUpdate::setCampaigns(const std::vector<std::shared_ptr<CampaignUpdateRequest>>& value)
{
    m_Campaigns = value;
    m_CampaignsIsSet = true;
}

bool BulkUpsertRequestUpdate::campaignsIsSet() const
{
    return m_CampaignsIsSet;
}

void BulkUpsertRequestUpdate::unsetCampaigns()
{
    m_CampaignsIsSet = false;
}
std::vector<std::shared_ptr<AdGroupUpdateRequest>>& BulkUpsertRequestUpdate::getAdGroups()
{
    return m_Ad_groups;
}

void BulkUpsertRequestUpdate::setAdGroups(const std::vector<std::shared_ptr<AdGroupUpdateRequest>>& value)
{
    m_Ad_groups = value;
    m_Ad_groupsIsSet = true;
}

bool BulkUpsertRequestUpdate::adGroupsIsSet() const
{
    return m_Ad_groupsIsSet;
}

void BulkUpsertRequestUpdate::unsetAd_groups()
{
    m_Ad_groupsIsSet = false;
}
std::vector<std::shared_ptr<AdUpdateRequest>>& BulkUpsertRequestUpdate::getAds()
{
    return m_Ads;
}

void BulkUpsertRequestUpdate::setAds(const std::vector<std::shared_ptr<AdUpdateRequest>>& value)
{
    m_Ads = value;
    m_AdsIsSet = true;
}

bool BulkUpsertRequestUpdate::adsIsSet() const
{
    return m_AdsIsSet;
}

void BulkUpsertRequestUpdate::unsetAds()
{
    m_AdsIsSet = false;
}
std::vector<std::shared_ptr<ProductGroupPromotionUpdateRequest>>& BulkUpsertRequestUpdate::getProductGroups()
{
    return m_Product_groups;
}

void BulkUpsertRequestUpdate::setProductGroups(const std::vector<std::shared_ptr<ProductGroupPromotionUpdateRequest>>& value)
{
    m_Product_groups = value;
    m_Product_groupsIsSet = true;
}

bool BulkUpsertRequestUpdate::productGroupsIsSet() const
{
    return m_Product_groupsIsSet;
}

void BulkUpsertRequestUpdate::unsetProduct_groups()
{
    m_Product_groupsIsSet = false;
}
std::vector<std::shared_ptr<KeywordUpdate>>& BulkUpsertRequestUpdate::getKeywords()
{
    return m_Keywords;
}

void BulkUpsertRequestUpdate::setKeywords(const std::vector<std::shared_ptr<KeywordUpdate>>& value)
{
    m_Keywords = value;
    m_KeywordsIsSet = true;
}

bool BulkUpsertRequestUpdate::keywordsIsSet() const
{
    return m_KeywordsIsSet;
}

void BulkUpsertRequestUpdate::unsetKeywords()
{
    m_KeywordsIsSet = false;
}
}
}
}
}


