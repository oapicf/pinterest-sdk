/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CatalogsCreativeAssetsProductGroupProductCounts.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CatalogsCreativeAssetsProductGroupProductCounts::CatalogsCreativeAssetsProductGroupProductCounts()
{
    m_Catalog_type = utility::conversions::to_string_t("");
    m_Catalog_typeIsSet = false;
    m_Total = 0.0;
    m_TotalIsSet = false;
    m_Videos = 0.0;
    m_VideosIsSet = false;
}

CatalogsCreativeAssetsProductGroupProductCounts::~CatalogsCreativeAssetsProductGroupProductCounts()
{
}

void CatalogsCreativeAssetsProductGroupProductCounts::validate()
{
    // TODO: implement validation
}

web::json::value CatalogsCreativeAssetsProductGroupProductCounts::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Catalog_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("catalog_type"))] = ModelBase::toJson(m_Catalog_type);
    }
    if(m_TotalIsSet)
    {
        val[utility::conversions::to_string_t(U("total"))] = ModelBase::toJson(m_Total);
    }
    if(m_VideosIsSet)
    {
        val[utility::conversions::to_string_t(U("videos"))] = ModelBase::toJson(m_Videos);
    }

    return val;
}

bool CatalogsCreativeAssetsProductGroupProductCounts::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("catalog_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("catalog_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCatalogType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCatalogType);
            setCatalogType(refVal_setCatalogType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total")));
        if(!fieldValue.is_null())
        {
            double refVal_setTotal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotal);
            setTotal(refVal_setTotal);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("videos"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("videos")));
        if(!fieldValue.is_null())
        {
            double refVal_setVideos;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVideos);
            setVideos(refVal_setVideos);
        }
    }
    return ok;
}

void CatalogsCreativeAssetsProductGroupProductCounts::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Catalog_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("catalog_type")), m_Catalog_type));
    }
    if(m_TotalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total")), m_Total));
    }
    if(m_VideosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("videos")), m_Videos));
    }
}

bool CatalogsCreativeAssetsProductGroupProductCounts::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("catalog_type"))))
    {
        utility::string_t refVal_setCatalogType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("catalog_type"))), refVal_setCatalogType );
        setCatalogType(refVal_setCatalogType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total"))))
    {
        double refVal_setTotal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total"))), refVal_setTotal );
        setTotal(refVal_setTotal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("videos"))))
    {
        double refVal_setVideos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("videos"))), refVal_setVideos );
        setVideos(refVal_setVideos);
    }
    return ok;
}

utility::string_t CatalogsCreativeAssetsProductGroupProductCounts::getCatalogType() const
{
    return m_Catalog_type;
}

void CatalogsCreativeAssetsProductGroupProductCounts::setCatalogType(const utility::string_t& value)
{
    m_Catalog_type = value;
    m_Catalog_typeIsSet = true;
}

bool CatalogsCreativeAssetsProductGroupProductCounts::catalogTypeIsSet() const
{
    return m_Catalog_typeIsSet;
}

void CatalogsCreativeAssetsProductGroupProductCounts::unsetCatalog_type()
{
    m_Catalog_typeIsSet = false;
}
double CatalogsCreativeAssetsProductGroupProductCounts::getTotal() const
{
    return m_Total;
}

void CatalogsCreativeAssetsProductGroupProductCounts::setTotal(double value)
{
    m_Total = value;
    m_TotalIsSet = true;
}

bool CatalogsCreativeAssetsProductGroupProductCounts::totalIsSet() const
{
    return m_TotalIsSet;
}

void CatalogsCreativeAssetsProductGroupProductCounts::unsetTotal()
{
    m_TotalIsSet = false;
}
double CatalogsCreativeAssetsProductGroupProductCounts::getVideos() const
{
    return m_Videos;
}

void CatalogsCreativeAssetsProductGroupProductCounts::setVideos(double value)
{
    m_Videos = value;
    m_VideosIsSet = true;
}

bool CatalogsCreativeAssetsProductGroupProductCounts::videosIsSet() const
{
    return m_VideosIsSet;
}

void CatalogsCreativeAssetsProductGroupProductCounts::unsetVideos()
{
    m_VideosIsSet = false;
}
}
}
}
}


