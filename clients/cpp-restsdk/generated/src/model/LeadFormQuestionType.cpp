/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/LeadFormQuestionType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


namespace
{
using EnumUnderlyingType = utility::string_t;

LeadFormQuestionType::eLeadFormQuestionType toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("CUSTOM")))
        return LeadFormQuestionType::eLeadFormQuestionType::LeadFormQuestionType_CUSTOM;
    if (val == utility::conversions::to_string_t(U("FULL_NAME")))
        return LeadFormQuestionType::eLeadFormQuestionType::LeadFormQuestionType_FULL_NAME;
    if (val == utility::conversions::to_string_t(U("FIRST_NAME")))
        return LeadFormQuestionType::eLeadFormQuestionType::LeadFormQuestionType_FIRST_NAME;
    if (val == utility::conversions::to_string_t(U("LAST_NAME")))
        return LeadFormQuestionType::eLeadFormQuestionType::LeadFormQuestionType_LAST_NAME;
    if (val == utility::conversions::to_string_t(U("EMAIL")))
        return LeadFormQuestionType::eLeadFormQuestionType::LeadFormQuestionType_EMAIL;
    if (val == utility::conversions::to_string_t(U("PHONE_NUMBER")))
        return LeadFormQuestionType::eLeadFormQuestionType::LeadFormQuestionType_PHONE_NUMBER;
    if (val == utility::conversions::to_string_t(U("ZIP_CODE")))
        return LeadFormQuestionType::eLeadFormQuestionType::LeadFormQuestionType_ZIP_CODE;
    if (val == utility::conversions::to_string_t(U("GENDER")))
        return LeadFormQuestionType::eLeadFormQuestionType::LeadFormQuestionType_GENDER;
    if (val == utility::conversions::to_string_t(U("CITY")))
        return LeadFormQuestionType::eLeadFormQuestionType::LeadFormQuestionType_CITY;
    if (val == utility::conversions::to_string_t(U("COUNTRY")))
        return LeadFormQuestionType::eLeadFormQuestionType::LeadFormQuestionType_COUNTRY;
    if (val == utility::conversions::to_string_t(U("STATE_PROVINCE")))
        return LeadFormQuestionType::eLeadFormQuestionType::LeadFormQuestionType_STATE_PROVINCE;
    if (val == utility::conversions::to_string_t(U("ADDRESS")))
        return LeadFormQuestionType::eLeadFormQuestionType::LeadFormQuestionType_ADDRESS;
    if (val == utility::conversions::to_string_t(U("DATE_OF_BIRTH")))
        return LeadFormQuestionType::eLeadFormQuestionType::LeadFormQuestionType_DATE_OF_BIRTH;
    if (val == utility::conversions::to_string_t(U("AGE")))
        return LeadFormQuestionType::eLeadFormQuestionType::LeadFormQuestionType_AGE;
    return {};
}

EnumUnderlyingType fromEnum(LeadFormQuestionType::eLeadFormQuestionType e)
{
    switch (e)
    {
    case LeadFormQuestionType::eLeadFormQuestionType::LeadFormQuestionType_CUSTOM:
        return U("CUSTOM");
    case LeadFormQuestionType::eLeadFormQuestionType::LeadFormQuestionType_FULL_NAME:
        return U("FULL_NAME");
    case LeadFormQuestionType::eLeadFormQuestionType::LeadFormQuestionType_FIRST_NAME:
        return U("FIRST_NAME");
    case LeadFormQuestionType::eLeadFormQuestionType::LeadFormQuestionType_LAST_NAME:
        return U("LAST_NAME");
    case LeadFormQuestionType::eLeadFormQuestionType::LeadFormQuestionType_EMAIL:
        return U("EMAIL");
    case LeadFormQuestionType::eLeadFormQuestionType::LeadFormQuestionType_PHONE_NUMBER:
        return U("PHONE_NUMBER");
    case LeadFormQuestionType::eLeadFormQuestionType::LeadFormQuestionType_ZIP_CODE:
        return U("ZIP_CODE");
    case LeadFormQuestionType::eLeadFormQuestionType::LeadFormQuestionType_GENDER:
        return U("GENDER");
    case LeadFormQuestionType::eLeadFormQuestionType::LeadFormQuestionType_CITY:
        return U("CITY");
    case LeadFormQuestionType::eLeadFormQuestionType::LeadFormQuestionType_COUNTRY:
        return U("COUNTRY");
    case LeadFormQuestionType::eLeadFormQuestionType::LeadFormQuestionType_STATE_PROVINCE:
        return U("STATE_PROVINCE");
    case LeadFormQuestionType::eLeadFormQuestionType::LeadFormQuestionType_ADDRESS:
        return U("ADDRESS");
    case LeadFormQuestionType::eLeadFormQuestionType::LeadFormQuestionType_DATE_OF_BIRTH:
        return U("DATE_OF_BIRTH");
    case LeadFormQuestionType::eLeadFormQuestionType::LeadFormQuestionType_AGE:
        return U("AGE");
    default:
        break;
    }
    return {};
}
}

LeadFormQuestionType::LeadFormQuestionType()
{
}

LeadFormQuestionType::~LeadFormQuestionType()
{
}

void LeadFormQuestionType::validate()
{
    // TODO: implement validation
}

web::json::value LeadFormQuestionType::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool LeadFormQuestionType::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void LeadFormQuestionType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool LeadFormQuestionType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

LeadFormQuestionType::eLeadFormQuestionType LeadFormQuestionType::getValue() const
{
   return m_value;
}

void LeadFormQuestionType::setValue(LeadFormQuestionType::eLeadFormQuestionType const value)
{
   m_value = value;
}


}
}
}
}


