/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AdGroupAudienceSizingResponse.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AdGroupAudienceSizingResponse::AdGroupAudienceSizingResponse()
{
    m_Audience_size_lower_bound = 0.0;
    m_Audience_size_lower_boundIsSet = false;
    m_Audience_size_upper_bound = 0.0;
    m_Audience_size_upper_boundIsSet = false;
}

AdGroupAudienceSizingResponse::~AdGroupAudienceSizingResponse()
{
}

void AdGroupAudienceSizingResponse::validate()
{
    // TODO: implement validation
}

web::json::value AdGroupAudienceSizingResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Audience_size_lower_boundIsSet)
    {
        val[utility::conversions::to_string_t(U("audience_size_lower_bound"))] = ModelBase::toJson(m_Audience_size_lower_bound);
    }
    if(m_Audience_size_upper_boundIsSet)
    {
        val[utility::conversions::to_string_t(U("audience_size_upper_bound"))] = ModelBase::toJson(m_Audience_size_upper_bound);
    }

    return val;
}

bool AdGroupAudienceSizingResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("audience_size_lower_bound"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("audience_size_lower_bound")));
        if(!fieldValue.is_null())
        {
            double refVal_setAudienceSizeLowerBound;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAudienceSizeLowerBound);
            setAudienceSizeLowerBound(refVal_setAudienceSizeLowerBound);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("audience_size_upper_bound"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("audience_size_upper_bound")));
        if(!fieldValue.is_null())
        {
            double refVal_setAudienceSizeUpperBound;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAudienceSizeUpperBound);
            setAudienceSizeUpperBound(refVal_setAudienceSizeUpperBound);
        }
    }
    return ok;
}

void AdGroupAudienceSizingResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Audience_size_lower_boundIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("audience_size_lower_bound")), m_Audience_size_lower_bound));
    }
    if(m_Audience_size_upper_boundIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("audience_size_upper_bound")), m_Audience_size_upper_bound));
    }
}

bool AdGroupAudienceSizingResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("audience_size_lower_bound"))))
    {
        double refVal_setAudienceSizeLowerBound;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("audience_size_lower_bound"))), refVal_setAudienceSizeLowerBound );
        setAudienceSizeLowerBound(refVal_setAudienceSizeLowerBound);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("audience_size_upper_bound"))))
    {
        double refVal_setAudienceSizeUpperBound;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("audience_size_upper_bound"))), refVal_setAudienceSizeUpperBound );
        setAudienceSizeUpperBound(refVal_setAudienceSizeUpperBound);
    }
    return ok;
}

double AdGroupAudienceSizingResponse::getAudienceSizeLowerBound() const
{
    return m_Audience_size_lower_bound;
}

void AdGroupAudienceSizingResponse::setAudienceSizeLowerBound(double value)
{
    m_Audience_size_lower_bound = value;
    m_Audience_size_lower_boundIsSet = true;
}

bool AdGroupAudienceSizingResponse::audienceSizeLowerBoundIsSet() const
{
    return m_Audience_size_lower_boundIsSet;
}

void AdGroupAudienceSizingResponse::unsetAudience_size_lower_bound()
{
    m_Audience_size_lower_boundIsSet = false;
}
double AdGroupAudienceSizingResponse::getAudienceSizeUpperBound() const
{
    return m_Audience_size_upper_bound;
}

void AdGroupAudienceSizingResponse::setAudienceSizeUpperBound(double value)
{
    m_Audience_size_upper_bound = value;
    m_Audience_size_upper_boundIsSet = true;
}

bool AdGroupAudienceSizingResponse::audienceSizeUpperBoundIsSet() const
{
    return m_Audience_size_upper_boundIsSet;
}

void AdGroupAudienceSizingResponse::unsetAudience_size_upper_bound()
{
    m_Audience_size_upper_boundIsSet = false;
}
}
}
}
}


