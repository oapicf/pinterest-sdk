/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/TopPinsAnalyticsResponse_date_availability.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



TopPinsAnalyticsResponse_date_availability::TopPinsAnalyticsResponse_date_availability()
{
    m_Latest_available_timestamp = 0.0;
    m_Latest_available_timestampIsSet = false;
    m_Is_realtime = false;
    m_Is_realtimeIsSet = false;
}

TopPinsAnalyticsResponse_date_availability::~TopPinsAnalyticsResponse_date_availability()
{
}

void TopPinsAnalyticsResponse_date_availability::validate()
{
    // TODO: implement validation
}

web::json::value TopPinsAnalyticsResponse_date_availability::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Latest_available_timestampIsSet)
    {
        val[utility::conversions::to_string_t(U("latest_available_timestamp"))] = ModelBase::toJson(m_Latest_available_timestamp);
    }
    if(m_Is_realtimeIsSet)
    {
        val[utility::conversions::to_string_t(U("is_realtime"))] = ModelBase::toJson(m_Is_realtime);
    }

    return val;
}

bool TopPinsAnalyticsResponse_date_availability::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("latest_available_timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("latest_available_timestamp")));
        if(!fieldValue.is_null())
        {
            double refVal_setLatestAvailableTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLatestAvailableTimestamp);
            setLatestAvailableTimestamp(refVal_setLatestAvailableTimestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_realtime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_realtime")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsRealtime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsRealtime);
            setIsRealtime(refVal_setIsRealtime);
        }
    }
    return ok;
}

void TopPinsAnalyticsResponse_date_availability::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Latest_available_timestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("latest_available_timestamp")), m_Latest_available_timestamp));
    }
    if(m_Is_realtimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_realtime")), m_Is_realtime));
    }
}

bool TopPinsAnalyticsResponse_date_availability::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("latest_available_timestamp"))))
    {
        double refVal_setLatestAvailableTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("latest_available_timestamp"))), refVal_setLatestAvailableTimestamp );
        setLatestAvailableTimestamp(refVal_setLatestAvailableTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_realtime"))))
    {
        bool refVal_setIsRealtime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_realtime"))), refVal_setIsRealtime );
        setIsRealtime(refVal_setIsRealtime);
    }
    return ok;
}

double TopPinsAnalyticsResponse_date_availability::getLatestAvailableTimestamp() const
{
    return m_Latest_available_timestamp;
}

void TopPinsAnalyticsResponse_date_availability::setLatestAvailableTimestamp(double value)
{
    m_Latest_available_timestamp = value;
    m_Latest_available_timestampIsSet = true;
}

bool TopPinsAnalyticsResponse_date_availability::latestAvailableTimestampIsSet() const
{
    return m_Latest_available_timestampIsSet;
}

void TopPinsAnalyticsResponse_date_availability::unsetLatest_available_timestamp()
{
    m_Latest_available_timestampIsSet = false;
}
bool TopPinsAnalyticsResponse_date_availability::isIsRealtime() const
{
    return m_Is_realtime;
}

void TopPinsAnalyticsResponse_date_availability::setIsRealtime(bool value)
{
    m_Is_realtime = value;
    m_Is_realtimeIsSet = true;
}

bool TopPinsAnalyticsResponse_date_availability::isRealtimeIsSet() const
{
    return m_Is_realtimeIsSet;
}

void TopPinsAnalyticsResponse_date_availability::unsetIs_realtime()
{
    m_Is_realtimeIsSet = false;
}
}
}
}
}


