/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/DeleteAssetGroupResponse_exceptions_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



DeleteAssetGroupResponse_exceptions_inner::DeleteAssetGroupResponse_exceptions_inner()
{
    m_Code = 0;
    m_CodeIsSet = false;
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
    m_Asset_group_id = utility::conversions::to_string_t("");
    m_Asset_group_idIsSet = false;
}

DeleteAssetGroupResponse_exceptions_inner::~DeleteAssetGroupResponse_exceptions_inner()
{
}

void DeleteAssetGroupResponse_exceptions_inner::validate()
{
    // TODO: implement validation
}

web::json::value DeleteAssetGroupResponse_exceptions_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CodeIsSet)
    {
        val[utility::conversions::to_string_t(U("code"))] = ModelBase::toJson(m_Code);
    }
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t(U("message"))] = ModelBase::toJson(m_Message);
    }
    if(m_Asset_group_idIsSet)
    {
        val[utility::conversions::to_string_t(U("asset_group_id"))] = ModelBase::toJson(m_Asset_group_id);
    }

    return val;
}

bool DeleteAssetGroupResponse_exceptions_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("code")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCode);
            setCode(refVal_setCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("message"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("message")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessage);
            setMessage(refVal_setMessage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("asset_group_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("asset_group_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssetGroupId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetGroupId);
            setAssetGroupId(refVal_setAssetGroupId);
        }
    }
    return ok;
}

void DeleteAssetGroupResponse_exceptions_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("code")), m_Code));
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("message")), m_Message));
    }
    if(m_Asset_group_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("asset_group_id")), m_Asset_group_id));
    }
}

bool DeleteAssetGroupResponse_exceptions_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("code"))))
    {
        int32_t refVal_setCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("code"))), refVal_setCode );
        setCode(refVal_setCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("message"))))
    {
        utility::string_t refVal_setMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("message"))), refVal_setMessage );
        setMessage(refVal_setMessage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("asset_group_id"))))
    {
        utility::string_t refVal_setAssetGroupId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("asset_group_id"))), refVal_setAssetGroupId );
        setAssetGroupId(refVal_setAssetGroupId);
    }
    return ok;
}

int32_t DeleteAssetGroupResponse_exceptions_inner::getCode() const
{
    return m_Code;
}

void DeleteAssetGroupResponse_exceptions_inner::setCode(int32_t value)
{
    m_Code = value;
    m_CodeIsSet = true;
}

bool DeleteAssetGroupResponse_exceptions_inner::codeIsSet() const
{
    return m_CodeIsSet;
}

void DeleteAssetGroupResponse_exceptions_inner::unsetCode()
{
    m_CodeIsSet = false;
}
utility::string_t DeleteAssetGroupResponse_exceptions_inner::getMessage() const
{
    return m_Message;
}

void DeleteAssetGroupResponse_exceptions_inner::setMessage(const utility::string_t& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}

bool DeleteAssetGroupResponse_exceptions_inner::messageIsSet() const
{
    return m_MessageIsSet;
}

void DeleteAssetGroupResponse_exceptions_inner::unsetMessage()
{
    m_MessageIsSet = false;
}
utility::string_t DeleteAssetGroupResponse_exceptions_inner::getAssetGroupId() const
{
    return m_Asset_group_id;
}

void DeleteAssetGroupResponse_exceptions_inner::setAssetGroupId(const utility::string_t& value)
{
    m_Asset_group_id = value;
    m_Asset_group_idIsSet = true;
}

bool DeleteAssetGroupResponse_exceptions_inner::assetGroupIdIsSet() const
{
    return m_Asset_group_idIsSet;
}

void DeleteAssetGroupResponse_exceptions_inner::unsetAsset_group_id()
{
    m_Asset_group_idIsSet = false;
}
}
}
}
}


