/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/LeadFormQuestion.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



LeadFormQuestion::LeadFormQuestion()
{
    m_Question_typeIsSet = false;
    m_Custom_question_field_typeIsSet = false;
    m_Custom_question_label = utility::conversions::to_string_t("");
    m_Custom_question_labelIsSet = false;
    m_Custom_question_optionsIsSet = false;
}

LeadFormQuestion::~LeadFormQuestion()
{
}

void LeadFormQuestion::validate()
{
    // TODO: implement validation
}

web::json::value LeadFormQuestion::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Question_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("question_type"))] = ModelBase::toJson(m_Question_type);
    }
    if(m_Custom_question_field_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("custom_question_field_type"))] = ModelBase::toJson(m_Custom_question_field_type);
    }
    if(m_Custom_question_labelIsSet)
    {
        val[utility::conversions::to_string_t(U("custom_question_label"))] = ModelBase::toJson(m_Custom_question_label);
    }
    if(m_Custom_question_optionsIsSet)
    {
        val[utility::conversions::to_string_t(U("custom_question_options"))] = ModelBase::toJson(m_Custom_question_options);
    }

    return val;
}

bool LeadFormQuestion::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("question_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("question_type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LeadFormQuestionType> refVal_setQuestionType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQuestionType);
            setQuestionType(refVal_setQuestionType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("custom_question_field_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("custom_question_field_type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LeadFormQuestionFieldType> refVal_setCustomQuestionFieldType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomQuestionFieldType);
            setCustomQuestionFieldType(refVal_setCustomQuestionFieldType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("custom_question_label"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("custom_question_label")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCustomQuestionLabel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomQuestionLabel);
            setCustomQuestionLabel(refVal_setCustomQuestionLabel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("custom_question_options"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("custom_question_options")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setCustomQuestionOptions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomQuestionOptions);
            setCustomQuestionOptions(refVal_setCustomQuestionOptions);
        }
    }
    return ok;
}

void LeadFormQuestion::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Question_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("question_type")), m_Question_type));
    }
    if(m_Custom_question_field_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("custom_question_field_type")), m_Custom_question_field_type));
    }
    if(m_Custom_question_labelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("custom_question_label")), m_Custom_question_label));
    }
    if(m_Custom_question_optionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("custom_question_options")), m_Custom_question_options));
    }
}

bool LeadFormQuestion::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("question_type"))))
    {
        std::shared_ptr<LeadFormQuestionType> refVal_setQuestionType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("question_type"))), refVal_setQuestionType );
        setQuestionType(refVal_setQuestionType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("custom_question_field_type"))))
    {
        std::shared_ptr<LeadFormQuestionFieldType> refVal_setCustomQuestionFieldType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("custom_question_field_type"))), refVal_setCustomQuestionFieldType );
        setCustomQuestionFieldType(refVal_setCustomQuestionFieldType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("custom_question_label"))))
    {
        utility::string_t refVal_setCustomQuestionLabel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("custom_question_label"))), refVal_setCustomQuestionLabel );
        setCustomQuestionLabel(refVal_setCustomQuestionLabel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("custom_question_options"))))
    {
        std::vector<utility::string_t> refVal_setCustomQuestionOptions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("custom_question_options"))), refVal_setCustomQuestionOptions );
        setCustomQuestionOptions(refVal_setCustomQuestionOptions);
    }
    return ok;
}

std::shared_ptr<LeadFormQuestionType> LeadFormQuestion::getQuestionType() const
{
    return m_Question_type;
}

void LeadFormQuestion::setQuestionType(const std::shared_ptr<LeadFormQuestionType>& value)
{
    m_Question_type = value;
    m_Question_typeIsSet = true;
}

bool LeadFormQuestion::questionTypeIsSet() const
{
    return m_Question_typeIsSet;
}

void LeadFormQuestion::unsetQuestion_type()
{
    m_Question_typeIsSet = false;
}
std::shared_ptr<LeadFormQuestionFieldType> LeadFormQuestion::getCustomQuestionFieldType() const
{
    return m_Custom_question_field_type;
}

void LeadFormQuestion::setCustomQuestionFieldType(const std::shared_ptr<LeadFormQuestionFieldType>& value)
{
    m_Custom_question_field_type = value;
    m_Custom_question_field_typeIsSet = true;
}

bool LeadFormQuestion::customQuestionFieldTypeIsSet() const
{
    return m_Custom_question_field_typeIsSet;
}

void LeadFormQuestion::unsetCustom_question_field_type()
{
    m_Custom_question_field_typeIsSet = false;
}
utility::string_t LeadFormQuestion::getCustomQuestionLabel() const
{
    return m_Custom_question_label;
}

void LeadFormQuestion::setCustomQuestionLabel(const utility::string_t& value)
{
    m_Custom_question_label = value;
    m_Custom_question_labelIsSet = true;
}

bool LeadFormQuestion::customQuestionLabelIsSet() const
{
    return m_Custom_question_labelIsSet;
}

void LeadFormQuestion::unsetCustom_question_label()
{
    m_Custom_question_labelIsSet = false;
}
std::vector<utility::string_t>& LeadFormQuestion::getCustomQuestionOptions()
{
    return m_Custom_question_options;
}

void LeadFormQuestion::setCustomQuestionOptions(const std::vector<utility::string_t>& value)
{
    m_Custom_question_options = value;
    m_Custom_question_optionsIsSet = true;
}

bool LeadFormQuestion::customQuestionOptionsIsSet() const
{
    return m_Custom_question_optionsIsSet;
}

void LeadFormQuestion::unsetCustom_question_options()
{
    m_Custom_question_optionsIsSet = false;
}
}
}
}
}


