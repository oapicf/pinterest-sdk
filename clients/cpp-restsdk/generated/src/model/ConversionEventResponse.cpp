/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ConversionEventResponse.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ConversionEventResponse::ConversionEventResponse()
{
    m_Conversion_event = new ConversionTagType();
    m_Conversion_eventIsSet = false;
    m_Conversion_tag_id = utility::conversions::to_string_t("");
    m_Conversion_tag_idIsSet = false;
    m_Ad_account_id = utility::conversions::to_string_t("");
    m_Ad_account_idIsSet = false;
    m_Created_time = 0;
    m_Created_timeIsSet = false;
}

ConversionEventResponse::~ConversionEventResponse()
{
}

void ConversionEventResponse::validate()
{
    // TODO: implement validation
}

web::json::value ConversionEventResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Conversion_eventIsSet)
    {
        val[utility::conversions::to_string_t(U("conversion_event"))] = ModelBase::toJson(m_Conversion_event);
    }
    if(m_Conversion_tag_idIsSet)
    {
        val[utility::conversions::to_string_t(U("conversion_tag_id"))] = ModelBase::toJson(m_Conversion_tag_id);
    }
    if(m_Ad_account_idIsSet)
    {
        val[utility::conversions::to_string_t(U("ad_account_id"))] = ModelBase::toJson(m_Ad_account_id);
    }
    if(m_Created_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("created_time"))] = ModelBase::toJson(m_Created_time);
    }

    return val;
}

bool ConversionEventResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("conversion_event"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("conversion_event")));
        if(!fieldValue.is_null())
        {
            ConversionTagType refVal_setConversionEvent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConversionEvent);
            setConversionEvent(refVal_setConversionEvent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("conversion_tag_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("conversion_tag_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setConversionTagId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConversionTagId);
            setConversionTagId(refVal_setConversionTagId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ad_account_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ad_account_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAdAccountId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdAccountId);
            setAdAccountId(refVal_setAdAccountId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_time")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCreatedTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedTime);
            setCreatedTime(refVal_setCreatedTime);
        }
    }
    return ok;
}

void ConversionEventResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Conversion_eventIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("conversion_event")), m_Conversion_event));
    }
    if(m_Conversion_tag_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("conversion_tag_id")), m_Conversion_tag_id));
    }
    if(m_Ad_account_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ad_account_id")), m_Ad_account_id));
    }
    if(m_Created_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_time")), m_Created_time));
    }
}

bool ConversionEventResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("conversion_event"))))
    {
        ConversionTagType refVal_setConversionEvent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("conversion_event"))), refVal_setConversionEvent );
        setConversionEvent(refVal_setConversionEvent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("conversion_tag_id"))))
    {
        utility::string_t refVal_setConversionTagId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("conversion_tag_id"))), refVal_setConversionTagId );
        setConversionTagId(refVal_setConversionTagId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ad_account_id"))))
    {
        utility::string_t refVal_setAdAccountId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ad_account_id"))), refVal_setAdAccountId );
        setAdAccountId(refVal_setAdAccountId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_time"))))
    {
        int32_t refVal_setCreatedTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_time"))), refVal_setCreatedTime );
        setCreatedTime(refVal_setCreatedTime);
    }
    return ok;
}

ConversionTagType ConversionEventResponse::getConversionEvent() const
{
    return m_Conversion_event;
}

void ConversionEventResponse::setConversionEvent(const ConversionTagType& value)
{
    m_Conversion_event = value;
    m_Conversion_eventIsSet = true;
}

bool ConversionEventResponse::conversionEventIsSet() const
{
    return m_Conversion_eventIsSet;
}

void ConversionEventResponse::unsetConversion_event()
{
    m_Conversion_eventIsSet = false;
}
utility::string_t ConversionEventResponse::getConversionTagId() const
{
    return m_Conversion_tag_id;
}

void ConversionEventResponse::setConversionTagId(const utility::string_t& value)
{
    m_Conversion_tag_id = value;
    m_Conversion_tag_idIsSet = true;
}

bool ConversionEventResponse::conversionTagIdIsSet() const
{
    return m_Conversion_tag_idIsSet;
}

void ConversionEventResponse::unsetConversion_tag_id()
{
    m_Conversion_tag_idIsSet = false;
}
utility::string_t ConversionEventResponse::getAdAccountId() const
{
    return m_Ad_account_id;
}

void ConversionEventResponse::setAdAccountId(const utility::string_t& value)
{
    m_Ad_account_id = value;
    m_Ad_account_idIsSet = true;
}

bool ConversionEventResponse::adAccountIdIsSet() const
{
    return m_Ad_account_idIsSet;
}

void ConversionEventResponse::unsetAd_account_id()
{
    m_Ad_account_idIsSet = false;
}
int32_t ConversionEventResponse::getCreatedTime() const
{
    return m_Created_time;
}

void ConversionEventResponse::setCreatedTime(int32_t value)
{
    m_Created_time = value;
    m_Created_timeIsSet = true;
}

bool ConversionEventResponse::createdTimeIsSet() const
{
    return m_Created_timeIsSet;
}

void ConversionEventResponse::unsetCreated_time()
{
    m_Created_timeIsSet = false;
}
}
}
}
}


