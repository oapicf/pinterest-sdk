/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CatalogsItemValidationErrors.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CatalogsItemValidationErrors::CatalogsItemValidationErrors()
{
    m_ADULT_INVALIDIsSet = false;
    m_ADWORDS_FORMAT_INVALIDIsSet = false;
    m_AVAILABILITY_INVALIDIsSet = false;
    m_BLOCKLISTED_IMAGE_SIGNATUREIsSet = false;
    m_DESCRIPTION_MISSINGIsSet = false;
    m_DUPLICATE_PRODUCTSIsSet = false;
    m_IMAGE_LINK_INVALIDIsSet = false;
    m_IMAGE_LINK_LENGTH_TOO_LONGIsSet = false;
    m_IMAGE_LINK_MISSINGIsSet = false;
    m_INVALID_DOMAINIsSet = false;
    m_ITEMID_MISSINGIsSet = false;
    m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILUREIsSet = false;
    m_LINK_FORMAT_INVALIDIsSet = false;
    m_LINK_LENGTH_TOO_LONGIsSet = false;
    m_LIST_PRICE_INVALIDIsSet = false;
    m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDEDIsSet = false;
    m_PARSE_LINE_ERRORIsSet = false;
    m_PINJOIN_CONTENT_UNSAFEIsSet = false;
    m_PRICE_CANNOT_BE_DETERMINEDIsSet = false;
    m_PRICE_MISSINGIsSet = false;
    m_PRODUCT_LINK_MISSINGIsSet = false;
    m_PRODUCT_PRICE_INVALIDIsSet = false;
    m_TITLE_MISSINGIsSet = false;
}

CatalogsItemValidationErrors::~CatalogsItemValidationErrors()
{
}

void CatalogsItemValidationErrors::validate()
{
    // TODO: implement validation
}

web::json::value CatalogsItemValidationErrors::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ADULT_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("ADULT_INVALID"))] = ModelBase::toJson(m_ADULT_INVALID);
    }
    if(m_ADWORDS_FORMAT_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("ADWORDS_FORMAT_INVALID"))] = ModelBase::toJson(m_ADWORDS_FORMAT_INVALID);
    }
    if(m_AVAILABILITY_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("AVAILABILITY_INVALID"))] = ModelBase::toJson(m_AVAILABILITY_INVALID);
    }
    if(m_BLOCKLISTED_IMAGE_SIGNATUREIsSet)
    {
        val[utility::conversions::to_string_t(U("BLOCKLISTED_IMAGE_SIGNATURE"))] = ModelBase::toJson(m_BLOCKLISTED_IMAGE_SIGNATURE);
    }
    if(m_DESCRIPTION_MISSINGIsSet)
    {
        val[utility::conversions::to_string_t(U("DESCRIPTION_MISSING"))] = ModelBase::toJson(m_DESCRIPTION_MISSING);
    }
    if(m_DUPLICATE_PRODUCTSIsSet)
    {
        val[utility::conversions::to_string_t(U("DUPLICATE_PRODUCTS"))] = ModelBase::toJson(m_DUPLICATE_PRODUCTS);
    }
    if(m_IMAGE_LINK_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("IMAGE_LINK_INVALID"))] = ModelBase::toJson(m_IMAGE_LINK_INVALID);
    }
    if(m_IMAGE_LINK_LENGTH_TOO_LONGIsSet)
    {
        val[utility::conversions::to_string_t(U("IMAGE_LINK_LENGTH_TOO_LONG"))] = ModelBase::toJson(m_IMAGE_LINK_LENGTH_TOO_LONG);
    }
    if(m_IMAGE_LINK_MISSINGIsSet)
    {
        val[utility::conversions::to_string_t(U("IMAGE_LINK_MISSING"))] = ModelBase::toJson(m_IMAGE_LINK_MISSING);
    }
    if(m_INVALID_DOMAINIsSet)
    {
        val[utility::conversions::to_string_t(U("INVALID_DOMAIN"))] = ModelBase::toJson(m_INVALID_DOMAIN);
    }
    if(m_ITEMID_MISSINGIsSet)
    {
        val[utility::conversions::to_string_t(U("ITEMID_MISSING"))] = ModelBase::toJson(m_ITEMID_MISSING);
    }
    if(m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILUREIsSet)
    {
        val[utility::conversions::to_string_t(U("ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE"))] = ModelBase::toJson(m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE);
    }
    if(m_LINK_FORMAT_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("LINK_FORMAT_INVALID"))] = ModelBase::toJson(m_LINK_FORMAT_INVALID);
    }
    if(m_LINK_LENGTH_TOO_LONGIsSet)
    {
        val[utility::conversions::to_string_t(U("LINK_LENGTH_TOO_LONG"))] = ModelBase::toJson(m_LINK_LENGTH_TOO_LONG);
    }
    if(m_LIST_PRICE_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("LIST_PRICE_INVALID"))] = ModelBase::toJson(m_LIST_PRICE_INVALID);
    }
    if(m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDEDIsSet)
    {
        val[utility::conversions::to_string_t(U("MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED"))] = ModelBase::toJson(m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED);
    }
    if(m_PARSE_LINE_ERRORIsSet)
    {
        val[utility::conversions::to_string_t(U("PARSE_LINE_ERROR"))] = ModelBase::toJson(m_PARSE_LINE_ERROR);
    }
    if(m_PINJOIN_CONTENT_UNSAFEIsSet)
    {
        val[utility::conversions::to_string_t(U("PINJOIN_CONTENT_UNSAFE"))] = ModelBase::toJson(m_PINJOIN_CONTENT_UNSAFE);
    }
    if(m_PRICE_CANNOT_BE_DETERMINEDIsSet)
    {
        val[utility::conversions::to_string_t(U("PRICE_CANNOT_BE_DETERMINED"))] = ModelBase::toJson(m_PRICE_CANNOT_BE_DETERMINED);
    }
    if(m_PRICE_MISSINGIsSet)
    {
        val[utility::conversions::to_string_t(U("PRICE_MISSING"))] = ModelBase::toJson(m_PRICE_MISSING);
    }
    if(m_PRODUCT_LINK_MISSINGIsSet)
    {
        val[utility::conversions::to_string_t(U("PRODUCT_LINK_MISSING"))] = ModelBase::toJson(m_PRODUCT_LINK_MISSING);
    }
    if(m_PRODUCT_PRICE_INVALIDIsSet)
    {
        val[utility::conversions::to_string_t(U("PRODUCT_PRICE_INVALID"))] = ModelBase::toJson(m_PRODUCT_PRICE_INVALID);
    }
    if(m_TITLE_MISSINGIsSet)
    {
        val[utility::conversions::to_string_t(U("TITLE_MISSING"))] = ModelBase::toJson(m_TITLE_MISSING);
    }

    return val;
}

bool CatalogsItemValidationErrors::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("ADULT_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ADULT_INVALID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setADULTINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setADULTINVALID);
            setADULTINVALID(refVal_setADULTINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ADWORDS_FORMAT_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ADWORDS_FORMAT_INVALID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setADWORDSFORMATINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setADWORDSFORMATINVALID);
            setADWORDSFORMATINVALID(refVal_setADWORDSFORMATINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("AVAILABILITY_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("AVAILABILITY_INVALID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setAVAILABILITYINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAVAILABILITYINVALID);
            setAVAILABILITYINVALID(refVal_setAVAILABILITYINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("BLOCKLISTED_IMAGE_SIGNATURE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("BLOCKLISTED_IMAGE_SIGNATURE")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setBLOCKLISTEDIMAGESIGNATURE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBLOCKLISTEDIMAGESIGNATURE);
            setBLOCKLISTEDIMAGESIGNATURE(refVal_setBLOCKLISTEDIMAGESIGNATURE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("DESCRIPTION_MISSING"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("DESCRIPTION_MISSING")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setDESCRIPTIONMISSING;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDESCRIPTIONMISSING);
            setDESCRIPTIONMISSING(refVal_setDESCRIPTIONMISSING);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("DUPLICATE_PRODUCTS"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("DUPLICATE_PRODUCTS")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setDUPLICATEPRODUCTS;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDUPLICATEPRODUCTS);
            setDUPLICATEPRODUCTS(refVal_setDUPLICATEPRODUCTS);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("IMAGE_LINK_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("IMAGE_LINK_INVALID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setIMAGELINKINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIMAGELINKINVALID);
            setIMAGELINKINVALID(refVal_setIMAGELINKINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("IMAGE_LINK_LENGTH_TOO_LONG"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("IMAGE_LINK_LENGTH_TOO_LONG")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setIMAGELINKLENGTHTOOLONG;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIMAGELINKLENGTHTOOLONG);
            setIMAGELINKLENGTHTOOLONG(refVal_setIMAGELINKLENGTHTOOLONG);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("IMAGE_LINK_MISSING"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("IMAGE_LINK_MISSING")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setIMAGELINKMISSING;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIMAGELINKMISSING);
            setIMAGELINKMISSING(refVal_setIMAGELINKMISSING);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("INVALID_DOMAIN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("INVALID_DOMAIN")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setINVALIDDOMAIN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setINVALIDDOMAIN);
            setINVALIDDOMAIN(refVal_setINVALIDDOMAIN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ITEMID_MISSING"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ITEMID_MISSING")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setITEMIDMISSING;
            ok &= ModelBase::fromJson(fieldValue, refVal_setITEMIDMISSING);
            setITEMIDMISSING(refVal_setITEMIDMISSING);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setITEMMAINIMAGEDOWNLOADFAILURE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setITEMMAINIMAGEDOWNLOADFAILURE);
            setITEMMAINIMAGEDOWNLOADFAILURE(refVal_setITEMMAINIMAGEDOWNLOADFAILURE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LINK_FORMAT_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LINK_FORMAT_INVALID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setLINKFORMATINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLINKFORMATINVALID);
            setLINKFORMATINVALID(refVal_setLINKFORMATINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LINK_LENGTH_TOO_LONG"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LINK_LENGTH_TOO_LONG")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setLINKLENGTHTOOLONG;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLINKLENGTHTOOLONG);
            setLINKLENGTHTOOLONG(refVal_setLINKLENGTHTOOLONG);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LIST_PRICE_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LIST_PRICE_INVALID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setLISTPRICEINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLISTPRICEINVALID);
            setLISTPRICEINVALID(refVal_setLISTPRICEINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setMAXITEMSPERITEMGROUPEXCEEDED;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMAXITEMSPERITEMGROUPEXCEEDED);
            setMAXITEMSPERITEMGROUPEXCEEDED(refVal_setMAXITEMSPERITEMGROUPEXCEEDED);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("PARSE_LINE_ERROR"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("PARSE_LINE_ERROR")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setPARSELINEERROR;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPARSELINEERROR);
            setPARSELINEERROR(refVal_setPARSELINEERROR);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("PINJOIN_CONTENT_UNSAFE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("PINJOIN_CONTENT_UNSAFE")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setPINJOINCONTENTUNSAFE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPINJOINCONTENTUNSAFE);
            setPINJOINCONTENTUNSAFE(refVal_setPINJOINCONTENTUNSAFE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("PRICE_CANNOT_BE_DETERMINED"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("PRICE_CANNOT_BE_DETERMINED")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setPRICECANNOTBEDETERMINED;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPRICECANNOTBEDETERMINED);
            setPRICECANNOTBEDETERMINED(refVal_setPRICECANNOTBEDETERMINED);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("PRICE_MISSING"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("PRICE_MISSING")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setPRICEMISSING;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPRICEMISSING);
            setPRICEMISSING(refVal_setPRICEMISSING);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("PRODUCT_LINK_MISSING"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("PRODUCT_LINK_MISSING")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setPRODUCTLINKMISSING;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPRODUCTLINKMISSING);
            setPRODUCTLINKMISSING(refVal_setPRODUCTLINKMISSING);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("PRODUCT_PRICE_INVALID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("PRODUCT_PRICE_INVALID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setPRODUCTPRICEINVALID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPRODUCTPRICEINVALID);
            setPRODUCTPRICEINVALID(refVal_setPRODUCTPRICEINVALID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("TITLE_MISSING"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("TITLE_MISSING")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemValidationDetails> refVal_setTITLEMISSING;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTITLEMISSING);
            setTITLEMISSING(refVal_setTITLEMISSING);
        }
    }
    return ok;
}

void CatalogsItemValidationErrors::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ADULT_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ADULT_INVALID")), m_ADULT_INVALID));
    }
    if(m_ADWORDS_FORMAT_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ADWORDS_FORMAT_INVALID")), m_ADWORDS_FORMAT_INVALID));
    }
    if(m_AVAILABILITY_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("AVAILABILITY_INVALID")), m_AVAILABILITY_INVALID));
    }
    if(m_BLOCKLISTED_IMAGE_SIGNATUREIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("BLOCKLISTED_IMAGE_SIGNATURE")), m_BLOCKLISTED_IMAGE_SIGNATURE));
    }
    if(m_DESCRIPTION_MISSINGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("DESCRIPTION_MISSING")), m_DESCRIPTION_MISSING));
    }
    if(m_DUPLICATE_PRODUCTSIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("DUPLICATE_PRODUCTS")), m_DUPLICATE_PRODUCTS));
    }
    if(m_IMAGE_LINK_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("IMAGE_LINK_INVALID")), m_IMAGE_LINK_INVALID));
    }
    if(m_IMAGE_LINK_LENGTH_TOO_LONGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("IMAGE_LINK_LENGTH_TOO_LONG")), m_IMAGE_LINK_LENGTH_TOO_LONG));
    }
    if(m_IMAGE_LINK_MISSINGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("IMAGE_LINK_MISSING")), m_IMAGE_LINK_MISSING));
    }
    if(m_INVALID_DOMAINIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("INVALID_DOMAIN")), m_INVALID_DOMAIN));
    }
    if(m_ITEMID_MISSINGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ITEMID_MISSING")), m_ITEMID_MISSING));
    }
    if(m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILUREIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE")), m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE));
    }
    if(m_LINK_FORMAT_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LINK_FORMAT_INVALID")), m_LINK_FORMAT_INVALID));
    }
    if(m_LINK_LENGTH_TOO_LONGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LINK_LENGTH_TOO_LONG")), m_LINK_LENGTH_TOO_LONG));
    }
    if(m_LIST_PRICE_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LIST_PRICE_INVALID")), m_LIST_PRICE_INVALID));
    }
    if(m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDEDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED")), m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED));
    }
    if(m_PARSE_LINE_ERRORIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("PARSE_LINE_ERROR")), m_PARSE_LINE_ERROR));
    }
    if(m_PINJOIN_CONTENT_UNSAFEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("PINJOIN_CONTENT_UNSAFE")), m_PINJOIN_CONTENT_UNSAFE));
    }
    if(m_PRICE_CANNOT_BE_DETERMINEDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("PRICE_CANNOT_BE_DETERMINED")), m_PRICE_CANNOT_BE_DETERMINED));
    }
    if(m_PRICE_MISSINGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("PRICE_MISSING")), m_PRICE_MISSING));
    }
    if(m_PRODUCT_LINK_MISSINGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("PRODUCT_LINK_MISSING")), m_PRODUCT_LINK_MISSING));
    }
    if(m_PRODUCT_PRICE_INVALIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("PRODUCT_PRICE_INVALID")), m_PRODUCT_PRICE_INVALID));
    }
    if(m_TITLE_MISSINGIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("TITLE_MISSING")), m_TITLE_MISSING));
    }
}

bool CatalogsItemValidationErrors::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("ADULT_INVALID"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setADULTINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ADULT_INVALID"))), refVal_setADULTINVALID );
        setADULTINVALID(refVal_setADULTINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ADWORDS_FORMAT_INVALID"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setADWORDSFORMATINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ADWORDS_FORMAT_INVALID"))), refVal_setADWORDSFORMATINVALID );
        setADWORDSFORMATINVALID(refVal_setADWORDSFORMATINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("AVAILABILITY_INVALID"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setAVAILABILITYINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("AVAILABILITY_INVALID"))), refVal_setAVAILABILITYINVALID );
        setAVAILABILITYINVALID(refVal_setAVAILABILITYINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("BLOCKLISTED_IMAGE_SIGNATURE"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setBLOCKLISTEDIMAGESIGNATURE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("BLOCKLISTED_IMAGE_SIGNATURE"))), refVal_setBLOCKLISTEDIMAGESIGNATURE );
        setBLOCKLISTEDIMAGESIGNATURE(refVal_setBLOCKLISTEDIMAGESIGNATURE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("DESCRIPTION_MISSING"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setDESCRIPTIONMISSING;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("DESCRIPTION_MISSING"))), refVal_setDESCRIPTIONMISSING );
        setDESCRIPTIONMISSING(refVal_setDESCRIPTIONMISSING);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("DUPLICATE_PRODUCTS"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setDUPLICATEPRODUCTS;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("DUPLICATE_PRODUCTS"))), refVal_setDUPLICATEPRODUCTS );
        setDUPLICATEPRODUCTS(refVal_setDUPLICATEPRODUCTS);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("IMAGE_LINK_INVALID"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setIMAGELINKINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("IMAGE_LINK_INVALID"))), refVal_setIMAGELINKINVALID );
        setIMAGELINKINVALID(refVal_setIMAGELINKINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("IMAGE_LINK_LENGTH_TOO_LONG"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setIMAGELINKLENGTHTOOLONG;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("IMAGE_LINK_LENGTH_TOO_LONG"))), refVal_setIMAGELINKLENGTHTOOLONG );
        setIMAGELINKLENGTHTOOLONG(refVal_setIMAGELINKLENGTHTOOLONG);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("IMAGE_LINK_MISSING"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setIMAGELINKMISSING;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("IMAGE_LINK_MISSING"))), refVal_setIMAGELINKMISSING );
        setIMAGELINKMISSING(refVal_setIMAGELINKMISSING);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("INVALID_DOMAIN"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setINVALIDDOMAIN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("INVALID_DOMAIN"))), refVal_setINVALIDDOMAIN );
        setINVALIDDOMAIN(refVal_setINVALIDDOMAIN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ITEMID_MISSING"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setITEMIDMISSING;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ITEMID_MISSING"))), refVal_setITEMIDMISSING );
        setITEMIDMISSING(refVal_setITEMIDMISSING);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setITEMMAINIMAGEDOWNLOADFAILURE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE"))), refVal_setITEMMAINIMAGEDOWNLOADFAILURE );
        setITEMMAINIMAGEDOWNLOADFAILURE(refVal_setITEMMAINIMAGEDOWNLOADFAILURE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LINK_FORMAT_INVALID"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setLINKFORMATINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LINK_FORMAT_INVALID"))), refVal_setLINKFORMATINVALID );
        setLINKFORMATINVALID(refVal_setLINKFORMATINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LINK_LENGTH_TOO_LONG"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setLINKLENGTHTOOLONG;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LINK_LENGTH_TOO_LONG"))), refVal_setLINKLENGTHTOOLONG );
        setLINKLENGTHTOOLONG(refVal_setLINKLENGTHTOOLONG);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LIST_PRICE_INVALID"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setLISTPRICEINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LIST_PRICE_INVALID"))), refVal_setLISTPRICEINVALID );
        setLISTPRICEINVALID(refVal_setLISTPRICEINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setMAXITEMSPERITEMGROUPEXCEEDED;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED"))), refVal_setMAXITEMSPERITEMGROUPEXCEEDED );
        setMAXITEMSPERITEMGROUPEXCEEDED(refVal_setMAXITEMSPERITEMGROUPEXCEEDED);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("PARSE_LINE_ERROR"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setPARSELINEERROR;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("PARSE_LINE_ERROR"))), refVal_setPARSELINEERROR );
        setPARSELINEERROR(refVal_setPARSELINEERROR);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("PINJOIN_CONTENT_UNSAFE"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setPINJOINCONTENTUNSAFE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("PINJOIN_CONTENT_UNSAFE"))), refVal_setPINJOINCONTENTUNSAFE );
        setPINJOINCONTENTUNSAFE(refVal_setPINJOINCONTENTUNSAFE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("PRICE_CANNOT_BE_DETERMINED"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setPRICECANNOTBEDETERMINED;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("PRICE_CANNOT_BE_DETERMINED"))), refVal_setPRICECANNOTBEDETERMINED );
        setPRICECANNOTBEDETERMINED(refVal_setPRICECANNOTBEDETERMINED);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("PRICE_MISSING"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setPRICEMISSING;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("PRICE_MISSING"))), refVal_setPRICEMISSING );
        setPRICEMISSING(refVal_setPRICEMISSING);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("PRODUCT_LINK_MISSING"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setPRODUCTLINKMISSING;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("PRODUCT_LINK_MISSING"))), refVal_setPRODUCTLINKMISSING );
        setPRODUCTLINKMISSING(refVal_setPRODUCTLINKMISSING);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("PRODUCT_PRICE_INVALID"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setPRODUCTPRICEINVALID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("PRODUCT_PRICE_INVALID"))), refVal_setPRODUCTPRICEINVALID );
        setPRODUCTPRICEINVALID(refVal_setPRODUCTPRICEINVALID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("TITLE_MISSING"))))
    {
        std::shared_ptr<CatalogsItemValidationDetails> refVal_setTITLEMISSING;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("TITLE_MISSING"))), refVal_setTITLEMISSING );
        setTITLEMISSING(refVal_setTITLEMISSING);
    }
    return ok;
}

std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationErrors::getADULTINVALID() const
{
    return m_ADULT_INVALID;
}

void CatalogsItemValidationErrors::setADULTINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_ADULT_INVALID = value;
    m_ADULT_INVALIDIsSet = true;
}

bool CatalogsItemValidationErrors::aDULTINVALIDIsSet() const
{
    return m_ADULT_INVALIDIsSet;
}

void CatalogsItemValidationErrors::unsetADULT_INVALID()
{
    m_ADULT_INVALIDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationErrors::getADWORDSFORMATINVALID() const
{
    return m_ADWORDS_FORMAT_INVALID;
}

void CatalogsItemValidationErrors::setADWORDSFORMATINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_ADWORDS_FORMAT_INVALID = value;
    m_ADWORDS_FORMAT_INVALIDIsSet = true;
}

bool CatalogsItemValidationErrors::aDWORDSFORMATINVALIDIsSet() const
{
    return m_ADWORDS_FORMAT_INVALIDIsSet;
}

void CatalogsItemValidationErrors::unsetADWORDS_FORMAT_INVALID()
{
    m_ADWORDS_FORMAT_INVALIDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationErrors::getAVAILABILITYINVALID() const
{
    return m_AVAILABILITY_INVALID;
}

void CatalogsItemValidationErrors::setAVAILABILITYINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_AVAILABILITY_INVALID = value;
    m_AVAILABILITY_INVALIDIsSet = true;
}

bool CatalogsItemValidationErrors::aVAILABILITYINVALIDIsSet() const
{
    return m_AVAILABILITY_INVALIDIsSet;
}

void CatalogsItemValidationErrors::unsetAVAILABILITY_INVALID()
{
    m_AVAILABILITY_INVALIDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationErrors::getBLOCKLISTEDIMAGESIGNATURE() const
{
    return m_BLOCKLISTED_IMAGE_SIGNATURE;
}

void CatalogsItemValidationErrors::setBLOCKLISTEDIMAGESIGNATURE(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_BLOCKLISTED_IMAGE_SIGNATURE = value;
    m_BLOCKLISTED_IMAGE_SIGNATUREIsSet = true;
}

bool CatalogsItemValidationErrors::bLOCKLISTEDIMAGESIGNATUREIsSet() const
{
    return m_BLOCKLISTED_IMAGE_SIGNATUREIsSet;
}

void CatalogsItemValidationErrors::unsetBLOCKLISTED_IMAGE_SIGNATURE()
{
    m_BLOCKLISTED_IMAGE_SIGNATUREIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationErrors::getDESCRIPTIONMISSING() const
{
    return m_DESCRIPTION_MISSING;
}

void CatalogsItemValidationErrors::setDESCRIPTIONMISSING(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_DESCRIPTION_MISSING = value;
    m_DESCRIPTION_MISSINGIsSet = true;
}

bool CatalogsItemValidationErrors::dESCRIPTIONMISSINGIsSet() const
{
    return m_DESCRIPTION_MISSINGIsSet;
}

void CatalogsItemValidationErrors::unsetDESCRIPTION_MISSING()
{
    m_DESCRIPTION_MISSINGIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationErrors::getDUPLICATEPRODUCTS() const
{
    return m_DUPLICATE_PRODUCTS;
}

void CatalogsItemValidationErrors::setDUPLICATEPRODUCTS(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_DUPLICATE_PRODUCTS = value;
    m_DUPLICATE_PRODUCTSIsSet = true;
}

bool CatalogsItemValidationErrors::dUPLICATEPRODUCTSIsSet() const
{
    return m_DUPLICATE_PRODUCTSIsSet;
}

void CatalogsItemValidationErrors::unsetDUPLICATE_PRODUCTS()
{
    m_DUPLICATE_PRODUCTSIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationErrors::getIMAGELINKINVALID() const
{
    return m_IMAGE_LINK_INVALID;
}

void CatalogsItemValidationErrors::setIMAGELINKINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_IMAGE_LINK_INVALID = value;
    m_IMAGE_LINK_INVALIDIsSet = true;
}

bool CatalogsItemValidationErrors::iMAGELINKINVALIDIsSet() const
{
    return m_IMAGE_LINK_INVALIDIsSet;
}

void CatalogsItemValidationErrors::unsetIMAGE_LINK_INVALID()
{
    m_IMAGE_LINK_INVALIDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationErrors::getIMAGELINKLENGTHTOOLONG() const
{
    return m_IMAGE_LINK_LENGTH_TOO_LONG;
}

void CatalogsItemValidationErrors::setIMAGELINKLENGTHTOOLONG(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_IMAGE_LINK_LENGTH_TOO_LONG = value;
    m_IMAGE_LINK_LENGTH_TOO_LONGIsSet = true;
}

bool CatalogsItemValidationErrors::iMAGELINKLENGTHTOOLONGIsSet() const
{
    return m_IMAGE_LINK_LENGTH_TOO_LONGIsSet;
}

void CatalogsItemValidationErrors::unsetIMAGE_LINK_LENGTH_TOO_LONG()
{
    m_IMAGE_LINK_LENGTH_TOO_LONGIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationErrors::getIMAGELINKMISSING() const
{
    return m_IMAGE_LINK_MISSING;
}

void CatalogsItemValidationErrors::setIMAGELINKMISSING(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_IMAGE_LINK_MISSING = value;
    m_IMAGE_LINK_MISSINGIsSet = true;
}

bool CatalogsItemValidationErrors::iMAGELINKMISSINGIsSet() const
{
    return m_IMAGE_LINK_MISSINGIsSet;
}

void CatalogsItemValidationErrors::unsetIMAGE_LINK_MISSING()
{
    m_IMAGE_LINK_MISSINGIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationErrors::getINVALIDDOMAIN() const
{
    return m_INVALID_DOMAIN;
}

void CatalogsItemValidationErrors::setINVALIDDOMAIN(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_INVALID_DOMAIN = value;
    m_INVALID_DOMAINIsSet = true;
}

bool CatalogsItemValidationErrors::iNVALIDDOMAINIsSet() const
{
    return m_INVALID_DOMAINIsSet;
}

void CatalogsItemValidationErrors::unsetINVALID_DOMAIN()
{
    m_INVALID_DOMAINIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationErrors::getITEMIDMISSING() const
{
    return m_ITEMID_MISSING;
}

void CatalogsItemValidationErrors::setITEMIDMISSING(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_ITEMID_MISSING = value;
    m_ITEMID_MISSINGIsSet = true;
}

bool CatalogsItemValidationErrors::iTEMIDMISSINGIsSet() const
{
    return m_ITEMID_MISSINGIsSet;
}

void CatalogsItemValidationErrors::unsetITEMID_MISSING()
{
    m_ITEMID_MISSINGIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationErrors::getITEMMAINIMAGEDOWNLOADFAILURE() const
{
    return m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE;
}

void CatalogsItemValidationErrors::setITEMMAINIMAGEDOWNLOADFAILURE(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE = value;
    m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILUREIsSet = true;
}

bool CatalogsItemValidationErrors::iTEMMAINIMAGEDOWNLOADFAILUREIsSet() const
{
    return m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILUREIsSet;
}

void CatalogsItemValidationErrors::unsetITEM_MAIN_IMAGE_DOWNLOAD_FAILURE()
{
    m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILUREIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationErrors::getLINKFORMATINVALID() const
{
    return m_LINK_FORMAT_INVALID;
}

void CatalogsItemValidationErrors::setLINKFORMATINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_LINK_FORMAT_INVALID = value;
    m_LINK_FORMAT_INVALIDIsSet = true;
}

bool CatalogsItemValidationErrors::lINKFORMATINVALIDIsSet() const
{
    return m_LINK_FORMAT_INVALIDIsSet;
}

void CatalogsItemValidationErrors::unsetLINK_FORMAT_INVALID()
{
    m_LINK_FORMAT_INVALIDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationErrors::getLINKLENGTHTOOLONG() const
{
    return m_LINK_LENGTH_TOO_LONG;
}

void CatalogsItemValidationErrors::setLINKLENGTHTOOLONG(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_LINK_LENGTH_TOO_LONG = value;
    m_LINK_LENGTH_TOO_LONGIsSet = true;
}

bool CatalogsItemValidationErrors::lINKLENGTHTOOLONGIsSet() const
{
    return m_LINK_LENGTH_TOO_LONGIsSet;
}

void CatalogsItemValidationErrors::unsetLINK_LENGTH_TOO_LONG()
{
    m_LINK_LENGTH_TOO_LONGIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationErrors::getLISTPRICEINVALID() const
{
    return m_LIST_PRICE_INVALID;
}

void CatalogsItemValidationErrors::setLISTPRICEINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_LIST_PRICE_INVALID = value;
    m_LIST_PRICE_INVALIDIsSet = true;
}

bool CatalogsItemValidationErrors::lISTPRICEINVALIDIsSet() const
{
    return m_LIST_PRICE_INVALIDIsSet;
}

void CatalogsItemValidationErrors::unsetLIST_PRICE_INVALID()
{
    m_LIST_PRICE_INVALIDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationErrors::getMAXITEMSPERITEMGROUPEXCEEDED() const
{
    return m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED;
}

void CatalogsItemValidationErrors::setMAXITEMSPERITEMGROUPEXCEEDED(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED = value;
    m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDEDIsSet = true;
}

bool CatalogsItemValidationErrors::mAXITEMSPERITEMGROUPEXCEEDEDIsSet() const
{
    return m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDEDIsSet;
}

void CatalogsItemValidationErrors::unsetMAX_ITEMS_PER_ITEM_GROUP_EXCEEDED()
{
    m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDEDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationErrors::getPARSELINEERROR() const
{
    return m_PARSE_LINE_ERROR;
}

void CatalogsItemValidationErrors::setPARSELINEERROR(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_PARSE_LINE_ERROR = value;
    m_PARSE_LINE_ERRORIsSet = true;
}

bool CatalogsItemValidationErrors::pARSELINEERRORIsSet() const
{
    return m_PARSE_LINE_ERRORIsSet;
}

void CatalogsItemValidationErrors::unsetPARSE_LINE_ERROR()
{
    m_PARSE_LINE_ERRORIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationErrors::getPINJOINCONTENTUNSAFE() const
{
    return m_PINJOIN_CONTENT_UNSAFE;
}

void CatalogsItemValidationErrors::setPINJOINCONTENTUNSAFE(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_PINJOIN_CONTENT_UNSAFE = value;
    m_PINJOIN_CONTENT_UNSAFEIsSet = true;
}

bool CatalogsItemValidationErrors::pINJOINCONTENTUNSAFEIsSet() const
{
    return m_PINJOIN_CONTENT_UNSAFEIsSet;
}

void CatalogsItemValidationErrors::unsetPINJOIN_CONTENT_UNSAFE()
{
    m_PINJOIN_CONTENT_UNSAFEIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationErrors::getPRICECANNOTBEDETERMINED() const
{
    return m_PRICE_CANNOT_BE_DETERMINED;
}

void CatalogsItemValidationErrors::setPRICECANNOTBEDETERMINED(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_PRICE_CANNOT_BE_DETERMINED = value;
    m_PRICE_CANNOT_BE_DETERMINEDIsSet = true;
}

bool CatalogsItemValidationErrors::pRICECANNOTBEDETERMINEDIsSet() const
{
    return m_PRICE_CANNOT_BE_DETERMINEDIsSet;
}

void CatalogsItemValidationErrors::unsetPRICE_CANNOT_BE_DETERMINED()
{
    m_PRICE_CANNOT_BE_DETERMINEDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationErrors::getPRICEMISSING() const
{
    return m_PRICE_MISSING;
}

void CatalogsItemValidationErrors::setPRICEMISSING(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_PRICE_MISSING = value;
    m_PRICE_MISSINGIsSet = true;
}

bool CatalogsItemValidationErrors::pRICEMISSINGIsSet() const
{
    return m_PRICE_MISSINGIsSet;
}

void CatalogsItemValidationErrors::unsetPRICE_MISSING()
{
    m_PRICE_MISSINGIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationErrors::getPRODUCTLINKMISSING() const
{
    return m_PRODUCT_LINK_MISSING;
}

void CatalogsItemValidationErrors::setPRODUCTLINKMISSING(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_PRODUCT_LINK_MISSING = value;
    m_PRODUCT_LINK_MISSINGIsSet = true;
}

bool CatalogsItemValidationErrors::pRODUCTLINKMISSINGIsSet() const
{
    return m_PRODUCT_LINK_MISSINGIsSet;
}

void CatalogsItemValidationErrors::unsetPRODUCT_LINK_MISSING()
{
    m_PRODUCT_LINK_MISSINGIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationErrors::getPRODUCTPRICEINVALID() const
{
    return m_PRODUCT_PRICE_INVALID;
}

void CatalogsItemValidationErrors::setPRODUCTPRICEINVALID(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_PRODUCT_PRICE_INVALID = value;
    m_PRODUCT_PRICE_INVALIDIsSet = true;
}

bool CatalogsItemValidationErrors::pRODUCTPRICEINVALIDIsSet() const
{
    return m_PRODUCT_PRICE_INVALIDIsSet;
}

void CatalogsItemValidationErrors::unsetPRODUCT_PRICE_INVALID()
{
    m_PRODUCT_PRICE_INVALIDIsSet = false;
}
std::shared_ptr<CatalogsItemValidationDetails> CatalogsItemValidationErrors::getTITLEMISSING() const
{
    return m_TITLE_MISSING;
}

void CatalogsItemValidationErrors::setTITLEMISSING(const std::shared_ptr<CatalogsItemValidationDetails>& value)
{
    m_TITLE_MISSING = value;
    m_TITLE_MISSINGIsSet = true;
}

bool CatalogsItemValidationErrors::tITLEMISSINGIsSet() const
{
    return m_TITLE_MISSINGIsSet;
}

void CatalogsItemValidationErrors::unsetTITLE_MISSING()
{
    m_TITLE_MISSINGIsSet = false;
}
}
}
}
}


