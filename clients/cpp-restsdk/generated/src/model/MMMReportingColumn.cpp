/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/MMMReportingColumn.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


namespace
{
using EnumUnderlyingType = utility::string_t;

MMMReportingColumn::eMMMReportingColumn toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("SPEND_IN_DOLLAR")))
        return MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_SPEND_IN_DOLLAR;
    if (val == utility::conversions::to_string_t(U("SPEND_IN_MICRO_DOLLAR")))
        return MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_SPEND_IN_MICRO_DOLLAR;
    if (val == utility::conversions::to_string_t(U("ECPC_IN_DOLLAR")))
        return MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_ECPC_IN_DOLLAR;
    if (val == utility::conversions::to_string_t(U("ECTR")))
        return MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_ECTR;
    if (val == utility::conversions::to_string_t(U("CAMPAIGN_NAME")))
        return MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_CAMPAIGN_NAME;
    if (val == utility::conversions::to_string_t(U("TOTAL_ENGAGEMENT")))
        return MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_TOTAL_ENGAGEMENT;
    if (val == utility::conversions::to_string_t(U("EENGAGEMENT_RATE")))
        return MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_EENGAGEMENT_RATE;
    if (val == utility::conversions::to_string_t(U("ECPM_IN_DOLLAR")))
        return MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_ECPM_IN_DOLLAR;
    if (val == utility::conversions::to_string_t(U("CAMPAIGN_ID")))
        return MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_CAMPAIGN_ID;
    if (val == utility::conversions::to_string_t(U("ADVERTISER_ID")))
        return MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_ADVERTISER_ID;
    if (val == utility::conversions::to_string_t(U("AD_GROUP_ID")))
        return MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_AD_GROUP_ID;
    if (val == utility::conversions::to_string_t(U("AD_GROUP_NAME")))
        return MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_AD_GROUP_NAME;
    if (val == utility::conversions::to_string_t(U("CLICKTHROUGH_1")))
        return MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_CLICKTHROUGH_1;
    if (val == utility::conversions::to_string_t(U("IMPRESSION_1")))
        return MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_IMPRESSION_1;
    if (val == utility::conversions::to_string_t(U("CLICKTHROUGH_2")))
        return MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_CLICKTHROUGH_2;
    if (val == utility::conversions::to_string_t(U("IMPRESSION_2")))
        return MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_IMPRESSION_2;
    if (val == utility::conversions::to_string_t(U("TOTAL_CLICKTHROUGH")))
        return MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_TOTAL_CLICKTHROUGH;
    if (val == utility::conversions::to_string_t(U("TOTAL_IMPRESSION")))
        return MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_TOTAL_IMPRESSION;
    if (val == utility::conversions::to_string_t(U("ADVERTISER_NAME")))
        return MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_ADVERTISER_NAME;
    if (val == utility::conversions::to_string_t(U("SPEND_ORDER_LINE_PAID_TYPE")))
        return MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_SPEND_ORDER_LINE_PAID_TYPE;
    return {};
}

EnumUnderlyingType fromEnum(MMMReportingColumn::eMMMReportingColumn e)
{
    switch (e)
    {
    case MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_SPEND_IN_DOLLAR:
        return U("SPEND_IN_DOLLAR");
    case MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_SPEND_IN_MICRO_DOLLAR:
        return U("SPEND_IN_MICRO_DOLLAR");
    case MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_ECPC_IN_DOLLAR:
        return U("ECPC_IN_DOLLAR");
    case MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_ECTR:
        return U("ECTR");
    case MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_CAMPAIGN_NAME:
        return U("CAMPAIGN_NAME");
    case MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_TOTAL_ENGAGEMENT:
        return U("TOTAL_ENGAGEMENT");
    case MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_EENGAGEMENT_RATE:
        return U("EENGAGEMENT_RATE");
    case MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_ECPM_IN_DOLLAR:
        return U("ECPM_IN_DOLLAR");
    case MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_CAMPAIGN_ID:
        return U("CAMPAIGN_ID");
    case MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_ADVERTISER_ID:
        return U("ADVERTISER_ID");
    case MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_AD_GROUP_ID:
        return U("AD_GROUP_ID");
    case MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_AD_GROUP_NAME:
        return U("AD_GROUP_NAME");
    case MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_CLICKTHROUGH_1:
        return U("CLICKTHROUGH_1");
    case MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_IMPRESSION_1:
        return U("IMPRESSION_1");
    case MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_CLICKTHROUGH_2:
        return U("CLICKTHROUGH_2");
    case MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_IMPRESSION_2:
        return U("IMPRESSION_2");
    case MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_TOTAL_CLICKTHROUGH:
        return U("TOTAL_CLICKTHROUGH");
    case MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_TOTAL_IMPRESSION:
        return U("TOTAL_IMPRESSION");
    case MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_ADVERTISER_NAME:
        return U("ADVERTISER_NAME");
    case MMMReportingColumn::eMMMReportingColumn::MMMReportingColumn_SPEND_ORDER_LINE_PAID_TYPE:
        return U("SPEND_ORDER_LINE_PAID_TYPE");
    default:
        break;
    }
    return {};
}
}

MMMReportingColumn::MMMReportingColumn()
{
}

MMMReportingColumn::~MMMReportingColumn()
{
}

void MMMReportingColumn::validate()
{
    // TODO: implement validation
}

web::json::value MMMReportingColumn::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool MMMReportingColumn::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void MMMReportingColumn::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool MMMReportingColumn::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

MMMReportingColumn::eMMMReportingColumn MMMReportingColumn::getValue() const
{
   return m_value;
}

void MMMReportingColumn::setValue(MMMReportingColumn::eMMMReportingColumn const value)
{
   m_value = value;
}


}
}
}
}


