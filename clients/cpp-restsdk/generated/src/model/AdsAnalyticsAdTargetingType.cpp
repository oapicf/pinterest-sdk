/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AdsAnalyticsAdTargetingType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


namespace
{
using EnumUnderlyingType = utility::string_t;

AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("KEYWORD")))
        return AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AdsAnalyticsAdTargetingType_KEYWORD;
    if (val == utility::conversions::to_string_t(U("APPTYPE")))
        return AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AdsAnalyticsAdTargetingType_APPTYPE;
    if (val == utility::conversions::to_string_t(U("GENDER")))
        return AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AdsAnalyticsAdTargetingType_GENDER;
    if (val == utility::conversions::to_string_t(U("LOCATION")))
        return AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AdsAnalyticsAdTargetingType_LOCATION;
    if (val == utility::conversions::to_string_t(U("PLACEMENT")))
        return AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AdsAnalyticsAdTargetingType_PLACEMENT;
    if (val == utility::conversions::to_string_t(U("COUNTRY")))
        return AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AdsAnalyticsAdTargetingType_COUNTRY;
    if (val == utility::conversions::to_string_t(U("TARGETED_INTEREST")))
        return AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AdsAnalyticsAdTargetingType_TARGETED_INTEREST;
    if (val == utility::conversions::to_string_t(U("PINNER_INTEREST")))
        return AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AdsAnalyticsAdTargetingType_PINNER_INTEREST;
    if (val == utility::conversions::to_string_t(U("AUDIENCE_INCLUDE")))
        return AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AdsAnalyticsAdTargetingType_AUDIENCE_INCLUDE;
    if (val == utility::conversions::to_string_t(U("GEO")))
        return AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AdsAnalyticsAdTargetingType_GEO;
    if (val == utility::conversions::to_string_t(U("AGE_BUCKET")))
        return AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AdsAnalyticsAdTargetingType_AGE_BUCKET;
    if (val == utility::conversions::to_string_t(U("REGION")))
        return AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AdsAnalyticsAdTargetingType_REGION;
    if (val == utility::conversions::to_string_t(U("QUIZ_RESULT")))
        return AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AdsAnalyticsAdTargetingType_QUIZ_RESULT;
    if (val == utility::conversions::to_string_t(U("AGE_BUCKET_AND_GENDER")))
        return AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AdsAnalyticsAdTargetingType_AGE_BUCKET_AND_GENDER;
    return {};
}

EnumUnderlyingType fromEnum(AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType e)
{
    switch (e)
    {
    case AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AdsAnalyticsAdTargetingType_KEYWORD:
        return U("KEYWORD");
    case AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AdsAnalyticsAdTargetingType_APPTYPE:
        return U("APPTYPE");
    case AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AdsAnalyticsAdTargetingType_GENDER:
        return U("GENDER");
    case AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AdsAnalyticsAdTargetingType_LOCATION:
        return U("LOCATION");
    case AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AdsAnalyticsAdTargetingType_PLACEMENT:
        return U("PLACEMENT");
    case AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AdsAnalyticsAdTargetingType_COUNTRY:
        return U("COUNTRY");
    case AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AdsAnalyticsAdTargetingType_TARGETED_INTEREST:
        return U("TARGETED_INTEREST");
    case AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AdsAnalyticsAdTargetingType_PINNER_INTEREST:
        return U("PINNER_INTEREST");
    case AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AdsAnalyticsAdTargetingType_AUDIENCE_INCLUDE:
        return U("AUDIENCE_INCLUDE");
    case AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AdsAnalyticsAdTargetingType_GEO:
        return U("GEO");
    case AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AdsAnalyticsAdTargetingType_AGE_BUCKET:
        return U("AGE_BUCKET");
    case AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AdsAnalyticsAdTargetingType_REGION:
        return U("REGION");
    case AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AdsAnalyticsAdTargetingType_QUIZ_RESULT:
        return U("QUIZ_RESULT");
    case AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType::AdsAnalyticsAdTargetingType_AGE_BUCKET_AND_GENDER:
        return U("AGE_BUCKET_AND_GENDER");
    default:
        break;
    }
    return {};
}
}

AdsAnalyticsAdTargetingType::AdsAnalyticsAdTargetingType()
{
}

AdsAnalyticsAdTargetingType::~AdsAnalyticsAdTargetingType()
{
}

void AdsAnalyticsAdTargetingType::validate()
{
    // TODO: implement validation
}

web::json::value AdsAnalyticsAdTargetingType::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool AdsAnalyticsAdTargetingType::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void AdsAnalyticsAdTargetingType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool AdsAnalyticsAdTargetingType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType AdsAnalyticsAdTargetingType::getValue() const
{
   return m_value;
}

void AdsAnalyticsAdTargetingType::setValue(AdsAnalyticsAdTargetingType::eAdsAnalyticsAdTargetingType const value)
{
   m_value = value;
}


}
}
}
}


