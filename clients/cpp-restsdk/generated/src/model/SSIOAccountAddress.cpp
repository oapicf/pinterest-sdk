/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SSIOAccountAddress.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



SSIOAccountAddress::SSIOAccountAddress()
{
    m_Display = utility::conversions::to_string_t("");
    m_DisplayIsSet = false;
    m_Purpose = utility::conversions::to_string_t("");
    m_PurposeIsSet = false;
    m_Address_id = utility::conversions::to_string_t("");
    m_Address_idIsSet = false;
    m_Order_legal_entity = utility::conversions::to_string_t("");
    m_Order_legal_entityIsSet = false;
}

SSIOAccountAddress::~SSIOAccountAddress()
{
}

void SSIOAccountAddress::validate()
{
    // TODO: implement validation
}

web::json::value SSIOAccountAddress::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DisplayIsSet)
    {
        val[utility::conversions::to_string_t(U("display"))] = ModelBase::toJson(m_Display);
    }
    if(m_PurposeIsSet)
    {
        val[utility::conversions::to_string_t(U("purpose"))] = ModelBase::toJson(m_Purpose);
    }
    if(m_Address_idIsSet)
    {
        val[utility::conversions::to_string_t(U("address_id"))] = ModelBase::toJson(m_Address_id);
    }
    if(m_Order_legal_entityIsSet)
    {
        val[utility::conversions::to_string_t(U("order_legal_entity"))] = ModelBase::toJson(m_Order_legal_entity);
    }

    return val;
}

bool SSIOAccountAddress::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("display"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("display")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDisplay;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDisplay);
            setDisplay(refVal_setDisplay);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("purpose"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("purpose")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPurpose;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPurpose);
            setPurpose(refVal_setPurpose);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("address_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("address_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAddressId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAddressId);
            setAddressId(refVal_setAddressId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("order_legal_entity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("order_legal_entity")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOrderLegalEntity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrderLegalEntity);
            setOrderLegalEntity(refVal_setOrderLegalEntity);
        }
    }
    return ok;
}

void SSIOAccountAddress::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_DisplayIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("display")), m_Display));
    }
    if(m_PurposeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("purpose")), m_Purpose));
    }
    if(m_Address_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("address_id")), m_Address_id));
    }
    if(m_Order_legal_entityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("order_legal_entity")), m_Order_legal_entity));
    }
}

bool SSIOAccountAddress::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("display"))))
    {
        utility::string_t refVal_setDisplay;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("display"))), refVal_setDisplay );
        setDisplay(refVal_setDisplay);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("purpose"))))
    {
        utility::string_t refVal_setPurpose;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("purpose"))), refVal_setPurpose );
        setPurpose(refVal_setPurpose);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("address_id"))))
    {
        utility::string_t refVal_setAddressId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("address_id"))), refVal_setAddressId );
        setAddressId(refVal_setAddressId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("order_legal_entity"))))
    {
        utility::string_t refVal_setOrderLegalEntity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("order_legal_entity"))), refVal_setOrderLegalEntity );
        setOrderLegalEntity(refVal_setOrderLegalEntity);
    }
    return ok;
}

utility::string_t SSIOAccountAddress::getDisplay() const
{
    return m_Display;
}

void SSIOAccountAddress::setDisplay(const utility::string_t& value)
{
    m_Display = value;
    m_DisplayIsSet = true;
}

bool SSIOAccountAddress::displayIsSet() const
{
    return m_DisplayIsSet;
}

void SSIOAccountAddress::unsetDisplay()
{
    m_DisplayIsSet = false;
}
utility::string_t SSIOAccountAddress::getPurpose() const
{
    return m_Purpose;
}

void SSIOAccountAddress::setPurpose(const utility::string_t& value)
{
    m_Purpose = value;
    m_PurposeIsSet = true;
}

bool SSIOAccountAddress::purposeIsSet() const
{
    return m_PurposeIsSet;
}

void SSIOAccountAddress::unsetPurpose()
{
    m_PurposeIsSet = false;
}
utility::string_t SSIOAccountAddress::getAddressId() const
{
    return m_Address_id;
}

void SSIOAccountAddress::setAddressId(const utility::string_t& value)
{
    m_Address_id = value;
    m_Address_idIsSet = true;
}

bool SSIOAccountAddress::addressIdIsSet() const
{
    return m_Address_idIsSet;
}

void SSIOAccountAddress::unsetAddress_id()
{
    m_Address_idIsSet = false;
}
utility::string_t SSIOAccountAddress::getOrderLegalEntity() const
{
    return m_Order_legal_entity;
}

void SSIOAccountAddress::setOrderLegalEntity(const utility::string_t& value)
{
    m_Order_legal_entity = value;
    m_Order_legal_entityIsSet = true;
}

bool SSIOAccountAddress::orderLegalEntityIsSet() const
{
    return m_Order_legal_entityIsSet;
}

void SSIOAccountAddress::unsetOrder_legal_entity()
{
    m_Order_legal_entityIsSet = false;
}
}
}
}
}


