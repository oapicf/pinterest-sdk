/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AudienceDefinition.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AudienceDefinition::AudienceDefinition()
{
    m_date = utility::conversions::to_string_t("");
    m_dateIsSet = false;
    m_TypeIsSet = false;
    m_ScopeIsSet = false;
}

AudienceDefinition::~AudienceDefinition()
{
}

void AudienceDefinition::validate()
{
    // TODO: implement validation
}

web::json::value AudienceDefinition::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_dateIsSet)
    {
        val[utility::conversions::to_string_t(U("date"))] = ModelBase::toJson(m_date);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_ScopeIsSet)
    {
        val[utility::conversions::to_string_t(U("scope"))] = ModelBase::toJson(m_Scope);
    }

    return val;
}

bool AudienceDefinition::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("date")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDate);
            setDate(refVal_setDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("scope"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("scope")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setScope;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScope);
            setScope(refVal_setScope);
        }
    }
    return ok;
}

void AudienceDefinition::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("date")), m_date));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_ScopeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("scope")), m_Scope));
    }
}

bool AudienceDefinition::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("date"))))
    {
        utility::string_t refVal_setDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("date"))), refVal_setDate );
        setDate(refVal_setDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("scope"))))
    {
        utility::string_t refVal_setScope;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("scope"))), refVal_setScope );
        setScope(refVal_setScope);
    }
    return ok;
}

utility::string_t AudienceDefinition::getDate() const
{
    return m_date;
}

void AudienceDefinition::setDate(const utility::string_t& value)
{
    m_date = value;
    m_dateIsSet = true;
}

bool AudienceDefinition::dateIsSet() const
{
    return m_dateIsSet;
}

void AudienceDefinition::unsetdate()
{
    m_dateIsSet = false;
}
utility::string_t AudienceDefinition::getType() const
{
    return m_Type;
}

void AudienceDefinition::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool AudienceDefinition::typeIsSet() const
{
    return m_TypeIsSet;
}

void AudienceDefinition::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t AudienceDefinition::getScope() const
{
    return m_Scope;
}

void AudienceDefinition::setScope(const utility::string_t& value)
{
    m_Scope = value;
    m_ScopeIsSet = true;
}

bool AudienceDefinition::scopeIsSet() const
{
    return m_ScopeIsSet;
}

void AudienceDefinition::unsetScope()
{
    m_ScopeIsSet = false;
}
}
}
}
}


