/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CatalogsHotelProduct.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CatalogsHotelProduct::CatalogsHotelProduct()
{
    m_Catalog_type = utility::conversions::to_string_t("");
    m_Catalog_typeIsSet = false;
    m_MetadataIsSet = false;
    m_PinIsSet = false;
}

CatalogsHotelProduct::~CatalogsHotelProduct()
{
}

void CatalogsHotelProduct::validate()
{
    // TODO: implement validation
}

web::json::value CatalogsHotelProduct::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Catalog_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("catalog_type"))] = ModelBase::toJson(m_Catalog_type);
    }
    if(m_MetadataIsSet)
    {
        val[utility::conversions::to_string_t(U("metadata"))] = ModelBase::toJson(m_Metadata);
    }
    if(m_PinIsSet)
    {
        val[utility::conversions::to_string_t(U("pin"))] = ModelBase::toJson(m_Pin);
    }

    return val;
}

bool CatalogsHotelProduct::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("catalog_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("catalog_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCatalogType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCatalogType);
            setCatalogType(refVal_setCatalogType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("metadata"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("metadata")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsHotelProductMetadata> refVal_setMetadata;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMetadata);
            setMetadata(refVal_setMetadata);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pin"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pin")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Pin> refVal_setPin;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPin);
            setPin(refVal_setPin);
        }
    }
    return ok;
}

void CatalogsHotelProduct::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Catalog_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("catalog_type")), m_Catalog_type));
    }
    if(m_MetadataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("metadata")), m_Metadata));
    }
    if(m_PinIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pin")), m_Pin));
    }
}

bool CatalogsHotelProduct::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("catalog_type"))))
    {
        utility::string_t refVal_setCatalogType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("catalog_type"))), refVal_setCatalogType );
        setCatalogType(refVal_setCatalogType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("metadata"))))
    {
        std::shared_ptr<CatalogsHotelProductMetadata> refVal_setMetadata;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("metadata"))), refVal_setMetadata );
        setMetadata(refVal_setMetadata);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pin"))))
    {
        std::shared_ptr<Pin> refVal_setPin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pin"))), refVal_setPin );
        setPin(refVal_setPin);
    }
    return ok;
}

utility::string_t CatalogsHotelProduct::getCatalogType() const
{
    return m_Catalog_type;
}

void CatalogsHotelProduct::setCatalogType(const utility::string_t& value)
{
    m_Catalog_type = value;
    m_Catalog_typeIsSet = true;
}

bool CatalogsHotelProduct::catalogTypeIsSet() const
{
    return m_Catalog_typeIsSet;
}

void CatalogsHotelProduct::unsetCatalog_type()
{
    m_Catalog_typeIsSet = false;
}
std::shared_ptr<CatalogsHotelProductMetadata> CatalogsHotelProduct::getMetadata() const
{
    return m_Metadata;
}

void CatalogsHotelProduct::setMetadata(const std::shared_ptr<CatalogsHotelProductMetadata>& value)
{
    m_Metadata = value;
    m_MetadataIsSet = true;
}

bool CatalogsHotelProduct::metadataIsSet() const
{
    return m_MetadataIsSet;
}

void CatalogsHotelProduct::unsetMetadata()
{
    m_MetadataIsSet = false;
}
std::shared_ptr<Pin> CatalogsHotelProduct::getPin() const
{
    return m_Pin;
}

void CatalogsHotelProduct::setPin(const std::shared_ptr<Pin>& value)
{
    m_Pin = value;
    m_PinIsSet = true;
}

bool CatalogsHotelProduct::pinIsSet() const
{
    return m_PinIsSet;
}

void CatalogsHotelProduct::unsetPin()
{
    m_PinIsSet = false;
}
}
}
}
}


