/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/DeliveryMetricsResponse_items_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



DeliveryMetricsResponse_items_inner::DeliveryMetricsResponse_items_inner()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Category = utility::conversions::to_string_t("");
    m_CategoryIsSet = false;
    m_Definition = utility::conversions::to_string_t("");
    m_DefinitionIsSet = false;
    m_Display_name = utility::conversions::to_string_t("");
    m_Display_nameIsSet = false;
}

DeliveryMetricsResponse_items_inner::~DeliveryMetricsResponse_items_inner()
{
}

void DeliveryMetricsResponse_items_inner::validate()
{
    // TODO: implement validation
}

web::json::value DeliveryMetricsResponse_items_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_CategoryIsSet)
    {
        val[utility::conversions::to_string_t(U("category"))] = ModelBase::toJson(m_Category);
    }
    if(m_DefinitionIsSet)
    {
        val[utility::conversions::to_string_t(U("definition"))] = ModelBase::toJson(m_Definition);
    }
    if(m_Display_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("display_name"))] = ModelBase::toJson(m_Display_name);
    }

    return val;
}

bool DeliveryMetricsResponse_items_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("category"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("category")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCategory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCategory);
            setCategory(refVal_setCategory);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("definition"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("definition")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDefinition;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDefinition);
            setDefinition(refVal_setDefinition);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("display_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("display_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDisplayName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDisplayName);
            setDisplayName(refVal_setDisplayName);
        }
    }
    return ok;
}

void DeliveryMetricsResponse_items_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_CategoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("category")), m_Category));
    }
    if(m_DefinitionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("definition")), m_Definition));
    }
    if(m_Display_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("display_name")), m_Display_name));
    }
}

bool DeliveryMetricsResponse_items_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("category"))))
    {
        utility::string_t refVal_setCategory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("category"))), refVal_setCategory );
        setCategory(refVal_setCategory);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("definition"))))
    {
        utility::string_t refVal_setDefinition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("definition"))), refVal_setDefinition );
        setDefinition(refVal_setDefinition);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("display_name"))))
    {
        utility::string_t refVal_setDisplayName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("display_name"))), refVal_setDisplayName );
        setDisplayName(refVal_setDisplayName);
    }
    return ok;
}

utility::string_t DeliveryMetricsResponse_items_inner::getName() const
{
    return m_Name;
}

void DeliveryMetricsResponse_items_inner::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool DeliveryMetricsResponse_items_inner::nameIsSet() const
{
    return m_NameIsSet;
}

void DeliveryMetricsResponse_items_inner::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t DeliveryMetricsResponse_items_inner::getCategory() const
{
    return m_Category;
}

void DeliveryMetricsResponse_items_inner::setCategory(const utility::string_t& value)
{
    m_Category = value;
    m_CategoryIsSet = true;
}

bool DeliveryMetricsResponse_items_inner::categoryIsSet() const
{
    return m_CategoryIsSet;
}

void DeliveryMetricsResponse_items_inner::unsetCategory()
{
    m_CategoryIsSet = false;
}
utility::string_t DeliveryMetricsResponse_items_inner::getDefinition() const
{
    return m_Definition;
}

void DeliveryMetricsResponse_items_inner::setDefinition(const utility::string_t& value)
{
    m_Definition = value;
    m_DefinitionIsSet = true;
}

bool DeliveryMetricsResponse_items_inner::definitionIsSet() const
{
    return m_DefinitionIsSet;
}

void DeliveryMetricsResponse_items_inner::unsetDefinition()
{
    m_DefinitionIsSet = false;
}
utility::string_t DeliveryMetricsResponse_items_inner::getDisplayName() const
{
    return m_Display_name;
}

void DeliveryMetricsResponse_items_inner::setDisplayName(const utility::string_t& value)
{
    m_Display_name = value;
    m_Display_nameIsSet = true;
}

bool DeliveryMetricsResponse_items_inner::displayNameIsSet() const
{
    return m_Display_nameIsSet;
}

void DeliveryMetricsResponse_items_inner::unsetDisplay_name()
{
    m_Display_nameIsSet = false;
}
}
}
}
}


