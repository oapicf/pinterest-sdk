/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AdAccountCreateSubscriptionRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AdAccountCreateSubscriptionRequest::AdAccountCreateSubscriptionRequest()
{
    m_Webhook_url = utility::conversions::to_string_t("");
    m_Webhook_urlIsSet = false;
    m_Lead_form_id = utility::conversions::to_string_t("");
    m_Lead_form_idIsSet = false;
    m_Partner_access_token = utility::conversions::to_string_t("");
    m_Partner_access_tokenIsSet = false;
    m_Partner_refresh_token = utility::conversions::to_string_t("");
    m_Partner_refresh_tokenIsSet = false;
    m_Partner_metadataIsSet = false;
}

AdAccountCreateSubscriptionRequest::~AdAccountCreateSubscriptionRequest()
{
}

void AdAccountCreateSubscriptionRequest::validate()
{
    // TODO: implement validation
}

web::json::value AdAccountCreateSubscriptionRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Webhook_urlIsSet)
    {
        val[utility::conversions::to_string_t(U("webhook_url"))] = ModelBase::toJson(m_Webhook_url);
    }
    if(m_Lead_form_idIsSet)
    {
        val[utility::conversions::to_string_t(U("lead_form_id"))] = ModelBase::toJson(m_Lead_form_id);
    }
    if(m_Partner_access_tokenIsSet)
    {
        val[utility::conversions::to_string_t(U("partner_access_token"))] = ModelBase::toJson(m_Partner_access_token);
    }
    if(m_Partner_refresh_tokenIsSet)
    {
        val[utility::conversions::to_string_t(U("partner_refresh_token"))] = ModelBase::toJson(m_Partner_refresh_token);
    }
    if(m_Partner_metadataIsSet)
    {
        val[utility::conversions::to_string_t(U("partner_metadata"))] = ModelBase::toJson(m_Partner_metadata);
    }

    return val;
}

bool AdAccountCreateSubscriptionRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("webhook_url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("webhook_url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWebhookUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWebhookUrl);
            setWebhookUrl(refVal_setWebhookUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lead_form_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lead_form_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLeadFormId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLeadFormId);
            setLeadFormId(refVal_setLeadFormId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("partner_access_token"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("partner_access_token")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPartnerAccessToken;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPartnerAccessToken);
            setPartnerAccessToken(refVal_setPartnerAccessToken);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("partner_refresh_token"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("partner_refresh_token")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPartnerRefreshToken;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPartnerRefreshToken);
            setPartnerRefreshToken(refVal_setPartnerRefreshToken);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("partner_metadata"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("partner_metadata")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AdAccountCreateSubscriptionRequest_partner_metadata> refVal_setPartnerMetadata;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPartnerMetadata);
            setPartnerMetadata(refVal_setPartnerMetadata);
        }
    }
    return ok;
}

void AdAccountCreateSubscriptionRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Webhook_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("webhook_url")), m_Webhook_url));
    }
    if(m_Lead_form_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lead_form_id")), m_Lead_form_id));
    }
    if(m_Partner_access_tokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("partner_access_token")), m_Partner_access_token));
    }
    if(m_Partner_refresh_tokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("partner_refresh_token")), m_Partner_refresh_token));
    }
    if(m_Partner_metadataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("partner_metadata")), m_Partner_metadata));
    }
}

bool AdAccountCreateSubscriptionRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("webhook_url"))))
    {
        utility::string_t refVal_setWebhookUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("webhook_url"))), refVal_setWebhookUrl );
        setWebhookUrl(refVal_setWebhookUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lead_form_id"))))
    {
        utility::string_t refVal_setLeadFormId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lead_form_id"))), refVal_setLeadFormId );
        setLeadFormId(refVal_setLeadFormId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("partner_access_token"))))
    {
        utility::string_t refVal_setPartnerAccessToken;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("partner_access_token"))), refVal_setPartnerAccessToken );
        setPartnerAccessToken(refVal_setPartnerAccessToken);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("partner_refresh_token"))))
    {
        utility::string_t refVal_setPartnerRefreshToken;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("partner_refresh_token"))), refVal_setPartnerRefreshToken );
        setPartnerRefreshToken(refVal_setPartnerRefreshToken);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("partner_metadata"))))
    {
        std::shared_ptr<AdAccountCreateSubscriptionRequest_partner_metadata> refVal_setPartnerMetadata;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("partner_metadata"))), refVal_setPartnerMetadata );
        setPartnerMetadata(refVal_setPartnerMetadata);
    }
    return ok;
}

utility::string_t AdAccountCreateSubscriptionRequest::getWebhookUrl() const
{
    return m_Webhook_url;
}

void AdAccountCreateSubscriptionRequest::setWebhookUrl(const utility::string_t& value)
{
    m_Webhook_url = value;
    m_Webhook_urlIsSet = true;
}

bool AdAccountCreateSubscriptionRequest::webhookUrlIsSet() const
{
    return m_Webhook_urlIsSet;
}

void AdAccountCreateSubscriptionRequest::unsetWebhook_url()
{
    m_Webhook_urlIsSet = false;
}
utility::string_t AdAccountCreateSubscriptionRequest::getLeadFormId() const
{
    return m_Lead_form_id;
}

void AdAccountCreateSubscriptionRequest::setLeadFormId(const utility::string_t& value)
{
    m_Lead_form_id = value;
    m_Lead_form_idIsSet = true;
}

bool AdAccountCreateSubscriptionRequest::leadFormIdIsSet() const
{
    return m_Lead_form_idIsSet;
}

void AdAccountCreateSubscriptionRequest::unsetLead_form_id()
{
    m_Lead_form_idIsSet = false;
}
utility::string_t AdAccountCreateSubscriptionRequest::getPartnerAccessToken() const
{
    return m_Partner_access_token;
}

void AdAccountCreateSubscriptionRequest::setPartnerAccessToken(const utility::string_t& value)
{
    m_Partner_access_token = value;
    m_Partner_access_tokenIsSet = true;
}

bool AdAccountCreateSubscriptionRequest::partnerAccessTokenIsSet() const
{
    return m_Partner_access_tokenIsSet;
}

void AdAccountCreateSubscriptionRequest::unsetPartner_access_token()
{
    m_Partner_access_tokenIsSet = false;
}
utility::string_t AdAccountCreateSubscriptionRequest::getPartnerRefreshToken() const
{
    return m_Partner_refresh_token;
}

void AdAccountCreateSubscriptionRequest::setPartnerRefreshToken(const utility::string_t& value)
{
    m_Partner_refresh_token = value;
    m_Partner_refresh_tokenIsSet = true;
}

bool AdAccountCreateSubscriptionRequest::partnerRefreshTokenIsSet() const
{
    return m_Partner_refresh_tokenIsSet;
}

void AdAccountCreateSubscriptionRequest::unsetPartner_refresh_token()
{
    m_Partner_refresh_tokenIsSet = false;
}
std::shared_ptr<AdAccountCreateSubscriptionRequest_partner_metadata> AdAccountCreateSubscriptionRequest::getPartnerMetadata() const
{
    return m_Partner_metadata;
}

void AdAccountCreateSubscriptionRequest::setPartnerMetadata(const std::shared_ptr<AdAccountCreateSubscriptionRequest_partner_metadata>& value)
{
    m_Partner_metadata = value;
    m_Partner_metadataIsSet = true;
}

bool AdAccountCreateSubscriptionRequest::partnerMetadataIsSet() const
{
    return m_Partner_metadataIsSet;
}

void AdAccountCreateSubscriptionRequest::unsetPartner_metadata()
{
    m_Partner_metadataIsSet = false;
}
}
}
}
}


