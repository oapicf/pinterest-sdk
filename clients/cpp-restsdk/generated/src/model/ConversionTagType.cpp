/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ConversionTagType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


namespace
{
using EnumUnderlyingType = utility::string_t;

ConversionTagType::eConversionTagType toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("PAGE_LOAD")))
        return ConversionTagType::eConversionTagType::ConversionTagType_PAGE_LOAD;
    if (val == utility::conversions::to_string_t(U("UNKNOWN")))
        return ConversionTagType::eConversionTagType::ConversionTagType_UNKNOWN;
    if (val == utility::conversions::to_string_t(U("INITIALIZED")))
        return ConversionTagType::eConversionTagType::ConversionTagType_INITIALIZED;
    if (val == utility::conversions::to_string_t(U("PAGE_VISIT")))
        return ConversionTagType::eConversionTagType::ConversionTagType_PAGE_VISIT;
    if (val == utility::conversions::to_string_t(U("SIGNUP")))
        return ConversionTagType::eConversionTagType::ConversionTagType_SIGNUP;
    if (val == utility::conversions::to_string_t(U("CHECKOUT")))
        return ConversionTagType::eConversionTagType::ConversionTagType_CHECKOUT;
    if (val == utility::conversions::to_string_t(U("CUSTOM")))
        return ConversionTagType::eConversionTagType::ConversionTagType_CUSTOM;
    if (val == utility::conversions::to_string_t(U("VIEW_CATEGORY")))
        return ConversionTagType::eConversionTagType::ConversionTagType_VIEW_CATEGORY;
    if (val == utility::conversions::to_string_t(U("SEARCH")))
        return ConversionTagType::eConversionTagType::ConversionTagType_SEARCH;
    if (val == utility::conversions::to_string_t(U("ADD_TO_CART")))
        return ConversionTagType::eConversionTagType::ConversionTagType_ADD_TO_CART;
    if (val == utility::conversions::to_string_t(U("WATCH_VIDEO")))
        return ConversionTagType::eConversionTagType::ConversionTagType_WATCH_VIDEO;
    if (val == utility::conversions::to_string_t(U("LEAD")))
        return ConversionTagType::eConversionTagType::ConversionTagType_LEAD;
    if (val == utility::conversions::to_string_t(U("APP_INSTALL")))
        return ConversionTagType::eConversionTagType::ConversionTagType_APP_INSTALL;
    if (val == utility::conversions::to_string_t(U("WEB_SESSION")))
        return ConversionTagType::eConversionTagType::ConversionTagType_WEB_SESSION;
    if (val == utility::conversions::to_string_t(U("EXTERNAL_MEASUREMENT")))
        return ConversionTagType::eConversionTagType::ConversionTagType_EXTERNAL_MEASUREMENT;
    return {};
}

EnumUnderlyingType fromEnum(ConversionTagType::eConversionTagType e)
{
    switch (e)
    {
    case ConversionTagType::eConversionTagType::ConversionTagType_PAGE_LOAD:
        return U("PAGE_LOAD");
    case ConversionTagType::eConversionTagType::ConversionTagType_UNKNOWN:
        return U("UNKNOWN");
    case ConversionTagType::eConversionTagType::ConversionTagType_INITIALIZED:
        return U("INITIALIZED");
    case ConversionTagType::eConversionTagType::ConversionTagType_PAGE_VISIT:
        return U("PAGE_VISIT");
    case ConversionTagType::eConversionTagType::ConversionTagType_SIGNUP:
        return U("SIGNUP");
    case ConversionTagType::eConversionTagType::ConversionTagType_CHECKOUT:
        return U("CHECKOUT");
    case ConversionTagType::eConversionTagType::ConversionTagType_CUSTOM:
        return U("CUSTOM");
    case ConversionTagType::eConversionTagType::ConversionTagType_VIEW_CATEGORY:
        return U("VIEW_CATEGORY");
    case ConversionTagType::eConversionTagType::ConversionTagType_SEARCH:
        return U("SEARCH");
    case ConversionTagType::eConversionTagType::ConversionTagType_ADD_TO_CART:
        return U("ADD_TO_CART");
    case ConversionTagType::eConversionTagType::ConversionTagType_WATCH_VIDEO:
        return U("WATCH_VIDEO");
    case ConversionTagType::eConversionTagType::ConversionTagType_LEAD:
        return U("LEAD");
    case ConversionTagType::eConversionTagType::ConversionTagType_APP_INSTALL:
        return U("APP_INSTALL");
    case ConversionTagType::eConversionTagType::ConversionTagType_WEB_SESSION:
        return U("WEB_SESSION");
    case ConversionTagType::eConversionTagType::ConversionTagType_EXTERNAL_MEASUREMENT:
        return U("EXTERNAL_MEASUREMENT");
    default:
        break;
    }
    return {};
}
}

ConversionTagType::ConversionTagType()
{
}

ConversionTagType::~ConversionTagType()
{
}

void ConversionTagType::validate()
{
    // TODO: implement validation
}

web::json::value ConversionTagType::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool ConversionTagType::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void ConversionTagType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool ConversionTagType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

ConversionTagType::eConversionTagType ConversionTagType::getValue() const
{
   return m_value;
}

void ConversionTagType::setValue(ConversionTagType::eConversionTagType const value)
{
   m_value = value;
}


}
}
}
}


