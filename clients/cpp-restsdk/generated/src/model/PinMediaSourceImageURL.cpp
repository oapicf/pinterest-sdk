/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PinMediaSourceImageURL.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



PinMediaSourceImageURL::PinMediaSourceImageURL()
{
    m_Source_type = utility::conversions::to_string_t("");
    m_Source_typeIsSet = false;
    m_Url = utility::conversions::to_string_t("");
    m_UrlIsSet = false;
    m_Is_standard = false;
    m_Is_standardIsSet = false;
}

PinMediaSourceImageURL::~PinMediaSourceImageURL()
{
}

void PinMediaSourceImageURL::validate()
{
    // TODO: implement validation
}

web::json::value PinMediaSourceImageURL::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Source_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("source_type"))] = ModelBase::toJson(m_Source_type);
    }
    if(m_UrlIsSet)
    {
        val[utility::conversions::to_string_t(U("url"))] = ModelBase::toJson(m_Url);
    }
    if(m_Is_standardIsSet)
    {
        val[utility::conversions::to_string_t(U("is_standard"))] = ModelBase::toJson(m_Is_standard);
    }

    return val;
}

bool PinMediaSourceImageURL::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("source_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("source_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSourceType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSourceType);
            setSourceType(refVal_setSourceType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUrl);
            setUrl(refVal_setUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_standard"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_standard")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsStandard;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsStandard);
            setIsStandard(refVal_setIsStandard);
        }
    }
    return ok;
}

void PinMediaSourceImageURL::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Source_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("source_type")), m_Source_type));
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("url")), m_Url));
    }
    if(m_Is_standardIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_standard")), m_Is_standard));
    }
}

bool PinMediaSourceImageURL::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("source_type"))))
    {
        utility::string_t refVal_setSourceType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("source_type"))), refVal_setSourceType );
        setSourceType(refVal_setSourceType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("url"))))
    {
        utility::string_t refVal_setUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("url"))), refVal_setUrl );
        setUrl(refVal_setUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_standard"))))
    {
        bool refVal_setIsStandard;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_standard"))), refVal_setIsStandard );
        setIsStandard(refVal_setIsStandard);
    }
    return ok;
}

utility::string_t PinMediaSourceImageURL::getSourceType() const
{
    return m_Source_type;
}

void PinMediaSourceImageURL::setSourceType(const utility::string_t& value)
{
    m_Source_type = value;
    m_Source_typeIsSet = true;
}

bool PinMediaSourceImageURL::sourceTypeIsSet() const
{
    return m_Source_typeIsSet;
}

void PinMediaSourceImageURL::unsetSource_type()
{
    m_Source_typeIsSet = false;
}
utility::string_t PinMediaSourceImageURL::getUrl() const
{
    return m_Url;
}

void PinMediaSourceImageURL::setUrl(const utility::string_t& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}

bool PinMediaSourceImageURL::urlIsSet() const
{
    return m_UrlIsSet;
}

void PinMediaSourceImageURL::unsetUrl()
{
    m_UrlIsSet = false;
}
bool PinMediaSourceImageURL::isIsStandard() const
{
    return m_Is_standard;
}

void PinMediaSourceImageURL::setIsStandard(bool value)
{
    m_Is_standard = value;
    m_Is_standardIsSet = true;
}

bool PinMediaSourceImageURL::isStandardIsSet() const
{
    return m_Is_standardIsSet;
}

void PinMediaSourceImageURL::unsetIs_standard()
{
    m_Is_standardIsSet = false;
}
}
}
}
}


