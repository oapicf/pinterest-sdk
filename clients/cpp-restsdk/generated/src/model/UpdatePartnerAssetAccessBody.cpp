/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/UpdatePartnerAssetAccessBody.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



UpdatePartnerAssetAccessBody::UpdatePartnerAssetAccessBody()
{
    m_AccessesIsSet = false;
}

UpdatePartnerAssetAccessBody::~UpdatePartnerAssetAccessBody()
{
}

void UpdatePartnerAssetAccessBody::validate()
{
    // TODO: implement validation
}

web::json::value UpdatePartnerAssetAccessBody::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AccessesIsSet)
    {
        val[utility::conversions::to_string_t(U("accesses"))] = ModelBase::toJson(m_Accesses);
    }

    return val;
}

bool UpdatePartnerAssetAccessBody::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("accesses"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accesses")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<UpdatePartnerAssetAccessBody_accesses_inner>> refVal_setAccesses;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccesses);
            setAccesses(refVal_setAccesses);
        }
    }
    return ok;
}

void UpdatePartnerAssetAccessBody::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AccessesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accesses")), m_Accesses));
    }
}

bool UpdatePartnerAssetAccessBody::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("accesses"))))
    {
        std::vector<std::shared_ptr<UpdatePartnerAssetAccessBody_accesses_inner>> refVal_setAccesses;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accesses"))), refVal_setAccesses );
        setAccesses(refVal_setAccesses);
    }
    return ok;
}

std::vector<std::shared_ptr<UpdatePartnerAssetAccessBody_accesses_inner>>& UpdatePartnerAssetAccessBody::getAccesses()
{
    return m_Accesses;
}

void UpdatePartnerAssetAccessBody::setAccesses(const std::vector<std::shared_ptr<UpdatePartnerAssetAccessBody_accesses_inner>>& value)
{
    m_Accesses = value;
    m_AccessesIsSet = true;
}

bool UpdatePartnerAssetAccessBody::accessesIsSet() const
{
    return m_AccessesIsSet;
}

void UpdatePartnerAssetAccessBody::unsetAccesses()
{
    m_AccessesIsSet = false;
}
}
}
}
}


