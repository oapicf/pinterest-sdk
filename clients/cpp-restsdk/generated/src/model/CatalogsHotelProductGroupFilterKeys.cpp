/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CatalogsHotelProductGroupFilterKeys.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CatalogsHotelProductGroupFilterKeys::CatalogsHotelProductGroupFilterKeys()
{
    m_PRICEIsSet = false;
    m_HOTEL_IDIsSet = false;
    m_BRANDIsSet = false;
    m_CUSTOM_LABEL_0IsSet = false;
    m_CUSTOM_LABEL_1IsSet = false;
    m_CUSTOM_LABEL_2IsSet = false;
    m_CUSTOM_LABEL_3IsSet = false;
    m_CUSTOM_LABEL_4IsSet = false;
    m_COUNTRYIsSet = false;
}

CatalogsHotelProductGroupFilterKeys::~CatalogsHotelProductGroupFilterKeys()
{
}

void CatalogsHotelProductGroupFilterKeys::validate()
{
    // TODO: implement validation
}

web::json::value CatalogsHotelProductGroupFilterKeys::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PRICEIsSet)
    {
        val[utility::conversions::to_string_t(U("PRICE"))] = ModelBase::toJson(m_PRICE);
    }
    if(m_HOTEL_IDIsSet)
    {
        val[utility::conversions::to_string_t(U("HOTEL_ID"))] = ModelBase::toJson(m_HOTEL_ID);
    }
    if(m_BRANDIsSet)
    {
        val[utility::conversions::to_string_t(U("BRAND"))] = ModelBase::toJson(m_BRAND);
    }
    if(m_CUSTOM_LABEL_0IsSet)
    {
        val[utility::conversions::to_string_t(U("CUSTOM_LABEL_0"))] = ModelBase::toJson(m_CUSTOM_LABEL_0);
    }
    if(m_CUSTOM_LABEL_1IsSet)
    {
        val[utility::conversions::to_string_t(U("CUSTOM_LABEL_1"))] = ModelBase::toJson(m_CUSTOM_LABEL_1);
    }
    if(m_CUSTOM_LABEL_2IsSet)
    {
        val[utility::conversions::to_string_t(U("CUSTOM_LABEL_2"))] = ModelBase::toJson(m_CUSTOM_LABEL_2);
    }
    if(m_CUSTOM_LABEL_3IsSet)
    {
        val[utility::conversions::to_string_t(U("CUSTOM_LABEL_3"))] = ModelBase::toJson(m_CUSTOM_LABEL_3);
    }
    if(m_CUSTOM_LABEL_4IsSet)
    {
        val[utility::conversions::to_string_t(U("CUSTOM_LABEL_4"))] = ModelBase::toJson(m_CUSTOM_LABEL_4);
    }
    if(m_COUNTRYIsSet)
    {
        val[utility::conversions::to_string_t(U("COUNTRY"))] = ModelBase::toJson(m_COUNTRY);
    }

    return val;
}

bool CatalogsHotelProductGroupFilterKeys::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("PRICE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("PRICE")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Catalogs_product_group_pricing_currency_criteria> refVal_setPRICE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPRICE);
            setPRICE(refVal_setPRICE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("HOTEL_ID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("HOTEL_ID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setHOTELID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHOTELID);
            setHOTELID(refVal_setHOTELID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("BRAND"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("BRAND")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setBRAND;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBRAND);
            setBRAND(refVal_setBRAND);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CUSTOM_LABEL_0"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CUSTOM_LABEL_0")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCUSTOMLABEL0;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCUSTOMLABEL0);
            setCUSTOMLABEL0(refVal_setCUSTOMLABEL0);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CUSTOM_LABEL_1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CUSTOM_LABEL_1")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCUSTOMLABEL1;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCUSTOMLABEL1);
            setCUSTOMLABEL1(refVal_setCUSTOMLABEL1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CUSTOM_LABEL_2"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CUSTOM_LABEL_2")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCUSTOMLABEL2;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCUSTOMLABEL2);
            setCUSTOMLABEL2(refVal_setCUSTOMLABEL2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CUSTOM_LABEL_3"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CUSTOM_LABEL_3")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCUSTOMLABEL3;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCUSTOMLABEL3);
            setCUSTOMLABEL3(refVal_setCUSTOMLABEL3);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("CUSTOM_LABEL_4"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CUSTOM_LABEL_4")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCUSTOMLABEL4;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCUSTOMLABEL4);
            setCUSTOMLABEL4(refVal_setCUSTOMLABEL4);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("COUNTRY"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("COUNTRY")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleCountriesCriteria> refVal_setCOUNTRY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCOUNTRY);
            setCOUNTRY(refVal_setCOUNTRY);
        }
    }
    return ok;
}

void CatalogsHotelProductGroupFilterKeys::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PRICEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("PRICE")), m_PRICE));
    }
    if(m_HOTEL_IDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("HOTEL_ID")), m_HOTEL_ID));
    }
    if(m_BRANDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("BRAND")), m_BRAND));
    }
    if(m_CUSTOM_LABEL_0IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CUSTOM_LABEL_0")), m_CUSTOM_LABEL_0));
    }
    if(m_CUSTOM_LABEL_1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CUSTOM_LABEL_1")), m_CUSTOM_LABEL_1));
    }
    if(m_CUSTOM_LABEL_2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CUSTOM_LABEL_2")), m_CUSTOM_LABEL_2));
    }
    if(m_CUSTOM_LABEL_3IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CUSTOM_LABEL_3")), m_CUSTOM_LABEL_3));
    }
    if(m_CUSTOM_LABEL_4IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CUSTOM_LABEL_4")), m_CUSTOM_LABEL_4));
    }
    if(m_COUNTRYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("COUNTRY")), m_COUNTRY));
    }
}

bool CatalogsHotelProductGroupFilterKeys::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("PRICE"))))
    {
        std::shared_ptr<Catalogs_product_group_pricing_currency_criteria> refVal_setPRICE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("PRICE"))), refVal_setPRICE );
        setPRICE(refVal_setPRICE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("HOTEL_ID"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setHOTELID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("HOTEL_ID"))), refVal_setHOTELID );
        setHOTELID(refVal_setHOTELID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("BRAND"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setBRAND;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("BRAND"))), refVal_setBRAND );
        setBRAND(refVal_setBRAND);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_0"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCUSTOMLABEL0;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_0"))), refVal_setCUSTOMLABEL0 );
        setCUSTOMLABEL0(refVal_setCUSTOMLABEL0);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_1"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCUSTOMLABEL1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_1"))), refVal_setCUSTOMLABEL1 );
        setCUSTOMLABEL1(refVal_setCUSTOMLABEL1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_2"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCUSTOMLABEL2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_2"))), refVal_setCUSTOMLABEL2 );
        setCUSTOMLABEL2(refVal_setCUSTOMLABEL2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_3"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCUSTOMLABEL3;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_3"))), refVal_setCUSTOMLABEL3 );
        setCUSTOMLABEL3(refVal_setCUSTOMLABEL3);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_4"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> refVal_setCUSTOMLABEL4;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CUSTOM_LABEL_4"))), refVal_setCUSTOMLABEL4 );
        setCUSTOMLABEL4(refVal_setCUSTOMLABEL4);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("COUNTRY"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleCountriesCriteria> refVal_setCOUNTRY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("COUNTRY"))), refVal_setCOUNTRY );
        setCOUNTRY(refVal_setCOUNTRY);
    }
    return ok;
}

std::shared_ptr<Catalogs_product_group_pricing_currency_criteria> CatalogsHotelProductGroupFilterKeys::getPRICE() const
{
    return m_PRICE;
}

void CatalogsHotelProductGroupFilterKeys::setPRICE(const std::shared_ptr<Catalogs_product_group_pricing_currency_criteria>& value)
{
    m_PRICE = value;
    m_PRICEIsSet = true;
}

bool CatalogsHotelProductGroupFilterKeys::pRICEIsSet() const
{
    return m_PRICEIsSet;
}

void CatalogsHotelProductGroupFilterKeys::unsetPRICE()
{
    m_PRICEIsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> CatalogsHotelProductGroupFilterKeys::getHOTELID() const
{
    return m_HOTEL_ID;
}

void CatalogsHotelProductGroupFilterKeys::setHOTELID(const std::shared_ptr<CatalogsProductGroupMultipleStringCriteria>& value)
{
    m_HOTEL_ID = value;
    m_HOTEL_IDIsSet = true;
}

bool CatalogsHotelProductGroupFilterKeys::hOTELIDIsSet() const
{
    return m_HOTEL_IDIsSet;
}

void CatalogsHotelProductGroupFilterKeys::unsetHOTEL_ID()
{
    m_HOTEL_IDIsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> CatalogsHotelProductGroupFilterKeys::getBRAND() const
{
    return m_BRAND;
}

void CatalogsHotelProductGroupFilterKeys::setBRAND(const std::shared_ptr<CatalogsProductGroupMultipleStringCriteria>& value)
{
    m_BRAND = value;
    m_BRANDIsSet = true;
}

bool CatalogsHotelProductGroupFilterKeys::bRANDIsSet() const
{
    return m_BRANDIsSet;
}

void CatalogsHotelProductGroupFilterKeys::unsetBRAND()
{
    m_BRANDIsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> CatalogsHotelProductGroupFilterKeys::getCUSTOMLABEL0() const
{
    return m_CUSTOM_LABEL_0;
}

void CatalogsHotelProductGroupFilterKeys::setCUSTOMLABEL0(const std::shared_ptr<CatalogsProductGroupMultipleStringCriteria>& value)
{
    m_CUSTOM_LABEL_0 = value;
    m_CUSTOM_LABEL_0IsSet = true;
}

bool CatalogsHotelProductGroupFilterKeys::cUSTOMLABEL0IsSet() const
{
    return m_CUSTOM_LABEL_0IsSet;
}

void CatalogsHotelProductGroupFilterKeys::unsetCUSTOM_LABEL_0()
{
    m_CUSTOM_LABEL_0IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> CatalogsHotelProductGroupFilterKeys::getCUSTOMLABEL1() const
{
    return m_CUSTOM_LABEL_1;
}

void CatalogsHotelProductGroupFilterKeys::setCUSTOMLABEL1(const std::shared_ptr<CatalogsProductGroupMultipleStringCriteria>& value)
{
    m_CUSTOM_LABEL_1 = value;
    m_CUSTOM_LABEL_1IsSet = true;
}

bool CatalogsHotelProductGroupFilterKeys::cUSTOMLABEL1IsSet() const
{
    return m_CUSTOM_LABEL_1IsSet;
}

void CatalogsHotelProductGroupFilterKeys::unsetCUSTOM_LABEL_1()
{
    m_CUSTOM_LABEL_1IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> CatalogsHotelProductGroupFilterKeys::getCUSTOMLABEL2() const
{
    return m_CUSTOM_LABEL_2;
}

void CatalogsHotelProductGroupFilterKeys::setCUSTOMLABEL2(const std::shared_ptr<CatalogsProductGroupMultipleStringCriteria>& value)
{
    m_CUSTOM_LABEL_2 = value;
    m_CUSTOM_LABEL_2IsSet = true;
}

bool CatalogsHotelProductGroupFilterKeys::cUSTOMLABEL2IsSet() const
{
    return m_CUSTOM_LABEL_2IsSet;
}

void CatalogsHotelProductGroupFilterKeys::unsetCUSTOM_LABEL_2()
{
    m_CUSTOM_LABEL_2IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> CatalogsHotelProductGroupFilterKeys::getCUSTOMLABEL3() const
{
    return m_CUSTOM_LABEL_3;
}

void CatalogsHotelProductGroupFilterKeys::setCUSTOMLABEL3(const std::shared_ptr<CatalogsProductGroupMultipleStringCriteria>& value)
{
    m_CUSTOM_LABEL_3 = value;
    m_CUSTOM_LABEL_3IsSet = true;
}

bool CatalogsHotelProductGroupFilterKeys::cUSTOMLABEL3IsSet() const
{
    return m_CUSTOM_LABEL_3IsSet;
}

void CatalogsHotelProductGroupFilterKeys::unsetCUSTOM_LABEL_3()
{
    m_CUSTOM_LABEL_3IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleStringCriteria> CatalogsHotelProductGroupFilterKeys::getCUSTOMLABEL4() const
{
    return m_CUSTOM_LABEL_4;
}

void CatalogsHotelProductGroupFilterKeys::setCUSTOMLABEL4(const std::shared_ptr<CatalogsProductGroupMultipleStringCriteria>& value)
{
    m_CUSTOM_LABEL_4 = value;
    m_CUSTOM_LABEL_4IsSet = true;
}

bool CatalogsHotelProductGroupFilterKeys::cUSTOMLABEL4IsSet() const
{
    return m_CUSTOM_LABEL_4IsSet;
}

void CatalogsHotelProductGroupFilterKeys::unsetCUSTOM_LABEL_4()
{
    m_CUSTOM_LABEL_4IsSet = false;
}
std::shared_ptr<CatalogsProductGroupMultipleCountriesCriteria> CatalogsHotelProductGroupFilterKeys::getCOUNTRY() const
{
    return m_COUNTRY;
}

void CatalogsHotelProductGroupFilterKeys::setCOUNTRY(const std::shared_ptr<CatalogsProductGroupMultipleCountriesCriteria>& value)
{
    m_COUNTRY = value;
    m_COUNTRYIsSet = true;
}

bool CatalogsHotelProductGroupFilterKeys::cOUNTRYIsSet() const
{
    return m_COUNTRYIsSet;
}

void CatalogsHotelProductGroupFilterKeys::unsetCOUNTRY()
{
    m_COUNTRYIsSet = false;
}
}
}
}
}


