/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CatalogsFeedIngestionInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CatalogsFeedIngestionInfo::CatalogsFeedIngestionInfo()
{
    m_IN_STOCK = 0;
    m_IN_STOCKIsSet = false;
    m_OUT_OF_STOCK = 0;
    m_OUT_OF_STOCKIsSet = false;
    m_PREORDER = 0;
    m_PREORDERIsSet = false;
}

CatalogsFeedIngestionInfo::~CatalogsFeedIngestionInfo()
{
}

void CatalogsFeedIngestionInfo::validate()
{
    // TODO: implement validation
}

web::json::value CatalogsFeedIngestionInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IN_STOCKIsSet)
    {
        val[utility::conversions::to_string_t(U("IN_STOCK"))] = ModelBase::toJson(m_IN_STOCK);
    }
    if(m_OUT_OF_STOCKIsSet)
    {
        val[utility::conversions::to_string_t(U("OUT_OF_STOCK"))] = ModelBase::toJson(m_OUT_OF_STOCK);
    }
    if(m_PREORDERIsSet)
    {
        val[utility::conversions::to_string_t(U("PREORDER"))] = ModelBase::toJson(m_PREORDER);
    }

    return val;
}

bool CatalogsFeedIngestionInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("IN_STOCK"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("IN_STOCK")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setINSTOCK;
            ok &= ModelBase::fromJson(fieldValue, refVal_setINSTOCK);
            setINSTOCK(refVal_setINSTOCK);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("OUT_OF_STOCK"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("OUT_OF_STOCK")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setOUTOFSTOCK;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOUTOFSTOCK);
            setOUTOFSTOCK(refVal_setOUTOFSTOCK);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("PREORDER"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("PREORDER")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPREORDER;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPREORDER);
            setPREORDER(refVal_setPREORDER);
        }
    }
    return ok;
}

void CatalogsFeedIngestionInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IN_STOCKIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("IN_STOCK")), m_IN_STOCK));
    }
    if(m_OUT_OF_STOCKIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("OUT_OF_STOCK")), m_OUT_OF_STOCK));
    }
    if(m_PREORDERIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("PREORDER")), m_PREORDER));
    }
}

bool CatalogsFeedIngestionInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("IN_STOCK"))))
    {
        int32_t refVal_setINSTOCK;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("IN_STOCK"))), refVal_setINSTOCK );
        setINSTOCK(refVal_setINSTOCK);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("OUT_OF_STOCK"))))
    {
        int32_t refVal_setOUTOFSTOCK;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("OUT_OF_STOCK"))), refVal_setOUTOFSTOCK );
        setOUTOFSTOCK(refVal_setOUTOFSTOCK);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("PREORDER"))))
    {
        int32_t refVal_setPREORDER;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("PREORDER"))), refVal_setPREORDER );
        setPREORDER(refVal_setPREORDER);
    }
    return ok;
}

int32_t CatalogsFeedIngestionInfo::getINSTOCK() const
{
    return m_IN_STOCK;
}

void CatalogsFeedIngestionInfo::setINSTOCK(int32_t value)
{
    m_IN_STOCK = value;
    m_IN_STOCKIsSet = true;
}

bool CatalogsFeedIngestionInfo::iNSTOCKIsSet() const
{
    return m_IN_STOCKIsSet;
}

void CatalogsFeedIngestionInfo::unsetIN_STOCK()
{
    m_IN_STOCKIsSet = false;
}
int32_t CatalogsFeedIngestionInfo::getOUTOFSTOCK() const
{
    return m_OUT_OF_STOCK;
}

void CatalogsFeedIngestionInfo::setOUTOFSTOCK(int32_t value)
{
    m_OUT_OF_STOCK = value;
    m_OUT_OF_STOCKIsSet = true;
}

bool CatalogsFeedIngestionInfo::oUTOFSTOCKIsSet() const
{
    return m_OUT_OF_STOCKIsSet;
}

void CatalogsFeedIngestionInfo::unsetOUT_OF_STOCK()
{
    m_OUT_OF_STOCKIsSet = false;
}
int32_t CatalogsFeedIngestionInfo::getPREORDER() const
{
    return m_PREORDER;
}

void CatalogsFeedIngestionInfo::setPREORDER(int32_t value)
{
    m_PREORDER = value;
    m_PREORDERIsSet = true;
}

bool CatalogsFeedIngestionInfo::pREORDERIsSet() const
{
    return m_PREORDERIsSet;
}

void CatalogsFeedIngestionInfo::unsetPREORDER()
{
    m_PREORDERIsSet = false;
}
}
}
}
}


