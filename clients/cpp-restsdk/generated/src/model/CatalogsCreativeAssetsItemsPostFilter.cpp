/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CatalogsCreativeAssetsItemsPostFilter.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CatalogsCreativeAssetsItemsPostFilter::CatalogsCreativeAssetsItemsPostFilter()
{
    m_Catalog_type = utility::conversions::to_string_t("");
    m_Catalog_typeIsSet = false;
    m_Creative_assets_idsIsSet = false;
    m_Catalog_id = utility::conversions::to_string_t("");
    m_Catalog_idIsSet = false;
}

CatalogsCreativeAssetsItemsPostFilter::~CatalogsCreativeAssetsItemsPostFilter()
{
}

void CatalogsCreativeAssetsItemsPostFilter::validate()
{
    // TODO: implement validation
}

web::json::value CatalogsCreativeAssetsItemsPostFilter::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Catalog_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("catalog_type"))] = ModelBase::toJson(m_Catalog_type);
    }
    if(m_Creative_assets_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("creative_assets_ids"))] = ModelBase::toJson(m_Creative_assets_ids);
    }
    if(m_Catalog_idIsSet)
    {
        val[utility::conversions::to_string_t(U("catalog_id"))] = ModelBase::toJson(m_Catalog_id);
    }

    return val;
}

bool CatalogsCreativeAssetsItemsPostFilter::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("catalog_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("catalog_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCatalogType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCatalogType);
            setCatalogType(refVal_setCatalogType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("creative_assets_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("creative_assets_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setCreativeAssetsIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreativeAssetsIds);
            setCreativeAssetsIds(refVal_setCreativeAssetsIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("catalog_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("catalog_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCatalogId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCatalogId);
            setCatalogId(refVal_setCatalogId);
        }
    }
    return ok;
}

void CatalogsCreativeAssetsItemsPostFilter::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Catalog_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("catalog_type")), m_Catalog_type));
    }
    if(m_Creative_assets_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("creative_assets_ids")), m_Creative_assets_ids));
    }
    if(m_Catalog_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("catalog_id")), m_Catalog_id));
    }
}

bool CatalogsCreativeAssetsItemsPostFilter::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("catalog_type"))))
    {
        utility::string_t refVal_setCatalogType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("catalog_type"))), refVal_setCatalogType );
        setCatalogType(refVal_setCatalogType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("creative_assets_ids"))))
    {
        std::vector<utility::string_t> refVal_setCreativeAssetsIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("creative_assets_ids"))), refVal_setCreativeAssetsIds );
        setCreativeAssetsIds(refVal_setCreativeAssetsIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("catalog_id"))))
    {
        utility::string_t refVal_setCatalogId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("catalog_id"))), refVal_setCatalogId );
        setCatalogId(refVal_setCatalogId);
    }
    return ok;
}

utility::string_t CatalogsCreativeAssetsItemsPostFilter::getCatalogType() const
{
    return m_Catalog_type;
}

void CatalogsCreativeAssetsItemsPostFilter::setCatalogType(const utility::string_t& value)
{
    m_Catalog_type = value;
    m_Catalog_typeIsSet = true;
}

bool CatalogsCreativeAssetsItemsPostFilter::catalogTypeIsSet() const
{
    return m_Catalog_typeIsSet;
}

void CatalogsCreativeAssetsItemsPostFilter::unsetCatalog_type()
{
    m_Catalog_typeIsSet = false;
}
std::vector<utility::string_t>& CatalogsCreativeAssetsItemsPostFilter::getCreativeAssetsIds()
{
    return m_Creative_assets_ids;
}

void CatalogsCreativeAssetsItemsPostFilter::setCreativeAssetsIds(const std::vector<utility::string_t>& value)
{
    m_Creative_assets_ids = value;
    m_Creative_assets_idsIsSet = true;
}

bool CatalogsCreativeAssetsItemsPostFilter::creativeAssetsIdsIsSet() const
{
    return m_Creative_assets_idsIsSet;
}

void CatalogsCreativeAssetsItemsPostFilter::unsetCreative_assets_ids()
{
    m_Creative_assets_idsIsSet = false;
}
utility::string_t CatalogsCreativeAssetsItemsPostFilter::getCatalogId() const
{
    return m_Catalog_id;
}

void CatalogsCreativeAssetsItemsPostFilter::setCatalogId(const utility::string_t& value)
{
    m_Catalog_id = value;
    m_Catalog_idIsSet = true;
}

bool CatalogsCreativeAssetsItemsPostFilter::catalogIdIsSet() const
{
    return m_Catalog_idIsSet;
}

void CatalogsCreativeAssetsItemsPostFilter::unsetCatalog_id()
{
    m_Catalog_idIsSet = false;
}
}
}
}
}


