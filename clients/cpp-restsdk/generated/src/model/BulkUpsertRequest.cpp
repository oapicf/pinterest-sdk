/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/BulkUpsertRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



BulkUpsertRequest::BulkUpsertRequest()
{
    m_CreateIsSet = false;
    m_UpdateIsSet = false;
}

BulkUpsertRequest::~BulkUpsertRequest()
{
}

void BulkUpsertRequest::validate()
{
    // TODO: implement validation
}

web::json::value BulkUpsertRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CreateIsSet)
    {
        val[utility::conversions::to_string_t(U("create"))] = ModelBase::toJson(m_Create);
    }
    if(m_UpdateIsSet)
    {
        val[utility::conversions::to_string_t(U("update"))] = ModelBase::toJson(m_Update);
    }

    return val;
}

bool BulkUpsertRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("create"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("create")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BulkUpsertRequestCreate> refVal_setCreate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreate);
            setCreate(refVal_setCreate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("update"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("update")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BulkUpsertRequestUpdate> refVal_setUpdate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdate);
            setUpdate(refVal_setUpdate);
        }
    }
    return ok;
}

void BulkUpsertRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CreateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("create")), m_Create));
    }
    if(m_UpdateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("update")), m_Update));
    }
}

bool BulkUpsertRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("create"))))
    {
        std::shared_ptr<BulkUpsertRequestCreate> refVal_setCreate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("create"))), refVal_setCreate );
        setCreate(refVal_setCreate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("update"))))
    {
        std::shared_ptr<BulkUpsertRequestUpdate> refVal_setUpdate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("update"))), refVal_setUpdate );
        setUpdate(refVal_setUpdate);
    }
    return ok;
}

std::shared_ptr<BulkUpsertRequestCreate> BulkUpsertRequest::getCreate() const
{
    return m_Create;
}

void BulkUpsertRequest::setCreate(const std::shared_ptr<BulkUpsertRequestCreate>& value)
{
    m_Create = value;
    m_CreateIsSet = true;
}

bool BulkUpsertRequest::createIsSet() const
{
    return m_CreateIsSet;
}

void BulkUpsertRequest::unsetCreate()
{
    m_CreateIsSet = false;
}
std::shared_ptr<BulkUpsertRequestUpdate> BulkUpsertRequest::getUpdate() const
{
    return m_Update;
}

void BulkUpsertRequest::setUpdate(const std::shared_ptr<BulkUpsertRequestUpdate>& value)
{
    m_Update = value;
    m_UpdateIsSet = true;
}

bool BulkUpsertRequest::updateIsSet() const
{
    return m_UpdateIsSet;
}

void BulkUpsertRequest::unsetUpdate()
{
    m_UpdateIsSet = false;
}
}
}
}
}


