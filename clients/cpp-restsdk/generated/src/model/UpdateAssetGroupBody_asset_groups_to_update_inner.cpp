/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/UpdateAssetGroupBody_asset_groups_to_update_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



UpdateAssetGroupBody_asset_groups_to_update_inner::UpdateAssetGroupBody_asset_groups_to_update_inner()
{
    m_Asset_group_id = utility::conversions::to_string_t("");
    m_Asset_group_idIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Asset_group_typesIsSet = false;
    m_Assets_to_addIsSet = false;
    m_Assets_to_removeIsSet = false;
}

UpdateAssetGroupBody_asset_groups_to_update_inner::~UpdateAssetGroupBody_asset_groups_to_update_inner()
{
}

void UpdateAssetGroupBody_asset_groups_to_update_inner::validate()
{
    // TODO: implement validation
}

web::json::value UpdateAssetGroupBody_asset_groups_to_update_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Asset_group_idIsSet)
    {
        val[utility::conversions::to_string_t(U("asset_group_id"))] = ModelBase::toJson(m_Asset_group_id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_Asset_group_typesIsSet)
    {
        val[utility::conversions::to_string_t(U("asset_group_types"))] = ModelBase::toJson(m_Asset_group_types);
    }
    if(m_Assets_to_addIsSet)
    {
        val[utility::conversions::to_string_t(U("assets_to_add"))] = ModelBase::toJson(m_Assets_to_add);
    }
    if(m_Assets_to_removeIsSet)
    {
        val[utility::conversions::to_string_t(U("assets_to_remove"))] = ModelBase::toJson(m_Assets_to_remove);
    }

    return val;
}

bool UpdateAssetGroupBody_asset_groups_to_update_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("asset_group_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("asset_group_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssetGroupId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetGroupId);
            setAssetGroupId(refVal_setAssetGroupId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("asset_group_types"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("asset_group_types")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<AssetGroupType>> refVal_setAssetGroupTypes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetGroupTypes);
            setAssetGroupTypes(refVal_setAssetGroupTypes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("assets_to_add"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("assets_to_add")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setAssetsToAdd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetsToAdd);
            setAssetsToAdd(refVal_setAssetsToAdd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("assets_to_remove"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("assets_to_remove")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setAssetsToRemove;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetsToRemove);
            setAssetsToRemove(refVal_setAssetsToRemove);
        }
    }
    return ok;
}

void UpdateAssetGroupBody_asset_groups_to_update_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Asset_group_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("asset_group_id")), m_Asset_group_id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_Asset_group_typesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("asset_group_types")), m_Asset_group_types));
    }
    if(m_Assets_to_addIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("assets_to_add")), m_Assets_to_add));
    }
    if(m_Assets_to_removeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("assets_to_remove")), m_Assets_to_remove));
    }
}

bool UpdateAssetGroupBody_asset_groups_to_update_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("asset_group_id"))))
    {
        utility::string_t refVal_setAssetGroupId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("asset_group_id"))), refVal_setAssetGroupId );
        setAssetGroupId(refVal_setAssetGroupId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("asset_group_types"))))
    {
        std::vector<std::shared_ptr<AssetGroupType>> refVal_setAssetGroupTypes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("asset_group_types"))), refVal_setAssetGroupTypes );
        setAssetGroupTypes(refVal_setAssetGroupTypes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("assets_to_add"))))
    {
        std::vector<utility::string_t> refVal_setAssetsToAdd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("assets_to_add"))), refVal_setAssetsToAdd );
        setAssetsToAdd(refVal_setAssetsToAdd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("assets_to_remove"))))
    {
        std::vector<utility::string_t> refVal_setAssetsToRemove;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("assets_to_remove"))), refVal_setAssetsToRemove );
        setAssetsToRemove(refVal_setAssetsToRemove);
    }
    return ok;
}

utility::string_t UpdateAssetGroupBody_asset_groups_to_update_inner::getAssetGroupId() const
{
    return m_Asset_group_id;
}

void UpdateAssetGroupBody_asset_groups_to_update_inner::setAssetGroupId(const utility::string_t& value)
{
    m_Asset_group_id = value;
    m_Asset_group_idIsSet = true;
}

bool UpdateAssetGroupBody_asset_groups_to_update_inner::assetGroupIdIsSet() const
{
    return m_Asset_group_idIsSet;
}

void UpdateAssetGroupBody_asset_groups_to_update_inner::unsetAsset_group_id()
{
    m_Asset_group_idIsSet = false;
}
utility::string_t UpdateAssetGroupBody_asset_groups_to_update_inner::getName() const
{
    return m_Name;
}

void UpdateAssetGroupBody_asset_groups_to_update_inner::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool UpdateAssetGroupBody_asset_groups_to_update_inner::nameIsSet() const
{
    return m_NameIsSet;
}

void UpdateAssetGroupBody_asset_groups_to_update_inner::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t UpdateAssetGroupBody_asset_groups_to_update_inner::getDescription() const
{
    return m_Description;
}

void UpdateAssetGroupBody_asset_groups_to_update_inner::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool UpdateAssetGroupBody_asset_groups_to_update_inner::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void UpdateAssetGroupBody_asset_groups_to_update_inner::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::vector<std::shared_ptr<AssetGroupType>>& UpdateAssetGroupBody_asset_groups_to_update_inner::getAssetGroupTypes()
{
    return m_Asset_group_types;
}

void UpdateAssetGroupBody_asset_groups_to_update_inner::setAssetGroupTypes(const std::vector<std::shared_ptr<AssetGroupType>>& value)
{
    m_Asset_group_types = value;
    m_Asset_group_typesIsSet = true;
}

bool UpdateAssetGroupBody_asset_groups_to_update_inner::assetGroupTypesIsSet() const
{
    return m_Asset_group_typesIsSet;
}

void UpdateAssetGroupBody_asset_groups_to_update_inner::unsetAsset_group_types()
{
    m_Asset_group_typesIsSet = false;
}
std::vector<utility::string_t>& UpdateAssetGroupBody_asset_groups_to_update_inner::getAssetsToAdd()
{
    return m_Assets_to_add;
}

void UpdateAssetGroupBody_asset_groups_to_update_inner::setAssetsToAdd(const std::vector<utility::string_t>& value)
{
    m_Assets_to_add = value;
    m_Assets_to_addIsSet = true;
}

bool UpdateAssetGroupBody_asset_groups_to_update_inner::assetsToAddIsSet() const
{
    return m_Assets_to_addIsSet;
}

void UpdateAssetGroupBody_asset_groups_to_update_inner::unsetAssets_to_add()
{
    m_Assets_to_addIsSet = false;
}
std::vector<utility::string_t>& UpdateAssetGroupBody_asset_groups_to_update_inner::getAssetsToRemove()
{
    return m_Assets_to_remove;
}

void UpdateAssetGroupBody_asset_groups_to_update_inner::setAssetsToRemove(const std::vector<utility::string_t>& value)
{
    m_Assets_to_remove = value;
    m_Assets_to_removeIsSet = true;
}

bool UpdateAssetGroupBody_asset_groups_to_update_inner::assetsToRemoveIsSet() const
{
    return m_Assets_to_removeIsSet;
}

void UpdateAssetGroupBody_asset_groups_to_update_inner::unsetAssets_to_remove()
{
    m_Assets_to_removeIsSet = false;
}
}
}
}
}


