/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Pin.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Pin::Pin()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Created_at = utility::datetime();
    m_Created_atIsSet = false;
    m_Link = utility::conversions::to_string_t("");
    m_LinkIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Dominant_color = utility::conversions::to_string_t("");
    m_Dominant_colorIsSet = false;
    m_Alt_text = utility::conversions::to_string_t("");
    m_Alt_textIsSet = false;
    m_Creative_typeIsSet = false;
    m_Board_id = utility::conversions::to_string_t("");
    m_Board_idIsSet = false;
    m_Board_section_id = utility::conversions::to_string_t("");
    m_Board_section_idIsSet = false;
    m_Board_ownerIsSet = false;
    m_Is_owner = false;
    m_Is_ownerIsSet = false;
    m_MediaIsSet = false;
    m_Media_sourceIsSet = false;
    m_Parent_pin_id = utility::conversions::to_string_t("");
    m_Parent_pin_idIsSet = false;
    m_Is_standard = false;
    m_Is_standardIsSet = false;
    m_Has_been_promoted = false;
    m_Has_been_promotedIsSet = false;
    m_Note = utility::conversions::to_string_t("");
    m_NoteIsSet = false;
    m_Pin_metricsIsSet = false;
}

Pin::~Pin()
{
}

void Pin::validate()
{
    // TODO: implement validation
}

web::json::value Pin::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Created_atIsSet)
    {
        val[utility::conversions::to_string_t(U("created_at"))] = ModelBase::toJson(m_Created_at);
    }
    if(m_LinkIsSet)
    {
        val[utility::conversions::to_string_t(U("link"))] = ModelBase::toJson(m_Link);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t(U("title"))] = ModelBase::toJson(m_Title);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_Dominant_colorIsSet)
    {
        val[utility::conversions::to_string_t(U("dominant_color"))] = ModelBase::toJson(m_Dominant_color);
    }
    if(m_Alt_textIsSet)
    {
        val[utility::conversions::to_string_t(U("alt_text"))] = ModelBase::toJson(m_Alt_text);
    }
    if(m_Creative_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("creative_type"))] = ModelBase::toJson(m_Creative_type);
    }
    if(m_Board_idIsSet)
    {
        val[utility::conversions::to_string_t(U("board_id"))] = ModelBase::toJson(m_Board_id);
    }
    if(m_Board_section_idIsSet)
    {
        val[utility::conversions::to_string_t(U("board_section_id"))] = ModelBase::toJson(m_Board_section_id);
    }
    if(m_Board_ownerIsSet)
    {
        val[utility::conversions::to_string_t(U("board_owner"))] = ModelBase::toJson(m_Board_owner);
    }
    if(m_Is_ownerIsSet)
    {
        val[utility::conversions::to_string_t(U("is_owner"))] = ModelBase::toJson(m_Is_owner);
    }
    if(m_MediaIsSet)
    {
        val[utility::conversions::to_string_t(U("media"))] = ModelBase::toJson(m_Media);
    }
    if(m_Media_sourceIsSet)
    {
        val[utility::conversions::to_string_t(U("media_source"))] = ModelBase::toJson(m_Media_source);
    }
    if(m_Parent_pin_idIsSet)
    {
        val[utility::conversions::to_string_t(U("parent_pin_id"))] = ModelBase::toJson(m_Parent_pin_id);
    }
    if(m_Is_standardIsSet)
    {
        val[utility::conversions::to_string_t(U("is_standard"))] = ModelBase::toJson(m_Is_standard);
    }
    if(m_Has_been_promotedIsSet)
    {
        val[utility::conversions::to_string_t(U("has_been_promoted"))] = ModelBase::toJson(m_Has_been_promoted);
    }
    if(m_NoteIsSet)
    {
        val[utility::conversions::to_string_t(U("note"))] = ModelBase::toJson(m_Note);
    }
    if(m_Pin_metricsIsSet)
    {
        val[utility::conversions::to_string_t(U("pin_metrics"))] = ModelBase::toJson(m_Pin_metrics);
    }

    return val;
}

bool Pin::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_at")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("link"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("link")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLink;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLink);
            setLink(refVal_setLink);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("title"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("title")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTitle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTitle);
            setTitle(refVal_setTitle);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dominant_color"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dominant_color")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDominantColor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDominantColor);
            setDominantColor(refVal_setDominantColor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("alt_text"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("alt_text")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAltText;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAltText);
            setAltText(refVal_setAltText);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("creative_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("creative_type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CreativeType> refVal_setCreativeType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreativeType);
            setCreativeType(refVal_setCreativeType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("board_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("board_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBoardId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBoardId);
            setBoardId(refVal_setBoardId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("board_section_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("board_section_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBoardSectionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBoardSectionId);
            setBoardSectionId(refVal_setBoardSectionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("board_owner"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("board_owner")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BoardOwner> refVal_setBoardOwner;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBoardOwner);
            setBoardOwner(refVal_setBoardOwner);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_owner"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_owner")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsOwner;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsOwner);
            setIsOwner(refVal_setIsOwner);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("media"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("media")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PinMedia> refVal_setMedia;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMedia);
            setMedia(refVal_setMedia);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("media_source"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("media_source")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PinMediaSource> refVal_setMediaSource;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMediaSource);
            setMediaSource(refVal_setMediaSource);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("parent_pin_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("parent_pin_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setParentPinId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParentPinId);
            setParentPinId(refVal_setParentPinId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_standard"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_standard")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsStandard;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsStandard);
            setIsStandard(refVal_setIsStandard);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("has_been_promoted"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("has_been_promoted")));
        if(!fieldValue.is_null())
        {
            bool refVal_setHasBeenPromoted;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHasBeenPromoted);
            setHasBeenPromoted(refVal_setHasBeenPromoted);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("note"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("note")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNote;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNote);
            setNote(refVal_setNote);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pin_metrics"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pin_metrics")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setPinMetrics;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPinMetrics);
            setPinMetrics(refVal_setPinMetrics);
        }
    }
    return ok;
}

void Pin::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_at")), m_Created_at));
    }
    if(m_LinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("link")), m_Link));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("title")), m_Title));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_Dominant_colorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dominant_color")), m_Dominant_color));
    }
    if(m_Alt_textIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("alt_text")), m_Alt_text));
    }
    if(m_Creative_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("creative_type")), m_Creative_type));
    }
    if(m_Board_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("board_id")), m_Board_id));
    }
    if(m_Board_section_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("board_section_id")), m_Board_section_id));
    }
    if(m_Board_ownerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("board_owner")), m_Board_owner));
    }
    if(m_Is_ownerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_owner")), m_Is_owner));
    }
    if(m_MediaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("media")), m_Media));
    }
    if(m_Media_sourceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("media_source")), m_Media_source));
    }
    if(m_Parent_pin_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("parent_pin_id")), m_Parent_pin_id));
    }
    if(m_Is_standardIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_standard")), m_Is_standard));
    }
    if(m_Has_been_promotedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("has_been_promoted")), m_Has_been_promoted));
    }
    if(m_NoteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("note")), m_Note));
    }
    if(m_Pin_metricsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pin_metrics")), m_Pin_metrics));
    }
}

bool Pin::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_at"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_at"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("link"))))
    {
        utility::string_t refVal_setLink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("link"))), refVal_setLink );
        setLink(refVal_setLink);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("title"))))
    {
        utility::string_t refVal_setTitle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("title"))), refVal_setTitle );
        setTitle(refVal_setTitle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dominant_color"))))
    {
        utility::string_t refVal_setDominantColor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dominant_color"))), refVal_setDominantColor );
        setDominantColor(refVal_setDominantColor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("alt_text"))))
    {
        utility::string_t refVal_setAltText;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("alt_text"))), refVal_setAltText );
        setAltText(refVal_setAltText);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("creative_type"))))
    {
        std::shared_ptr<CreativeType> refVal_setCreativeType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("creative_type"))), refVal_setCreativeType );
        setCreativeType(refVal_setCreativeType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("board_id"))))
    {
        utility::string_t refVal_setBoardId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("board_id"))), refVal_setBoardId );
        setBoardId(refVal_setBoardId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("board_section_id"))))
    {
        utility::string_t refVal_setBoardSectionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("board_section_id"))), refVal_setBoardSectionId );
        setBoardSectionId(refVal_setBoardSectionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("board_owner"))))
    {
        std::shared_ptr<BoardOwner> refVal_setBoardOwner;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("board_owner"))), refVal_setBoardOwner );
        setBoardOwner(refVal_setBoardOwner);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_owner"))))
    {
        bool refVal_setIsOwner;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_owner"))), refVal_setIsOwner );
        setIsOwner(refVal_setIsOwner);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("media"))))
    {
        std::shared_ptr<PinMedia> refVal_setMedia;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("media"))), refVal_setMedia );
        setMedia(refVal_setMedia);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("media_source"))))
    {
        std::shared_ptr<PinMediaSource> refVal_setMediaSource;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("media_source"))), refVal_setMediaSource );
        setMediaSource(refVal_setMediaSource);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("parent_pin_id"))))
    {
        utility::string_t refVal_setParentPinId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("parent_pin_id"))), refVal_setParentPinId );
        setParentPinId(refVal_setParentPinId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_standard"))))
    {
        bool refVal_setIsStandard;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_standard"))), refVal_setIsStandard );
        setIsStandard(refVal_setIsStandard);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("has_been_promoted"))))
    {
        bool refVal_setHasBeenPromoted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("has_been_promoted"))), refVal_setHasBeenPromoted );
        setHasBeenPromoted(refVal_setHasBeenPromoted);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("note"))))
    {
        utility::string_t refVal_setNote;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("note"))), refVal_setNote );
        setNote(refVal_setNote);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pin_metrics"))))
    {
        std::shared_ptr<Object> refVal_setPinMetrics;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pin_metrics"))), refVal_setPinMetrics );
        setPinMetrics(refVal_setPinMetrics);
    }
    return ok;
}

utility::string_t Pin::getId() const
{
    return m_Id;
}

void Pin::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Pin::idIsSet() const
{
    return m_IdIsSet;
}

void Pin::unsetId()
{
    m_IdIsSet = false;
}
utility::datetime Pin::getCreatedAt() const
{
    return m_Created_at;
}

void Pin::setCreatedAt(const utility::datetime& value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}

bool Pin::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void Pin::unsetCreated_at()
{
    m_Created_atIsSet = false;
}
utility::string_t Pin::getLink() const
{
    return m_Link;
}

void Pin::setLink(const utility::string_t& value)
{
    m_Link = value;
    m_LinkIsSet = true;
}

bool Pin::linkIsSet() const
{
    return m_LinkIsSet;
}

void Pin::unsetLink()
{
    m_LinkIsSet = false;
}
utility::string_t Pin::getTitle() const
{
    return m_Title;
}

void Pin::setTitle(const utility::string_t& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}

bool Pin::titleIsSet() const
{
    return m_TitleIsSet;
}

void Pin::unsetTitle()
{
    m_TitleIsSet = false;
}
utility::string_t Pin::getDescription() const
{
    return m_Description;
}

void Pin::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool Pin::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void Pin::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t Pin::getDominantColor() const
{
    return m_Dominant_color;
}

void Pin::setDominantColor(const utility::string_t& value)
{
    m_Dominant_color = value;
    m_Dominant_colorIsSet = true;
}

bool Pin::dominantColorIsSet() const
{
    return m_Dominant_colorIsSet;
}

void Pin::unsetDominant_color()
{
    m_Dominant_colorIsSet = false;
}
utility::string_t Pin::getAltText() const
{
    return m_Alt_text;
}

void Pin::setAltText(const utility::string_t& value)
{
    m_Alt_text = value;
    m_Alt_textIsSet = true;
}

bool Pin::altTextIsSet() const
{
    return m_Alt_textIsSet;
}

void Pin::unsetAlt_text()
{
    m_Alt_textIsSet = false;
}
std::shared_ptr<CreativeType> Pin::getCreativeType() const
{
    return m_Creative_type;
}

void Pin::setCreativeType(const std::shared_ptr<CreativeType>& value)
{
    m_Creative_type = value;
    m_Creative_typeIsSet = true;
}

bool Pin::creativeTypeIsSet() const
{
    return m_Creative_typeIsSet;
}

void Pin::unsetCreative_type()
{
    m_Creative_typeIsSet = false;
}
utility::string_t Pin::getBoardId() const
{
    return m_Board_id;
}

void Pin::setBoardId(const utility::string_t& value)
{
    m_Board_id = value;
    m_Board_idIsSet = true;
}

bool Pin::boardIdIsSet() const
{
    return m_Board_idIsSet;
}

void Pin::unsetBoard_id()
{
    m_Board_idIsSet = false;
}
utility::string_t Pin::getBoardSectionId() const
{
    return m_Board_section_id;
}

void Pin::setBoardSectionId(const utility::string_t& value)
{
    m_Board_section_id = value;
    m_Board_section_idIsSet = true;
}

bool Pin::boardSectionIdIsSet() const
{
    return m_Board_section_idIsSet;
}

void Pin::unsetBoard_section_id()
{
    m_Board_section_idIsSet = false;
}
std::shared_ptr<BoardOwner> Pin::getBoardOwner() const
{
    return m_Board_owner;
}

void Pin::setBoardOwner(const std::shared_ptr<BoardOwner>& value)
{
    m_Board_owner = value;
    m_Board_ownerIsSet = true;
}

bool Pin::boardOwnerIsSet() const
{
    return m_Board_ownerIsSet;
}

void Pin::unsetBoard_owner()
{
    m_Board_ownerIsSet = false;
}
bool Pin::isIsOwner() const
{
    return m_Is_owner;
}

void Pin::setIsOwner(bool value)
{
    m_Is_owner = value;
    m_Is_ownerIsSet = true;
}

bool Pin::isOwnerIsSet() const
{
    return m_Is_ownerIsSet;
}

void Pin::unsetIs_owner()
{
    m_Is_ownerIsSet = false;
}
std::shared_ptr<PinMedia> Pin::getMedia() const
{
    return m_Media;
}

void Pin::setMedia(const std::shared_ptr<PinMedia>& value)
{
    m_Media = value;
    m_MediaIsSet = true;
}

bool Pin::mediaIsSet() const
{
    return m_MediaIsSet;
}

void Pin::unsetMedia()
{
    m_MediaIsSet = false;
}
std::shared_ptr<PinMediaSource> Pin::getMediaSource() const
{
    return m_Media_source;
}

void Pin::setMediaSource(const std::shared_ptr<PinMediaSource>& value)
{
    m_Media_source = value;
    m_Media_sourceIsSet = true;
}

bool Pin::mediaSourceIsSet() const
{
    return m_Media_sourceIsSet;
}

void Pin::unsetMedia_source()
{
    m_Media_sourceIsSet = false;
}
utility::string_t Pin::getParentPinId() const
{
    return m_Parent_pin_id;
}

void Pin::setParentPinId(const utility::string_t& value)
{
    m_Parent_pin_id = value;
    m_Parent_pin_idIsSet = true;
}

bool Pin::parentPinIdIsSet() const
{
    return m_Parent_pin_idIsSet;
}

void Pin::unsetParent_pin_id()
{
    m_Parent_pin_idIsSet = false;
}
bool Pin::isIsStandard() const
{
    return m_Is_standard;
}

void Pin::setIsStandard(bool value)
{
    m_Is_standard = value;
    m_Is_standardIsSet = true;
}

bool Pin::isStandardIsSet() const
{
    return m_Is_standardIsSet;
}

void Pin::unsetIs_standard()
{
    m_Is_standardIsSet = false;
}
bool Pin::isHasBeenPromoted() const
{
    return m_Has_been_promoted;
}

void Pin::setHasBeenPromoted(bool value)
{
    m_Has_been_promoted = value;
    m_Has_been_promotedIsSet = true;
}

bool Pin::hasBeenPromotedIsSet() const
{
    return m_Has_been_promotedIsSet;
}

void Pin::unsetHas_been_promoted()
{
    m_Has_been_promotedIsSet = false;
}
utility::string_t Pin::getNote() const
{
    return m_Note;
}

void Pin::setNote(const utility::string_t& value)
{
    m_Note = value;
    m_NoteIsSet = true;
}

bool Pin::noteIsSet() const
{
    return m_NoteIsSet;
}

void Pin::unsetNote()
{
    m_NoteIsSet = false;
}
std::shared_ptr<Object> Pin::getPinMetrics() const
{
    return m_Pin_metrics;
}

void Pin::setPinMetrics(const std::shared_ptr<Object>& value)
{
    m_Pin_metrics = value;
    m_Pin_metricsIsSet = true;
}

bool Pin::pinMetricsIsSet() const
{
    return m_Pin_metricsIsSet;
}

void Pin::unsetPin_metrics()
{
    m_Pin_metricsIsSet = false;
}
}
}
}
}


