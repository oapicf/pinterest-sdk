/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AdvancedAuctionItemsSubmitUpsertRecord.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AdvancedAuctionItemsSubmitUpsertRecord::AdvancedAuctionItemsSubmitUpsertRecord()
{
    m_Item_id = utility::conversions::to_string_t("");
    m_Item_idIsSet = false;
    m_CountryIsSet = false;
    m_LanguageIsSet = false;
    m_Bid_optionsIsSet = false;
    m_Update_maskIsSet = false;
}

AdvancedAuctionItemsSubmitUpsertRecord::~AdvancedAuctionItemsSubmitUpsertRecord()
{
}

void AdvancedAuctionItemsSubmitUpsertRecord::validate()
{
    // TODO: implement validation
}

web::json::value AdvancedAuctionItemsSubmitUpsertRecord::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Item_idIsSet)
    {
        val[utility::conversions::to_string_t(U("item_id"))] = ModelBase::toJson(m_Item_id);
    }
    if(m_CountryIsSet)
    {
        val[utility::conversions::to_string_t(U("country"))] = ModelBase::toJson(m_Country);
    }
    if(m_LanguageIsSet)
    {
        val[utility::conversions::to_string_t(U("language"))] = ModelBase::toJson(m_Language);
    }
    if(m_Bid_optionsIsSet)
    {
        val[utility::conversions::to_string_t(U("bid_options"))] = ModelBase::toJson(m_Bid_options);
    }
    if(m_Update_maskIsSet)
    {
        val[utility::conversions::to_string_t(U("update_mask"))] = ModelBase::toJson(m_Update_mask);
    }

    return val;
}

bool AdvancedAuctionItemsSubmitUpsertRecord::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("item_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("item_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setItemId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setItemId);
            setItemId(refVal_setItemId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("country"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("country")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Country> refVal_setCountry;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCountry);
            setCountry(refVal_setCountry);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("language"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("language")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Language> refVal_setLanguage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLanguage);
            setLanguage(refVal_setLanguage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bid_options"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bid_options")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AdvancedAuctionBidOptions> refVal_setBidOptions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBidOptions);
            setBidOptions(refVal_setBidOptions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("update_mask"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("update_mask")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<UpdateMaskBidOptionField>> refVal_setUpdateMask;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdateMask);
            setUpdateMask(refVal_setUpdateMask);
        }
    }
    return ok;
}

void AdvancedAuctionItemsSubmitUpsertRecord::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Item_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("item_id")), m_Item_id));
    }
    if(m_CountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("country")), m_Country));
    }
    if(m_LanguageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("language")), m_Language));
    }
    if(m_Bid_optionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bid_options")), m_Bid_options));
    }
    if(m_Update_maskIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("update_mask")), m_Update_mask));
    }
}

bool AdvancedAuctionItemsSubmitUpsertRecord::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("item_id"))))
    {
        utility::string_t refVal_setItemId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("item_id"))), refVal_setItemId );
        setItemId(refVal_setItemId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("country"))))
    {
        std::shared_ptr<Country> refVal_setCountry;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("country"))), refVal_setCountry );
        setCountry(refVal_setCountry);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("language"))))
    {
        std::shared_ptr<Language> refVal_setLanguage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("language"))), refVal_setLanguage );
        setLanguage(refVal_setLanguage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bid_options"))))
    {
        std::shared_ptr<AdvancedAuctionBidOptions> refVal_setBidOptions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bid_options"))), refVal_setBidOptions );
        setBidOptions(refVal_setBidOptions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("update_mask"))))
    {
        std::vector<std::shared_ptr<UpdateMaskBidOptionField>> refVal_setUpdateMask;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("update_mask"))), refVal_setUpdateMask );
        setUpdateMask(refVal_setUpdateMask);
    }
    return ok;
}

utility::string_t AdvancedAuctionItemsSubmitUpsertRecord::getItemId() const
{
    return m_Item_id;
}

void AdvancedAuctionItemsSubmitUpsertRecord::setItemId(const utility::string_t& value)
{
    m_Item_id = value;
    m_Item_idIsSet = true;
}

bool AdvancedAuctionItemsSubmitUpsertRecord::itemIdIsSet() const
{
    return m_Item_idIsSet;
}

void AdvancedAuctionItemsSubmitUpsertRecord::unsetItem_id()
{
    m_Item_idIsSet = false;
}
std::shared_ptr<Country> AdvancedAuctionItemsSubmitUpsertRecord::getCountry() const
{
    return m_Country;
}

void AdvancedAuctionItemsSubmitUpsertRecord::setCountry(const std::shared_ptr<Country>& value)
{
    m_Country = value;
    m_CountryIsSet = true;
}

bool AdvancedAuctionItemsSubmitUpsertRecord::countryIsSet() const
{
    return m_CountryIsSet;
}

void AdvancedAuctionItemsSubmitUpsertRecord::unsetCountry()
{
    m_CountryIsSet = false;
}
std::shared_ptr<Language> AdvancedAuctionItemsSubmitUpsertRecord::getLanguage() const
{
    return m_Language;
}

void AdvancedAuctionItemsSubmitUpsertRecord::setLanguage(const std::shared_ptr<Language>& value)
{
    m_Language = value;
    m_LanguageIsSet = true;
}

bool AdvancedAuctionItemsSubmitUpsertRecord::languageIsSet() const
{
    return m_LanguageIsSet;
}

void AdvancedAuctionItemsSubmitUpsertRecord::unsetLanguage()
{
    m_LanguageIsSet = false;
}
std::shared_ptr<AdvancedAuctionBidOptions> AdvancedAuctionItemsSubmitUpsertRecord::getBidOptions() const
{
    return m_Bid_options;
}

void AdvancedAuctionItemsSubmitUpsertRecord::setBidOptions(const std::shared_ptr<AdvancedAuctionBidOptions>& value)
{
    m_Bid_options = value;
    m_Bid_optionsIsSet = true;
}

bool AdvancedAuctionItemsSubmitUpsertRecord::bidOptionsIsSet() const
{
    return m_Bid_optionsIsSet;
}

void AdvancedAuctionItemsSubmitUpsertRecord::unsetBid_options()
{
    m_Bid_optionsIsSet = false;
}
std::vector<std::shared_ptr<UpdateMaskBidOptionField>>& AdvancedAuctionItemsSubmitUpsertRecord::getUpdateMask()
{
    return m_Update_mask;
}

void AdvancedAuctionItemsSubmitUpsertRecord::setUpdateMask(const std::vector<std::shared_ptr<UpdateMaskBidOptionField>>& value)
{
    m_Update_mask = value;
    m_Update_maskIsSet = true;
}

bool AdvancedAuctionItemsSubmitUpsertRecord::updateMaskIsSet() const
{
    return m_Update_maskIsSet;
}

void AdvancedAuctionItemsSubmitUpsertRecord::unsetUpdate_mask()
{
    m_Update_maskIsSet = false;
}
}
}
}
}


