/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/TemplateResponse_date_range.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



TemplateResponse_date_range::TemplateResponse_date_range()
{
    m_Dynamic_date_rangeIsSet = false;
    m_Relative_date_rangeIsSet = false;
    m_Absolute_date_rangeIsSet = false;
}

TemplateResponse_date_range::~TemplateResponse_date_range()
{
}

void TemplateResponse_date_range::validate()
{
    // TODO: implement validation
}

web::json::value TemplateResponse_date_range::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Dynamic_date_rangeIsSet)
    {
        val[utility::conversions::to_string_t(U("dynamic_date_range"))] = ModelBase::toJson(m_Dynamic_date_range);
    }
    if(m_Relative_date_rangeIsSet)
    {
        val[utility::conversions::to_string_t(U("relative_date_range"))] = ModelBase::toJson(m_Relative_date_range);
    }
    if(m_Absolute_date_rangeIsSet)
    {
        val[utility::conversions::to_string_t(U("absolute_date_range"))] = ModelBase::toJson(m_Absolute_date_range);
    }

    return val;
}

bool TemplateResponse_date_range::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("dynamic_date_range"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dynamic_date_range")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TemplateResponse_date_range_dynamic_date_range> refVal_setDynamicDateRange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDynamicDateRange);
            setDynamicDateRange(refVal_setDynamicDateRange);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("relative_date_range"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("relative_date_range")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TemplateResponse_date_range_relative_date_range> refVal_setRelativeDateRange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRelativeDateRange);
            setRelativeDateRange(refVal_setRelativeDateRange);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("absolute_date_range"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("absolute_date_range")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TemplateResponse_date_range_absolute_date_range> refVal_setAbsoluteDateRange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAbsoluteDateRange);
            setAbsoluteDateRange(refVal_setAbsoluteDateRange);
        }
    }
    return ok;
}

void TemplateResponse_date_range::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Dynamic_date_rangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dynamic_date_range")), m_Dynamic_date_range));
    }
    if(m_Relative_date_rangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("relative_date_range")), m_Relative_date_range));
    }
    if(m_Absolute_date_rangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("absolute_date_range")), m_Absolute_date_range));
    }
}

bool TemplateResponse_date_range::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("dynamic_date_range"))))
    {
        std::shared_ptr<TemplateResponse_date_range_dynamic_date_range> refVal_setDynamicDateRange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dynamic_date_range"))), refVal_setDynamicDateRange );
        setDynamicDateRange(refVal_setDynamicDateRange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("relative_date_range"))))
    {
        std::shared_ptr<TemplateResponse_date_range_relative_date_range> refVal_setRelativeDateRange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("relative_date_range"))), refVal_setRelativeDateRange );
        setRelativeDateRange(refVal_setRelativeDateRange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("absolute_date_range"))))
    {
        std::shared_ptr<TemplateResponse_date_range_absolute_date_range> refVal_setAbsoluteDateRange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("absolute_date_range"))), refVal_setAbsoluteDateRange );
        setAbsoluteDateRange(refVal_setAbsoluteDateRange);
    }
    return ok;
}

std::shared_ptr<TemplateResponse_date_range_dynamic_date_range> TemplateResponse_date_range::getDynamicDateRange() const
{
    return m_Dynamic_date_range;
}

void TemplateResponse_date_range::setDynamicDateRange(const std::shared_ptr<TemplateResponse_date_range_dynamic_date_range>& value)
{
    m_Dynamic_date_range = value;
    m_Dynamic_date_rangeIsSet = true;
}

bool TemplateResponse_date_range::dynamicDateRangeIsSet() const
{
    return m_Dynamic_date_rangeIsSet;
}

void TemplateResponse_date_range::unsetDynamic_date_range()
{
    m_Dynamic_date_rangeIsSet = false;
}
std::shared_ptr<TemplateResponse_date_range_relative_date_range> TemplateResponse_date_range::getRelativeDateRange() const
{
    return m_Relative_date_range;
}

void TemplateResponse_date_range::setRelativeDateRange(const std::shared_ptr<TemplateResponse_date_range_relative_date_range>& value)
{
    m_Relative_date_range = value;
    m_Relative_date_rangeIsSet = true;
}

bool TemplateResponse_date_range::relativeDateRangeIsSet() const
{
    return m_Relative_date_rangeIsSet;
}

void TemplateResponse_date_range::unsetRelative_date_range()
{
    m_Relative_date_rangeIsSet = false;
}
std::shared_ptr<TemplateResponse_date_range_absolute_date_range> TemplateResponse_date_range::getAbsoluteDateRange() const
{
    return m_Absolute_date_range;
}

void TemplateResponse_date_range::setAbsoluteDateRange(const std::shared_ptr<TemplateResponse_date_range_absolute_date_range>& value)
{
    m_Absolute_date_range = value;
    m_Absolute_date_rangeIsSet = true;
}

bool TemplateResponse_date_range::absoluteDateRangeIsSet() const
{
    return m_Absolute_date_rangeIsSet;
}

void TemplateResponse_date_range::unsetAbsolute_date_range()
{
    m_Absolute_date_rangeIsSet = false;
}
}
}
}
}


