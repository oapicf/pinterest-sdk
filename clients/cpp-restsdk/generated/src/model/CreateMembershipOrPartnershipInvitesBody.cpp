/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateMembershipOrPartnershipInvitesBody.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CreateMembershipOrPartnershipInvitesBody::CreateMembershipOrPartnershipInvitesBody()
{
    m_Business_role = utility::conversions::to_string_t("");
    m_Business_roleIsSet = false;
    m_Invite_typeIsSet = false;
    m_MembersIsSet = false;
    m_PartnersIsSet = false;
}

CreateMembershipOrPartnershipInvitesBody::~CreateMembershipOrPartnershipInvitesBody()
{
}

void CreateMembershipOrPartnershipInvitesBody::validate()
{
    // TODO: implement validation
}

web::json::value CreateMembershipOrPartnershipInvitesBody::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Business_roleIsSet)
    {
        val[utility::conversions::to_string_t(U("business_role"))] = ModelBase::toJson(m_Business_role);
    }
    if(m_Invite_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("invite_type"))] = ModelBase::toJson(m_Invite_type);
    }
    if(m_MembersIsSet)
    {
        val[utility::conversions::to_string_t(U("members"))] = ModelBase::toJson(m_Members);
    }
    if(m_PartnersIsSet)
    {
        val[utility::conversions::to_string_t(U("partners"))] = ModelBase::toJson(m_Partners);
    }

    return val;
}

bool CreateMembershipOrPartnershipInvitesBody::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("business_role"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("business_role")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBusinessRole;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBusinessRole);
            setBusinessRole(refVal_setBusinessRole);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("invite_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("invite_type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<InviteType> refVal_setInviteType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInviteType);
            setInviteType(refVal_setInviteType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("members"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("members")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setMembers;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMembers);
            setMembers(refVal_setMembers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("partners"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("partners")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setPartners;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPartners);
            setPartners(refVal_setPartners);
        }
    }
    return ok;
}

void CreateMembershipOrPartnershipInvitesBody::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Business_roleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("business_role")), m_Business_role));
    }
    if(m_Invite_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("invite_type")), m_Invite_type));
    }
    if(m_MembersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("members")), m_Members));
    }
    if(m_PartnersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("partners")), m_Partners));
    }
}

bool CreateMembershipOrPartnershipInvitesBody::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("business_role"))))
    {
        utility::string_t refVal_setBusinessRole;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("business_role"))), refVal_setBusinessRole );
        setBusinessRole(refVal_setBusinessRole);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("invite_type"))))
    {
        std::shared_ptr<InviteType> refVal_setInviteType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("invite_type"))), refVal_setInviteType );
        setInviteType(refVal_setInviteType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("members"))))
    {
        std::vector<utility::string_t> refVal_setMembers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("members"))), refVal_setMembers );
        setMembers(refVal_setMembers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("partners"))))
    {
        std::vector<utility::string_t> refVal_setPartners;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("partners"))), refVal_setPartners );
        setPartners(refVal_setPartners);
    }
    return ok;
}

utility::string_t CreateMembershipOrPartnershipInvitesBody::getBusinessRole() const
{
    return m_Business_role;
}

void CreateMembershipOrPartnershipInvitesBody::setBusinessRole(const utility::string_t& value)
{
    m_Business_role = value;
    m_Business_roleIsSet = true;
}

bool CreateMembershipOrPartnershipInvitesBody::businessRoleIsSet() const
{
    return m_Business_roleIsSet;
}

void CreateMembershipOrPartnershipInvitesBody::unsetBusiness_role()
{
    m_Business_roleIsSet = false;
}
std::shared_ptr<InviteType> CreateMembershipOrPartnershipInvitesBody::getInviteType() const
{
    return m_Invite_type;
}

void CreateMembershipOrPartnershipInvitesBody::setInviteType(const std::shared_ptr<InviteType>& value)
{
    m_Invite_type = value;
    m_Invite_typeIsSet = true;
}

bool CreateMembershipOrPartnershipInvitesBody::inviteTypeIsSet() const
{
    return m_Invite_typeIsSet;
}

void CreateMembershipOrPartnershipInvitesBody::unsetInvite_type()
{
    m_Invite_typeIsSet = false;
}
std::vector<utility::string_t>& CreateMembershipOrPartnershipInvitesBody::getMembers()
{
    return m_Members;
}

void CreateMembershipOrPartnershipInvitesBody::setMembers(const std::vector<utility::string_t>& value)
{
    m_Members = value;
    m_MembersIsSet = true;
}

bool CreateMembershipOrPartnershipInvitesBody::membersIsSet() const
{
    return m_MembersIsSet;
}

void CreateMembershipOrPartnershipInvitesBody::unsetMembers()
{
    m_MembersIsSet = false;
}
std::vector<utility::string_t>& CreateMembershipOrPartnershipInvitesBody::getPartners()
{
    return m_Partners;
}

void CreateMembershipOrPartnershipInvitesBody::setPartners(const std::vector<utility::string_t>& value)
{
    m_Partners = value;
    m_PartnersIsSet = true;
}

bool CreateMembershipOrPartnershipInvitesBody::partnersIsSet() const
{
    return m_PartnersIsSet;
}

void CreateMembershipOrPartnershipInvitesBody::unsetPartners()
{
    m_PartnersIsSet = false;
}
}
}
}
}


