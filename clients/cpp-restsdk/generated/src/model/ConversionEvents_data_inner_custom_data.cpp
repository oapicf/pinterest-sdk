/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ConversionEvents_data_inner_custom_data.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ConversionEvents_data_inner_custom_data::ConversionEvents_data_inner_custom_data()
{
    m_Currency = utility::conversions::to_string_t("");
    m_CurrencyIsSet = false;
    m_Value = utility::conversions::to_string_t("");
    m_ValueIsSet = false;
    m_Content_idsIsSet = false;
    m_Content_name = utility::conversions::to_string_t("");
    m_Content_nameIsSet = false;
    m_Content_category = utility::conversions::to_string_t("");
    m_Content_categoryIsSet = false;
    m_Content_brand = utility::conversions::to_string_t("");
    m_Content_brandIsSet = false;
    m_ContentsIsSet = false;
    m_Num_items = 0L;
    m_Num_itemsIsSet = false;
    m_Order_id = utility::conversions::to_string_t("");
    m_Order_idIsSet = false;
    m_Search_string = utility::conversions::to_string_t("");
    m_Search_stringIsSet = false;
    m_Opt_out_type = utility::conversions::to_string_t("");
    m_Opt_out_typeIsSet = false;
    m_Np = utility::conversions::to_string_t("");
    m_NpIsSet = false;
}

ConversionEvents_data_inner_custom_data::~ConversionEvents_data_inner_custom_data()
{
}

void ConversionEvents_data_inner_custom_data::validate()
{
    // TODO: implement validation
}

web::json::value ConversionEvents_data_inner_custom_data::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CurrencyIsSet)
    {
        val[utility::conversions::to_string_t(U("currency"))] = ModelBase::toJson(m_Currency);
    }
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t(U("value"))] = ModelBase::toJson(m_Value);
    }
    if(m_Content_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("content_ids"))] = ModelBase::toJson(m_Content_ids);
    }
    if(m_Content_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("content_name"))] = ModelBase::toJson(m_Content_name);
    }
    if(m_Content_categoryIsSet)
    {
        val[utility::conversions::to_string_t(U("content_category"))] = ModelBase::toJson(m_Content_category);
    }
    if(m_Content_brandIsSet)
    {
        val[utility::conversions::to_string_t(U("content_brand"))] = ModelBase::toJson(m_Content_brand);
    }
    if(m_ContentsIsSet)
    {
        val[utility::conversions::to_string_t(U("contents"))] = ModelBase::toJson(m_Contents);
    }
    if(m_Num_itemsIsSet)
    {
        val[utility::conversions::to_string_t(U("num_items"))] = ModelBase::toJson(m_Num_items);
    }
    if(m_Order_idIsSet)
    {
        val[utility::conversions::to_string_t(U("order_id"))] = ModelBase::toJson(m_Order_id);
    }
    if(m_Search_stringIsSet)
    {
        val[utility::conversions::to_string_t(U("search_string"))] = ModelBase::toJson(m_Search_string);
    }
    if(m_Opt_out_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("opt_out_type"))] = ModelBase::toJson(m_Opt_out_type);
    }
    if(m_NpIsSet)
    {
        val[utility::conversions::to_string_t(U("np"))] = ModelBase::toJson(m_Np);
    }

    return val;
}

bool ConversionEvents_data_inner_custom_data::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("currency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("currency")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCurrency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCurrency);
            setCurrency(refVal_setCurrency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("value"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("value")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValue);
            setValue(refVal_setValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("content_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("content_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setContentIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContentIds);
            setContentIds(refVal_setContentIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("content_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("content_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setContentName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContentName);
            setContentName(refVal_setContentName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("content_category"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("content_category")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setContentCategory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContentCategory);
            setContentCategory(refVal_setContentCategory);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("content_brand"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("content_brand")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setContentBrand;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContentBrand);
            setContentBrand(refVal_setContentBrand);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("contents"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("contents")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ConversionEvents_data_inner_custom_data_contents_inner>> refVal_setContents;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContents);
            setContents(refVal_setContents);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("num_items"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("num_items")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setNumItems;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNumItems);
            setNumItems(refVal_setNumItems);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("order_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("order_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOrderId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrderId);
            setOrderId(refVal_setOrderId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("search_string"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("search_string")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSearchString;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSearchString);
            setSearchString(refVal_setSearchString);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("opt_out_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("opt_out_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOptOutType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOptOutType);
            setOptOutType(refVal_setOptOutType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("np"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("np")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNp);
            setNp(refVal_setNp);
        }
    }
    return ok;
}

void ConversionEvents_data_inner_custom_data::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("currency")), m_Currency));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("value")), m_Value));
    }
    if(m_Content_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("content_ids")), m_Content_ids));
    }
    if(m_Content_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("content_name")), m_Content_name));
    }
    if(m_Content_categoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("content_category")), m_Content_category));
    }
    if(m_Content_brandIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("content_brand")), m_Content_brand));
    }
    if(m_ContentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("contents")), m_Contents));
    }
    if(m_Num_itemsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("num_items")), m_Num_items));
    }
    if(m_Order_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("order_id")), m_Order_id));
    }
    if(m_Search_stringIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("search_string")), m_Search_string));
    }
    if(m_Opt_out_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("opt_out_type")), m_Opt_out_type));
    }
    if(m_NpIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("np")), m_Np));
    }
}

bool ConversionEvents_data_inner_custom_data::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("currency"))))
    {
        utility::string_t refVal_setCurrency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("currency"))), refVal_setCurrency );
        setCurrency(refVal_setCurrency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("value"))))
    {
        utility::string_t refVal_setValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("value"))), refVal_setValue );
        setValue(refVal_setValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("content_ids"))))
    {
        std::vector<utility::string_t> refVal_setContentIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("content_ids"))), refVal_setContentIds );
        setContentIds(refVal_setContentIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("content_name"))))
    {
        utility::string_t refVal_setContentName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("content_name"))), refVal_setContentName );
        setContentName(refVal_setContentName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("content_category"))))
    {
        utility::string_t refVal_setContentCategory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("content_category"))), refVal_setContentCategory );
        setContentCategory(refVal_setContentCategory);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("content_brand"))))
    {
        utility::string_t refVal_setContentBrand;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("content_brand"))), refVal_setContentBrand );
        setContentBrand(refVal_setContentBrand);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("contents"))))
    {
        std::vector<std::shared_ptr<ConversionEvents_data_inner_custom_data_contents_inner>> refVal_setContents;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("contents"))), refVal_setContents );
        setContents(refVal_setContents);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("num_items"))))
    {
        int64_t refVal_setNumItems;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("num_items"))), refVal_setNumItems );
        setNumItems(refVal_setNumItems);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("order_id"))))
    {
        utility::string_t refVal_setOrderId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("order_id"))), refVal_setOrderId );
        setOrderId(refVal_setOrderId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("search_string"))))
    {
        utility::string_t refVal_setSearchString;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("search_string"))), refVal_setSearchString );
        setSearchString(refVal_setSearchString);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("opt_out_type"))))
    {
        utility::string_t refVal_setOptOutType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("opt_out_type"))), refVal_setOptOutType );
        setOptOutType(refVal_setOptOutType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("np"))))
    {
        utility::string_t refVal_setNp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("np"))), refVal_setNp );
        setNp(refVal_setNp);
    }
    return ok;
}

utility::string_t ConversionEvents_data_inner_custom_data::getCurrency() const
{
    return m_Currency;
}

void ConversionEvents_data_inner_custom_data::setCurrency(const utility::string_t& value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}

bool ConversionEvents_data_inner_custom_data::currencyIsSet() const
{
    return m_CurrencyIsSet;
}

void ConversionEvents_data_inner_custom_data::unsetCurrency()
{
    m_CurrencyIsSet = false;
}
utility::string_t ConversionEvents_data_inner_custom_data::getValue() const
{
    return m_Value;
}

void ConversionEvents_data_inner_custom_data::setValue(const utility::string_t& value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool ConversionEvents_data_inner_custom_data::valueIsSet() const
{
    return m_ValueIsSet;
}

void ConversionEvents_data_inner_custom_data::unsetValue()
{
    m_ValueIsSet = false;
}
std::vector<utility::string_t>& ConversionEvents_data_inner_custom_data::getContentIds()
{
    return m_Content_ids;
}

void ConversionEvents_data_inner_custom_data::setContentIds(const std::vector<utility::string_t>& value)
{
    m_Content_ids = value;
    m_Content_idsIsSet = true;
}

bool ConversionEvents_data_inner_custom_data::contentIdsIsSet() const
{
    return m_Content_idsIsSet;
}

void ConversionEvents_data_inner_custom_data::unsetContent_ids()
{
    m_Content_idsIsSet = false;
}
utility::string_t ConversionEvents_data_inner_custom_data::getContentName() const
{
    return m_Content_name;
}

void ConversionEvents_data_inner_custom_data::setContentName(const utility::string_t& value)
{
    m_Content_name = value;
    m_Content_nameIsSet = true;
}

bool ConversionEvents_data_inner_custom_data::contentNameIsSet() const
{
    return m_Content_nameIsSet;
}

void ConversionEvents_data_inner_custom_data::unsetContent_name()
{
    m_Content_nameIsSet = false;
}
utility::string_t ConversionEvents_data_inner_custom_data::getContentCategory() const
{
    return m_Content_category;
}

void ConversionEvents_data_inner_custom_data::setContentCategory(const utility::string_t& value)
{
    m_Content_category = value;
    m_Content_categoryIsSet = true;
}

bool ConversionEvents_data_inner_custom_data::contentCategoryIsSet() const
{
    return m_Content_categoryIsSet;
}

void ConversionEvents_data_inner_custom_data::unsetContent_category()
{
    m_Content_categoryIsSet = false;
}
utility::string_t ConversionEvents_data_inner_custom_data::getContentBrand() const
{
    return m_Content_brand;
}

void ConversionEvents_data_inner_custom_data::setContentBrand(const utility::string_t& value)
{
    m_Content_brand = value;
    m_Content_brandIsSet = true;
}

bool ConversionEvents_data_inner_custom_data::contentBrandIsSet() const
{
    return m_Content_brandIsSet;
}

void ConversionEvents_data_inner_custom_data::unsetContent_brand()
{
    m_Content_brandIsSet = false;
}
std::vector<std::shared_ptr<ConversionEvents_data_inner_custom_data_contents_inner>>& ConversionEvents_data_inner_custom_data::getContents()
{
    return m_Contents;
}

void ConversionEvents_data_inner_custom_data::setContents(const std::vector<std::shared_ptr<ConversionEvents_data_inner_custom_data_contents_inner>>& value)
{
    m_Contents = value;
    m_ContentsIsSet = true;
}

bool ConversionEvents_data_inner_custom_data::contentsIsSet() const
{
    return m_ContentsIsSet;
}

void ConversionEvents_data_inner_custom_data::unsetContents()
{
    m_ContentsIsSet = false;
}
int64_t ConversionEvents_data_inner_custom_data::getNumItems() const
{
    return m_Num_items;
}

void ConversionEvents_data_inner_custom_data::setNumItems(int64_t value)
{
    m_Num_items = value;
    m_Num_itemsIsSet = true;
}

bool ConversionEvents_data_inner_custom_data::numItemsIsSet() const
{
    return m_Num_itemsIsSet;
}

void ConversionEvents_data_inner_custom_data::unsetNum_items()
{
    m_Num_itemsIsSet = false;
}
utility::string_t ConversionEvents_data_inner_custom_data::getOrderId() const
{
    return m_Order_id;
}

void ConversionEvents_data_inner_custom_data::setOrderId(const utility::string_t& value)
{
    m_Order_id = value;
    m_Order_idIsSet = true;
}

bool ConversionEvents_data_inner_custom_data::orderIdIsSet() const
{
    return m_Order_idIsSet;
}

void ConversionEvents_data_inner_custom_data::unsetOrder_id()
{
    m_Order_idIsSet = false;
}
utility::string_t ConversionEvents_data_inner_custom_data::getSearchString() const
{
    return m_Search_string;
}

void ConversionEvents_data_inner_custom_data::setSearchString(const utility::string_t& value)
{
    m_Search_string = value;
    m_Search_stringIsSet = true;
}

bool ConversionEvents_data_inner_custom_data::searchStringIsSet() const
{
    return m_Search_stringIsSet;
}

void ConversionEvents_data_inner_custom_data::unsetSearch_string()
{
    m_Search_stringIsSet = false;
}
utility::string_t ConversionEvents_data_inner_custom_data::getOptOutType() const
{
    return m_Opt_out_type;
}

void ConversionEvents_data_inner_custom_data::setOptOutType(const utility::string_t& value)
{
    m_Opt_out_type = value;
    m_Opt_out_typeIsSet = true;
}

bool ConversionEvents_data_inner_custom_data::optOutTypeIsSet() const
{
    return m_Opt_out_typeIsSet;
}

void ConversionEvents_data_inner_custom_data::unsetOpt_out_type()
{
    m_Opt_out_typeIsSet = false;
}
utility::string_t ConversionEvents_data_inner_custom_data::getNp() const
{
    return m_Np;
}

void ConversionEvents_data_inner_custom_data::setNp(const utility::string_t& value)
{
    m_Np = value;
    m_NpIsSet = true;
}

bool ConversionEvents_data_inner_custom_data::npIsSet() const
{
    return m_NpIsSet;
}

void ConversionEvents_data_inner_custom_data::unsetNp()
{
    m_NpIsSet = false;
}
}
}
}
}


