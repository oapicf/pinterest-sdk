/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/GenderFilter.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GenderFilter::GenderFilter()
{
    m_GENDERIsSet = false;
}

GenderFilter::~GenderFilter()
{
}

void GenderFilter::validate()
{
    // TODO: implement validation
}

web::json::value GenderFilter::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_GENDERIsSet)
    {
        val[utility::conversions::to_string_t(U("GENDER"))] = ModelBase::toJson(m_GENDER);
    }

    return val;
}

bool GenderFilter::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("GENDER"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("GENDER")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupMultipleGenderCriteria> refVal_setGENDER;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGENDER);
            setGENDER(refVal_setGENDER);
        }
    }
    return ok;
}

void GenderFilter::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_GENDERIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("GENDER")), m_GENDER));
    }
}

bool GenderFilter::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("GENDER"))))
    {
        std::shared_ptr<CatalogsProductGroupMultipleGenderCriteria> refVal_setGENDER;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("GENDER"))), refVal_setGENDER );
        setGENDER(refVal_setGENDER);
    }
    return ok;
}

std::shared_ptr<CatalogsProductGroupMultipleGenderCriteria> GenderFilter::getGENDER() const
{
    return m_GENDER;
}

void GenderFilter::setGENDER(const std::shared_ptr<CatalogsProductGroupMultipleGenderCriteria>& value)
{
    m_GENDER = value;
    m_GENDERIsSet = true;
}

bool GenderFilter::gENDERIsSet() const
{
    return m_GENDERIsSet;
}

void GenderFilter::unsetGENDER()
{
    m_GENDERIsSet = false;
}
}
}
}
}


