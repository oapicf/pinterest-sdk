/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AdsCreditDiscountsResponse.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AdsCreditDiscountsResponse::AdsCreditDiscountsResponse()
{
    m_Active = false;
    m_ActiveIsSet = false;
    m_Advertiser_id = utility::conversions::to_string_t("");
    m_Advertiser_idIsSet = false;
    m_DiscountType = utility::conversions::to_string_t("");
    m_DiscountTypeIsSet = false;
    m_DiscountInMicroCurrency = 0.0;
    m_DiscountInMicroCurrencyIsSet = false;
    m_DiscountCurrency = utility::conversions::to_string_t("");
    m_DiscountCurrencyIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_RemainingDiscountInMicroCurrency = 0.0;
    m_RemainingDiscountInMicroCurrencyIsSet = false;
}

AdsCreditDiscountsResponse::~AdsCreditDiscountsResponse()
{
}

void AdsCreditDiscountsResponse::validate()
{
    // TODO: implement validation
}

web::json::value AdsCreditDiscountsResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ActiveIsSet)
    {
        val[utility::conversions::to_string_t(U("active"))] = ModelBase::toJson(m_Active);
    }
    if(m_Advertiser_idIsSet)
    {
        val[utility::conversions::to_string_t(U("advertiser_id"))] = ModelBase::toJson(m_Advertiser_id);
    }
    if(m_DiscountTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("discountType"))] = ModelBase::toJson(m_DiscountType);
    }
    if(m_DiscountInMicroCurrencyIsSet)
    {
        val[utility::conversions::to_string_t(U("discountInMicroCurrency"))] = ModelBase::toJson(m_DiscountInMicroCurrency);
    }
    if(m_DiscountCurrencyIsSet)
    {
        val[utility::conversions::to_string_t(U("discountCurrency"))] = ModelBase::toJson(m_DiscountCurrency);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t(U("title"))] = ModelBase::toJson(m_Title);
    }
    if(m_RemainingDiscountInMicroCurrencyIsSet)
    {
        val[utility::conversions::to_string_t(U("remainingDiscountInMicroCurrency"))] = ModelBase::toJson(m_RemainingDiscountInMicroCurrency);
    }

    return val;
}

bool AdsCreditDiscountsResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("active"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("active")));
        if(!fieldValue.is_null())
        {
            bool refVal_setActive;
            ok &= ModelBase::fromJson(fieldValue, refVal_setActive);
            setActive(refVal_setActive);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("advertiser_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("advertiser_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAdvertiserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdvertiserId);
            setAdvertiserId(refVal_setAdvertiserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("discountType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("discountType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDiscountType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDiscountType);
            setDiscountType(refVal_setDiscountType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("discountInMicroCurrency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("discountInMicroCurrency")));
        if(!fieldValue.is_null())
        {
            double refVal_setDiscountInMicroCurrency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDiscountInMicroCurrency);
            setDiscountInMicroCurrency(refVal_setDiscountInMicroCurrency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("discountCurrency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("discountCurrency")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDiscountCurrency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDiscountCurrency);
            setDiscountCurrency(refVal_setDiscountCurrency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("title"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("title")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTitle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTitle);
            setTitle(refVal_setTitle);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("remainingDiscountInMicroCurrency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("remainingDiscountInMicroCurrency")));
        if(!fieldValue.is_null())
        {
            double refVal_setRemainingDiscountInMicroCurrency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRemainingDiscountInMicroCurrency);
            setRemainingDiscountInMicroCurrency(refVal_setRemainingDiscountInMicroCurrency);
        }
    }
    return ok;
}

void AdsCreditDiscountsResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ActiveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("active")), m_Active));
    }
    if(m_Advertiser_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("advertiser_id")), m_Advertiser_id));
    }
    if(m_DiscountTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("discountType")), m_DiscountType));
    }
    if(m_DiscountInMicroCurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("discountInMicroCurrency")), m_DiscountInMicroCurrency));
    }
    if(m_DiscountCurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("discountCurrency")), m_DiscountCurrency));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("title")), m_Title));
    }
    if(m_RemainingDiscountInMicroCurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("remainingDiscountInMicroCurrency")), m_RemainingDiscountInMicroCurrency));
    }
}

bool AdsCreditDiscountsResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("active"))))
    {
        bool refVal_setActive;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("active"))), refVal_setActive );
        setActive(refVal_setActive);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("advertiser_id"))))
    {
        utility::string_t refVal_setAdvertiserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("advertiser_id"))), refVal_setAdvertiserId );
        setAdvertiserId(refVal_setAdvertiserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("discountType"))))
    {
        utility::string_t refVal_setDiscountType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("discountType"))), refVal_setDiscountType );
        setDiscountType(refVal_setDiscountType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("discountInMicroCurrency"))))
    {
        double refVal_setDiscountInMicroCurrency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("discountInMicroCurrency"))), refVal_setDiscountInMicroCurrency );
        setDiscountInMicroCurrency(refVal_setDiscountInMicroCurrency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("discountCurrency"))))
    {
        utility::string_t refVal_setDiscountCurrency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("discountCurrency"))), refVal_setDiscountCurrency );
        setDiscountCurrency(refVal_setDiscountCurrency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("title"))))
    {
        utility::string_t refVal_setTitle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("title"))), refVal_setTitle );
        setTitle(refVal_setTitle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("remainingDiscountInMicroCurrency"))))
    {
        double refVal_setRemainingDiscountInMicroCurrency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("remainingDiscountInMicroCurrency"))), refVal_setRemainingDiscountInMicroCurrency );
        setRemainingDiscountInMicroCurrency(refVal_setRemainingDiscountInMicroCurrency);
    }
    return ok;
}

bool AdsCreditDiscountsResponse::isActive() const
{
    return m_Active;
}

void AdsCreditDiscountsResponse::setActive(bool value)
{
    m_Active = value;
    m_ActiveIsSet = true;
}

bool AdsCreditDiscountsResponse::activeIsSet() const
{
    return m_ActiveIsSet;
}

void AdsCreditDiscountsResponse::unsetActive()
{
    m_ActiveIsSet = false;
}
utility::string_t AdsCreditDiscountsResponse::getAdvertiserId() const
{
    return m_Advertiser_id;
}

void AdsCreditDiscountsResponse::setAdvertiserId(const utility::string_t& value)
{
    m_Advertiser_id = value;
    m_Advertiser_idIsSet = true;
}

bool AdsCreditDiscountsResponse::advertiserIdIsSet() const
{
    return m_Advertiser_idIsSet;
}

void AdsCreditDiscountsResponse::unsetAdvertiser_id()
{
    m_Advertiser_idIsSet = false;
}
utility::string_t AdsCreditDiscountsResponse::getDiscountType() const
{
    return m_DiscountType;
}

void AdsCreditDiscountsResponse::setDiscountType(const utility::string_t& value)
{
    m_DiscountType = value;
    m_DiscountTypeIsSet = true;
}

bool AdsCreditDiscountsResponse::discountTypeIsSet() const
{
    return m_DiscountTypeIsSet;
}

void AdsCreditDiscountsResponse::unsetDiscountType()
{
    m_DiscountTypeIsSet = false;
}
double AdsCreditDiscountsResponse::getDiscountInMicroCurrency() const
{
    return m_DiscountInMicroCurrency;
}

void AdsCreditDiscountsResponse::setDiscountInMicroCurrency(double value)
{
    m_DiscountInMicroCurrency = value;
    m_DiscountInMicroCurrencyIsSet = true;
}

bool AdsCreditDiscountsResponse::discountInMicroCurrencyIsSet() const
{
    return m_DiscountInMicroCurrencyIsSet;
}

void AdsCreditDiscountsResponse::unsetDiscountInMicroCurrency()
{
    m_DiscountInMicroCurrencyIsSet = false;
}
utility::string_t AdsCreditDiscountsResponse::getDiscountCurrency() const
{
    return m_DiscountCurrency;
}

void AdsCreditDiscountsResponse::setDiscountCurrency(const utility::string_t& value)
{
    m_DiscountCurrency = value;
    m_DiscountCurrencyIsSet = true;
}

bool AdsCreditDiscountsResponse::discountCurrencyIsSet() const
{
    return m_DiscountCurrencyIsSet;
}

void AdsCreditDiscountsResponse::unsetDiscountCurrency()
{
    m_DiscountCurrencyIsSet = false;
}
utility::string_t AdsCreditDiscountsResponse::getTitle() const
{
    return m_Title;
}

void AdsCreditDiscountsResponse::setTitle(const utility::string_t& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}

bool AdsCreditDiscountsResponse::titleIsSet() const
{
    return m_TitleIsSet;
}

void AdsCreditDiscountsResponse::unsetTitle()
{
    m_TitleIsSet = false;
}
double AdsCreditDiscountsResponse::getRemainingDiscountInMicroCurrency() const
{
    return m_RemainingDiscountInMicroCurrency;
}

void AdsCreditDiscountsResponse::setRemainingDiscountInMicroCurrency(double value)
{
    m_RemainingDiscountInMicroCurrency = value;
    m_RemainingDiscountInMicroCurrencyIsSet = true;
}

bool AdsCreditDiscountsResponse::remainingDiscountInMicroCurrencyIsSet() const
{
    return m_RemainingDiscountInMicroCurrencyIsSet;
}

void AdsCreditDiscountsResponse::unsetRemainingDiscountInMicroCurrency()
{
    m_RemainingDiscountInMicroCurrencyIsSet = false;
}
}
}
}
}


