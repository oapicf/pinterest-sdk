/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PinMediaSourceVideoID.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



PinMediaSourceVideoID::PinMediaSourceVideoID()
{
    m_Source_type = utility::conversions::to_string_t("");
    m_Source_typeIsSet = false;
    m_Cover_image_url = utility::conversions::to_string_t("");
    m_Cover_image_urlIsSet = false;
    m_Cover_image_content_type = utility::conversions::to_string_t("");
    m_Cover_image_content_typeIsSet = false;
    m_Cover_image_data = utility::conversions::to_string_t("");
    m_Cover_image_dataIsSet = false;
    m_Media_id = utility::conversions::to_string_t("");
    m_Media_idIsSet = false;
    m_Is_standard = false;
    m_Is_standardIsSet = false;
}

PinMediaSourceVideoID::~PinMediaSourceVideoID()
{
}

void PinMediaSourceVideoID::validate()
{
    // TODO: implement validation
}

web::json::value PinMediaSourceVideoID::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Source_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("source_type"))] = ModelBase::toJson(m_Source_type);
    }
    if(m_Cover_image_urlIsSet)
    {
        val[utility::conversions::to_string_t(U("cover_image_url"))] = ModelBase::toJson(m_Cover_image_url);
    }
    if(m_Cover_image_content_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("cover_image_content_type"))] = ModelBase::toJson(m_Cover_image_content_type);
    }
    if(m_Cover_image_dataIsSet)
    {
        val[utility::conversions::to_string_t(U("cover_image_data"))] = ModelBase::toJson(m_Cover_image_data);
    }
    if(m_Media_idIsSet)
    {
        val[utility::conversions::to_string_t(U("media_id"))] = ModelBase::toJson(m_Media_id);
    }
    if(m_Is_standardIsSet)
    {
        val[utility::conversions::to_string_t(U("is_standard"))] = ModelBase::toJson(m_Is_standard);
    }

    return val;
}

bool PinMediaSourceVideoID::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("source_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("source_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSourceType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSourceType);
            setSourceType(refVal_setSourceType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cover_image_url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cover_image_url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCoverImageUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCoverImageUrl);
            setCoverImageUrl(refVal_setCoverImageUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cover_image_content_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cover_image_content_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCoverImageContentType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCoverImageContentType);
            setCoverImageContentType(refVal_setCoverImageContentType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cover_image_data"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cover_image_data")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCoverImageData;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCoverImageData);
            setCoverImageData(refVal_setCoverImageData);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("media_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("media_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMediaId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMediaId);
            setMediaId(refVal_setMediaId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_standard"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_standard")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsStandard;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsStandard);
            setIsStandard(refVal_setIsStandard);
        }
    }
    return ok;
}

void PinMediaSourceVideoID::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Source_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("source_type")), m_Source_type));
    }
    if(m_Cover_image_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cover_image_url")), m_Cover_image_url));
    }
    if(m_Cover_image_content_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cover_image_content_type")), m_Cover_image_content_type));
    }
    if(m_Cover_image_dataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cover_image_data")), m_Cover_image_data));
    }
    if(m_Media_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("media_id")), m_Media_id));
    }
    if(m_Is_standardIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_standard")), m_Is_standard));
    }
}

bool PinMediaSourceVideoID::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("source_type"))))
    {
        utility::string_t refVal_setSourceType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("source_type"))), refVal_setSourceType );
        setSourceType(refVal_setSourceType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cover_image_url"))))
    {
        utility::string_t refVal_setCoverImageUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cover_image_url"))), refVal_setCoverImageUrl );
        setCoverImageUrl(refVal_setCoverImageUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cover_image_content_type"))))
    {
        utility::string_t refVal_setCoverImageContentType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cover_image_content_type"))), refVal_setCoverImageContentType );
        setCoverImageContentType(refVal_setCoverImageContentType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cover_image_data"))))
    {
        utility::string_t refVal_setCoverImageData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cover_image_data"))), refVal_setCoverImageData );
        setCoverImageData(refVal_setCoverImageData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("media_id"))))
    {
        utility::string_t refVal_setMediaId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("media_id"))), refVal_setMediaId );
        setMediaId(refVal_setMediaId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_standard"))))
    {
        bool refVal_setIsStandard;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_standard"))), refVal_setIsStandard );
        setIsStandard(refVal_setIsStandard);
    }
    return ok;
}

utility::string_t PinMediaSourceVideoID::getSourceType() const
{
    return m_Source_type;
}

void PinMediaSourceVideoID::setSourceType(const utility::string_t& value)
{
    m_Source_type = value;
    m_Source_typeIsSet = true;
}

bool PinMediaSourceVideoID::sourceTypeIsSet() const
{
    return m_Source_typeIsSet;
}

void PinMediaSourceVideoID::unsetSource_type()
{
    m_Source_typeIsSet = false;
}
utility::string_t PinMediaSourceVideoID::getCoverImageUrl() const
{
    return m_Cover_image_url;
}

void PinMediaSourceVideoID::setCoverImageUrl(const utility::string_t& value)
{
    m_Cover_image_url = value;
    m_Cover_image_urlIsSet = true;
}

bool PinMediaSourceVideoID::coverImageUrlIsSet() const
{
    return m_Cover_image_urlIsSet;
}

void PinMediaSourceVideoID::unsetCover_image_url()
{
    m_Cover_image_urlIsSet = false;
}
utility::string_t PinMediaSourceVideoID::getCoverImageContentType() const
{
    return m_Cover_image_content_type;
}

void PinMediaSourceVideoID::setCoverImageContentType(const utility::string_t& value)
{
    m_Cover_image_content_type = value;
    m_Cover_image_content_typeIsSet = true;
}

bool PinMediaSourceVideoID::coverImageContentTypeIsSet() const
{
    return m_Cover_image_content_typeIsSet;
}

void PinMediaSourceVideoID::unsetCover_image_content_type()
{
    m_Cover_image_content_typeIsSet = false;
}
utility::string_t PinMediaSourceVideoID::getCoverImageData() const
{
    return m_Cover_image_data;
}

void PinMediaSourceVideoID::setCoverImageData(const utility::string_t& value)
{
    m_Cover_image_data = value;
    m_Cover_image_dataIsSet = true;
}

bool PinMediaSourceVideoID::coverImageDataIsSet() const
{
    return m_Cover_image_dataIsSet;
}

void PinMediaSourceVideoID::unsetCover_image_data()
{
    m_Cover_image_dataIsSet = false;
}
utility::string_t PinMediaSourceVideoID::getMediaId() const
{
    return m_Media_id;
}

void PinMediaSourceVideoID::setMediaId(const utility::string_t& value)
{
    m_Media_id = value;
    m_Media_idIsSet = true;
}

bool PinMediaSourceVideoID::mediaIdIsSet() const
{
    return m_Media_idIsSet;
}

void PinMediaSourceVideoID::unsetMedia_id()
{
    m_Media_idIsSet = false;
}
bool PinMediaSourceVideoID::isIsStandard() const
{
    return m_Is_standard;
}

void PinMediaSourceVideoID::setIsStandard(bool value)
{
    m_Is_standard = value;
    m_Is_standardIsSet = true;
}

bool PinMediaSourceVideoID::isStandardIsSet() const
{
    return m_Is_standardIsSet;
}

void PinMediaSourceVideoID::unsetIs_standard()
{
    m_Is_standardIsSet = false;
}
}
}
}
}


