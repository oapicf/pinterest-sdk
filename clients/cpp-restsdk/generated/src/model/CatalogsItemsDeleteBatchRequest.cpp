/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CatalogsItemsDeleteBatchRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CatalogsItemsDeleteBatchRequest::CatalogsItemsDeleteBatchRequest()
{
    m_CountryIsSet = false;
    m_LanguageIsSet = false;
    m_OperationIsSet = false;
    m_ItemsIsSet = false;
}

CatalogsItemsDeleteBatchRequest::~CatalogsItemsDeleteBatchRequest()
{
}

void CatalogsItemsDeleteBatchRequest::validate()
{
    // TODO: implement validation
}

web::json::value CatalogsItemsDeleteBatchRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CountryIsSet)
    {
        val[utility::conversions::to_string_t(U("country"))] = ModelBase::toJson(m_Country);
    }
    if(m_LanguageIsSet)
    {
        val[utility::conversions::to_string_t(U("language"))] = ModelBase::toJson(m_Language);
    }
    if(m_OperationIsSet)
    {
        val[utility::conversions::to_string_t(U("operation"))] = ModelBase::toJson(m_Operation);
    }
    if(m_ItemsIsSet)
    {
        val[utility::conversions::to_string_t(U("items"))] = ModelBase::toJson(m_Items);
    }

    return val;
}

bool CatalogsItemsDeleteBatchRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("country"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("country")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Country> refVal_setCountry;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCountry);
            setCountry(refVal_setCountry);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("language"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("language")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsItemsRequest_language> refVal_setLanguage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLanguage);
            setLanguage(refVal_setLanguage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("operation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("operation")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BatchOperation> refVal_setOperation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOperation);
            setOperation(refVal_setOperation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("items"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("items")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ItemDeleteBatchRecord>> refVal_setItems;
            ok &= ModelBase::fromJson(fieldValue, refVal_setItems);
            setItems(refVal_setItems);
        }
    }
    return ok;
}

void CatalogsItemsDeleteBatchRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("country")), m_Country));
    }
    if(m_LanguageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("language")), m_Language));
    }
    if(m_OperationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("operation")), m_Operation));
    }
    if(m_ItemsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("items")), m_Items));
    }
}

bool CatalogsItemsDeleteBatchRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("country"))))
    {
        std::shared_ptr<Country> refVal_setCountry;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("country"))), refVal_setCountry );
        setCountry(refVal_setCountry);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("language"))))
    {
        std::shared_ptr<CatalogsItemsRequest_language> refVal_setLanguage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("language"))), refVal_setLanguage );
        setLanguage(refVal_setLanguage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("operation"))))
    {
        std::shared_ptr<BatchOperation> refVal_setOperation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("operation"))), refVal_setOperation );
        setOperation(refVal_setOperation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("items"))))
    {
        std::vector<std::shared_ptr<ItemDeleteBatchRecord>> refVal_setItems;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("items"))), refVal_setItems );
        setItems(refVal_setItems);
    }
    return ok;
}

std::shared_ptr<Country> CatalogsItemsDeleteBatchRequest::getCountry() const
{
    return m_Country;
}

void CatalogsItemsDeleteBatchRequest::setCountry(const std::shared_ptr<Country>& value)
{
    m_Country = value;
    m_CountryIsSet = true;
}

bool CatalogsItemsDeleteBatchRequest::countryIsSet() const
{
    return m_CountryIsSet;
}

void CatalogsItemsDeleteBatchRequest::unsetCountry()
{
    m_CountryIsSet = false;
}
std::shared_ptr<CatalogsItemsRequest_language> CatalogsItemsDeleteBatchRequest::getLanguage() const
{
    return m_Language;
}

void CatalogsItemsDeleteBatchRequest::setLanguage(const std::shared_ptr<CatalogsItemsRequest_language>& value)
{
    m_Language = value;
    m_LanguageIsSet = true;
}

bool CatalogsItemsDeleteBatchRequest::languageIsSet() const
{
    return m_LanguageIsSet;
}

void CatalogsItemsDeleteBatchRequest::unsetLanguage()
{
    m_LanguageIsSet = false;
}
std::shared_ptr<BatchOperation> CatalogsItemsDeleteBatchRequest::getOperation() const
{
    return m_Operation;
}

void CatalogsItemsDeleteBatchRequest::setOperation(const std::shared_ptr<BatchOperation>& value)
{
    m_Operation = value;
    m_OperationIsSet = true;
}

bool CatalogsItemsDeleteBatchRequest::operationIsSet() const
{
    return m_OperationIsSet;
}

void CatalogsItemsDeleteBatchRequest::unsetOperation()
{
    m_OperationIsSet = false;
}
std::vector<std::shared_ptr<ItemDeleteBatchRecord>>& CatalogsItemsDeleteBatchRequest::getItems()
{
    return m_Items;
}

void CatalogsItemsDeleteBatchRequest::setItems(const std::vector<std::shared_ptr<ItemDeleteBatchRecord>>& value)
{
    m_Items = value;
    m_ItemsIsSet = true;
}

bool CatalogsItemsDeleteBatchRequest::itemsIsSet() const
{
    return m_ItemsIsSet;
}

void CatalogsItemsDeleteBatchRequest::unsetItems()
{
    m_ItemsIsSet = false;
}
}
}
}
}


