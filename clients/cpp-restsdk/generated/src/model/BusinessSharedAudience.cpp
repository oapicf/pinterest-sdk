/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/BusinessSharedAudience.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



BusinessSharedAudience::BusinessSharedAudience()
{
    m_Audience_id = utility::conversions::to_string_t("");
    m_Audience_idIsSet = false;
    m_Operation_typeIsSet = false;
    m_Recipient_business_idsIsSet = false;
}

BusinessSharedAudience::~BusinessSharedAudience()
{
}

void BusinessSharedAudience::validate()
{
    // TODO: implement validation
}

web::json::value BusinessSharedAudience::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Audience_idIsSet)
    {
        val[utility::conversions::to_string_t(U("audience_id"))] = ModelBase::toJson(m_Audience_id);
    }
    if(m_Operation_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("operation_type"))] = ModelBase::toJson(m_Operation_type);
    }
    if(m_Recipient_business_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("recipient_business_ids"))] = ModelBase::toJson(m_Recipient_business_ids);
    }

    return val;
}

bool BusinessSharedAudience::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("audience_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("audience_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAudienceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAudienceId);
            setAudienceId(refVal_setAudienceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("operation_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("operation_type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OperationType> refVal_setOperationType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOperationType);
            setOperationType(refVal_setOperationType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recipient_business_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recipient_business_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setRecipientBusinessIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecipientBusinessIds);
            setRecipientBusinessIds(refVal_setRecipientBusinessIds);
        }
    }
    return ok;
}

void BusinessSharedAudience::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Audience_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("audience_id")), m_Audience_id));
    }
    if(m_Operation_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("operation_type")), m_Operation_type));
    }
    if(m_Recipient_business_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recipient_business_ids")), m_Recipient_business_ids));
    }
}

bool BusinessSharedAudience::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("audience_id"))))
    {
        utility::string_t refVal_setAudienceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("audience_id"))), refVal_setAudienceId );
        setAudienceId(refVal_setAudienceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("operation_type"))))
    {
        std::shared_ptr<OperationType> refVal_setOperationType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("operation_type"))), refVal_setOperationType );
        setOperationType(refVal_setOperationType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recipient_business_ids"))))
    {
        std::vector<utility::string_t> refVal_setRecipientBusinessIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recipient_business_ids"))), refVal_setRecipientBusinessIds );
        setRecipientBusinessIds(refVal_setRecipientBusinessIds);
    }
    return ok;
}

utility::string_t BusinessSharedAudience::getAudienceId() const
{
    return m_Audience_id;
}

void BusinessSharedAudience::setAudienceId(const utility::string_t& value)
{
    m_Audience_id = value;
    m_Audience_idIsSet = true;
}

bool BusinessSharedAudience::audienceIdIsSet() const
{
    return m_Audience_idIsSet;
}

void BusinessSharedAudience::unsetAudience_id()
{
    m_Audience_idIsSet = false;
}
std::shared_ptr<OperationType> BusinessSharedAudience::getOperationType() const
{
    return m_Operation_type;
}

void BusinessSharedAudience::setOperationType(const std::shared_ptr<OperationType>& value)
{
    m_Operation_type = value;
    m_Operation_typeIsSet = true;
}

bool BusinessSharedAudience::operationTypeIsSet() const
{
    return m_Operation_typeIsSet;
}

void BusinessSharedAudience::unsetOperation_type()
{
    m_Operation_typeIsSet = false;
}
std::vector<utility::string_t>& BusinessSharedAudience::getRecipientBusinessIds()
{
    return m_Recipient_business_ids;
}

void BusinessSharedAudience::setRecipientBusinessIds(const std::vector<utility::string_t>& value)
{
    m_Recipient_business_ids = value;
    m_Recipient_business_idsIsSet = true;
}

bool BusinessSharedAudience::recipientBusinessIdsIsSet() const
{
    return m_Recipient_business_idsIsSet;
}

void BusinessSharedAudience::unsetRecipient_business_ids()
{
    m_Recipient_business_idsIsSet = false;
}
}
}
}
}


