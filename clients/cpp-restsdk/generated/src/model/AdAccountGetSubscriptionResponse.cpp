/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AdAccountGetSubscriptionResponse.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AdAccountGetSubscriptionResponse::AdAccountGetSubscriptionResponse()
{
    m_Lead_form_id = utility::conversions::to_string_t("");
    m_Lead_form_idIsSet = false;
    m_Webhook_url = utility::conversions::to_string_t("");
    m_Webhook_urlIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_User_account_id = utility::conversions::to_string_t("");
    m_User_account_idIsSet = false;
    m_Ad_account_id = utility::conversions::to_string_t("");
    m_Ad_account_idIsSet = false;
    m_Api_version = utility::conversions::to_string_t("");
    m_Api_versionIsSet = false;
    m_Cryptographic_key = utility::conversions::to_string_t("");
    m_Cryptographic_keyIsSet = false;
    m_Cryptographic_algorithm = utility::conversions::to_string_t("");
    m_Cryptographic_algorithmIsSet = false;
    m_Created_time = 0;
    m_Created_timeIsSet = false;
}

AdAccountGetSubscriptionResponse::~AdAccountGetSubscriptionResponse()
{
}

void AdAccountGetSubscriptionResponse::validate()
{
    // TODO: implement validation
}

web::json::value AdAccountGetSubscriptionResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Lead_form_idIsSet)
    {
        val[utility::conversions::to_string_t(U("lead_form_id"))] = ModelBase::toJson(m_Lead_form_id);
    }
    if(m_Webhook_urlIsSet)
    {
        val[utility::conversions::to_string_t(U("webhook_url"))] = ModelBase::toJson(m_Webhook_url);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_User_account_idIsSet)
    {
        val[utility::conversions::to_string_t(U("user_account_id"))] = ModelBase::toJson(m_User_account_id);
    }
    if(m_Ad_account_idIsSet)
    {
        val[utility::conversions::to_string_t(U("ad_account_id"))] = ModelBase::toJson(m_Ad_account_id);
    }
    if(m_Api_versionIsSet)
    {
        val[utility::conversions::to_string_t(U("api_version"))] = ModelBase::toJson(m_Api_version);
    }
    if(m_Cryptographic_keyIsSet)
    {
        val[utility::conversions::to_string_t(U("cryptographic_key"))] = ModelBase::toJson(m_Cryptographic_key);
    }
    if(m_Cryptographic_algorithmIsSet)
    {
        val[utility::conversions::to_string_t(U("cryptographic_algorithm"))] = ModelBase::toJson(m_Cryptographic_algorithm);
    }
    if(m_Created_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("created_time"))] = ModelBase::toJson(m_Created_time);
    }

    return val;
}

bool AdAccountGetSubscriptionResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("lead_form_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lead_form_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLeadFormId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLeadFormId);
            setLeadFormId(refVal_setLeadFormId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("webhook_url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("webhook_url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWebhookUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWebhookUrl);
            setWebhookUrl(refVal_setWebhookUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user_account_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user_account_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserAccountId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserAccountId);
            setUserAccountId(refVal_setUserAccountId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ad_account_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ad_account_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAdAccountId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdAccountId);
            setAdAccountId(refVal_setAdAccountId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("api_version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("api_version")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setApiVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setApiVersion);
            setApiVersion(refVal_setApiVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cryptographic_key"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cryptographic_key")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCryptographicKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCryptographicKey);
            setCryptographicKey(refVal_setCryptographicKey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cryptographic_algorithm"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cryptographic_algorithm")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCryptographicAlgorithm;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCryptographicAlgorithm);
            setCryptographicAlgorithm(refVal_setCryptographicAlgorithm);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_time")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCreatedTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedTime);
            setCreatedTime(refVal_setCreatedTime);
        }
    }
    return ok;
}

void AdAccountGetSubscriptionResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Lead_form_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lead_form_id")), m_Lead_form_id));
    }
    if(m_Webhook_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("webhook_url")), m_Webhook_url));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_User_account_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user_account_id")), m_User_account_id));
    }
    if(m_Ad_account_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ad_account_id")), m_Ad_account_id));
    }
    if(m_Api_versionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("api_version")), m_Api_version));
    }
    if(m_Cryptographic_keyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cryptographic_key")), m_Cryptographic_key));
    }
    if(m_Cryptographic_algorithmIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cryptographic_algorithm")), m_Cryptographic_algorithm));
    }
    if(m_Created_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_time")), m_Created_time));
    }
}

bool AdAccountGetSubscriptionResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("lead_form_id"))))
    {
        utility::string_t refVal_setLeadFormId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lead_form_id"))), refVal_setLeadFormId );
        setLeadFormId(refVal_setLeadFormId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("webhook_url"))))
    {
        utility::string_t refVal_setWebhookUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("webhook_url"))), refVal_setWebhookUrl );
        setWebhookUrl(refVal_setWebhookUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user_account_id"))))
    {
        utility::string_t refVal_setUserAccountId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user_account_id"))), refVal_setUserAccountId );
        setUserAccountId(refVal_setUserAccountId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ad_account_id"))))
    {
        utility::string_t refVal_setAdAccountId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ad_account_id"))), refVal_setAdAccountId );
        setAdAccountId(refVal_setAdAccountId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("api_version"))))
    {
        utility::string_t refVal_setApiVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("api_version"))), refVal_setApiVersion );
        setApiVersion(refVal_setApiVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cryptographic_key"))))
    {
        utility::string_t refVal_setCryptographicKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cryptographic_key"))), refVal_setCryptographicKey );
        setCryptographicKey(refVal_setCryptographicKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cryptographic_algorithm"))))
    {
        utility::string_t refVal_setCryptographicAlgorithm;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cryptographic_algorithm"))), refVal_setCryptographicAlgorithm );
        setCryptographicAlgorithm(refVal_setCryptographicAlgorithm);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_time"))))
    {
        int32_t refVal_setCreatedTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_time"))), refVal_setCreatedTime );
        setCreatedTime(refVal_setCreatedTime);
    }
    return ok;
}

utility::string_t AdAccountGetSubscriptionResponse::getLeadFormId() const
{
    return m_Lead_form_id;
}

void AdAccountGetSubscriptionResponse::setLeadFormId(const utility::string_t& value)
{
    m_Lead_form_id = value;
    m_Lead_form_idIsSet = true;
}

bool AdAccountGetSubscriptionResponse::leadFormIdIsSet() const
{
    return m_Lead_form_idIsSet;
}

void AdAccountGetSubscriptionResponse::unsetLead_form_id()
{
    m_Lead_form_idIsSet = false;
}
utility::string_t AdAccountGetSubscriptionResponse::getWebhookUrl() const
{
    return m_Webhook_url;
}

void AdAccountGetSubscriptionResponse::setWebhookUrl(const utility::string_t& value)
{
    m_Webhook_url = value;
    m_Webhook_urlIsSet = true;
}

bool AdAccountGetSubscriptionResponse::webhookUrlIsSet() const
{
    return m_Webhook_urlIsSet;
}

void AdAccountGetSubscriptionResponse::unsetWebhook_url()
{
    m_Webhook_urlIsSet = false;
}
utility::string_t AdAccountGetSubscriptionResponse::getId() const
{
    return m_Id;
}

void AdAccountGetSubscriptionResponse::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool AdAccountGetSubscriptionResponse::idIsSet() const
{
    return m_IdIsSet;
}

void AdAccountGetSubscriptionResponse::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t AdAccountGetSubscriptionResponse::getUserAccountId() const
{
    return m_User_account_id;
}

void AdAccountGetSubscriptionResponse::setUserAccountId(const utility::string_t& value)
{
    m_User_account_id = value;
    m_User_account_idIsSet = true;
}

bool AdAccountGetSubscriptionResponse::userAccountIdIsSet() const
{
    return m_User_account_idIsSet;
}

void AdAccountGetSubscriptionResponse::unsetUser_account_id()
{
    m_User_account_idIsSet = false;
}
utility::string_t AdAccountGetSubscriptionResponse::getAdAccountId() const
{
    return m_Ad_account_id;
}

void AdAccountGetSubscriptionResponse::setAdAccountId(const utility::string_t& value)
{
    m_Ad_account_id = value;
    m_Ad_account_idIsSet = true;
}

bool AdAccountGetSubscriptionResponse::adAccountIdIsSet() const
{
    return m_Ad_account_idIsSet;
}

void AdAccountGetSubscriptionResponse::unsetAd_account_id()
{
    m_Ad_account_idIsSet = false;
}
utility::string_t AdAccountGetSubscriptionResponse::getApiVersion() const
{
    return m_Api_version;
}

void AdAccountGetSubscriptionResponse::setApiVersion(const utility::string_t& value)
{
    m_Api_version = value;
    m_Api_versionIsSet = true;
}

bool AdAccountGetSubscriptionResponse::apiVersionIsSet() const
{
    return m_Api_versionIsSet;
}

void AdAccountGetSubscriptionResponse::unsetApi_version()
{
    m_Api_versionIsSet = false;
}
utility::string_t AdAccountGetSubscriptionResponse::getCryptographicKey() const
{
    return m_Cryptographic_key;
}

void AdAccountGetSubscriptionResponse::setCryptographicKey(const utility::string_t& value)
{
    m_Cryptographic_key = value;
    m_Cryptographic_keyIsSet = true;
}

bool AdAccountGetSubscriptionResponse::cryptographicKeyIsSet() const
{
    return m_Cryptographic_keyIsSet;
}

void AdAccountGetSubscriptionResponse::unsetCryptographic_key()
{
    m_Cryptographic_keyIsSet = false;
}
utility::string_t AdAccountGetSubscriptionResponse::getCryptographicAlgorithm() const
{
    return m_Cryptographic_algorithm;
}

void AdAccountGetSubscriptionResponse::setCryptographicAlgorithm(const utility::string_t& value)
{
    m_Cryptographic_algorithm = value;
    m_Cryptographic_algorithmIsSet = true;
}

bool AdAccountGetSubscriptionResponse::cryptographicAlgorithmIsSet() const
{
    return m_Cryptographic_algorithmIsSet;
}

void AdAccountGetSubscriptionResponse::unsetCryptographic_algorithm()
{
    m_Cryptographic_algorithmIsSet = false;
}
int32_t AdAccountGetSubscriptionResponse::getCreatedTime() const
{
    return m_Created_time;
}

void AdAccountGetSubscriptionResponse::setCreatedTime(int32_t value)
{
    m_Created_time = value;
    m_Created_timeIsSet = true;
}

bool AdAccountGetSubscriptionResponse::createdTimeIsSet() const
{
    return m_Created_timeIsSet;
}

void AdAccountGetSubscriptionResponse::unsetCreated_time()
{
    m_Created_timeIsSet = false;
}
}
}
}
}


