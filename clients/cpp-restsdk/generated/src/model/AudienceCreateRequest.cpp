/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AudienceCreateRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AudienceCreateRequest::AudienceCreateRequest()
{
    m_Ad_account_id = utility::conversions::to_string_t("");
    m_Ad_account_idIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_RuleIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Audience_typeIsSet = false;
}

AudienceCreateRequest::~AudienceCreateRequest()
{
}

void AudienceCreateRequest::validate()
{
    // TODO: implement validation
}

web::json::value AudienceCreateRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Ad_account_idIsSet)
    {
        val[utility::conversions::to_string_t(U("ad_account_id"))] = ModelBase::toJson(m_Ad_account_id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_RuleIsSet)
    {
        val[utility::conversions::to_string_t(U("rule"))] = ModelBase::toJson(m_Rule);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_Audience_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("audience_type"))] = ModelBase::toJson(m_Audience_type);
    }

    return val;
}

bool AudienceCreateRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("ad_account_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ad_account_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAdAccountId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdAccountId);
            setAdAccountId(refVal_setAdAccountId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rule"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rule")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AudienceRule> refVal_setRule;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRule);
            setRule(refVal_setRule);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("audience_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("audience_type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AudienceCreateRequest_1_audience_type> refVal_setAudienceType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAudienceType);
            setAudienceType(refVal_setAudienceType);
        }
    }
    return ok;
}

void AudienceCreateRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Ad_account_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ad_account_id")), m_Ad_account_id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_RuleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rule")), m_Rule));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_Audience_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("audience_type")), m_Audience_type));
    }
}

bool AudienceCreateRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("ad_account_id"))))
    {
        utility::string_t refVal_setAdAccountId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ad_account_id"))), refVal_setAdAccountId );
        setAdAccountId(refVal_setAdAccountId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rule"))))
    {
        std::shared_ptr<AudienceRule> refVal_setRule;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rule"))), refVal_setRule );
        setRule(refVal_setRule);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("audience_type"))))
    {
        std::shared_ptr<AudienceCreateRequest_1_audience_type> refVal_setAudienceType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("audience_type"))), refVal_setAudienceType );
        setAudienceType(refVal_setAudienceType);
    }
    return ok;
}

utility::string_t AudienceCreateRequest::getAdAccountId() const
{
    return m_Ad_account_id;
}

void AudienceCreateRequest::setAdAccountId(const utility::string_t& value)
{
    m_Ad_account_id = value;
    m_Ad_account_idIsSet = true;
}

bool AudienceCreateRequest::adAccountIdIsSet() const
{
    return m_Ad_account_idIsSet;
}

void AudienceCreateRequest::unsetAd_account_id()
{
    m_Ad_account_idIsSet = false;
}
utility::string_t AudienceCreateRequest::getName() const
{
    return m_Name;
}

void AudienceCreateRequest::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool AudienceCreateRequest::nameIsSet() const
{
    return m_NameIsSet;
}

void AudienceCreateRequest::unsetName()
{
    m_NameIsSet = false;
}
std::shared_ptr<AudienceRule> AudienceCreateRequest::getRule() const
{
    return m_Rule;
}

void AudienceCreateRequest::setRule(const std::shared_ptr<AudienceRule>& value)
{
    m_Rule = value;
    m_RuleIsSet = true;
}

bool AudienceCreateRequest::ruleIsSet() const
{
    return m_RuleIsSet;
}

void AudienceCreateRequest::unsetRule()
{
    m_RuleIsSet = false;
}
utility::string_t AudienceCreateRequest::getDescription() const
{
    return m_Description;
}

void AudienceCreateRequest::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool AudienceCreateRequest::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void AudienceCreateRequest::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::shared_ptr<AudienceCreateRequest_1_audience_type> AudienceCreateRequest::getAudienceType() const
{
    return m_Audience_type;
}

void AudienceCreateRequest::setAudienceType(const std::shared_ptr<AudienceCreateRequest_1_audience_type>& value)
{
    m_Audience_type = value;
    m_Audience_typeIsSet = true;
}

bool AudienceCreateRequest::audienceTypeIsSet() const
{
    return m_Audience_typeIsSet;
}

void AudienceCreateRequest::unsetAudience_type()
{
    m_Audience_typeIsSet = false;
}
}
}
}
}


