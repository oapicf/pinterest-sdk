/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AdsAnalyticsCreateAsyncResponse.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AdsAnalyticsCreateAsyncResponse::AdsAnalyticsCreateAsyncResponse()
{
    m_Report_statusIsSet = false;
    m_Token = utility::conversions::to_string_t("");
    m_TokenIsSet = false;
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
}

AdsAnalyticsCreateAsyncResponse::~AdsAnalyticsCreateAsyncResponse()
{
}

void AdsAnalyticsCreateAsyncResponse::validate()
{
    // TODO: implement validation
}

web::json::value AdsAnalyticsCreateAsyncResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Report_statusIsSet)
    {
        val[utility::conversions::to_string_t(U("report_status"))] = ModelBase::toJson(m_Report_status);
    }
    if(m_TokenIsSet)
    {
        val[utility::conversions::to_string_t(U("token"))] = ModelBase::toJson(m_Token);
    }
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t(U("message"))] = ModelBase::toJson(m_Message);
    }

    return val;
}

bool AdsAnalyticsCreateAsyncResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("report_status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("report_status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BulkReportingJobStatus> refVal_setReportStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReportStatus);
            setReportStatus(refVal_setReportStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("token"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("token")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setToken;
            ok &= ModelBase::fromJson(fieldValue, refVal_setToken);
            setToken(refVal_setToken);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("message"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("message")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessage);
            setMessage(refVal_setMessage);
        }
    }
    return ok;
}

void AdsAnalyticsCreateAsyncResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Report_statusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("report_status")), m_Report_status));
    }
    if(m_TokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("token")), m_Token));
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("message")), m_Message));
    }
}

bool AdsAnalyticsCreateAsyncResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("report_status"))))
    {
        std::shared_ptr<BulkReportingJobStatus> refVal_setReportStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("report_status"))), refVal_setReportStatus );
        setReportStatus(refVal_setReportStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("token"))))
    {
        utility::string_t refVal_setToken;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("token"))), refVal_setToken );
        setToken(refVal_setToken);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("message"))))
    {
        utility::string_t refVal_setMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("message"))), refVal_setMessage );
        setMessage(refVal_setMessage);
    }
    return ok;
}

std::shared_ptr<BulkReportingJobStatus> AdsAnalyticsCreateAsyncResponse::getReportStatus() const
{
    return m_Report_status;
}

void AdsAnalyticsCreateAsyncResponse::setReportStatus(const std::shared_ptr<BulkReportingJobStatus>& value)
{
    m_Report_status = value;
    m_Report_statusIsSet = true;
}

bool AdsAnalyticsCreateAsyncResponse::reportStatusIsSet() const
{
    return m_Report_statusIsSet;
}

void AdsAnalyticsCreateAsyncResponse::unsetReport_status()
{
    m_Report_statusIsSet = false;
}
utility::string_t AdsAnalyticsCreateAsyncResponse::getToken() const
{
    return m_Token;
}

void AdsAnalyticsCreateAsyncResponse::setToken(const utility::string_t& value)
{
    m_Token = value;
    m_TokenIsSet = true;
}

bool AdsAnalyticsCreateAsyncResponse::tokenIsSet() const
{
    return m_TokenIsSet;
}

void AdsAnalyticsCreateAsyncResponse::unsetToken()
{
    m_TokenIsSet = false;
}
utility::string_t AdsAnalyticsCreateAsyncResponse::getMessage() const
{
    return m_Message;
}

void AdsAnalyticsCreateAsyncResponse::setMessage(const utility::string_t& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}

bool AdsAnalyticsCreateAsyncResponse::messageIsSet() const
{
    return m_MessageIsSet;
}

void AdsAnalyticsCreateAsyncResponse::unsetMessage()
{
    m_MessageIsSet = false;
}
}
}
}
}


