/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/LeadsExportResponseData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



LeadsExportResponseData::LeadsExportResponseData()
{
    m_Export_statusIsSet = false;
    m_Download_url = utility::conversions::to_string_t("");
    m_Download_urlIsSet = false;
}

LeadsExportResponseData::~LeadsExportResponseData()
{
}

void LeadsExportResponseData::validate()
{
    // TODO: implement validation
}

web::json::value LeadsExportResponseData::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Export_statusIsSet)
    {
        val[utility::conversions::to_string_t(U("export_status"))] = ModelBase::toJson(m_Export_status);
    }
    if(m_Download_urlIsSet)
    {
        val[utility::conversions::to_string_t(U("download_url"))] = ModelBase::toJson(m_Download_url);
    }

    return val;
}

bool LeadsExportResponseData::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("export_status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("export_status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LeadsExportStatus> refVal_setExportStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExportStatus);
            setExportStatus(refVal_setExportStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("download_url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("download_url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDownloadUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDownloadUrl);
            setDownloadUrl(refVal_setDownloadUrl);
        }
    }
    return ok;
}

void LeadsExportResponseData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Export_statusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("export_status")), m_Export_status));
    }
    if(m_Download_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("download_url")), m_Download_url));
    }
}

bool LeadsExportResponseData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("export_status"))))
    {
        std::shared_ptr<LeadsExportStatus> refVal_setExportStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("export_status"))), refVal_setExportStatus );
        setExportStatus(refVal_setExportStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("download_url"))))
    {
        utility::string_t refVal_setDownloadUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("download_url"))), refVal_setDownloadUrl );
        setDownloadUrl(refVal_setDownloadUrl);
    }
    return ok;
}

std::shared_ptr<LeadsExportStatus> LeadsExportResponseData::getExportStatus() const
{
    return m_Export_status;
}

void LeadsExportResponseData::setExportStatus(const std::shared_ptr<LeadsExportStatus>& value)
{
    m_Export_status = value;
    m_Export_statusIsSet = true;
}

bool LeadsExportResponseData::exportStatusIsSet() const
{
    return m_Export_statusIsSet;
}

void LeadsExportResponseData::unsetExport_status()
{
    m_Export_statusIsSet = false;
}
utility::string_t LeadsExportResponseData::getDownloadUrl() const
{
    return m_Download_url;
}

void LeadsExportResponseData::setDownloadUrl(const utility::string_t& value)
{
    m_Download_url = value;
    m_Download_urlIsSet = true;
}

bool LeadsExportResponseData::downloadUrlIsSet() const
{
    return m_Download_urlIsSet;
}

void LeadsExportResponseData::unsetDownload_url()
{
    m_Download_urlIsSet = false;
}
}
}
}
}


