/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/UpdateAssetGroupResponse.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



UpdateAssetGroupResponse::UpdateAssetGroupResponse()
{
    m_Updated_asset_groupsIsSet = false;
    m_ExceptionsIsSet = false;
}

UpdateAssetGroupResponse::~UpdateAssetGroupResponse()
{
}

void UpdateAssetGroupResponse::validate()
{
    // TODO: implement validation
}

web::json::value UpdateAssetGroupResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Updated_asset_groupsIsSet)
    {
        val[utility::conversions::to_string_t(U("updated_asset_groups"))] = ModelBase::toJson(m_Updated_asset_groups);
    }
    if(m_ExceptionsIsSet)
    {
        val[utility::conversions::to_string_t(U("exceptions"))] = ModelBase::toJson(m_Exceptions);
    }

    return val;
}

bool UpdateAssetGroupResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("updated_asset_groups"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updated_asset_groups")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<AssetGroupBinding>> refVal_setUpdatedAssetGroups;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedAssetGroups);
            setUpdatedAssetGroups(refVal_setUpdatedAssetGroups);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("exceptions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exceptions")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<UpdateAssetGroupResponse_exceptions_inner>> refVal_setExceptions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExceptions);
            setExceptions(refVal_setExceptions);
        }
    }
    return ok;
}

void UpdateAssetGroupResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Updated_asset_groupsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updated_asset_groups")), m_Updated_asset_groups));
    }
    if(m_ExceptionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exceptions")), m_Exceptions));
    }
}

bool UpdateAssetGroupResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("updated_asset_groups"))))
    {
        std::vector<std::shared_ptr<AssetGroupBinding>> refVal_setUpdatedAssetGroups;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updated_asset_groups"))), refVal_setUpdatedAssetGroups );
        setUpdatedAssetGroups(refVal_setUpdatedAssetGroups);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("exceptions"))))
    {
        std::vector<std::shared_ptr<UpdateAssetGroupResponse_exceptions_inner>> refVal_setExceptions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exceptions"))), refVal_setExceptions );
        setExceptions(refVal_setExceptions);
    }
    return ok;
}

std::vector<std::shared_ptr<AssetGroupBinding>>& UpdateAssetGroupResponse::getUpdatedAssetGroups()
{
    return m_Updated_asset_groups;
}

void UpdateAssetGroupResponse::setUpdatedAssetGroups(const std::vector<std::shared_ptr<AssetGroupBinding>>& value)
{
    m_Updated_asset_groups = value;
    m_Updated_asset_groupsIsSet = true;
}

bool UpdateAssetGroupResponse::updatedAssetGroupsIsSet() const
{
    return m_Updated_asset_groupsIsSet;
}

void UpdateAssetGroupResponse::unsetUpdated_asset_groups()
{
    m_Updated_asset_groupsIsSet = false;
}
std::vector<std::shared_ptr<UpdateAssetGroupResponse_exceptions_inner>>& UpdateAssetGroupResponse::getExceptions()
{
    return m_Exceptions;
}

void UpdateAssetGroupResponse::setExceptions(const std::vector<std::shared_ptr<UpdateAssetGroupResponse_exceptions_inner>>& value)
{
    m_Exceptions = value;
    m_ExceptionsIsSet = true;
}

bool UpdateAssetGroupResponse::exceptionsIsSet() const
{
    return m_ExceptionsIsSet;
}

void UpdateAssetGroupResponse::unsetExceptions()
{
    m_ExceptionsIsSet = false;
}
}
}
}
}


