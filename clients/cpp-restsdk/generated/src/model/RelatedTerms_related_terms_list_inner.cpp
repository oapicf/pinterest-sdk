/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/RelatedTerms_related_terms_list_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



RelatedTerms_related_terms_list_inner::RelatedTerms_related_terms_list_inner()
{
    m_Term = utility::conversions::to_string_t("");
    m_TermIsSet = false;
    m_Related_termsIsSet = false;
}

RelatedTerms_related_terms_list_inner::~RelatedTerms_related_terms_list_inner()
{
}

void RelatedTerms_related_terms_list_inner::validate()
{
    // TODO: implement validation
}

web::json::value RelatedTerms_related_terms_list_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TermIsSet)
    {
        val[utility::conversions::to_string_t(U("term"))] = ModelBase::toJson(m_Term);
    }
    if(m_Related_termsIsSet)
    {
        val[utility::conversions::to_string_t(U("related_terms"))] = ModelBase::toJson(m_Related_terms);
    }

    return val;
}

bool RelatedTerms_related_terms_list_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("term"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("term")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTerm;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTerm);
            setTerm(refVal_setTerm);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("related_terms"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("related_terms")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setRelatedTerms;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRelatedTerms);
            setRelatedTerms(refVal_setRelatedTerms);
        }
    }
    return ok;
}

void RelatedTerms_related_terms_list_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TermIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("term")), m_Term));
    }
    if(m_Related_termsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("related_terms")), m_Related_terms));
    }
}

bool RelatedTerms_related_terms_list_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("term"))))
    {
        utility::string_t refVal_setTerm;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("term"))), refVal_setTerm );
        setTerm(refVal_setTerm);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("related_terms"))))
    {
        std::vector<utility::string_t> refVal_setRelatedTerms;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("related_terms"))), refVal_setRelatedTerms );
        setRelatedTerms(refVal_setRelatedTerms);
    }
    return ok;
}

utility::string_t RelatedTerms_related_terms_list_inner::getTerm() const
{
    return m_Term;
}

void RelatedTerms_related_terms_list_inner::setTerm(const utility::string_t& value)
{
    m_Term = value;
    m_TermIsSet = true;
}

bool RelatedTerms_related_terms_list_inner::termIsSet() const
{
    return m_TermIsSet;
}

void RelatedTerms_related_terms_list_inner::unsetTerm()
{
    m_TermIsSet = false;
}
std::vector<utility::string_t>& RelatedTerms_related_terms_list_inner::getRelatedTerms()
{
    return m_Related_terms;
}

void RelatedTerms_related_terms_list_inner::setRelatedTerms(const std::vector<utility::string_t>& value)
{
    m_Related_terms = value;
    m_Related_termsIsSet = true;
}

bool RelatedTerms_related_terms_list_inner::relatedTermsIsSet() const
{
    return m_Related_termsIsSet;
}

void RelatedTerms_related_terms_list_inner::unsetRelated_terms()
{
    m_Related_termsIsSet = false;
}
}
}
}
}


