/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/IntegrationLog.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



IntegrationLog::IntegrationLog()
{
    m_Client_timestamp = 0;
    m_Client_timestampIsSet = false;
    m_Event_type = utility::conversions::to_string_t("");
    m_Event_typeIsSet = false;
    m_Log_level = utility::conversions::to_string_t("");
    m_Log_levelIsSet = false;
    m_External_business_id = utility::conversions::to_string_t("");
    m_External_business_idIsSet = false;
    m_Advertiser_id = utility::conversions::to_string_t("");
    m_Advertiser_idIsSet = false;
    m_Merchant_id = utility::conversions::to_string_t("");
    m_Merchant_idIsSet = false;
    m_Tag_id = utility::conversions::to_string_t("");
    m_Tag_idIsSet = false;
    m_Feed_profile_id = utility::conversions::to_string_t("");
    m_Feed_profile_idIsSet = false;
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
    m_App_version_number = utility::conversions::to_string_t("");
    m_App_version_numberIsSet = false;
    m_Platform_version_number = utility::conversions::to_string_t("");
    m_Platform_version_numberIsSet = false;
    m_ErrorIsSet = false;
    m_RequestIsSet = false;
}

IntegrationLog::~IntegrationLog()
{
}

void IntegrationLog::validate()
{
    // TODO: implement validation
}

web::json::value IntegrationLog::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Client_timestampIsSet)
    {
        val[utility::conversions::to_string_t(U("client_timestamp"))] = ModelBase::toJson(m_Client_timestamp);
    }
    if(m_Event_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("event_type"))] = ModelBase::toJson(m_Event_type);
    }
    if(m_Log_levelIsSet)
    {
        val[utility::conversions::to_string_t(U("log_level"))] = ModelBase::toJson(m_Log_level);
    }
    if(m_External_business_idIsSet)
    {
        val[utility::conversions::to_string_t(U("external_business_id"))] = ModelBase::toJson(m_External_business_id);
    }
    if(m_Advertiser_idIsSet)
    {
        val[utility::conversions::to_string_t(U("advertiser_id"))] = ModelBase::toJson(m_Advertiser_id);
    }
    if(m_Merchant_idIsSet)
    {
        val[utility::conversions::to_string_t(U("merchant_id"))] = ModelBase::toJson(m_Merchant_id);
    }
    if(m_Tag_idIsSet)
    {
        val[utility::conversions::to_string_t(U("tag_id"))] = ModelBase::toJson(m_Tag_id);
    }
    if(m_Feed_profile_idIsSet)
    {
        val[utility::conversions::to_string_t(U("feed_profile_id"))] = ModelBase::toJson(m_Feed_profile_id);
    }
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t(U("message"))] = ModelBase::toJson(m_Message);
    }
    if(m_App_version_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("app_version_number"))] = ModelBase::toJson(m_App_version_number);
    }
    if(m_Platform_version_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("platform_version_number"))] = ModelBase::toJson(m_Platform_version_number);
    }
    if(m_ErrorIsSet)
    {
        val[utility::conversions::to_string_t(U("error"))] = ModelBase::toJson(m_Error);
    }
    if(m_RequestIsSet)
    {
        val[utility::conversions::to_string_t(U("request"))] = ModelBase::toJson(m_Request);
    }

    return val;
}

bool IntegrationLog::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("client_timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("client_timestamp")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setClientTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClientTimestamp);
            setClientTimestamp(refVal_setClientTimestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("event_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("event_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEventType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEventType);
            setEventType(refVal_setEventType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("log_level"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("log_level")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLogLevel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLogLevel);
            setLogLevel(refVal_setLogLevel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("external_business_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("external_business_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExternalBusinessId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExternalBusinessId);
            setExternalBusinessId(refVal_setExternalBusinessId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("advertiser_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("advertiser_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAdvertiserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdvertiserId);
            setAdvertiserId(refVal_setAdvertiserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("merchant_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("merchant_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMerchantId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMerchantId);
            setMerchantId(refVal_setMerchantId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tag_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tag_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTagId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTagId);
            setTagId(refVal_setTagId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("feed_profile_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("feed_profile_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFeedProfileId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFeedProfileId);
            setFeedProfileId(refVal_setFeedProfileId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("message"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("message")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessage);
            setMessage(refVal_setMessage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("app_version_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("app_version_number")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAppVersionNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAppVersionNumber);
            setAppVersionNumber(refVal_setAppVersionNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("platform_version_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("platform_version_number")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPlatformVersionNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlatformVersionNumber);
            setPlatformVersionNumber(refVal_setPlatformVersionNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("error"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("error")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<IntegrationLogClientError> refVal_setError;
            ok &= ModelBase::fromJson(fieldValue, refVal_setError);
            setError(refVal_setError);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("request"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("request")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<IntegrationLogClientRequest> refVal_setRequest;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRequest);
            setRequest(refVal_setRequest);
        }
    }
    return ok;
}

void IntegrationLog::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Client_timestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("client_timestamp")), m_Client_timestamp));
    }
    if(m_Event_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("event_type")), m_Event_type));
    }
    if(m_Log_levelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("log_level")), m_Log_level));
    }
    if(m_External_business_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("external_business_id")), m_External_business_id));
    }
    if(m_Advertiser_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("advertiser_id")), m_Advertiser_id));
    }
    if(m_Merchant_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("merchant_id")), m_Merchant_id));
    }
    if(m_Tag_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tag_id")), m_Tag_id));
    }
    if(m_Feed_profile_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("feed_profile_id")), m_Feed_profile_id));
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("message")), m_Message));
    }
    if(m_App_version_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("app_version_number")), m_App_version_number));
    }
    if(m_Platform_version_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("platform_version_number")), m_Platform_version_number));
    }
    if(m_ErrorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("error")), m_Error));
    }
    if(m_RequestIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("request")), m_Request));
    }
}

bool IntegrationLog::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("client_timestamp"))))
    {
        int32_t refVal_setClientTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("client_timestamp"))), refVal_setClientTimestamp );
        setClientTimestamp(refVal_setClientTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("event_type"))))
    {
        utility::string_t refVal_setEventType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("event_type"))), refVal_setEventType );
        setEventType(refVal_setEventType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("log_level"))))
    {
        utility::string_t refVal_setLogLevel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("log_level"))), refVal_setLogLevel );
        setLogLevel(refVal_setLogLevel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("external_business_id"))))
    {
        utility::string_t refVal_setExternalBusinessId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("external_business_id"))), refVal_setExternalBusinessId );
        setExternalBusinessId(refVal_setExternalBusinessId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("advertiser_id"))))
    {
        utility::string_t refVal_setAdvertiserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("advertiser_id"))), refVal_setAdvertiserId );
        setAdvertiserId(refVal_setAdvertiserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("merchant_id"))))
    {
        utility::string_t refVal_setMerchantId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("merchant_id"))), refVal_setMerchantId );
        setMerchantId(refVal_setMerchantId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tag_id"))))
    {
        utility::string_t refVal_setTagId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tag_id"))), refVal_setTagId );
        setTagId(refVal_setTagId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("feed_profile_id"))))
    {
        utility::string_t refVal_setFeedProfileId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("feed_profile_id"))), refVal_setFeedProfileId );
        setFeedProfileId(refVal_setFeedProfileId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("message"))))
    {
        utility::string_t refVal_setMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("message"))), refVal_setMessage );
        setMessage(refVal_setMessage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("app_version_number"))))
    {
        utility::string_t refVal_setAppVersionNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("app_version_number"))), refVal_setAppVersionNumber );
        setAppVersionNumber(refVal_setAppVersionNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("platform_version_number"))))
    {
        utility::string_t refVal_setPlatformVersionNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("platform_version_number"))), refVal_setPlatformVersionNumber );
        setPlatformVersionNumber(refVal_setPlatformVersionNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("error"))))
    {
        std::shared_ptr<IntegrationLogClientError> refVal_setError;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("error"))), refVal_setError );
        setError(refVal_setError);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("request"))))
    {
        std::shared_ptr<IntegrationLogClientRequest> refVal_setRequest;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("request"))), refVal_setRequest );
        setRequest(refVal_setRequest);
    }
    return ok;
}

int32_t IntegrationLog::getClientTimestamp() const
{
    return m_Client_timestamp;
}

void IntegrationLog::setClientTimestamp(int32_t value)
{
    m_Client_timestamp = value;
    m_Client_timestampIsSet = true;
}

bool IntegrationLog::clientTimestampIsSet() const
{
    return m_Client_timestampIsSet;
}

void IntegrationLog::unsetClient_timestamp()
{
    m_Client_timestampIsSet = false;
}
utility::string_t IntegrationLog::getEventType() const
{
    return m_Event_type;
}

void IntegrationLog::setEventType(const utility::string_t& value)
{
    m_Event_type = value;
    m_Event_typeIsSet = true;
}

bool IntegrationLog::eventTypeIsSet() const
{
    return m_Event_typeIsSet;
}

void IntegrationLog::unsetEvent_type()
{
    m_Event_typeIsSet = false;
}
utility::string_t IntegrationLog::getLogLevel() const
{
    return m_Log_level;
}

void IntegrationLog::setLogLevel(const utility::string_t& value)
{
    m_Log_level = value;
    m_Log_levelIsSet = true;
}

bool IntegrationLog::logLevelIsSet() const
{
    return m_Log_levelIsSet;
}

void IntegrationLog::unsetLog_level()
{
    m_Log_levelIsSet = false;
}
utility::string_t IntegrationLog::getExternalBusinessId() const
{
    return m_External_business_id;
}

void IntegrationLog::setExternalBusinessId(const utility::string_t& value)
{
    m_External_business_id = value;
    m_External_business_idIsSet = true;
}

bool IntegrationLog::externalBusinessIdIsSet() const
{
    return m_External_business_idIsSet;
}

void IntegrationLog::unsetExternal_business_id()
{
    m_External_business_idIsSet = false;
}
utility::string_t IntegrationLog::getAdvertiserId() const
{
    return m_Advertiser_id;
}

void IntegrationLog::setAdvertiserId(const utility::string_t& value)
{
    m_Advertiser_id = value;
    m_Advertiser_idIsSet = true;
}

bool IntegrationLog::advertiserIdIsSet() const
{
    return m_Advertiser_idIsSet;
}

void IntegrationLog::unsetAdvertiser_id()
{
    m_Advertiser_idIsSet = false;
}
utility::string_t IntegrationLog::getMerchantId() const
{
    return m_Merchant_id;
}

void IntegrationLog::setMerchantId(const utility::string_t& value)
{
    m_Merchant_id = value;
    m_Merchant_idIsSet = true;
}

bool IntegrationLog::merchantIdIsSet() const
{
    return m_Merchant_idIsSet;
}

void IntegrationLog::unsetMerchant_id()
{
    m_Merchant_idIsSet = false;
}
utility::string_t IntegrationLog::getTagId() const
{
    return m_Tag_id;
}

void IntegrationLog::setTagId(const utility::string_t& value)
{
    m_Tag_id = value;
    m_Tag_idIsSet = true;
}

bool IntegrationLog::tagIdIsSet() const
{
    return m_Tag_idIsSet;
}

void IntegrationLog::unsetTag_id()
{
    m_Tag_idIsSet = false;
}
utility::string_t IntegrationLog::getFeedProfileId() const
{
    return m_Feed_profile_id;
}

void IntegrationLog::setFeedProfileId(const utility::string_t& value)
{
    m_Feed_profile_id = value;
    m_Feed_profile_idIsSet = true;
}

bool IntegrationLog::feedProfileIdIsSet() const
{
    return m_Feed_profile_idIsSet;
}

void IntegrationLog::unsetFeed_profile_id()
{
    m_Feed_profile_idIsSet = false;
}
utility::string_t IntegrationLog::getMessage() const
{
    return m_Message;
}

void IntegrationLog::setMessage(const utility::string_t& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}

bool IntegrationLog::messageIsSet() const
{
    return m_MessageIsSet;
}

void IntegrationLog::unsetMessage()
{
    m_MessageIsSet = false;
}
utility::string_t IntegrationLog::getAppVersionNumber() const
{
    return m_App_version_number;
}

void IntegrationLog::setAppVersionNumber(const utility::string_t& value)
{
    m_App_version_number = value;
    m_App_version_numberIsSet = true;
}

bool IntegrationLog::appVersionNumberIsSet() const
{
    return m_App_version_numberIsSet;
}

void IntegrationLog::unsetApp_version_number()
{
    m_App_version_numberIsSet = false;
}
utility::string_t IntegrationLog::getPlatformVersionNumber() const
{
    return m_Platform_version_number;
}

void IntegrationLog::setPlatformVersionNumber(const utility::string_t& value)
{
    m_Platform_version_number = value;
    m_Platform_version_numberIsSet = true;
}

bool IntegrationLog::platformVersionNumberIsSet() const
{
    return m_Platform_version_numberIsSet;
}

void IntegrationLog::unsetPlatform_version_number()
{
    m_Platform_version_numberIsSet = false;
}
std::shared_ptr<IntegrationLogClientError> IntegrationLog::getError() const
{
    return m_Error;
}

void IntegrationLog::setError(const std::shared_ptr<IntegrationLogClientError>& value)
{
    m_Error = value;
    m_ErrorIsSet = true;
}

bool IntegrationLog::errorIsSet() const
{
    return m_ErrorIsSet;
}

void IntegrationLog::unsetError()
{
    m_ErrorIsSet = false;
}
std::shared_ptr<IntegrationLogClientRequest> IntegrationLog::getRequest() const
{
    return m_Request;
}

void IntegrationLog::setRequest(const std::shared_ptr<IntegrationLogClientRequest>& value)
{
    m_Request = value;
    m_RequestIsSet = true;
}

bool IntegrationLog::requestIsSet() const
{
    return m_RequestIsSet;
}

void IntegrationLog::unsetRequest()
{
    m_RequestIsSet = false;
}
}
}
}
}


