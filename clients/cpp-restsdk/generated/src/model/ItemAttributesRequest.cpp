/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ItemAttributesRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ItemAttributesRequest::ItemAttributesRequest()
{
    m_Ad_link = utility::conversions::to_string_t("");
    m_Ad_linkIsSet = false;
    m_Adult = false;
    m_AdultIsSet = false;
    m_Age_group = utility::conversions::to_string_t("");
    m_Age_groupIsSet = false;
    m_Availability = utility::conversions::to_string_t("");
    m_AvailabilityIsSet = false;
    m_Average_review_rating = 0.0;
    m_Average_review_ratingIsSet = false;
    m_Brand = utility::conversions::to_string_t("");
    m_BrandIsSet = false;
    m_Checkout_enabled = false;
    m_Checkout_enabledIsSet = false;
    m_Color = utility::conversions::to_string_t("");
    m_ColorIsSet = false;
    m_Condition = utility::conversions::to_string_t("");
    m_ConditionIsSet = false;
    m_Custom_label_0 = utility::conversions::to_string_t("");
    m_Custom_label_0IsSet = false;
    m_Custom_label_1 = utility::conversions::to_string_t("");
    m_Custom_label_1IsSet = false;
    m_Custom_label_2 = utility::conversions::to_string_t("");
    m_Custom_label_2IsSet = false;
    m_Custom_label_3 = utility::conversions::to_string_t("");
    m_Custom_label_3IsSet = false;
    m_Custom_label_4 = utility::conversions::to_string_t("");
    m_Custom_label_4IsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Free_shipping_label = false;
    m_Free_shipping_labelIsSet = false;
    m_Free_shipping_limit = utility::conversions::to_string_t("");
    m_Free_shipping_limitIsSet = false;
    m_Gender = utility::conversions::to_string_t("");
    m_GenderIsSet = false;
    m_Google_product_category = utility::conversions::to_string_t("");
    m_Google_product_categoryIsSet = false;
    m_Gtin = 0;
    m_GtinIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Item_group_id = utility::conversions::to_string_t("");
    m_Item_group_idIsSet = false;
    m_Last_updated_time = 0L;
    m_Last_updated_timeIsSet = false;
    m_Link = utility::conversions::to_string_t("");
    m_LinkIsSet = false;
    m_Material = utility::conversions::to_string_t("");
    m_MaterialIsSet = false;
    m_Min_ad_price = utility::conversions::to_string_t("");
    m_Min_ad_priceIsSet = false;
    m_Mobile_link = utility::conversions::to_string_t("");
    m_Mobile_linkIsSet = false;
    m_Mpn = utility::conversions::to_string_t("");
    m_MpnIsSet = false;
    m_Number_of_ratings = 0;
    m_Number_of_ratingsIsSet = false;
    m_Number_of_reviews = 0;
    m_Number_of_reviewsIsSet = false;
    m_Pattern = utility::conversions::to_string_t("");
    m_PatternIsSet = false;
    m_Price = utility::conversions::to_string_t("");
    m_PriceIsSet = false;
    m_Product_type = utility::conversions::to_string_t("");
    m_Product_typeIsSet = false;
    m_Sale_price = utility::conversions::to_string_t("");
    m_Sale_priceIsSet = false;
    m_Shipping = utility::conversions::to_string_t("");
    m_ShippingIsSet = false;
    m_Shipping_height = utility::conversions::to_string_t("");
    m_Shipping_heightIsSet = false;
    m_Shipping_weight = utility::conversions::to_string_t("");
    m_Shipping_weightIsSet = false;
    m_Shipping_width = utility::conversions::to_string_t("");
    m_Shipping_widthIsSet = false;
    m_Size = utility::conversions::to_string_t("");
    m_SizeIsSet = false;
    m_Size_system = utility::conversions::to_string_t("");
    m_Size_systemIsSet = false;
    m_Size_type = utility::conversions::to_string_t("");
    m_Size_typeIsSet = false;
    m_Tax = utility::conversions::to_string_t("");
    m_TaxIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_Variant_namesIsSet = false;
    m_Variant_valuesIsSet = false;
    m_Additional_image_linkIsSet = false;
    m_Image_linkIsSet = false;
    m_Video_link = utility::conversions::to_string_t("");
    m_Video_linkIsSet = false;
}

ItemAttributesRequest::~ItemAttributesRequest()
{
}

void ItemAttributesRequest::validate()
{
    // TODO: implement validation
}

web::json::value ItemAttributesRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Ad_linkIsSet)
    {
        val[utility::conversions::to_string_t(U("ad_link"))] = ModelBase::toJson(m_Ad_link);
    }
    if(m_AdultIsSet)
    {
        val[utility::conversions::to_string_t(U("adult"))] = ModelBase::toJson(m_Adult);
    }
    if(m_Age_groupIsSet)
    {
        val[utility::conversions::to_string_t(U("age_group"))] = ModelBase::toJson(m_Age_group);
    }
    if(m_AvailabilityIsSet)
    {
        val[utility::conversions::to_string_t(U("availability"))] = ModelBase::toJson(m_Availability);
    }
    if(m_Average_review_ratingIsSet)
    {
        val[utility::conversions::to_string_t(U("average_review_rating"))] = ModelBase::toJson(m_Average_review_rating);
    }
    if(m_BrandIsSet)
    {
        val[utility::conversions::to_string_t(U("brand"))] = ModelBase::toJson(m_Brand);
    }
    if(m_Checkout_enabledIsSet)
    {
        val[utility::conversions::to_string_t(U("checkout_enabled"))] = ModelBase::toJson(m_Checkout_enabled);
    }
    if(m_ColorIsSet)
    {
        val[utility::conversions::to_string_t(U("color"))] = ModelBase::toJson(m_Color);
    }
    if(m_ConditionIsSet)
    {
        val[utility::conversions::to_string_t(U("condition"))] = ModelBase::toJson(m_Condition);
    }
    if(m_Custom_label_0IsSet)
    {
        val[utility::conversions::to_string_t(U("custom_label_0"))] = ModelBase::toJson(m_Custom_label_0);
    }
    if(m_Custom_label_1IsSet)
    {
        val[utility::conversions::to_string_t(U("custom_label_1"))] = ModelBase::toJson(m_Custom_label_1);
    }
    if(m_Custom_label_2IsSet)
    {
        val[utility::conversions::to_string_t(U("custom_label_2"))] = ModelBase::toJson(m_Custom_label_2);
    }
    if(m_Custom_label_3IsSet)
    {
        val[utility::conversions::to_string_t(U("custom_label_3"))] = ModelBase::toJson(m_Custom_label_3);
    }
    if(m_Custom_label_4IsSet)
    {
        val[utility::conversions::to_string_t(U("custom_label_4"))] = ModelBase::toJson(m_Custom_label_4);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_Free_shipping_labelIsSet)
    {
        val[utility::conversions::to_string_t(U("free_shipping_label"))] = ModelBase::toJson(m_Free_shipping_label);
    }
    if(m_Free_shipping_limitIsSet)
    {
        val[utility::conversions::to_string_t(U("free_shipping_limit"))] = ModelBase::toJson(m_Free_shipping_limit);
    }
    if(m_GenderIsSet)
    {
        val[utility::conversions::to_string_t(U("gender"))] = ModelBase::toJson(m_Gender);
    }
    if(m_Google_product_categoryIsSet)
    {
        val[utility::conversions::to_string_t(U("google_product_category"))] = ModelBase::toJson(m_Google_product_category);
    }
    if(m_GtinIsSet)
    {
        val[utility::conversions::to_string_t(U("gtin"))] = ModelBase::toJson(m_Gtin);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Item_group_idIsSet)
    {
        val[utility::conversions::to_string_t(U("item_group_id"))] = ModelBase::toJson(m_Item_group_id);
    }
    if(m_Last_updated_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("last_updated_time"))] = ModelBase::toJson(m_Last_updated_time);
    }
    if(m_LinkIsSet)
    {
        val[utility::conversions::to_string_t(U("link"))] = ModelBase::toJson(m_Link);
    }
    if(m_MaterialIsSet)
    {
        val[utility::conversions::to_string_t(U("material"))] = ModelBase::toJson(m_Material);
    }
    if(m_Min_ad_priceIsSet)
    {
        val[utility::conversions::to_string_t(U("min_ad_price"))] = ModelBase::toJson(m_Min_ad_price);
    }
    if(m_Mobile_linkIsSet)
    {
        val[utility::conversions::to_string_t(U("mobile_link"))] = ModelBase::toJson(m_Mobile_link);
    }
    if(m_MpnIsSet)
    {
        val[utility::conversions::to_string_t(U("mpn"))] = ModelBase::toJson(m_Mpn);
    }
    if(m_Number_of_ratingsIsSet)
    {
        val[utility::conversions::to_string_t(U("number_of_ratings"))] = ModelBase::toJson(m_Number_of_ratings);
    }
    if(m_Number_of_reviewsIsSet)
    {
        val[utility::conversions::to_string_t(U("number_of_reviews"))] = ModelBase::toJson(m_Number_of_reviews);
    }
    if(m_PatternIsSet)
    {
        val[utility::conversions::to_string_t(U("pattern"))] = ModelBase::toJson(m_Pattern);
    }
    if(m_PriceIsSet)
    {
        val[utility::conversions::to_string_t(U("price"))] = ModelBase::toJson(m_Price);
    }
    if(m_Product_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("product_type"))] = ModelBase::toJson(m_Product_type);
    }
    if(m_Sale_priceIsSet)
    {
        val[utility::conversions::to_string_t(U("sale_price"))] = ModelBase::toJson(m_Sale_price);
    }
    if(m_ShippingIsSet)
    {
        val[utility::conversions::to_string_t(U("shipping"))] = ModelBase::toJson(m_Shipping);
    }
    if(m_Shipping_heightIsSet)
    {
        val[utility::conversions::to_string_t(U("shipping_height"))] = ModelBase::toJson(m_Shipping_height);
    }
    if(m_Shipping_weightIsSet)
    {
        val[utility::conversions::to_string_t(U("shipping_weight"))] = ModelBase::toJson(m_Shipping_weight);
    }
    if(m_Shipping_widthIsSet)
    {
        val[utility::conversions::to_string_t(U("shipping_width"))] = ModelBase::toJson(m_Shipping_width);
    }
    if(m_SizeIsSet)
    {
        val[utility::conversions::to_string_t(U("size"))] = ModelBase::toJson(m_Size);
    }
    if(m_Size_systemIsSet)
    {
        val[utility::conversions::to_string_t(U("size_system"))] = ModelBase::toJson(m_Size_system);
    }
    if(m_Size_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("size_type"))] = ModelBase::toJson(m_Size_type);
    }
    if(m_TaxIsSet)
    {
        val[utility::conversions::to_string_t(U("tax"))] = ModelBase::toJson(m_Tax);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t(U("title"))] = ModelBase::toJson(m_Title);
    }
    if(m_Variant_namesIsSet)
    {
        val[utility::conversions::to_string_t(U("variant_names"))] = ModelBase::toJson(m_Variant_names);
    }
    if(m_Variant_valuesIsSet)
    {
        val[utility::conversions::to_string_t(U("variant_values"))] = ModelBase::toJson(m_Variant_values);
    }
    if(m_Additional_image_linkIsSet)
    {
        val[utility::conversions::to_string_t(U("additional_image_link"))] = ModelBase::toJson(m_Additional_image_link);
    }
    if(m_Image_linkIsSet)
    {
        val[utility::conversions::to_string_t(U("image_link"))] = ModelBase::toJson(m_Image_link);
    }
    if(m_Video_linkIsSet)
    {
        val[utility::conversions::to_string_t(U("video_link"))] = ModelBase::toJson(m_Video_link);
    }

    return val;
}

bool ItemAttributesRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("ad_link"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ad_link")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAdLink;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdLink);
            setAdLink(refVal_setAdLink);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("adult"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("adult")));
        if(!fieldValue.is_null())
        {
            bool refVal_setAdult;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdult);
            setAdult(refVal_setAdult);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("age_group"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("age_group")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAgeGroup;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAgeGroup);
            setAgeGroup(refVal_setAgeGroup);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("availability"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("availability")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAvailability;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAvailability);
            setAvailability(refVal_setAvailability);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("average_review_rating"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("average_review_rating")));
        if(!fieldValue.is_null())
        {
            double refVal_setAverageReviewRating;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAverageReviewRating);
            setAverageReviewRating(refVal_setAverageReviewRating);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("brand"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("brand")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBrand;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBrand);
            setBrand(refVal_setBrand);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("checkout_enabled"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("checkout_enabled")));
        if(!fieldValue.is_null())
        {
            bool refVal_setCheckoutEnabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCheckoutEnabled);
            setCheckoutEnabled(refVal_setCheckoutEnabled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("color"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("color")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setColor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setColor);
            setColor(refVal_setColor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("condition"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("condition")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCondition;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCondition);
            setCondition(refVal_setCondition);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("custom_label_0"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("custom_label_0")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCustomLabel0;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomLabel0);
            setCustomLabel0(refVal_setCustomLabel0);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("custom_label_1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("custom_label_1")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCustomLabel1;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomLabel1);
            setCustomLabel1(refVal_setCustomLabel1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("custom_label_2"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("custom_label_2")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCustomLabel2;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomLabel2);
            setCustomLabel2(refVal_setCustomLabel2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("custom_label_3"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("custom_label_3")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCustomLabel3;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomLabel3);
            setCustomLabel3(refVal_setCustomLabel3);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("custom_label_4"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("custom_label_4")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCustomLabel4;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomLabel4);
            setCustomLabel4(refVal_setCustomLabel4);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("free_shipping_label"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("free_shipping_label")));
        if(!fieldValue.is_null())
        {
            bool refVal_setFreeShippingLabel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFreeShippingLabel);
            setFreeShippingLabel(refVal_setFreeShippingLabel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("free_shipping_limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("free_shipping_limit")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFreeShippingLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFreeShippingLimit);
            setFreeShippingLimit(refVal_setFreeShippingLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gender"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gender")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGender;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGender);
            setGender(refVal_setGender);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("google_product_category"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("google_product_category")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGoogleProductCategory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGoogleProductCategory);
            setGoogleProductCategory(refVal_setGoogleProductCategory);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gtin"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gtin")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setGtin;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGtin);
            setGtin(refVal_setGtin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("item_group_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("item_group_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setItemGroupId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setItemGroupId);
            setItemGroupId(refVal_setItemGroupId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("last_updated_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("last_updated_time")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setLastUpdatedTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastUpdatedTime);
            setLastUpdatedTime(refVal_setLastUpdatedTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("link"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("link")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLink;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLink);
            setLink(refVal_setLink);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("material"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("material")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMaterial;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaterial);
            setMaterial(refVal_setMaterial);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("min_ad_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("min_ad_price")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMinAdPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMinAdPrice);
            setMinAdPrice(refVal_setMinAdPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mobile_link"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mobile_link")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMobileLink;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMobileLink);
            setMobileLink(refVal_setMobileLink);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mpn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mpn")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMpn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMpn);
            setMpn(refVal_setMpn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("number_of_ratings"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("number_of_ratings")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setNumberOfRatings;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNumberOfRatings);
            setNumberOfRatings(refVal_setNumberOfRatings);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("number_of_reviews"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("number_of_reviews")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setNumberOfReviews;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNumberOfReviews);
            setNumberOfReviews(refVal_setNumberOfReviews);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pattern"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pattern")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPattern;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPattern);
            setPattern(refVal_setPattern);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("price")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrice);
            setPrice(refVal_setPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("product_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProductType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProductType);
            setProductType(refVal_setProductType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sale_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sale_price")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSalePrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSalePrice);
            setSalePrice(refVal_setSalePrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shipping"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shipping")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setShipping;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShipping);
            setShipping(refVal_setShipping);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shipping_height"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shipping_height")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setShippingHeight;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShippingHeight);
            setShippingHeight(refVal_setShippingHeight);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shipping_weight"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shipping_weight")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setShippingWeight;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShippingWeight);
            setShippingWeight(refVal_setShippingWeight);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shipping_width"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shipping_width")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setShippingWidth;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShippingWidth);
            setShippingWidth(refVal_setShippingWidth);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("size")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSize);
            setSize(refVal_setSize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("size_system"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("size_system")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSizeSystem;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSizeSystem);
            setSizeSystem(refVal_setSizeSystem);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("size_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("size_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSizeType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSizeType);
            setSizeType(refVal_setSizeType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tax"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tax")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTax;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTax);
            setTax(refVal_setTax);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("title"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("title")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTitle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTitle);
            setTitle(refVal_setTitle);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("variant_names"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("variant_names")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setVariantNames;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVariantNames);
            setVariantNames(refVal_setVariantNames);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("variant_values"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("variant_values")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setVariantValues;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVariantValues);
            setVariantValues(refVal_setVariantValues);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("additional_image_link"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("additional_image_link")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setAdditionalImageLink;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdditionalImageLink);
            setAdditionalImageLink(refVal_setAdditionalImageLink);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("image_link"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("image_link")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ItemAttributesRequest_allOf_image_link> refVal_setImageLink;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImageLink);
            setImageLink(refVal_setImageLink);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("video_link"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("video_link")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVideoLink;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVideoLink);
            setVideoLink(refVal_setVideoLink);
        }
    }
    return ok;
}

void ItemAttributesRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Ad_linkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ad_link")), m_Ad_link));
    }
    if(m_AdultIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("adult")), m_Adult));
    }
    if(m_Age_groupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("age_group")), m_Age_group));
    }
    if(m_AvailabilityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("availability")), m_Availability));
    }
    if(m_Average_review_ratingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("average_review_rating")), m_Average_review_rating));
    }
    if(m_BrandIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("brand")), m_Brand));
    }
    if(m_Checkout_enabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("checkout_enabled")), m_Checkout_enabled));
    }
    if(m_ColorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("color")), m_Color));
    }
    if(m_ConditionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("condition")), m_Condition));
    }
    if(m_Custom_label_0IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("custom_label_0")), m_Custom_label_0));
    }
    if(m_Custom_label_1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("custom_label_1")), m_Custom_label_1));
    }
    if(m_Custom_label_2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("custom_label_2")), m_Custom_label_2));
    }
    if(m_Custom_label_3IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("custom_label_3")), m_Custom_label_3));
    }
    if(m_Custom_label_4IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("custom_label_4")), m_Custom_label_4));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_Free_shipping_labelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("free_shipping_label")), m_Free_shipping_label));
    }
    if(m_Free_shipping_limitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("free_shipping_limit")), m_Free_shipping_limit));
    }
    if(m_GenderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gender")), m_Gender));
    }
    if(m_Google_product_categoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("google_product_category")), m_Google_product_category));
    }
    if(m_GtinIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gtin")), m_Gtin));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Item_group_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("item_group_id")), m_Item_group_id));
    }
    if(m_Last_updated_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("last_updated_time")), m_Last_updated_time));
    }
    if(m_LinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("link")), m_Link));
    }
    if(m_MaterialIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("material")), m_Material));
    }
    if(m_Min_ad_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("min_ad_price")), m_Min_ad_price));
    }
    if(m_Mobile_linkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mobile_link")), m_Mobile_link));
    }
    if(m_MpnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mpn")), m_Mpn));
    }
    if(m_Number_of_ratingsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("number_of_ratings")), m_Number_of_ratings));
    }
    if(m_Number_of_reviewsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("number_of_reviews")), m_Number_of_reviews));
    }
    if(m_PatternIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pattern")), m_Pattern));
    }
    if(m_PriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("price")), m_Price));
    }
    if(m_Product_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product_type")), m_Product_type));
    }
    if(m_Sale_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sale_price")), m_Sale_price));
    }
    if(m_ShippingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shipping")), m_Shipping));
    }
    if(m_Shipping_heightIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shipping_height")), m_Shipping_height));
    }
    if(m_Shipping_weightIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shipping_weight")), m_Shipping_weight));
    }
    if(m_Shipping_widthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shipping_width")), m_Shipping_width));
    }
    if(m_SizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("size")), m_Size));
    }
    if(m_Size_systemIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("size_system")), m_Size_system));
    }
    if(m_Size_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("size_type")), m_Size_type));
    }
    if(m_TaxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tax")), m_Tax));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("title")), m_Title));
    }
    if(m_Variant_namesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("variant_names")), m_Variant_names));
    }
    if(m_Variant_valuesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("variant_values")), m_Variant_values));
    }
    if(m_Additional_image_linkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("additional_image_link")), m_Additional_image_link));
    }
    if(m_Image_linkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("image_link")), m_Image_link));
    }
    if(m_Video_linkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("video_link")), m_Video_link));
    }
}

bool ItemAttributesRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("ad_link"))))
    {
        utility::string_t refVal_setAdLink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ad_link"))), refVal_setAdLink );
        setAdLink(refVal_setAdLink);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("adult"))))
    {
        bool refVal_setAdult;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("adult"))), refVal_setAdult );
        setAdult(refVal_setAdult);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("age_group"))))
    {
        utility::string_t refVal_setAgeGroup;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("age_group"))), refVal_setAgeGroup );
        setAgeGroup(refVal_setAgeGroup);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("availability"))))
    {
        utility::string_t refVal_setAvailability;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("availability"))), refVal_setAvailability );
        setAvailability(refVal_setAvailability);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("average_review_rating"))))
    {
        double refVal_setAverageReviewRating;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("average_review_rating"))), refVal_setAverageReviewRating );
        setAverageReviewRating(refVal_setAverageReviewRating);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("brand"))))
    {
        utility::string_t refVal_setBrand;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("brand"))), refVal_setBrand );
        setBrand(refVal_setBrand);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("checkout_enabled"))))
    {
        bool refVal_setCheckoutEnabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("checkout_enabled"))), refVal_setCheckoutEnabled );
        setCheckoutEnabled(refVal_setCheckoutEnabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("color"))))
    {
        utility::string_t refVal_setColor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("color"))), refVal_setColor );
        setColor(refVal_setColor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("condition"))))
    {
        utility::string_t refVal_setCondition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("condition"))), refVal_setCondition );
        setCondition(refVal_setCondition);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("custom_label_0"))))
    {
        utility::string_t refVal_setCustomLabel0;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("custom_label_0"))), refVal_setCustomLabel0 );
        setCustomLabel0(refVal_setCustomLabel0);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("custom_label_1"))))
    {
        utility::string_t refVal_setCustomLabel1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("custom_label_1"))), refVal_setCustomLabel1 );
        setCustomLabel1(refVal_setCustomLabel1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("custom_label_2"))))
    {
        utility::string_t refVal_setCustomLabel2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("custom_label_2"))), refVal_setCustomLabel2 );
        setCustomLabel2(refVal_setCustomLabel2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("custom_label_3"))))
    {
        utility::string_t refVal_setCustomLabel3;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("custom_label_3"))), refVal_setCustomLabel3 );
        setCustomLabel3(refVal_setCustomLabel3);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("custom_label_4"))))
    {
        utility::string_t refVal_setCustomLabel4;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("custom_label_4"))), refVal_setCustomLabel4 );
        setCustomLabel4(refVal_setCustomLabel4);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("free_shipping_label"))))
    {
        bool refVal_setFreeShippingLabel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("free_shipping_label"))), refVal_setFreeShippingLabel );
        setFreeShippingLabel(refVal_setFreeShippingLabel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("free_shipping_limit"))))
    {
        utility::string_t refVal_setFreeShippingLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("free_shipping_limit"))), refVal_setFreeShippingLimit );
        setFreeShippingLimit(refVal_setFreeShippingLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gender"))))
    {
        utility::string_t refVal_setGender;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gender"))), refVal_setGender );
        setGender(refVal_setGender);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("google_product_category"))))
    {
        utility::string_t refVal_setGoogleProductCategory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("google_product_category"))), refVal_setGoogleProductCategory );
        setGoogleProductCategory(refVal_setGoogleProductCategory);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gtin"))))
    {
        int32_t refVal_setGtin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gtin"))), refVal_setGtin );
        setGtin(refVal_setGtin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("item_group_id"))))
    {
        utility::string_t refVal_setItemGroupId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("item_group_id"))), refVal_setItemGroupId );
        setItemGroupId(refVal_setItemGroupId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("last_updated_time"))))
    {
        int64_t refVal_setLastUpdatedTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("last_updated_time"))), refVal_setLastUpdatedTime );
        setLastUpdatedTime(refVal_setLastUpdatedTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("link"))))
    {
        utility::string_t refVal_setLink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("link"))), refVal_setLink );
        setLink(refVal_setLink);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("material"))))
    {
        utility::string_t refVal_setMaterial;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("material"))), refVal_setMaterial );
        setMaterial(refVal_setMaterial);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("min_ad_price"))))
    {
        utility::string_t refVal_setMinAdPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("min_ad_price"))), refVal_setMinAdPrice );
        setMinAdPrice(refVal_setMinAdPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mobile_link"))))
    {
        utility::string_t refVal_setMobileLink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mobile_link"))), refVal_setMobileLink );
        setMobileLink(refVal_setMobileLink);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mpn"))))
    {
        utility::string_t refVal_setMpn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mpn"))), refVal_setMpn );
        setMpn(refVal_setMpn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("number_of_ratings"))))
    {
        int32_t refVal_setNumberOfRatings;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("number_of_ratings"))), refVal_setNumberOfRatings );
        setNumberOfRatings(refVal_setNumberOfRatings);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("number_of_reviews"))))
    {
        int32_t refVal_setNumberOfReviews;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("number_of_reviews"))), refVal_setNumberOfReviews );
        setNumberOfReviews(refVal_setNumberOfReviews);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pattern"))))
    {
        utility::string_t refVal_setPattern;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pattern"))), refVal_setPattern );
        setPattern(refVal_setPattern);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("price"))))
    {
        utility::string_t refVal_setPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("price"))), refVal_setPrice );
        setPrice(refVal_setPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("product_type"))))
    {
        utility::string_t refVal_setProductType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product_type"))), refVal_setProductType );
        setProductType(refVal_setProductType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sale_price"))))
    {
        utility::string_t refVal_setSalePrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sale_price"))), refVal_setSalePrice );
        setSalePrice(refVal_setSalePrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shipping"))))
    {
        utility::string_t refVal_setShipping;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shipping"))), refVal_setShipping );
        setShipping(refVal_setShipping);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shipping_height"))))
    {
        utility::string_t refVal_setShippingHeight;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shipping_height"))), refVal_setShippingHeight );
        setShippingHeight(refVal_setShippingHeight);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shipping_weight"))))
    {
        utility::string_t refVal_setShippingWeight;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shipping_weight"))), refVal_setShippingWeight );
        setShippingWeight(refVal_setShippingWeight);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shipping_width"))))
    {
        utility::string_t refVal_setShippingWidth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shipping_width"))), refVal_setShippingWidth );
        setShippingWidth(refVal_setShippingWidth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("size"))))
    {
        utility::string_t refVal_setSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("size"))), refVal_setSize );
        setSize(refVal_setSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("size_system"))))
    {
        utility::string_t refVal_setSizeSystem;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("size_system"))), refVal_setSizeSystem );
        setSizeSystem(refVal_setSizeSystem);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("size_type"))))
    {
        utility::string_t refVal_setSizeType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("size_type"))), refVal_setSizeType );
        setSizeType(refVal_setSizeType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tax"))))
    {
        utility::string_t refVal_setTax;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tax"))), refVal_setTax );
        setTax(refVal_setTax);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("title"))))
    {
        utility::string_t refVal_setTitle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("title"))), refVal_setTitle );
        setTitle(refVal_setTitle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("variant_names"))))
    {
        std::vector<utility::string_t> refVal_setVariantNames;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("variant_names"))), refVal_setVariantNames );
        setVariantNames(refVal_setVariantNames);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("variant_values"))))
    {
        std::vector<utility::string_t> refVal_setVariantValues;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("variant_values"))), refVal_setVariantValues );
        setVariantValues(refVal_setVariantValues);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("additional_image_link"))))
    {
        std::vector<utility::string_t> refVal_setAdditionalImageLink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("additional_image_link"))), refVal_setAdditionalImageLink );
        setAdditionalImageLink(refVal_setAdditionalImageLink);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("image_link"))))
    {
        std::shared_ptr<ItemAttributesRequest_allOf_image_link> refVal_setImageLink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("image_link"))), refVal_setImageLink );
        setImageLink(refVal_setImageLink);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("video_link"))))
    {
        utility::string_t refVal_setVideoLink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("video_link"))), refVal_setVideoLink );
        setVideoLink(refVal_setVideoLink);
    }
    return ok;
}

utility::string_t ItemAttributesRequest::getAdLink() const
{
    return m_Ad_link;
}

void ItemAttributesRequest::setAdLink(const utility::string_t& value)
{
    m_Ad_link = value;
    m_Ad_linkIsSet = true;
}

bool ItemAttributesRequest::adLinkIsSet() const
{
    return m_Ad_linkIsSet;
}

void ItemAttributesRequest::unsetAd_link()
{
    m_Ad_linkIsSet = false;
}
bool ItemAttributesRequest::isAdult() const
{
    return m_Adult;
}

void ItemAttributesRequest::setAdult(bool value)
{
    m_Adult = value;
    m_AdultIsSet = true;
}

bool ItemAttributesRequest::adultIsSet() const
{
    return m_AdultIsSet;
}

void ItemAttributesRequest::unsetAdult()
{
    m_AdultIsSet = false;
}
utility::string_t ItemAttributesRequest::getAgeGroup() const
{
    return m_Age_group;
}

void ItemAttributesRequest::setAgeGroup(const utility::string_t& value)
{
    m_Age_group = value;
    m_Age_groupIsSet = true;
}

bool ItemAttributesRequest::ageGroupIsSet() const
{
    return m_Age_groupIsSet;
}

void ItemAttributesRequest::unsetAge_group()
{
    m_Age_groupIsSet = false;
}
utility::string_t ItemAttributesRequest::getAvailability() const
{
    return m_Availability;
}

void ItemAttributesRequest::setAvailability(const utility::string_t& value)
{
    m_Availability = value;
    m_AvailabilityIsSet = true;
}

bool ItemAttributesRequest::availabilityIsSet() const
{
    return m_AvailabilityIsSet;
}

void ItemAttributesRequest::unsetAvailability()
{
    m_AvailabilityIsSet = false;
}
double ItemAttributesRequest::getAverageReviewRating() const
{
    return m_Average_review_rating;
}

void ItemAttributesRequest::setAverageReviewRating(double value)
{
    m_Average_review_rating = value;
    m_Average_review_ratingIsSet = true;
}

bool ItemAttributesRequest::averageReviewRatingIsSet() const
{
    return m_Average_review_ratingIsSet;
}

void ItemAttributesRequest::unsetAverage_review_rating()
{
    m_Average_review_ratingIsSet = false;
}
utility::string_t ItemAttributesRequest::getBrand() const
{
    return m_Brand;
}

void ItemAttributesRequest::setBrand(const utility::string_t& value)
{
    m_Brand = value;
    m_BrandIsSet = true;
}

bool ItemAttributesRequest::brandIsSet() const
{
    return m_BrandIsSet;
}

void ItemAttributesRequest::unsetBrand()
{
    m_BrandIsSet = false;
}
bool ItemAttributesRequest::isCheckoutEnabled() const
{
    return m_Checkout_enabled;
}

void ItemAttributesRequest::setCheckoutEnabled(bool value)
{
    m_Checkout_enabled = value;
    m_Checkout_enabledIsSet = true;
}

bool ItemAttributesRequest::checkoutEnabledIsSet() const
{
    return m_Checkout_enabledIsSet;
}

void ItemAttributesRequest::unsetCheckout_enabled()
{
    m_Checkout_enabledIsSet = false;
}
utility::string_t ItemAttributesRequest::getColor() const
{
    return m_Color;
}

void ItemAttributesRequest::setColor(const utility::string_t& value)
{
    m_Color = value;
    m_ColorIsSet = true;
}

bool ItemAttributesRequest::colorIsSet() const
{
    return m_ColorIsSet;
}

void ItemAttributesRequest::unsetColor()
{
    m_ColorIsSet = false;
}
utility::string_t ItemAttributesRequest::getCondition() const
{
    return m_Condition;
}

void ItemAttributesRequest::setCondition(const utility::string_t& value)
{
    m_Condition = value;
    m_ConditionIsSet = true;
}

bool ItemAttributesRequest::conditionIsSet() const
{
    return m_ConditionIsSet;
}

void ItemAttributesRequest::unsetCondition()
{
    m_ConditionIsSet = false;
}
utility::string_t ItemAttributesRequest::getCustomLabel0() const
{
    return m_Custom_label_0;
}

void ItemAttributesRequest::setCustomLabel0(const utility::string_t& value)
{
    m_Custom_label_0 = value;
    m_Custom_label_0IsSet = true;
}

bool ItemAttributesRequest::customLabel0IsSet() const
{
    return m_Custom_label_0IsSet;
}

void ItemAttributesRequest::unsetCustom_label_0()
{
    m_Custom_label_0IsSet = false;
}
utility::string_t ItemAttributesRequest::getCustomLabel1() const
{
    return m_Custom_label_1;
}

void ItemAttributesRequest::setCustomLabel1(const utility::string_t& value)
{
    m_Custom_label_1 = value;
    m_Custom_label_1IsSet = true;
}

bool ItemAttributesRequest::customLabel1IsSet() const
{
    return m_Custom_label_1IsSet;
}

void ItemAttributesRequest::unsetCustom_label_1()
{
    m_Custom_label_1IsSet = false;
}
utility::string_t ItemAttributesRequest::getCustomLabel2() const
{
    return m_Custom_label_2;
}

void ItemAttributesRequest::setCustomLabel2(const utility::string_t& value)
{
    m_Custom_label_2 = value;
    m_Custom_label_2IsSet = true;
}

bool ItemAttributesRequest::customLabel2IsSet() const
{
    return m_Custom_label_2IsSet;
}

void ItemAttributesRequest::unsetCustom_label_2()
{
    m_Custom_label_2IsSet = false;
}
utility::string_t ItemAttributesRequest::getCustomLabel3() const
{
    return m_Custom_label_3;
}

void ItemAttributesRequest::setCustomLabel3(const utility::string_t& value)
{
    m_Custom_label_3 = value;
    m_Custom_label_3IsSet = true;
}

bool ItemAttributesRequest::customLabel3IsSet() const
{
    return m_Custom_label_3IsSet;
}

void ItemAttributesRequest::unsetCustom_label_3()
{
    m_Custom_label_3IsSet = false;
}
utility::string_t ItemAttributesRequest::getCustomLabel4() const
{
    return m_Custom_label_4;
}

void ItemAttributesRequest::setCustomLabel4(const utility::string_t& value)
{
    m_Custom_label_4 = value;
    m_Custom_label_4IsSet = true;
}

bool ItemAttributesRequest::customLabel4IsSet() const
{
    return m_Custom_label_4IsSet;
}

void ItemAttributesRequest::unsetCustom_label_4()
{
    m_Custom_label_4IsSet = false;
}
utility::string_t ItemAttributesRequest::getDescription() const
{
    return m_Description;
}

void ItemAttributesRequest::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool ItemAttributesRequest::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void ItemAttributesRequest::unsetDescription()
{
    m_DescriptionIsSet = false;
}
bool ItemAttributesRequest::isFreeShippingLabel() const
{
    return m_Free_shipping_label;
}

void ItemAttributesRequest::setFreeShippingLabel(bool value)
{
    m_Free_shipping_label = value;
    m_Free_shipping_labelIsSet = true;
}

bool ItemAttributesRequest::freeShippingLabelIsSet() const
{
    return m_Free_shipping_labelIsSet;
}

void ItemAttributesRequest::unsetFree_shipping_label()
{
    m_Free_shipping_labelIsSet = false;
}
utility::string_t ItemAttributesRequest::getFreeShippingLimit() const
{
    return m_Free_shipping_limit;
}

void ItemAttributesRequest::setFreeShippingLimit(const utility::string_t& value)
{
    m_Free_shipping_limit = value;
    m_Free_shipping_limitIsSet = true;
}

bool ItemAttributesRequest::freeShippingLimitIsSet() const
{
    return m_Free_shipping_limitIsSet;
}

void ItemAttributesRequest::unsetFree_shipping_limit()
{
    m_Free_shipping_limitIsSet = false;
}
utility::string_t ItemAttributesRequest::getGender() const
{
    return m_Gender;
}

void ItemAttributesRequest::setGender(const utility::string_t& value)
{
    m_Gender = value;
    m_GenderIsSet = true;
}

bool ItemAttributesRequest::genderIsSet() const
{
    return m_GenderIsSet;
}

void ItemAttributesRequest::unsetGender()
{
    m_GenderIsSet = false;
}
utility::string_t ItemAttributesRequest::getGoogleProductCategory() const
{
    return m_Google_product_category;
}

void ItemAttributesRequest::setGoogleProductCategory(const utility::string_t& value)
{
    m_Google_product_category = value;
    m_Google_product_categoryIsSet = true;
}

bool ItemAttributesRequest::googleProductCategoryIsSet() const
{
    return m_Google_product_categoryIsSet;
}

void ItemAttributesRequest::unsetGoogle_product_category()
{
    m_Google_product_categoryIsSet = false;
}
int32_t ItemAttributesRequest::getGtin() const
{
    return m_Gtin;
}

void ItemAttributesRequest::setGtin(int32_t value)
{
    m_Gtin = value;
    m_GtinIsSet = true;
}

bool ItemAttributesRequest::gtinIsSet() const
{
    return m_GtinIsSet;
}

void ItemAttributesRequest::unsetGtin()
{
    m_GtinIsSet = false;
}
utility::string_t ItemAttributesRequest::getId() const
{
    return m_Id;
}

void ItemAttributesRequest::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool ItemAttributesRequest::idIsSet() const
{
    return m_IdIsSet;
}

void ItemAttributesRequest::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t ItemAttributesRequest::getItemGroupId() const
{
    return m_Item_group_id;
}

void ItemAttributesRequest::setItemGroupId(const utility::string_t& value)
{
    m_Item_group_id = value;
    m_Item_group_idIsSet = true;
}

bool ItemAttributesRequest::itemGroupIdIsSet() const
{
    return m_Item_group_idIsSet;
}

void ItemAttributesRequest::unsetItem_group_id()
{
    m_Item_group_idIsSet = false;
}
int64_t ItemAttributesRequest::getLastUpdatedTime() const
{
    return m_Last_updated_time;
}

void ItemAttributesRequest::setLastUpdatedTime(int64_t value)
{
    m_Last_updated_time = value;
    m_Last_updated_timeIsSet = true;
}

bool ItemAttributesRequest::lastUpdatedTimeIsSet() const
{
    return m_Last_updated_timeIsSet;
}

void ItemAttributesRequest::unsetLast_updated_time()
{
    m_Last_updated_timeIsSet = false;
}
utility::string_t ItemAttributesRequest::getLink() const
{
    return m_Link;
}

void ItemAttributesRequest::setLink(const utility::string_t& value)
{
    m_Link = value;
    m_LinkIsSet = true;
}

bool ItemAttributesRequest::linkIsSet() const
{
    return m_LinkIsSet;
}

void ItemAttributesRequest::unsetLink()
{
    m_LinkIsSet = false;
}
utility::string_t ItemAttributesRequest::getMaterial() const
{
    return m_Material;
}

void ItemAttributesRequest::setMaterial(const utility::string_t& value)
{
    m_Material = value;
    m_MaterialIsSet = true;
}

bool ItemAttributesRequest::materialIsSet() const
{
    return m_MaterialIsSet;
}

void ItemAttributesRequest::unsetMaterial()
{
    m_MaterialIsSet = false;
}
utility::string_t ItemAttributesRequest::getMinAdPrice() const
{
    return m_Min_ad_price;
}

void ItemAttributesRequest::setMinAdPrice(const utility::string_t& value)
{
    m_Min_ad_price = value;
    m_Min_ad_priceIsSet = true;
}

bool ItemAttributesRequest::minAdPriceIsSet() const
{
    return m_Min_ad_priceIsSet;
}

void ItemAttributesRequest::unsetMin_ad_price()
{
    m_Min_ad_priceIsSet = false;
}
utility::string_t ItemAttributesRequest::getMobileLink() const
{
    return m_Mobile_link;
}

void ItemAttributesRequest::setMobileLink(const utility::string_t& value)
{
    m_Mobile_link = value;
    m_Mobile_linkIsSet = true;
}

bool ItemAttributesRequest::mobileLinkIsSet() const
{
    return m_Mobile_linkIsSet;
}

void ItemAttributesRequest::unsetMobile_link()
{
    m_Mobile_linkIsSet = false;
}
utility::string_t ItemAttributesRequest::getMpn() const
{
    return m_Mpn;
}

void ItemAttributesRequest::setMpn(const utility::string_t& value)
{
    m_Mpn = value;
    m_MpnIsSet = true;
}

bool ItemAttributesRequest::mpnIsSet() const
{
    return m_MpnIsSet;
}

void ItemAttributesRequest::unsetMpn()
{
    m_MpnIsSet = false;
}
int32_t ItemAttributesRequest::getNumberOfRatings() const
{
    return m_Number_of_ratings;
}

void ItemAttributesRequest::setNumberOfRatings(int32_t value)
{
    m_Number_of_ratings = value;
    m_Number_of_ratingsIsSet = true;
}

bool ItemAttributesRequest::numberOfRatingsIsSet() const
{
    return m_Number_of_ratingsIsSet;
}

void ItemAttributesRequest::unsetNumber_of_ratings()
{
    m_Number_of_ratingsIsSet = false;
}
int32_t ItemAttributesRequest::getNumberOfReviews() const
{
    return m_Number_of_reviews;
}

void ItemAttributesRequest::setNumberOfReviews(int32_t value)
{
    m_Number_of_reviews = value;
    m_Number_of_reviewsIsSet = true;
}

bool ItemAttributesRequest::numberOfReviewsIsSet() const
{
    return m_Number_of_reviewsIsSet;
}

void ItemAttributesRequest::unsetNumber_of_reviews()
{
    m_Number_of_reviewsIsSet = false;
}
utility::string_t ItemAttributesRequest::getPattern() const
{
    return m_Pattern;
}

void ItemAttributesRequest::setPattern(const utility::string_t& value)
{
    m_Pattern = value;
    m_PatternIsSet = true;
}

bool ItemAttributesRequest::patternIsSet() const
{
    return m_PatternIsSet;
}

void ItemAttributesRequest::unsetPattern()
{
    m_PatternIsSet = false;
}
utility::string_t ItemAttributesRequest::getPrice() const
{
    return m_Price;
}

void ItemAttributesRequest::setPrice(const utility::string_t& value)
{
    m_Price = value;
    m_PriceIsSet = true;
}

bool ItemAttributesRequest::priceIsSet() const
{
    return m_PriceIsSet;
}

void ItemAttributesRequest::unsetPrice()
{
    m_PriceIsSet = false;
}
utility::string_t ItemAttributesRequest::getProductType() const
{
    return m_Product_type;
}

void ItemAttributesRequest::setProductType(const utility::string_t& value)
{
    m_Product_type = value;
    m_Product_typeIsSet = true;
}

bool ItemAttributesRequest::productTypeIsSet() const
{
    return m_Product_typeIsSet;
}

void ItemAttributesRequest::unsetProduct_type()
{
    m_Product_typeIsSet = false;
}
utility::string_t ItemAttributesRequest::getSalePrice() const
{
    return m_Sale_price;
}

void ItemAttributesRequest::setSalePrice(const utility::string_t& value)
{
    m_Sale_price = value;
    m_Sale_priceIsSet = true;
}

bool ItemAttributesRequest::salePriceIsSet() const
{
    return m_Sale_priceIsSet;
}

void ItemAttributesRequest::unsetSale_price()
{
    m_Sale_priceIsSet = false;
}
utility::string_t ItemAttributesRequest::getShipping() const
{
    return m_Shipping;
}

void ItemAttributesRequest::setShipping(const utility::string_t& value)
{
    m_Shipping = value;
    m_ShippingIsSet = true;
}

bool ItemAttributesRequest::shippingIsSet() const
{
    return m_ShippingIsSet;
}

void ItemAttributesRequest::unsetShipping()
{
    m_ShippingIsSet = false;
}
utility::string_t ItemAttributesRequest::getShippingHeight() const
{
    return m_Shipping_height;
}

void ItemAttributesRequest::setShippingHeight(const utility::string_t& value)
{
    m_Shipping_height = value;
    m_Shipping_heightIsSet = true;
}

bool ItemAttributesRequest::shippingHeightIsSet() const
{
    return m_Shipping_heightIsSet;
}

void ItemAttributesRequest::unsetShipping_height()
{
    m_Shipping_heightIsSet = false;
}
utility::string_t ItemAttributesRequest::getShippingWeight() const
{
    return m_Shipping_weight;
}

void ItemAttributesRequest::setShippingWeight(const utility::string_t& value)
{
    m_Shipping_weight = value;
    m_Shipping_weightIsSet = true;
}

bool ItemAttributesRequest::shippingWeightIsSet() const
{
    return m_Shipping_weightIsSet;
}

void ItemAttributesRequest::unsetShipping_weight()
{
    m_Shipping_weightIsSet = false;
}
utility::string_t ItemAttributesRequest::getShippingWidth() const
{
    return m_Shipping_width;
}

void ItemAttributesRequest::setShippingWidth(const utility::string_t& value)
{
    m_Shipping_width = value;
    m_Shipping_widthIsSet = true;
}

bool ItemAttributesRequest::shippingWidthIsSet() const
{
    return m_Shipping_widthIsSet;
}

void ItemAttributesRequest::unsetShipping_width()
{
    m_Shipping_widthIsSet = false;
}
utility::string_t ItemAttributesRequest::getSize() const
{
    return m_Size;
}

void ItemAttributesRequest::setSize(const utility::string_t& value)
{
    m_Size = value;
    m_SizeIsSet = true;
}

bool ItemAttributesRequest::sizeIsSet() const
{
    return m_SizeIsSet;
}

void ItemAttributesRequest::unsetSize()
{
    m_SizeIsSet = false;
}
utility::string_t ItemAttributesRequest::getSizeSystem() const
{
    return m_Size_system;
}

void ItemAttributesRequest::setSizeSystem(const utility::string_t& value)
{
    m_Size_system = value;
    m_Size_systemIsSet = true;
}

bool ItemAttributesRequest::sizeSystemIsSet() const
{
    return m_Size_systemIsSet;
}

void ItemAttributesRequest::unsetSize_system()
{
    m_Size_systemIsSet = false;
}
utility::string_t ItemAttributesRequest::getSizeType() const
{
    return m_Size_type;
}

void ItemAttributesRequest::setSizeType(const utility::string_t& value)
{
    m_Size_type = value;
    m_Size_typeIsSet = true;
}

bool ItemAttributesRequest::sizeTypeIsSet() const
{
    return m_Size_typeIsSet;
}

void ItemAttributesRequest::unsetSize_type()
{
    m_Size_typeIsSet = false;
}
utility::string_t ItemAttributesRequest::getTax() const
{
    return m_Tax;
}

void ItemAttributesRequest::setTax(const utility::string_t& value)
{
    m_Tax = value;
    m_TaxIsSet = true;
}

bool ItemAttributesRequest::taxIsSet() const
{
    return m_TaxIsSet;
}

void ItemAttributesRequest::unsetTax()
{
    m_TaxIsSet = false;
}
utility::string_t ItemAttributesRequest::getTitle() const
{
    return m_Title;
}

void ItemAttributesRequest::setTitle(const utility::string_t& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}

bool ItemAttributesRequest::titleIsSet() const
{
    return m_TitleIsSet;
}

void ItemAttributesRequest::unsetTitle()
{
    m_TitleIsSet = false;
}
std::vector<utility::string_t>& ItemAttributesRequest::getVariantNames()
{
    return m_Variant_names;
}

void ItemAttributesRequest::setVariantNames(const std::vector<utility::string_t>& value)
{
    m_Variant_names = value;
    m_Variant_namesIsSet = true;
}

bool ItemAttributesRequest::variantNamesIsSet() const
{
    return m_Variant_namesIsSet;
}

void ItemAttributesRequest::unsetVariant_names()
{
    m_Variant_namesIsSet = false;
}
std::vector<utility::string_t>& ItemAttributesRequest::getVariantValues()
{
    return m_Variant_values;
}

void ItemAttributesRequest::setVariantValues(const std::vector<utility::string_t>& value)
{
    m_Variant_values = value;
    m_Variant_valuesIsSet = true;
}

bool ItemAttributesRequest::variantValuesIsSet() const
{
    return m_Variant_valuesIsSet;
}

void ItemAttributesRequest::unsetVariant_values()
{
    m_Variant_valuesIsSet = false;
}
std::vector<utility::string_t>& ItemAttributesRequest::getAdditionalImageLink()
{
    return m_Additional_image_link;
}

void ItemAttributesRequest::setAdditionalImageLink(const std::vector<utility::string_t>& value)
{
    m_Additional_image_link = value;
    m_Additional_image_linkIsSet = true;
}

bool ItemAttributesRequest::additionalImageLinkIsSet() const
{
    return m_Additional_image_linkIsSet;
}

void ItemAttributesRequest::unsetAdditional_image_link()
{
    m_Additional_image_linkIsSet = false;
}
std::shared_ptr<ItemAttributesRequest_allOf_image_link> ItemAttributesRequest::getImageLink() const
{
    return m_Image_link;
}

void ItemAttributesRequest::setImageLink(const std::shared_ptr<ItemAttributesRequest_allOf_image_link>& value)
{
    m_Image_link = value;
    m_Image_linkIsSet = true;
}

bool ItemAttributesRequest::imageLinkIsSet() const
{
    return m_Image_linkIsSet;
}

void ItemAttributesRequest::unsetImage_link()
{
    m_Image_linkIsSet = false;
}
utility::string_t ItemAttributesRequest::getVideoLink() const
{
    return m_Video_link;
}

void ItemAttributesRequest::setVideoLink(const utility::string_t& value)
{
    m_Video_link = value;
    m_Video_linkIsSet = true;
}

bool ItemAttributesRequest::videoLinkIsSet() const
{
    return m_Video_linkIsSet;
}

void ItemAttributesRequest::unsetVideo_link()
{
    m_Video_linkIsSet = false;
}
}
}
}
}


