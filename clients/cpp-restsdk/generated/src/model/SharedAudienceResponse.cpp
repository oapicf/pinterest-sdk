/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SharedAudienceResponse.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



SharedAudienceResponse::SharedAudienceResponse()
{
    m_Audience_id = utility::conversions::to_string_t("");
    m_Audience_idIsSet = false;
    m_PermissionsIsSet = false;
    m_Recipient_account_idsIsSet = false;
}

SharedAudienceResponse::~SharedAudienceResponse()
{
}

void SharedAudienceResponse::validate()
{
    // TODO: implement validation
}

web::json::value SharedAudienceResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Audience_idIsSet)
    {
        val[utility::conversions::to_string_t(U("audience_id"))] = ModelBase::toJson(m_Audience_id);
    }
    if(m_PermissionsIsSet)
    {
        val[utility::conversions::to_string_t(U("permissions"))] = ModelBase::toJson(m_Permissions);
    }
    if(m_Recipient_account_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("recipient_account_ids"))] = ModelBase::toJson(m_Recipient_account_ids);
    }

    return val;
}

bool SharedAudienceResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("audience_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("audience_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAudienceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAudienceId);
            setAudienceId(refVal_setAudienceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("permissions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("permissions")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Role>> refVal_setPermissions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPermissions);
            setPermissions(refVal_setPermissions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recipient_account_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recipient_account_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setRecipientAccountIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecipientAccountIds);
            setRecipientAccountIds(refVal_setRecipientAccountIds);
        }
    }
    return ok;
}

void SharedAudienceResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Audience_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("audience_id")), m_Audience_id));
    }
    if(m_PermissionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("permissions")), m_Permissions));
    }
    if(m_Recipient_account_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recipient_account_ids")), m_Recipient_account_ids));
    }
}

bool SharedAudienceResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("audience_id"))))
    {
        utility::string_t refVal_setAudienceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("audience_id"))), refVal_setAudienceId );
        setAudienceId(refVal_setAudienceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("permissions"))))
    {
        std::vector<std::shared_ptr<Role>> refVal_setPermissions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("permissions"))), refVal_setPermissions );
        setPermissions(refVal_setPermissions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recipient_account_ids"))))
    {
        std::vector<utility::string_t> refVal_setRecipientAccountIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recipient_account_ids"))), refVal_setRecipientAccountIds );
        setRecipientAccountIds(refVal_setRecipientAccountIds);
    }
    return ok;
}

utility::string_t SharedAudienceResponse::getAudienceId() const
{
    return m_Audience_id;
}

void SharedAudienceResponse::setAudienceId(const utility::string_t& value)
{
    m_Audience_id = value;
    m_Audience_idIsSet = true;
}

bool SharedAudienceResponse::audienceIdIsSet() const
{
    return m_Audience_idIsSet;
}

void SharedAudienceResponse::unsetAudience_id()
{
    m_Audience_idIsSet = false;
}
std::vector<std::shared_ptr<Role>>& SharedAudienceResponse::getPermissions()
{
    return m_Permissions;
}

void SharedAudienceResponse::setPermissions(const std::vector<std::shared_ptr<Role>>& value)
{
    m_Permissions = value;
    m_PermissionsIsSet = true;
}

bool SharedAudienceResponse::permissionsIsSet() const
{
    return m_PermissionsIsSet;
}

void SharedAudienceResponse::unsetPermissions()
{
    m_PermissionsIsSet = false;
}
std::vector<utility::string_t>& SharedAudienceResponse::getRecipientAccountIds()
{
    return m_Recipient_account_ids;
}

void SharedAudienceResponse::setRecipientAccountIds(const std::vector<utility::string_t>& value)
{
    m_Recipient_account_ids = value;
    m_Recipient_account_idsIsSet = true;
}

bool SharedAudienceResponse::recipientAccountIdsIsSet() const
{
    return m_Recipient_account_idsIsSet;
}

void SharedAudienceResponse::unsetRecipient_account_ids()
{
    m_Recipient_account_idsIsSet = false;
}
}
}
}
}


