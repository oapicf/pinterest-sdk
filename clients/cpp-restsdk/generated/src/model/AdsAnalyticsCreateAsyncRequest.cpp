/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AdsAnalyticsCreateAsyncRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AdsAnalyticsCreateAsyncRequest::AdsAnalyticsCreateAsyncRequest()
{
    m_Start_date = utility::conversions::to_string_t("");
    m_Start_dateIsSet = false;
    m_End_date = utility::conversions::to_string_t("");
    m_End_dateIsSet = false;
    m_GranularityIsSet = false;
    m_Click_window_daysIsSet = false;
    m_Engagement_window_daysIsSet = false;
    m_View_window_daysIsSet = false;
    m_Conversion_report_timeIsSet = false;
    m_Attribution_typesIsSet = false;
    m_Campaign_idsIsSet = false;
    m_Campaign_statusesIsSet = false;
    m_Campaign_objective_typesIsSet = false;
    m_Ad_group_idsIsSet = false;
    m_Ad_group_statusesIsSet = false;
    m_Ad_idsIsSet = false;
    m_Ad_statusesIsSet = false;
    m_Product_group_idsIsSet = false;
    m_Product_group_statusesIsSet = false;
    m_Product_item_idsIsSet = false;
    m_Targeting_typesIsSet = false;
    m_Metrics_filtersIsSet = false;
    m_ColumnsIsSet = false;
    m_LevelIsSet = false;
    m_Report_formatIsSet = false;
    m_Primary_sort = utility::conversions::to_string_t("");
    m_Primary_sortIsSet = false;
    m_Start_hour = 0;
    m_Start_hourIsSet = false;
    m_End_hour = 0;
    m_End_hourIsSet = false;
}

AdsAnalyticsCreateAsyncRequest::~AdsAnalyticsCreateAsyncRequest()
{
}

void AdsAnalyticsCreateAsyncRequest::validate()
{
    // TODO: implement validation
}

web::json::value AdsAnalyticsCreateAsyncRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Start_dateIsSet)
    {
        val[utility::conversions::to_string_t(U("start_date"))] = ModelBase::toJson(m_Start_date);
    }
    if(m_End_dateIsSet)
    {
        val[utility::conversions::to_string_t(U("end_date"))] = ModelBase::toJson(m_End_date);
    }
    if(m_GranularityIsSet)
    {
        val[utility::conversions::to_string_t(U("granularity"))] = ModelBase::toJson(m_Granularity);
    }
    if(m_Click_window_daysIsSet)
    {
        val[utility::conversions::to_string_t(U("click_window_days"))] = ModelBase::toJson(m_Click_window_days);
    }
    if(m_Engagement_window_daysIsSet)
    {
        val[utility::conversions::to_string_t(U("engagement_window_days"))] = ModelBase::toJson(m_Engagement_window_days);
    }
    if(m_View_window_daysIsSet)
    {
        val[utility::conversions::to_string_t(U("view_window_days"))] = ModelBase::toJson(m_View_window_days);
    }
    if(m_Conversion_report_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("conversion_report_time"))] = ModelBase::toJson(m_Conversion_report_time);
    }
    if(m_Attribution_typesIsSet)
    {
        val[utility::conversions::to_string_t(U("attribution_types"))] = ModelBase::toJson(m_Attribution_types);
    }
    if(m_Campaign_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("campaign_ids"))] = ModelBase::toJson(m_Campaign_ids);
    }
    if(m_Campaign_statusesIsSet)
    {
        val[utility::conversions::to_string_t(U("campaign_statuses"))] = ModelBase::toJson(m_Campaign_statuses);
    }
    if(m_Campaign_objective_typesIsSet)
    {
        val[utility::conversions::to_string_t(U("campaign_objective_types"))] = ModelBase::toJson(m_Campaign_objective_types);
    }
    if(m_Ad_group_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("ad_group_ids"))] = ModelBase::toJson(m_Ad_group_ids);
    }
    if(m_Ad_group_statusesIsSet)
    {
        val[utility::conversions::to_string_t(U("ad_group_statuses"))] = ModelBase::toJson(m_Ad_group_statuses);
    }
    if(m_Ad_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("ad_ids"))] = ModelBase::toJson(m_Ad_ids);
    }
    if(m_Ad_statusesIsSet)
    {
        val[utility::conversions::to_string_t(U("ad_statuses"))] = ModelBase::toJson(m_Ad_statuses);
    }
    if(m_Product_group_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("product_group_ids"))] = ModelBase::toJson(m_Product_group_ids);
    }
    if(m_Product_group_statusesIsSet)
    {
        val[utility::conversions::to_string_t(U("product_group_statuses"))] = ModelBase::toJson(m_Product_group_statuses);
    }
    if(m_Product_item_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("product_item_ids"))] = ModelBase::toJson(m_Product_item_ids);
    }
    if(m_Targeting_typesIsSet)
    {
        val[utility::conversions::to_string_t(U("targeting_types"))] = ModelBase::toJson(m_Targeting_types);
    }
    if(m_Metrics_filtersIsSet)
    {
        val[utility::conversions::to_string_t(U("metrics_filters"))] = ModelBase::toJson(m_Metrics_filters);
    }
    if(m_ColumnsIsSet)
    {
        val[utility::conversions::to_string_t(U("columns"))] = ModelBase::toJson(m_Columns);
    }
    if(m_LevelIsSet)
    {
        val[utility::conversions::to_string_t(U("level"))] = ModelBase::toJson(m_Level);
    }
    if(m_Report_formatIsSet)
    {
        val[utility::conversions::to_string_t(U("report_format"))] = ModelBase::toJson(m_Report_format);
    }
    if(m_Primary_sortIsSet)
    {
        val[utility::conversions::to_string_t(U("primary_sort"))] = ModelBase::toJson(m_Primary_sort);
    }
    if(m_Start_hourIsSet)
    {
        val[utility::conversions::to_string_t(U("start_hour"))] = ModelBase::toJson(m_Start_hour);
    }
    if(m_End_hourIsSet)
    {
        val[utility::conversions::to_string_t(U("end_hour"))] = ModelBase::toJson(m_End_hour);
    }

    return val;
}

bool AdsAnalyticsCreateAsyncRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("start_date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("start_date")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStartDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStartDate);
            setStartDate(refVal_setStartDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("end_date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("end_date")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEndDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEndDate);
            setEndDate(refVal_setEndDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("granularity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("granularity")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Granularity> refVal_setGranularity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGranularity);
            setGranularity(refVal_setGranularity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("click_window_days"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("click_window_days")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ConversionAttributionWindowDays> refVal_setClickWindowDays;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClickWindowDays);
            setClickWindowDays(refVal_setClickWindowDays);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("engagement_window_days"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("engagement_window_days")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ConversionAttributionWindowDays> refVal_setEngagementWindowDays;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEngagementWindowDays);
            setEngagementWindowDays(refVal_setEngagementWindowDays);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("view_window_days"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("view_window_days")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ConversionAttributionWindowDays> refVal_setViewWindowDays;
            ok &= ModelBase::fromJson(fieldValue, refVal_setViewWindowDays);
            setViewWindowDays(refVal_setViewWindowDays);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("conversion_report_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("conversion_report_time")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ConversionReportTimeType> refVal_setConversionReportTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConversionReportTime);
            setConversionReportTime(refVal_setConversionReportTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("attribution_types"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("attribution_types")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ConversionReportAttributionType>> refVal_setAttributionTypes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAttributionTypes);
            setAttributionTypes(refVal_setAttributionTypes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("campaign_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("campaign_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setCampaignIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCampaignIds);
            setCampaignIds(refVal_setCampaignIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("campaign_statuses"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("campaign_statuses")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<CampaignSummaryStatus>> refVal_setCampaignStatuses;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCampaignStatuses);
            setCampaignStatuses(refVal_setCampaignStatuses);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("campaign_objective_types"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("campaign_objective_types")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ObjectiveType>> refVal_setCampaignObjectiveTypes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCampaignObjectiveTypes);
            setCampaignObjectiveTypes(refVal_setCampaignObjectiveTypes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ad_group_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ad_group_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setAdGroupIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdGroupIds);
            setAdGroupIds(refVal_setAdGroupIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ad_group_statuses"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ad_group_statuses")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<AdGroupSummaryStatus>> refVal_setAdGroupStatuses;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdGroupStatuses);
            setAdGroupStatuses(refVal_setAdGroupStatuses);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ad_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ad_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setAdIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdIds);
            setAdIds(refVal_setAdIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ad_statuses"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ad_statuses")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<PinPromotionSummaryStatus>> refVal_setAdStatuses;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdStatuses);
            setAdStatuses(refVal_setAdStatuses);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("product_group_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product_group_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setProductGroupIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProductGroupIds);
            setProductGroupIds(refVal_setProductGroupIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("product_group_statuses"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product_group_statuses")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ProductGroupSummaryStatus>> refVal_setProductGroupStatuses;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProductGroupStatuses);
            setProductGroupStatuses(refVal_setProductGroupStatuses);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("product_item_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product_item_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setProductItemIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProductItemIds);
            setProductItemIds(refVal_setProductItemIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("targeting_types"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("targeting_types")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<AdsAnalyticsTargetingType>> refVal_setTargetingTypes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTargetingTypes);
            setTargetingTypes(refVal_setTargetingTypes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("metrics_filters"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("metrics_filters")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<AdsAnalyticsMetricsFilter>> refVal_setMetricsFilters;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMetricsFilters);
            setMetricsFilters(refVal_setMetricsFilters);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("columns"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("columns")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ReportingColumnAsync>> refVal_setColumns;
            ok &= ModelBase::fromJson(fieldValue, refVal_setColumns);
            setColumns(refVal_setColumns);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("level"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("level")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<MetricsReportingLevel> refVal_setLevel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLevel);
            setLevel(refVal_setLevel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("report_format"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("report_format")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DataOutputFormat> refVal_setReportFormat;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReportFormat);
            setReportFormat(refVal_setReportFormat);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("primary_sort"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("primary_sort")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPrimarySort;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrimarySort);
            setPrimarySort(refVal_setPrimarySort);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("start_hour"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("start_hour")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setStartHour;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStartHour);
            setStartHour(refVal_setStartHour);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("end_hour"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("end_hour")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setEndHour;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEndHour);
            setEndHour(refVal_setEndHour);
        }
    }
    return ok;
}

void AdsAnalyticsCreateAsyncRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Start_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("start_date")), m_Start_date));
    }
    if(m_End_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("end_date")), m_End_date));
    }
    if(m_GranularityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("granularity")), m_Granularity));
    }
    if(m_Click_window_daysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("click_window_days")), m_Click_window_days));
    }
    if(m_Engagement_window_daysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("engagement_window_days")), m_Engagement_window_days));
    }
    if(m_View_window_daysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("view_window_days")), m_View_window_days));
    }
    if(m_Conversion_report_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("conversion_report_time")), m_Conversion_report_time));
    }
    if(m_Attribution_typesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("attribution_types")), m_Attribution_types));
    }
    if(m_Campaign_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("campaign_ids")), m_Campaign_ids));
    }
    if(m_Campaign_statusesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("campaign_statuses")), m_Campaign_statuses));
    }
    if(m_Campaign_objective_typesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("campaign_objective_types")), m_Campaign_objective_types));
    }
    if(m_Ad_group_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ad_group_ids")), m_Ad_group_ids));
    }
    if(m_Ad_group_statusesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ad_group_statuses")), m_Ad_group_statuses));
    }
    if(m_Ad_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ad_ids")), m_Ad_ids));
    }
    if(m_Ad_statusesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ad_statuses")), m_Ad_statuses));
    }
    if(m_Product_group_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product_group_ids")), m_Product_group_ids));
    }
    if(m_Product_group_statusesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product_group_statuses")), m_Product_group_statuses));
    }
    if(m_Product_item_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product_item_ids")), m_Product_item_ids));
    }
    if(m_Targeting_typesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("targeting_types")), m_Targeting_types));
    }
    if(m_Metrics_filtersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("metrics_filters")), m_Metrics_filters));
    }
    if(m_ColumnsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("columns")), m_Columns));
    }
    if(m_LevelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("level")), m_Level));
    }
    if(m_Report_formatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("report_format")), m_Report_format));
    }
    if(m_Primary_sortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("primary_sort")), m_Primary_sort));
    }
    if(m_Start_hourIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("start_hour")), m_Start_hour));
    }
    if(m_End_hourIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("end_hour")), m_End_hour));
    }
}

bool AdsAnalyticsCreateAsyncRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("start_date"))))
    {
        utility::string_t refVal_setStartDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("start_date"))), refVal_setStartDate );
        setStartDate(refVal_setStartDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("end_date"))))
    {
        utility::string_t refVal_setEndDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("end_date"))), refVal_setEndDate );
        setEndDate(refVal_setEndDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("granularity"))))
    {
        std::shared_ptr<Granularity> refVal_setGranularity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("granularity"))), refVal_setGranularity );
        setGranularity(refVal_setGranularity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("click_window_days"))))
    {
        std::shared_ptr<ConversionAttributionWindowDays> refVal_setClickWindowDays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("click_window_days"))), refVal_setClickWindowDays );
        setClickWindowDays(refVal_setClickWindowDays);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("engagement_window_days"))))
    {
        std::shared_ptr<ConversionAttributionWindowDays> refVal_setEngagementWindowDays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("engagement_window_days"))), refVal_setEngagementWindowDays );
        setEngagementWindowDays(refVal_setEngagementWindowDays);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("view_window_days"))))
    {
        std::shared_ptr<ConversionAttributionWindowDays> refVal_setViewWindowDays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("view_window_days"))), refVal_setViewWindowDays );
        setViewWindowDays(refVal_setViewWindowDays);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("conversion_report_time"))))
    {
        std::shared_ptr<ConversionReportTimeType> refVal_setConversionReportTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("conversion_report_time"))), refVal_setConversionReportTime );
        setConversionReportTime(refVal_setConversionReportTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("attribution_types"))))
    {
        std::vector<std::shared_ptr<ConversionReportAttributionType>> refVal_setAttributionTypes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("attribution_types"))), refVal_setAttributionTypes );
        setAttributionTypes(refVal_setAttributionTypes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("campaign_ids"))))
    {
        std::vector<utility::string_t> refVal_setCampaignIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("campaign_ids"))), refVal_setCampaignIds );
        setCampaignIds(refVal_setCampaignIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("campaign_statuses"))))
    {
        std::vector<std::shared_ptr<CampaignSummaryStatus>> refVal_setCampaignStatuses;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("campaign_statuses"))), refVal_setCampaignStatuses );
        setCampaignStatuses(refVal_setCampaignStatuses);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("campaign_objective_types"))))
    {
        std::vector<std::shared_ptr<ObjectiveType>> refVal_setCampaignObjectiveTypes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("campaign_objective_types"))), refVal_setCampaignObjectiveTypes );
        setCampaignObjectiveTypes(refVal_setCampaignObjectiveTypes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ad_group_ids"))))
    {
        std::vector<utility::string_t> refVal_setAdGroupIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ad_group_ids"))), refVal_setAdGroupIds );
        setAdGroupIds(refVal_setAdGroupIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ad_group_statuses"))))
    {
        std::vector<std::shared_ptr<AdGroupSummaryStatus>> refVal_setAdGroupStatuses;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ad_group_statuses"))), refVal_setAdGroupStatuses );
        setAdGroupStatuses(refVal_setAdGroupStatuses);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ad_ids"))))
    {
        std::vector<utility::string_t> refVal_setAdIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ad_ids"))), refVal_setAdIds );
        setAdIds(refVal_setAdIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ad_statuses"))))
    {
        std::vector<std::shared_ptr<PinPromotionSummaryStatus>> refVal_setAdStatuses;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ad_statuses"))), refVal_setAdStatuses );
        setAdStatuses(refVal_setAdStatuses);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("product_group_ids"))))
    {
        std::vector<utility::string_t> refVal_setProductGroupIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product_group_ids"))), refVal_setProductGroupIds );
        setProductGroupIds(refVal_setProductGroupIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("product_group_statuses"))))
    {
        std::vector<std::shared_ptr<ProductGroupSummaryStatus>> refVal_setProductGroupStatuses;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product_group_statuses"))), refVal_setProductGroupStatuses );
        setProductGroupStatuses(refVal_setProductGroupStatuses);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("product_item_ids"))))
    {
        std::vector<utility::string_t> refVal_setProductItemIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product_item_ids"))), refVal_setProductItemIds );
        setProductItemIds(refVal_setProductItemIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("targeting_types"))))
    {
        std::vector<std::shared_ptr<AdsAnalyticsTargetingType>> refVal_setTargetingTypes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("targeting_types"))), refVal_setTargetingTypes );
        setTargetingTypes(refVal_setTargetingTypes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("metrics_filters"))))
    {
        std::vector<std::shared_ptr<AdsAnalyticsMetricsFilter>> refVal_setMetricsFilters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("metrics_filters"))), refVal_setMetricsFilters );
        setMetricsFilters(refVal_setMetricsFilters);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("columns"))))
    {
        std::vector<std::shared_ptr<ReportingColumnAsync>> refVal_setColumns;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("columns"))), refVal_setColumns );
        setColumns(refVal_setColumns);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("level"))))
    {
        std::shared_ptr<MetricsReportingLevel> refVal_setLevel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("level"))), refVal_setLevel );
        setLevel(refVal_setLevel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("report_format"))))
    {
        std::shared_ptr<DataOutputFormat> refVal_setReportFormat;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("report_format"))), refVal_setReportFormat );
        setReportFormat(refVal_setReportFormat);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("primary_sort"))))
    {
        utility::string_t refVal_setPrimarySort;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("primary_sort"))), refVal_setPrimarySort );
        setPrimarySort(refVal_setPrimarySort);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("start_hour"))))
    {
        int32_t refVal_setStartHour;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("start_hour"))), refVal_setStartHour );
        setStartHour(refVal_setStartHour);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("end_hour"))))
    {
        int32_t refVal_setEndHour;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("end_hour"))), refVal_setEndHour );
        setEndHour(refVal_setEndHour);
    }
    return ok;
}

utility::string_t AdsAnalyticsCreateAsyncRequest::getStartDate() const
{
    return m_Start_date;
}

void AdsAnalyticsCreateAsyncRequest::setStartDate(const utility::string_t& value)
{
    m_Start_date = value;
    m_Start_dateIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::startDateIsSet() const
{
    return m_Start_dateIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetStart_date()
{
    m_Start_dateIsSet = false;
}
utility::string_t AdsAnalyticsCreateAsyncRequest::getEndDate() const
{
    return m_End_date;
}

void AdsAnalyticsCreateAsyncRequest::setEndDate(const utility::string_t& value)
{
    m_End_date = value;
    m_End_dateIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::endDateIsSet() const
{
    return m_End_dateIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetEnd_date()
{
    m_End_dateIsSet = false;
}
std::shared_ptr<Granularity> AdsAnalyticsCreateAsyncRequest::getGranularity() const
{
    return m_Granularity;
}

void AdsAnalyticsCreateAsyncRequest::setGranularity(const std::shared_ptr<Granularity>& value)
{
    m_Granularity = value;
    m_GranularityIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::granularityIsSet() const
{
    return m_GranularityIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetGranularity()
{
    m_GranularityIsSet = false;
}
std::shared_ptr<ConversionAttributionWindowDays> AdsAnalyticsCreateAsyncRequest::getClickWindowDays() const
{
    return m_Click_window_days;
}

void AdsAnalyticsCreateAsyncRequest::setClickWindowDays(const std::shared_ptr<ConversionAttributionWindowDays>& value)
{
    m_Click_window_days = value;
    m_Click_window_daysIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::clickWindowDaysIsSet() const
{
    return m_Click_window_daysIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetClick_window_days()
{
    m_Click_window_daysIsSet = false;
}
std::shared_ptr<ConversionAttributionWindowDays> AdsAnalyticsCreateAsyncRequest::getEngagementWindowDays() const
{
    return m_Engagement_window_days;
}

void AdsAnalyticsCreateAsyncRequest::setEngagementWindowDays(const std::shared_ptr<ConversionAttributionWindowDays>& value)
{
    m_Engagement_window_days = value;
    m_Engagement_window_daysIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::engagementWindowDaysIsSet() const
{
    return m_Engagement_window_daysIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetEngagement_window_days()
{
    m_Engagement_window_daysIsSet = false;
}
std::shared_ptr<ConversionAttributionWindowDays> AdsAnalyticsCreateAsyncRequest::getViewWindowDays() const
{
    return m_View_window_days;
}

void AdsAnalyticsCreateAsyncRequest::setViewWindowDays(const std::shared_ptr<ConversionAttributionWindowDays>& value)
{
    m_View_window_days = value;
    m_View_window_daysIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::viewWindowDaysIsSet() const
{
    return m_View_window_daysIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetView_window_days()
{
    m_View_window_daysIsSet = false;
}
std::shared_ptr<ConversionReportTimeType> AdsAnalyticsCreateAsyncRequest::getConversionReportTime() const
{
    return m_Conversion_report_time;
}

void AdsAnalyticsCreateAsyncRequest::setConversionReportTime(const std::shared_ptr<ConversionReportTimeType>& value)
{
    m_Conversion_report_time = value;
    m_Conversion_report_timeIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::conversionReportTimeIsSet() const
{
    return m_Conversion_report_timeIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetConversion_report_time()
{
    m_Conversion_report_timeIsSet = false;
}
std::vector<std::shared_ptr<ConversionReportAttributionType>>& AdsAnalyticsCreateAsyncRequest::getAttributionTypes()
{
    return m_Attribution_types;
}

void AdsAnalyticsCreateAsyncRequest::setAttributionTypes(const std::vector<std::shared_ptr<ConversionReportAttributionType>>& value)
{
    m_Attribution_types = value;
    m_Attribution_typesIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::attributionTypesIsSet() const
{
    return m_Attribution_typesIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetAttribution_types()
{
    m_Attribution_typesIsSet = false;
}
std::vector<utility::string_t>& AdsAnalyticsCreateAsyncRequest::getCampaignIds()
{
    return m_Campaign_ids;
}

void AdsAnalyticsCreateAsyncRequest::setCampaignIds(const std::vector<utility::string_t>& value)
{
    m_Campaign_ids = value;
    m_Campaign_idsIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::campaignIdsIsSet() const
{
    return m_Campaign_idsIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetCampaign_ids()
{
    m_Campaign_idsIsSet = false;
}
std::vector<std::shared_ptr<CampaignSummaryStatus>>& AdsAnalyticsCreateAsyncRequest::getCampaignStatuses()
{
    return m_Campaign_statuses;
}

void AdsAnalyticsCreateAsyncRequest::setCampaignStatuses(const std::vector<std::shared_ptr<CampaignSummaryStatus>>& value)
{
    m_Campaign_statuses = value;
    m_Campaign_statusesIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::campaignStatusesIsSet() const
{
    return m_Campaign_statusesIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetCampaign_statuses()
{
    m_Campaign_statusesIsSet = false;
}
std::vector<std::shared_ptr<ObjectiveType>>& AdsAnalyticsCreateAsyncRequest::getCampaignObjectiveTypes()
{
    return m_Campaign_objective_types;
}

void AdsAnalyticsCreateAsyncRequest::setCampaignObjectiveTypes(const std::vector<std::shared_ptr<ObjectiveType>>& value)
{
    m_Campaign_objective_types = value;
    m_Campaign_objective_typesIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::campaignObjectiveTypesIsSet() const
{
    return m_Campaign_objective_typesIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetCampaign_objective_types()
{
    m_Campaign_objective_typesIsSet = false;
}
std::vector<utility::string_t>& AdsAnalyticsCreateAsyncRequest::getAdGroupIds()
{
    return m_Ad_group_ids;
}

void AdsAnalyticsCreateAsyncRequest::setAdGroupIds(const std::vector<utility::string_t>& value)
{
    m_Ad_group_ids = value;
    m_Ad_group_idsIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::adGroupIdsIsSet() const
{
    return m_Ad_group_idsIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetAd_group_ids()
{
    m_Ad_group_idsIsSet = false;
}
std::vector<std::shared_ptr<AdGroupSummaryStatus>>& AdsAnalyticsCreateAsyncRequest::getAdGroupStatuses()
{
    return m_Ad_group_statuses;
}

void AdsAnalyticsCreateAsyncRequest::setAdGroupStatuses(const std::vector<std::shared_ptr<AdGroupSummaryStatus>>& value)
{
    m_Ad_group_statuses = value;
    m_Ad_group_statusesIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::adGroupStatusesIsSet() const
{
    return m_Ad_group_statusesIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetAd_group_statuses()
{
    m_Ad_group_statusesIsSet = false;
}
std::vector<utility::string_t>& AdsAnalyticsCreateAsyncRequest::getAdIds()
{
    return m_Ad_ids;
}

void AdsAnalyticsCreateAsyncRequest::setAdIds(const std::vector<utility::string_t>& value)
{
    m_Ad_ids = value;
    m_Ad_idsIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::adIdsIsSet() const
{
    return m_Ad_idsIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetAd_ids()
{
    m_Ad_idsIsSet = false;
}
std::vector<std::shared_ptr<PinPromotionSummaryStatus>>& AdsAnalyticsCreateAsyncRequest::getAdStatuses()
{
    return m_Ad_statuses;
}

void AdsAnalyticsCreateAsyncRequest::setAdStatuses(const std::vector<std::shared_ptr<PinPromotionSummaryStatus>>& value)
{
    m_Ad_statuses = value;
    m_Ad_statusesIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::adStatusesIsSet() const
{
    return m_Ad_statusesIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetAd_statuses()
{
    m_Ad_statusesIsSet = false;
}
std::vector<utility::string_t>& AdsAnalyticsCreateAsyncRequest::getProductGroupIds()
{
    return m_Product_group_ids;
}

void AdsAnalyticsCreateAsyncRequest::setProductGroupIds(const std::vector<utility::string_t>& value)
{
    m_Product_group_ids = value;
    m_Product_group_idsIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::productGroupIdsIsSet() const
{
    return m_Product_group_idsIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetProduct_group_ids()
{
    m_Product_group_idsIsSet = false;
}
std::vector<std::shared_ptr<ProductGroupSummaryStatus>>& AdsAnalyticsCreateAsyncRequest::getProductGroupStatuses()
{
    return m_Product_group_statuses;
}

void AdsAnalyticsCreateAsyncRequest::setProductGroupStatuses(const std::vector<std::shared_ptr<ProductGroupSummaryStatus>>& value)
{
    m_Product_group_statuses = value;
    m_Product_group_statusesIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::productGroupStatusesIsSet() const
{
    return m_Product_group_statusesIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetProduct_group_statuses()
{
    m_Product_group_statusesIsSet = false;
}
std::vector<utility::string_t>& AdsAnalyticsCreateAsyncRequest::getProductItemIds()
{
    return m_Product_item_ids;
}

void AdsAnalyticsCreateAsyncRequest::setProductItemIds(const std::vector<utility::string_t>& value)
{
    m_Product_item_ids = value;
    m_Product_item_idsIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::productItemIdsIsSet() const
{
    return m_Product_item_idsIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetProduct_item_ids()
{
    m_Product_item_idsIsSet = false;
}
std::vector<std::shared_ptr<AdsAnalyticsTargetingType>>& AdsAnalyticsCreateAsyncRequest::getTargetingTypes()
{
    return m_Targeting_types;
}

void AdsAnalyticsCreateAsyncRequest::setTargetingTypes(const std::vector<std::shared_ptr<AdsAnalyticsTargetingType>>& value)
{
    m_Targeting_types = value;
    m_Targeting_typesIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::targetingTypesIsSet() const
{
    return m_Targeting_typesIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetTargeting_types()
{
    m_Targeting_typesIsSet = false;
}
std::vector<std::shared_ptr<AdsAnalyticsMetricsFilter>>& AdsAnalyticsCreateAsyncRequest::getMetricsFilters()
{
    return m_Metrics_filters;
}

void AdsAnalyticsCreateAsyncRequest::setMetricsFilters(const std::vector<std::shared_ptr<AdsAnalyticsMetricsFilter>>& value)
{
    m_Metrics_filters = value;
    m_Metrics_filtersIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::metricsFiltersIsSet() const
{
    return m_Metrics_filtersIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetMetrics_filters()
{
    m_Metrics_filtersIsSet = false;
}
std::vector<std::shared_ptr<ReportingColumnAsync>>& AdsAnalyticsCreateAsyncRequest::getColumns()
{
    return m_Columns;
}

void AdsAnalyticsCreateAsyncRequest::setColumns(const std::vector<std::shared_ptr<ReportingColumnAsync>>& value)
{
    m_Columns = value;
    m_ColumnsIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::columnsIsSet() const
{
    return m_ColumnsIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetColumns()
{
    m_ColumnsIsSet = false;
}
std::shared_ptr<MetricsReportingLevel> AdsAnalyticsCreateAsyncRequest::getLevel() const
{
    return m_Level;
}

void AdsAnalyticsCreateAsyncRequest::setLevel(const std::shared_ptr<MetricsReportingLevel>& value)
{
    m_Level = value;
    m_LevelIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::levelIsSet() const
{
    return m_LevelIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetLevel()
{
    m_LevelIsSet = false;
}
std::shared_ptr<DataOutputFormat> AdsAnalyticsCreateAsyncRequest::getReportFormat() const
{
    return m_Report_format;
}

void AdsAnalyticsCreateAsyncRequest::setReportFormat(const std::shared_ptr<DataOutputFormat>& value)
{
    m_Report_format = value;
    m_Report_formatIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::reportFormatIsSet() const
{
    return m_Report_formatIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetReport_format()
{
    m_Report_formatIsSet = false;
}
utility::string_t AdsAnalyticsCreateAsyncRequest::getPrimarySort() const
{
    return m_Primary_sort;
}

void AdsAnalyticsCreateAsyncRequest::setPrimarySort(const utility::string_t& value)
{
    m_Primary_sort = value;
    m_Primary_sortIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::primarySortIsSet() const
{
    return m_Primary_sortIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetPrimary_sort()
{
    m_Primary_sortIsSet = false;
}
int32_t AdsAnalyticsCreateAsyncRequest::getStartHour() const
{
    return m_Start_hour;
}

void AdsAnalyticsCreateAsyncRequest::setStartHour(int32_t value)
{
    m_Start_hour = value;
    m_Start_hourIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::startHourIsSet() const
{
    return m_Start_hourIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetStart_hour()
{
    m_Start_hourIsSet = false;
}
int32_t AdsAnalyticsCreateAsyncRequest::getEndHour() const
{
    return m_End_hour;
}

void AdsAnalyticsCreateAsyncRequest::setEndHour(int32_t value)
{
    m_End_hour = value;
    m_End_hourIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::endHourIsSet() const
{
    return m_End_hourIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetEnd_hour()
{
    m_End_hourIsSet = false;
}
}
}
}
}


