/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/BulkDownloadRequest_campaign_filter.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



BulkDownloadRequest_campaign_filter::BulkDownloadRequest_campaign_filter()
{
    m_Start_time = utility::conversions::to_string_t("");
    m_Start_timeIsSet = false;
    m_End_time = utility::conversions::to_string_t("");
    m_End_timeIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Campaign_statusIsSet = false;
    m_Objective_typeIsSet = false;
}

BulkDownloadRequest_campaign_filter::~BulkDownloadRequest_campaign_filter()
{
}

void BulkDownloadRequest_campaign_filter::validate()
{
    // TODO: implement validation
}

web::json::value BulkDownloadRequest_campaign_filter::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Start_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("start_time"))] = ModelBase::toJson(m_Start_time);
    }
    if(m_End_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("end_time"))] = ModelBase::toJson(m_End_time);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_Campaign_statusIsSet)
    {
        val[utility::conversions::to_string_t(U("campaign_status"))] = ModelBase::toJson(m_Campaign_status);
    }
    if(m_Objective_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("objective_type"))] = ModelBase::toJson(m_Objective_type);
    }

    return val;
}

bool BulkDownloadRequest_campaign_filter::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("start_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("start_time")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStartTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStartTime);
            setStartTime(refVal_setStartTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("end_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("end_time")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEndTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEndTime);
            setEndTime(refVal_setEndTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("campaign_status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("campaign_status")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<CampaignSummaryStatus>> refVal_setCampaignStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCampaignStatus);
            setCampaignStatus(refVal_setCampaignStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("objective_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("objective_type")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ObjectiveType>> refVal_setObjectiveType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setObjectiveType);
            setObjectiveType(refVal_setObjectiveType);
        }
    }
    return ok;
}

void BulkDownloadRequest_campaign_filter::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Start_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("start_time")), m_Start_time));
    }
    if(m_End_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("end_time")), m_End_time));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_Campaign_statusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("campaign_status")), m_Campaign_status));
    }
    if(m_Objective_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("objective_type")), m_Objective_type));
    }
}

bool BulkDownloadRequest_campaign_filter::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("start_time"))))
    {
        utility::string_t refVal_setStartTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("start_time"))), refVal_setStartTime );
        setStartTime(refVal_setStartTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("end_time"))))
    {
        utility::string_t refVal_setEndTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("end_time"))), refVal_setEndTime );
        setEndTime(refVal_setEndTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("campaign_status"))))
    {
        std::vector<std::shared_ptr<CampaignSummaryStatus>> refVal_setCampaignStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("campaign_status"))), refVal_setCampaignStatus );
        setCampaignStatus(refVal_setCampaignStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("objective_type"))))
    {
        std::vector<std::shared_ptr<ObjectiveType>> refVal_setObjectiveType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("objective_type"))), refVal_setObjectiveType );
        setObjectiveType(refVal_setObjectiveType);
    }
    return ok;
}

utility::string_t BulkDownloadRequest_campaign_filter::getStartTime() const
{
    return m_Start_time;
}

void BulkDownloadRequest_campaign_filter::setStartTime(const utility::string_t& value)
{
    m_Start_time = value;
    m_Start_timeIsSet = true;
}

bool BulkDownloadRequest_campaign_filter::startTimeIsSet() const
{
    return m_Start_timeIsSet;
}

void BulkDownloadRequest_campaign_filter::unsetStart_time()
{
    m_Start_timeIsSet = false;
}
utility::string_t BulkDownloadRequest_campaign_filter::getEndTime() const
{
    return m_End_time;
}

void BulkDownloadRequest_campaign_filter::setEndTime(const utility::string_t& value)
{
    m_End_time = value;
    m_End_timeIsSet = true;
}

bool BulkDownloadRequest_campaign_filter::endTimeIsSet() const
{
    return m_End_timeIsSet;
}

void BulkDownloadRequest_campaign_filter::unsetEnd_time()
{
    m_End_timeIsSet = false;
}
utility::string_t BulkDownloadRequest_campaign_filter::getName() const
{
    return m_Name;
}

void BulkDownloadRequest_campaign_filter::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BulkDownloadRequest_campaign_filter::nameIsSet() const
{
    return m_NameIsSet;
}

void BulkDownloadRequest_campaign_filter::unsetName()
{
    m_NameIsSet = false;
}
std::vector<std::shared_ptr<CampaignSummaryStatus>>& BulkDownloadRequest_campaign_filter::getCampaignStatus()
{
    return m_Campaign_status;
}

void BulkDownloadRequest_campaign_filter::setCampaignStatus(const std::vector<std::shared_ptr<CampaignSummaryStatus>>& value)
{
    m_Campaign_status = value;
    m_Campaign_statusIsSet = true;
}

bool BulkDownloadRequest_campaign_filter::campaignStatusIsSet() const
{
    return m_Campaign_statusIsSet;
}

void BulkDownloadRequest_campaign_filter::unsetCampaign_status()
{
    m_Campaign_statusIsSet = false;
}
std::vector<std::shared_ptr<ObjectiveType>>& BulkDownloadRequest_campaign_filter::getObjectiveType()
{
    return m_Objective_type;
}

void BulkDownloadRequest_campaign_filter::setObjectiveType(const std::vector<std::shared_ptr<ObjectiveType>>& value)
{
    m_Objective_type = value;
    m_Objective_typeIsSet = true;
}

bool BulkDownloadRequest_campaign_filter::objectiveTypeIsSet() const
{
    return m_Objective_typeIsSet;
}

void BulkDownloadRequest_campaign_filter::unsetObjective_type()
{
    m_Objective_typeIsSet = false;
}
}
}
}
}


