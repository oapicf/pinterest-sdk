/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AdGroupResponse.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AdGroupResponse::AdGroupResponse()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_StatusIsSet = false;
    m_Budget_in_micro_currency = 0;
    m_Budget_in_micro_currencyIsSet = false;
    m_Bid_in_micro_currency = 0;
    m_Bid_in_micro_currencyIsSet = false;
    m_Optimization_goal_metadataIsSet = false;
    m_Budget_typeIsSet = false;
    m_Start_time = 0;
    m_Start_timeIsSet = false;
    m_End_time = 0;
    m_End_timeIsSet = false;
    m_Targeting_specIsSet = false;
    m_Lifetime_frequency_cap = 0;
    m_Lifetime_frequency_capIsSet = false;
    m_Tracking_urlsIsSet = false;
    m_Auto_targeting_enabled = false;
    m_Auto_targeting_enabledIsSet = false;
    m_Placement_groupIsSet = false;
    m_Pacing_delivery_typeIsSet = false;
    m_Campaign_id = utility::conversions::to_string_t("");
    m_Campaign_idIsSet = false;
    m_Billable_eventIsSet = false;
    m_Bid_strategy_type = utility::conversions::to_string_t("");
    m_Bid_strategy_typeIsSet = false;
    m_Targeting_template_idsIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Ad_account_id = utility::conversions::to_string_t("");
    m_Ad_account_idIsSet = false;
    m_Created_time = 0;
    m_Created_timeIsSet = false;
    m_Updated_time = 0;
    m_Updated_timeIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Conversion_learning_mode_type = utility::conversions::to_string_t("");
    m_Conversion_learning_mode_typeIsSet = false;
    m_Summary_statusIsSet = false;
    m_Feed_profile_id = utility::conversions::to_string_t("");
    m_Feed_profile_idIsSet = false;
    m_Dca_assetsIsSet = false;
}

AdGroupResponse::~AdGroupResponse()
{
}

void AdGroupResponse::validate()
{
    // TODO: implement validation
}

web::json::value AdGroupResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_Budget_in_micro_currencyIsSet)
    {
        val[utility::conversions::to_string_t(U("budget_in_micro_currency"))] = ModelBase::toJson(m_Budget_in_micro_currency);
    }
    if(m_Bid_in_micro_currencyIsSet)
    {
        val[utility::conversions::to_string_t(U("bid_in_micro_currency"))] = ModelBase::toJson(m_Bid_in_micro_currency);
    }
    if(m_Optimization_goal_metadataIsSet)
    {
        val[utility::conversions::to_string_t(U("optimization_goal_metadata"))] = ModelBase::toJson(m_Optimization_goal_metadata);
    }
    if(m_Budget_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("budget_type"))] = ModelBase::toJson(m_Budget_type);
    }
    if(m_Start_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("start_time"))] = ModelBase::toJson(m_Start_time);
    }
    if(m_End_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("end_time"))] = ModelBase::toJson(m_End_time);
    }
    if(m_Targeting_specIsSet)
    {
        val[utility::conversions::to_string_t(U("targeting_spec"))] = ModelBase::toJson(m_Targeting_spec);
    }
    if(m_Lifetime_frequency_capIsSet)
    {
        val[utility::conversions::to_string_t(U("lifetime_frequency_cap"))] = ModelBase::toJson(m_Lifetime_frequency_cap);
    }
    if(m_Tracking_urlsIsSet)
    {
        val[utility::conversions::to_string_t(U("tracking_urls"))] = ModelBase::toJson(m_Tracking_urls);
    }
    if(m_Auto_targeting_enabledIsSet)
    {
        val[utility::conversions::to_string_t(U("auto_targeting_enabled"))] = ModelBase::toJson(m_Auto_targeting_enabled);
    }
    if(m_Placement_groupIsSet)
    {
        val[utility::conversions::to_string_t(U("placement_group"))] = ModelBase::toJson(m_Placement_group);
    }
    if(m_Pacing_delivery_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("pacing_delivery_type"))] = ModelBase::toJson(m_Pacing_delivery_type);
    }
    if(m_Campaign_idIsSet)
    {
        val[utility::conversions::to_string_t(U("campaign_id"))] = ModelBase::toJson(m_Campaign_id);
    }
    if(m_Billable_eventIsSet)
    {
        val[utility::conversions::to_string_t(U("billable_event"))] = ModelBase::toJson(m_Billable_event);
    }
    if(m_Bid_strategy_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("bid_strategy_type"))] = ModelBase::toJson(m_Bid_strategy_type);
    }
    if(m_Targeting_template_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("targeting_template_ids"))] = ModelBase::toJson(m_Targeting_template_ids);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Ad_account_idIsSet)
    {
        val[utility::conversions::to_string_t(U("ad_account_id"))] = ModelBase::toJson(m_Ad_account_id);
    }
    if(m_Created_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("created_time"))] = ModelBase::toJson(m_Created_time);
    }
    if(m_Updated_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("updated_time"))] = ModelBase::toJson(m_Updated_time);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_Conversion_learning_mode_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("conversion_learning_mode_type"))] = ModelBase::toJson(m_Conversion_learning_mode_type);
    }
    if(m_Summary_statusIsSet)
    {
        val[utility::conversions::to_string_t(U("summary_status"))] = ModelBase::toJson(m_Summary_status);
    }
    if(m_Feed_profile_idIsSet)
    {
        val[utility::conversions::to_string_t(U("feed_profile_id"))] = ModelBase::toJson(m_Feed_profile_id);
    }
    if(m_Dca_assetsIsSet)
    {
        val[utility::conversions::to_string_t(U("dca_assets"))] = ModelBase::toJson(m_Dca_assets);
    }

    return val;
}

bool AdGroupResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<EntityStatus> refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("budget_in_micro_currency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("budget_in_micro_currency")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBudgetInMicroCurrency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBudgetInMicroCurrency);
            setBudgetInMicroCurrency(refVal_setBudgetInMicroCurrency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bid_in_micro_currency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bid_in_micro_currency")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBidInMicroCurrency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBidInMicroCurrency);
            setBidInMicroCurrency(refVal_setBidInMicroCurrency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("optimization_goal_metadata"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("optimization_goal_metadata")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OptimizationGoalMetadata> refVal_setOptimizationGoalMetadata;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOptimizationGoalMetadata);
            setOptimizationGoalMetadata(refVal_setOptimizationGoalMetadata);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("budget_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("budget_type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BudgetType> refVal_setBudgetType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBudgetType);
            setBudgetType(refVal_setBudgetType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("start_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("start_time")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setStartTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStartTime);
            setStartTime(refVal_setStartTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("end_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("end_time")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setEndTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEndTime);
            setEndTime(refVal_setEndTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("targeting_spec"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("targeting_spec")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TargetingSpec> refVal_setTargetingSpec;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTargetingSpec);
            setTargetingSpec(refVal_setTargetingSpec);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lifetime_frequency_cap"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lifetime_frequency_cap")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLifetimeFrequencyCap;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLifetimeFrequencyCap);
            setLifetimeFrequencyCap(refVal_setLifetimeFrequencyCap);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tracking_urls"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tracking_urls")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TrackingUrls> refVal_setTrackingUrls;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTrackingUrls);
            setTrackingUrls(refVal_setTrackingUrls);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("auto_targeting_enabled"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("auto_targeting_enabled")));
        if(!fieldValue.is_null())
        {
            bool refVal_setAutoTargetingEnabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAutoTargetingEnabled);
            setAutoTargetingEnabled(refVal_setAutoTargetingEnabled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("placement_group"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("placement_group")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PlacementGroupType> refVal_setPlacementGroup;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlacementGroup);
            setPlacementGroup(refVal_setPlacementGroup);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pacing_delivery_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pacing_delivery_type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PacingDeliveryType> refVal_setPacingDeliveryType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPacingDeliveryType);
            setPacingDeliveryType(refVal_setPacingDeliveryType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("campaign_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("campaign_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCampaignId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCampaignId);
            setCampaignId(refVal_setCampaignId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("billable_event"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("billable_event")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ActionType> refVal_setBillableEvent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBillableEvent);
            setBillableEvent(refVal_setBillableEvent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bid_strategy_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bid_strategy_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBidStrategyType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBidStrategyType);
            setBidStrategyType(refVal_setBidStrategyType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("targeting_template_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("targeting_template_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setTargetingTemplateIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTargetingTemplateIds);
            setTargetingTemplateIds(refVal_setTargetingTemplateIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ad_account_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ad_account_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAdAccountId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdAccountId);
            setAdAccountId(refVal_setAdAccountId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_time")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCreatedTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedTime);
            setCreatedTime(refVal_setCreatedTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updated_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updated_time")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setUpdatedTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedTime);
            setUpdatedTime(refVal_setUpdatedTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("conversion_learning_mode_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("conversion_learning_mode_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setConversionLearningModeType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConversionLearningModeType);
            setConversionLearningModeType(refVal_setConversionLearningModeType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("summary_status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("summary_status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AdGroupSummaryStatus> refVal_setSummaryStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSummaryStatus);
            setSummaryStatus(refVal_setSummaryStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("feed_profile_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("feed_profile_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFeedProfileId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFeedProfileId);
            setFeedProfileId(refVal_setFeedProfileId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dca_assets"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dca_assets")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_setDcaAssets;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDcaAssets);
            setDcaAssets(refVal_setDcaAssets);
        }
    }
    return ok;
}

void AdGroupResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_Budget_in_micro_currencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("budget_in_micro_currency")), m_Budget_in_micro_currency));
    }
    if(m_Bid_in_micro_currencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bid_in_micro_currency")), m_Bid_in_micro_currency));
    }
    if(m_Optimization_goal_metadataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("optimization_goal_metadata")), m_Optimization_goal_metadata));
    }
    if(m_Budget_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("budget_type")), m_Budget_type));
    }
    if(m_Start_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("start_time")), m_Start_time));
    }
    if(m_End_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("end_time")), m_End_time));
    }
    if(m_Targeting_specIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("targeting_spec")), m_Targeting_spec));
    }
    if(m_Lifetime_frequency_capIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lifetime_frequency_cap")), m_Lifetime_frequency_cap));
    }
    if(m_Tracking_urlsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tracking_urls")), m_Tracking_urls));
    }
    if(m_Auto_targeting_enabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("auto_targeting_enabled")), m_Auto_targeting_enabled));
    }
    if(m_Placement_groupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("placement_group")), m_Placement_group));
    }
    if(m_Pacing_delivery_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pacing_delivery_type")), m_Pacing_delivery_type));
    }
    if(m_Campaign_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("campaign_id")), m_Campaign_id));
    }
    if(m_Billable_eventIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("billable_event")), m_Billable_event));
    }
    if(m_Bid_strategy_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bid_strategy_type")), m_Bid_strategy_type));
    }
    if(m_Targeting_template_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("targeting_template_ids")), m_Targeting_template_ids));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Ad_account_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ad_account_id")), m_Ad_account_id));
    }
    if(m_Created_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_time")), m_Created_time));
    }
    if(m_Updated_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updated_time")), m_Updated_time));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_Conversion_learning_mode_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("conversion_learning_mode_type")), m_Conversion_learning_mode_type));
    }
    if(m_Summary_statusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("summary_status")), m_Summary_status));
    }
    if(m_Feed_profile_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("feed_profile_id")), m_Feed_profile_id));
    }
    if(m_Dca_assetsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dca_assets")), m_Dca_assets));
    }
}

bool AdGroupResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<EntityStatus> refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("budget_in_micro_currency"))))
    {
        int32_t refVal_setBudgetInMicroCurrency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("budget_in_micro_currency"))), refVal_setBudgetInMicroCurrency );
        setBudgetInMicroCurrency(refVal_setBudgetInMicroCurrency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bid_in_micro_currency"))))
    {
        int32_t refVal_setBidInMicroCurrency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bid_in_micro_currency"))), refVal_setBidInMicroCurrency );
        setBidInMicroCurrency(refVal_setBidInMicroCurrency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("optimization_goal_metadata"))))
    {
        std::shared_ptr<OptimizationGoalMetadata> refVal_setOptimizationGoalMetadata;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("optimization_goal_metadata"))), refVal_setOptimizationGoalMetadata );
        setOptimizationGoalMetadata(refVal_setOptimizationGoalMetadata);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("budget_type"))))
    {
        std::shared_ptr<BudgetType> refVal_setBudgetType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("budget_type"))), refVal_setBudgetType );
        setBudgetType(refVal_setBudgetType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("start_time"))))
    {
        int32_t refVal_setStartTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("start_time"))), refVal_setStartTime );
        setStartTime(refVal_setStartTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("end_time"))))
    {
        int32_t refVal_setEndTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("end_time"))), refVal_setEndTime );
        setEndTime(refVal_setEndTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("targeting_spec"))))
    {
        std::shared_ptr<TargetingSpec> refVal_setTargetingSpec;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("targeting_spec"))), refVal_setTargetingSpec );
        setTargetingSpec(refVal_setTargetingSpec);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lifetime_frequency_cap"))))
    {
        int32_t refVal_setLifetimeFrequencyCap;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lifetime_frequency_cap"))), refVal_setLifetimeFrequencyCap );
        setLifetimeFrequencyCap(refVal_setLifetimeFrequencyCap);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tracking_urls"))))
    {
        std::shared_ptr<TrackingUrls> refVal_setTrackingUrls;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tracking_urls"))), refVal_setTrackingUrls );
        setTrackingUrls(refVal_setTrackingUrls);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("auto_targeting_enabled"))))
    {
        bool refVal_setAutoTargetingEnabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("auto_targeting_enabled"))), refVal_setAutoTargetingEnabled );
        setAutoTargetingEnabled(refVal_setAutoTargetingEnabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("placement_group"))))
    {
        std::shared_ptr<PlacementGroupType> refVal_setPlacementGroup;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("placement_group"))), refVal_setPlacementGroup );
        setPlacementGroup(refVal_setPlacementGroup);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pacing_delivery_type"))))
    {
        std::shared_ptr<PacingDeliveryType> refVal_setPacingDeliveryType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pacing_delivery_type"))), refVal_setPacingDeliveryType );
        setPacingDeliveryType(refVal_setPacingDeliveryType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("campaign_id"))))
    {
        utility::string_t refVal_setCampaignId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("campaign_id"))), refVal_setCampaignId );
        setCampaignId(refVal_setCampaignId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("billable_event"))))
    {
        std::shared_ptr<ActionType> refVal_setBillableEvent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("billable_event"))), refVal_setBillableEvent );
        setBillableEvent(refVal_setBillableEvent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bid_strategy_type"))))
    {
        utility::string_t refVal_setBidStrategyType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bid_strategy_type"))), refVal_setBidStrategyType );
        setBidStrategyType(refVal_setBidStrategyType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("targeting_template_ids"))))
    {
        std::vector<utility::string_t> refVal_setTargetingTemplateIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("targeting_template_ids"))), refVal_setTargetingTemplateIds );
        setTargetingTemplateIds(refVal_setTargetingTemplateIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ad_account_id"))))
    {
        utility::string_t refVal_setAdAccountId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ad_account_id"))), refVal_setAdAccountId );
        setAdAccountId(refVal_setAdAccountId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_time"))))
    {
        int32_t refVal_setCreatedTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_time"))), refVal_setCreatedTime );
        setCreatedTime(refVal_setCreatedTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updated_time"))))
    {
        int32_t refVal_setUpdatedTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updated_time"))), refVal_setUpdatedTime );
        setUpdatedTime(refVal_setUpdatedTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("conversion_learning_mode_type"))))
    {
        utility::string_t refVal_setConversionLearningModeType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("conversion_learning_mode_type"))), refVal_setConversionLearningModeType );
        setConversionLearningModeType(refVal_setConversionLearningModeType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("summary_status"))))
    {
        std::shared_ptr<AdGroupSummaryStatus> refVal_setSummaryStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("summary_status"))), refVal_setSummaryStatus );
        setSummaryStatus(refVal_setSummaryStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("feed_profile_id"))))
    {
        utility::string_t refVal_setFeedProfileId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("feed_profile_id"))), refVal_setFeedProfileId );
        setFeedProfileId(refVal_setFeedProfileId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dca_assets"))))
    {
        std::shared_ptr<AnyType> refVal_setDcaAssets;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dca_assets"))), refVal_setDcaAssets );
        setDcaAssets(refVal_setDcaAssets);
    }
    return ok;
}

utility::string_t AdGroupResponse::getName() const
{
    return m_Name;
}

void AdGroupResponse::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool AdGroupResponse::nameIsSet() const
{
    return m_NameIsSet;
}

void AdGroupResponse::unsetName()
{
    m_NameIsSet = false;
}
std::shared_ptr<EntityStatus> AdGroupResponse::getStatus() const
{
    return m_Status;
}

void AdGroupResponse::setStatus(const std::shared_ptr<EntityStatus>& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool AdGroupResponse::statusIsSet() const
{
    return m_StatusIsSet;
}

void AdGroupResponse::unsetStatus()
{
    m_StatusIsSet = false;
}
int32_t AdGroupResponse::getBudgetInMicroCurrency() const
{
    return m_Budget_in_micro_currency;
}

void AdGroupResponse::setBudgetInMicroCurrency(int32_t value)
{
    m_Budget_in_micro_currency = value;
    m_Budget_in_micro_currencyIsSet = true;
}

bool AdGroupResponse::budgetInMicroCurrencyIsSet() const
{
    return m_Budget_in_micro_currencyIsSet;
}

void AdGroupResponse::unsetBudget_in_micro_currency()
{
    m_Budget_in_micro_currencyIsSet = false;
}
int32_t AdGroupResponse::getBidInMicroCurrency() const
{
    return m_Bid_in_micro_currency;
}

void AdGroupResponse::setBidInMicroCurrency(int32_t value)
{
    m_Bid_in_micro_currency = value;
    m_Bid_in_micro_currencyIsSet = true;
}

bool AdGroupResponse::bidInMicroCurrencyIsSet() const
{
    return m_Bid_in_micro_currencyIsSet;
}

void AdGroupResponse::unsetBid_in_micro_currency()
{
    m_Bid_in_micro_currencyIsSet = false;
}
std::shared_ptr<OptimizationGoalMetadata> AdGroupResponse::getOptimizationGoalMetadata() const
{
    return m_Optimization_goal_metadata;
}

void AdGroupResponse::setOptimizationGoalMetadata(const std::shared_ptr<OptimizationGoalMetadata>& value)
{
    m_Optimization_goal_metadata = value;
    m_Optimization_goal_metadataIsSet = true;
}

bool AdGroupResponse::optimizationGoalMetadataIsSet() const
{
    return m_Optimization_goal_metadataIsSet;
}

void AdGroupResponse::unsetOptimization_goal_metadata()
{
    m_Optimization_goal_metadataIsSet = false;
}
std::shared_ptr<BudgetType> AdGroupResponse::getBudgetType() const
{
    return m_Budget_type;
}

void AdGroupResponse::setBudgetType(const std::shared_ptr<BudgetType>& value)
{
    m_Budget_type = value;
    m_Budget_typeIsSet = true;
}

bool AdGroupResponse::budgetTypeIsSet() const
{
    return m_Budget_typeIsSet;
}

void AdGroupResponse::unsetBudget_type()
{
    m_Budget_typeIsSet = false;
}
int32_t AdGroupResponse::getStartTime() const
{
    return m_Start_time;
}

void AdGroupResponse::setStartTime(int32_t value)
{
    m_Start_time = value;
    m_Start_timeIsSet = true;
}

bool AdGroupResponse::startTimeIsSet() const
{
    return m_Start_timeIsSet;
}

void AdGroupResponse::unsetStart_time()
{
    m_Start_timeIsSet = false;
}
int32_t AdGroupResponse::getEndTime() const
{
    return m_End_time;
}

void AdGroupResponse::setEndTime(int32_t value)
{
    m_End_time = value;
    m_End_timeIsSet = true;
}

bool AdGroupResponse::endTimeIsSet() const
{
    return m_End_timeIsSet;
}

void AdGroupResponse::unsetEnd_time()
{
    m_End_timeIsSet = false;
}
std::shared_ptr<TargetingSpec> AdGroupResponse::getTargetingSpec() const
{
    return m_Targeting_spec;
}

void AdGroupResponse::setTargetingSpec(const std::shared_ptr<TargetingSpec>& value)
{
    m_Targeting_spec = value;
    m_Targeting_specIsSet = true;
}

bool AdGroupResponse::targetingSpecIsSet() const
{
    return m_Targeting_specIsSet;
}

void AdGroupResponse::unsetTargeting_spec()
{
    m_Targeting_specIsSet = false;
}
int32_t AdGroupResponse::getLifetimeFrequencyCap() const
{
    return m_Lifetime_frequency_cap;
}

void AdGroupResponse::setLifetimeFrequencyCap(int32_t value)
{
    m_Lifetime_frequency_cap = value;
    m_Lifetime_frequency_capIsSet = true;
}

bool AdGroupResponse::lifetimeFrequencyCapIsSet() const
{
    return m_Lifetime_frequency_capIsSet;
}

void AdGroupResponse::unsetLifetime_frequency_cap()
{
    m_Lifetime_frequency_capIsSet = false;
}
std::shared_ptr<TrackingUrls> AdGroupResponse::getTrackingUrls() const
{
    return m_Tracking_urls;
}

void AdGroupResponse::setTrackingUrls(const std::shared_ptr<TrackingUrls>& value)
{
    m_Tracking_urls = value;
    m_Tracking_urlsIsSet = true;
}

bool AdGroupResponse::trackingUrlsIsSet() const
{
    return m_Tracking_urlsIsSet;
}

void AdGroupResponse::unsetTracking_urls()
{
    m_Tracking_urlsIsSet = false;
}
bool AdGroupResponse::isAutoTargetingEnabled() const
{
    return m_Auto_targeting_enabled;
}

void AdGroupResponse::setAutoTargetingEnabled(bool value)
{
    m_Auto_targeting_enabled = value;
    m_Auto_targeting_enabledIsSet = true;
}

bool AdGroupResponse::autoTargetingEnabledIsSet() const
{
    return m_Auto_targeting_enabledIsSet;
}

void AdGroupResponse::unsetAuto_targeting_enabled()
{
    m_Auto_targeting_enabledIsSet = false;
}
std::shared_ptr<PlacementGroupType> AdGroupResponse::getPlacementGroup() const
{
    return m_Placement_group;
}

void AdGroupResponse::setPlacementGroup(const std::shared_ptr<PlacementGroupType>& value)
{
    m_Placement_group = value;
    m_Placement_groupIsSet = true;
}

bool AdGroupResponse::placementGroupIsSet() const
{
    return m_Placement_groupIsSet;
}

void AdGroupResponse::unsetPlacement_group()
{
    m_Placement_groupIsSet = false;
}
std::shared_ptr<PacingDeliveryType> AdGroupResponse::getPacingDeliveryType() const
{
    return m_Pacing_delivery_type;
}

void AdGroupResponse::setPacingDeliveryType(const std::shared_ptr<PacingDeliveryType>& value)
{
    m_Pacing_delivery_type = value;
    m_Pacing_delivery_typeIsSet = true;
}

bool AdGroupResponse::pacingDeliveryTypeIsSet() const
{
    return m_Pacing_delivery_typeIsSet;
}

void AdGroupResponse::unsetPacing_delivery_type()
{
    m_Pacing_delivery_typeIsSet = false;
}
utility::string_t AdGroupResponse::getCampaignId() const
{
    return m_Campaign_id;
}

void AdGroupResponse::setCampaignId(const utility::string_t& value)
{
    m_Campaign_id = value;
    m_Campaign_idIsSet = true;
}

bool AdGroupResponse::campaignIdIsSet() const
{
    return m_Campaign_idIsSet;
}

void AdGroupResponse::unsetCampaign_id()
{
    m_Campaign_idIsSet = false;
}
std::shared_ptr<ActionType> AdGroupResponse::getBillableEvent() const
{
    return m_Billable_event;
}

void AdGroupResponse::setBillableEvent(const std::shared_ptr<ActionType>& value)
{
    m_Billable_event = value;
    m_Billable_eventIsSet = true;
}

bool AdGroupResponse::billableEventIsSet() const
{
    return m_Billable_eventIsSet;
}

void AdGroupResponse::unsetBillable_event()
{
    m_Billable_eventIsSet = false;
}
utility::string_t AdGroupResponse::getBidStrategyType() const
{
    return m_Bid_strategy_type;
}

void AdGroupResponse::setBidStrategyType(const utility::string_t& value)
{
    m_Bid_strategy_type = value;
    m_Bid_strategy_typeIsSet = true;
}

bool AdGroupResponse::bidStrategyTypeIsSet() const
{
    return m_Bid_strategy_typeIsSet;
}

void AdGroupResponse::unsetBid_strategy_type()
{
    m_Bid_strategy_typeIsSet = false;
}
std::vector<utility::string_t>& AdGroupResponse::getTargetingTemplateIds()
{
    return m_Targeting_template_ids;
}

void AdGroupResponse::setTargetingTemplateIds(const std::vector<utility::string_t>& value)
{
    m_Targeting_template_ids = value;
    m_Targeting_template_idsIsSet = true;
}

bool AdGroupResponse::targetingTemplateIdsIsSet() const
{
    return m_Targeting_template_idsIsSet;
}

void AdGroupResponse::unsetTargeting_template_ids()
{
    m_Targeting_template_idsIsSet = false;
}
utility::string_t AdGroupResponse::getId() const
{
    return m_Id;
}

void AdGroupResponse::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool AdGroupResponse::idIsSet() const
{
    return m_IdIsSet;
}

void AdGroupResponse::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t AdGroupResponse::getAdAccountId() const
{
    return m_Ad_account_id;
}

void AdGroupResponse::setAdAccountId(const utility::string_t& value)
{
    m_Ad_account_id = value;
    m_Ad_account_idIsSet = true;
}

bool AdGroupResponse::adAccountIdIsSet() const
{
    return m_Ad_account_idIsSet;
}

void AdGroupResponse::unsetAd_account_id()
{
    m_Ad_account_idIsSet = false;
}
int32_t AdGroupResponse::getCreatedTime() const
{
    return m_Created_time;
}

void AdGroupResponse::setCreatedTime(int32_t value)
{
    m_Created_time = value;
    m_Created_timeIsSet = true;
}

bool AdGroupResponse::createdTimeIsSet() const
{
    return m_Created_timeIsSet;
}

void AdGroupResponse::unsetCreated_time()
{
    m_Created_timeIsSet = false;
}
int32_t AdGroupResponse::getUpdatedTime() const
{
    return m_Updated_time;
}

void AdGroupResponse::setUpdatedTime(int32_t value)
{
    m_Updated_time = value;
    m_Updated_timeIsSet = true;
}

bool AdGroupResponse::updatedTimeIsSet() const
{
    return m_Updated_timeIsSet;
}

void AdGroupResponse::unsetUpdated_time()
{
    m_Updated_timeIsSet = false;
}
utility::string_t AdGroupResponse::getType() const
{
    return m_Type;
}

void AdGroupResponse::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool AdGroupResponse::typeIsSet() const
{
    return m_TypeIsSet;
}

void AdGroupResponse::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t AdGroupResponse::getConversionLearningModeType() const
{
    return m_Conversion_learning_mode_type;
}

void AdGroupResponse::setConversionLearningModeType(const utility::string_t& value)
{
    m_Conversion_learning_mode_type = value;
    m_Conversion_learning_mode_typeIsSet = true;
}

bool AdGroupResponse::conversionLearningModeTypeIsSet() const
{
    return m_Conversion_learning_mode_typeIsSet;
}

void AdGroupResponse::unsetConversion_learning_mode_type()
{
    m_Conversion_learning_mode_typeIsSet = false;
}
std::shared_ptr<AdGroupSummaryStatus> AdGroupResponse::getSummaryStatus() const
{
    return m_Summary_status;
}

void AdGroupResponse::setSummaryStatus(const std::shared_ptr<AdGroupSummaryStatus>& value)
{
    m_Summary_status = value;
    m_Summary_statusIsSet = true;
}

bool AdGroupResponse::summaryStatusIsSet() const
{
    return m_Summary_statusIsSet;
}

void AdGroupResponse::unsetSummary_status()
{
    m_Summary_statusIsSet = false;
}
utility::string_t AdGroupResponse::getFeedProfileId() const
{
    return m_Feed_profile_id;
}

void AdGroupResponse::setFeedProfileId(const utility::string_t& value)
{
    m_Feed_profile_id = value;
    m_Feed_profile_idIsSet = true;
}

bool AdGroupResponse::feedProfileIdIsSet() const
{
    return m_Feed_profile_idIsSet;
}

void AdGroupResponse::unsetFeed_profile_id()
{
    m_Feed_profile_idIsSet = false;
}
std::shared_ptr<AnyType> AdGroupResponse::getDcaAssets() const
{
    return m_Dca_assets;
}

void AdGroupResponse::setDcaAssets(const std::shared_ptr<AnyType>& value)
{
    m_Dca_assets = value;
    m_Dca_assetsIsSet = true;
}

bool AdGroupResponse::dcaAssetsIsSet() const
{
    return m_Dca_assetsIsSet;
}

void AdGroupResponse::unsetDca_assets()
{
    m_Dca_assetsIsSet = false;
}
}
}
}
}


