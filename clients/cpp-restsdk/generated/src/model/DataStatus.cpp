/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/DataStatus.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


namespace
{
using EnumUnderlyingType = utility::string_t;

DataStatus::eDataStatus toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("PROCESSING")))
        return DataStatus::eDataStatus::DataStatus_PROCESSING;
    if (val == utility::conversions::to_string_t(U("READY")))
        return DataStatus::eDataStatus::DataStatus_READY;
    if (val == utility::conversions::to_string_t(U("ESTIMATE")))
        return DataStatus::eDataStatus::DataStatus_ESTIMATE;
    if (val == utility::conversions::to_string_t(U("BEFORE_BUSINESS_CREATED")))
        return DataStatus::eDataStatus::DataStatus_BEFORE_BUSINESS_CREATED;
    if (val == utility::conversions::to_string_t(U("BEFORE_DATA_RETENTION_PERIOD")))
        return DataStatus::eDataStatus::DataStatus_BEFORE_DATA_RETENTION_PERIOD;
    if (val == utility::conversions::to_string_t(U("BEFORE_PIN_DATA_RETENTION_PERIOD")))
        return DataStatus::eDataStatus::DataStatus_BEFORE_PIN_DATA_RETENTION_PERIOD;
    if (val == utility::conversions::to_string_t(U("BEFORE_METRIC_START_DATE")))
        return DataStatus::eDataStatus::DataStatus_BEFORE_METRIC_START_DATE;
    if (val == utility::conversions::to_string_t(U("BEFORE_CORE_METRIC_START_DATE")))
        return DataStatus::eDataStatus::DataStatus_BEFORE_CORE_METRIC_START_DATE;
    if (val == utility::conversions::to_string_t(U("BEFORE_PIN_FORMAT_METRIC_START_DATE")))
        return DataStatus::eDataStatus::DataStatus_BEFORE_PIN_FORMAT_METRIC_START_DATE;
    if (val == utility::conversions::to_string_t(U("BEFORE_AUDIENCE_METRIC_START_DATE")))
        return DataStatus::eDataStatus::DataStatus_BEFORE_AUDIENCE_METRIC_START_DATE;
    if (val == utility::conversions::to_string_t(U("BEFORE_AUDIENCE_MONTHLY_METRIC_START_DATE")))
        return DataStatus::eDataStatus::DataStatus_BEFORE_AUDIENCE_MONTHLY_METRIC_START_DATE;
    if (val == utility::conversions::to_string_t(U("BEFORE_VIDEO_METRIC_START_DATE")))
        return DataStatus::eDataStatus::DataStatus_BEFORE_VIDEO_METRIC_START_DATE;
    if (val == utility::conversions::to_string_t(U("BEFORE_CONVERSION_METRIC_START_DATE")))
        return DataStatus::eDataStatus::DataStatus_BEFORE_CONVERSION_METRIC_START_DATE;
    if (val == utility::conversions::to_string_t(U("PURCHASERS_METRIC_SMALLER_THAN_THRESHOLD")))
        return DataStatus::eDataStatus::DataStatus_PURCHASERS_METRIC_SMALLER_THAN_THRESHOLD;
    if (val == utility::conversions::to_string_t(U("IN_BAD_TAG_DATE")))
        return DataStatus::eDataStatus::DataStatus_IN_BAD_TAG_DATE;
    if (val == utility::conversions::to_string_t(U("BEFORE_PUBLISHED_METRIC_START_DATE")))
        return DataStatus::eDataStatus::DataStatus_BEFORE_PUBLISHED_METRIC_START_DATE;
    if (val == utility::conversions::to_string_t(U("BEFORE_ASSIST_METRIC_START_DATE")))
        return DataStatus::eDataStatus::DataStatus_BEFORE_ASSIST_METRIC_START_DATE;
    if (val == utility::conversions::to_string_t(U("BEFORE_PIN_CREATED")))
        return DataStatus::eDataStatus::DataStatus_BEFORE_PIN_CREATED;
    if (val == utility::conversions::to_string_t(U("BEFORE_ACCOUNT_CLAIMED")))
        return DataStatus::eDataStatus::DataStatus_BEFORE_ACCOUNT_CLAIMED;
    if (val == utility::conversions::to_string_t(U("BEFORE_DEMOGRAPHIC_FILTERS_START_DATE")))
        return DataStatus::eDataStatus::DataStatus_BEFORE_DEMOGRAPHIC_FILTERS_START_DATE;
    if (val == utility::conversions::to_string_t(U("AUDIENCE_SEGMENT_SMALLER_THAN_THRESHOLD")))
        return DataStatus::eDataStatus::DataStatus_AUDIENCE_SEGMENT_SMALLER_THAN_THRESHOLD;
    if (val == utility::conversions::to_string_t(U("AUDIENCE_TOTAL_SMALLER_THAN_THRESHOLD")))
        return DataStatus::eDataStatus::DataStatus_AUDIENCE_TOTAL_SMALLER_THAN_THRESHOLD;
    if (val == utility::conversions::to_string_t(U("BEFORE_PRODUCT_GROUP_FILTER_START_DATE")))
        return DataStatus::eDataStatus::DataStatus_BEFORE_PRODUCT_GROUP_FILTER_START_DATE;
    return {};
}

EnumUnderlyingType fromEnum(DataStatus::eDataStatus e)
{
    switch (e)
    {
    case DataStatus::eDataStatus::DataStatus_PROCESSING:
        return U("PROCESSING");
    case DataStatus::eDataStatus::DataStatus_READY:
        return U("READY");
    case DataStatus::eDataStatus::DataStatus_ESTIMATE:
        return U("ESTIMATE");
    case DataStatus::eDataStatus::DataStatus_BEFORE_BUSINESS_CREATED:
        return U("BEFORE_BUSINESS_CREATED");
    case DataStatus::eDataStatus::DataStatus_BEFORE_DATA_RETENTION_PERIOD:
        return U("BEFORE_DATA_RETENTION_PERIOD");
    case DataStatus::eDataStatus::DataStatus_BEFORE_PIN_DATA_RETENTION_PERIOD:
        return U("BEFORE_PIN_DATA_RETENTION_PERIOD");
    case DataStatus::eDataStatus::DataStatus_BEFORE_METRIC_START_DATE:
        return U("BEFORE_METRIC_START_DATE");
    case DataStatus::eDataStatus::DataStatus_BEFORE_CORE_METRIC_START_DATE:
        return U("BEFORE_CORE_METRIC_START_DATE");
    case DataStatus::eDataStatus::DataStatus_BEFORE_PIN_FORMAT_METRIC_START_DATE:
        return U("BEFORE_PIN_FORMAT_METRIC_START_DATE");
    case DataStatus::eDataStatus::DataStatus_BEFORE_AUDIENCE_METRIC_START_DATE:
        return U("BEFORE_AUDIENCE_METRIC_START_DATE");
    case DataStatus::eDataStatus::DataStatus_BEFORE_AUDIENCE_MONTHLY_METRIC_START_DATE:
        return U("BEFORE_AUDIENCE_MONTHLY_METRIC_START_DATE");
    case DataStatus::eDataStatus::DataStatus_BEFORE_VIDEO_METRIC_START_DATE:
        return U("BEFORE_VIDEO_METRIC_START_DATE");
    case DataStatus::eDataStatus::DataStatus_BEFORE_CONVERSION_METRIC_START_DATE:
        return U("BEFORE_CONVERSION_METRIC_START_DATE");
    case DataStatus::eDataStatus::DataStatus_PURCHASERS_METRIC_SMALLER_THAN_THRESHOLD:
        return U("PURCHASERS_METRIC_SMALLER_THAN_THRESHOLD");
    case DataStatus::eDataStatus::DataStatus_IN_BAD_TAG_DATE:
        return U("IN_BAD_TAG_DATE");
    case DataStatus::eDataStatus::DataStatus_BEFORE_PUBLISHED_METRIC_START_DATE:
        return U("BEFORE_PUBLISHED_METRIC_START_DATE");
    case DataStatus::eDataStatus::DataStatus_BEFORE_ASSIST_METRIC_START_DATE:
        return U("BEFORE_ASSIST_METRIC_START_DATE");
    case DataStatus::eDataStatus::DataStatus_BEFORE_PIN_CREATED:
        return U("BEFORE_PIN_CREATED");
    case DataStatus::eDataStatus::DataStatus_BEFORE_ACCOUNT_CLAIMED:
        return U("BEFORE_ACCOUNT_CLAIMED");
    case DataStatus::eDataStatus::DataStatus_BEFORE_DEMOGRAPHIC_FILTERS_START_DATE:
        return U("BEFORE_DEMOGRAPHIC_FILTERS_START_DATE");
    case DataStatus::eDataStatus::DataStatus_AUDIENCE_SEGMENT_SMALLER_THAN_THRESHOLD:
        return U("AUDIENCE_SEGMENT_SMALLER_THAN_THRESHOLD");
    case DataStatus::eDataStatus::DataStatus_AUDIENCE_TOTAL_SMALLER_THAN_THRESHOLD:
        return U("AUDIENCE_TOTAL_SMALLER_THAN_THRESHOLD");
    case DataStatus::eDataStatus::DataStatus_BEFORE_PRODUCT_GROUP_FILTER_START_DATE:
        return U("BEFORE_PRODUCT_GROUP_FILTER_START_DATE");
    default:
        break;
    }
    return {};
}
}

DataStatus::DataStatus()
{
}

DataStatus::~DataStatus()
{
}

void DataStatus::validate()
{
    // TODO: implement validation
}

web::json::value DataStatus::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool DataStatus::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void DataStatus::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool DataStatus::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

DataStatus::eDataStatus DataStatus::getValue() const
{
   return m_value;
}

void DataStatus::setValue(DataStatus::eDataStatus const value)
{
   m_value = value;
}


}
}
}
}


