/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AdAccountCreateSubscriptionRequest_partner_metadata.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AdAccountCreateSubscriptionRequest_partner_metadata::AdAccountCreateSubscriptionRequest_partner_metadata()
{
    m_Subscriber_key = utility::conversions::to_string_t("");
    m_Subscriber_keyIsSet = false;
}

AdAccountCreateSubscriptionRequest_partner_metadata::~AdAccountCreateSubscriptionRequest_partner_metadata()
{
}

void AdAccountCreateSubscriptionRequest_partner_metadata::validate()
{
    // TODO: implement validation
}

web::json::value AdAccountCreateSubscriptionRequest_partner_metadata::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Subscriber_keyIsSet)
    {
        val[utility::conversions::to_string_t(U("subscriber_key"))] = ModelBase::toJson(m_Subscriber_key);
    }

    return val;
}

bool AdAccountCreateSubscriptionRequest_partner_metadata::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("subscriber_key"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subscriber_key")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubscriberKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubscriberKey);
            setSubscriberKey(refVal_setSubscriberKey);
        }
    }
    return ok;
}

void AdAccountCreateSubscriptionRequest_partner_metadata::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Subscriber_keyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subscriber_key")), m_Subscriber_key));
    }
}

bool AdAccountCreateSubscriptionRequest_partner_metadata::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("subscriber_key"))))
    {
        utility::string_t refVal_setSubscriberKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subscriber_key"))), refVal_setSubscriberKey );
        setSubscriberKey(refVal_setSubscriberKey);
    }
    return ok;
}

utility::string_t AdAccountCreateSubscriptionRequest_partner_metadata::getSubscriberKey() const
{
    return m_Subscriber_key;
}

void AdAccountCreateSubscriptionRequest_partner_metadata::setSubscriberKey(const utility::string_t& value)
{
    m_Subscriber_key = value;
    m_Subscriber_keyIsSet = true;
}

bool AdAccountCreateSubscriptionRequest_partner_metadata::subscriberKeyIsSet() const
{
    return m_Subscriber_keyIsSet;
}

void AdAccountCreateSubscriptionRequest_partner_metadata::unsetSubscriber_key()
{
    m_Subscriber_keyIsSet = false;
}
}
}
}
}


