/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/DeletedMembersResponse.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



DeletedMembersResponse::DeletedMembersResponse()
{
    m_Deleted_membersIsSet = false;
}

DeletedMembersResponse::~DeletedMembersResponse()
{
}

void DeletedMembersResponse::validate()
{
    // TODO: implement validation
}

web::json::value DeletedMembersResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Deleted_membersIsSet)
    {
        val[utility::conversions::to_string_t(U("deleted_members"))] = ModelBase::toJson(m_Deleted_members);
    }

    return val;
}

bool DeletedMembersResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("deleted_members"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deleted_members")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setDeletedMembers;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeletedMembers);
            setDeletedMembers(refVal_setDeletedMembers);
        }
    }
    return ok;
}

void DeletedMembersResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Deleted_membersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deleted_members")), m_Deleted_members));
    }
}

bool DeletedMembersResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("deleted_members"))))
    {
        std::vector<utility::string_t> refVal_setDeletedMembers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deleted_members"))), refVal_setDeletedMembers );
        setDeletedMembers(refVal_setDeletedMembers);
    }
    return ok;
}

std::vector<utility::string_t>& DeletedMembersResponse::getDeletedMembers()
{
    return m_Deleted_members;
}

void DeletedMembersResponse::setDeletedMembers(const std::vector<utility::string_t>& value)
{
    m_Deleted_members = value;
    m_Deleted_membersIsSet = true;
}

bool DeletedMembersResponse::deletedMembersIsSet() const
{
    return m_Deleted_membersIsSet;
}

void DeletedMembersResponse::unsetDeleted_members()
{
    m_Deleted_membersIsSet = false;
}
}
}
}
}


