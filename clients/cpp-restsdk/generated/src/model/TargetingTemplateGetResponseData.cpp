/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/TargetingTemplateGetResponseData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



TargetingTemplateGetResponseData::TargetingTemplateGetResponseData()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Auto_targeting_enabled = false;
    m_Auto_targeting_enabledIsSet = false;
    m_Targeting_attributesIsSet = false;
    m_Placement_groupIsSet = false;
    m_KeywordsIsSet = false;
    m_Tracking_urlsIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Created_time = 0;
    m_Created_timeIsSet = false;
    m_Updated_time = 0;
    m_Updated_timeIsSet = false;
    m_Ad_account_id = utility::conversions::to_string_t("");
    m_Ad_account_idIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_SizingIsSet = false;
    m_Valid = false;
    m_ValidIsSet = false;
}

TargetingTemplateGetResponseData::~TargetingTemplateGetResponseData()
{
}

void TargetingTemplateGetResponseData::validate()
{
    // TODO: implement validation
}

web::json::value TargetingTemplateGetResponseData::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_Auto_targeting_enabledIsSet)
    {
        val[utility::conversions::to_string_t(U("auto_targeting_enabled"))] = ModelBase::toJson(m_Auto_targeting_enabled);
    }
    if(m_Targeting_attributesIsSet)
    {
        val[utility::conversions::to_string_t(U("targeting_attributes"))] = ModelBase::toJson(m_Targeting_attributes);
    }
    if(m_Placement_groupIsSet)
    {
        val[utility::conversions::to_string_t(U("placement_group"))] = ModelBase::toJson(m_Placement_group);
    }
    if(m_KeywordsIsSet)
    {
        val[utility::conversions::to_string_t(U("keywords"))] = ModelBase::toJson(m_Keywords);
    }
    if(m_Tracking_urlsIsSet)
    {
        val[utility::conversions::to_string_t(U("tracking_urls"))] = ModelBase::toJson(m_Tracking_urls);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Created_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("created_time"))] = ModelBase::toJson(m_Created_time);
    }
    if(m_Updated_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("updated_time"))] = ModelBase::toJson(m_Updated_time);
    }
    if(m_Ad_account_idIsSet)
    {
        val[utility::conversions::to_string_t(U("ad_account_id"))] = ModelBase::toJson(m_Ad_account_id);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_SizingIsSet)
    {
        val[utility::conversions::to_string_t(U("sizing"))] = ModelBase::toJson(m_Sizing);
    }
    if(m_ValidIsSet)
    {
        val[utility::conversions::to_string_t(U("valid"))] = ModelBase::toJson(m_Valid);
    }

    return val;
}

bool TargetingTemplateGetResponseData::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("auto_targeting_enabled"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("auto_targeting_enabled")));
        if(!fieldValue.is_null())
        {
            bool refVal_setAutoTargetingEnabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAutoTargetingEnabled);
            setAutoTargetingEnabled(refVal_setAutoTargetingEnabled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("targeting_attributes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("targeting_attributes")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TargetingSpec> refVal_setTargetingAttributes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTargetingAttributes);
            setTargetingAttributes(refVal_setTargetingAttributes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("placement_group"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("placement_group")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PlacementGroupType> refVal_setPlacementGroup;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlacementGroup);
            setPlacementGroup(refVal_setPlacementGroup);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("keywords"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("keywords")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<TargetingTemplateKeyword>> refVal_setKeywords;
            ok &= ModelBase::fromJson(fieldValue, refVal_setKeywords);
            setKeywords(refVal_setKeywords);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tracking_urls"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tracking_urls")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TrackingUrls> refVal_setTrackingUrls;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTrackingUrls);
            setTrackingUrls(refVal_setTrackingUrls);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_time")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCreatedTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedTime);
            setCreatedTime(refVal_setCreatedTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updated_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updated_time")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setUpdatedTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedTime);
            setUpdatedTime(refVal_setUpdatedTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ad_account_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ad_account_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAdAccountId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdAccountId);
            setAdAccountId(refVal_setAdAccountId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sizing"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sizing")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TargetingTemplateAudienceSizing> refVal_setSizing;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSizing);
            setSizing(refVal_setSizing);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("valid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("valid")));
        if(!fieldValue.is_null())
        {
            bool refVal_setValid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValid);
            setValid(refVal_setValid);
        }
    }
    return ok;
}

void TargetingTemplateGetResponseData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_Auto_targeting_enabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("auto_targeting_enabled")), m_Auto_targeting_enabled));
    }
    if(m_Targeting_attributesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("targeting_attributes")), m_Targeting_attributes));
    }
    if(m_Placement_groupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("placement_group")), m_Placement_group));
    }
    if(m_KeywordsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("keywords")), m_Keywords));
    }
    if(m_Tracking_urlsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tracking_urls")), m_Tracking_urls));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Created_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_time")), m_Created_time));
    }
    if(m_Updated_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updated_time")), m_Updated_time));
    }
    if(m_Ad_account_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ad_account_id")), m_Ad_account_id));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_SizingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sizing")), m_Sizing));
    }
    if(m_ValidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("valid")), m_Valid));
    }
}

bool TargetingTemplateGetResponseData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("auto_targeting_enabled"))))
    {
        bool refVal_setAutoTargetingEnabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("auto_targeting_enabled"))), refVal_setAutoTargetingEnabled );
        setAutoTargetingEnabled(refVal_setAutoTargetingEnabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("targeting_attributes"))))
    {
        std::shared_ptr<TargetingSpec> refVal_setTargetingAttributes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("targeting_attributes"))), refVal_setTargetingAttributes );
        setTargetingAttributes(refVal_setTargetingAttributes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("placement_group"))))
    {
        std::shared_ptr<PlacementGroupType> refVal_setPlacementGroup;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("placement_group"))), refVal_setPlacementGroup );
        setPlacementGroup(refVal_setPlacementGroup);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("keywords"))))
    {
        std::vector<std::shared_ptr<TargetingTemplateKeyword>> refVal_setKeywords;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("keywords"))), refVal_setKeywords );
        setKeywords(refVal_setKeywords);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tracking_urls"))))
    {
        std::shared_ptr<TrackingUrls> refVal_setTrackingUrls;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tracking_urls"))), refVal_setTrackingUrls );
        setTrackingUrls(refVal_setTrackingUrls);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_time"))))
    {
        int32_t refVal_setCreatedTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_time"))), refVal_setCreatedTime );
        setCreatedTime(refVal_setCreatedTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updated_time"))))
    {
        int32_t refVal_setUpdatedTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updated_time"))), refVal_setUpdatedTime );
        setUpdatedTime(refVal_setUpdatedTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ad_account_id"))))
    {
        utility::string_t refVal_setAdAccountId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ad_account_id"))), refVal_setAdAccountId );
        setAdAccountId(refVal_setAdAccountId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sizing"))))
    {
        std::shared_ptr<TargetingTemplateAudienceSizing> refVal_setSizing;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sizing"))), refVal_setSizing );
        setSizing(refVal_setSizing);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("valid"))))
    {
        bool refVal_setValid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("valid"))), refVal_setValid );
        setValid(refVal_setValid);
    }
    return ok;
}

utility::string_t TargetingTemplateGetResponseData::getName() const
{
    return m_Name;
}

void TargetingTemplateGetResponseData::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool TargetingTemplateGetResponseData::nameIsSet() const
{
    return m_NameIsSet;
}

void TargetingTemplateGetResponseData::unsetName()
{
    m_NameIsSet = false;
}
bool TargetingTemplateGetResponseData::isAutoTargetingEnabled() const
{
    return m_Auto_targeting_enabled;
}

void TargetingTemplateGetResponseData::setAutoTargetingEnabled(bool value)
{
    m_Auto_targeting_enabled = value;
    m_Auto_targeting_enabledIsSet = true;
}

bool TargetingTemplateGetResponseData::autoTargetingEnabledIsSet() const
{
    return m_Auto_targeting_enabledIsSet;
}

void TargetingTemplateGetResponseData::unsetAuto_targeting_enabled()
{
    m_Auto_targeting_enabledIsSet = false;
}
std::shared_ptr<TargetingSpec> TargetingTemplateGetResponseData::getTargetingAttributes() const
{
    return m_Targeting_attributes;
}

void TargetingTemplateGetResponseData::setTargetingAttributes(const std::shared_ptr<TargetingSpec>& value)
{
    m_Targeting_attributes = value;
    m_Targeting_attributesIsSet = true;
}

bool TargetingTemplateGetResponseData::targetingAttributesIsSet() const
{
    return m_Targeting_attributesIsSet;
}

void TargetingTemplateGetResponseData::unsetTargeting_attributes()
{
    m_Targeting_attributesIsSet = false;
}
std::shared_ptr<PlacementGroupType> TargetingTemplateGetResponseData::getPlacementGroup() const
{
    return m_Placement_group;
}

void TargetingTemplateGetResponseData::setPlacementGroup(const std::shared_ptr<PlacementGroupType>& value)
{
    m_Placement_group = value;
    m_Placement_groupIsSet = true;
}

bool TargetingTemplateGetResponseData::placementGroupIsSet() const
{
    return m_Placement_groupIsSet;
}

void TargetingTemplateGetResponseData::unsetPlacement_group()
{
    m_Placement_groupIsSet = false;
}
std::vector<std::shared_ptr<TargetingTemplateKeyword>>& TargetingTemplateGetResponseData::getKeywords()
{
    return m_Keywords;
}

void TargetingTemplateGetResponseData::setKeywords(const std::vector<std::shared_ptr<TargetingTemplateKeyword>>& value)
{
    m_Keywords = value;
    m_KeywordsIsSet = true;
}

bool TargetingTemplateGetResponseData::keywordsIsSet() const
{
    return m_KeywordsIsSet;
}

void TargetingTemplateGetResponseData::unsetKeywords()
{
    m_KeywordsIsSet = false;
}
std::shared_ptr<TrackingUrls> TargetingTemplateGetResponseData::getTrackingUrls() const
{
    return m_Tracking_urls;
}

void TargetingTemplateGetResponseData::setTrackingUrls(const std::shared_ptr<TrackingUrls>& value)
{
    m_Tracking_urls = value;
    m_Tracking_urlsIsSet = true;
}

bool TargetingTemplateGetResponseData::trackingUrlsIsSet() const
{
    return m_Tracking_urlsIsSet;
}

void TargetingTemplateGetResponseData::unsetTracking_urls()
{
    m_Tracking_urlsIsSet = false;
}
utility::string_t TargetingTemplateGetResponseData::getId() const
{
    return m_Id;
}

void TargetingTemplateGetResponseData::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool TargetingTemplateGetResponseData::idIsSet() const
{
    return m_IdIsSet;
}

void TargetingTemplateGetResponseData::unsetId()
{
    m_IdIsSet = false;
}
int32_t TargetingTemplateGetResponseData::getCreatedTime() const
{
    return m_Created_time;
}

void TargetingTemplateGetResponseData::setCreatedTime(int32_t value)
{
    m_Created_time = value;
    m_Created_timeIsSet = true;
}

bool TargetingTemplateGetResponseData::createdTimeIsSet() const
{
    return m_Created_timeIsSet;
}

void TargetingTemplateGetResponseData::unsetCreated_time()
{
    m_Created_timeIsSet = false;
}
int32_t TargetingTemplateGetResponseData::getUpdatedTime() const
{
    return m_Updated_time;
}

void TargetingTemplateGetResponseData::setUpdatedTime(int32_t value)
{
    m_Updated_time = value;
    m_Updated_timeIsSet = true;
}

bool TargetingTemplateGetResponseData::updatedTimeIsSet() const
{
    return m_Updated_timeIsSet;
}

void TargetingTemplateGetResponseData::unsetUpdated_time()
{
    m_Updated_timeIsSet = false;
}
utility::string_t TargetingTemplateGetResponseData::getAdAccountId() const
{
    return m_Ad_account_id;
}

void TargetingTemplateGetResponseData::setAdAccountId(const utility::string_t& value)
{
    m_Ad_account_id = value;
    m_Ad_account_idIsSet = true;
}

bool TargetingTemplateGetResponseData::adAccountIdIsSet() const
{
    return m_Ad_account_idIsSet;
}

void TargetingTemplateGetResponseData::unsetAd_account_id()
{
    m_Ad_account_idIsSet = false;
}
utility::string_t TargetingTemplateGetResponseData::getStatus() const
{
    return m_Status;
}

void TargetingTemplateGetResponseData::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool TargetingTemplateGetResponseData::statusIsSet() const
{
    return m_StatusIsSet;
}

void TargetingTemplateGetResponseData::unsetStatus()
{
    m_StatusIsSet = false;
}
std::shared_ptr<TargetingTemplateAudienceSizing> TargetingTemplateGetResponseData::getSizing() const
{
    return m_Sizing;
}

void TargetingTemplateGetResponseData::setSizing(const std::shared_ptr<TargetingTemplateAudienceSizing>& value)
{
    m_Sizing = value;
    m_SizingIsSet = true;
}

bool TargetingTemplateGetResponseData::sizingIsSet() const
{
    return m_SizingIsSet;
}

void TargetingTemplateGetResponseData::unsetSizing()
{
    m_SizingIsSet = false;
}
bool TargetingTemplateGetResponseData::isValid() const
{
    return m_Valid;
}

void TargetingTemplateGetResponseData::setValid(bool value)
{
    m_Valid = value;
    m_ValidIsSet = true;
}

bool TargetingTemplateGetResponseData::validIsSet() const
{
    return m_ValidIsSet;
}

void TargetingTemplateGetResponseData::unsetValid()
{
    m_ValidIsSet = false;
}
}
}
}
}


