#import <Foundation/Foundation.h>
#import "OAIAccount.h"
#import "OAIAnalyticsMetricsResponse.h"
#import "OAIBoardsUserFollowsList200Response.h"
#import "OAIError.h"
#import "OAIFollowUserRequest.h"
#import "OAIFollowersList200Response.h"
#import "OAILinkedBusiness.h"
#import "OAITopPinsAnalyticsResponse.h"
#import "OAITopVideoPinsAnalyticsResponse.h"
#import "OAIUserAccountFollowedInterests200Response.h"
#import "OAIUserFollowingFeedType.h"
#import "OAIUserFollowingGet200Response.h"
#import "OAIUserSummary.h"
#import "OAIUserWebsiteSummary.h"
#import "OAIUserWebsiteVerificationCode.h"
#import "OAIUserWebsiteVerifyRequest.h"
#import "OAIUserWebsitesGet200Response.h"
#import "OAIApi.h"

/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface OAIUserAccountApi: NSObject <OAIApi>

extern NSString* kOAIUserAccountApiErrorDomain;
extern NSInteger kOAIUserAccountApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(OAIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// List following boards
/// Get a list of the boards a user follows. The request returns a board summary object array.
///
/// @param bookmark Cursor used to fetch the next page of items (optional)
/// @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional) (default to @25)
/// @param explicitFollowing Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional) (default to @(NO))
/// @param adAccountId Unique identifier of an ad account. (optional)
/// 
///  code:200 message:"Success",
///  code:400 message:"Invalid user id",
///  code:0 message:"Unexpected error"
///
/// @return OAIBoardsUserFollowsList200Response*
-(NSURLSessionTask*) boardsUserFollowsListWithBookmark: (NSString*) bookmark
    pageSize: (NSNumber*) pageSize
    explicitFollowing: (NSNumber*) explicitFollowing
    adAccountId: (NSString*) adAccountId
    completionHandler: (void (^)(OAIBoardsUserFollowsList200Response* output, NSError* error)) handler;


/// Follow user
/// <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/getting-started/beta-and-advanced-access/'>Learn more</a>.</strong>  Use this request, as a signed-in user, to follow another user.
///
/// @param username A valid username
/// @param followUserRequest Follow a user.
/// 
///  code:200 message:"Success",
///  code:404 message:"User not found",
///  code:0 message:"Unexpected error"
///
/// @return OAIUserSummary*
-(NSURLSessionTask*) followUserUpdateWithUsername: (NSString*) username
    followUserRequest: (OAIFollowUserRequest*) followUserRequest
    completionHandler: (void (^)(OAIUserSummary* output, NSError* error)) handler;


/// List followers
/// Get a list of your followers.
///
/// @param bookmark Cursor used to fetch the next page of items (optional)
/// @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional) (default to @25)
/// 
///  code:200 message:"Success",
///  code:400 message:"Invalid user id",
///  code:0 message:"Unexpected error"
///
/// @return OAIFollowersList200Response*
-(NSURLSessionTask*) followersListWithBookmark: (NSString*) bookmark
    pageSize: (NSNumber*) pageSize
    completionHandler: (void (^)(OAIFollowersList200Response* output, NSError* error)) handler;


/// List linked businesses
/// Get a list of your linked business accounts.
///
/// 
///  code:200 message:"Success",
///  code:0 message:"Unexpected error"
///
/// @return NSArray<OAILinkedBusiness>*
-(NSURLSessionTask*) linkedBusinessAccountsGetWithCompletionHandler: 
    (void (^)(NSArray<OAILinkedBusiness>* output, NSError* error)) handler;


/// Unverify website
/// Unverifu a website verified by the signed-in user.
///
/// @param website Website with path or domain only
/// 
///  code:204 message:"Successfully unverified website",
///  code:404 message:"Website not in user list.",
///  code:0 message:"Unexpected error"
///
/// @return void
-(NSURLSessionTask*) unverifyWebsiteDeleteWithWebsite: (NSString*) website
    completionHandler: (void (^)(NSError* error)) handler;


/// Get user account analytics
/// Get analytics for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".
///
/// @param startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
/// @param endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
/// @param fromClaimedContent Filter on Pins that match your claimed domain. (optional) (default to @"BOTH")
/// @param pinFormat Pin formats to get data for, default is all. (optional) (default to @"ALL")
/// @param appTypes Apps or devices to get data for, default is all. (optional) (default to @"ALL")
/// @param contentType Filter to paid or organic data. Default is all. (optional) (default to @"ALL")
/// @param source Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional) (default to @"ALL")
/// @param metricTypes Metric types to get data for, default is all.  (optional)
/// @param splitField How to split the data into groups. Not including this param means data won&#39;t be split. (optional) (default to @"NO_SPLIT")
/// @param adAccountId Unique identifier of an ad account. (optional)
/// 
///  code:200 message:"Success",
///  code:400 message:"Invalid user accounts analytics parameters.",
///  code:403 message:"Not authorized to access the user account analytics.",
///  code:0 message:"Unexpected error"
///
/// @return NSDictionary<OAIAnalyticsMetricsResponse>*
-(NSURLSessionTask*) userAccountAnalyticsWithStartDate: (NSDate*) startDate
    endDate: (NSDate*) endDate
    fromClaimedContent: (NSString*) fromClaimedContent
    pinFormat: (NSString*) pinFormat
    appTypes: (NSString*) appTypes
    contentType: (NSString*) contentType
    source: (NSString*) source
    metricTypes: (NSArray<NSString*>*) metricTypes
    splitField: (NSString*) splitField
    adAccountId: (NSString*) adAccountId
    completionHandler: (void (^)(NSDictionary<OAIAnalyticsMetricsResponse>* output, NSError* error)) handler;


/// Get user account top pins analytics
/// Gets analytics data about a user's top pins (limited to the top 50). - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".
///
/// @param startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
/// @param endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
/// @param sortBy Specify sorting order for metrics
/// @param fromClaimedContent Filter on Pins that match your claimed domain. (optional) (default to @"BOTH")
/// @param pinFormat Pin formats to get data for, default is all. (optional) (default to @"ALL")
/// @param appTypes Apps or devices to get data for, default is all. (optional) (default to @"ALL")
/// @param contentType Filter to paid or organic data. Default is all. (optional) (default to @"ALL")
/// @param source Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional) (default to @"ALL")
/// @param metricTypes Metric types to get data for, default is all.  (optional)
/// @param numOfPins Number of pins to include, default is 10. Max is 50. (optional) (default to @10)
/// @param createdInLastNDays Get metrics for pins created in the last \&quot;n\&quot; days. (optional)
/// @param adAccountId Unique identifier of an ad account. (optional)
/// 
///  code:200 message:"Success",
///  code:403 message:"Not authorized to access the user account analytics.",
///  code:0 message:"Unexpected error"
///
/// @return OAITopPinsAnalyticsResponse*
-(NSURLSessionTask*) userAccountAnalyticsTopPinsWithStartDate: (NSDate*) startDate
    endDate: (NSDate*) endDate
    sortBy: (NSString*) sortBy
    fromClaimedContent: (NSString*) fromClaimedContent
    pinFormat: (NSString*) pinFormat
    appTypes: (NSString*) appTypes
    contentType: (NSString*) contentType
    source: (NSString*) source
    metricTypes: (NSArray<NSString*>*) metricTypes
    numOfPins: (NSNumber*) numOfPins
    createdInLastNDays: (NSNumber*) createdInLastNDays
    adAccountId: (NSString*) adAccountId
    completionHandler: (void (^)(OAITopPinsAnalyticsResponse* output, NSError* error)) handler;


/// Get user account top video pins analytics
/// Gets analytics data about a user's top video pins (limited to the top 50). - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".
///
/// @param startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
/// @param endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
/// @param sortBy Specify sorting order for video metrics
/// @param fromClaimedContent Filter on Pins that match your claimed domain. (optional) (default to @"BOTH")
/// @param pinFormat Pin formats to get data for, default is all. (optional) (default to @"ALL")
/// @param appTypes Apps or devices to get data for, default is all. (optional) (default to @"ALL")
/// @param contentType Filter to paid or organic data. Default is all. (optional) (default to @"ALL")
/// @param source Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional) (default to @"ALL")
/// @param metricTypes Metric types to get video data for, default is all.  (optional)
/// @param numOfPins Number of pins to include, default is 10. Max is 50. (optional) (default to @10)
/// @param createdInLastNDays Get metrics for pins created in the last \&quot;n\&quot; days. (optional)
/// @param adAccountId Unique identifier of an ad account. (optional)
/// 
///  code:200 message:"Success",
///  code:403 message:"Not authorized to access the user account analytics.",
///  code:0 message:"Unexpected error"
///
/// @return OAITopVideoPinsAnalyticsResponse*
-(NSURLSessionTask*) userAccountAnalyticsTopVideoPinsWithStartDate: (NSDate*) startDate
    endDate: (NSDate*) endDate
    sortBy: (NSString*) sortBy
    fromClaimedContent: (NSString*) fromClaimedContent
    pinFormat: (NSString*) pinFormat
    appTypes: (NSString*) appTypes
    contentType: (NSString*) contentType
    source: (NSString*) source
    metricTypes: (NSArray<NSString*>*) metricTypes
    numOfPins: (NSNumber*) numOfPins
    createdInLastNDays: (NSNumber*) createdInLastNDays
    adAccountId: (NSString*) adAccountId
    completionHandler: (void (^)(OAITopVideoPinsAnalyticsResponse* output, NSError* error)) handler;


/// List following interests
/// Get a list of a user's following interests in one place.
///
/// @param username A valid username
/// @param bookmark Cursor used to fetch the next page of items (optional)
/// @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional) (default to @25)
/// 
///  code:200 message:"Success",
///  code:400 message:"Invalid parameters",
///  code:401 message:"Authorization failed",
///  code:404 message:"User not found",
///  code:0 message:"Unexpected error"
///
/// @return OAIUserAccountFollowedInterests200Response*
-(NSURLSessionTask*) userAccountFollowedInterestsWithUsername: (NSString*) username
    bookmark: (NSString*) bookmark
    pageSize: (NSNumber*) pageSize
    completionHandler: (void (^)(OAIUserAccountFollowedInterests200Response* output, NSError* error)) handler;


/// Get user account
/// Get account information for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". See <a href='/docs/getting-started/using-business-access/'>Understanding Business Access</a> for more information.
///
/// @param adAccountId Unique identifier of an ad account. (optional)
/// 
///  code:200 message:"response",
///  code:403 message:"Not authorized to access the user account.",
///  code:0 message:"Unexpected error"
///
/// @return OAIAccount*
-(NSURLSessionTask*) userAccountGetWithAdAccountId: (NSString*) adAccountId
    completionHandler: (void (^)(OAIAccount* output, NSError* error)) handler;


/// List following
/// Get a list of who a certain user follows.
///
/// @param bookmark Cursor used to fetch the next page of items (optional)
/// @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional) (default to @25)
/// @param feedType Thrift param specifying what type of followees will be kept. Default to include all followees. (optional)
/// @param explicitFollowing Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional) (default to @(NO))
/// @param adAccountId Unique identifier of an ad account. (optional)
/// 
///  code:200 message:"response",
///  code:0 message:"Unexpected error"
///
/// @return OAIUserFollowingGet200Response*
-(NSURLSessionTask*) userFollowingGetWithBookmark: (NSString*) bookmark
    pageSize: (NSNumber*) pageSize
    feedType: (OAIUserFollowingFeedType) feedType
    explicitFollowing: (NSNumber*) explicitFollowing
    adAccountId: (NSString*) adAccountId
    completionHandler: (void (^)(OAIUserFollowingGet200Response* output, NSError* error)) handler;


/// Get user websites
/// Get user websites, claimed or not
///
/// @param bookmark Cursor used to fetch the next page of items (optional)
/// @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional) (default to @25)
/// 
///  code:200 message:"Success",
///  code:403 message:"Not authorized to access the user website list.",
///  code:0 message:"Unexpected error"
///
/// @return OAIUserWebsitesGet200Response*
-(NSURLSessionTask*) userWebsitesGetWithBookmark: (NSString*) bookmark
    pageSize: (NSNumber*) pageSize
    completionHandler: (void (^)(OAIUserWebsitesGet200Response* output, NSError* error)) handler;


/// Verify website
/// Verify a website as a signed-in user.
///
/// @param userWebsiteVerifyRequest Verify a website.
/// @param adAccountId Unique identifier of an ad account. (optional)
/// 
///  code:200 message:"Success",
///  code:0 message:"Unexpected error"
///
/// @return OAIUserWebsiteSummary*
-(NSURLSessionTask*) verifyWebsiteUpdateWithUserWebsiteVerifyRequest: (OAIUserWebsiteVerifyRequest*) userWebsiteVerifyRequest
    adAccountId: (NSString*) adAccountId
    completionHandler: (void (^)(OAIUserWebsiteSummary* output, NSError* error)) handler;


/// Get user verification code for website claiming
/// Get verification code for user to install on the website to claim it.
///
/// @param adAccountId Unique identifier of an ad account. (optional)
/// 
///  code:200 message:"Success",
///  code:403 message:"Not authorized to access the user verification code for website claiming.",
///  code:0 message:"Unexpected error"
///
/// @return OAIUserWebsiteVerificationCode*
-(NSURLSessionTask*) websiteVerificationGetWithAdAccountId: (NSString*) adAccountId
    completionHandler: (void (^)(OAIUserWebsiteVerificationCode* output, NSError* error)) handler;



@end
