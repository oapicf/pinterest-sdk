/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CatalogsReportFeedIngestionStats {
    #[serde(rename = "report_type", skip_serializing_if = "Option::is_none")]
    pub report_type: Option<ReportType>,
    /// ID of the catalog entity.
    #[serde(rename = "catalog_id", skip_serializing_if = "Option::is_none")]
    pub catalog_id: Option<String>,
    /// The event code that a diagnostics aggregated number references
    #[serde(rename = "code", skip_serializing_if = "Option::is_none")]
    pub code: Option<i32>,
    /// A human-friendly label for the event code (e.g, 'AVAILABILITY_INVALID')
    #[serde(rename = "code_label", skip_serializing_if = "Option::is_none")]
    pub code_label: Option<String>,
    /// Title message describing the diagnostic issue
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Number of occurrences of the issue
    #[serde(rename = "occurrences", skip_serializing_if = "Option::is_none")]
    pub occurrences: Option<i32>,
    /// An ERROR means that items have been dropped, while a WARN denotes that items have been ingested despite an issue
    #[serde(rename = "severity", skip_serializing_if = "Option::is_none")]
    pub severity: Option<Severity>,
}

impl CatalogsReportFeedIngestionStats {
    pub fn new() -> CatalogsReportFeedIngestionStats {
        CatalogsReportFeedIngestionStats {
            report_type: None,
            catalog_id: None,
            code: None,
            code_label: None,
            message: None,
            occurrences: None,
            severity: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ReportType {
    #[serde(rename = "FEED_INGESTION_ISSUES")]
    FeedIngestionIssues,
}

impl Default for ReportType {
    fn default() -> ReportType {
        Self::FeedIngestionIssues
    }
}
/// An ERROR means that items have been dropped, while a WARN denotes that items have been ingested despite an issue
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Severity {
    #[serde(rename = "WARN")]
    Warn,
    #[serde(rename = "ERROR")]
    Error,
}

impl Default for Severity {
    fn default() -> Severity {
        Self::Warn
    }
}

