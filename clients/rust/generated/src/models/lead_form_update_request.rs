/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LeadFormUpdateRequest {
    /// Internal name of the lead form.
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    /// A link to the advertiser's privacy policy. This will be included in the lead form's disclosure language.
    #[serde(rename = "privacy_policy_link", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub privacy_policy_link: Option<Option<String>>,
    /// Whether the advertiser has accepted Pinterest's terms of service for creating a lead ad.  By sending us TRUE for this parameter, you agree that (i) you will use any personal information received in compliance with the privacy policy you share with Pinterest, and (ii) you will comply with Pinterest's <a href=\"https://policy.pinterest.com/en/lead-ad-terms\">Lead Ad Terms</a>. As a reminder, all advertising on Pinterest is subject to the <a href=\"https://business.pinterest.com/en/pinterest-advertising-services-agreement/\">Pinterest Advertising Services Agreement</a> or an equivalent agreement as set forth on an IO
    #[serde(rename = "has_accepted_terms", skip_serializing_if = "Option::is_none")]
    pub has_accepted_terms: Option<bool>,
    /// A message for people who complete the form to let them know what happens next.
    #[serde(rename = "completion_message", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub completion_message: Option<Option<String>>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<models::LeadFormStatus>,
    /// Additional disclosure language to be included in the lead form.
    #[serde(rename = "disclosure_language", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub disclosure_language: Option<Option<String>>,
    /// List of questions to be displayed on the lead form.
    #[serde(rename = "questions", skip_serializing_if = "Option::is_none")]
    pub questions: Option<Vec<models::LeadFormQuestion>>,
    /// List of additional policy links to be displayed on the lead form.
    #[serde(rename = "policy_links", skip_serializing_if = "Option::is_none")]
    pub policy_links: Option<Vec<models::LeadFormCommonPolicyLinksInner>>,
    /// The ID of this lead form to be updated
    #[serde(rename = "id")]
    pub id: String,
}

impl LeadFormUpdateRequest {
    pub fn new(id: String) -> LeadFormUpdateRequest {
        LeadFormUpdateRequest {
            name: None,
            privacy_policy_link: None,
            has_accepted_terms: None,
            completion_message: None,
            status: None,
            disclosure_language: None,
            questions: None,
            policy_links: None,
            id,
        }
    }
}

