/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConversionEventsDataInner {
    /// <p>The type of the user event. Please use the right event_name otherwise the event won't be accepted and show up correctly in reports.   <ul>   <li><code>add_to_cart</code></li>   <li><code>checkout</code></li>   <li><code>custom</code></li>   <li><code>lead</code></li>   <li><code>page_visit</code></li>   <li><code>search</code></li>   <li><code>signup</code></li>   <li><code>view_category</code></li>   <li><code>watch_video</code></li>   </ul> </p> 
    #[serde(rename = "event_name")]
    pub event_name: String,
    /// <p>   The source indicating where the conversion event occurred.   <ul>     <li><code>app_android</code></li>     <li><code>app_ios</code></li>     <li><code>web</code></li>     <li><code>offline</code></li>   </ul> </p> 
    #[serde(rename = "action_source")]
    pub action_source: String,
    /// The time when the event happened. Unix timestamp in seconds.
    #[serde(rename = "event_time")]
    pub event_time: i64,
    /// A unique id string that identifies this event and can be used for deduping between events ingested via both the conversion API and Pinterest tracking. Without this, event's data is likely to be double counted and will cause report metric inflation. Third-party vendors make sure this field is updated on both Pinterest tag and Conversions API side before rolling out template for Conversions API.
    #[serde(rename = "event_id")]
    pub event_id: String,
    /// URL of the web conversion event.
    #[serde(rename = "event_source_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub event_source_url: Option<Option<String>>,
    /// When action_source is web or offline, it defines whether the user has opted out of tracking for web conversion events. While when action_source is app_android or app_ios, it defines whether the user has enabled Limit Ad Tracking on their iOS device, or opted out of Ads Personalization on their Android device.
    #[serde(rename = "opt_out", skip_serializing_if = "Option::is_none")]
    pub opt_out: Option<bool>,
    /// The third party partner name responsible to send the event to Conversions API on behalf of the advertiser. The naming convention is \"ss-partnername\" lowercase. E.g ‘ss-shopify’
    #[serde(rename = "partner_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub partner_name: Option<Option<String>>,
    #[serde(rename = "user_data")]
    pub user_data: Box<models::ConversionEventsUserData>,
    #[serde(rename = "custom_data", skip_serializing_if = "Option::is_none")]
    pub custom_data: Option<Box<models::ConversionEventsDataInnerCustomData>>,
    /// The app store app ID.
    #[serde(rename = "app_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub app_id: Option<Option<String>>,
    /// Name of the app.
    #[serde(rename = "app_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub app_name: Option<Option<String>>,
    /// Version of the app.
    #[serde(rename = "app_version", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub app_version: Option<Option<String>>,
    /// Brand of the user device.
    #[serde(rename = "device_brand", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub device_brand: Option<Option<String>>,
    /// User device's mobile carrier.
    #[serde(rename = "device_carrier", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub device_carrier: Option<Option<String>>,
    /// Model of the user device.
    #[serde(rename = "device_model", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub device_model: Option<Option<String>>,
    /// Type of the user device.
    #[serde(rename = "device_type", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub device_type: Option<Option<String>>,
    /// Version of the device operating system.
    #[serde(rename = "os_version", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub os_version: Option<Option<String>>,
    /// Whether the event occurred when the user device was connected to wifi.
    #[serde(rename = "wifi", skip_serializing_if = "Option::is_none")]
    pub wifi: Option<bool>,
    /// Two-character ISO-639-1 language code indicating the user's language.
    #[serde(rename = "language", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub language: Option<Option<String>>,
}

impl ConversionEventsDataInner {
    pub fn new(event_name: String, action_source: String, event_time: i64, event_id: String, user_data: models::ConversionEventsUserData) -> ConversionEventsDataInner {
        ConversionEventsDataInner {
            event_name,
            action_source,
            event_time,
            event_id,
            event_source_url: None,
            opt_out: None,
            partner_name: None,
            user_data: Box::new(user_data),
            custom_data: None,
            app_id: None,
            app_name: None,
            app_version: None,
            device_brand: None,
            device_carrier: None,
            device_model: None,
            device_type: None,
            os_version: None,
            wifi: None,
            language: None,
        }
    }
}

