/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OptimizationGoalMetadataFrequencyGoalMetadata {
    #[serde(rename = "frequency", skip_serializing_if = "Option::is_none")]
    pub frequency: Option<i32>,
    /// User entity counts time range
    #[serde(rename = "timerange", skip_serializing_if = "Option::is_none")]
    pub timerange: Option<Timerange>,
}

impl OptimizationGoalMetadataFrequencyGoalMetadata {
    pub fn new() -> OptimizationGoalMetadataFrequencyGoalMetadata {
        OptimizationGoalMetadataFrequencyGoalMetadata {
            frequency: None,
            timerange: None,
        }
    }
}
/// User entity counts time range
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Timerange {
    #[serde(rename = "THIRTY_DAY")]
    ThirtyDay,
    #[serde(rename = "DAY")]
    Day,
    #[serde(rename = "SEVEN_DAY")]
    SevenDay,
    #[serde(rename = "TWENTY_MINUTE")]
    TwentyMinute,
    #[serde(rename = "TEN_MINUTE")]
    TenMinute,
    #[serde(rename = "TWENTY_FOUR_HOUR")]
    TwentyFourHour,
}

impl Default for Timerange {
    fn default() -> Timerange {
        Self::ThirtyDay
    }
}

