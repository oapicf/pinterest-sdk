/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomerList {
    /// Associated ad account ID.
    #[serde(rename = "ad_account_id", skip_serializing_if = "Option::is_none")]
    pub ad_account_id: Option<String>,
    /// Creation time. Unix timestamp in seconds.
    #[serde(rename = "created_time", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<f64>,
    /// Customer list ID.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Customer list name.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Total number of list updates.  List creation counts as one batch. Each <a href=\"/docs/redoc/#operation/ads_v3_customer_list_add_handler_PUT\">Append</a> or <a href=\"/docs/redoc/#operation/ads_v3_customer_list_remove_handler_PUT\">Remove API</a> call counts as another. List creation via the Ads Manager UI could result in more than one batch since the UI breaks up large lists.
    #[serde(rename = "num_batches", skip_serializing_if = "Option::is_none")]
    pub num_batches: Option<f64>,
    /// Number of removed user records. In a <a href=\"/docs/redoc/#operation/ads_v3_customer_list_remove_handler_PUT\">Remove API</a> call, this counter increases even if the user is not found in the list.
    #[serde(rename = "num_removed_user_records", skip_serializing_if = "Option::is_none")]
    pub num_removed_user_records: Option<f64>,
    /// Number of uploaded user records. In an <a href=\"/docs/redoc/#operation/ads_v3_customer_list_add_handler_PUT\">Append API</a> call, this counter increases even if the uploaded user is already in the list.
    #[serde(rename = "num_uploaded_user_records", skip_serializing_if = "Option::is_none")]
    pub num_uploaded_user_records: Option<f64>,
    /// Customer list status. TOO_SMALL - the list has less than 100 Pinterest users.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// Always \"customerlist\".
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// Last update time. Unix timestamp in seconds.
    #[serde(rename = "updated_time", skip_serializing_if = "Option::is_none")]
    pub updated_time: Option<f64>,
    /// Customer list errors
    #[serde(rename = "exceptions", skip_serializing_if = "Option::is_none")]
    pub exceptions: Option<serde_json::Value>,
}

impl CustomerList {
    pub fn new() -> CustomerList {
        CustomerList {
            ad_account_id: None,
            created_time: None,
            id: None,
            name: None,
            num_batches: None,
            num_removed_user_records: None,
            num_uploaded_user_records: None,
            status: None,
            r#type: None,
            updated_time: None,
            exceptions: None,
        }
    }
}
/// Customer list status. TOO_SMALL - the list has less than 100 Pinterest users.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "PROCESSING")]
    Processing,
    #[serde(rename = "READY")]
    Ready,
    #[serde(rename = "TOO_SMALL")]
    TooSmall,
    #[serde(rename = "UPLOADING")]
    Uploading,
}

impl Default for Status {
    fn default() -> Status {
        Self::Processing
    }
}

