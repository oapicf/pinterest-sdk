/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TrendsSupportedRegion {
    #[serde(rename = "US")]
    Us,
    #[serde(rename = "CA")]
    Ca,
    #[serde(rename = "DE")]
    De,
    #[serde(rename = "FR")]
    Fr,
    #[serde(rename = "ES")]
    Es,
    #[serde(rename = "IT")]
    It,
    #[serde(rename = "DE+AT+CH")]
    DePlusAtPlusCh,
    #[serde(rename = "GB+IE")]
    GbPlusIe,
    #[serde(rename = "IT+ES+PT+GR+MT")]
    ItPlusEsPlusPtPlusGrPlusMt,
    #[serde(rename = "PL+RO+HU+SK+CZ")]
    PlPlusRoPlusHuPlusSkPlusCz,
    #[serde(rename = "SE+DK+FI+NO")]
    SePlusDkPlusFiPlusNo,
    #[serde(rename = "NL+BE+LU")]
    NlPlusBePlusLu,
    #[serde(rename = "AR")]
    Ar,
    #[serde(rename = "BR")]
    Br,
    #[serde(rename = "CO")]
    Co,
    #[serde(rename = "MX")]
    Mx,
    #[serde(rename = "MX+AR+CO+CL")]
    MxPlusArPlusCoPlusCl,
    #[serde(rename = "AU+NZ")]
    AuPlusNz,

}

impl std::fmt::Display for TrendsSupportedRegion {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Us => write!(f, "US"),
            Self::Ca => write!(f, "CA"),
            Self::De => write!(f, "DE"),
            Self::Fr => write!(f, "FR"),
            Self::Es => write!(f, "ES"),
            Self::It => write!(f, "IT"),
            Self::DePlusAtPlusCh => write!(f, "DE+AT+CH"),
            Self::GbPlusIe => write!(f, "GB+IE"),
            Self::ItPlusEsPlusPtPlusGrPlusMt => write!(f, "IT+ES+PT+GR+MT"),
            Self::PlPlusRoPlusHuPlusSkPlusCz => write!(f, "PL+RO+HU+SK+CZ"),
            Self::SePlusDkPlusFiPlusNo => write!(f, "SE+DK+FI+NO"),
            Self::NlPlusBePlusLu => write!(f, "NL+BE+LU"),
            Self::Ar => write!(f, "AR"),
            Self::Br => write!(f, "BR"),
            Self::Co => write!(f, "CO"),
            Self::Mx => write!(f, "MX"),
            Self::MxPlusArPlusCoPlusCl => write!(f, "MX+AR+CO+CL"),
            Self::AuPlusNz => write!(f, "AU+NZ"),
        }
    }
}

impl Default for TrendsSupportedRegion {
    fn default() -> TrendsSupportedRegion {
        Self::Us
    }
}

