/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CatalogsCreativeAssetsFeedsCreateRequest : Request object for creating a feed.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CatalogsCreativeAssetsFeedsCreateRequest {
    #[serde(rename = "default_currency", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub default_currency: Option<Option<models::NullableCurrency>>,
    /// A human-friendly name associated to a given feed.
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "format")]
    pub format: models::CatalogsFormat,
    #[serde(rename = "default_locale")]
    pub default_locale: Box<models::CatalogsFeedsCreateRequestDefaultLocale>,
    #[serde(rename = "default_country")]
    pub default_country: models::Country,
    #[serde(rename = "credentials", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub credentials: Option<Option<Box<models::CatalogsFeedCredentials>>>,
    /// The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
    #[serde(rename = "location")]
    pub location: String,
    #[serde(rename = "preferred_processing_schedule", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub preferred_processing_schedule: Option<Option<Box<models::CatalogsFeedProcessingSchedule>>>,
    #[serde(rename = "catalog_type")]
    pub catalog_type: models::CatalogsType,
    /// Catalog id pertaining to the feed. If not provided, feed will use a default catalog based on type. At the moment a catalog can not have multiple creative assets feeds but this will change in the future.
    #[serde(rename = "catalog_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub catalog_id: Option<Option<String>>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Box<models::CatalogsStatus>>,
}

impl CatalogsCreativeAssetsFeedsCreateRequest {
    /// Request object for creating a feed.
    pub fn new(name: String, format: models::CatalogsFormat, default_locale: models::CatalogsFeedsCreateRequestDefaultLocale, default_country: models::Country, location: String, catalog_type: models::CatalogsType) -> CatalogsCreativeAssetsFeedsCreateRequest {
        CatalogsCreativeAssetsFeedsCreateRequest {
            default_currency: None,
            name,
            format,
            default_locale: Box::new(default_locale),
            default_country,
            credentials: None,
            location,
            preferred_processing_schedule: None,
            catalog_type,
            catalog_id: None,
            status: None,
        }
    }
}

