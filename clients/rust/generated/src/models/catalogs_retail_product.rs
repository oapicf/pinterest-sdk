/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CatalogsRetailProduct {
    #[serde(rename = "catalog_type")]
    pub catalog_type: CatalogType,
    #[serde(rename = "metadata")]
    pub metadata: Box<models::CatalogsRetailProductMetadata>,
    #[serde(rename = "pin", deserialize_with = "Option::deserialize")]
    pub pin: Option<Box<models::Pin>>,
}

impl CatalogsRetailProduct {
    pub fn new(catalog_type: CatalogType, metadata: models::CatalogsRetailProductMetadata, pin: Option<models::Pin>) -> CatalogsRetailProduct {
        CatalogsRetailProduct {
            catalog_type,
            metadata: Box::new(metadata),
            pin: if let Some(x) = pin {Some(Box::new(x))} else {None},
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CatalogType {
    #[serde(rename = "RETAIL")]
    Retail,
}

impl Default for CatalogType {
    fn default() -> CatalogType {
        Self::Retail
    }
}

