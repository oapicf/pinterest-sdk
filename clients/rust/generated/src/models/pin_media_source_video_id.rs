/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PinMediaSourceVideoId : Video ID-based media source
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PinMediaSourceVideoId {
    #[serde(rename = "source_type")]
    pub source_type: SourceType,
    /// Cover image url.
    #[serde(rename = "cover_image_url", skip_serializing_if = "Option::is_none")]
    pub cover_image_url: Option<String>,
    /// Content type for cover image Base64.
    #[serde(rename = "cover_image_content_type", skip_serializing_if = "Option::is_none")]
    pub cover_image_content_type: Option<CoverImageContentType>,
    /// Cover image Base64.
    #[serde(rename = "cover_image_data", skip_serializing_if = "Option::is_none")]
    pub cover_image_data: Option<String>,
    #[serde(rename = "media_id")]
    pub media_id: String,
    /// Set the parameter to false to create the new simplified Pin instead of the standard pin. Currently the field is only available to a list of beta users.
    #[serde(rename = "is_standard", skip_serializing_if = "Option::is_none")]
    pub is_standard: Option<bool>,
}

impl PinMediaSourceVideoId {
    /// Video ID-based media source
    pub fn new(source_type: SourceType, media_id: String) -> PinMediaSourceVideoId {
        PinMediaSourceVideoId {
            source_type,
            cover_image_url: None,
            cover_image_content_type: None,
            cover_image_data: None,
            media_id,
            is_standard: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SourceType {
    #[serde(rename = "video_id")]
    VideoId,
}

impl Default for SourceType {
    fn default() -> SourceType {
        Self::VideoId
    }
}
/// Content type for cover image Base64.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CoverImageContentType {
    #[serde(rename = "image/jpeg")]
    Jpeg,
    #[serde(rename = "image/png")]
    Png,
}

impl Default for CoverImageContentType {
    fn default() -> CoverImageContentType {
        Self::Jpeg
    }
}

