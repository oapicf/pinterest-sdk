/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IntegrationLog : Schema for log sent from an integration application.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntegrationLog {
    /// Timestamp in milliseconds of when the log was executed at the client.
    #[serde(rename = "client_timestamp")]
    pub client_timestamp: i32,
    /// Log event type
    #[serde(rename = "event_type")]
    pub event_type: EventType,
    /// Log level type
    #[serde(rename = "log_level")]
    pub log_level: LogLevel,
    #[serde(rename = "external_business_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub external_business_id: Option<Option<String>>,
    #[serde(rename = "advertiser_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub advertiser_id: Option<Option<String>>,
    #[serde(rename = "merchant_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub merchant_id: Option<Option<String>>,
    #[serde(rename = "tag_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tag_id: Option<Option<String>>,
    #[serde(rename = "feed_profile_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub feed_profile_id: Option<Option<String>>,
    /// Explanation of the event that occured.
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Version number of the integration application.
    #[serde(rename = "app_version_number", skip_serializing_if = "Option::is_none")]
    pub app_version_number: Option<String>,
    /// Version number of the platform the integration application is running on.
    #[serde(rename = "platform_version_number", skip_serializing_if = "Option::is_none")]
    pub platform_version_number: Option<String>,
    #[serde(rename = "error", skip_serializing_if = "Option::is_none")]
    pub error: Option<Box<models::IntegrationLogClientError>>,
    #[serde(rename = "request", skip_serializing_if = "Option::is_none")]
    pub request: Option<Box<models::IntegrationLogClientRequest>>,
}

impl IntegrationLog {
    /// Schema for log sent from an integration application.
    pub fn new(client_timestamp: i32, event_type: EventType, log_level: LogLevel) -> IntegrationLog {
        IntegrationLog {
            client_timestamp,
            event_type,
            log_level,
            external_business_id: None,
            advertiser_id: None,
            merchant_id: None,
            tag_id: None,
            feed_profile_id: None,
            message: None,
            app_version_number: None,
            platform_version_number: None,
            error: None,
            request: None,
        }
    }
}
/// Log event type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EventType {
    #[serde(rename = "APP")]
    App,
    #[serde(rename = "API")]
    Api,
}

impl Default for EventType {
    fn default() -> EventType {
        Self::App
    }
}
/// Log level type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LogLevel {
    #[serde(rename = "INFO")]
    Info,
    #[serde(rename = "WARN")]
    Warn,
    #[serde(rename = "ERROR")]
    Error,
}

impl Default for LogLevel {
    fn default() -> LogLevel {
        Self::Info
    }
}

