/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConversionApiResponseEventsInner {
    /// Whether the event was processed successfully.
    #[serde(rename = "status")]
    pub status: Status,
    /// Error message containing more information about why the event failed to be processed.
    #[serde(rename = "error_message", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub error_message: Option<Option<String>>,
    /// Warning messages about any fields in the event which are not standard. These are not critical to event processing.
    #[serde(rename = "warning_message", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub warning_message: Option<Option<String>>,
}

impl ConversionApiResponseEventsInner {
    pub fn new(status: Status) -> ConversionApiResponseEventsInner {
        ConversionApiResponseEventsInner {
            status,
            error_message: None,
            warning_message: None,
        }
    }
}
/// Whether the event was processed successfully.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "processed")]
    Processed,
}

impl Default for Status {
    fn default() -> Status {
        Self::Failed
    }
}

