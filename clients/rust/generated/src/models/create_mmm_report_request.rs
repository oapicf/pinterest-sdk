/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateMmmReportRequest {
    /// Name of the Marketing Mix Modeling (MMM) report
    #[serde(rename = "report_name")]
    pub report_name: String,
    /// Metric report start date (UTC). Format: YYYY-MM-DD
    #[serde(rename = "start_date")]
    pub start_date: String,
    /// Metric report end date (UTC). Format: YYYY-MM-DD
    #[serde(rename = "end_date")]
    pub end_date: String,
    /// DAY - metrics are broken down daily.<br> WEEK - metrics are broken down weekly.
    #[serde(rename = "granularity")]
    pub granularity: Granularity,
    /// Level of the report
    #[serde(rename = "level")]
    pub level: Level,
    /// List of targeting types
    #[serde(rename = "targeting_types")]
    pub targeting_types: Vec<models::MmmReportingTargetingType>,
    /// Metric and entity columns
    #[serde(rename = "columns")]
    pub columns: Vec<models::MmmReportingColumn>,
    /// A List of countries for filtering
    #[serde(rename = "countries", skip_serializing_if = "Option::is_none")]
    pub countries: Option<Vec<models::TargetingAdvertiserCountry>>,
}

impl CreateMmmReportRequest {
    pub fn new(report_name: String, start_date: String, end_date: String, granularity: Granularity, level: Level, targeting_types: Vec<models::MmmReportingTargetingType>, columns: Vec<models::MmmReportingColumn>) -> CreateMmmReportRequest {
        CreateMmmReportRequest {
            report_name,
            start_date,
            end_date,
            granularity,
            level,
            targeting_types,
            columns,
            countries: None,
        }
    }
}
/// DAY - metrics are broken down daily.<br> WEEK - metrics are broken down weekly.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Granularity {
    #[serde(rename = "DAY")]
    Day,
    #[serde(rename = "WEEK")]
    Week,
}

impl Default for Granularity {
    fn default() -> Granularity {
        Self::Day
    }
}
/// Level of the report
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Level {
    #[serde(rename = "CAMPAIGN_TARGETING")]
    CampaignTargeting,
    #[serde(rename = "AD_GROUP_TARGETING")]
    AdGroupTargeting,
}

impl Default for Level {
    fn default() -> Level {
        Self::CampaignTargeting
    }
}

