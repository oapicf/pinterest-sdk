/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TargetingTemplateCommon {
    /// targeting template name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>.
    #[serde(rename = "auto_targeting_enabled", skip_serializing_if = "Option::is_none")]
    pub auto_targeting_enabled: Option<bool>,
    #[serde(rename = "targeting_attributes", skip_serializing_if = "Option::is_none")]
    pub targeting_attributes: Option<Box<models::TargetingSpec>>,
    #[serde(rename = "placement_group", skip_serializing_if = "Option::is_none")]
    pub placement_group: Option<models::PlacementGroupType>,
    #[serde(rename = "keywords", skip_serializing_if = "Option::is_none")]
    pub keywords: Option<Vec<models::TargetingTemplateKeyword>>,
    #[serde(rename = "tracking_urls", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tracking_urls: Option<Option<Box<models::TrackingUrls>>>,
}

impl TargetingTemplateCommon {
    pub fn new() -> TargetingTemplateCommon {
        TargetingTemplateCommon {
            name: None,
            auto_targeting_enabled: None,
            targeting_attributes: None,
            placement_group: None,
            keywords: None,
            tracking_urls: None,
        }
    }
}

