/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CreativeType : Ad creative type enum. For update, only draft ads may update creative type. </p><strong>Note:</strong> SHOP_THE_PIN has been deprecated. Please use COLLECTION instead.
/// Ad creative type enum. For update, only draft ads may update creative type. </p><strong>Note:</strong> SHOP_THE_PIN has been deprecated. Please use COLLECTION instead.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CreativeType {
    #[serde(rename = "REGULAR")]
    Regular,
    #[serde(rename = "VIDEO")]
    Video,
    #[serde(rename = "SHOPPING")]
    Shopping,
    #[serde(rename = "CAROUSEL")]
    Carousel,
    #[serde(rename = "MAX_VIDEO")]
    MaxVideo,
    #[serde(rename = "SHOP_THE_PIN")]
    ShopThePin,
    #[serde(rename = "COLLECTION")]
    Collection,
    #[serde(rename = "IDEA")]
    Idea,
    #[serde(rename = "SHOWCASE")]
    Showcase,
    #[serde(rename = "QUIZ")]
    Quiz,

}

impl std::fmt::Display for CreativeType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Regular => write!(f, "REGULAR"),
            Self::Video => write!(f, "VIDEO"),
            Self::Shopping => write!(f, "SHOPPING"),
            Self::Carousel => write!(f, "CAROUSEL"),
            Self::MaxVideo => write!(f, "MAX_VIDEO"),
            Self::ShopThePin => write!(f, "SHOP_THE_PIN"),
            Self::Collection => write!(f, "COLLECTION"),
            Self::Idea => write!(f, "IDEA"),
            Self::Showcase => write!(f, "SHOWCASE"),
            Self::Quiz => write!(f, "QUIZ"),
        }
    }
}

impl Default for CreativeType {
    fn default() -> CreativeType {
        Self::Regular
    }
}

