/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdGroupAudienceSizingRequest {
    /// Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>.
    #[serde(rename = "auto_targeting_enabled", skip_serializing_if = "Option::is_none")]
    pub auto_targeting_enabled: Option<bool>,
    /// <a href=\"/docs/redoc/#section/Placement-group\">Placement group</a>.
    #[serde(rename = "placement_group", skip_serializing_if = "Option::is_none")]
    pub placement_group: Option<models::PlacementGroupType>,
    /// Pin creative types filter. </p><strong>Note:</strong> SHOP_THE_PIN has been deprecated. Please use COLLECTION instead.
    #[serde(rename = "creative_types", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub creative_types: Option<Option<Vec<CreativeTypes>>>,
    #[serde(rename = "targeting_spec", skip_serializing_if = "Option::is_none")]
    pub targeting_spec: Option<Box<models::TargetingSpec>>,
    /// Targeted product group IDs. </p><strong>Note:</strong> This can only be combined with shopping/catalog sales campaigns. For more information, <a href=\"https://help.pinterest.com/en/business/article/shopping-ads#section-14571\" target=\"_blank\">click here</a>. SHOPPING_RETARGETING must be included in targeting_spec object or this field will be ignored.
    #[serde(rename = "product_group_ids", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub product_group_ids: Option<Option<Vec<String>>>,
    /// Array of keyword objects. If the keywords field is missing, all keywords will be targeted.
    #[serde(rename = "keywords", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub keywords: Option<Option<Vec<models::AdGroupAudienceSizingRequestKeywordsInner>>>,
}

impl AdGroupAudienceSizingRequest {
    pub fn new() -> AdGroupAudienceSizingRequest {
        AdGroupAudienceSizingRequest {
            auto_targeting_enabled: None,
            placement_group: None,
            creative_types: None,
            targeting_spec: None,
            product_group_ids: None,
            keywords: None,
        }
    }
}
/// Pin creative types filter. </p><strong>Note:</strong> SHOP_THE_PIN has been deprecated. Please use COLLECTION instead.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CreativeTypes {
    #[serde(rename = "REGULAR")]
    Regular,
    #[serde(rename = "VIDEO")]
    Video,
    #[serde(rename = "SHOPPING")]
    Shopping,
    #[serde(rename = "CAROUSEL")]
    Carousel,
    #[serde(rename = "MAX_VIDEO")]
    MaxVideo,
    #[serde(rename = "SHOP_THE_PIN")]
    ShopThePin,
    #[serde(rename = "COLLECTION")]
    Collection,
    #[serde(rename = "IDEA")]
    Idea,
}

impl Default for CreativeTypes {
    fn default() -> CreativeTypes {
        Self::Regular
    }
}

