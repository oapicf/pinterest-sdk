/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AudienceCategory {
    /// Interest unique key (same as ID).
    #[serde(rename = "key", skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Interest name.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Interest's percent of category's total audience.
    #[serde(rename = "ratio", skip_serializing_if = "Option::is_none")]
    pub ratio: Option<f64>,
    /// Interest affinity index.
    #[serde(rename = "index", skip_serializing_if = "Option::is_none")]
    pub index: Option<f64>,
    /// Interest ID.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Subcategory interest distribution
    #[serde(rename = "subcategories", skip_serializing_if = "Option::is_none")]
    pub subcategories: Option<Vec<models::AudienceSubcategory>>,
}

impl AudienceCategory {
    pub fn new() -> AudienceCategory {
        AudienceCategory {
            key: None,
            name: None,
            ratio: None,
            index: None,
            id: None,
            subcategories: None,
        }
    }
}

