/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SsioCreateInsertionOrderRequest {
    /// Starting date of time period. Format: YYYY-MM-DD
    #[serde(rename = "start_date")]
    pub start_date: String,
    /// End date of time period. Format: YYYY-MM-DD
    #[serde(rename = "end_date", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    /// The po number
    #[serde(rename = "po_number")]
    pub po_number: String,
    /// If Budget order line, the budget amount.
    #[serde(rename = "budget_amount", skip_serializing_if = "Option::is_none")]
    pub budget_amount: Option<f64>,
    /// The billing contact first name
    #[serde(rename = "billing_contact_firstname")]
    pub billing_contact_firstname: String,
    /// The billing contact last name
    #[serde(rename = "billing_contact_lastname")]
    pub billing_contact_lastname: String,
    /// The billing contact email
    #[serde(rename = "billing_contact_email")]
    pub billing_contact_email: String,
    /// The media contact first name
    #[serde(rename = "media_contact_firstname")]
    pub media_contact_firstname: String,
    /// The media contact last name
    #[serde(rename = "media_contact_lastname")]
    pub media_contact_lastname: String,
    /// The media contact email
    #[serde(rename = "media_contact_email")]
    pub media_contact_email: String,
    /// URL link for agency
    #[serde(rename = "agency_link", skip_serializing_if = "Option::is_none")]
    pub agency_link: Option<String>,
    /// The email of user submitting the insertion order
    #[serde(rename = "user_email", skip_serializing_if = "Option::is_none")]
    pub user_email: Option<String>,
    /// The UTC timestamp (to the nearest sec) of when terms were accepted
    #[serde(rename = "accepted_terms_time", skip_serializing_if = "Option::is_none")]
    pub accepted_terms_time: Option<i32>,
    /// The pmp id
    #[serde(rename = "pmp_id")]
    pub pmp_id: String,
    /// The order name
    #[serde(rename = "order_name")]
    pub order_name: String,
    /// Type can be Budget or Perpetual
    #[serde(rename = "order_line_type")]
    pub order_line_type: OrderLineType,
    /// The SFDC id for the terms
    #[serde(rename = "accepted_terms_id")]
    pub accepted_terms_id: String,
    /// The bill-to company id
    #[serde(rename = "billto_company_id")]
    pub billto_company_id: String,
    /// The bill-to business address id
    #[serde(rename = "billto_business_address_id")]
    pub billto_business_address_id: String,
    /// The bill-to billing address id
    #[serde(rename = "billto_billing_address_id")]
    pub billto_billing_address_id: String,
    /// If Ongoing (perpetual) order line, the estimated monthly spend
    #[serde(rename = "estimated_monthly_spend", skip_serializing_if = "Option::is_none")]
    pub estimated_monthly_spend: Option<f64>,
    #[serde(rename = "currency_info")]
    pub currency_info: models::Currency,
}

impl SsioCreateInsertionOrderRequest {
    pub fn new(start_date: String, po_number: String, billing_contact_firstname: String, billing_contact_lastname: String, billing_contact_email: String, media_contact_firstname: String, media_contact_lastname: String, media_contact_email: String, pmp_id: String, order_name: String, order_line_type: OrderLineType, accepted_terms_id: String, billto_company_id: String, billto_business_address_id: String, billto_billing_address_id: String, currency_info: models::Currency) -> SsioCreateInsertionOrderRequest {
        SsioCreateInsertionOrderRequest {
            start_date,
            end_date: None,
            po_number,
            budget_amount: None,
            billing_contact_firstname,
            billing_contact_lastname,
            billing_contact_email,
            media_contact_firstname,
            media_contact_lastname,
            media_contact_email,
            agency_link: None,
            user_email: None,
            accepted_terms_time: None,
            pmp_id,
            order_name,
            order_line_type,
            accepted_terms_id,
            billto_company_id,
            billto_business_address_id,
            billto_billing_address_id,
            estimated_monthly_spend: None,
            currency_info,
        }
    }
}
/// Type can be Budget or Perpetual
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrderLineType {
    #[serde(rename = "BUDGET")]
    Budget,
    #[serde(rename = "PERPETUALS")]
    Perpetuals,
}

impl Default for OrderLineType {
    fn default() -> OrderLineType {
        Self::Budget
    }
}

