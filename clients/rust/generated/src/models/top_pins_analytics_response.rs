/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TopPinsAnalyticsResponse {
    #[serde(rename = "date_availability", skip_serializing_if = "Option::is_none")]
    pub date_availability: Option<Box<models::TopPinsAnalyticsResponseDateAvailability>>,
    #[serde(rename = "pins", skip_serializing_if = "Option::is_none")]
    pub pins: Option<Vec<models::TopPinsAnalyticsResponsePinsInner>>,
    #[serde(rename = "sort_by", skip_serializing_if = "Option::is_none")]
    pub sort_by: Option<SortBy>,
}

impl TopPinsAnalyticsResponse {
    pub fn new() -> TopPinsAnalyticsResponse {
        TopPinsAnalyticsResponse {
            date_availability: None,
            pins: None,
            sort_by: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SortBy {
    #[serde(rename = "ENGAGEMENT")]
    Engagement,
    #[serde(rename = "SAVE")]
    Save,
    #[serde(rename = "IMPRESSION")]
    Impression,
    #[serde(rename = "OUTBOUND_CLICK")]
    OutboundClick,
    #[serde(rename = "PIN_CLICK")]
    PinClick,
}

impl Default for SortBy {
    fn default() -> SortBy {
        Self::Engagement
    }
}

