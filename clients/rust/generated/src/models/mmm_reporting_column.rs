/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// MmmReportingColumn : Marketing Mix Modeling (MMM) Reporting Columns
/// Marketing Mix Modeling (MMM) Reporting Columns
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MmmReportingColumn {
    #[serde(rename = "SPEND_IN_DOLLAR")]
    SpendInDollar,
    #[serde(rename = "SPEND_IN_MICRO_DOLLAR")]
    SpendInMicroDollar,
    #[serde(rename = "ECPC_IN_DOLLAR")]
    EcpcInDollar,
    #[serde(rename = "ECTR")]
    Ectr,
    #[serde(rename = "CAMPAIGN_NAME")]
    CampaignName,
    #[serde(rename = "TOTAL_ENGAGEMENT")]
    TotalEngagement,
    #[serde(rename = "EENGAGEMENT_RATE")]
    EengagementRate,
    #[serde(rename = "ECPM_IN_DOLLAR")]
    EcpmInDollar,
    #[serde(rename = "CAMPAIGN_ID")]
    CampaignId,
    #[serde(rename = "ADVERTISER_ID")]
    AdvertiserId,
    #[serde(rename = "AD_GROUP_ID")]
    AdGroupId,
    #[serde(rename = "AD_GROUP_NAME")]
    AdGroupName,
    #[serde(rename = "CLICKTHROUGH_1")]
    Clickthrough1,
    #[serde(rename = "IMPRESSION_1")]
    Impression1,
    #[serde(rename = "CLICKTHROUGH_2")]
    Clickthrough2,
    #[serde(rename = "IMPRESSION_2")]
    Impression2,
    #[serde(rename = "TOTAL_CLICKTHROUGH")]
    TotalClickthrough,
    #[serde(rename = "TOTAL_IMPRESSION")]
    TotalImpression,
    #[serde(rename = "ADVERTISER_NAME")]
    AdvertiserName,
    #[serde(rename = "SPEND_ORDER_LINE_PAID_TYPE")]
    SpendOrderLinePaidType,

}

impl std::fmt::Display for MmmReportingColumn {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::SpendInDollar => write!(f, "SPEND_IN_DOLLAR"),
            Self::SpendInMicroDollar => write!(f, "SPEND_IN_MICRO_DOLLAR"),
            Self::EcpcInDollar => write!(f, "ECPC_IN_DOLLAR"),
            Self::Ectr => write!(f, "ECTR"),
            Self::CampaignName => write!(f, "CAMPAIGN_NAME"),
            Self::TotalEngagement => write!(f, "TOTAL_ENGAGEMENT"),
            Self::EengagementRate => write!(f, "EENGAGEMENT_RATE"),
            Self::EcpmInDollar => write!(f, "ECPM_IN_DOLLAR"),
            Self::CampaignId => write!(f, "CAMPAIGN_ID"),
            Self::AdvertiserId => write!(f, "ADVERTISER_ID"),
            Self::AdGroupId => write!(f, "AD_GROUP_ID"),
            Self::AdGroupName => write!(f, "AD_GROUP_NAME"),
            Self::Clickthrough1 => write!(f, "CLICKTHROUGH_1"),
            Self::Impression1 => write!(f, "IMPRESSION_1"),
            Self::Clickthrough2 => write!(f, "CLICKTHROUGH_2"),
            Self::Impression2 => write!(f, "IMPRESSION_2"),
            Self::TotalClickthrough => write!(f, "TOTAL_CLICKTHROUGH"),
            Self::TotalImpression => write!(f, "TOTAL_IMPRESSION"),
            Self::AdvertiserName => write!(f, "ADVERTISER_NAME"),
            Self::SpendOrderLinePaidType => write!(f, "SPEND_ORDER_LINE_PAID_TYPE"),
        }
    }
}

impl Default for MmmReportingColumn {
    fn default() -> MmmReportingColumn {
        Self::SpendInDollar
    }
}

