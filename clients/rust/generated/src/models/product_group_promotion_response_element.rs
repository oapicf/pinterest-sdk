/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProductGroupPromotionResponseElement {
    /// ID of the product group promotion.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// ID of the ad group the product group belongs to.
    #[serde(rename = "ad_group_id", skip_serializing_if = "Option::is_none")]
    pub ad_group_id: Option<String>,
    /// The bid in micro currency.
    #[serde(rename = "bid_in_micro_currency", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bid_in_micro_currency: Option<Option<i32>>,
    /// True if the group is BIDDABLE, false if it should be EXCLUDED from serving ads.
    #[serde(rename = "included", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub included: Option<Option<bool>>,
    /// The full product group definition path
    #[serde(rename = "definition", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub definition: Option<Option<String>>,
    /// The definition of the product group, relative to its parent - an attribute name/value pair
    #[serde(rename = "relative_definition", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub relative_definition: Option<Option<String>>,
    /// The parent Product Group ID of this Product Group
    #[serde(rename = "parent_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub parent_id: Option<Option<String>>,
    /// Slideshow Collections Title
    #[serde(rename = "slideshow_collections_title", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub slideshow_collections_title: Option<Option<String>>,
    /// Slideshow Collections Description
    #[serde(rename = "slideshow_collections_description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub slideshow_collections_description: Option<Option<String>>,
    /// If set to true products promoted in this product group will use the Mobile Deep Link specified in your catalog
    #[serde(rename = "is_mdl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub is_mdl: Option<Option<bool>>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<models::EntityStatus>,
    /// Tracking template for proudct group promotions. 4000 limit
    #[serde(rename = "tracking_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tracking_url: Option<Option<String>>,
    /// ID of the catalogs product group that this product group promotion references
    #[serde(rename = "catalog_product_group_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub catalog_product_group_id: Option<Option<String>>,
    /// Catalogs product group name
    #[serde(rename = "catalog_product_group_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub catalog_product_group_name: Option<Option<String>>,
    /// Hero Pin ID if this PG is promoted as a Collection
    #[serde(rename = "collections_hero_pin_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub collections_hero_pin_id: Option<Option<String>>,
    /// Collections Hero Destination Url
    #[serde(rename = "collections_hero_destination_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub collections_hero_destination_url: Option<Option<String>>,
    #[serde(rename = "grid_click_type", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub grid_click_type: Option<Option<models::GridClickType>>,
    #[serde(rename = "creative_type", skip_serializing_if = "Option::is_none")]
    pub creative_type: Option<models::CreativeType>,
}

impl ProductGroupPromotionResponseElement {
    pub fn new() -> ProductGroupPromotionResponseElement {
        ProductGroupPromotionResponseElement {
            id: None,
            ad_group_id: None,
            bid_in_micro_currency: None,
            included: None,
            definition: None,
            relative_definition: None,
            parent_id: None,
            slideshow_collections_title: None,
            slideshow_collections_description: None,
            is_mdl: None,
            status: None,
            tracking_url: None,
            catalog_product_group_id: None,
            catalog_product_group_name: None,
            collections_hero_pin_id: None,
            collections_hero_destination_url: None,
            grid_click_type: None,
            creative_type: None,
        }
    }
}

