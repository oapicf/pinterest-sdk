/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CatalogsRetailProductGroupUpdateRequest : Request object for updating a retail product group.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CatalogsRetailProductGroupUpdateRequest {
    /// Retail catalog based product group is available only for selected partners at the moment. If you are not eligible, please use feed based one.
    #[serde(rename = "catalog_type", skip_serializing_if = "Option::is_none")]
    pub catalog_type: Option<CatalogType>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<String>>,
    #[serde(rename = "filters", skip_serializing_if = "Option::is_none")]
    pub filters: Option<Box<models::CatalogsProductGroupFiltersRequest>>,
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<models::Country>,
    #[serde(rename = "locale", skip_serializing_if = "Option::is_none")]
    pub locale: Option<models::CatalogsLocale>,
}

impl CatalogsRetailProductGroupUpdateRequest {
    /// Request object for updating a retail product group.
    pub fn new() -> CatalogsRetailProductGroupUpdateRequest {
        CatalogsRetailProductGroupUpdateRequest {
            catalog_type: None,
            name: None,
            description: None,
            filters: None,
            country: None,
            locale: None,
        }
    }
}
/// Retail catalog based product group is available only for selected partners at the moment. If you are not eligible, please use feed based one.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CatalogType {
    #[serde(rename = "RETAIL")]
    Retail,
}

impl Default for CatalogType {
    fn default() -> CatalogType {
        Self::Retail
    }
}

