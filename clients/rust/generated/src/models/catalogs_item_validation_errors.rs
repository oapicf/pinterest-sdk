/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CatalogsItemValidationErrors {
    #[serde(rename = "ADULT_INVALID", skip_serializing_if = "Option::is_none")]
    pub adult_invalid: Option<Box<models::CatalogsItemValidationDetails>>,
    #[serde(rename = "ADWORDS_FORMAT_INVALID", skip_serializing_if = "Option::is_none")]
    pub adwords_format_invalid: Option<Box<models::CatalogsItemValidationDetails>>,
    #[serde(rename = "AVAILABILITY_INVALID", skip_serializing_if = "Option::is_none")]
    pub availability_invalid: Option<Box<models::CatalogsItemValidationDetails>>,
    #[serde(rename = "BLOCKLISTED_IMAGE_SIGNATURE", skip_serializing_if = "Option::is_none")]
    pub blocklisted_image_signature: Option<Box<models::CatalogsItemValidationDetails>>,
    #[serde(rename = "DESCRIPTION_MISSING", skip_serializing_if = "Option::is_none")]
    pub description_missing: Option<Box<models::CatalogsItemValidationDetails>>,
    #[serde(rename = "DUPLICATE_PRODUCTS", skip_serializing_if = "Option::is_none")]
    pub duplicate_products: Option<Box<models::CatalogsItemValidationDetails>>,
    #[serde(rename = "IMAGE_LINK_INVALID", skip_serializing_if = "Option::is_none")]
    pub image_link_invalid: Option<Box<models::CatalogsItemValidationDetails>>,
    #[serde(rename = "IMAGE_LINK_LENGTH_TOO_LONG", skip_serializing_if = "Option::is_none")]
    pub image_link_length_too_long: Option<Box<models::CatalogsItemValidationDetails>>,
    #[serde(rename = "IMAGE_LINK_MISSING", skip_serializing_if = "Option::is_none")]
    pub image_link_missing: Option<Box<models::CatalogsItemValidationDetails>>,
    #[serde(rename = "INVALID_DOMAIN", skip_serializing_if = "Option::is_none")]
    pub invalid_domain: Option<Box<models::CatalogsItemValidationDetails>>,
    #[serde(rename = "ITEMID_MISSING", skip_serializing_if = "Option::is_none")]
    pub itemid_missing: Option<Box<models::CatalogsItemValidationDetails>>,
    #[serde(rename = "ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE", skip_serializing_if = "Option::is_none")]
    pub item_main_image_download_failure: Option<Box<models::CatalogsItemValidationDetails>>,
    #[serde(rename = "LINK_FORMAT_INVALID", skip_serializing_if = "Option::is_none")]
    pub link_format_invalid: Option<Box<models::CatalogsItemValidationDetails>>,
    #[serde(rename = "LINK_LENGTH_TOO_LONG", skip_serializing_if = "Option::is_none")]
    pub link_length_too_long: Option<Box<models::CatalogsItemValidationDetails>>,
    #[serde(rename = "LIST_PRICE_INVALID", skip_serializing_if = "Option::is_none")]
    pub list_price_invalid: Option<Box<models::CatalogsItemValidationDetails>>,
    #[serde(rename = "MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED", skip_serializing_if = "Option::is_none")]
    pub max_items_per_item_group_exceeded: Option<Box<models::CatalogsItemValidationDetails>>,
    #[serde(rename = "PARSE_LINE_ERROR", skip_serializing_if = "Option::is_none")]
    pub parse_line_error: Option<Box<models::CatalogsItemValidationDetails>>,
    #[serde(rename = "PINJOIN_CONTENT_UNSAFE", skip_serializing_if = "Option::is_none")]
    pub pinjoin_content_unsafe: Option<Box<models::CatalogsItemValidationDetails>>,
    #[serde(rename = "PRICE_CANNOT_BE_DETERMINED", skip_serializing_if = "Option::is_none")]
    pub price_cannot_be_determined: Option<Box<models::CatalogsItemValidationDetails>>,
    #[serde(rename = "PRICE_MISSING", skip_serializing_if = "Option::is_none")]
    pub price_missing: Option<Box<models::CatalogsItemValidationDetails>>,
    #[serde(rename = "PRODUCT_LINK_MISSING", skip_serializing_if = "Option::is_none")]
    pub product_link_missing: Option<Box<models::CatalogsItemValidationDetails>>,
    #[serde(rename = "PRODUCT_PRICE_INVALID", skip_serializing_if = "Option::is_none")]
    pub product_price_invalid: Option<Box<models::CatalogsItemValidationDetails>>,
    #[serde(rename = "TITLE_MISSING", skip_serializing_if = "Option::is_none")]
    pub title_missing: Option<Box<models::CatalogsItemValidationDetails>>,
}

impl CatalogsItemValidationErrors {
    pub fn new() -> CatalogsItemValidationErrors {
        CatalogsItemValidationErrors {
            adult_invalid: None,
            adwords_format_invalid: None,
            availability_invalid: None,
            blocklisted_image_signature: None,
            description_missing: None,
            duplicate_products: None,
            image_link_invalid: None,
            image_link_length_too_long: None,
            image_link_missing: None,
            invalid_domain: None,
            itemid_missing: None,
            item_main_image_download_failure: None,
            link_format_invalid: None,
            link_length_too_long: None,
            list_price_invalid: None,
            max_items_per_item_group_exceeded: None,
            parse_line_error: None,
            pinjoin_content_unsafe: None,
            price_cannot_be_determined: None,
            price_missing: None,
            product_link_missing: None,
            product_price_invalid: None,
            title_missing: None,
        }
    }
}

