/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AdsAnalyticsCampaignTargetingType : Reporting targeting type for campaigns
/// Reporting targeting type for campaigns
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AdsAnalyticsCampaignTargetingType {
    #[serde(rename = "KEYWORD")]
    Keyword,
    #[serde(rename = "APPTYPE")]
    Apptype,
    #[serde(rename = "GENDER")]
    Gender,
    #[serde(rename = "LOCATION")]
    Location,
    #[serde(rename = "PLACEMENT")]
    Placement,
    #[serde(rename = "COUNTRY")]
    Country,
    #[serde(rename = "TARGETED_INTEREST")]
    TargetedInterest,
    #[serde(rename = "PINNER_INTEREST")]
    PinnerInterest,
    #[serde(rename = "AUDIENCE_INCLUDE")]
    AudienceInclude,
    #[serde(rename = "GEO")]
    Geo,
    #[serde(rename = "AGE_BUCKET")]
    AgeBucket,
    #[serde(rename = "REGION")]
    Region,
    #[serde(rename = "CREATIVE_TYPE")]
    CreativeType,
    #[serde(rename = "AGE_BUCKET_AND_GENDER")]
    AgeBucketAndGender,

}

impl std::fmt::Display for AdsAnalyticsCampaignTargetingType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Keyword => write!(f, "KEYWORD"),
            Self::Apptype => write!(f, "APPTYPE"),
            Self::Gender => write!(f, "GENDER"),
            Self::Location => write!(f, "LOCATION"),
            Self::Placement => write!(f, "PLACEMENT"),
            Self::Country => write!(f, "COUNTRY"),
            Self::TargetedInterest => write!(f, "TARGETED_INTEREST"),
            Self::PinnerInterest => write!(f, "PINNER_INTEREST"),
            Self::AudienceInclude => write!(f, "AUDIENCE_INCLUDE"),
            Self::Geo => write!(f, "GEO"),
            Self::AgeBucket => write!(f, "AGE_BUCKET"),
            Self::Region => write!(f, "REGION"),
            Self::CreativeType => write!(f, "CREATIVE_TYPE"),
            Self::AgeBucketAndGender => write!(f, "AGE_BUCKET_AND_GENDER"),
        }
    }
}

impl Default for AdsAnalyticsCampaignTargetingType {
    fn default() -> AdsAnalyticsCampaignTargetingType {
        Self::Keyword
    }
}

