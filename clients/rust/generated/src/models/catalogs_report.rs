/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CatalogsReport {
    #[serde(rename = "report_status", skip_serializing_if = "Option::is_none")]
    pub report_status: Option<ReportStatus>,
    /// URL to download the report
    #[serde(rename = "url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub url: Option<Option<String>>,
    /// Size of the report in bytes
    #[serde(rename = "size", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub size: Option<Option<f64>>,
}

impl CatalogsReport {
    pub fn new() -> CatalogsReport {
        CatalogsReport {
            report_status: None,
            url: None,
            size: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ReportStatus {
    #[serde(rename = "FINISHED")]
    Finished,
    #[serde(rename = "IN_PROGRESS")]
    InProgress,
}

impl Default for ReportStatus {
    fn default() -> ReportStatus {
        Self::Finished
    }
}

