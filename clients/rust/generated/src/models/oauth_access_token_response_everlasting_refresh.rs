/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OauthAccessTokenResponseEverlastingRefresh : A successful OAuth access token response for the refresh token flow, with an added everlasting refresh token.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OauthAccessTokenResponseEverlastingRefresh {
    #[serde(rename = "response_type", skip_serializing_if = "Option::is_none")]
    pub response_type: Option<ResponseType>,
    #[serde(rename = "access_token")]
    pub access_token: String,
    #[serde(rename = "token_type")]
    pub token_type: String,
    #[serde(rename = "expires_in")]
    pub expires_in: i32,
    #[serde(rename = "scope")]
    pub scope: String,
    #[serde(rename = "refresh_token")]
    pub refresh_token: String,
    #[serde(rename = "refresh_token_expires_in")]
    pub refresh_token_expires_in: i32,
    #[serde(rename = "refresh_token_expires_at")]
    pub refresh_token_expires_at: i32,
}

impl OauthAccessTokenResponseEverlastingRefresh {
    /// A successful OAuth access token response for the refresh token flow, with an added everlasting refresh token.
    pub fn new(access_token: String, token_type: String, expires_in: i32, scope: String, refresh_token: String, refresh_token_expires_in: i32, refresh_token_expires_at: i32) -> OauthAccessTokenResponseEverlastingRefresh {
        OauthAccessTokenResponseEverlastingRefresh {
            response_type: None,
            access_token,
            token_type,
            expires_in,
            scope,
            refresh_token,
            refresh_token_expires_in,
            refresh_token_expires_at,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ResponseType {
    #[serde(rename = "authorization_code")]
    AuthorizationCode,
    #[serde(rename = "refresh_token")]
    RefreshToken,
    #[serde(rename = "client_credentials")]
    ClientCredentials,
}

impl Default for ResponseType {
    fn default() -> ResponseType {
        Self::AuthorizationCode
    }
}

