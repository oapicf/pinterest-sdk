/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TargetingTemplateGetResponseData {
    /// targeting template name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>.
    #[serde(rename = "auto_targeting_enabled", skip_serializing_if = "Option::is_none")]
    pub auto_targeting_enabled: Option<bool>,
    #[serde(rename = "targeting_attributes", skip_serializing_if = "Option::is_none")]
    pub targeting_attributes: Option<Box<models::TargetingSpec>>,
    #[serde(rename = "placement_group", skip_serializing_if = "Option::is_none")]
    pub placement_group: Option<models::PlacementGroupType>,
    #[serde(rename = "keywords", skip_serializing_if = "Option::is_none")]
    pub keywords: Option<Vec<models::TargetingTemplateKeyword>>,
    #[serde(rename = "tracking_urls", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tracking_urls: Option<Option<Box<models::TrackingUrls>>>,
    /// Targeting template ID.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Targeting template created time. Unix timestamp in seconds.
    #[serde(rename = "created_time", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<i32>,
    /// Targeting template updated time.Unix timestamp in seconds.
    #[serde(rename = "updated_time", skip_serializing_if = "Option::is_none")]
    pub updated_time: Option<i32>,
    /// The ID of the advertiser that this targeting template belongs to.
    #[serde(rename = "ad_account_id", skip_serializing_if = "Option::is_none")]
    pub ad_account_id: Option<String>,
    /// Indicate targeting template is active or Deleted
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    #[serde(rename = "sizing", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sizing: Option<Option<Box<models::TargetingTemplateAudienceSizing>>>,
    /// Inform if the targeting template is valid (ex. would be false if has revoked audience)
    #[serde(rename = "valid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub valid: Option<Option<bool>>,
}

impl TargetingTemplateGetResponseData {
    pub fn new() -> TargetingTemplateGetResponseData {
        TargetingTemplateGetResponseData {
            name: None,
            auto_targeting_enabled: None,
            targeting_attributes: None,
            placement_group: None,
            keywords: None,
            tracking_urls: None,
            id: None,
            created_time: None,
            updated_time: None,
            ad_account_id: None,
            status: None,
            sizing: None,
            valid: None,
        }
    }
}
/// Indicate targeting template is active or Deleted
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "ACTIVE")]
    Active,
    #[serde(rename = "DELETED")]
    Deleted,
}

impl Default for Status {
    fn default() -> Status {
        Self::Active
    }
}

