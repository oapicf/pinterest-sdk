/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AudienceInsightsResponse : Audience interests and demographics.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AudienceInsightsResponse {
    /// Category interest distribution
    #[serde(rename = "categories", skip_serializing_if = "Option::is_none")]
    pub categories: Option<Vec<models::AudienceCategory>>,
    #[serde(rename = "demographics", skip_serializing_if = "Option::is_none")]
    pub demographics: Option<Box<models::AudienceDemographics>>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<models::AudienceInsightType>,
    /// Generation date
    #[serde(rename = "date", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub date: Option<Option<String>>,
    /// Population count.
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<i32>,
    /// Indicates whether the audience size has been rounded up to the next highest upper boundary.
    #[serde(rename = "size_is_upper_bound", skip_serializing_if = "Option::is_none")]
    pub size_is_upper_bound: Option<bool>,
}

impl AudienceInsightsResponse {
    /// Audience interests and demographics.
    pub fn new() -> AudienceInsightsResponse {
        AudienceInsightsResponse {
            categories: None,
            demographics: None,
            r#type: None,
            date: None,
            size: None,
            size_is_upper_bound: None,
        }
    }
}

