/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CatalogsReportDistributionStats {
    #[serde(rename = "report_type", skip_serializing_if = "Option::is_none")]
    pub report_type: Option<ReportType>,
    /// ID of the catalog entity.
    #[serde(rename = "catalog_id", skip_serializing_if = "Option::is_none")]
    pub catalog_id: Option<String>,
    /// The event code that a diagnostics aggregated number references
    #[serde(rename = "code", skip_serializing_if = "Option::is_none")]
    pub code: Option<i32>,
    /// A human-friendly label for the event code (e.g, 'SPAM')
    #[serde(rename = "code_label", skip_serializing_if = "Option::is_none")]
    pub code_label: Option<String>,
    /// Title message describing the diagnostic issue
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Number of occurrences of the issue
    #[serde(rename = "occurrences", skip_serializing_if = "Option::is_none")]
    pub occurrences: Option<i32>,
    /// Indicates if issue makes items ineligible for ads distribution
    #[serde(rename = "ineligible_for_ads", skip_serializing_if = "Option::is_none")]
    pub ineligible_for_ads: Option<bool>,
    /// Indicates if issue makes items ineligible for organic distribution
    #[serde(rename = "ineligible_for_organic", skip_serializing_if = "Option::is_none")]
    pub ineligible_for_organic: Option<bool>,
}

impl CatalogsReportDistributionStats {
    pub fn new() -> CatalogsReportDistributionStats {
        CatalogsReportDistributionStats {
            report_type: None,
            catalog_id: None,
            code: None,
            code_label: None,
            message: None,
            occurrences: None,
            ineligible_for_ads: None,
            ineligible_for_organic: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ReportType {
    #[serde(rename = "DISTRIBUTION_ISSUES")]
    DistributionIssues,
}

impl Default for ReportType {
    fn default() -> ReportType {
        Self::DistributionIssues
    }
}

