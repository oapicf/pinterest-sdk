/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CatalogsFeedsCreateRequest : Request object for creating a feed. Please, be aware that \"default_country\" and \"default_locale\" are not required in the spec for forward compatibility but for now the API will not accept requests without those fields.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CatalogsFeedsCreateRequest {
    #[serde(rename = "default_currency", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub default_currency: Option<Option<models::NullableCurrency>>,
    /// A human-friendly name associated to a given feed.
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "format")]
    pub format: models::CatalogsFormat,
    #[serde(rename = "default_locale", skip_serializing_if = "Option::is_none")]
    pub default_locale: Option<Box<models::CatalogsFeedsCreateRequestDefaultLocale>>,
    #[serde(rename = "credentials", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub credentials: Option<Option<Box<models::CatalogsFeedCredentials>>>,
    /// The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
    #[serde(rename = "location")]
    pub location: String,
    #[serde(rename = "preferred_processing_schedule", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub preferred_processing_schedule: Option<Option<Box<models::CatalogsFeedProcessingSchedule>>>,
    #[serde(rename = "default_country", skip_serializing_if = "Option::is_none")]
    pub default_country: Option<models::Country>,
    #[serde(rename = "default_availability", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub default_availability: Option<Option<models::ProductAvailabilityType>>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Box<models::CatalogsStatus>>,
}

impl CatalogsFeedsCreateRequest {
    /// Request object for creating a feed. Please, be aware that \"default_country\" and \"default_locale\" are not required in the spec for forward compatibility but for now the API will not accept requests without those fields.
    pub fn new(name: String, format: models::CatalogsFormat, location: String) -> CatalogsFeedsCreateRequest {
        CatalogsFeedsCreateRequest {
            default_currency: None,
            name,
            format,
            default_locale: None,
            credentials: None,
            location,
            preferred_processing_schedule: None,
            default_country: None,
            default_availability: None,
            status: None,
        }
    }
}

