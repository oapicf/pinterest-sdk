/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Account {
    /// Type of account
    #[serde(rename = "account_type", skip_serializing_if = "Option::is_none")]
    pub account_type: Option<AccountType>,
    /// User account ID.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "profile_image", skip_serializing_if = "Option::is_none")]
    pub profile_image: Option<String>,
    #[serde(rename = "website_url", skip_serializing_if = "Option::is_none")]
    pub website_url: Option<String>,
    #[serde(rename = "username", skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
    /// Profile about description.
    #[serde(rename = "about", skip_serializing_if = "Option::is_none")]
    pub about: Option<String>,
    #[serde(rename = "business_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub business_name: Option<Option<String>>,
    /// User account board count.<br/>**Note**: Board count on user account level may differ from counts found elsewhere due to attribution of collaborative Boards.
    #[serde(rename = "board_count", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub board_count: Option<Option<i32>>,
    /// User account pin count. This includes both created and saved pins.
    #[serde(rename = "pin_count", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub pin_count: Option<Option<i32>>,
    /// User account follower count.
    #[serde(rename = "follower_count", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub follower_count: Option<Option<i32>>,
    /// User account following count.
    #[serde(rename = "following_count", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub following_count: Option<Option<i32>>,
    /// User account monthly views.
    #[serde(rename = "monthly_views", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub monthly_views: Option<Option<i32>>,
}

impl Account {
    pub fn new() -> Account {
        Account {
            account_type: None,
            id: None,
            profile_image: None,
            website_url: None,
            username: None,
            about: None,
            business_name: None,
            board_count: None,
            pin_count: None,
            follower_count: None,
            following_count: None,
            monthly_views: None,
        }
    }
}
/// Type of account
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AccountType {
    #[serde(rename = "PINNER")]
    Pinner,
    #[serde(rename = "BUSINESS")]
    Business,
}

impl Default for AccountType {
    fn default() -> AccountType {
        Self::Pinner
    }
}

