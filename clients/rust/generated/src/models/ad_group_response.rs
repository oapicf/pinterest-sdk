/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdGroupResponse {
    /// Ad group name.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Ad group/entity status.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<models::EntityStatus>,
    /// Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
    #[serde(rename = "budget_in_micro_currency", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub budget_in_micro_currency: Option<Option<i32>>,
    /// Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
    #[serde(rename = "bid_in_micro_currency", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bid_in_micro_currency: Option<Option<i32>>,
    /// Optimization goals for objective-based performance campaigns. **REQUIRED** when campaign's `objective_type` is set to `\"WEB_CONVERSION\"`.
    #[serde(rename = "optimization_goal_metadata", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub optimization_goal_metadata: Option<Option<Box<models::OptimizationGoalMetadata>>>,
    #[serde(rename = "budget_type", skip_serializing_if = "Option::is_none")]
    pub budget_type: Option<models::BudgetType>,
    /// Ad group start time. Unix timestamp in seconds. Defaults to current time.
    #[serde(rename = "start_time", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<Option<i32>>,
    /// Ad group end time. Unix timestamp in seconds.
    #[serde(rename = "end_time", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<Option<i32>>,
    #[serde(rename = "targeting_spec", skip_serializing_if = "Option::is_none")]
    pub targeting_spec: Option<Box<models::TargetingSpec>>,
    /// Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION <a href=\"/docs/redoc/#section/Billable-event\">billable_event</a> value. This field **REQUIRES** the `end_time` field.
    #[serde(rename = "lifetime_frequency_cap", skip_serializing_if = "Option::is_none")]
    pub lifetime_frequency_cap: Option<i32>,
    /// Third-party tracking URLs.<br> JSON object with the format: {\"<a href=\"/docs/redoc/#section/Tracking-URL-event\">Tracking event enum</a>\":[URL string array],...}<br> For example: {\"impression\": [\"URL1\", \"URL2\"], \"click\": [\"URL1\", \"URL2\", \"URL3\"]}.<br>Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.<br><br> For more information, see <a href=\"https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\" target=\"_blank\">Third-party and dynamic tracking</a>.
    #[serde(rename = "tracking_urls", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tracking_urls: Option<Option<Box<models::TrackingUrls>>>,
    /// Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>.
    #[serde(rename = "auto_targeting_enabled", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub auto_targeting_enabled: Option<Option<bool>>,
    /// <a href=\"/docs/redoc/#section/Placement-group\">Placement group</a>.
    #[serde(rename = "placement_group", skip_serializing_if = "Option::is_none")]
    pub placement_group: Option<models::PlacementGroupType>,
    #[serde(rename = "pacing_delivery_type", skip_serializing_if = "Option::is_none")]
    pub pacing_delivery_type: Option<models::PacingDeliveryType>,
    /// Campaign ID of the ad group.
    #[serde(rename = "campaign_id", skip_serializing_if = "Option::is_none")]
    pub campaign_id: Option<String>,
    #[serde(rename = "billable_event", skip_serializing_if = "Option::is_none")]
    pub billable_event: Option<models::ActionType>,
    /// Bid strategy type. For Campaigns with Video Completion objectives, the only supported bid strategy type is AUTOMATIC_BID.
    #[serde(rename = "bid_strategy_type", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bid_strategy_type: Option<Option<BidStrategyType>>,
    /// Targeting template IDs applied to the ad group. We currently only support 1 targeting template per ad group. To use targeting templates, do not set any other targeting fields: targeting_spec, tracking_urls, auto_targeting_enabled, placement_group. To clear all targeting template IDs, set this field to ['0'].
    #[serde(rename = "targeting_template_ids", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub targeting_template_ids: Option<Option<Vec<String>>>,
    /// Ad group ID.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Advertiser ID.
    #[serde(rename = "ad_account_id", skip_serializing_if = "Option::is_none")]
    pub ad_account_id: Option<String>,
    /// Ad group creation time. Unix timestamp in seconds.
    #[serde(rename = "created_time", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<i32>,
    /// Ad group last update time. Unix timestamp in seconds.
    #[serde(rename = "updated_time", skip_serializing_if = "Option::is_none")]
    pub updated_time: Option<i32>,
    /// Always \"adgroup\".
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// oCPM learn mode
    #[serde(rename = "conversion_learning_mode_type", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub conversion_learning_mode_type: Option<Option<ConversionLearningModeType>>,
    /// Ad group summary status.
    #[serde(rename = "summary_status", skip_serializing_if = "Option::is_none")]
    pub summary_status: Option<models::AdGroupSummaryStatus>,
    /// Feed Profile ID associated to the adgroup.
    #[serde(rename = "feed_profile_id", skip_serializing_if = "Option::is_none")]
    pub feed_profile_id: Option<String>,
    /// [DCA] The Dynamic creative assets to use for DCA. Dynamic Creative Assembly (DCA) accepts basic creative assets of an ad (image, video, title, call to action, logo etc). Then it automatically generates optimized ad combinations based on these assets.
    #[serde(rename = "dca_assets", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub dca_assets: Option<Option<serde_json::Value>>,
}

impl AdGroupResponse {
    pub fn new() -> AdGroupResponse {
        AdGroupResponse {
            name: None,
            status: None,
            budget_in_micro_currency: None,
            bid_in_micro_currency: None,
            optimization_goal_metadata: None,
            budget_type: None,
            start_time: None,
            end_time: None,
            targeting_spec: None,
            lifetime_frequency_cap: None,
            tracking_urls: None,
            auto_targeting_enabled: None,
            placement_group: None,
            pacing_delivery_type: None,
            campaign_id: None,
            billable_event: None,
            bid_strategy_type: None,
            targeting_template_ids: None,
            id: None,
            ad_account_id: None,
            created_time: None,
            updated_time: None,
            r#type: None,
            conversion_learning_mode_type: None,
            summary_status: None,
            feed_profile_id: None,
            dca_assets: None,
        }
    }
}
/// Bid strategy type. For Campaigns with Video Completion objectives, the only supported bid strategy type is AUTOMATIC_BID.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BidStrategyType {
    #[serde(rename = "AUTOMATIC_BID")]
    AutomaticBid,
    #[serde(rename = "MAX_BID")]
    MaxBid,
    #[serde(rename = "TARGET_AVG")]
    TargetAvg,
}

impl Default for BidStrategyType {
    fn default() -> BidStrategyType {
        Self::AutomaticBid
    }
}
/// oCPM learn mode
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ConversionLearningModeType {
    #[serde(rename = "NOT_ACTIVE")]
    NotActive,
    #[serde(rename = "ACTIVE")]
    Active,
}

impl Default for ConversionLearningModeType {
    fn default() -> ConversionLearningModeType {
        Self::NotActive
    }
}

