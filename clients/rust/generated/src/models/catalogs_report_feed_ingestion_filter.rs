/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CatalogsReportFeedIngestionFilter {
    #[serde(rename = "report_type")]
    pub report_type: ReportType,
    /// ID of the feed entity.
    #[serde(rename = "feed_id")]
    pub feed_id: String,
    /// Unique identifier of a feed processing result. It can be acquired from the \"id\" field of the \"items\" array within the response of the [List processing results for a given feed](/docs/api/v5/#operation/feed_processing_results/list). If not provided, default to most recent completed processing result.
    #[serde(rename = "processing_result_id", skip_serializing_if = "Option::is_none")]
    pub processing_result_id: Option<String>,
}

impl CatalogsReportFeedIngestionFilter {
    pub fn new(report_type: ReportType, feed_id: String) -> CatalogsReportFeedIngestionFilter {
        CatalogsReportFeedIngestionFilter {
            report_type,
            feed_id,
            processing_result_id: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ReportType {
    #[serde(rename = "FEED_INGESTION_ISSUES")]
    FeedIngestionIssues,
}

impl Default for ReportType {
    fn default() -> ReportType {
        Self::FeedIngestionIssues
    }
}

