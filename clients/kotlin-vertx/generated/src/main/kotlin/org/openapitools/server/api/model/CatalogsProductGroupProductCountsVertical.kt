/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.api.model

import org.openapitools.server.api.model.CatalogsCreativeAssetsProductGroupProductCounts
import org.openapitools.server.api.model.CatalogsHotelProductGroupProductCounts
import org.openapitools.server.api.model.CatalogsRetailProductGroupProductCounts
import org.openapitools.server.api.model.CatalogsType

        
import com.google.gson.annotations.SerializedName
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonInclude
/**
 * Product counts for a CatalogsProductGroup
 * @param catalogType 
 * @param inStock 
 * @param outOfStock 
 * @param preorder 
 * @param total 
 * @param videos 
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
data class CatalogsProductGroupProductCountsVertical (
    @SerializedName("catalogType") private val _catalogType: CatalogsType?,
    @SerializedName("inStock") private val _inStock: java.math.BigDecimal?,
    @SerializedName("outOfStock") private val _outOfStock: java.math.BigDecimal?,
    @SerializedName("preorder") private val _preorder: java.math.BigDecimal?,
    @SerializedName("total") private val _total: java.math.BigDecimal?,
    @SerializedName("videos") private val _videos: java.math.BigDecimal?
) {

        val catalogType get() = _catalogType ?: throw IllegalArgumentException("catalogType is required")
                    
        val inStock get() = _inStock ?: throw IllegalArgumentException("inStock is required")
                    
        val outOfStock get() = _outOfStock ?: throw IllegalArgumentException("outOfStock is required")
                    
        val preorder get() = _preorder ?: throw IllegalArgumentException("preorder is required")
                    
        val total get() = _total ?: throw IllegalArgumentException("total is required")
                    
        val videos get() = _videos ?: throw IllegalArgumentException("videos is required")
                    
}

