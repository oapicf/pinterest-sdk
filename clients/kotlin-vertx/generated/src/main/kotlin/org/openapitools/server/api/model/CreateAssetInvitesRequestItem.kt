/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.api.model

import org.openapitools.server.api.model.InviteType
import org.openapitools.server.api.model.Permissions

        
import com.google.gson.annotations.SerializedName
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonInclude
/**
 * Object declaring an asset role update to an invite.
 * @param inviteId Unique identifier of an invite.
 * @param inviteType 
 * @param assetIdToPermissions An object mapping asset ids to lists of business permissions. This can be used to setting/requesting permissions on various assets. If accepting an invite or request, this object would be used to grant asset permissions to the member or partner. 
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
data class CreateAssetInvitesRequestItem (
    /* Unique identifier of an invite. */
    @SerializedName("inviteId") private val _inviteId: kotlin.String?,
    @SerializedName("inviteType") private val _inviteType: InviteType?,
    /* An object mapping asset ids to lists of business permissions. This can be used to setting/requesting permissions on various assets. If accepting an invite or request, this object would be used to grant asset permissions to the member or partner.  */
    @SerializedName("assetIdToPermissions") private val _assetIdToPermissions: kotlin.collections.Map<kotlin.String, kotlin.Array<Permissions>>?
) {

        val inviteId get() = _inviteId ?: throw IllegalArgumentException("inviteId is required")
                    
        val inviteType get() = _inviteType ?: throw IllegalArgumentException("inviteType is required")
                    
        val assetIdToPermissions get() = _assetIdToPermissions ?: throw IllegalArgumentException("assetIdToPermissions is required")
                    
}

