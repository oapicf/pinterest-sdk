/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.api.model


        
import com.google.gson.annotations.SerializedName
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonInclude
/**
 * HTTP request details included in the log sent by the client.
 * @param method 
 * @param host HTTP request host from host header.
 * @param path HTTP request path.
 * @param requestHeaders HTTP request headers as key-value pairs.
 * @param responseHeaders HTTP response headers as key-value pairs.
 * @param responseStatusCode 
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
data class IntegrationLogClientRequest (
    @SerializedName("method") private val _method: IntegrationLogClientRequest.Method?,
    /* HTTP request host from host header. */
    @SerializedName("host") private val _host: kotlin.String?,
    /* HTTP request path. */
    @SerializedName("path") private val _path: kotlin.String?,
    /* HTTP request headers as key-value pairs. */
    val requestHeaders: kotlin.collections.Map<kotlin.String, kotlin.String>? = null,
    /* HTTP response headers as key-value pairs. */
    val responseHeaders: kotlin.collections.Map<kotlin.String, kotlin.String>? = null,
    val responseStatusCode: kotlin.Int? = null
) {

    /**
    * 
    * Values: GET,HEAD,POST,PUT,DELETE,CONNECT,OPTIONS,TRACE,PATCH
    */
    enum class Method(val value: kotlin.String){
    
        GET("GET"),
    
        HEAD("HEAD"),
    
        POST("POST"),
    
        PUT("PUT"),
    
        DELETE("DELETE"),
    
        CONNECT("CONNECT"),
    
        OPTIONS("OPTIONS"),
    
        TRACE("TRACE"),
    
        PATCH("PATCH");
    
    }

        val method get() = _method ?: throw IllegalArgumentException("method is required")
                    
        val host get() = _host ?: throw IllegalArgumentException("host is required")
                    
        val path get() = _path ?: throw IllegalArgumentException("path is required")
                    
}

