/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.api.model

import org.openapitools.server.api.model.CatalogsFeedCredentials
import org.openapitools.server.api.model.CatalogsFeedProcessingSchedule
import org.openapitools.server.api.model.CatalogsFeedsUpdateRequest
import org.openapitools.server.api.model.CatalogsFormat
import org.openapitools.server.api.model.CatalogsStatus
import org.openapitools.server.api.model.CatalogsType
import org.openapitools.server.api.model.CatalogsVerticalFeedsUpdateRequest
import org.openapitools.server.api.model.NullableCurrency
import org.openapitools.server.api.model.ProductAvailabilityType

        
import com.google.gson.annotations.SerializedName
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonInclude
/**
 * 
 * @param defaultAvailability 
 * @param defaultCurrency 
 * @param name A human-friendly name associated to a given feed.
 * @param format 
 * @param credentials 
 * @param location The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
 * @param preferredProcessingSchedule 
 * @param status 
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
data class FeedsUpdateRequest (
    @SerializedName("catalogType") private val _catalogType: CatalogsType?,
    val defaultAvailability: ProductAvailabilityType? = null,
    val defaultCurrency: NullableCurrency? = null,
    /* A human-friendly name associated to a given feed. */
    val name: kotlin.String? = null,
    val format: CatalogsFormat? = null,
    val credentials: CatalogsFeedCredentials? = null,
    /* The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing. */
    val location: kotlin.String? = null,
    val preferredProcessingSchedule: CatalogsFeedProcessingSchedule? = null,
    val status: CatalogsStatus? = null
) {

        val catalogType get() = _catalogType ?: throw IllegalArgumentException("catalogType is required")
                    
}

