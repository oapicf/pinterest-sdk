/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.api.model

import org.openapitools.server.api.model.Currency

        
import com.google.gson.annotations.SerializedName
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonInclude
/**
 * 
 * @param startDate Starting date of time period. Format: YYYY-MM-DD
 * @param poNumber The po number
 * @param billingContactFirstname The billing contact first name
 * @param billingContactLastname The billing contact last name
 * @param billingContactEmail The billing contact email
 * @param mediaContactFirstname The media contact first name
 * @param mediaContactLastname The media contact last name
 * @param mediaContactEmail The media contact email
 * @param pmpId The pmp id
 * @param orderName The order name
 * @param orderLineType Type can be Budget or Perpetual
 * @param acceptedTermsId The SFDC id for the terms
 * @param billtoCompanyId The bill-to company id
 * @param billtoBusinessAddressId The bill-to business address id
 * @param billtoBillingAddressId The bill-to billing address id
 * @param currencyInfo 
 * @param endDate End date of time period. Format: YYYY-MM-DD
 * @param budgetAmount If Budget order line, the budget amount.
 * @param agencyLink URL link for agency
 * @param userEmail The email of user submitting the insertion order
 * @param acceptedTermsTime The UTC timestamp (to the nearest sec) of when terms were accepted
 * @param estimatedMonthlySpend If Ongoing (perpetual) order line, the estimated monthly spend
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
data class SSIOCreateInsertionOrderRequest (
    /* Starting date of time period. Format: YYYY-MM-DD */
    @SerializedName("startDate") private val _startDate: kotlin.String?,
    /* The po number */
    @SerializedName("poNumber") private val _poNumber: kotlin.String?,
    /* The billing contact first name */
    @SerializedName("billingContactFirstname") private val _billingContactFirstname: kotlin.String?,
    /* The billing contact last name */
    @SerializedName("billingContactLastname") private val _billingContactLastname: kotlin.String?,
    /* The billing contact email */
    @SerializedName("billingContactEmail") private val _billingContactEmail: kotlin.String?,
    /* The media contact first name */
    @SerializedName("mediaContactFirstname") private val _mediaContactFirstname: kotlin.String?,
    /* The media contact last name */
    @SerializedName("mediaContactLastname") private val _mediaContactLastname: kotlin.String?,
    /* The media contact email */
    @SerializedName("mediaContactEmail") private val _mediaContactEmail: kotlin.String?,
    /* The pmp id */
    @SerializedName("pmpId") private val _pmpId: kotlin.String?,
    /* The order name */
    @SerializedName("orderName") private val _orderName: kotlin.String?,
    /* Type can be Budget or Perpetual */
    @SerializedName("orderLineType") private val _orderLineType: SSIOCreateInsertionOrderRequest.OrderLineType?,
    /* The SFDC id for the terms */
    @SerializedName("acceptedTermsId") private val _acceptedTermsId: kotlin.String?,
    /* The bill-to company id */
    @SerializedName("billtoCompanyId") private val _billtoCompanyId: kotlin.String?,
    /* The bill-to business address id */
    @SerializedName("billtoBusinessAddressId") private val _billtoBusinessAddressId: kotlin.String?,
    /* The bill-to billing address id */
    @SerializedName("billtoBillingAddressId") private val _billtoBillingAddressId: kotlin.String?,
    @SerializedName("currencyInfo") private val _currencyInfo: Currency?,
    /* End date of time period. Format: YYYY-MM-DD */
    val endDate: kotlin.String? = null,
    /* If Budget order line, the budget amount. */
    val budgetAmount: java.math.BigDecimal? = null,
    /* URL link for agency */
    val agencyLink: kotlin.String? = null,
    /* The email of user submitting the insertion order */
    val userEmail: kotlin.String? = null,
    /* The UTC timestamp (to the nearest sec) of when terms were accepted */
    val acceptedTermsTime: kotlin.Int? = null,
    /* If Ongoing (perpetual) order line, the estimated monthly spend */
    val estimatedMonthlySpend: java.math.BigDecimal? = null
) {

    /**
    * Type can be Budget or Perpetual
    * Values: BUDGET,PERPETUALS
    */
    enum class OrderLineType(val value: kotlin.String){
    
        BUDGET("BUDGET"),
    
        PERPETUALS("PERPETUALS");
    
    }

        val startDate get() = _startDate ?: throw IllegalArgumentException("startDate is required")
                    
        val poNumber get() = _poNumber ?: throw IllegalArgumentException("poNumber is required")
                    
        val billingContactFirstname get() = _billingContactFirstname ?: throw IllegalArgumentException("billingContactFirstname is required")
                    
        val billingContactLastname get() = _billingContactLastname ?: throw IllegalArgumentException("billingContactLastname is required")
                    
        val billingContactEmail get() = _billingContactEmail ?: throw IllegalArgumentException("billingContactEmail is required")
                    
        val mediaContactFirstname get() = _mediaContactFirstname ?: throw IllegalArgumentException("mediaContactFirstname is required")
                    
        val mediaContactLastname get() = _mediaContactLastname ?: throw IllegalArgumentException("mediaContactLastname is required")
                    
        val mediaContactEmail get() = _mediaContactEmail ?: throw IllegalArgumentException("mediaContactEmail is required")
                    
        val pmpId get() = _pmpId ?: throw IllegalArgumentException("pmpId is required")
                    
        val orderName get() = _orderName ?: throw IllegalArgumentException("orderName is required")
                    
        val orderLineType get() = _orderLineType ?: throw IllegalArgumentException("orderLineType is required")
                    
        val acceptedTermsId get() = _acceptedTermsId ?: throw IllegalArgumentException("acceptedTermsId is required")
                    
        val billtoCompanyId get() = _billtoCompanyId ?: throw IllegalArgumentException("billtoCompanyId is required")
                    
        val billtoBusinessAddressId get() = _billtoBusinessAddressId ?: throw IllegalArgumentException("billtoBusinessAddressId is required")
                    
        val billtoBillingAddressId get() = _billtoBillingAddressId ?: throw IllegalArgumentException("billtoBillingAddressId is required")
                    
        val currencyInfo get() = _currencyInfo ?: throw IllegalArgumentException("currencyInfo is required")
                    
}

