/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.api.model

import org.openapitools.server.api.model.CatalogsLocale
import org.openapitools.server.api.model.CatalogsProductGroupCreateRequest
import org.openapitools.server.api.model.CatalogsProductGroupFiltersRequest
import org.openapitools.server.api.model.CatalogsVerticalProductGroupCreateRequest
import org.openapitools.server.api.model.Country

        
import com.google.gson.annotations.SerializedName
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonInclude
/**
 * 
 * @param name 
 * @param filters 
 * @param feedId Catalog Feed id pertaining to the catalog product group.
 * @param description 
 * @param isFeatured boolean indicator of whether the product group is being featured or not
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
data class MultipleProductGroupsInner (
    @SerializedName("name") private val _name: kotlin.String?,
    @SerializedName("filters") private val _filters: CatalogsProductGroupFiltersRequest?,
    /* Catalog Feed id pertaining to the catalog product group. */
    @SerializedName("feedId") private val _feedId: kotlin.String?,
    @SerializedName("catalogType") private val _catalogType: MultipleProductGroupsInner.CatalogType?,
    /* Catalog id pertaining to the creative assets product group. */
    @SerializedName("catalogId") private val _catalogId: kotlin.String?,
    @SerializedName("country") private val _country: Country?,
    @SerializedName("locale") private val _locale: CatalogsLocale?,
    val description: kotlin.String? = null,
    /* boolean indicator of whether the product group is being featured or not */
    val isFeatured: kotlin.Boolean? = false
) {

        val name get() = _name ?: throw IllegalArgumentException("name is required")
                    
        val filters get() = _filters ?: throw IllegalArgumentException("filters is required")
                    
        val feedId get() = _feedId ?: throw IllegalArgumentException("feedId is required")
                    
        val catalogType get() = _catalogType ?: throw IllegalArgumentException("catalogType is required")
                    
        val catalogId get() = _catalogId ?: throw IllegalArgumentException("catalogId is required")
                    
        val country get() = _country ?: throw IllegalArgumentException("country is required")
                    
        val locale get() = _locale ?: throw IllegalArgumentException("locale is required")
                    
}

