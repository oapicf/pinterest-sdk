/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.api.model

import org.openapitools.server.api.model.NonNullableCatalogsCurrency
import org.openapitools.server.api.model.NonNullableProductAvailabilityType

        
import com.google.gson.annotations.SerializedName
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonInclude
/**
 * Retail product metadata entity
 * @param itemId The user-created unique ID that represents the product.
 * @param itemGroupId The parent ID of the product.
 * @param availability 
 * @param price The price of the product.
 * @param salePrice The discounted price of the product.
 * @param currency 
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
data class CatalogsRetailProductMetadata (
    /* The user-created unique ID that represents the product. */
    @SerializedName("itemId") private val _itemId: kotlin.String?,
    /* The parent ID of the product. */
    @SerializedName("itemGroupId") private val _itemGroupId: kotlin.String?,
    @SerializedName("availability") private val _availability: NonNullableProductAvailabilityType?,
    /* The price of the product. */
    @SerializedName("price") private val _price: java.math.BigDecimal?,
    /* The discounted price of the product. */
    @SerializedName("salePrice") private val _salePrice: java.math.BigDecimal?,
    @SerializedName("currency") private val _currency: NonNullableCatalogsCurrency?
) {

        val itemId get() = _itemId ?: throw IllegalArgumentException("itemId is required")
                    
        val itemGroupId get() = _itemGroupId ?: throw IllegalArgumentException("itemGroupId is required")
                    
        val availability get() = _availability ?: throw IllegalArgumentException("availability is required")
                    
        val price get() = _price ?: throw IllegalArgumentException("price is required")
                    
        val salePrice get() = _salePrice ?: throw IllegalArgumentException("salePrice is required")
                    
        val currency get() = _currency ?: throw IllegalArgumentException("currency is required")
                    
}

