/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.api.model

import org.openapitools.server.api.model.CatalogsProductGroupFilters
import org.openapitools.server.api.model.CatalogsProductGroupStatus
import org.openapitools.server.api.model.CatalogsProductGroupType

        
import com.google.gson.annotations.SerializedName
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonInclude
/**
 * 
 * @param catalogType 
 * @param id ID of the catalog product group.
 * @param filters 
 * @param catalogId Catalog id pertaining to the retail product group.
 * @param feedId id of the catalogs feed belonging to this catalog product group
 * @param name Name of catalog product group
 * @param description 
 * @param isFeatured boolean indicator of whether the product group is being featured or not
 * @param type 
 * @param status 
 * @param createdAt Unix timestamp in seconds of when catalog product group was created.
 * @param updatedAt Unix timestamp in seconds of last time catalog product group was updated.
 * @param country 
 * @param locale 
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
data class CatalogsRetailProductGroup (
    @SerializedName("catalogType") private val _catalogType: CatalogsRetailProductGroup.CatalogType?,
    /* ID of the catalog product group. */
    @SerializedName("id") private val _id: kotlin.String?,
    @SerializedName("filters") private val _filters: CatalogsProductGroupFilters?,
    /* Catalog id pertaining to the retail product group. */
    @SerializedName("catalogId") private val _catalogId: kotlin.String?,
    /* id of the catalogs feed belonging to this catalog product group */
    @SerializedName("feedId") private val _feedId: kotlin.String?,
    /* Name of catalog product group */
    val name: kotlin.String? = null,
    val description: kotlin.String? = null,
    /* boolean indicator of whether the product group is being featured or not */
    val isFeatured: kotlin.Boolean? = null,
    val type: CatalogsProductGroupType? = null,
    val status: CatalogsProductGroupStatus? = null,
    /* Unix timestamp in seconds of when catalog product group was created. */
    val createdAt: kotlin.Int? = null,
    /* Unix timestamp in seconds of last time catalog product group was updated. */
    val updatedAt: kotlin.Int? = null,
    val country: kotlin.String? = null,
    val locale: kotlin.String? = null
) {

    /**
    * 
    * Values: RETAIL
    */
    enum class CatalogType(val value: kotlin.String){
    
        RETAIL("RETAIL");
    
    }

        val catalogType get() = _catalogType ?: throw IllegalArgumentException("catalogType is required")
                    
        val id get() = _id ?: throw IllegalArgumentException("id is required")
                    
        val filters get() = _filters ?: throw IllegalArgumentException("filters is required")
                    
        val catalogId get() = _catalogId ?: throw IllegalArgumentException("catalogId is required")
                    
        val feedId get() = _feedId ?: throw IllegalArgumentException("feedId is required")
                    
}

