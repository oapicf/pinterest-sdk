/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.AudienceSharingApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Pinterest&#39;s REST API
 * Version: 5.14.0
* Generator version: 7.9.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license MIT
 * https://spdx.org/licenses/MIT
 */

goog.provide('API.Client.AudienceSharingApi');

goog.require('API.Client.AudienceAccountType');
goog.require('API.Client.BusinessSharedAudience');
goog.require('API.Client.BusinessSharedAudienceResponse');
goog.require('API.Client.Error');
goog.require('API.Client.SharedAudience');
goog.require('API.Client.SharedAudienceResponse');
goog.require('API.Client.ad_accounts_audiences_shared_accounts_list_200_response');
goog.require('API.Client.audiences_list_200_response');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.AudienceSharingApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('AudienceSharingApiBasePath') ?
                   /** @type {!string} */ ($injector.get('AudienceSharingApiBasePath')) :
                   'https://api.pinterest.com/v5';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('AudienceSharingApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('AudienceSharingApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.AudienceSharingApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * List accounts with access to an audience owned by an ad account
 * List all ad accounts and/or businesses that have access to a specific audience. The audience must be owned by the requesting ad account.
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!string} audienceId Unique identifier of the audience to use to filter the results.
 * @param {!AudienceAccountType} accountType Filter accounts by account type.
 * @param {!number=} opt_pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
 * @param {!string=} opt_bookmark Cursor used to fetch the next page of items
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ad_accounts_audiences_shared_accounts_list_200_response>}
 */
API.Client.AudienceSharingApi.prototype.adAccountsAudiencesSharedAccountsList = function(adAccountId, audienceId, accountType, opt_pageSize, opt_bookmark, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/audiences/shared/accounts'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling adAccountsAudiencesSharedAccountsList');
  }
  // verify required parameter 'audienceId' is set
  if (!audienceId) {
    throw new Error('Missing required parameter audienceId when calling adAccountsAudiencesSharedAccountsList');
  }
  // verify required parameter 'accountType' is set
  if (!accountType) {
    throw new Error('Missing required parameter accountType when calling adAccountsAudiencesSharedAccountsList');
  }
  if (audienceId !== undefined) {
    queryParameters['audience_id'] = audienceId;
  }

  if (accountType !== undefined) {
    queryParameters['account_type'] = accountType;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['page_size'] = opt_pageSize;
  }

  if (opt_bookmark !== undefined) {
    queryParameters['bookmark'] = opt_bookmark;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List accounts with access to an audience owned by a business
 * List all ad accounts and/or businesses that have access to a specific audience. The audience must either be owned by an ad account in the requesting business, or it must have been shared with the requesting business. If the requesting business is not the owner of the audience, only ad accounts owned by the requesting business will be returned.
 * @param {!string} businessId Unique identifier of the requesting business.
 * @param {!string} audienceId Unique identifier of the audience to use to filter the results.
 * @param {!AudienceAccountType} accountType Filter accounts by account type.
 * @param {!number=} opt_pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
 * @param {!string=} opt_bookmark Cursor used to fetch the next page of items
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ad_accounts_audiences_shared_accounts_list_200_response>}
 */
API.Client.AudienceSharingApi.prototype.businessAccountAudiencesSharedAccountsList = function(businessId, audienceId, accountType, opt_pageSize, opt_bookmark, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/businesses/{business_id}/audiences/shared/accounts'
      .replace('{' + 'business_id' + '}', String(businessId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'businessId' is set
  if (!businessId) {
    throw new Error('Missing required parameter businessId when calling businessAccountAudiencesSharedAccountsList');
  }
  // verify required parameter 'audienceId' is set
  if (!audienceId) {
    throw new Error('Missing required parameter audienceId when calling businessAccountAudiencesSharedAccountsList');
  }
  // verify required parameter 'accountType' is set
  if (!accountType) {
    throw new Error('Missing required parameter accountType when calling businessAccountAudiencesSharedAccountsList');
  }
  if (audienceId !== undefined) {
    queryParameters['audience_id'] = audienceId;
  }

  if (accountType !== undefined) {
    queryParameters['account_type'] = accountType;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['page_size'] = opt_pageSize;
  }

  if (opt_bookmark !== undefined) {
    queryParameters['bookmark'] = opt_bookmark;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List received audiences for a business
 * Get a list of received audiences for the given business.
 * @param {!string} businessId Unique identifier of the requesting business.
 * @param {!string=} opt_bookmark Cursor used to fetch the next page of items
 * @param {!string=} opt_order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
 * @param {!number=} opt_pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.audiences_list_200_response>}
 */
API.Client.AudienceSharingApi.prototype.sharedAudiencesForBusinessList = function(businessId, opt_bookmark, opt_order, opt_pageSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/businesses/{business_id}/audiences'
      .replace('{' + 'business_id' + '}', String(businessId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'businessId' is set
  if (!businessId) {
    throw new Error('Missing required parameter businessId when calling sharedAudiencesForBusinessList');
  }
  if (opt_bookmark !== undefined) {
    queryParameters['bookmark'] = opt_bookmark;
  }

  if (opt_order !== undefined) {
    queryParameters['order'] = opt_order;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['page_size'] = opt_pageSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update audience sharing between ad accounts
 * From an ad account, share a specific audience with another ad account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient ad account(s) must be in the same &lt;a href&#x3D;&#39;https://help.pinterest.com/en/business/article/create-and-manage-accounts&#39;&gt;Pinterest Business Hierarchy&lt;/a&gt; as the business owner of the ad account.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!SharedAudience} sharedAudience 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.SharedAudienceResponse>}
 */
API.Client.AudienceSharingApi.prototype.updateAdAccountToAdAccountSharedAudience = function(adAccountId, sharedAudience, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/audiences/ad_accounts/shared'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling updateAdAccountToAdAccountSharedAudience');
  }
  // verify required parameter 'sharedAudience' is set
  if (!sharedAudience) {
    throw new Error('Missing required parameter sharedAudience when calling updateAdAccountToAdAccountSharedAudience');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: sharedAudience,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update audience sharing from an ad account to businesses
 * From an ad account, share a specific audience with a business account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient business account must be in the same business hierarchy as the business owner of the ad account.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!BusinessSharedAudience} businessSharedAudience 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.BusinessSharedAudienceResponse>}
 */
API.Client.AudienceSharingApi.prototype.updateAdAccountToBusinessSharedAudience = function(adAccountId, businessSharedAudience, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/audiences/businesses/shared'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling updateAdAccountToBusinessSharedAudience');
  }
  // verify required parameter 'businessSharedAudience' is set
  if (!businessSharedAudience) {
    throw new Error('Missing required parameter businessSharedAudience when calling updateAdAccountToBusinessSharedAudience');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: businessSharedAudience,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update audience sharing from a business to ad accounts
 * From a business, share a specific audience with other ad account(s), or revoke access to a previously shared audience. &lt;ul&gt; &lt;li&gt;If the business is the owner of the audience, it can share with any ad account within the same business hierarchy.&lt;/li&gt; &lt;li&gt;If the business is the recipient of the audience, it can share with any of its owned ad accounts.&lt;/li&gt; &lt;/ul&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
 * @param {!string} businessId Unique identifier of the requesting business.
 * @param {!SharedAudience} sharedAudience 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.SharedAudienceResponse>}
 */
API.Client.AudienceSharingApi.prototype.updateBusinessToAdAccountSharedAudience = function(businessId, sharedAudience, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/businesses/{business_id}/audiences/ad_accounts/shared'
      .replace('{' + 'business_id' + '}', String(businessId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'businessId' is set
  if (!businessId) {
    throw new Error('Missing required parameter businessId when calling updateBusinessToAdAccountSharedAudience');
  }
  // verify required parameter 'sharedAudience' is set
  if (!sharedAudience) {
    throw new Error('Missing required parameter sharedAudience when calling updateBusinessToAdAccountSharedAudience');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: sharedAudience,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update audience sharing between businesses
 * From a business, share a specific audience with another business account, or revoke access to a previously shared audience. Only the audience owner can share the audience with other businesses, and the recipient business must be within the same business hierarchy.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
 * @param {!string} businessId Unique identifier of the requesting business.
 * @param {!BusinessSharedAudience} businessSharedAudience 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.BusinessSharedAudienceResponse>}
 */
API.Client.AudienceSharingApi.prototype.updateBusinessToBusinessSharedAudience = function(businessId, businessSharedAudience, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/businesses/{business_id}/audiences/businesses/shared'
      .replace('{' + 'business_id' + '}', String(businessId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'businessId' is set
  if (!businessId) {
    throw new Error('Missing required parameter businessId when calling updateBusinessToBusinessSharedAudience');
  }
  // verify required parameter 'businessSharedAudience' is set
  if (!businessSharedAudience) {
    throw new Error('Missing required parameter businessSharedAudience when calling updateBusinessToBusinessSharedAudience');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: businessSharedAudience,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
