/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.BusinessAccessInviteApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Pinterest&#39;s REST API
 * Version: 5.14.0
* Generator version: 7.9.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license MIT
 * https://spdx.org/licenses/MIT
 */

goog.provide('API.Client.BusinessAccessInviteApi');

goog.require('API.Client.AuthRespondInvitesBody');
goog.require('API.Client.CancelInvitesBody');
goog.require('API.Client.CreateAssetAccessRequestBody');
goog.require('API.Client.CreateAssetAccessRequestResponse');
goog.require('API.Client.CreateAssetInvitesRequest');
goog.require('API.Client.CreateInvitesResultsResponseArray');
goog.require('API.Client.CreateMembershipOrPartnershipInvitesBody');
goog.require('API.Client.DeleteInvitesResultsResponseArray');
goog.require('API.Client.Error');
goog.require('API.Client.InviteType');
goog.require('API.Client.RespondToInvitesResponseArray');
goog.require('API.Client.UpdateInvitesResultsResponseArray');
goog.require('API.Client.get_invites_200_response');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.BusinessAccessInviteApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('BusinessAccessInviteApiBasePath') ?
                   /** @type {!string} */ ($injector.get('BusinessAccessInviteApiBasePath')) :
                   'https://api.pinterest.com/v5';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('BusinessAccessInviteApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('BusinessAccessInviteApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.BusinessAccessInviteApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Create a request to access an existing partner&#39;s assets.
 * Create a request to access an existing partner&#39;s assets with the specified permissions. The request will be sent to the partner for approval. The assets that can be requested are ad accounts and profiles.
 * @param {!string} businessId Unique identifier of the requesting business.
 * @param {!CreateAssetAccessRequestBody} createAssetAccessRequestBody 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.CreateAssetAccessRequestResponse>}
 */
API.Client.BusinessAccessInviteApi.prototype.assetAccessRequestsCreate = function(businessId, createAssetAccessRequestBody, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/businesses/{business_id}/requests/assets/access'
      .replace('{' + 'business_id' + '}', String(businessId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'businessId' is set
  if (!businessId) {
    throw new Error('Missing required parameter businessId when calling assetAccessRequestsCreate');
  }
  // verify required parameter 'createAssetAccessRequestBody' is set
  if (!createAssetAccessRequestBody) {
    throw new Error('Missing required parameter createAssetAccessRequestBody when calling assetAccessRequestsCreate');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: createAssetAccessRequestBody,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Cancel invites/requests
 * Cancel membership/partnership invites and/or requests.
 * @param {!string} businessId Business id
 * @param {!CancelInvitesBody} cancelInvitesBody A list with invite ids
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.DeleteInvitesResultsResponseArray>}
 */
API.Client.BusinessAccessInviteApi.prototype.cancelInvitesOrRequests = function(businessId, cancelInvitesBody, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/businesses/{business_id}/invites'
      .replace('{' + 'business_id' + '}', String(businessId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'businessId' is set
  if (!businessId) {
    throw new Error('Missing required parameter businessId when calling cancelInvitesOrRequests');
  }
  // verify required parameter 'cancelInvitesBody' is set
  if (!cancelInvitesBody) {
    throw new Error('Missing required parameter cancelInvitesBody when calling cancelInvitesOrRequests');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
    data: cancelInvitesBody,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update invite/request with an asset permission
 * Assign asset permissions information to an existing invite/request. Can be used to: - Request access to a partner&#39;s asset. Note: This is only for when no existing partnership exists. If an existing   partnership exists, use \&quot;Create a request to access an existing partner&#39;s assets\&quot; to request access to your   partner&#39;s assets.     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot; - Invite a partner to access your business assets. Note: This is only for when there is no existing partnership.   If there is an existing partnership, use \&quot;Assign/Update partner asset permissions\&quot; to assign a partner access to   new assets.     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot; - Invite a member to access your business assets. Note: This is only for when there is no existing membership.   If there is an existing membership, use \&quot;Assign/Update member asset permissions\&quot; to assign a member access to new   assets.     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;  To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview.
 * @param {!string} businessId Unique identifier of the requesting business.
 * @param {!CreateAssetInvitesRequest} createAssetInvitesRequest A list of invites/requests together with the asset permissions to be assigned to the invite/request. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.UpdateInvitesResultsResponseArray>}
 */
API.Client.BusinessAccessInviteApi.prototype.createAssetInvites = function(businessId, createAssetInvitesRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/businesses/{business_id}/invites/assets/access'
      .replace('{' + 'business_id' + '}', String(businessId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'businessId' is set
  if (!businessId) {
    throw new Error('Missing required parameter businessId when calling createAssetInvites');
  }
  // verify required parameter 'createAssetInvitesRequest' is set
  if (!createAssetInvitesRequest) {
    throw new Error('Missing required parameter createAssetInvitesRequest when calling createAssetInvites');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: createAssetInvitesRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create invites or requests
 * Create batch invites or requests. Can create batch invites or requests as described below. - Invite members to join the business. This would required specifying the following:     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;     - business_role&#x3D;\&quot;EMPLOYEE\&quot; OR business_role&#x3D;\&quot;BIZ_ADMIN\&quot; (To learn more about business roles, visit     https://help.pinterest.com/en/business/article/profile-permissions-in-business-access.)     - members - Invite partners to access your business assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners - Request to be a partner so you can access their assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners
 * @param {!string} businessId Business id
 * @param {!CreateMembershipOrPartnershipInvitesBody} createMembershipOrPartnershipInvitesBody An object with the properties: invite_type, partners, members, business_role
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.CreateInvitesResultsResponseArray>}
 */
API.Client.BusinessAccessInviteApi.prototype.createMembershipOrPartnershipInvites = function(businessId, createMembershipOrPartnershipInvitesBody, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/businesses/{business_id}/invites'
      .replace('{' + 'business_id' + '}', String(businessId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'businessId' is set
  if (!businessId) {
    throw new Error('Missing required parameter businessId when calling createMembershipOrPartnershipInvites');
  }
  // verify required parameter 'createMembershipOrPartnershipInvitesBody' is set
  if (!createMembershipOrPartnershipInvitesBody) {
    throw new Error('Missing required parameter createMembershipOrPartnershipInvitesBody when calling createMembershipOrPartnershipInvites');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: createMembershipOrPartnershipInvitesBody,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get invites/requests
 * Get the membership/partnership invites and/or requests for the authorized user.
 * @param {!string} businessId Unique identifier of the requesting business.
 * @param {!boolean=} opt_isMember A boolean field to indicate whether the invite is to create a partnership or a membership.
 * @param {!Array<!string>=} opt_inviteStatus A list of invite statuses to filter invites by. Only invites whose status is in the provided statuses will be returned.
 * @param {!InviteType=} opt_inviteType Invite type to filter invites by. Only invites of the specified type will be returned.
 * @param {!string=} opt_bookmark Cursor used to fetch the next page of items
 * @param {!number=} opt_pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.get_invites_200_response>}
 */
API.Client.BusinessAccessInviteApi.prototype.getInvites = function(businessId, opt_isMember, opt_inviteStatus, opt_inviteType, opt_bookmark, opt_pageSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/businesses/{business_id}/invites'
      .replace('{' + 'business_id' + '}', String(businessId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'businessId' is set
  if (!businessId) {
    throw new Error('Missing required parameter businessId when calling getInvites');
  }
  if (opt_isMember !== undefined) {
    queryParameters['is_member'] = opt_isMember;
  }

  if (opt_inviteStatus !== undefined) {
    queryParameters['invite_status'] = opt_inviteStatus;
  }

  if (opt_inviteType !== undefined) {
    queryParameters['invite_type'] = opt_inviteType;
  }

  if (opt_bookmark !== undefined) {
    queryParameters['bookmark'] = opt_bookmark;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['page_size'] = opt_pageSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Accept or decline an invite/request
 * Accept or decline invites or requests.
 * @param {!AuthRespondInvitesBody} authRespondInvitesBody 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.RespondToInvitesResponseArray>}
 */
API.Client.BusinessAccessInviteApi.prototype.respondBusinessAccessInvites = function(authRespondInvitesBody, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/businesses/invites';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'authRespondInvitesBody' is set
  if (!authRespondInvitesBody) {
    throw new Error('Missing required parameter authRespondInvitesBody when calling respondBusinessAccessInvites');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: authRespondInvitesBody,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
