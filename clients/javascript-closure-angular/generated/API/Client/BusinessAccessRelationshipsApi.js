/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.BusinessAccessRelationshipsApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Pinterest&#39;s REST API
 * Version: 5.14.0
* Generator version: 7.9.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license MIT
 * https://spdx.org/licenses/MIT
 */

goog.provide('API.Client.BusinessAccessRelationshipsApi');

goog.require('API.Client.DeletePartnersRequest');
goog.require('API.Client.DeletePartnersResponse');
goog.require('API.Client.DeletedMembersResponse');
goog.require('API.Client.Error');
goog.require('API.Client.MemberBusinessRole');
goog.require('API.Client.MembersToDeleteBody');
goog.require('API.Client.PartnerType');
goog.require('API.Client.UpdateMemberBusinessRoleBody');
goog.require('API.Client.UpdateMemberResultsResponseArray');
goog.require('API.Client.get_business_employers_200_response');
goog.require('API.Client.get_business_members_200_response');
goog.require('API.Client.get_business_partners_200_response');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.BusinessAccessRelationshipsApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('BusinessAccessRelationshipsApiBasePath') ?
                   /** @type {!string} */ ($injector.get('BusinessAccessRelationshipsApiBasePath')) :
                   'https://api.pinterest.com/v5';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('BusinessAccessRelationshipsApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('BusinessAccessRelationshipsApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.BusinessAccessRelationshipsApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Terminate business memberships
 * Terminate memberships between the specified members and your business.
 * @param {!string} businessId Business id
 * @param {!MembersToDeleteBody} membersToDeleteBody List of members with role to delete.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.DeletedMembersResponse>}
 */
API.Client.BusinessAccessRelationshipsApi.prototype.deleteBusinessMembership = function(businessId, membersToDeleteBody, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/businesses/{business_id}/members'
      .replace('{' + 'business_id' + '}', String(businessId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'businessId' is set
  if (!businessId) {
    throw new Error('Missing required parameter businessId when calling deleteBusinessMembership');
  }
  // verify required parameter 'membersToDeleteBody' is set
  if (!membersToDeleteBody) {
    throw new Error('Missing required parameter membersToDeleteBody when calling deleteBusinessMembership');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
    data: membersToDeleteBody,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Terminate business partnerships
 * Terminate partnerships between the specified partners and your business. Note: You may only batch terminate partners of the same partner type.
 * @param {!string} businessId Unique identifier of the requesting business.
 * @param {!DeletePartnersRequest} deletePartnersRequest An object containing a \&quot;partner_ids\&quot; property composed of a list of partner IDs and a \&quot;partners_type\&quot; property specifying the type of partners to delete. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.DeletePartnersResponse>}
 */
API.Client.BusinessAccessRelationshipsApi.prototype.deleteBusinessPartners = function(businessId, deletePartnersRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/businesses/{business_id}/partners'
      .replace('{' + 'business_id' + '}', String(businessId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'businessId' is set
  if (!businessId) {
    throw new Error('Missing required parameter businessId when calling deleteBusinessPartners');
  }
  // verify required parameter 'deletePartnersRequest' is set
  if (!deletePartnersRequest) {
    throw new Error('Missing required parameter deletePartnersRequest when calling deleteBusinessPartners');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
    data: deletePartnersRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List business employers for user
 * Get all of the viewing user&#39;s business employers.
 * @param {!number=} opt_pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
 * @param {!string=} opt_bookmark Cursor used to fetch the next page of items
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.get_business_employers_200_response>}
 */
API.Client.BusinessAccessRelationshipsApi.prototype.getBusinessEmployers = function(opt_pageSize, opt_bookmark, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/businesses/employers';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_pageSize !== undefined) {
    queryParameters['page_size'] = opt_pageSize;
  }

  if (opt_bookmark !== undefined) {
    queryParameters['bookmark'] = opt_bookmark;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get business members
 * Get all members of the specified business. The return response will include the member&#39;s business_role and assets they have access to if assets_summary&#x3D;TRUE
 * @param {!string} businessId Unique identifier of the requesting business.
 * @param {!boolean=} opt_assetsSummary Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are
 * @param {!Array<!API.Client.MemberBusinessRole>=} opt_businessRoles A list of business roles to filter the members by. Only members whose roles are in the specified roles will be returned.
 * @param {!string=} opt_memberIds A list of business members ids separated by comma.
 * @param {!number=} opt_startIndex An index to start fetching the results from. Only the results starting from this index will be returned.
 * @param {!string=} opt_bookmark Cursor used to fetch the next page of items
 * @param {!number=} opt_pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.get_business_members_200_response>}
 */
API.Client.BusinessAccessRelationshipsApi.prototype.getBusinessMembers = function(businessId, opt_assetsSummary, opt_businessRoles, opt_memberIds, opt_startIndex, opt_bookmark, opt_pageSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/businesses/{business_id}/members'
      .replace('{' + 'business_id' + '}', String(businessId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'businessId' is set
  if (!businessId) {
    throw new Error('Missing required parameter businessId when calling getBusinessMembers');
  }
  if (opt_assetsSummary !== undefined) {
    queryParameters['assets_summary'] = opt_assetsSummary;
  }

  if (opt_businessRoles !== undefined) {
    queryParameters['business_roles'] = opt_businessRoles;
  }

  if (opt_memberIds !== undefined) {
    queryParameters['member_ids'] = opt_memberIds;
  }

  if (opt_startIndex !== undefined) {
    queryParameters['start_index'] = opt_startIndex;
  }

  if (opt_bookmark !== undefined) {
    queryParameters['bookmark'] = opt_bookmark;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['page_size'] = opt_pageSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get business partners
 * Get all partners of the specified business.  If the assets_summary&#x3D;TRUE and: - partner_type&#x3D;INTERNAL, the business assets returned are your business assets the partner has access to. - partner_type&#x3D;EXTERNAL, the business assets returned are your partner&#39;s business assets the partner has granted you   access to.
 * @param {!string} businessId Unique identifier of the requesting business.
 * @param {!boolean=} opt_assetsSummary Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are
 * @param {!PartnerType=} opt_partnerType Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset.
 * @param {!string=} opt_partnerIds A list of business partner ids separated by commas used to filter the results. Only partners with the specified ids will be returned.
 * @param {!number=} opt_startIndex An index to start fetching the results from. Only the results starting from this index will be returned.
 * @param {!number=} opt_pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
 * @param {!string=} opt_bookmark Cursor used to fetch the next page of items
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.get_business_partners_200_response>}
 */
API.Client.BusinessAccessRelationshipsApi.prototype.getBusinessPartners = function(businessId, opt_assetsSummary, opt_partnerType, opt_partnerIds, opt_startIndex, opt_pageSize, opt_bookmark, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/businesses/{business_id}/partners'
      .replace('{' + 'business_id' + '}', String(businessId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'businessId' is set
  if (!businessId) {
    throw new Error('Missing required parameter businessId when calling getBusinessPartners');
  }
  if (opt_assetsSummary !== undefined) {
    queryParameters['assets_summary'] = opt_assetsSummary;
  }

  if (opt_partnerType !== undefined) {
    queryParameters['partner_type'] = opt_partnerType;
  }

  if (opt_partnerIds !== undefined) {
    queryParameters['partner_ids'] = opt_partnerIds;
  }

  if (opt_startIndex !== undefined) {
    queryParameters['start_index'] = opt_startIndex;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['page_size'] = opt_pageSize;
  }

  if (opt_bookmark !== undefined) {
    queryParameters['bookmark'] = opt_bookmark;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update member&#39;s business role
 * Update a member&#39;s business role within the business.
 * @param {!string} businessId Business id
 * @param {!Array<!API.Client.UpdateMemberBusinessRoleBody>} updateMemberBusinessRoleBody List of objects with the member id and the business_role.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.UpdateMemberResultsResponseArray>}
 */
API.Client.BusinessAccessRelationshipsApi.prototype.updateBusinessMemberships = function(businessId, updateMemberBusinessRoleBody, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/businesses/{business_id}/members'
      .replace('{' + 'business_id' + '}', String(businessId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'businessId' is set
  if (!businessId) {
    throw new Error('Missing required parameter businessId when calling updateBusinessMemberships');
  }
  // verify required parameter 'updateMemberBusinessRoleBody' is set
  if (!updateMemberBusinessRoleBody) {
    throw new Error('Missing required parameter updateMemberBusinessRoleBody when calling updateBusinessMemberships');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: updateMemberBusinessRoleBody,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
