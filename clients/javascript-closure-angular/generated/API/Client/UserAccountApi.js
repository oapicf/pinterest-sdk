/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.UserAccountApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Pinterest&#39;s REST API
 * Version: 5.14.0
* Generator version: 7.9.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license MIT
 * https://spdx.org/licenses/MIT
 */

goog.provide('API.Client.UserAccountApi');

goog.require('API.Client.Account');
goog.require('API.Client.AnalyticsMetricsResponse');
goog.require('API.Client.Error');
goog.require('API.Client.FollowUserRequest');
goog.require('API.Client.LinkedBusiness');
goog.require('API.Client.TopPinsAnalyticsResponse');
goog.require('API.Client.TopVideoPinsAnalyticsResponse');
goog.require('API.Client.UserFollowingFeedType');
goog.require('API.Client.UserSummary');
goog.require('API.Client.UserWebsiteSummary');
goog.require('API.Client.UserWebsiteVerificationCode');
goog.require('API.Client.UserWebsiteVerifyRequest');
goog.require('API.Client.boards_user_follows_list_200_response');
goog.require('API.Client.date');
goog.require('API.Client.followers_list_200_response');
goog.require('API.Client.user_account_followed_interests_200_response');
goog.require('API.Client.user_following_get_200_response');
goog.require('API.Client.user_websites_get_200_response');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.UserAccountApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('UserAccountApiBasePath') ?
                   /** @type {!string} */ ($injector.get('UserAccountApiBasePath')) :
                   'https://api.pinterest.com/v5';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('UserAccountApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('UserAccountApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.UserAccountApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * List following boards
 * Get a list of the boards a user follows. The request returns a board summary object array.
 * @param {!string=} opt_bookmark Cursor used to fetch the next page of items
 * @param {!number=} opt_pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
 * @param {!boolean=} opt_explicitFollowing Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows.
 * @param {!string=} opt_adAccountId Unique identifier of an ad account.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.boards_user_follows_list_200_response>}
 */
API.Client.UserAccountApi.prototype.boardsUserFollowsList = function(opt_bookmark, opt_pageSize, opt_explicitFollowing, opt_adAccountId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/user_account/following/boards';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_bookmark !== undefined) {
    queryParameters['bookmark'] = opt_bookmark;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['page_size'] = opt_pageSize;
  }

  if (opt_explicitFollowing !== undefined) {
    queryParameters['explicit_following'] = opt_explicitFollowing;
  }

  if (opt_adAccountId !== undefined) {
    queryParameters['ad_account_id'] = opt_adAccountId;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Follow user
 * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Use this request, as a signed-in user, to follow another user.
 * @param {!string} username A valid username
 * @param {!FollowUserRequest} followUserRequest Follow a user.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.UserSummary>}
 */
API.Client.UserAccountApi.prototype.followUserUpdate = function(username, followUserRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/user_account/following/{username}'
      .replace('{' + 'username' + '}', String(username));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'username' is set
  if (!username) {
    throw new Error('Missing required parameter username when calling followUserUpdate');
  }
  // verify required parameter 'followUserRequest' is set
  if (!followUserRequest) {
    throw new Error('Missing required parameter followUserRequest when calling followUserUpdate');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: followUserRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List followers
 * Get a list of your followers.
 * @param {!string=} opt_bookmark Cursor used to fetch the next page of items
 * @param {!number=} opt_pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.followers_list_200_response>}
 */
API.Client.UserAccountApi.prototype.followersList = function(opt_bookmark, opt_pageSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/user_account/followers';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_bookmark !== undefined) {
    queryParameters['bookmark'] = opt_bookmark;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['page_size'] = opt_pageSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List linked businesses
 * Get a list of your linked business accounts.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.LinkedBusiness>>}
 */
API.Client.UserAccountApi.prototype.linkedBusinessAccountsGet = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/user_account/businesses';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Unverify website
 * Unverifu a website verified by the signed-in user.
 * @param {!string} website Website with path or domain only
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.UserAccountApi.prototype.unverifyWebsiteDelete = function(website, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/user_account/websites';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'website' is set
  if (!website) {
    throw new Error('Missing required parameter website when calling unverifyWebsiteDelete');
  }
  if (website !== undefined) {
    queryParameters['website'] = website;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get user account analytics
 * Get analytics for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
 * @param {!API.Client.date} startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
 * @param {!API.Client.date} endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
 * @param {!string=} opt_fromClaimedContent Filter on Pins that match your claimed domain.
 * @param {!string=} opt_pinFormat Pin formats to get data for, default is all.
 * @param {!string=} opt_appTypes Apps or devices to get data for, default is all.
 * @param {!string=} opt_contentType Filter to paid or organic data. Default is all.
 * @param {!string=} opt_source Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts
 * @param {!Array<!string>=} opt_metricTypes Metric types to get data for, default is all. 
 * @param {!string=} opt_splitField How to split the data into groups. Not including this param means data won&#39;t be split.
 * @param {!string=} opt_adAccountId Unique identifier of an ad account.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Object<!string, API.Client.AnalyticsMetricsResponse>>}
 */
API.Client.UserAccountApi.prototype.userAccountAnalytics = function(startDate, endDate, opt_fromClaimedContent, opt_pinFormat, opt_appTypes, opt_contentType, opt_source, opt_metricTypes, opt_splitField, opt_adAccountId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/user_account/analytics';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'startDate' is set
  if (!startDate) {
    throw new Error('Missing required parameter startDate when calling userAccountAnalytics');
  }
  // verify required parameter 'endDate' is set
  if (!endDate) {
    throw new Error('Missing required parameter endDate when calling userAccountAnalytics');
  }
  if (startDate !== undefined) {
    queryParameters['start_date'] = startDate;
  }

  if (endDate !== undefined) {
    queryParameters['end_date'] = endDate;
  }

  if (opt_fromClaimedContent !== undefined) {
    queryParameters['from_claimed_content'] = opt_fromClaimedContent;
  }

  if (opt_pinFormat !== undefined) {
    queryParameters['pin_format'] = opt_pinFormat;
  }

  if (opt_appTypes !== undefined) {
    queryParameters['app_types'] = opt_appTypes;
  }

  if (opt_contentType !== undefined) {
    queryParameters['content_type'] = opt_contentType;
  }

  if (opt_source !== undefined) {
    queryParameters['source'] = opt_source;
  }

  if (opt_metricTypes !== undefined) {
    queryParameters['metric_types'] = opt_metricTypes;
  }

  if (opt_splitField !== undefined) {
    queryParameters['split_field'] = opt_splitField;
  }

  if (opt_adAccountId !== undefined) {
    queryParameters['ad_account_id'] = opt_adAccountId;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get user account top pins analytics
 * Gets analytics data about a user&#39;s top pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
 * @param {!API.Client.date} startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
 * @param {!API.Client.date} endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
 * @param {!string} sortBy Specify sorting order for metrics
 * @param {!string=} opt_fromClaimedContent Filter on Pins that match your claimed domain.
 * @param {!string=} opt_pinFormat Pin formats to get data for, default is all.
 * @param {!string=} opt_appTypes Apps or devices to get data for, default is all.
 * @param {!string=} opt_contentType Filter to paid or organic data. Default is all.
 * @param {!string=} opt_source Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts
 * @param {!Array<!string>=} opt_metricTypes Metric types to get data for, default is all. 
 * @param {!number=} opt_numOfPins Number of pins to include, default is 10. Max is 50.
 * @param {!number=} opt_createdInLastNDays Get metrics for pins created in the last \&quot;n\&quot; days.
 * @param {!string=} opt_adAccountId Unique identifier of an ad account.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.TopPinsAnalyticsResponse>}
 */
API.Client.UserAccountApi.prototype.userAccountAnalyticsTopPins = function(startDate, endDate, sortBy, opt_fromClaimedContent, opt_pinFormat, opt_appTypes, opt_contentType, opt_source, opt_metricTypes, opt_numOfPins, opt_createdInLastNDays, opt_adAccountId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/user_account/analytics/top_pins';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'startDate' is set
  if (!startDate) {
    throw new Error('Missing required parameter startDate when calling userAccountAnalyticsTopPins');
  }
  // verify required parameter 'endDate' is set
  if (!endDate) {
    throw new Error('Missing required parameter endDate when calling userAccountAnalyticsTopPins');
  }
  // verify required parameter 'sortBy' is set
  if (!sortBy) {
    throw new Error('Missing required parameter sortBy when calling userAccountAnalyticsTopPins');
  }
  if (startDate !== undefined) {
    queryParameters['start_date'] = startDate;
  }

  if (endDate !== undefined) {
    queryParameters['end_date'] = endDate;
  }

  if (sortBy !== undefined) {
    queryParameters['sort_by'] = sortBy;
  }

  if (opt_fromClaimedContent !== undefined) {
    queryParameters['from_claimed_content'] = opt_fromClaimedContent;
  }

  if (opt_pinFormat !== undefined) {
    queryParameters['pin_format'] = opt_pinFormat;
  }

  if (opt_appTypes !== undefined) {
    queryParameters['app_types'] = opt_appTypes;
  }

  if (opt_contentType !== undefined) {
    queryParameters['content_type'] = opt_contentType;
  }

  if (opt_source !== undefined) {
    queryParameters['source'] = opt_source;
  }

  if (opt_metricTypes !== undefined) {
    queryParameters['metric_types'] = opt_metricTypes;
  }

  if (opt_numOfPins !== undefined) {
    queryParameters['num_of_pins'] = opt_numOfPins;
  }

  if (opt_createdInLastNDays !== undefined) {
    queryParameters['created_in_last_n_days'] = opt_createdInLastNDays;
  }

  if (opt_adAccountId !== undefined) {
    queryParameters['ad_account_id'] = opt_adAccountId;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get user account top video pins analytics
 * Gets analytics data about a user&#39;s top video pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
 * @param {!API.Client.date} startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
 * @param {!API.Client.date} endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
 * @param {!string} sortBy Specify sorting order for video metrics
 * @param {!string=} opt_fromClaimedContent Filter on Pins that match your claimed domain.
 * @param {!string=} opt_pinFormat Pin formats to get data for, default is all.
 * @param {!string=} opt_appTypes Apps or devices to get data for, default is all.
 * @param {!string=} opt_contentType Filter to paid or organic data. Default is all.
 * @param {!string=} opt_source Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts
 * @param {!Array<!string>=} opt_metricTypes Metric types to get video data for, default is all. 
 * @param {!number=} opt_numOfPins Number of pins to include, default is 10. Max is 50.
 * @param {!number=} opt_createdInLastNDays Get metrics for pins created in the last \&quot;n\&quot; days.
 * @param {!string=} opt_adAccountId Unique identifier of an ad account.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.TopVideoPinsAnalyticsResponse>}
 */
API.Client.UserAccountApi.prototype.userAccountAnalyticsTopVideoPins = function(startDate, endDate, sortBy, opt_fromClaimedContent, opt_pinFormat, opt_appTypes, opt_contentType, opt_source, opt_metricTypes, opt_numOfPins, opt_createdInLastNDays, opt_adAccountId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/user_account/analytics/top_video_pins';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'startDate' is set
  if (!startDate) {
    throw new Error('Missing required parameter startDate when calling userAccountAnalyticsTopVideoPins');
  }
  // verify required parameter 'endDate' is set
  if (!endDate) {
    throw new Error('Missing required parameter endDate when calling userAccountAnalyticsTopVideoPins');
  }
  // verify required parameter 'sortBy' is set
  if (!sortBy) {
    throw new Error('Missing required parameter sortBy when calling userAccountAnalyticsTopVideoPins');
  }
  if (startDate !== undefined) {
    queryParameters['start_date'] = startDate;
  }

  if (endDate !== undefined) {
    queryParameters['end_date'] = endDate;
  }

  if (sortBy !== undefined) {
    queryParameters['sort_by'] = sortBy;
  }

  if (opt_fromClaimedContent !== undefined) {
    queryParameters['from_claimed_content'] = opt_fromClaimedContent;
  }

  if (opt_pinFormat !== undefined) {
    queryParameters['pin_format'] = opt_pinFormat;
  }

  if (opt_appTypes !== undefined) {
    queryParameters['app_types'] = opt_appTypes;
  }

  if (opt_contentType !== undefined) {
    queryParameters['content_type'] = opt_contentType;
  }

  if (opt_source !== undefined) {
    queryParameters['source'] = opt_source;
  }

  if (opt_metricTypes !== undefined) {
    queryParameters['metric_types'] = opt_metricTypes;
  }

  if (opt_numOfPins !== undefined) {
    queryParameters['num_of_pins'] = opt_numOfPins;
  }

  if (opt_createdInLastNDays !== undefined) {
    queryParameters['created_in_last_n_days'] = opt_createdInLastNDays;
  }

  if (opt_adAccountId !== undefined) {
    queryParameters['ad_account_id'] = opt_adAccountId;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List following interests
 * Get a list of a user&#39;s following interests in one place.
 * @param {!string} username A valid username
 * @param {!string=} opt_bookmark Cursor used to fetch the next page of items
 * @param {!number=} opt_pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.user_account_followed_interests_200_response>}
 */
API.Client.UserAccountApi.prototype.userAccountFollowedInterests = function(username, opt_bookmark, opt_pageSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/users/{username}/interests/follow'
      .replace('{' + 'username' + '}', String(username));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'username' is set
  if (!username) {
    throw new Error('Missing required parameter username when calling userAccountFollowedInterests');
  }
  if (opt_bookmark !== undefined) {
    queryParameters['bookmark'] = opt_bookmark;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['page_size'] = opt_pageSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get user account
 * Get account information for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/getting-started/using-business-access/&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
 * @param {!string=} opt_adAccountId Unique identifier of an ad account.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Account>}
 */
API.Client.UserAccountApi.prototype.userAccountGet = function(opt_adAccountId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/user_account';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_adAccountId !== undefined) {
    queryParameters['ad_account_id'] = opt_adAccountId;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List following
 * Get a list of who a certain user follows.
 * @param {!string=} opt_bookmark Cursor used to fetch the next page of items
 * @param {!number=} opt_pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
 * @param {!UserFollowingFeedType=} opt_feedType Thrift param specifying what type of followees will be kept. Default to include all followees.
 * @param {!boolean=} opt_explicitFollowing Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows.
 * @param {!string=} opt_adAccountId Unique identifier of an ad account.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.user_following_get_200_response>}
 */
API.Client.UserAccountApi.prototype.userFollowingGet = function(opt_bookmark, opt_pageSize, opt_feedType, opt_explicitFollowing, opt_adAccountId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/user_account/following';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_bookmark !== undefined) {
    queryParameters['bookmark'] = opt_bookmark;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['page_size'] = opt_pageSize;
  }

  if (opt_feedType !== undefined) {
    queryParameters['feed_type'] = opt_feedType;
  }

  if (opt_explicitFollowing !== undefined) {
    queryParameters['explicit_following'] = opt_explicitFollowing;
  }

  if (opt_adAccountId !== undefined) {
    queryParameters['ad_account_id'] = opt_adAccountId;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get user websites
 * Get user websites, claimed or not
 * @param {!string=} opt_bookmark Cursor used to fetch the next page of items
 * @param {!number=} opt_pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.user_websites_get_200_response>}
 */
API.Client.UserAccountApi.prototype.userWebsitesGet = function(opt_bookmark, opt_pageSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/user_account/websites';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_bookmark !== undefined) {
    queryParameters['bookmark'] = opt_bookmark;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['page_size'] = opt_pageSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Verify website
 * Verify a website as a signed-in user.
 * @param {!UserWebsiteVerifyRequest} userWebsiteVerifyRequest Verify a website.
 * @param {!string=} opt_adAccountId Unique identifier of an ad account.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.UserWebsiteSummary>}
 */
API.Client.UserAccountApi.prototype.verifyWebsiteUpdate = function(userWebsiteVerifyRequest, opt_adAccountId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/user_account/websites';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'userWebsiteVerifyRequest' is set
  if (!userWebsiteVerifyRequest) {
    throw new Error('Missing required parameter userWebsiteVerifyRequest when calling verifyWebsiteUpdate');
  }
  if (opt_adAccountId !== undefined) {
    queryParameters['ad_account_id'] = opt_adAccountId;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: userWebsiteVerifyRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get user verification code for website claiming
 * Get verification code for user to install on the website to claim it.
 * @param {!string=} opt_adAccountId Unique identifier of an ad account.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.UserWebsiteVerificationCode>}
 */
API.Client.UserAccountApi.prototype.websiteVerificationGet = function(opt_adAccountId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/user_account/websites/verification';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_adAccountId !== undefined) {
    queryParameters['ad_account_id'] = opt_adAccountId;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
