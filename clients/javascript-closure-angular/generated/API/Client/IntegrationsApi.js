/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.IntegrationsApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Pinterest&#39;s REST API
 * Version: 5.14.0
* Generator version: 7.9.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license MIT
 * https://spdx.org/licenses/MIT
 */

goog.provide('API.Client.IntegrationsApi');

goog.require('API.Client.DetailedError');
goog.require('API.Client.Error');
goog.require('API.Client.IntegrationLogsRequest');
goog.require('API.Client.IntegrationLogsSuccessResponse');
goog.require('API.Client.IntegrationMetadata');
goog.require('API.Client.IntegrationRecord');
goog.require('API.Client.IntegrationRequest');
goog.require('API.Client.IntegrationRequestPatch');
goog.require('API.Client.integrations_get_list_200_response');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.IntegrationsApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('IntegrationsApiBasePath') ?
                   /** @type {!string} */ ($injector.get('IntegrationsApiBasePath')) :
                   'https://api.pinterest.com/v5';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('IntegrationsApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('IntegrationsApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.IntegrationsApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Delete commerce integration
 * Delete commerce integration metadata for the given external business ID. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
 * @param {!string} externalBusinessId External business ID for the integration.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.IntegrationsApi.prototype.integrationsCommerceDel = function(externalBusinessId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/integrations/commerce/{external_business_id}'
      .replace('{' + 'external_business_id' + '}', String(externalBusinessId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'externalBusinessId' is set
  if (!externalBusinessId) {
    throw new Error('Missing required parameter externalBusinessId when calling integrationsCommerceDel');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get commerce integration
 * Get commerce integration metadata associated with the given external business ID. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
 * @param {!string} externalBusinessId External business ID for the integration.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.IntegrationMetadata>}
 */
API.Client.IntegrationsApi.prototype.integrationsCommerceGet = function(externalBusinessId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/integrations/commerce/{external_business_id}'
      .replace('{' + 'external_business_id' + '}', String(externalBusinessId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'externalBusinessId' is set
  if (!externalBusinessId) {
    throw new Error('Missing required parameter externalBusinessId when calling integrationsCommerceGet');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update commerce integration
 * Update commerce integration metadata for the given external business ID. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
 * @param {!string} externalBusinessId External business ID for the integration.
 * @param {!IntegrationRequestPatch=} opt_integrationRequestPatch Parameters to get create/update the Integration Metadata
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.IntegrationMetadata>}
 */
API.Client.IntegrationsApi.prototype.integrationsCommercePatch = function(externalBusinessId, opt_integrationRequestPatch, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/integrations/commerce/{external_business_id}'
      .replace('{' + 'external_business_id' + '}', String(externalBusinessId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'externalBusinessId' is set
  if (!externalBusinessId) {
    throw new Error('Missing required parameter externalBusinessId when calling integrationsCommercePatch');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: opt_integrationRequestPatch,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create commerce integration
 * Create commerce integration metadata to link an external business ID with a Pinterest merchant &amp; ad account. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
 * @param {!IntegrationRequest=} opt_integrationRequest Parameters to get create/update the Integration Metadata
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.IntegrationMetadata>}
 */
API.Client.IntegrationsApi.prototype.integrationsCommercePost = function(opt_integrationRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/integrations/commerce';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: opt_integrationRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get integration metadata
 * Get integration metadata by ID. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
 * @param {!string} id Integration ID.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.IntegrationRecord>}
 */
API.Client.IntegrationsApi.prototype.integrationsGetById = function(id, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/integrations/{id}'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling integrationsGetById');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get integration metadata list
 * Get integration metadata list. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
 * @param {!string=} opt_bookmark Cursor used to fetch the next page of items
 * @param {!number=} opt_pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.integrations_get_list_200_response>}
 */
API.Client.IntegrationsApi.prototype.integrationsGetList = function(opt_bookmark, opt_pageSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/integrations';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_bookmark !== undefined) {
    queryParameters['bookmark'] = opt_bookmark;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['page_size'] = opt_pageSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Receives batched logs from integration applications.
 * This endpoint receives batched logs from integration applications on partner platforms. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
 * @param {!IntegrationLogsRequest} integrationLogsRequest Ingest log information from external integration application.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.IntegrationLogsSuccessResponse>}
 */
API.Client.IntegrationsApi.prototype.integrationsLogsPost = function(integrationLogsRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/integrations/logs';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'integrationLogsRequest' is set
  if (!integrationLogsRequest) {
    throw new Error('Missing required parameter integrationLogsRequest when calling integrationsLogsPost');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: integrationLogsRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
