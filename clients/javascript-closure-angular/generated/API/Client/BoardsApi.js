/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.BoardsApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Pinterest&#39;s REST API
 * Version: 5.14.0
* Generator version: 7.9.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license MIT
 * https://spdx.org/licenses/MIT
 */

goog.provide('API.Client.BoardsApi');

goog.require('API.Client.Board');
goog.require('API.Client.BoardSection');
goog.require('API.Client.BoardUpdate');
goog.require('API.Client.Error');
goog.require('API.Client.board_sections_list_200_response');
goog.require('API.Client.boards_list_200_response');
goog.require('API.Client.boards_list_pins_200_response');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.BoardsApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('BoardsApiBasePath') ?
                   /** @type {!string} */ ($injector.get('BoardsApiBasePath')) :
                   'https://api.pinterest.com/v5';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('BoardsApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('BoardsApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.BoardsApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Create board section
 * Create a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
 * @param {!string} boardId Unique identifier of a board.
 * @param {!BoardSection} boardSection Create a board section.
 * @param {!string=} opt_adAccountId Unique identifier of an ad account.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.BoardSection>}
 */
API.Client.BoardsApi.prototype.boardSectionsCreate = function(boardId, boardSection, opt_adAccountId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/boards/{board_id}/sections'
      .replace('{' + 'board_id' + '}', String(boardId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'boardId' is set
  if (!boardId) {
    throw new Error('Missing required parameter boardId when calling boardSectionsCreate');
  }
  // verify required parameter 'boardSection' is set
  if (!boardSection) {
    throw new Error('Missing required parameter boardSection when calling boardSectionsCreate');
  }
  if (opt_adAccountId !== undefined) {
    queryParameters['ad_account_id'] = opt_adAccountId;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: boardSection,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete board section
 * Delete a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
 * @param {!string} boardId Unique identifier of a board.
 * @param {!string} sectionId Unique identifier of a board section.
 * @param {!string=} opt_adAccountId Unique identifier of an ad account.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.BoardsApi.prototype.boardSectionsDelete = function(boardId, sectionId, opt_adAccountId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/boards/{board_id}/sections/{section_id}'
      .replace('{' + 'board_id' + '}', String(boardId))
      .replace('{' + 'section_id' + '}', String(sectionId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'boardId' is set
  if (!boardId) {
    throw new Error('Missing required parameter boardId when calling boardSectionsDelete');
  }
  // verify required parameter 'sectionId' is set
  if (!sectionId) {
    throw new Error('Missing required parameter sectionId when calling boardSectionsDelete');
  }
  if (opt_adAccountId !== undefined) {
    queryParameters['ad_account_id'] = opt_adAccountId;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List board sections
 * Get a list of all board sections from a board owned by the \&quot;operation user_account\&quot; - or a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
 * @param {!string} boardId Unique identifier of a board.
 * @param {!string=} opt_adAccountId Unique identifier of an ad account.
 * @param {!string=} opt_bookmark Cursor used to fetch the next page of items
 * @param {!number=} opt_pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.board_sections_list_200_response>}
 */
API.Client.BoardsApi.prototype.boardSectionsList = function(boardId, opt_adAccountId, opt_bookmark, opt_pageSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/boards/{board_id}/sections'
      .replace('{' + 'board_id' + '}', String(boardId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'boardId' is set
  if (!boardId) {
    throw new Error('Missing required parameter boardId when calling boardSectionsList');
  }
  if (opt_adAccountId !== undefined) {
    queryParameters['ad_account_id'] = opt_adAccountId;
  }

  if (opt_bookmark !== undefined) {
    queryParameters['bookmark'] = opt_bookmark;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['page_size'] = opt_pageSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List Pins on board section
 * Get a list of the Pins on a board section of a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
 * @param {!string} boardId Unique identifier of a board.
 * @param {!string} sectionId Unique identifier of a board section.
 * @param {!string=} opt_adAccountId Unique identifier of an ad account.
 * @param {!string=} opt_bookmark Cursor used to fetch the next page of items
 * @param {!number=} opt_pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.boards_list_pins_200_response>}
 */
API.Client.BoardsApi.prototype.boardSectionsListPins = function(boardId, sectionId, opt_adAccountId, opt_bookmark, opt_pageSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/boards/{board_id}/sections/{section_id}/pins'
      .replace('{' + 'board_id' + '}', String(boardId))
      .replace('{' + 'section_id' + '}', String(sectionId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'boardId' is set
  if (!boardId) {
    throw new Error('Missing required parameter boardId when calling boardSectionsListPins');
  }
  // verify required parameter 'sectionId' is set
  if (!sectionId) {
    throw new Error('Missing required parameter sectionId when calling boardSectionsListPins');
  }
  if (opt_adAccountId !== undefined) {
    queryParameters['ad_account_id'] = opt_adAccountId;
  }

  if (opt_bookmark !== undefined) {
    queryParameters['bookmark'] = opt_bookmark;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['page_size'] = opt_pageSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update board section
 * Update a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
 * @param {!string} boardId Unique identifier of a board.
 * @param {!string} sectionId Unique identifier of a board section.
 * @param {!BoardSection} boardSection Update a board section.
 * @param {!string=} opt_adAccountId Unique identifier of an ad account.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.BoardSection>}
 */
API.Client.BoardsApi.prototype.boardSectionsUpdate = function(boardId, sectionId, boardSection, opt_adAccountId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/boards/{board_id}/sections/{section_id}'
      .replace('{' + 'board_id' + '}', String(boardId))
      .replace('{' + 'section_id' + '}', String(sectionId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'boardId' is set
  if (!boardId) {
    throw new Error('Missing required parameter boardId when calling boardSectionsUpdate');
  }
  // verify required parameter 'sectionId' is set
  if (!sectionId) {
    throw new Error('Missing required parameter sectionId when calling boardSectionsUpdate');
  }
  // verify required parameter 'boardSection' is set
  if (!boardSection) {
    throw new Error('Missing required parameter boardSection when calling boardSectionsUpdate');
  }
  if (opt_adAccountId !== undefined) {
    queryParameters['ad_account_id'] = opt_adAccountId;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: boardSection,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create board
 * Create a board owned by the \&quot;operation user_account\&quot;. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
 * @param {!Board} board Create a board using a single board json object.
 * @param {!string=} opt_adAccountId Unique identifier of an ad account.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Board>}
 */
API.Client.BoardsApi.prototype.boardsCreate = function(board, opt_adAccountId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/boards';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'board' is set
  if (!board) {
    throw new Error('Missing required parameter board when calling boardsCreate');
  }
  if (opt_adAccountId !== undefined) {
    queryParameters['ad_account_id'] = opt_adAccountId;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: board,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete board
 * Delete a board owned by the \&quot;operation user_account\&quot;. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
 * @param {!string} boardId Unique identifier of a board.
 * @param {!string=} opt_adAccountId Unique identifier of an ad account.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.BoardsApi.prototype.boardsDelete = function(boardId, opt_adAccountId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/boards/{board_id}'
      .replace('{' + 'board_id' + '}', String(boardId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'boardId' is set
  if (!boardId) {
    throw new Error('Missing required parameter boardId when calling boardsDelete');
  }
  if (opt_adAccountId !== undefined) {
    queryParameters['ad_account_id'] = opt_adAccountId;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get board
 * Get a board owned by the operation user_account - or a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
 * @param {!string} boardId Unique identifier of a board.
 * @param {!string=} opt_adAccountId Unique identifier of an ad account.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Board>}
 */
API.Client.BoardsApi.prototype.boardsGet = function(boardId, opt_adAccountId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/boards/{board_id}'
      .replace('{' + 'board_id' + '}', String(boardId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'boardId' is set
  if (!boardId) {
    throw new Error('Missing required parameter boardId when calling boardsGet');
  }
  if (opt_adAccountId !== undefined) {
    queryParameters['ad_account_id'] = opt_adAccountId;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List boards
 * Get a list of the boards owned by the \&quot;operation user_account\&quot; + group boards where this account is a collaborator Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
 * @param {!string=} opt_adAccountId Unique identifier of an ad account.
 * @param {!string=} opt_bookmark Cursor used to fetch the next page of items
 * @param {!number=} opt_pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
 * @param {!string=} opt_privacy Privacy setting for a board.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.boards_list_200_response>}
 */
API.Client.BoardsApi.prototype.boardsList = function(opt_adAccountId, opt_bookmark, opt_pageSize, opt_privacy, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/boards';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_adAccountId !== undefined) {
    queryParameters['ad_account_id'] = opt_adAccountId;
  }

  if (opt_bookmark !== undefined) {
    queryParameters['bookmark'] = opt_bookmark;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['page_size'] = opt_pageSize;
  }

  if (opt_privacy !== undefined) {
    queryParameters['privacy'] = opt_privacy;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List Pins on board
 * Get a list of the Pins on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
 * @param {!string} boardId Unique identifier of a board.
 * @param {!string=} opt_bookmark Cursor used to fetch the next page of items
 * @param {!number=} opt_pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
 * @param {!Array<!string>=} opt_creativeTypes Pin creative types filter. &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; SHOP_THE_PIN has been deprecated. Please use COLLECTION instead.
 * @param {!string=} opt_adAccountId Unique identifier of an ad account.
 * @param {!boolean=} opt_pinMetrics Specify whether to return 90d and lifetime Pin metrics. Total comments and total reactions are only available with lifetime Pin metrics. If Pin was created before &lt;code&gt;2023-03-20&lt;/code&gt; lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.boards_list_pins_200_response>}
 */
API.Client.BoardsApi.prototype.boardsListPins = function(boardId, opt_bookmark, opt_pageSize, opt_creativeTypes, opt_adAccountId, opt_pinMetrics, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/boards/{board_id}/pins'
      .replace('{' + 'board_id' + '}', String(boardId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'boardId' is set
  if (!boardId) {
    throw new Error('Missing required parameter boardId when calling boardsListPins');
  }
  if (opt_bookmark !== undefined) {
    queryParameters['bookmark'] = opt_bookmark;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['page_size'] = opt_pageSize;
  }

  if (opt_creativeTypes !== undefined) {
    queryParameters['creative_types'] = opt_creativeTypes;
  }

  if (opt_adAccountId !== undefined) {
    queryParameters['ad_account_id'] = opt_adAccountId;
  }

  if (opt_pinMetrics !== undefined) {
    queryParameters['pin_metrics'] = opt_pinMetrics;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update board
 * Update a board owned by the \&quot;operating user_account\&quot;. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
 * @param {!string} boardId Unique identifier of a board.
 * @param {!BoardUpdate} boardUpdate Update a board.
 * @param {!string=} opt_adAccountId Unique identifier of an ad account.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Board>}
 */
API.Client.BoardsApi.prototype.boardsUpdate = function(boardId, boardUpdate, opt_adAccountId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/boards/{board_id}'
      .replace('{' + 'board_id' + '}', String(boardId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'boardId' is set
  if (!boardId) {
    throw new Error('Missing required parameter boardId when calling boardsUpdate');
  }
  // verify required parameter 'boardUpdate' is set
  if (!boardUpdate) {
    throw new Error('Missing required parameter boardUpdate when calling boardsUpdate');
  }
  if (opt_adAccountId !== undefined) {
    queryParameters['ad_account_id'] = opt_adAccountId;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: boardUpdate,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
