/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.TargetingTemplateApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Pinterest&#39;s REST API
 * Version: 5.14.0
* Generator version: 7.9.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license MIT
 * https://spdx.org/licenses/MIT
 */

goog.provide('API.Client.TargetingTemplateApi');

goog.require('API.Client.Error');
goog.require('API.Client.TargetingTemplateCreate');
goog.require('API.Client.TargetingTemplateGetResponseData');
goog.require('API.Client.TargetingTemplateUpdateRequest');
goog.require('API.Client.targeting_template_list_200_response');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.TargetingTemplateApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('TargetingTemplateApiBasePath') ?
                   /** @type {!string} */ ($injector.get('TargetingTemplateApiBasePath')) :
                   'https://api.pinterest.com/v5';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('TargetingTemplateApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('TargetingTemplateApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.TargetingTemplateApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Create targeting templates
 * &lt;p&gt;Targeting templates allow advertisers to save a set of targeting details including audience lists,  keywords &amp; interest, demographics, and placements to use more than once during the campaign creation process.&lt;/p&gt;  &lt;p&gt;Templates can be used to build out basic targeting criteria that you plan to use across campaigns and to reuse   performance targeting from prior campaigns for new campaigns.&lt;/p&gt;
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!TargetingTemplateCreate} targetingTemplateCreate targeting template creation entity
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.TargetingTemplateGetResponseData>}
 */
API.Client.TargetingTemplateApi.prototype.targetingTemplateCreate = function(adAccountId, targetingTemplateCreate, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/targeting_templates'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling targetingTemplateCreate');
  }
  // verify required parameter 'targetingTemplateCreate' is set
  if (!targetingTemplateCreate) {
    throw new Error('Missing required parameter targetingTemplateCreate when calling targetingTemplateCreate');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: targetingTemplateCreate,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List targeting templates
 * Get a list of the targeting templates in the specified &lt;code&gt;ad_account_id&lt;/code&gt;
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!string=} opt_order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
 * @param {!boolean=} opt_includeSizing Include audience sizing in result or not
 * @param {!string=} opt_searchQuery Search keyword for targeting templates
 * @param {!number=} opt_pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
 * @param {!string=} opt_bookmark Cursor used to fetch the next page of items
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.targeting_template_list_200_response>}
 */
API.Client.TargetingTemplateApi.prototype.targetingTemplateList = function(adAccountId, opt_order, opt_includeSizing, opt_searchQuery, opt_pageSize, opt_bookmark, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/targeting_templates'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling targetingTemplateList');
  }
  if (opt_order !== undefined) {
    queryParameters['order'] = opt_order;
  }

  if (opt_includeSizing !== undefined) {
    queryParameters['include_sizing'] = opt_includeSizing;
  }

  if (opt_searchQuery !== undefined) {
    queryParameters['search_query'] = opt_searchQuery;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['page_size'] = opt_pageSize;
  }

  if (opt_bookmark !== undefined) {
    queryParameters['bookmark'] = opt_bookmark;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update targeting templates
 * &lt;p&gt;Update the targeting template given advertiser ID and targeting template ID&lt;/p&gt;
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!TargetingTemplateUpdateRequest} targetingTemplateUpdateRequest Operation type and targeting template ID
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.TargetingTemplateApi.prototype.targetingTemplateUpdate = function(adAccountId, targetingTemplateUpdateRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/targeting_templates'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling targetingTemplateUpdate');
  }
  // verify required parameter 'targetingTemplateUpdateRequest' is set
  if (!targetingTemplateUpdateRequest) {
    throw new Error('Missing required parameter targetingTemplateUpdateRequest when calling targetingTemplateUpdate');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: targetingTemplateUpdateRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
