/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.AdGroupsApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Pinterest&#39;s REST API
 * Version: 5.14.0
* Generator version: 7.9.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license MIT
 * https://spdx.org/licenses/MIT
 */

goog.provide('API.Client.AdGroupsApi');

goog.require('API.Client.AdGroupArrayResponse');
goog.require('API.Client.AdGroupAudienceSizingRequest');
goog.require('API.Client.AdGroupAudienceSizingResponse');
goog.require('API.Client.AdGroupCreateRequest');
goog.require('API.Client.AdGroupResponse');
goog.require('API.Client.AdGroupUpdateRequest');
goog.require('API.Client.AdGroupsAnalyticsResponse_inner');
goog.require('API.Client.AdsAnalyticsTargetingType');
goog.require('API.Client.BidFloor');
goog.require('API.Client.BidFloorRequest');
goog.require('API.Client.ConversionReportAttributionType');
goog.require('API.Client.Error');
goog.require('API.Client.Granularity');
goog.require('API.Client.MetricsResponse');
goog.require('API.Client.ad_groups_list_200_response');
goog.require('API.Client.date');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.AdGroupsApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('AdGroupsApiBasePath') ?
                   /** @type {!string} */ ($injector.get('AdGroupsApiBasePath')) :
                   'https://api.pinterest.com/v5';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('AdGroupsApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('AdGroupsApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.AdGroupsApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Get ad group analytics
 * Get analytics for the specified ad groups in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!API.Client.date} startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
 * @param {!API.Client.date} endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
 * @param {!Array<!string>} adGroupIds List of Ad group Ids to use to filter the results.
 * @param {!Array<!string>} columns Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
 * @param {!Granularity} granularity TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
 * @param {!number=} opt_clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
 * @param {!number=} opt_engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
 * @param {!number=} opt_viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
 * @param {!string=} opt_conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.AdGroupsAnalyticsResponse_inner>>}
 */
API.Client.AdGroupsApi.prototype.adGroupsAnalytics = function(adAccountId, startDate, endDate, adGroupIds, columns, granularity, opt_clickWindowDays, opt_engagementWindowDays, opt_viewWindowDays, opt_conversionReportTime, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/ad_groups/analytics'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling adGroupsAnalytics');
  }
  // verify required parameter 'startDate' is set
  if (!startDate) {
    throw new Error('Missing required parameter startDate when calling adGroupsAnalytics');
  }
  // verify required parameter 'endDate' is set
  if (!endDate) {
    throw new Error('Missing required parameter endDate when calling adGroupsAnalytics');
  }
  // verify required parameter 'adGroupIds' is set
  if (!adGroupIds) {
    throw new Error('Missing required parameter adGroupIds when calling adGroupsAnalytics');
  }
  // verify required parameter 'columns' is set
  if (!columns) {
    throw new Error('Missing required parameter columns when calling adGroupsAnalytics');
  }
  // verify required parameter 'granularity' is set
  if (!granularity) {
    throw new Error('Missing required parameter granularity when calling adGroupsAnalytics');
  }
  if (startDate !== undefined) {
    queryParameters['start_date'] = startDate;
  }

  if (endDate !== undefined) {
    queryParameters['end_date'] = endDate;
  }

  if (adGroupIds !== undefined) {
    queryParameters['ad_group_ids'] = adGroupIds;
  }

  if (columns !== undefined) {
    queryParameters['columns'] = columns;
  }

  if (granularity !== undefined) {
    queryParameters['granularity'] = granularity;
  }

  if (opt_clickWindowDays !== undefined) {
    queryParameters['click_window_days'] = opt_clickWindowDays;
  }

  if (opt_engagementWindowDays !== undefined) {
    queryParameters['engagement_window_days'] = opt_engagementWindowDays;
  }

  if (opt_viewWindowDays !== undefined) {
    queryParameters['view_window_days'] = opt_viewWindowDays;
  }

  if (opt_conversionReportTime !== undefined) {
    queryParameters['conversion_report_time'] = opt_conversionReportTime;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get audience sizing
 * Get potential audience size for an ad group with given targeting criteria.  Potential audience size estimates the number of people you may be able to reach per month with your campaign.  It is based on historical advertising data and the targeting criteria you select. It does not guarantee results or take into account factors such as bid, budget, schedule, seasonality or product experiments.
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!AdGroupAudienceSizingRequest=} opt_adGroupAudienceSizingRequest 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.AdGroupAudienceSizingResponse>}
 */
API.Client.AdGroupsApi.prototype.adGroupsAudienceSizing = function(adAccountId, opt_adGroupAudienceSizingRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/ad_groups/audience_sizing'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling adGroupsAudienceSizing');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: opt_adGroupAudienceSizingRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get bid floors
 * List bid floors for your campaign configuration. Bid floors are given in microcurrency values based on the currency in the bid floor specification. &lt;p/&gt; &lt;p&gt;Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.&lt;/p&gt; &lt;p&gt;A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’ s profile.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Equivalency equations&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;$1 &#x3D; 1,000,000 microdollars&lt;/li&gt;   &lt;li&gt;1 microdollar &#x3D; $0.000001 &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;To convert between currency and microcurrency&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;To convert dollars to microdollars, mutiply dollars by 1,000,000&lt;/li&gt;   &lt;li&gt;To convert microdollars to dollars, divide microdollars by 1,000,000&lt;/li&gt;  &lt;/ul&gt; For more on bid floors see &lt;a class&#x3D;\&quot;reference external\&quot; href&#x3D;\&quot;https://help.pinterest.com/en/business/article/set-your-bid\&quot;&gt; Set your bid&lt;/a&gt;.
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!BidFloorRequest} bidFloorRequest Parameters to get bid_floor info
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.BidFloor>}
 */
API.Client.AdGroupsApi.prototype.adGroupsBidFloorGet = function(adAccountId, bidFloorRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/bid_floor'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling adGroupsBidFloorGet');
  }
  // verify required parameter 'bidFloorRequest' is set
  if (!bidFloorRequest) {
    throw new Error('Missing required parameter bidFloorRequest when calling adGroupsBidFloorGet');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: bidFloorRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create ad groups
 * Create multiple new ad groups. All ads in a given ad group will have the same budget, bid, run dates, targeting, and placement (search, browse, other). For more information, &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/campaign-structure\&quot; target&#x3D;\&quot;_blank\&quot;&gt; click here&lt;/a&gt;.&lt;/p&gt; &lt;strong&gt;Note:&lt;/strong&gt; - &#39;bid_in_micro_currency&#39; and &#39;budget_in_micro_currency&#39; should be expressed in microcurrency amounts based on the currency field set in the advertiser&#39;s profile.&lt;p/&gt; &lt;p&gt;Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.&lt;/p&gt; &lt;p&gt;A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’s profile.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Equivalency equations&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;$1 &#x3D; 1,000,000 microdollars&lt;/li&gt;   &lt;li&gt;1 microdollar &#x3D; $0.000001 &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;To convert between currency and microcurrency&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;To convert dollars to microdollars, mutiply dollars by 1,000,000&lt;/li&gt;   &lt;li&gt;To convert microdollars to dollars, divide microdollars by 1,000,000&lt;/li&gt; &lt;/ul&gt; - Ad groups belong to ad campaigns. Some types of campaigns (e.g. budget optimization) have limits on the number of ad groups they can hold. If you exceed those limits, you will get an error message. - Start and end time cannot be set for ad groups that belong to CBO campaigns. Currently, campaigns with the following objective types: TRAFFIC, AWARENESS, WEB_CONVERSIONS, and CATALOG_SALES will default to CBO.
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!Array<!API.Client.AdGroupCreateRequest>} adGroupCreateRequest List of ad groups to create, size limit [1, 30].
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.AdGroupArrayResponse>}
 */
API.Client.AdGroupsApi.prototype.adGroupsCreate = function(adAccountId, adGroupCreateRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/ad_groups'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling adGroupsCreate');
  }
  // verify required parameter 'adGroupCreateRequest' is set
  if (!adGroupCreateRequest) {
    throw new Error('Missing required parameter adGroupCreateRequest when calling adGroupsCreate');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: adGroupCreateRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get ad group
 * Get a specific ad given the ad ID. If your pin is rejected, rejected_reasons will contain additional information from the Ad Review process. For more information about our policies and rejection reasons see the &lt;a href&#x3D;\&quot;https://www.pinterest.com/_/_/policy/advertising-guidelines/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Pinterest advertising standards&lt;/a&gt;.
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!string} adGroupId Unique identifier of an ad group.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.AdGroupResponse>}
 */
API.Client.AdGroupsApi.prototype.adGroupsGet = function(adAccountId, adGroupId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/ad_groups/{ad_group_id}'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId))
      .replace('{' + 'ad_group_id' + '}', String(adGroupId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling adGroupsGet');
  }
  // verify required parameter 'adGroupId' is set
  if (!adGroupId) {
    throw new Error('Missing required parameter adGroupId when calling adGroupsGet');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List ad groups
 * List ad groups based on provided campaign IDs or ad group IDs.(campaign_ids or ad_group_ids). &lt;p/&gt; &lt;strong&gt;Note:&lt;/strong&gt;&lt;p/&gt; Provide only campaign_id or ad_group_id. Do not provide both.
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!Array<!string>=} opt_campaignIds List of Campaign Ids to use to filter the results.
 * @param {!Array<!string>=} opt_adGroupIds List of Ad group Ids to use to filter the results.
 * @param {!Array<!string>=} opt_entityStatuses Entity status
 * @param {!number=} opt_pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
 * @param {!string=} opt_order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
 * @param {!string=} opt_bookmark Cursor used to fetch the next page of items
 * @param {!boolean=} opt_translateInterestsToNames Return interests as text names (if value is true) rather than topic IDs.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ad_groups_list_200_response>}
 */
API.Client.AdGroupsApi.prototype.adGroupsList = function(adAccountId, opt_campaignIds, opt_adGroupIds, opt_entityStatuses, opt_pageSize, opt_order, opt_bookmark, opt_translateInterestsToNames, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/ad_groups'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling adGroupsList');
  }
  if (opt_campaignIds !== undefined) {
    queryParameters['campaign_ids'] = opt_campaignIds;
  }

  if (opt_adGroupIds !== undefined) {
    queryParameters['ad_group_ids'] = opt_adGroupIds;
  }

  if (opt_entityStatuses !== undefined) {
    queryParameters['entity_statuses'] = opt_entityStatuses;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['page_size'] = opt_pageSize;
  }

  if (opt_order !== undefined) {
    queryParameters['order'] = opt_order;
  }

  if (opt_bookmark !== undefined) {
    queryParameters['bookmark'] = opt_bookmark;
  }

  if (opt_translateInterestsToNames !== undefined) {
    queryParameters['translate_interests_to_names'] = opt_translateInterestsToNames;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get targeting analytics for ad groups
 * Get targeting analytics for one or more ad groups. For the requested ad group(s) and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \&quot;age_bucket\&quot;) for applicable values (e.g. \&quot;45-49\&quot;). &lt;p/&gt; - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!Array<!string>} adGroupIds List of Ad group Ids to use to filter the results.
 * @param {!API.Client.date} startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
 * @param {!API.Client.date} endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
 * @param {!Array<!API.Client.AdsAnalyticsTargetingType>} targetingTypes Targeting type breakdowns for the report. The reporting per targeting type &lt;br&gt; is independent from each other. [\&quot;AGE_BUCKET_AND_GENDER\&quot;] is in BETA and not yet available to all users.
 * @param {!Array<!string>} columns Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
 * @param {!Granularity} granularity TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
 * @param {!number=} opt_clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
 * @param {!number=} opt_engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
 * @param {!number=} opt_viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
 * @param {!string=} opt_conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
 * @param {!ConversionReportAttributionType=} opt_attributionTypes List of types of attribution for the conversion report
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.MetricsResponse>}
 */
API.Client.AdGroupsApi.prototype.adGroupsTargetingAnalyticsGet = function(adAccountId, adGroupIds, startDate, endDate, targetingTypes, columns, granularity, opt_clickWindowDays, opt_engagementWindowDays, opt_viewWindowDays, opt_conversionReportTime, opt_attributionTypes, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/ad_groups/targeting_analytics'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling adGroupsTargetingAnalyticsGet');
  }
  // verify required parameter 'adGroupIds' is set
  if (!adGroupIds) {
    throw new Error('Missing required parameter adGroupIds when calling adGroupsTargetingAnalyticsGet');
  }
  // verify required parameter 'startDate' is set
  if (!startDate) {
    throw new Error('Missing required parameter startDate when calling adGroupsTargetingAnalyticsGet');
  }
  // verify required parameter 'endDate' is set
  if (!endDate) {
    throw new Error('Missing required parameter endDate when calling adGroupsTargetingAnalyticsGet');
  }
  // verify required parameter 'targetingTypes' is set
  if (!targetingTypes) {
    throw new Error('Missing required parameter targetingTypes when calling adGroupsTargetingAnalyticsGet');
  }
  // verify required parameter 'columns' is set
  if (!columns) {
    throw new Error('Missing required parameter columns when calling adGroupsTargetingAnalyticsGet');
  }
  // verify required parameter 'granularity' is set
  if (!granularity) {
    throw new Error('Missing required parameter granularity when calling adGroupsTargetingAnalyticsGet');
  }
  if (adGroupIds !== undefined) {
    queryParameters['ad_group_ids'] = adGroupIds;
  }

  if (startDate !== undefined) {
    queryParameters['start_date'] = startDate;
  }

  if (endDate !== undefined) {
    queryParameters['end_date'] = endDate;
  }

  if (targetingTypes !== undefined) {
    queryParameters['targeting_types'] = targetingTypes;
  }

  if (columns !== undefined) {
    queryParameters['columns'] = columns;
  }

  if (granularity !== undefined) {
    queryParameters['granularity'] = granularity;
  }

  if (opt_clickWindowDays !== undefined) {
    queryParameters['click_window_days'] = opt_clickWindowDays;
  }

  if (opt_engagementWindowDays !== undefined) {
    queryParameters['engagement_window_days'] = opt_engagementWindowDays;
  }

  if (opt_viewWindowDays !== undefined) {
    queryParameters['view_window_days'] = opt_viewWindowDays;
  }

  if (opt_conversionReportTime !== undefined) {
    queryParameters['conversion_report_time'] = opt_conversionReportTime;
  }

  if (opt_attributionTypes !== undefined) {
    queryParameters['attribution_types'] = opt_attributionTypes;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update ad groups
 * Update multiple existing ad groups.
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!Array<!API.Client.AdGroupUpdateRequest>} adGroupUpdateRequest List of ad groups to update, size limit [1, 30].
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.AdGroupArrayResponse>}
 */
API.Client.AdGroupsApi.prototype.adGroupsUpdate = function(adAccountId, adGroupUpdateRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/ad_groups'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling adGroupsUpdate');
  }
  // verify required parameter 'adGroupUpdateRequest' is set
  if (!adGroupUpdateRequest) {
    throw new Error('Missing required parameter adGroupUpdateRequest when calling adGroupsUpdate');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: adGroupUpdateRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
