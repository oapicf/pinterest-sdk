/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.AudiencesApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Pinterest&#39;s REST API
 * Version: 5.14.0
* Generator version: 7.9.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license MIT
 * https://spdx.org/licenses/MIT
 */

goog.provide('API.Client.AudiencesApi');

goog.require('API.Client.Audience');
goog.require('API.Client.AudienceCreateCustomRequest');
goog.require('API.Client.AudienceCreateRequest');
goog.require('API.Client.AudienceUpdateRequest');
goog.require('API.Client.Error');
goog.require('API.Client.audiences_list_200_response');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.AudiencesApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('AudiencesApiBasePath') ?
                   /** @type {!string} */ ($injector.get('AudiencesApiBasePath')) :
                   'https://api.pinterest.com/v5';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('AudiencesApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('AudiencesApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.AudiencesApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Create audience
 * Create an audience you can use in targeting for specific ad groups. Targeting combines customer information with the ways users interact with Pinterest to help you reach specific groups of users; you can include or exclude specific audience_ids when you create an ad group. &lt;p/&gt; For more, see &lt;a class&#x3D;\&quot;reference external\&quot; href&#x3D;\&quot;https://help.pinterest.com/en/business/article/audience-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Audience targeting&lt;/a&gt;.
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!AudienceCreateRequest} audienceCreateRequest List of ads to create, size limit [1, 30]
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Audience>}
 */
API.Client.AudiencesApi.prototype.audiencesCreate = function(adAccountId, audienceCreateRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/audiences'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling audiencesCreate');
  }
  // verify required parameter 'audienceCreateRequest' is set
  if (!audienceCreateRequest) {
    throw new Error('Missing required parameter audienceCreateRequest when calling audiencesCreate');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: audienceCreateRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create custom audience
 * Create a custom audience and find the audiences you want your ads to reach.
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!AudienceCreateCustomRequest} audienceCreateCustomRequest Custom audience to create.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Audience>}
 */
API.Client.AudiencesApi.prototype.audiencesCreateCustom = function(adAccountId, audienceCreateCustomRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/audiences/custom'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling audiencesCreateCustom');
  }
  // verify required parameter 'audienceCreateCustomRequest' is set
  if (!audienceCreateCustomRequest) {
    throw new Error('Missing required parameter audienceCreateCustomRequest when calling audiencesCreateCustom');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: audienceCreateCustomRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get audience
 * Get a specific audience given the audience ID.
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!string} audienceId Unique identifier of an audience
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Audience>}
 */
API.Client.AudiencesApi.prototype.audiencesGet = function(adAccountId, audienceId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/audiences/{audience_id}'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId))
      .replace('{' + 'audience_id' + '}', String(audienceId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling audiencesGet');
  }
  // verify required parameter 'audienceId' is set
  if (!audienceId) {
    throw new Error('Missing required parameter audienceId when calling audiencesGet');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List audiences
 * Get list of audiences for the ad account.
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!string=} opt_bookmark Cursor used to fetch the next page of items
 * @param {!string=} opt_order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. For received audiences, it is sorted by sharing event time. Note that higher-value IDs are associated with more-recently added items.
 * @param {!number=} opt_pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
 * @param {!string=} opt_ownershipType Filter audiences by ownership type.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.audiences_list_200_response>}
 */
API.Client.AudiencesApi.prototype.audiencesList = function(adAccountId, opt_bookmark, opt_order, opt_pageSize, opt_ownershipType, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/audiences'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling audiencesList');
  }
  if (opt_bookmark !== undefined) {
    queryParameters['bookmark'] = opt_bookmark;
  }

  if (opt_order !== undefined) {
    queryParameters['order'] = opt_order;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['page_size'] = opt_pageSize;
  }

  if (opt_ownershipType !== undefined) {
    queryParameters['ownership_type'] = opt_ownershipType;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update audience
 * Update (edit or remove) an existing targeting audience.
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!string} audienceId Unique identifier of an audience
 * @param {!AudienceUpdateRequest=} opt_audienceUpdateRequest The audience to be updated.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Audience>}
 */
API.Client.AudiencesApi.prototype.audiencesUpdate = function(adAccountId, audienceId, opt_audienceUpdateRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/audiences/{audience_id}'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId))
      .replace('{' + 'audience_id' + '}', String(audienceId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling audiencesUpdate');
  }
  // verify required parameter 'audienceId' is set
  if (!audienceId) {
    throw new Error('Missing required parameter audienceId when calling audiencesUpdate');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: opt_audienceUpdateRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
