/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.BulkApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Pinterest&#39;s REST API
 * Version: 5.14.0
* Generator version: 7.9.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license MIT
 * https://spdx.org/licenses/MIT
 */

goog.provide('API.Client.BulkApi');

goog.require('API.Client.BulkDownloadRequest');
goog.require('API.Client.BulkDownloadResponse');
goog.require('API.Client.BulkUpsertRequest');
goog.require('API.Client.BulkUpsertResponse');
goog.require('API.Client.BulkUpsertStatusResponse');
goog.require('API.Client.Error');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.BulkApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('BulkApiBasePath') ?
                   /** @type {!string} */ ($injector.get('BulkApiBasePath')) :
                   'https://api.pinterest.com/v5';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('BulkApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('BulkApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.BulkApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Get advertiser entities in bulk
 * Create an asynchronous report that may include information on campaigns, ad groups, product groups, ads, and/or keywords; can filter by campaigns. Though the entities may be active, archived, or paused, only active entities will return data.
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!BulkDownloadRequest} bulkDownloadRequest Parameters to get ad entities in bulk
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.BulkDownloadResponse>}
 */
API.Client.BulkApi.prototype.bulkDownloadCreate = function(adAccountId, bulkDownloadRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/bulk/download'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling bulkDownloadCreate');
  }
  // verify required parameter 'bulkDownloadRequest' is set
  if (!bulkDownloadRequest) {
    throw new Error('Missing required parameter bulkDownloadRequest when calling bulkDownloadCreate');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: bulkDownloadRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Download advertiser entities in bulk
 * Get the status of a bulk request by &lt;code&gt;request_id&lt;/code&gt;, along with a download URL that will allow you to download the new or updated entity data (campaigns, ad groups, product groups, ads, or keywords).
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!string} bulkRequestId Unique identifier of a bulk upsert request.
 * @param {!boolean=} opt_includeDetails if set to True then attach the errors/details to all the requests
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.BulkUpsertStatusResponse>}
 */
API.Client.BulkApi.prototype.bulkRequestGet = function(adAccountId, bulkRequestId, opt_includeDetails, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/bulk/{bulk_request_id}'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId))
      .replace('{' + 'bulk_request_id' + '}', String(bulkRequestId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling bulkRequestGet');
  }
  // verify required parameter 'bulkRequestId' is set
  if (!bulkRequestId) {
    throw new Error('Missing required parameter bulkRequestId when calling bulkRequestGet');
  }
  if (opt_includeDetails !== undefined) {
    queryParameters['include_details'] = opt_includeDetails;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create/update ad entities in bulk
 * Either create or update any combination of campaigns, ad groups, product groups, ads, or keywords. Note that this request will be processed asynchronously; the response will include a &lt;code&gt;request_id&lt;/code&gt; that can be used to obtain the status of the request.
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!BulkUpsertRequest} bulkUpsertRequest Parameters to get create/update ad entities in bulk
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.BulkUpsertResponse>}
 */
API.Client.BulkApi.prototype.bulkUpsertCreate = function(adAccountId, bulkUpsertRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/bulk/upsert'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling bulkUpsertCreate');
  }
  // verify required parameter 'bulkUpsertRequest' is set
  if (!bulkUpsertRequest) {
    throw new Error('Missing required parameter bulkUpsertRequest when calling bulkUpsertCreate');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: bulkUpsertRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
