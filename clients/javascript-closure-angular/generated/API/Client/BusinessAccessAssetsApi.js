/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.BusinessAccessAssetsApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Pinterest&#39;s REST API
 * Version: 5.14.0
* Generator version: 7.9.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license MIT
 * https://spdx.org/licenses/MIT
 */

goog.provide('API.Client.BusinessAccessAssetsApi');

goog.require('API.Client.BusinessMembersAssetAccessDeleteRequest');
goog.require('API.Client.CreateAssetGroupBody');
goog.require('API.Client.CreateAssetGroupResponse');
goog.require('API.Client.DeleteAssetGroupBody');
goog.require('API.Client.DeleteAssetGroupResponse');
goog.require('API.Client.DeleteMemberAccessResultsResponseArray');
goog.require('API.Client.DeletePartnerAssetAccessBody');
goog.require('API.Client.DeletePartnerAssetsResultsResponseArray');
goog.require('API.Client.Error');
goog.require('API.Client.PartnerType');
goog.require('API.Client.PermissionsWithOwner');
goog.require('API.Client.UpdateAssetGroupBody');
goog.require('API.Client.UpdateAssetGroupResponse');
goog.require('API.Client.UpdateMemberAssetAccessBody');
goog.require('API.Client.UpdateMemberAssetsResultsResponseArray');
goog.require('API.Client.UpdatePartnerAssetAccessBody');
goog.require('API.Client.UpdatePartnerAssetsResultsResponseArray');
goog.require('API.Client.business_asset_members_get_200_response');
goog.require('API.Client.business_asset_partners_get_200_response');
goog.require('API.Client.business_assets_get_200_response');
goog.require('API.Client.business_member_assets_get_200_response');
goog.require('API.Client.business_members_asset_access_delete_request');
goog.require('API.Client.business_partner_asset_access_get_200_response');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.BusinessAccessAssetsApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('BusinessAccessAssetsApiBasePath') ?
                   /** @type {!string} */ ($injector.get('BusinessAccessAssetsApiBasePath')) :
                   'https://api.pinterest.com/v5';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('BusinessAccessAssetsApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('BusinessAccessAssetsApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.BusinessAccessAssetsApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Create a new asset group.
 * Create a new asset group with the specified parameters. - An &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/asset-groups\&quot;&gt;asset group&lt;/a&gt; is a custom group of assets based on how youâ€™d like to manage your accounts.
 * @param {!string} businessId Unique identifier of the requesting business.
 * @param {!CreateAssetGroupBody} createAssetGroupBody 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.CreateAssetGroupResponse>}
 */
API.Client.BusinessAccessAssetsApi.prototype.assetGroupCreate = function(businessId, createAssetGroupBody, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/businesses/{business_id}/asset_groups'
      .replace('{' + 'business_id' + '}', String(businessId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'businessId' is set
  if (!businessId) {
    throw new Error('Missing required parameter businessId when calling assetGroupCreate');
  }
  // verify required parameter 'createAssetGroupBody' is set
  if (!createAssetGroupBody) {
    throw new Error('Missing required parameter createAssetGroupBody when calling assetGroupCreate');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: createAssetGroupBody,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete asset groups.
 * Delete a batch of asset groups.
 * @param {!string} businessId Unique identifier of the requesting business.
 * @param {!DeleteAssetGroupBody} deleteAssetGroupBody 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.DeleteAssetGroupResponse>}
 */
API.Client.BusinessAccessAssetsApi.prototype.assetGroupDelete = function(businessId, deleteAssetGroupBody, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/businesses/{business_id}/asset_groups'
      .replace('{' + 'business_id' + '}', String(businessId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'businessId' is set
  if (!businessId) {
    throw new Error('Missing required parameter businessId when calling assetGroupDelete');
  }
  // verify required parameter 'deleteAssetGroupBody' is set
  if (!deleteAssetGroupBody) {
    throw new Error('Missing required parameter deleteAssetGroupBody when calling assetGroupDelete');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
    data: deleteAssetGroupBody,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update asset groups.
 * Update a batch of asset groups with the specified parameters.
 * @param {!string} businessId Unique identifier of the requesting business.
 * @param {!UpdateAssetGroupBody} updateAssetGroupBody 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.UpdateAssetGroupResponse>}
 */
API.Client.BusinessAccessAssetsApi.prototype.assetGroupUpdate = function(businessId, updateAssetGroupBody, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/businesses/{business_id}/asset_groups'
      .replace('{' + 'business_id' + '}', String(businessId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'businessId' is set
  if (!businessId) {
    throw new Error('Missing required parameter businessId when calling assetGroupUpdate');
  }
  // verify required parameter 'updateAssetGroupBody' is set
  if (!updateAssetGroupBody) {
    throw new Error('Missing required parameter updateAssetGroupBody when calling assetGroupUpdate');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: updateAssetGroupBody,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get members with access to asset
 * Get all the members the requesting business has granted access to on the given asset.
 * @param {!string} businessId Unique identifier of the requesting business.
 * @param {!string} assetId Unique identifier of a business asset.
 * @param {!string=} opt_bookmark Cursor used to fetch the next page of items
 * @param {!number=} opt_pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
 * @param {!number=} opt_startIndex An index to start fetching the results from. Only the results starting from this index will be returned.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.business_asset_members_get_200_response>}
 */
API.Client.BusinessAccessAssetsApi.prototype.businessAssetMembersGet = function(businessId, assetId, opt_bookmark, opt_pageSize, opt_startIndex, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/businesses/{business_id}/assets/{asset_id}/members'
      .replace('{' + 'business_id' + '}', String(businessId))
      .replace('{' + 'asset_id' + '}', String(assetId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'businessId' is set
  if (!businessId) {
    throw new Error('Missing required parameter businessId when calling businessAssetMembersGet');
  }
  // verify required parameter 'assetId' is set
  if (!assetId) {
    throw new Error('Missing required parameter assetId when calling businessAssetMembersGet');
  }
  if (opt_bookmark !== undefined) {
    queryParameters['bookmark'] = opt_bookmark;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['page_size'] = opt_pageSize;
  }

  if (opt_startIndex !== undefined) {
    queryParameters['start_index'] = opt_startIndex;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get partners with access to asset
 * Get all the partners the requesting business has granted access to on the given asset. Note: If the asset has been shared with you, an empty array will be returned. This is because an asset shared with you cannot be shared with a different partner.
 * @param {!string} businessId Unique identifier of the requesting business.
 * @param {!string} assetId Unique identifier of a business asset.
 * @param {!number=} opt_startIndex An index to start fetching the results from. Only the results starting from this index will be returned.
 * @param {!string=} opt_bookmark Cursor used to fetch the next page of items
 * @param {!number=} opt_pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.business_asset_partners_get_200_response>}
 */
API.Client.BusinessAccessAssetsApi.prototype.businessAssetPartnersGet = function(businessId, assetId, opt_startIndex, opt_bookmark, opt_pageSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/businesses/{business_id}/assets/{asset_id}/partners'
      .replace('{' + 'business_id' + '}', String(businessId))
      .replace('{' + 'asset_id' + '}', String(assetId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'businessId' is set
  if (!businessId) {
    throw new Error('Missing required parameter businessId when calling businessAssetPartnersGet');
  }
  // verify required parameter 'assetId' is set
  if (!assetId) {
    throw new Error('Missing required parameter assetId when calling businessAssetPartnersGet');
  }
  if (opt_startIndex !== undefined) {
    queryParameters['start_index'] = opt_startIndex;
  }

  if (opt_bookmark !== undefined) {
    queryParameters['bookmark'] = opt_bookmark;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['page_size'] = opt_pageSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List business assets
 * Get all the assets the requesting business has access to. This includes assets the business owns and assets the business has access to through partnerships.
 * @param {!string} businessId Unique identifier of the requesting business.
 * @param {!Array<!API.Client.PermissionsWithOwner>=} opt_permissions A list of asset permissions used to filter the assets. Only assets where the requesting business has at least one of the specified permissions will be returned.
 * @param {!string=} opt_childAssetId A child asset unique identifier. Used to fetch asset groups that contain the asset id as a child.
 * @param {!string=} opt_assetGroupId An asset group unique identifier. Used to fetch assets contained within the specified asset group.
 * @param {!string=} opt_assetType A resource type to filter the assets by. Only assets of the specified type will be returned.
 * @param {!number=} opt_startIndex An index to start fetching the results from. Only the results starting from this index will be returned.
 * @param {!string=} opt_bookmark Cursor used to fetch the next page of items
 * @param {!number=} opt_pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.business_assets_get_200_response>}
 */
API.Client.BusinessAccessAssetsApi.prototype.businessAssetsGet = function(businessId, opt_permissions, opt_childAssetId, opt_assetGroupId, opt_assetType, opt_startIndex, opt_bookmark, opt_pageSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/businesses/{business_id}/assets'
      .replace('{' + 'business_id' + '}', String(businessId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'businessId' is set
  if (!businessId) {
    throw new Error('Missing required parameter businessId when calling businessAssetsGet');
  }
  if (opt_permissions !== undefined) {
    queryParameters['permissions'] = opt_permissions;
  }

  if (opt_childAssetId !== undefined) {
    queryParameters['child_asset_id'] = opt_childAssetId;
  }

  if (opt_assetGroupId !== undefined) {
    queryParameters['asset_group_id'] = opt_assetGroupId;
  }

  if (opt_assetType !== undefined) {
    queryParameters['asset_type'] = opt_assetType;
  }

  if (opt_startIndex !== undefined) {
    queryParameters['start_index'] = opt_startIndex;
  }

  if (opt_bookmark !== undefined) {
    queryParameters['bookmark'] = opt_bookmark;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['page_size'] = opt_pageSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get assets assigned to a member
 * Get assets on which you assigned asset permissions to the given member. Can be used to: - get all assets, regardless of asset type or - get assets of one asset type by using the asset_type query. The return response will include the permissions the member has to that asset and the asset type.
 * @param {!string} businessId Unique identifier of the requesting business.
 * @param {!string} memberId The member id to fetch assets for.
 * @param {!string=} opt_assetType A resource type to filter the assets by. Only assets of the specified type will be returned.
 * @param {!number=} opt_startIndex An index to start fetching the results from. Only the results starting from this index will be returned.
 * @param {!string=} opt_bookmark Cursor used to fetch the next page of items
 * @param {!number=} opt_pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.business_member_assets_get_200_response>}
 */
API.Client.BusinessAccessAssetsApi.prototype.businessMemberAssetsGet = function(businessId, memberId, opt_assetType, opt_startIndex, opt_bookmark, opt_pageSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/businesses/{business_id}/members/{member_id}/assets'
      .replace('{' + 'business_id' + '}', String(businessId))
      .replace('{' + 'member_id' + '}', String(memberId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'businessId' is set
  if (!businessId) {
    throw new Error('Missing required parameter businessId when calling businessMemberAssetsGet');
  }
  // verify required parameter 'memberId' is set
  if (!memberId) {
    throw new Error('Missing required parameter memberId when calling businessMemberAssetsGet');
  }
  if (opt_assetType !== undefined) {
    queryParameters['asset_type'] = opt_assetType;
  }

  if (opt_startIndex !== undefined) {
    queryParameters['start_index'] = opt_startIndex;
  }

  if (opt_bookmark !== undefined) {
    queryParameters['bookmark'] = opt_bookmark;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['page_size'] = opt_pageSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete member access to asset
 * Terminate multiple members&#39; access to an asset.
 * @param {!string} businessId Unique identifier of the requesting business.
 * @param {!BusinessMembersAssetAccessDeleteRequest} businessMembersAssetAccessDeleteRequest List member assset permissions to delete.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.DeleteMemberAccessResultsResponseArray>}
 */
API.Client.BusinessAccessAssetsApi.prototype.businessMembersAssetAccessDelete = function(businessId, businessMembersAssetAccessDeleteRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/businesses/{business_id}/members/assets/access'
      .replace('{' + 'business_id' + '}', String(businessId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'businessId' is set
  if (!businessId) {
    throw new Error('Missing required parameter businessId when calling businessMembersAssetAccessDelete');
  }
  // verify required parameter 'businessMembersAssetAccessDeleteRequest' is set
  if (!businessMembersAssetAccessDeleteRequest) {
    throw new Error('Missing required parameter businessMembersAssetAccessDeleteRequest when calling businessMembersAssetAccessDelete');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
    data: businessMembersAssetAccessDeleteRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Assign/Update member asset permissions
 * Grant multiple members access to assets and/or update multiple member&#39;s exisiting permissions to an asset. Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE. 
 * @param {!string} businessId Unique identifier of the requesting business.
 * @param {!UpdateMemberAssetAccessBody} updateMemberAssetAccessBody List of member asset permissions to create or update.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.UpdateMemberAssetsResultsResponseArray>}
 */
API.Client.BusinessAccessAssetsApi.prototype.businessMembersAssetAccessUpdate = function(businessId, updateMemberAssetAccessBody, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/businesses/{business_id}/members/assets/access'
      .replace('{' + 'business_id' + '}', String(businessId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'businessId' is set
  if (!businessId) {
    throw new Error('Missing required parameter businessId when calling businessMembersAssetAccessUpdate');
  }
  // verify required parameter 'updateMemberAssetAccessBody' is set
  if (!updateMemberAssetAccessBody) {
    throw new Error('Missing required parameter updateMemberAssetAccessBody when calling businessMembersAssetAccessUpdate');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: updateMemberAssetAccessBody,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get assets assigned to a partner or assets assigned by a partner
 * Can be used to get the business assets your partner has granted you access to or the business assets you have granted your partner access to. If you specify: - partner_type&#x3D;INTERNAL, you will retrieve your business assets that the partner has access to. - partner_type&#x3D;EXTERNAL, you will retrieve the partner&#39;s business assets that the partner has granted you access to.
 * @param {!string} businessId Unique identifier of the requesting business.
 * @param {!string} partnerId The partner id to be bound to the Business
 * @param {!API.Client.PartnerType=} opt_partnerType Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset.
 * @param {!string=} opt_assetType A resource type to filter the assets by. Only assets of the specified type will be returned.
 * @param {!number=} opt_startIndex An index to start fetching the results from. Only the results starting from this index will be returned.
 * @param {!number=} opt_pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
 * @param {!string=} opt_bookmark Cursor used to fetch the next page of items
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.business_partner_asset_access_get_200_response>}
 */
API.Client.BusinessAccessAssetsApi.prototype.businessPartnerAssetAccessGet = function(businessId, partnerId, opt_partnerType, opt_assetType, opt_startIndex, opt_pageSize, opt_bookmark, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/businesses/{business_id}/partners/{partner_id}/assets'
      .replace('{' + 'business_id' + '}', String(businessId))
      .replace('{' + 'partner_id' + '}', String(partnerId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'businessId' is set
  if (!businessId) {
    throw new Error('Missing required parameter businessId when calling businessPartnerAssetAccessGet');
  }
  // verify required parameter 'partnerId' is set
  if (!partnerId) {
    throw new Error('Missing required parameter partnerId when calling businessPartnerAssetAccessGet');
  }
  if (opt_partnerType !== undefined) {
    queryParameters['partner_type'] = opt_partnerType;
  }

  if (opt_assetType !== undefined) {
    queryParameters['asset_type'] = opt_assetType;
  }

  if (opt_startIndex !== undefined) {
    queryParameters['start_index'] = opt_startIndex;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['page_size'] = opt_pageSize;
  }

  if (opt_bookmark !== undefined) {
    queryParameters['bookmark'] = opt_bookmark;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete partner access to asset
 * Terminate multiple partners&#39; access to an asset. If - partner_type&#x3D;INTERNAL: You will terminate a partner&#39;s asset access to your business assets. - partner_type&#x3D;EXTERNAL: You will terminate your own access to your partner&#39;s business assets.
 * @param {!string} businessId Unique identifier of the requesting business.
 * @param {!DeletePartnerAssetAccessBody} deletePartnerAssetAccessBody 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.DeletePartnerAssetsResultsResponseArray>}
 */
API.Client.BusinessAccessAssetsApi.prototype.deletePartnerAssetAccessHandlerImpl = function(businessId, deletePartnerAssetAccessBody, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/businesses/{business_id}/partners/assets'
      .replace('{' + 'business_id' + '}', String(businessId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'businessId' is set
  if (!businessId) {
    throw new Error('Missing required parameter businessId when calling deletePartnerAssetAccessHandlerImpl');
  }
  // verify required parameter 'deletePartnerAssetAccessBody' is set
  if (!deletePartnerAssetAccessBody) {
    throw new Error('Missing required parameter deletePartnerAssetAccessBody when calling deletePartnerAssetAccessHandlerImpl');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
    data: deletePartnerAssetAccessBody,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Assign/Update partner asset permissions
 * Grant multiple partners access to assets and/or update multiple partner&#39;s exisiting permissions to an asset. If your partner already had permissions on the asset, they will be overriden with the new permissions you assign to them. To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview  Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE.
 * @param {!string} businessId Unique identifier of the requesting business.
 * @param {!UpdatePartnerAssetAccessBody} updatePartnerAssetAccessBody A list of assets and permissions to assign to your partners.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.UpdatePartnerAssetsResultsResponseArray>}
 */
API.Client.BusinessAccessAssetsApi.prototype.updatePartnerAssetAccessHandlerImpl = function(businessId, updatePartnerAssetAccessBody, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/businesses/{business_id}/partners/assets'
      .replace('{' + 'business_id' + '}', String(businessId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'businessId' is set
  if (!businessId) {
    throw new Error('Missing required parameter businessId when calling updatePartnerAssetAccessHandlerImpl');
  }
  // verify required parameter 'updatePartnerAssetAccessBody' is set
  if (!updatePartnerAssetAccessBody) {
    throw new Error('Missing required parameter updatePartnerAssetAccessBody when calling updatePartnerAssetAccessHandlerImpl');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: updatePartnerAssetAccessBody,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
