/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.CampaignsApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Pinterest&#39;s REST API
 * Version: 5.14.0
* Generator version: 7.9.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license MIT
 * https://spdx.org/licenses/MIT
 */

goog.provide('API.Client.CampaignsApi');

goog.require('API.Client.AdsAnalyticsCampaignTargetingType');
goog.require('API.Client.CampaignCreateRequest');
goog.require('API.Client.CampaignCreateResponse');
goog.require('API.Client.CampaignResponse');
goog.require('API.Client.CampaignUpdateRequest');
goog.require('API.Client.CampaignUpdateResponse');
goog.require('API.Client.CampaignsAnalyticsResponse_inner');
goog.require('API.Client.ConversionReportAttributionType');
goog.require('API.Client.Error');
goog.require('API.Client.Granularity');
goog.require('API.Client.MetricsResponse');
goog.require('API.Client.campaigns_list_200_response');
goog.require('API.Client.date');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.CampaignsApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('CampaignsApiBasePath') ?
                   /** @type {!string} */ ($injector.get('CampaignsApiBasePath')) :
                   'https://api.pinterest.com/v5';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('CampaignsApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('CampaignsApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.CampaignsApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Get targeting analytics for campaigns
 * Get targeting analytics for one or more campaigns. For the requested account and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \&quot;age_bucket\&quot;) for applicable values (e.g. \&quot;45-49\&quot;). &lt;p/&gt; - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!Array<!string>} campaignIds List of Campaign Ids to use to filter the results.
 * @param {!API.Client.date} startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
 * @param {!API.Client.date} endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
 * @param {!Array<!API.Client.AdsAnalyticsCampaignTargetingType>} targetingTypes Targeting type breakdowns for the report. The reporting per targeting type &lt;br&gt; is independent from each other. [\&quot;AGE_BUCKET_AND_GENDER\&quot;] is in BETA and not yet available to all users.
 * @param {!Array<!string>} columns Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
 * @param {!Granularity} granularity TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
 * @param {!number=} opt_clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
 * @param {!number=} opt_engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
 * @param {!number=} opt_viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
 * @param {!string=} opt_conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
 * @param {!ConversionReportAttributionType=} opt_attributionTypes List of types of attribution for the conversion report
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.MetricsResponse>}
 */
API.Client.CampaignsApi.prototype.campaignTargetingAnalyticsGet = function(adAccountId, campaignIds, startDate, endDate, targetingTypes, columns, granularity, opt_clickWindowDays, opt_engagementWindowDays, opt_viewWindowDays, opt_conversionReportTime, opt_attributionTypes, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/campaigns/targeting_analytics'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling campaignTargetingAnalyticsGet');
  }
  // verify required parameter 'campaignIds' is set
  if (!campaignIds) {
    throw new Error('Missing required parameter campaignIds when calling campaignTargetingAnalyticsGet');
  }
  // verify required parameter 'startDate' is set
  if (!startDate) {
    throw new Error('Missing required parameter startDate when calling campaignTargetingAnalyticsGet');
  }
  // verify required parameter 'endDate' is set
  if (!endDate) {
    throw new Error('Missing required parameter endDate when calling campaignTargetingAnalyticsGet');
  }
  // verify required parameter 'targetingTypes' is set
  if (!targetingTypes) {
    throw new Error('Missing required parameter targetingTypes when calling campaignTargetingAnalyticsGet');
  }
  // verify required parameter 'columns' is set
  if (!columns) {
    throw new Error('Missing required parameter columns when calling campaignTargetingAnalyticsGet');
  }
  // verify required parameter 'granularity' is set
  if (!granularity) {
    throw new Error('Missing required parameter granularity when calling campaignTargetingAnalyticsGet');
  }
  if (campaignIds !== undefined) {
    queryParameters['campaign_ids'] = campaignIds;
  }

  if (startDate !== undefined) {
    queryParameters['start_date'] = startDate;
  }

  if (endDate !== undefined) {
    queryParameters['end_date'] = endDate;
  }

  if (targetingTypes !== undefined) {
    queryParameters['targeting_types'] = targetingTypes;
  }

  if (columns !== undefined) {
    queryParameters['columns'] = columns;
  }

  if (granularity !== undefined) {
    queryParameters['granularity'] = granularity;
  }

  if (opt_clickWindowDays !== undefined) {
    queryParameters['click_window_days'] = opt_clickWindowDays;
  }

  if (opt_engagementWindowDays !== undefined) {
    queryParameters['engagement_window_days'] = opt_engagementWindowDays;
  }

  if (opt_viewWindowDays !== undefined) {
    queryParameters['view_window_days'] = opt_viewWindowDays;
  }

  if (opt_conversionReportTime !== undefined) {
    queryParameters['conversion_report_time'] = opt_conversionReportTime;
  }

  if (opt_attributionTypes !== undefined) {
    queryParameters['attribution_types'] = opt_attributionTypes;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get campaign analytics
 * Get analytics for the specified campaigns in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!API.Client.date} startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
 * @param {!API.Client.date} endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
 * @param {!Array<!string>} campaignIds List of Campaign Ids to use to filter the results.
 * @param {!Array<!string>} columns Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
 * @param {!Granularity} granularity TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
 * @param {!number=} opt_clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
 * @param {!number=} opt_engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
 * @param {!number=} opt_viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
 * @param {!string=} opt_conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.CampaignsAnalyticsResponse_inner>>}
 */
API.Client.CampaignsApi.prototype.campaignsAnalytics = function(adAccountId, startDate, endDate, campaignIds, columns, granularity, opt_clickWindowDays, opt_engagementWindowDays, opt_viewWindowDays, opt_conversionReportTime, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/campaigns/analytics'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling campaignsAnalytics');
  }
  // verify required parameter 'startDate' is set
  if (!startDate) {
    throw new Error('Missing required parameter startDate when calling campaignsAnalytics');
  }
  // verify required parameter 'endDate' is set
  if (!endDate) {
    throw new Error('Missing required parameter endDate when calling campaignsAnalytics');
  }
  // verify required parameter 'campaignIds' is set
  if (!campaignIds) {
    throw new Error('Missing required parameter campaignIds when calling campaignsAnalytics');
  }
  // verify required parameter 'columns' is set
  if (!columns) {
    throw new Error('Missing required parameter columns when calling campaignsAnalytics');
  }
  // verify required parameter 'granularity' is set
  if (!granularity) {
    throw new Error('Missing required parameter granularity when calling campaignsAnalytics');
  }
  if (startDate !== undefined) {
    queryParameters['start_date'] = startDate;
  }

  if (endDate !== undefined) {
    queryParameters['end_date'] = endDate;
  }

  if (campaignIds !== undefined) {
    queryParameters['campaign_ids'] = campaignIds;
  }

  if (columns !== undefined) {
    queryParameters['columns'] = columns;
  }

  if (granularity !== undefined) {
    queryParameters['granularity'] = granularity;
  }

  if (opt_clickWindowDays !== undefined) {
    queryParameters['click_window_days'] = opt_clickWindowDays;
  }

  if (opt_engagementWindowDays !== undefined) {
    queryParameters['engagement_window_days'] = opt_engagementWindowDays;
  }

  if (opt_viewWindowDays !== undefined) {
    queryParameters['view_window_days'] = opt_viewWindowDays;
  }

  if (opt_conversionReportTime !== undefined) {
    queryParameters['conversion_report_time'] = opt_conversionReportTime;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create campaigns
 * Create multiple new campaigns. Every campaign has its own campaign_id and houses one or more ad groups, which contain one or more ads. For more, see &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/set-up-your-campaign/\&quot;&gt;Set up your campaign&lt;/a&gt;. &lt;p/&gt; &lt;strong&gt;Note:&lt;/strong&gt; - The values for &#39;lifetime_spend_cap&#39; and &#39;daily_spend_cap&#39; are microcurrency amounts based on the currency field set in the advertiser&#39;s profile. (e.g. USD) &lt;p/&gt; &lt;p&gt;Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.&lt;/p&gt; &lt;p&gt;A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’s profile.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Equivalency equations&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;$1 &#x3D; 1,000,000 microdollars&lt;/li&gt;   &lt;li&gt;1 microdollar &#x3D; $0.000001 &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;To convert between currency and microcurrency&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;To convert dollars to microdollars, mutiply dollars by 1,000,000&lt;/li&gt;   &lt;li&gt;To convert microdollars to dollars, divide microdollars by 1,000,000&lt;/li&gt; &lt;/ul&gt;
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!Array<!API.Client.CampaignCreateRequest>} campaignCreateRequest Array of campaigns.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.CampaignCreateResponse>}
 */
API.Client.CampaignsApi.prototype.campaignsCreate = function(adAccountId, campaignCreateRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/campaigns'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling campaignsCreate');
  }
  // verify required parameter 'campaignCreateRequest' is set
  if (!campaignCreateRequest) {
    throw new Error('Missing required parameter campaignCreateRequest when calling campaignsCreate');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: campaignCreateRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get campaign
 * Get a specific campaign given the campaign ID.
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!string} campaignId Campaign ID, must be associated with the ad account ID provided in the path.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.CampaignResponse>}
 */
API.Client.CampaignsApi.prototype.campaignsGet = function(adAccountId, campaignId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/campaigns/{campaign_id}'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId))
      .replace('{' + 'campaign_id' + '}', String(campaignId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling campaignsGet');
  }
  // verify required parameter 'campaignId' is set
  if (!campaignId) {
    throw new Error('Missing required parameter campaignId when calling campaignsGet');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List campaigns
 * Get a list of the campaigns in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!Array<!string>=} opt_campaignIds List of Campaign Ids to use to filter the results.
 * @param {!Array<!string>=} opt_entityStatuses Entity status
 * @param {!number=} opt_pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
 * @param {!string=} opt_order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
 * @param {!string=} opt_bookmark Cursor used to fetch the next page of items
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.campaigns_list_200_response>}
 */
API.Client.CampaignsApi.prototype.campaignsList = function(adAccountId, opt_campaignIds, opt_entityStatuses, opt_pageSize, opt_order, opt_bookmark, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/campaigns'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling campaignsList');
  }
  if (opt_campaignIds !== undefined) {
    queryParameters['campaign_ids'] = opt_campaignIds;
  }

  if (opt_entityStatuses !== undefined) {
    queryParameters['entity_statuses'] = opt_entityStatuses;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['page_size'] = opt_pageSize;
  }

  if (opt_order !== undefined) {
    queryParameters['order'] = opt_order;
  }

  if (opt_bookmark !== undefined) {
    queryParameters['bookmark'] = opt_bookmark;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update campaigns
 * Update multiple ad campaigns based on campaign_ids. &lt;p/&gt; &lt;strong&gt;Note:&lt;/strong&gt;&lt;p/&gt;  - &lt;p&gt;The values for &#39;lifetime_spend_cap&#39; and &#39;daily_spend_cap&#39; are microcurrency amounts based on the currency field set in the advertiser&#39;s profile. (e.g. USD) &lt;p/&gt; &lt;p&gt;Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.&lt;/p&gt; &lt;p&gt;A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’ s profile.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Equivalency equations&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;$1 &#x3D; 1,000,000 microdollars&lt;/li&gt;   &lt;li&gt;1 microdollar &#x3D; $0.000001 &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;To convert between currency and microcurrency&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;To convert dollars to microdollars, mutiply dollars by 1,000,000&lt;/li&gt;   &lt;li&gt;To convert microdollars to dollars, divide microdollars by 1,000,000&lt;/li&gt; &lt;/ul&gt;
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!Array<!API.Client.CampaignUpdateRequest>} campaignUpdateRequest Array of campaigns.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.CampaignUpdateResponse>}
 */
API.Client.CampaignsApi.prototype.campaignsUpdate = function(adAccountId, campaignUpdateRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/campaigns'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling campaignsUpdate');
  }
  // verify required parameter 'campaignUpdateRequest' is set
  if (!campaignUpdateRequest) {
    throw new Error('Missing required parameter campaignUpdateRequest when calling campaignsUpdate');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: campaignUpdateRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
