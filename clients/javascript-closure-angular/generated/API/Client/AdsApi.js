/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.AdsApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Pinterest&#39;s REST API
 * Version: 5.14.0
* Generator version: 7.9.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license MIT
 * https://spdx.org/licenses/MIT
 */

goog.provide('API.Client.AdsApi');

goog.require('API.Client.AdArrayResponse');
goog.require('API.Client.AdCreateRequest');
goog.require('API.Client.AdPreviewRequest');
goog.require('API.Client.AdPreviewURLResponse');
goog.require('API.Client.AdResponse');
goog.require('API.Client.AdUpdateRequest');
goog.require('API.Client.AdsAnalyticsAdTargetingType');
goog.require('API.Client.AdsAnalyticsResponse_inner');
goog.require('API.Client.ConversionReportAttributionType');
goog.require('API.Client.Error');
goog.require('API.Client.Granularity');
goog.require('API.Client.MetricsResponse');
goog.require('API.Client.ads_list_200_response');
goog.require('API.Client.date');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.AdsApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('AdsApiBasePath') ?
                   /** @type {!string} */ ($injector.get('AdsApiBasePath')) :
                   'https://api.pinterest.com/v5';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('AdsApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('AdsApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.AdsApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Create ad preview with pin or image
 * Create an ad preview given an ad account ID and either an existing organic pin ID or the URL for an image to be used to create the Pin and the ad. &lt;p/&gt; If you are creating a preview from an existing Pin, that Pin must be promotable: that is, it must have a clickthrough link and meet other requirements. (See &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/promoted-pins-overview\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Ads Overview&lt;/a&gt;.) &lt;p/&gt; You can view the returned preview URL on a webpage or iframe for 7 days, after which the URL expires. Collection ads are not currently supported ad preview.
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!AdPreviewRequest} adPreviewRequest Create ad preview with pin or image.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.AdPreviewURLResponse>}
 */
API.Client.AdsApi.prototype.adPreviewsCreate = function(adAccountId, adPreviewRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/ad_previews'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling adPreviewsCreate');
  }
  // verify required parameter 'adPreviewRequest' is set
  if (!adPreviewRequest) {
    throw new Error('Missing required parameter adPreviewRequest when calling adPreviewsCreate');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: adPreviewRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get targeting analytics for ads
 * Get targeting analytics for one or more ads. For the requested ad(s) and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \&quot;age_bucket\&quot;) for applicable values (e.g. \&quot;45-49\&quot;). &lt;p/&gt; - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!Array<!string>} adIds List of Ad Ids to use to filter the results.
 * @param {!API.Client.date} startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
 * @param {!API.Client.date} endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
 * @param {!Array<!API.Client.AdsAnalyticsAdTargetingType>} targetingTypes Targeting type breakdowns for the report. The reporting per targeting type &lt;br&gt; is independent from each other. [\&quot;AGE_BUCKET_AND_GENDER\&quot;] is in BETA and not yet available to all users.
 * @param {!Array<!string>} columns Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
 * @param {!Granularity} granularity TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
 * @param {!number=} opt_clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
 * @param {!number=} opt_engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
 * @param {!number=} opt_viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
 * @param {!string=} opt_conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
 * @param {!ConversionReportAttributionType=} opt_attributionTypes List of types of attribution for the conversion report
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.MetricsResponse>}
 */
API.Client.AdsApi.prototype.adTargetingAnalyticsGet = function(adAccountId, adIds, startDate, endDate, targetingTypes, columns, granularity, opt_clickWindowDays, opt_engagementWindowDays, opt_viewWindowDays, opt_conversionReportTime, opt_attributionTypes, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/ads/targeting_analytics'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling adTargetingAnalyticsGet');
  }
  // verify required parameter 'adIds' is set
  if (!adIds) {
    throw new Error('Missing required parameter adIds when calling adTargetingAnalyticsGet');
  }
  // verify required parameter 'startDate' is set
  if (!startDate) {
    throw new Error('Missing required parameter startDate when calling adTargetingAnalyticsGet');
  }
  // verify required parameter 'endDate' is set
  if (!endDate) {
    throw new Error('Missing required parameter endDate when calling adTargetingAnalyticsGet');
  }
  // verify required parameter 'targetingTypes' is set
  if (!targetingTypes) {
    throw new Error('Missing required parameter targetingTypes when calling adTargetingAnalyticsGet');
  }
  // verify required parameter 'columns' is set
  if (!columns) {
    throw new Error('Missing required parameter columns when calling adTargetingAnalyticsGet');
  }
  // verify required parameter 'granularity' is set
  if (!granularity) {
    throw new Error('Missing required parameter granularity when calling adTargetingAnalyticsGet');
  }
  if (adIds !== undefined) {
    queryParameters['ad_ids'] = adIds;
  }

  if (startDate !== undefined) {
    queryParameters['start_date'] = startDate;
  }

  if (endDate !== undefined) {
    queryParameters['end_date'] = endDate;
  }

  if (targetingTypes !== undefined) {
    queryParameters['targeting_types'] = targetingTypes;
  }

  if (columns !== undefined) {
    queryParameters['columns'] = columns;
  }

  if (granularity !== undefined) {
    queryParameters['granularity'] = granularity;
  }

  if (opt_clickWindowDays !== undefined) {
    queryParameters['click_window_days'] = opt_clickWindowDays;
  }

  if (opt_engagementWindowDays !== undefined) {
    queryParameters['engagement_window_days'] = opt_engagementWindowDays;
  }

  if (opt_viewWindowDays !== undefined) {
    queryParameters['view_window_days'] = opt_viewWindowDays;
  }

  if (opt_conversionReportTime !== undefined) {
    queryParameters['conversion_report_time'] = opt_conversionReportTime;
  }

  if (opt_attributionTypes !== undefined) {
    queryParameters['attribution_types'] = opt_attributionTypes;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get ad analytics
 * Get analytics for the specified ads in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - The request must contain either ad_ids or both campaign_ids and pin_ids. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!API.Client.date} startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
 * @param {!API.Client.date} endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
 * @param {!Array<!string>} columns Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
 * @param {!Granularity} granularity TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
 * @param {!Array<!string>=} opt_adIds List of Ad Ids to use to filter the results.
 * @param {!number=} opt_clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
 * @param {!number=} opt_engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
 * @param {!number=} opt_viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
 * @param {!string=} opt_conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
 * @param {!Array<!string>=} opt_pinIds List of Pin IDs.
 * @param {!Array<!string>=} opt_campaignIds List of Campaign Ids to use to filter the results.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.AdsAnalyticsResponse_inner>>}
 */
API.Client.AdsApi.prototype.adsAnalytics = function(adAccountId, startDate, endDate, columns, granularity, opt_adIds, opt_clickWindowDays, opt_engagementWindowDays, opt_viewWindowDays, opt_conversionReportTime, opt_pinIds, opt_campaignIds, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/ads/analytics'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling adsAnalytics');
  }
  // verify required parameter 'startDate' is set
  if (!startDate) {
    throw new Error('Missing required parameter startDate when calling adsAnalytics');
  }
  // verify required parameter 'endDate' is set
  if (!endDate) {
    throw new Error('Missing required parameter endDate when calling adsAnalytics');
  }
  // verify required parameter 'columns' is set
  if (!columns) {
    throw new Error('Missing required parameter columns when calling adsAnalytics');
  }
  // verify required parameter 'granularity' is set
  if (!granularity) {
    throw new Error('Missing required parameter granularity when calling adsAnalytics');
  }
  if (startDate !== undefined) {
    queryParameters['start_date'] = startDate;
  }

  if (endDate !== undefined) {
    queryParameters['end_date'] = endDate;
  }

  if (opt_adIds !== undefined) {
    queryParameters['ad_ids'] = opt_adIds;
  }

  if (columns !== undefined) {
    queryParameters['columns'] = columns;
  }

  if (granularity !== undefined) {
    queryParameters['granularity'] = granularity;
  }

  if (opt_clickWindowDays !== undefined) {
    queryParameters['click_window_days'] = opt_clickWindowDays;
  }

  if (opt_engagementWindowDays !== undefined) {
    queryParameters['engagement_window_days'] = opt_engagementWindowDays;
  }

  if (opt_viewWindowDays !== undefined) {
    queryParameters['view_window_days'] = opt_viewWindowDays;
  }

  if (opt_conversionReportTime !== undefined) {
    queryParameters['conversion_report_time'] = opt_conversionReportTime;
  }

  if (opt_pinIds !== undefined) {
    queryParameters['pin_ids'] = opt_pinIds;
  }

  if (opt_campaignIds !== undefined) {
    queryParameters['campaign_ids'] = opt_campaignIds;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create ads
 * Create multiple new ads. Request must contain ad_group_id, creative_type, and the source Pin pin_id.
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!Array<!API.Client.AdCreateRequest>} adCreateRequest List of ads to create, size limit [1, 30].
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.AdArrayResponse>}
 */
API.Client.AdsApi.prototype.adsCreate = function(adAccountId, adCreateRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/ads'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling adsCreate');
  }
  // verify required parameter 'adCreateRequest' is set
  if (!adCreateRequest) {
    throw new Error('Missing required parameter adCreateRequest when calling adsCreate');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: adCreateRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get ad
 * Get a specific ad given the ad ID. If your pin is rejected, rejected_reasons will contain additional information from the Ad Review process. For more information about our policies and rejection reasons see the &lt;a href&#x3D;\&quot;https://www.pinterest.com/_/_/policy/advertising-guidelines/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Pinterest advertising standards&lt;/a&gt;.
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!string} adId Unique identifier of an ad.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.AdResponse>}
 */
API.Client.AdsApi.prototype.adsGet = function(adAccountId, adId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/ads/{ad_id}'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId))
      .replace('{' + 'ad_id' + '}', String(adId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling adsGet');
  }
  // verify required parameter 'adId' is set
  if (!adId) {
    throw new Error('Missing required parameter adId when calling adsGet');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List ads
 * List ads that meet the filters provided:   - Listed campaign ids or ad group ids or ad ids   - Listed entity statuses &lt;p/&gt; If no filter is provided, all ads in the ad account are returned. &lt;p/&gt; &lt;strong&gt;Note:&lt;/strong&gt;&lt;p/&gt; Provide only campaign_id or ad_group_id or ad_id. Do not provide more than one type. &lt;p/&gt; Review status is provided for each ad; if review_status is REJECTED, the rejected_reasons field will contain additional information. For more, see &lt;a href&#x3D;\&quot;https://policy.pinterest.com/en/advertising-guidelines\&quot;&gt;Pinterest advertising standards&lt;/a&gt;.
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!Array<!string>=} opt_campaignIds List of Campaign Ids to use to filter the results.
 * @param {!Array<!string>=} opt_adGroupIds List of Ad group Ids to use to filter the results.
 * @param {!Array<!string>=} opt_adIds List of Ad Ids to use to filter the results.
 * @param {!Array<!string>=} opt_entityStatuses Entity status
 * @param {!number=} opt_pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
 * @param {!string=} opt_order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
 * @param {!string=} opt_bookmark Cursor used to fetch the next page of items
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ads_list_200_response>}
 */
API.Client.AdsApi.prototype.adsList = function(adAccountId, opt_campaignIds, opt_adGroupIds, opt_adIds, opt_entityStatuses, opt_pageSize, opt_order, opt_bookmark, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/ads'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling adsList');
  }
  if (opt_campaignIds !== undefined) {
    queryParameters['campaign_ids'] = opt_campaignIds;
  }

  if (opt_adGroupIds !== undefined) {
    queryParameters['ad_group_ids'] = opt_adGroupIds;
  }

  if (opt_adIds !== undefined) {
    queryParameters['ad_ids'] = opt_adIds;
  }

  if (opt_entityStatuses !== undefined) {
    queryParameters['entity_statuses'] = opt_entityStatuses;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['page_size'] = opt_pageSize;
  }

  if (opt_order !== undefined) {
    queryParameters['order'] = opt_order;
  }

  if (opt_bookmark !== undefined) {
    queryParameters['bookmark'] = opt_bookmark;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update ads
 * Update multiple existing ads
 * @param {!string} adAccountId Unique identifier of an ad account.
 * @param {!Array<!API.Client.AdUpdateRequest>} adUpdateRequest List of ads to update, size limit [1, 30]
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.AdArrayResponse>}
 */
API.Client.AdsApi.prototype.adsUpdate = function(adAccountId, adUpdateRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ad_accounts/{ad_account_id}/ads'
      .replace('{' + 'ad_account_id' + '}', String(adAccountId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'adAccountId' is set
  if (!adAccountId) {
    throw new Error('Missing required parameter adAccountId when calling adsUpdate');
  }
  // verify required parameter 'adUpdateRequest' is set
  if (!adUpdateRequest) {
    throw new Error('Missing required parameter adUpdateRequest when calling adsUpdate');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: adUpdateRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
