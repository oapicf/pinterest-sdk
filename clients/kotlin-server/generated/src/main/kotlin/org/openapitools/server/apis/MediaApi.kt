/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.apis

import com.google.gson.Gson
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.auth.*
import io.ktor.server.response.*
import org.openapitools.server.Paths
import io.ktor.server.resources.options
import io.ktor.server.resources.get
import io.ktor.server.resources.post
import io.ktor.server.resources.put
import io.ktor.server.resources.delete
import io.ktor.server.resources.head
import io.ktor.server.resources.patch
import io.ktor.server.routing.*
import org.openapitools.server.infrastructure.ApiPrincipal
import org.openapitools.server.models.Error
import org.openapitools.server.models.MediaList200Response
import org.openapitools.server.models.MediaUpload
import org.openapitools.server.models.MediaUploadDetails
import org.openapitools.server.models.MediaUploadRequest

fun Route.MediaApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    authenticate("pinterest_oauth2") {
    post<Paths.mediaCreate> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "media_id" : "12345",
              "media_type" : "video",
              "upload_url" : "https://pinterest-media-upload.s3-accelerate.amazonaws.com/",
              "upload_parameters" : {
                "x-amz-data" : "20220127T185143Z",
                "x-amz-signature" : "fcd6309a6aaee213348666a72abed8b44552a43acb6b340e8e1b288d21a5fe92",
                "key" : "uploads/11/aa/22/3:video:203014033110991560:5212123920968240771",
                "policy" : "eyJleHBpcmF0aW9uIjoiMj..==",
                "x-amz-credential" : "ASIA6QZJ64OPIKV7FRVX/20220127/us-east-1/s3/aws4_request",
                "x-amz-security-token" : "IQoJb3JpZ2luX2VjEJr...==",
                "x-amz-algorithm" : "AWS4-HMAC-SHA256",
                "Content-Type" : "multipart/form-data"
              }
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("pinterest_oauth2") {
    get<Paths.mediaGet> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "media_id" : "12345",
              "media_type" : "video",
              "status" : "succeeded"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("pinterest_oauth2") {
    get<Paths.mediaList> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "bookmark" : "bookmark",
              "items" : [ {
                "media_id" : "12345",
                "media_type" : "video",
                "status" : "succeeded"
              }, {
                "media_id" : "12345",
                "media_type" : "video",
                "status" : "succeeded"
              } ]
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

}
