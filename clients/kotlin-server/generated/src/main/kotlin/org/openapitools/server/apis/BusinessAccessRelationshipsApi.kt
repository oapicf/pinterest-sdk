/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.apis

import com.google.gson.Gson
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.auth.*
import io.ktor.server.response.*
import org.openapitools.server.Paths
import io.ktor.server.resources.options
import io.ktor.server.resources.get
import io.ktor.server.resources.post
import io.ktor.server.resources.put
import io.ktor.server.resources.delete
import io.ktor.server.resources.head
import io.ktor.server.resources.patch
import io.ktor.server.routing.*
import org.openapitools.server.infrastructure.ApiPrincipal
import org.openapitools.server.models.DeletePartnersRequest
import org.openapitools.server.models.DeletePartnersResponse
import org.openapitools.server.models.DeletedMembersResponse
import org.openapitools.server.models.Error
import org.openapitools.server.models.GetBusinessEmployers200Response
import org.openapitools.server.models.GetBusinessMembers200Response
import org.openapitools.server.models.GetBusinessPartners200Response
import org.openapitools.server.models.MemberBusinessRole
import org.openapitools.server.models.MembersToDeleteBody
import org.openapitools.server.models.PartnerType
import org.openapitools.server.models.UpdateMemberBusinessRoleBody
import org.openapitools.server.models.UpdateMemberResultsResponseArray

fun Route.BusinessAccessRelationshipsApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    authenticate("pinterest_oauth2") {
    delete<Paths.deleteBusinessMembership> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "deleted_members" : [ "809944451643622187", "383791336903426391" ]
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("pinterest_oauth2") {
    delete<Paths.deleteBusinessPartners> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "deleted_partners" : [ "809944451643622187", "383791336903426391" ]
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("pinterest_oauth2") {
    get<Paths.getBusinessEmployers> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "bookmark" : "bookmark",
              "items" : [ {
                "created_time" : 1646767577816,
                "assets_summary" : "{}",
                "business_roles" : [ "BIZ_ADMIN" ],
                "is_shared_partner" : false,
                "created_by_business" : "{}",
                "id" : "383791336903426391",
                "user" : "{}",
                "created_by_user" : "{}"
              }, {
                "created_time" : 1646767577816,
                "assets_summary" : "{}",
                "business_roles" : [ "BIZ_ADMIN" ],
                "is_shared_partner" : false,
                "created_by_business" : "{}",
                "id" : "383791336903426391",
                "user" : "{}",
                "created_by_user" : "{}"
              } ]
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("pinterest_oauth2") {
    get<Paths.getBusinessMembers> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "bookmark" : "bookmark",
              "items" : [ {
                "created_time" : 1646767577816,
                "assets_summary" : "{}",
                "business_roles" : [ "BIZ_ADMIN" ],
                "is_shared_partner" : false,
                "created_by_business" : "{}",
                "id" : "383791336903426391",
                "user" : "{}",
                "created_by_user" : "{}"
              }, {
                "created_time" : 1646767577816,
                "assets_summary" : "{}",
                "business_roles" : [ "BIZ_ADMIN" ],
                "is_shared_partner" : false,
                "created_by_business" : "{}",
                "id" : "383791336903426391",
                "user" : "{}",
                "created_by_user" : "{}"
              } ]
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("pinterest_oauth2") {
    get<Paths.getBusinessPartners> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "bookmark" : "bookmark",
              "items" : [ {
                "created_time" : 1646767577816,
                "assets_summary" : "{}",
                "business_roles" : [ "BIZ_ADMIN" ],
                "is_shared_partner" : false,
                "created_by_business" : "{}",
                "id" : "383791336903426391",
                "user" : "{}",
                "created_by_user" : "{}"
              }, {
                "created_time" : 1646767577816,
                "assets_summary" : "{}",
                "business_roles" : [ "BIZ_ADMIN" ],
                "is_shared_partner" : false,
                "created_by_business" : "{}",
                "id" : "383791336903426391",
                "user" : "{}",
                "created_by_user" : "{}"
              } ]
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("pinterest_oauth2") {
    patch<Paths.updateBusinessMemberships> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "items" : [ {
                "member_id" : "140943737684417",
                "business_role" : "EMPLOYEE"
              }, {
                "member_id" : "140943737684417",
                "business_role" : "EMPLOYEE"
              } ]
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

}
