/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.14.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.apis

import com.google.gson.Gson
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.auth.*
import io.ktor.server.response.*
import org.openapitools.server.Paths
import io.ktor.server.resources.options
import io.ktor.server.resources.get
import io.ktor.server.resources.post
import io.ktor.server.resources.put
import io.ktor.server.resources.delete
import io.ktor.server.resources.head
import io.ktor.server.resources.patch
import io.ktor.server.routing.*
import org.openapitools.server.infrastructure.ApiPrincipal
import org.openapitools.server.models.Error
import org.openapitools.server.models.TargetingTemplateCreate
import org.openapitools.server.models.TargetingTemplateGetResponseData
import org.openapitools.server.models.TargetingTemplateList200Response
import org.openapitools.server.models.TargetingTemplateUpdateRequest

fun Route.TargetingTemplateApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    authenticate("pinterest_oauth2") {
    post<Paths.targetingTemplateCreate> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "sizing" : {
                "reach_estimate" : {
                  "estimate" : 63492000,
                  "lower_bound" : 47619000,
                  "upper_bound" : 79365000
                }
              },
              "created_time" : 1432744744,
              "updated_time" : 1432744744,
              "keywords" : [ {
                "value" : "cats",
                "match_type" : "EXACT_NEGATIVE"
              } ],
              "auto_targeting_enabled" : true,
              "tracking_urls" : {
                "impression" : [ "URL1", "URL2" ],
                "click" : [ "URL1", "URL2" ],
                "engagement" : [ "URL1", "URL2" ],
                "buyable_button" : [ "URL1", "URL2" ],
                "audience_verification" : [ "URL1", "URL2" ]
              },
              "ad_account_id" : "549755885175",
              "targeting_attributes" : {
                "GEO" : [ "GEO", "GEO" ],
                "LOCATION" : [ "LOCATION", "LOCATION" ],
                "LOCALE" : [ "LOCALE", "LOCALE" ],
                "AGE_BUCKET" : [ "35-44", "50-54" ],
                "AUDIENCE_INCLUDE" : [ "AUDIENCE_INCLUDE", "AUDIENCE_INCLUDE" ],
                "SHOPPING_RETARGETING" : [ {
                  "lookback_window" : 30,
                  "exclusion_window" : 14,
                  "tag_types" : [ 0, 6 ]
                }, {
                  "lookback_window" : 30,
                  "exclusion_window" : 14,
                  "tag_types" : [ 0, 6 ]
                } ],
                "GENDER" : [ "unknown", "unknown" ],
                "TARGETING_STRATEGY" : [ "CHOOSE_YOUR_OWN", "CHOOSE_YOUR_OWN" ],
                "APPTYPE" : [ "ipad", "iphone" ],
                "AUDIENCE_EXCLUDE" : [ "AUDIENCE_EXCLUDE", "AUDIENCE_EXCLUDE" ],
                "INTEREST" : [ "INTEREST", "INTEREST" ]
              },
              "valid" : true,
              "name" : "Gaming",
              "id" : "643",
              "placement_group" : "ALL",
              "status" : "ACTIVE"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("pinterest_oauth2") {
    get<Paths.targetingTemplateList> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "bookmark" : "bookmark",
              "items" : [ {
                "targeting_attributes" : {
                  "GEO" : [ "GEO", "GEO" ],
                  "LOCATION" : [ "LOCATION", "LOCATION" ],
                  "LOCALE" : [ "LOCALE", "LOCALE" ],
                  "AGE_BUCKET" : [ "35-44", "50-54" ],
                  "AUDIENCE_INCLUDE" : [ "AUDIENCE_INCLUDE", "AUDIENCE_INCLUDE" ],
                  "SHOPPING_RETARGETING" : [ {
                    "lookback_window" : 30,
                    "exclusion_window" : 14,
                    "tag_types" : [ 0, 6 ]
                  }, {
                    "lookback_window" : 30,
                    "exclusion_window" : 14,
                    "tag_types" : [ 0, 6 ]
                  } ],
                  "GENDER" : [ "unknown", "unknown" ],
                  "TARGETING_STRATEGY" : [ "CHOOSE_YOUR_OWN", "CHOOSE_YOUR_OWN" ],
                  "APPTYPE" : [ "ipad", "iphone" ],
                  "AUDIENCE_EXCLUDE" : [ "AUDIENCE_EXCLUDE", "AUDIENCE_EXCLUDE" ],
                  "INTEREST" : [ "INTEREST", "INTEREST" ]
                },
                "sizing" : {
                  "reach_estimate" : {
                    "estimate" : 63492000,
                    "lower_bound" : 47619000,
                    "upper_bound" : 79365000
                  }
                },
                "created_time" : 1432744744,
                "updated_time" : 1432744744,
                "keywords" : [ {
                  "value" : "cats",
                  "match_type" : "EXACT_NEGATIVE"
                } ],
                "name" : "Gaming",
                "id" : "643",
                "auto_targeting_enabled" : true,
                "placement_group" : "ALL",
                "tracking_urls" : {
                  "impression" : [ "URL1", "URL2" ],
                  "click" : [ "URL1", "URL2" ],
                  "engagement" : [ "URL1", "URL2" ],
                  "buyable_button" : [ "URL1", "URL2" ],
                  "audience_verification" : [ "URL1", "URL2" ]
                },
                "ad_account_id" : "549755885175",
                "status" : "ACTIVE"
              }, {
                "targeting_attributes" : {
                  "GEO" : [ "GEO", "GEO" ],
                  "LOCATION" : [ "LOCATION", "LOCATION" ],
                  "LOCALE" : [ "LOCALE", "LOCALE" ],
                  "AGE_BUCKET" : [ "35-44", "50-54" ],
                  "AUDIENCE_INCLUDE" : [ "AUDIENCE_INCLUDE", "AUDIENCE_INCLUDE" ],
                  "SHOPPING_RETARGETING" : [ {
                    "lookback_window" : 30,
                    "exclusion_window" : 14,
                    "tag_types" : [ 0, 6 ]
                  }, {
                    "lookback_window" : 30,
                    "exclusion_window" : 14,
                    "tag_types" : [ 0, 6 ]
                  } ],
                  "GENDER" : [ "unknown", "unknown" ],
                  "TARGETING_STRATEGY" : [ "CHOOSE_YOUR_OWN", "CHOOSE_YOUR_OWN" ],
                  "APPTYPE" : [ "ipad", "iphone" ],
                  "AUDIENCE_EXCLUDE" : [ "AUDIENCE_EXCLUDE", "AUDIENCE_EXCLUDE" ],
                  "INTEREST" : [ "INTEREST", "INTEREST" ]
                },
                "sizing" : {
                  "reach_estimate" : {
                    "estimate" : 63492000,
                    "lower_bound" : 47619000,
                    "upper_bound" : 79365000
                  }
                },
                "created_time" : 1432744744,
                "updated_time" : 1432744744,
                "keywords" : [ {
                  "value" : "cats",
                  "match_type" : "EXACT_NEGATIVE"
                } ],
                "name" : "Gaming",
                "id" : "643",
                "auto_targeting_enabled" : true,
                "placement_group" : "ALL",
                "tracking_urls" : {
                  "impression" : [ "URL1", "URL2" ],
                  "click" : [ "URL1", "URL2" ],
                  "engagement" : [ "URL1", "URL2" ],
                  "buyable_button" : [ "URL1", "URL2" ],
                  "audience_verification" : [ "URL1", "URL2" ]
                },
                "ad_account_id" : "549755885175",
                "status" : "ACTIVE"
              } ]
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("pinterest_oauth2") {
    patch<Paths.targetingTemplateUpdate> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "code" : 0,
              "message" : "message"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

}
