// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    BusinessAssetMembersGet200Response,
    BusinessAssetMembersGet200ResponseFromJSON,
    BusinessAssetMembersGet200ResponseToJSON,
    BusinessAssetPartnersGet200Response,
    BusinessAssetPartnersGet200ResponseFromJSON,
    BusinessAssetPartnersGet200ResponseToJSON,
    BusinessAssetsGet200Response,
    BusinessAssetsGet200ResponseFromJSON,
    BusinessAssetsGet200ResponseToJSON,
    BusinessMemberAssetsGet200Response,
    BusinessMemberAssetsGet200ResponseFromJSON,
    BusinessMemberAssetsGet200ResponseToJSON,
    BusinessMembersAssetAccessDeleteRequest,
    BusinessMembersAssetAccessDeleteRequestFromJSON,
    BusinessMembersAssetAccessDeleteRequestToJSON,
    BusinessPartnerAssetAccessGet200Response,
    BusinessPartnerAssetAccessGet200ResponseFromJSON,
    BusinessPartnerAssetAccessGet200ResponseToJSON,
    CreateAssetGroupBody,
    CreateAssetGroupBodyFromJSON,
    CreateAssetGroupBodyToJSON,
    CreateAssetGroupResponse,
    CreateAssetGroupResponseFromJSON,
    CreateAssetGroupResponseToJSON,
    DeleteAssetGroupBody,
    DeleteAssetGroupBodyFromJSON,
    DeleteAssetGroupBodyToJSON,
    DeleteAssetGroupResponse,
    DeleteAssetGroupResponseFromJSON,
    DeleteAssetGroupResponseToJSON,
    DeleteMemberAccessResultsResponseArray,
    DeleteMemberAccessResultsResponseArrayFromJSON,
    DeleteMemberAccessResultsResponseArrayToJSON,
    DeletePartnerAssetAccessBody,
    DeletePartnerAssetAccessBodyFromJSON,
    DeletePartnerAssetAccessBodyToJSON,
    DeletePartnerAssetsResultsResponseArray,
    DeletePartnerAssetsResultsResponseArrayFromJSON,
    DeletePartnerAssetsResultsResponseArrayToJSON,
    PartnerType,
    PartnerTypeFromJSON,
    PartnerTypeToJSON,
    PermissionsWithOwner,
    PermissionsWithOwnerFromJSON,
    PermissionsWithOwnerToJSON,
    UpdateAssetGroupBody,
    UpdateAssetGroupBodyFromJSON,
    UpdateAssetGroupBodyToJSON,
    UpdateAssetGroupResponse,
    UpdateAssetGroupResponseFromJSON,
    UpdateAssetGroupResponseToJSON,
    UpdateMemberAssetAccessBody,
    UpdateMemberAssetAccessBodyFromJSON,
    UpdateMemberAssetAccessBodyToJSON,
    UpdateMemberAssetsResultsResponseArray,
    UpdateMemberAssetsResultsResponseArrayFromJSON,
    UpdateMemberAssetsResultsResponseArrayToJSON,
    UpdatePartnerAssetAccessBody,
    UpdatePartnerAssetAccessBodyFromJSON,
    UpdatePartnerAssetAccessBodyToJSON,
    UpdatePartnerAssetsResultsResponseArray,
    UpdatePartnerAssetsResultsResponseArrayFromJSON,
    UpdatePartnerAssetsResultsResponseArrayToJSON,
} from '../models';

export interface AssetGroupCreateRequest {
    businessId: string;
    createAssetGroupBody: CreateAssetGroupBody;
}

export interface AssetGroupDeleteRequest {
    businessId: string;
    deleteAssetGroupBody: DeleteAssetGroupBody;
}

export interface AssetGroupUpdateRequest {
    businessId: string;
    updateAssetGroupBody: UpdateAssetGroupBody;
}

export interface BusinessAssetMembersGetRequest {
    businessId: string;
    assetId: string;
    bookmark?: string;
    pageSize?: number;
    startIndex?: number;
}

export interface BusinessAssetPartnersGetRequest {
    businessId: string;
    assetId: string;
    startIndex?: number;
    bookmark?: string;
    pageSize?: number;
}

export interface BusinessAssetsGetRequest {
    businessId: string;
    permissions?: Array<PermissionsWithOwner>;
    childAssetId?: string;
    assetGroupId?: string;
    assetType?: BusinessAssetsGetAssetTypeEnum;
    startIndex?: number;
    bookmark?: string;
    pageSize?: number;
}

export interface BusinessMemberAssetsGetRequest {
    businessId: string;
    memberId: string;
    assetType?: BusinessMemberAssetsGetAssetTypeEnum;
    startIndex?: number;
    bookmark?: string;
    pageSize?: number;
}

export interface BusinessMembersAssetAccessDeleteRequest {
    businessId: string;
    businessMembersAssetAccessDeleteRequest: BusinessMembersAssetAccessDeleteRequest;
}

export interface BusinessMembersAssetAccessUpdateRequest {
    businessId: string;
    updateMemberAssetAccessBody: UpdateMemberAssetAccessBody;
}

export interface BusinessPartnerAssetAccessGetRequest {
    businessId: string;
    partnerId: string;
    partnerType?: PartnerType;
    assetType?: BusinessPartnerAssetAccessGetAssetTypeEnum;
    startIndex?: number;
    pageSize?: number;
    bookmark?: string;
}

export interface DeletePartnerAssetAccessHandlerImplRequest {
    businessId: string;
    deletePartnerAssetAccessBody: DeletePartnerAssetAccessBody;
}

export interface UpdatePartnerAssetAccessHandlerImplRequest {
    businessId: string;
    updatePartnerAssetAccessBody: UpdatePartnerAssetAccessBody;
}


/**
 * Create a new asset group with the specified parameters. - An <a href=\"https://help.pinterest.com/en/business/article/asset-groups\">asset group</a> is a custom group of assets based on how you’d like to manage your accounts.
 * Create a new asset group.
 */
function assetGroupCreateRaw<T>(requestParameters: AssetGroupCreateRequest, requestConfig: runtime.TypedQueryConfig<T, CreateAssetGroupResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling assetGroupCreate.');
    }

    if (requestParameters.createAssetGroupBody === null || requestParameters.createAssetGroupBody === undefined) {
        throw new runtime.RequiredError('createAssetGroupBody','Required parameter requestParameters.createAssetGroupBody was null or undefined when calling assetGroupCreate.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["biz_access:read", "biz_access:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{business_id}/asset_groups`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || CreateAssetGroupBodyToJSON(requestParameters.createAssetGroupBody),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CreateAssetGroupResponseFromJSON(body), text);
    }

    return config;
}

/**
* Create a new asset group with the specified parameters. - An <a href=\"https://help.pinterest.com/en/business/article/asset-groups\">asset group</a> is a custom group of assets based on how you’d like to manage your accounts.
* Create a new asset group.
*/
export function assetGroupCreate<T>(requestParameters: AssetGroupCreateRequest, requestConfig?: runtime.TypedQueryConfig<T, CreateAssetGroupResponse>): QueryConfig<T> {
    return assetGroupCreateRaw(requestParameters, requestConfig);
}

/**
 * Delete a batch of asset groups.
 * Delete asset groups.
 */
function assetGroupDeleteRaw<T>(requestParameters: AssetGroupDeleteRequest, requestConfig: runtime.TypedQueryConfig<T, DeleteAssetGroupResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling assetGroupDelete.');
    }

    if (requestParameters.deleteAssetGroupBody === null || requestParameters.deleteAssetGroupBody === undefined) {
        throw new runtime.RequiredError('deleteAssetGroupBody','Required parameter requestParameters.deleteAssetGroupBody was null or undefined when calling assetGroupDelete.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["biz_access:read", "biz_access:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{business_id}/asset_groups`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters || DeleteAssetGroupBodyToJSON(requestParameters.deleteAssetGroupBody),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(DeleteAssetGroupResponseFromJSON(body), text);
    }

    return config;
}

/**
* Delete a batch of asset groups.
* Delete asset groups.
*/
export function assetGroupDelete<T>(requestParameters: AssetGroupDeleteRequest, requestConfig?: runtime.TypedQueryConfig<T, DeleteAssetGroupResponse>): QueryConfig<T> {
    return assetGroupDeleteRaw(requestParameters, requestConfig);
}

/**
 * Update a batch of asset groups with the specified parameters.
 * Update asset groups.
 */
function assetGroupUpdateRaw<T>(requestParameters: AssetGroupUpdateRequest, requestConfig: runtime.TypedQueryConfig<T, UpdateAssetGroupResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling assetGroupUpdate.');
    }

    if (requestParameters.updateAssetGroupBody === null || requestParameters.updateAssetGroupBody === undefined) {
        throw new runtime.RequiredError('updateAssetGroupBody','Required parameter requestParameters.updateAssetGroupBody was null or undefined when calling assetGroupUpdate.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["biz_access:read", "biz_access:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{business_id}/asset_groups`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PATCH',
            headers: headerParameters,
        },
        body: queryParameters || UpdateAssetGroupBodyToJSON(requestParameters.updateAssetGroupBody),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UpdateAssetGroupResponseFromJSON(body), text);
    }

    return config;
}

/**
* Update a batch of asset groups with the specified parameters.
* Update asset groups.
*/
export function assetGroupUpdate<T>(requestParameters: AssetGroupUpdateRequest, requestConfig?: runtime.TypedQueryConfig<T, UpdateAssetGroupResponse>): QueryConfig<T> {
    return assetGroupUpdateRaw(requestParameters, requestConfig);
}

/**
 * Get all the members the requesting business has granted access to on the given asset.
 * Get members with access to asset
 */
function businessAssetMembersGetRaw<T>(requestParameters: BusinessAssetMembersGetRequest, requestConfig: runtime.TypedQueryConfig<T, BusinessAssetMembersGet200Response> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling businessAssetMembersGet.');
    }

    if (requestParameters.assetId === null || requestParameters.assetId === undefined) {
        throw new runtime.RequiredError('assetId','Required parameter requestParameters.assetId was null or undefined when calling businessAssetMembersGet.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.bookmark !== undefined) {
        queryParameters['bookmark'] = requestParameters.bookmark;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['page_size'] = requestParameters.pageSize;
    }


    if (requestParameters.startIndex !== undefined) {
        queryParameters['start_index'] = requestParameters.startIndex;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["biz_access:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{business_id}/assets/{asset_id}/members`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters.businessId))).replace(`{${"asset_id"}}`, encodeURIComponent(String(requestParameters.assetId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(BusinessAssetMembersGet200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get all the members the requesting business has granted access to on the given asset.
* Get members with access to asset
*/
export function businessAssetMembersGet<T>(requestParameters: BusinessAssetMembersGetRequest, requestConfig?: runtime.TypedQueryConfig<T, BusinessAssetMembersGet200Response>): QueryConfig<T> {
    return businessAssetMembersGetRaw(requestParameters, requestConfig);
}

/**
 * Get all the partners the requesting business has granted access to on the given asset. Note: If the asset has been shared with you, an empty array will be returned. This is because an asset shared with you cannot be shared with a different partner.
 * Get partners with access to asset
 */
function businessAssetPartnersGetRaw<T>(requestParameters: BusinessAssetPartnersGetRequest, requestConfig: runtime.TypedQueryConfig<T, BusinessAssetPartnersGet200Response> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling businessAssetPartnersGet.');
    }

    if (requestParameters.assetId === null || requestParameters.assetId === undefined) {
        throw new runtime.RequiredError('assetId','Required parameter requestParameters.assetId was null or undefined when calling businessAssetPartnersGet.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.startIndex !== undefined) {
        queryParameters['start_index'] = requestParameters.startIndex;
    }


    if (requestParameters.bookmark !== undefined) {
        queryParameters['bookmark'] = requestParameters.bookmark;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['page_size'] = requestParameters.pageSize;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["biz_access:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{business_id}/assets/{asset_id}/partners`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters.businessId))).replace(`{${"asset_id"}}`, encodeURIComponent(String(requestParameters.assetId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(BusinessAssetPartnersGet200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get all the partners the requesting business has granted access to on the given asset. Note: If the asset has been shared with you, an empty array will be returned. This is because an asset shared with you cannot be shared with a different partner.
* Get partners with access to asset
*/
export function businessAssetPartnersGet<T>(requestParameters: BusinessAssetPartnersGetRequest, requestConfig?: runtime.TypedQueryConfig<T, BusinessAssetPartnersGet200Response>): QueryConfig<T> {
    return businessAssetPartnersGetRaw(requestParameters, requestConfig);
}

/**
 * Get all the assets the requesting business has access to. This includes assets the business owns and assets the business has access to through partnerships.
 * List business assets
 */
function businessAssetsGetRaw<T>(requestParameters: BusinessAssetsGetRequest, requestConfig: runtime.TypedQueryConfig<T, BusinessAssetsGet200Response> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling businessAssetsGet.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.permissions) {
        queryParameters['permissions'] = requestParameters.permissions;
    }


    if (requestParameters.childAssetId !== undefined) {
        queryParameters['child_asset_id'] = requestParameters.childAssetId;
    }


    if (requestParameters.assetGroupId !== undefined) {
        queryParameters['asset_group_id'] = requestParameters.assetGroupId;
    }


    if (requestParameters.assetType !== undefined) {
        queryParameters['asset_type'] = requestParameters.assetType;
    }


    if (requestParameters.startIndex !== undefined) {
        queryParameters['start_index'] = requestParameters.startIndex;
    }


    if (requestParameters.bookmark !== undefined) {
        queryParameters['bookmark'] = requestParameters.bookmark;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['page_size'] = requestParameters.pageSize;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["biz_access:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{business_id}/assets`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(BusinessAssetsGet200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get all the assets the requesting business has access to. This includes assets the business owns and assets the business has access to through partnerships.
* List business assets
*/
export function businessAssetsGet<T>(requestParameters: BusinessAssetsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, BusinessAssetsGet200Response>): QueryConfig<T> {
    return businessAssetsGetRaw(requestParameters, requestConfig);
}

/**
 * Get assets on which you assigned asset permissions to the given member. Can be used to: - get all assets, regardless of asset type or - get assets of one asset type by using the asset_type query. The return response will include the permissions the member has to that asset and the asset type.
 * Get assets assigned to a member
 */
function businessMemberAssetsGetRaw<T>(requestParameters: BusinessMemberAssetsGetRequest, requestConfig: runtime.TypedQueryConfig<T, BusinessMemberAssetsGet200Response> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling businessMemberAssetsGet.');
    }

    if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
        throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling businessMemberAssetsGet.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.assetType !== undefined) {
        queryParameters['asset_type'] = requestParameters.assetType;
    }


    if (requestParameters.startIndex !== undefined) {
        queryParameters['start_index'] = requestParameters.startIndex;
    }


    if (requestParameters.bookmark !== undefined) {
        queryParameters['bookmark'] = requestParameters.bookmark;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['page_size'] = requestParameters.pageSize;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["biz_access:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{business_id}/members/{member_id}/assets`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters.businessId))).replace(`{${"member_id"}}`, encodeURIComponent(String(requestParameters.memberId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(BusinessMemberAssetsGet200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get assets on which you assigned asset permissions to the given member. Can be used to: - get all assets, regardless of asset type or - get assets of one asset type by using the asset_type query. The return response will include the permissions the member has to that asset and the asset type.
* Get assets assigned to a member
*/
export function businessMemberAssetsGet<T>(requestParameters: BusinessMemberAssetsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, BusinessMemberAssetsGet200Response>): QueryConfig<T> {
    return businessMemberAssetsGetRaw(requestParameters, requestConfig);
}

/**
 * Terminate multiple members\' access to an asset.
 * Delete member access to asset
 */
function businessMembersAssetAccessDeleteRaw<T>(requestParameters: BusinessMembersAssetAccessDeleteRequest, requestConfig: runtime.TypedQueryConfig<T, DeleteMemberAccessResultsResponseArray> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling businessMembersAssetAccessDelete.');
    }

    if (requestParameters.businessMembersAssetAccessDeleteRequest === null || requestParameters.businessMembersAssetAccessDeleteRequest === undefined) {
        throw new runtime.RequiredError('businessMembersAssetAccessDeleteRequest','Required parameter requestParameters.businessMembersAssetAccessDeleteRequest was null or undefined when calling businessMembersAssetAccessDelete.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["biz_access:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{business_id}/members/assets/access`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters || BusinessMembersAssetAccessDeleteRequestToJSON(requestParameters.businessMembersAssetAccessDeleteRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(DeleteMemberAccessResultsResponseArrayFromJSON(body), text);
    }

    return config;
}

/**
* Terminate multiple members\' access to an asset.
* Delete member access to asset
*/
export function businessMembersAssetAccessDelete<T>(requestParameters: BusinessMembersAssetAccessDeleteRequest, requestConfig?: runtime.TypedQueryConfig<T, DeleteMemberAccessResultsResponseArray>): QueryConfig<T> {
    return businessMembersAssetAccessDeleteRaw(requestParameters, requestConfig);
}

/**
 * Grant multiple members access to assets and/or update multiple member\'s exisiting permissions to an asset. Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE. 
 * Assign/Update member asset permissions
 */
function businessMembersAssetAccessUpdateRaw<T>(requestParameters: BusinessMembersAssetAccessUpdateRequest, requestConfig: runtime.TypedQueryConfig<T, UpdateMemberAssetsResultsResponseArray> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling businessMembersAssetAccessUpdate.');
    }

    if (requestParameters.updateMemberAssetAccessBody === null || requestParameters.updateMemberAssetAccessBody === undefined) {
        throw new runtime.RequiredError('updateMemberAssetAccessBody','Required parameter requestParameters.updateMemberAssetAccessBody was null or undefined when calling businessMembersAssetAccessUpdate.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["biz_access:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{business_id}/members/assets/access`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PATCH',
            headers: headerParameters,
        },
        body: queryParameters || UpdateMemberAssetAccessBodyToJSON(requestParameters.updateMemberAssetAccessBody),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UpdateMemberAssetsResultsResponseArrayFromJSON(body), text);
    }

    return config;
}

/**
* Grant multiple members access to assets and/or update multiple member\'s exisiting permissions to an asset. Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE. 
* Assign/Update member asset permissions
*/
export function businessMembersAssetAccessUpdate<T>(requestParameters: BusinessMembersAssetAccessUpdateRequest, requestConfig?: runtime.TypedQueryConfig<T, UpdateMemberAssetsResultsResponseArray>): QueryConfig<T> {
    return businessMembersAssetAccessUpdateRaw(requestParameters, requestConfig);
}

/**
 * Can be used to get the business assets your partner has granted you access to or the business assets you have granted your partner access to. If you specify: - partner_type=INTERNAL, you will retrieve your business assets that the partner has access to. - partner_type=EXTERNAL, you will retrieve the partner\'s business assets that the partner has granted you access to.
 * Get assets assigned to a partner or assets assigned by a partner
 */
function businessPartnerAssetAccessGetRaw<T>(requestParameters: BusinessPartnerAssetAccessGetRequest, requestConfig: runtime.TypedQueryConfig<T, BusinessPartnerAssetAccessGet200Response> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling businessPartnerAssetAccessGet.');
    }

    if (requestParameters.partnerId === null || requestParameters.partnerId === undefined) {
        throw new runtime.RequiredError('partnerId','Required parameter requestParameters.partnerId was null or undefined when calling businessPartnerAssetAccessGet.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.partnerType !== undefined) {
        queryParameters['partner_type'] = requestParameters.partnerType;
    }


    if (requestParameters.assetType !== undefined) {
        queryParameters['asset_type'] = requestParameters.assetType;
    }


    if (requestParameters.startIndex !== undefined) {
        queryParameters['start_index'] = requestParameters.startIndex;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['page_size'] = requestParameters.pageSize;
    }


    if (requestParameters.bookmark !== undefined) {
        queryParameters['bookmark'] = requestParameters.bookmark;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["biz_access:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{business_id}/partners/{partner_id}/assets`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters.businessId))).replace(`{${"partner_id"}}`, encodeURIComponent(String(requestParameters.partnerId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(BusinessPartnerAssetAccessGet200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* Can be used to get the business assets your partner has granted you access to or the business assets you have granted your partner access to. If you specify: - partner_type=INTERNAL, you will retrieve your business assets that the partner has access to. - partner_type=EXTERNAL, you will retrieve the partner\'s business assets that the partner has granted you access to.
* Get assets assigned to a partner or assets assigned by a partner
*/
export function businessPartnerAssetAccessGet<T>(requestParameters: BusinessPartnerAssetAccessGetRequest, requestConfig?: runtime.TypedQueryConfig<T, BusinessPartnerAssetAccessGet200Response>): QueryConfig<T> {
    return businessPartnerAssetAccessGetRaw(requestParameters, requestConfig);
}

/**
 * Terminate multiple partners\' access to an asset. If - partner_type=INTERNAL: You will terminate a partner\'s asset access to your business assets. - partner_type=EXTERNAL: You will terminate your own access to your partner\'s business assets.
 * Delete partner access to asset
 */
function deletePartnerAssetAccessHandlerImplRaw<T>(requestParameters: DeletePartnerAssetAccessHandlerImplRequest, requestConfig: runtime.TypedQueryConfig<T, DeletePartnerAssetsResultsResponseArray> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling deletePartnerAssetAccessHandlerImpl.');
    }

    if (requestParameters.deletePartnerAssetAccessBody === null || requestParameters.deletePartnerAssetAccessBody === undefined) {
        throw new runtime.RequiredError('deletePartnerAssetAccessBody','Required parameter requestParameters.deletePartnerAssetAccessBody was null or undefined when calling deletePartnerAssetAccessHandlerImpl.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["biz_access:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{business_id}/partners/assets`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters || DeletePartnerAssetAccessBodyToJSON(requestParameters.deletePartnerAssetAccessBody),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(DeletePartnerAssetsResultsResponseArrayFromJSON(body), text);
    }

    return config;
}

/**
* Terminate multiple partners\' access to an asset. If - partner_type=INTERNAL: You will terminate a partner\'s asset access to your business assets. - partner_type=EXTERNAL: You will terminate your own access to your partner\'s business assets.
* Delete partner access to asset
*/
export function deletePartnerAssetAccessHandlerImpl<T>(requestParameters: DeletePartnerAssetAccessHandlerImplRequest, requestConfig?: runtime.TypedQueryConfig<T, DeletePartnerAssetsResultsResponseArray>): QueryConfig<T> {
    return deletePartnerAssetAccessHandlerImplRaw(requestParameters, requestConfig);
}

/**
 * Grant multiple partners access to assets and/or update multiple partner\'s exisiting permissions to an asset. If your partner already had permissions on the asset, they will be overriden with the new permissions you assign to them. To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview  Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE.
 * Assign/Update partner asset permissions
 */
function updatePartnerAssetAccessHandlerImplRaw<T>(requestParameters: UpdatePartnerAssetAccessHandlerImplRequest, requestConfig: runtime.TypedQueryConfig<T, UpdatePartnerAssetsResultsResponseArray> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling updatePartnerAssetAccessHandlerImpl.');
    }

    if (requestParameters.updatePartnerAssetAccessBody === null || requestParameters.updatePartnerAssetAccessBody === undefined) {
        throw new runtime.RequiredError('updatePartnerAssetAccessBody','Required parameter requestParameters.updatePartnerAssetAccessBody was null or undefined when calling updatePartnerAssetAccessHandlerImpl.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["biz_access:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{business_id}/partners/assets`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PATCH',
            headers: headerParameters,
        },
        body: queryParameters || UpdatePartnerAssetAccessBodyToJSON(requestParameters.updatePartnerAssetAccessBody),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UpdatePartnerAssetsResultsResponseArrayFromJSON(body), text);
    }

    return config;
}

/**
* Grant multiple partners access to assets and/or update multiple partner\'s exisiting permissions to an asset. If your partner already had permissions on the asset, they will be overriden with the new permissions you assign to them. To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview  Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE.
* Assign/Update partner asset permissions
*/
export function updatePartnerAssetAccessHandlerImpl<T>(requestParameters: UpdatePartnerAssetAccessHandlerImplRequest, requestConfig?: runtime.TypedQueryConfig<T, UpdatePartnerAssetsResultsResponseArray>): QueryConfig<T> {
    return updatePartnerAssetAccessHandlerImplRaw(requestParameters, requestConfig);
}


/**
    * @export
    * @enum {string}
    */
export enum BusinessAssetsGetAssetTypeEnum {
    AdAccount = 'AD_ACCOUNT',
    Profile = 'PROFILE',
    AssetGroup = 'ASSET_GROUP'
}
/**
    * @export
    * @enum {string}
    */
export enum BusinessMemberAssetsGetAssetTypeEnum {
    AdAccount = 'AD_ACCOUNT',
    Profile = 'PROFILE',
    AssetGroup = 'ASSET_GROUP'
}
/**
    * @export
    * @enum {string}
    */
export enum BusinessPartnerAssetAccessGetAssetTypeEnum {
    AdAccount = 'AD_ACCOUNT',
    Profile = 'PROFILE',
    AssetGroup = 'ASSET_GROUP'
}
