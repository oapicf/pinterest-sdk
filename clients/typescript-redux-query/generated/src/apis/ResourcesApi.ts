// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    AdAccountsCountryResponse,
    AdAccountsCountryResponseFromJSON,
    AdAccountsCountryResponseToJSON,
    BookClosedResponse,
    BookClosedResponseFromJSON,
    BookClosedResponseToJSON,
    DeliveryMetricsResponse,
    DeliveryMetricsResponseFromJSON,
    DeliveryMetricsResponseToJSON,
    SingleInterestTargetingOptionResponse,
    SingleInterestTargetingOptionResponseFromJSON,
    SingleInterestTargetingOptionResponseToJSON,
} from '../models';

export interface DeliveryMetricsGetRequest {
    reportType?: DeliveryMetricsGetReportTypeEnum;
}

export interface InterestTargetingOptionsGetRequest {
    interestId: string;
}

export interface MetricsReadyStateGetRequest {
    date: string;
}

export interface TargetingOptionsGetRequest {
    targetingType: TargetingOptionsGetTargetingTypeEnum;
    clientId?: string;
    oauthSignature?: string;
    timestamp?: string;
    adAccountId?: string;
}


/**
 * Get Ad Accounts countries
 * Get ad accounts countries
 */
function adAccountCountriesGetRaw<T>( requestConfig: runtime.TypedQueryConfig<T, AdAccountsCountryResponse> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/resources/ad_account_countries`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AdAccountsCountryResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get Ad Accounts countries
* Get ad accounts countries
*/
export function adAccountCountriesGet<T>( requestConfig?: runtime.TypedQueryConfig<T, AdAccountsCountryResponse>): QueryConfig<T> {
    return adAccountCountriesGetRaw( requestConfig);
}

/**
 * Get the definitions for ads and organic metrics available across both synchronous and asynchronous report endpoints. The `display_name` attribute will match how the metric is named in our native tools like Ads Manager. See <a href=\'/docs/api-features/analytics-overview/\'>Organic Analytics</a> and <a href=\'/docs/api-features/ads-reporting/\'>Ads Analytics</a> for more information.
 * Get available metrics\' definitions
 */
function deliveryMetricsGetRaw<T>(requestParameters: DeliveryMetricsGetRequest, requestConfig: runtime.TypedQueryConfig<T, DeliveryMetricsResponse> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.reportType !== undefined) {
        queryParameters['report_type'] = requestParameters.reportType;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:read", "pins:read", "user_accounts:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/resources/delivery_metrics`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(DeliveryMetricsResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get the definitions for ads and organic metrics available across both synchronous and asynchronous report endpoints. The `display_name` attribute will match how the metric is named in our native tools like Ads Manager. See <a href=\'/docs/api-features/analytics-overview/\'>Organic Analytics</a> and <a href=\'/docs/api-features/ads-reporting/\'>Ads Analytics</a> for more information.
* Get available metrics\' definitions
*/
export function deliveryMetricsGet<T>(requestParameters: DeliveryMetricsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, DeliveryMetricsResponse>): QueryConfig<T> {
    return deliveryMetricsGetRaw(requestParameters, requestConfig);
}

/**
 * <p>Get details of a specific interest given interest ID.</p> <p>Click <a href=\"https://docs.google.com/spreadsheets/d/1HxL-0Z3p2fgxis9YBP2HWC3tvPrs1hAuHDRtH-NJTIM/edit#gid=118370875\" target=\"_blank\">here</a> for a spreadsheet listing interests and their IDs.</p>
 * Get interest details
 */
function interestTargetingOptionsGetRaw<T>(requestParameters: InterestTargetingOptionsGetRequest, requestConfig: runtime.TypedQueryConfig<T, SingleInterestTargetingOptionResponse> = {}): QueryConfig<T> {
    if (requestParameters.interestId === null || requestParameters.interestId === undefined) {
        throw new runtime.RequiredError('interestId','Required parameter requestParameters.interestId was null or undefined when calling interestTargetingOptionsGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/resources/targeting/interests/{interest_id}`.replace(`{${"interest_id"}}`, encodeURIComponent(String(requestParameters.interestId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SingleInterestTargetingOptionResponseFromJSON(body), text);
    }

    return config;
}

/**
* <p>Get details of a specific interest given interest ID.</p> <p>Click <a href=\"https://docs.google.com/spreadsheets/d/1HxL-0Z3p2fgxis9YBP2HWC3tvPrs1hAuHDRtH-NJTIM/edit#gid=118370875\" target=\"_blank\">here</a> for a spreadsheet listing interests and their IDs.</p>
* Get interest details
*/
export function interestTargetingOptionsGet<T>(requestParameters: InterestTargetingOptionsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, SingleInterestTargetingOptionResponse>): QueryConfig<T> {
    return interestTargetingOptionsGetRaw(requestParameters, requestConfig);
}

/**
 * Get a list of all lead form question type names. Some questions might not be used.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.</strong>
 * Get lead form questions
 */
function leadFormQuestionsGetRaw<T>( requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/resources/lead_form_questions`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Get a list of all lead form question type names. Some questions might not be used.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.</strong>
* Get lead form questions
*/
export function leadFormQuestionsGet<T>( requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return leadFormQuestionsGetRaw( requestConfig);
}

/**
 * Learn whether conversion or non-conversion metrics are finalized and ready to query.
 * Get metrics ready state
 */
function metricsReadyStateGetRaw<T>(requestParameters: MetricsReadyStateGetRequest, requestConfig: runtime.TypedQueryConfig<T, BookClosedResponse> = {}): QueryConfig<T> {
    if (requestParameters.date === null || requestParameters.date === undefined) {
        throw new runtime.RequiredError('date','Required parameter requestParameters.date was null or undefined when calling metricsReadyStateGet.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.date !== undefined) {
        queryParameters['date'] = requestParameters.date;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/resources/metrics_ready_state`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(BookClosedResponseFromJSON(body), text);
    }

    return config;
}

/**
* Learn whether conversion or non-conversion metrics are finalized and ready to query.
* Get metrics ready state
*/
export function metricsReadyStateGet<T>(requestParameters: MetricsReadyStateGetRequest, requestConfig?: runtime.TypedQueryConfig<T, BookClosedResponse>): QueryConfig<T> {
    return metricsReadyStateGetRaw(requestParameters, requestConfig);
}

/**
 * <p>You can use targeting values in ads placement to define your intended audience. </p> <p>Targeting metrics are organized around targeting specifications.</p> <p>For more information on ads targeting, see <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/audience-targeting\" target=\"_blank\">Audience targeting</a>.</p> <p><b>Sample return:</b></p> <pre class=\"literal-block\"> [{&quot;36313&quot;: &quot;Australia: Moreton Bay - North&quot;, &quot;124735&quot;: &quot;Canada: North Battleford&quot;, &quot;36109&quot;: &quot;Australia: Murray&quot;, &quot;36108&quot;: &quot;Australia: Mid North Coast&quot;, &quot;36101&quot;: &quot;Australia: Capital Region&quot;, &quot;811&quot;: &quot;U.S.: Reno&quot;, &quot;36103&quot;: &quot;Australia: Central West&quot;, &quot;36102&quot;: &quot;Australia: Central Coast&quot;, &quot;36105&quot;: &quot;Australia: Far West and Orana&quot;, &quot;36104&quot;: &quot;Australia: Coffs Harbour - Grafton&quot;, &quot;36107&quot;: &quot;Australia: Illawarra&quot;, &quot;36106&quot;: &quot;Australia: Hunter Valley Exc Newcastle&quot;, &quot;554017&quot;: &quot;New Zealand: Wanganui&quot;, &quot;554016&quot;: &quot;New Zealand: Marlborough&quot;, &quot;554015&quot;: &quot;New Zealand: Gisborne&quot;, &quot;554014&quot;: &quot;New Zealand: Tararua&quot;, &quot;554013&quot;: &quot;New Zealand: Invercargill&quot;, &quot;GR&quot;: &quot;Greece&quot;, &quot;554011&quot;: &quot;New Zealand: Whangarei&quot;, &quot;554010&quot;: &quot;New Zealand: Far North&quot;, &quot;717&quot;: &quot;U.S.: Quincy-Hannibal-Keokuk&quot;, &quot;716&quot;: &quot;U.S.: Baton Rouge&quot;,...}] </pre>
 * Get targeting options
 */
function targetingOptionsGetRaw<T>(requestParameters: TargetingOptionsGetRequest, requestConfig: runtime.TypedQueryConfig<T, Array<object>> = {}): QueryConfig<T> {
    if (requestParameters.targetingType === null || requestParameters.targetingType === undefined) {
        throw new runtime.RequiredError('targetingType','Required parameter requestParameters.targetingType was null or undefined when calling targetingOptionsGet.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.clientId !== undefined) {
        queryParameters['client_id'] = requestParameters.clientId;
    }


    if (requestParameters.oauthSignature !== undefined) {
        queryParameters['oauth_signature'] = requestParameters.oauthSignature;
    }


    if (requestParameters.timestamp !== undefined) {
        queryParameters['timestamp'] = requestParameters.timestamp;
    }


    if (requestParameters.adAccountId !== undefined) {
        queryParameters['ad_account_id'] = requestParameters.adAccountId;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/resources/targeting/{targeting_type}`.replace(`{${"targeting_type"}}`, encodeURIComponent(String(requestParameters.targetingType))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* <p>You can use targeting values in ads placement to define your intended audience. </p> <p>Targeting metrics are organized around targeting specifications.</p> <p>For more information on ads targeting, see <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/audience-targeting\" target=\"_blank\">Audience targeting</a>.</p> <p><b>Sample return:</b></p> <pre class=\"literal-block\"> [{&quot;36313&quot;: &quot;Australia: Moreton Bay - North&quot;, &quot;124735&quot;: &quot;Canada: North Battleford&quot;, &quot;36109&quot;: &quot;Australia: Murray&quot;, &quot;36108&quot;: &quot;Australia: Mid North Coast&quot;, &quot;36101&quot;: &quot;Australia: Capital Region&quot;, &quot;811&quot;: &quot;U.S.: Reno&quot;, &quot;36103&quot;: &quot;Australia: Central West&quot;, &quot;36102&quot;: &quot;Australia: Central Coast&quot;, &quot;36105&quot;: &quot;Australia: Far West and Orana&quot;, &quot;36104&quot;: &quot;Australia: Coffs Harbour - Grafton&quot;, &quot;36107&quot;: &quot;Australia: Illawarra&quot;, &quot;36106&quot;: &quot;Australia: Hunter Valley Exc Newcastle&quot;, &quot;554017&quot;: &quot;New Zealand: Wanganui&quot;, &quot;554016&quot;: &quot;New Zealand: Marlborough&quot;, &quot;554015&quot;: &quot;New Zealand: Gisborne&quot;, &quot;554014&quot;: &quot;New Zealand: Tararua&quot;, &quot;554013&quot;: &quot;New Zealand: Invercargill&quot;, &quot;GR&quot;: &quot;Greece&quot;, &quot;554011&quot;: &quot;New Zealand: Whangarei&quot;, &quot;554010&quot;: &quot;New Zealand: Far North&quot;, &quot;717&quot;: &quot;U.S.: Quincy-Hannibal-Keokuk&quot;, &quot;716&quot;: &quot;U.S.: Baton Rouge&quot;,...}] </pre>
* Get targeting options
*/
export function targetingOptionsGet<T>(requestParameters: TargetingOptionsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<object>>): QueryConfig<T> {
    return targetingOptionsGetRaw(requestParameters, requestConfig);
}


/**
    * @export
    * @enum {string}
    */
export enum DeliveryMetricsGetReportTypeEnum {
    Sync = 'SYNC',
    Async = 'ASYNC'
}
/**
    * @export
    * @enum {string}
    */
export enum TargetingOptionsGetTargetingTypeEnum {
    Apptype = 'APPTYPE',
    Gender = 'GENDER',
    Locale = 'LOCALE',
    AgeBucket = 'AGE_BUCKET',
    Location = 'LOCATION',
    Geo = 'GEO',
    Interest = 'INTEREST',
    Keyword = 'KEYWORD',
    AudienceInclude = 'AUDIENCE_INCLUDE',
    AudienceExclude = 'AUDIENCE_EXCLUDE'
}
