// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    AdvancedAuctionItems,
    AdvancedAuctionItemsFromJSON,
    AdvancedAuctionItemsToJSON,
    AdvancedAuctionItemsGetRequest,
    AdvancedAuctionItemsGetRequestFromJSON,
    AdvancedAuctionItemsGetRequestToJSON,
    AdvancedAuctionItemsSubmitRequest,
    AdvancedAuctionItemsSubmitRequestFromJSON,
    AdvancedAuctionItemsSubmitRequestToJSON,
    AdvancedAuctionProcessedItems,
    AdvancedAuctionProcessedItemsFromJSON,
    AdvancedAuctionProcessedItemsToJSON,
} from '../models';

export interface AdvancedAuctionItemsGetPostRequest {
    advancedAuctionItemsGetRequest: AdvancedAuctionItemsGetRequest;
    adAccountId?: string;
}

export interface AdvancedAuctionItemsSubmitPostRequest {
    advancedAuctionItemsSubmitRequest: AdvancedAuctionItemsSubmitRequest;
    adAccountId?: string;
}


/**
 * Get the bid options for a batch of retail catalog items.  The catalog must be owned by the \"operation user_account\". <a href=\"/docs/api-features/shopping-overview/#Update%20items%20in%20batch\" target=\"_blank\">See detailed documentation here.</a> By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: `Owner`, `Admin`.  This endpoint is not available to all users.
 * Get item bid options (POST)
 */
function advancedAuctionItemsGetPostRaw<T>(requestParameters: AdvancedAuctionItemsGetPostRequest, requestConfig: runtime.TypedQueryConfig<T, AdvancedAuctionItems> = {}): QueryConfig<T> {
    if (requestParameters.advancedAuctionItemsGetRequest === null || requestParameters.advancedAuctionItemsGetRequest === undefined) {
        throw new runtime.RequiredError('advancedAuctionItemsGetRequest','Required parameter requestParameters.advancedAuctionItemsGetRequest was null or undefined when calling advancedAuctionItemsGetPost.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.adAccountId !== undefined) {
        queryParameters['ad_account_id'] = requestParameters.adAccountId;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:read", "catalogs:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/advanced_auction/items/get`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || AdvancedAuctionItemsGetRequestToJSON(requestParameters.advancedAuctionItemsGetRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AdvancedAuctionItemsFromJSON(body), text);
    }

    return config;
}

/**
* Get the bid options for a batch of retail catalog items.  The catalog must be owned by the \"operation user_account\". <a href=\"/docs/api-features/shopping-overview/#Update%20items%20in%20batch\" target=\"_blank\">See detailed documentation here.</a> By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: `Owner`, `Admin`.  This endpoint is not available to all users.
* Get item bid options (POST)
*/
export function advancedAuctionItemsGetPost<T>(requestParameters: AdvancedAuctionItemsGetPostRequest, requestConfig?: runtime.TypedQueryConfig<T, AdvancedAuctionItems>): QueryConfig<T> {
    return advancedAuctionItemsGetPostRaw(requestParameters, requestConfig);
}

/**
 * This endpoint supports multiple operations on a set of one or more bid options (bid price and bid adjustments for targeting categories) for retail catalog items. These advanced auction settings are applied in campaigns using objective_type `CATALOG_SALES` and ad groups using bid_strategy_type `MAX_BID`.  The catalog must be owned by the \"operation user_account\". <a href=\"/docs/api-features/modify-items-in-batch/\" target=\"_blank\">See detailed documentation here.</a> By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: `Owner`, `Admin`.  This endpoint is not available to all users.
 * Operate on item level bid options
 */
function advancedAuctionItemsSubmitPostRaw<T>(requestParameters: AdvancedAuctionItemsSubmitPostRequest, requestConfig: runtime.TypedQueryConfig<T, AdvancedAuctionProcessedItems> = {}): QueryConfig<T> {
    if (requestParameters.advancedAuctionItemsSubmitRequest === null || requestParameters.advancedAuctionItemsSubmitRequest === undefined) {
        throw new runtime.RequiredError('advancedAuctionItemsSubmitRequest','Required parameter requestParameters.advancedAuctionItemsSubmitRequest was null or undefined when calling advancedAuctionItemsSubmitPost.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.adAccountId !== undefined) {
        queryParameters['ad_account_id'] = requestParameters.adAccountId;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:write", "catalogs:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/advanced_auction/items/submit`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || AdvancedAuctionItemsSubmitRequestToJSON(requestParameters.advancedAuctionItemsSubmitRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AdvancedAuctionProcessedItemsFromJSON(body), text);
    }

    return config;
}

/**
* This endpoint supports multiple operations on a set of one or more bid options (bid price and bid adjustments for targeting categories) for retail catalog items. These advanced auction settings are applied in campaigns using objective_type `CATALOG_SALES` and ad groups using bid_strategy_type `MAX_BID`.  The catalog must be owned by the \"operation user_account\". <a href=\"/docs/api-features/modify-items-in-batch/\" target=\"_blank\">See detailed documentation here.</a> By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: `Owner`, `Admin`.  This endpoint is not available to all users.
* Operate on item level bid options
*/
export function advancedAuctionItemsSubmitPost<T>(requestParameters: AdvancedAuctionItemsSubmitPostRequest, requestConfig?: runtime.TypedQueryConfig<T, AdvancedAuctionProcessedItems>): QueryConfig<T> {
    return advancedAuctionItemsSubmitPostRaw(requestParameters, requestConfig);
}

