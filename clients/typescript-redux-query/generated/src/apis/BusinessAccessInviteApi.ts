// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    AuthRespondInvitesBody,
    AuthRespondInvitesBodyFromJSON,
    AuthRespondInvitesBodyToJSON,
    CancelInvitesBody,
    CancelInvitesBodyFromJSON,
    CancelInvitesBodyToJSON,
    CreateAssetAccessRequestBody,
    CreateAssetAccessRequestBodyFromJSON,
    CreateAssetAccessRequestBodyToJSON,
    CreateAssetAccessRequestResponse,
    CreateAssetAccessRequestResponseFromJSON,
    CreateAssetAccessRequestResponseToJSON,
    CreateAssetInvitesRequest,
    CreateAssetInvitesRequestFromJSON,
    CreateAssetInvitesRequestToJSON,
    CreateInvitesResultsResponseArray,
    CreateInvitesResultsResponseArrayFromJSON,
    CreateInvitesResultsResponseArrayToJSON,
    CreateMembershipOrPartnershipInvitesBody,
    CreateMembershipOrPartnershipInvitesBodyFromJSON,
    CreateMembershipOrPartnershipInvitesBodyToJSON,
    DeleteInvitesResultsResponseArray,
    DeleteInvitesResultsResponseArrayFromJSON,
    DeleteInvitesResultsResponseArrayToJSON,
    GetInvites200Response,
    GetInvites200ResponseFromJSON,
    GetInvites200ResponseToJSON,
    InviteType,
    InviteTypeFromJSON,
    InviteTypeToJSON,
    RespondToInvitesResponseArray,
    RespondToInvitesResponseArrayFromJSON,
    RespondToInvitesResponseArrayToJSON,
    UpdateInvitesResultsResponseArray,
    UpdateInvitesResultsResponseArrayFromJSON,
    UpdateInvitesResultsResponseArrayToJSON,
} from '../models';

export interface AssetAccessRequestsCreateRequest {
    businessId: string;
    createAssetAccessRequestBody: CreateAssetAccessRequestBody;
}

export interface CancelInvitesOrRequestsRequest {
    businessId: string;
    cancelInvitesBody: CancelInvitesBody;
}

export interface CreateAssetInvitesRequest {
    businessId: string;
    createAssetInvitesRequest: CreateAssetInvitesRequest;
}

export interface CreateMembershipOrPartnershipInvitesRequest {
    businessId: string;
    createMembershipOrPartnershipInvitesBody: CreateMembershipOrPartnershipInvitesBody;
}

export interface GetInvitesRequest {
    businessId: string;
    isMember?: boolean;
    inviteStatus?: Array<GetInvitesInviteStatusEnum>;
    inviteType?: InviteType;
    bookmark?: string;
    pageSize?: number;
}

export interface RespondBusinessAccessInvitesRequest {
    authRespondInvitesBody: AuthRespondInvitesBody;
}


/**
 * Create a request to access an existing partner\'s assets with the specified permissions. The request will be sent to the partner for approval. The assets that can be requested are ad accounts and profiles.
 * Create a request to access an existing partner\'s assets.
 */
function assetAccessRequestsCreateRaw<T>(requestParameters: AssetAccessRequestsCreateRequest, requestConfig: runtime.TypedQueryConfig<T, CreateAssetAccessRequestResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling assetAccessRequestsCreate.');
    }

    if (requestParameters.createAssetAccessRequestBody === null || requestParameters.createAssetAccessRequestBody === undefined) {
        throw new runtime.RequiredError('createAssetAccessRequestBody','Required parameter requestParameters.createAssetAccessRequestBody was null or undefined when calling assetAccessRequestsCreate.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["biz_access:read", "biz_access:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{business_id}/requests/assets/access`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || CreateAssetAccessRequestBodyToJSON(requestParameters.createAssetAccessRequestBody),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CreateAssetAccessRequestResponseFromJSON(body), text);
    }

    return config;
}

/**
* Create a request to access an existing partner\'s assets with the specified permissions. The request will be sent to the partner for approval. The assets that can be requested are ad accounts and profiles.
* Create a request to access an existing partner\'s assets.
*/
export function assetAccessRequestsCreate<T>(requestParameters: AssetAccessRequestsCreateRequest, requestConfig?: runtime.TypedQueryConfig<T, CreateAssetAccessRequestResponse>): QueryConfig<T> {
    return assetAccessRequestsCreateRaw(requestParameters, requestConfig);
}

/**
 * Cancel membership/partnership invites and/or requests.
 * Cancel invites/requests
 */
function cancelInvitesOrRequestsRaw<T>(requestParameters: CancelInvitesOrRequestsRequest, requestConfig: runtime.TypedQueryConfig<T, DeleteInvitesResultsResponseArray> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling cancelInvitesOrRequests.');
    }

    if (requestParameters.cancelInvitesBody === null || requestParameters.cancelInvitesBody === undefined) {
        throw new runtime.RequiredError('cancelInvitesBody','Required parameter requestParameters.cancelInvitesBody was null or undefined when calling cancelInvitesOrRequests.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["biz_access:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{business_id}/invites`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters || CancelInvitesBodyToJSON(requestParameters.cancelInvitesBody),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(DeleteInvitesResultsResponseArrayFromJSON(body), text);
    }

    return config;
}

/**
* Cancel membership/partnership invites and/or requests.
* Cancel invites/requests
*/
export function cancelInvitesOrRequests<T>(requestParameters: CancelInvitesOrRequestsRequest, requestConfig?: runtime.TypedQueryConfig<T, DeleteInvitesResultsResponseArray>): QueryConfig<T> {
    return cancelInvitesOrRequestsRaw(requestParameters, requestConfig);
}

/**
 * Assign asset permissions information to an existing invite/request. Can be used to: - Request access to a partner\'s asset. Note: This is only for when no existing partnership exists. If an existing   partnership exists, use \"Create a request to access an existing partner\'s assets\" to request access to your   partner\'s assets.     - invite_type=\"PARTNER_REQUEST\" - Invite a partner to access your business assets. Note: This is only for when there is no existing partnership.   If there is an existing partnership, use \"Assign/Update partner asset permissions\" to assign a partner access to   new assets.     - invite_type=\"PARTNER_INVITE\" - Invite a member to access your business assets. Note: This is only for when there is no existing membership.   If there is an existing membership, use \"Assign/Update member asset permissions\" to assign a member access to new   assets.     - invite_type=\"MEMBER_INVITE\"  To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview.
 * Update invite/request with an asset permission
 */
function createAssetInvitesRaw<T>(requestParameters: CreateAssetInvitesRequest, requestConfig: runtime.TypedQueryConfig<T, UpdateInvitesResultsResponseArray> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling createAssetInvites.');
    }

    if (requestParameters.createAssetInvitesRequest === null || requestParameters.createAssetInvitesRequest === undefined) {
        throw new runtime.RequiredError('createAssetInvitesRequest','Required parameter requestParameters.createAssetInvitesRequest was null or undefined when calling createAssetInvites.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["biz_access:read", "biz_access:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{business_id}/invites/assets/access`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || CreateAssetInvitesRequestToJSON(requestParameters.createAssetInvitesRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UpdateInvitesResultsResponseArrayFromJSON(body), text);
    }

    return config;
}

/**
* Assign asset permissions information to an existing invite/request. Can be used to: - Request access to a partner\'s asset. Note: This is only for when no existing partnership exists. If an existing   partnership exists, use \"Create a request to access an existing partner\'s assets\" to request access to your   partner\'s assets.     - invite_type=\"PARTNER_REQUEST\" - Invite a partner to access your business assets. Note: This is only for when there is no existing partnership.   If there is an existing partnership, use \"Assign/Update partner asset permissions\" to assign a partner access to   new assets.     - invite_type=\"PARTNER_INVITE\" - Invite a member to access your business assets. Note: This is only for when there is no existing membership.   If there is an existing membership, use \"Assign/Update member asset permissions\" to assign a member access to new   assets.     - invite_type=\"MEMBER_INVITE\"  To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview.
* Update invite/request with an asset permission
*/
export function createAssetInvites<T>(requestParameters: CreateAssetInvitesRequest, requestConfig?: runtime.TypedQueryConfig<T, UpdateInvitesResultsResponseArray>): QueryConfig<T> {
    return createAssetInvitesRaw(requestParameters, requestConfig);
}

/**
 * Create batch invites or requests. Can create batch invites or requests as described below. - Invite members to join the business. This would required specifying the following:     - invite_type=\"MEMBER_INVITE\"     - business_role=\"EMPLOYEE\" OR business_role=\"BIZ_ADMIN\" (To learn more about business roles, visit     https://help.pinterest.com/en/business/article/profile-permissions-in-business-access.)     - members - Invite partners to access your business assets. This would require specifying the following:     - invite_type=\"PARTNER_INVITE\"     - business_role=\"PARTNER\"     - partners - Request to be a partner so you can access their assets. This would require specifying the following:     - invite_type=\"PARTNER_REQUEST\"     - business_role=\"PARTNER\"     - partners
 * Create invites or requests
 */
function createMembershipOrPartnershipInvitesRaw<T>(requestParameters: CreateMembershipOrPartnershipInvitesRequest, requestConfig: runtime.TypedQueryConfig<T, CreateInvitesResultsResponseArray> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling createMembershipOrPartnershipInvites.');
    }

    if (requestParameters.createMembershipOrPartnershipInvitesBody === null || requestParameters.createMembershipOrPartnershipInvitesBody === undefined) {
        throw new runtime.RequiredError('createMembershipOrPartnershipInvitesBody','Required parameter requestParameters.createMembershipOrPartnershipInvitesBody was null or undefined when calling createMembershipOrPartnershipInvites.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["biz_access:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{business_id}/invites`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || CreateMembershipOrPartnershipInvitesBodyToJSON(requestParameters.createMembershipOrPartnershipInvitesBody),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CreateInvitesResultsResponseArrayFromJSON(body), text);
    }

    return config;
}

/**
* Create batch invites or requests. Can create batch invites or requests as described below. - Invite members to join the business. This would required specifying the following:     - invite_type=\"MEMBER_INVITE\"     - business_role=\"EMPLOYEE\" OR business_role=\"BIZ_ADMIN\" (To learn more about business roles, visit     https://help.pinterest.com/en/business/article/profile-permissions-in-business-access.)     - members - Invite partners to access your business assets. This would require specifying the following:     - invite_type=\"PARTNER_INVITE\"     - business_role=\"PARTNER\"     - partners - Request to be a partner so you can access their assets. This would require specifying the following:     - invite_type=\"PARTNER_REQUEST\"     - business_role=\"PARTNER\"     - partners
* Create invites or requests
*/
export function createMembershipOrPartnershipInvites<T>(requestParameters: CreateMembershipOrPartnershipInvitesRequest, requestConfig?: runtime.TypedQueryConfig<T, CreateInvitesResultsResponseArray>): QueryConfig<T> {
    return createMembershipOrPartnershipInvitesRaw(requestParameters, requestConfig);
}

/**
 * Get the membership/partnership invites and/or requests for the authorized user.
 * Get invites/requests
 */
function getInvitesRaw<T>(requestParameters: GetInvitesRequest, requestConfig: runtime.TypedQueryConfig<T, GetInvites200Response> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling getInvites.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.isMember !== undefined) {
        queryParameters['is_member'] = requestParameters.isMember;
    }


    if (requestParameters.inviteStatus) {
        queryParameters['invite_status'] = requestParameters.inviteStatus;
    }


    if (requestParameters.inviteType !== undefined) {
        queryParameters['invite_type'] = requestParameters.inviteType;
    }


    if (requestParameters.bookmark !== undefined) {
        queryParameters['bookmark'] = requestParameters.bookmark;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['page_size'] = requestParameters.pageSize;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["biz_access:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{business_id}/invites`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetInvites200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get the membership/partnership invites and/or requests for the authorized user.
* Get invites/requests
*/
export function getInvites<T>(requestParameters: GetInvitesRequest, requestConfig?: runtime.TypedQueryConfig<T, GetInvites200Response>): QueryConfig<T> {
    return getInvitesRaw(requestParameters, requestConfig);
}

/**
 * Accept or decline invites or requests.
 * Accept or decline an invite/request
 */
function respondBusinessAccessInvitesRaw<T>(requestParameters: RespondBusinessAccessInvitesRequest, requestConfig: runtime.TypedQueryConfig<T, RespondToInvitesResponseArray> = {}): QueryConfig<T> {
    if (requestParameters.authRespondInvitesBody === null || requestParameters.authRespondInvitesBody === undefined) {
        throw new runtime.RequiredError('authRespondInvitesBody','Required parameter requestParameters.authRespondInvitesBody was null or undefined when calling respondBusinessAccessInvites.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["biz_access:read", "biz_access:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/invites`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PATCH',
            headers: headerParameters,
        },
        body: queryParameters || AuthRespondInvitesBodyToJSON(requestParameters.authRespondInvitesBody),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(RespondToInvitesResponseArrayFromJSON(body), text);
    }

    return config;
}

/**
* Accept or decline invites or requests.
* Accept or decline an invite/request
*/
export function respondBusinessAccessInvites<T>(requestParameters: RespondBusinessAccessInvitesRequest, requestConfig?: runtime.TypedQueryConfig<T, RespondToInvitesResponseArray>): QueryConfig<T> {
    return respondBusinessAccessInvitesRaw(requestParameters, requestConfig);
}


/**
    * @export
    * @enum {string}
    */
export enum GetInvitesInviteStatusEnum {
    Pending = 'PENDING',
    Expired = 'EXPIRED'
}
