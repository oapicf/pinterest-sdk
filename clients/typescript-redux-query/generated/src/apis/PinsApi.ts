// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    Pin,
    PinFromJSON,
    PinToJSON,
    PinAnalyticsMetricsResponse,
    PinAnalyticsMetricsResponseFromJSON,
    PinAnalyticsMetricsResponseToJSON,
    PinCreate,
    PinCreateFromJSON,
    PinCreateToJSON,
    PinUpdate,
    PinUpdateFromJSON,
    PinUpdateToJSON,
    PinsAnalyticsMetricTypesParameterInner,
    PinsAnalyticsMetricTypesParameterInnerFromJSON,
    PinsAnalyticsMetricTypesParameterInnerToJSON,
    PinsList200Response,
    PinsList200ResponseFromJSON,
    PinsList200ResponseToJSON,
    PinsSaveRequest,
    PinsSaveRequestFromJSON,
    PinsSaveRequestToJSON,
} from '../models';

export interface MultiPinsAnalyticsRequest {
    pinIds: Array<string>;
    startDate: Date;
    endDate: Date;
    metricTypes: Array<PinsAnalyticsMetricTypesParameterInner>;
    appTypes?: MultiPinsAnalyticsAppTypesEnum;
    adAccountId?: string;
}

export interface PinsAnalyticsRequest {
    pinId: string;
    startDate: Date;
    endDate: Date;
    metricTypes: Array<PinsAnalyticsMetricTypesParameterInner>;
    appTypes?: PinsAnalyticsAppTypesEnum;
    splitField?: PinsAnalyticsSplitFieldEnum;
    adAccountId?: string;
}

export interface PinsCreateRequest {
    pinCreate: PinCreate;
    adAccountId?: string;
}

export interface PinsDeleteRequest {
    pinId: string;
    adAccountId?: string;
}

export interface PinsGetRequest {
    pinId: string;
    pinMetrics?: boolean;
    adAccountId?: string;
}

export interface PinsListRequest {
    bookmark?: string;
    pageSize?: number;
    pinFilter?: PinsListPinFilterEnum;
    includeProtectedPins?: boolean;
    pinType?: PinsListPinTypeEnum;
    creativeTypes?: Array<PinsListCreativeTypesEnum>;
    adAccountId?: string;
    pinMetrics?: boolean;
}

export interface PinsSaveRequest {
    pinId: string;
    pinsSaveRequest: PinsSaveRequest;
    adAccountId?: string;
}

export interface PinsUpdateRequest {
    pinId: string;
    pinUpdate: PinUpdate;
    adAccountId?: string;
}


/**
 * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.</strong>  Get analytics for multiple pins owned by the \"operation user_account\" - or on a group board that has been shared with this account. - The maximum number of pins supported in a single request is 100. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\"/docs/api/v5/#operation/ad_accounts/list\">List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Admin, Analyst. - For Pins on secret boards: Admin.  If Pin was created before <code>2023-03-20</code> lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then.
 * Get multiple Pin analytics
 */
function multiPinsAnalyticsRaw<T>(requestParameters: MultiPinsAnalyticsRequest, requestConfig: runtime.TypedQueryConfig<T, { [key: string]: { [key: string]: PinAnalyticsMetricsResponse; }; }> = {}): QueryConfig<T> {
    if (requestParameters.pinIds === null || requestParameters.pinIds === undefined) {
        throw new runtime.RequiredError('pinIds','Required parameter requestParameters.pinIds was null or undefined when calling multiPinsAnalytics.');
    }

    if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
        throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling multiPinsAnalytics.');
    }

    if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
        throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling multiPinsAnalytics.');
    }

    if (requestParameters.metricTypes === null || requestParameters.metricTypes === undefined) {
        throw new runtime.RequiredError('metricTypes','Required parameter requestParameters.metricTypes was null or undefined when calling multiPinsAnalytics.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.pinIds) {
        queryParameters['pin_ids'] = requestParameters.pinIds;
    }


    if (requestParameters.startDate !== undefined) {
        queryParameters['start_date'] = (requestParameters.startDate as any).toISOString().substring(0,10);
    }


    if (requestParameters.endDate !== undefined) {
        queryParameters['end_date'] = (requestParameters.endDate as any).toISOString().substring(0,10);
    }


    if (requestParameters.appTypes !== undefined) {
        queryParameters['app_types'] = requestParameters.appTypes;
    }


    if (requestParameters.metricTypes) {
        queryParameters['metric_types'] = requestParameters.metricTypes?.join(runtime.COLLECTION_FORMATS["csv"]);
    }


    if (requestParameters.adAccountId !== undefined) {
        queryParameters['ad_account_id'] = requestParameters.adAccountId;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["boards:read", "pins:read"]];
    meta.authType = ['oauth', ["boards:read", "pins:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/pins/analytics`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.</strong>  Get analytics for multiple pins owned by the \"operation user_account\" - or on a group board that has been shared with this account. - The maximum number of pins supported in a single request is 100. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\"/docs/api/v5/#operation/ad_accounts/list\">List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Admin, Analyst. - For Pins on secret boards: Admin.  If Pin was created before <code>2023-03-20</code> lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then.
* Get multiple Pin analytics
*/
export function multiPinsAnalytics<T>(requestParameters: MultiPinsAnalyticsRequest, requestConfig?: runtime.TypedQueryConfig<T, { [key: string]: { [key: string]: PinAnalyticsMetricsResponse; }; }>): QueryConfig<T> {
    return multiPinsAnalyticsRaw(requestParameters, requestConfig);
}

/**
 * Get analytics for a Pin owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\"/docs/api/v5/#operation/ad_accounts/list\">List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Admin, Analyst. - For Pins on secret boards: Admin.  If Pin was created before <code>2023-03-20</code> lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then.
 * Get Pin analytics
 */
function pinsAnalyticsRaw<T>(requestParameters: PinsAnalyticsRequest, requestConfig: runtime.TypedQueryConfig<T, { [key: string]: PinAnalyticsMetricsResponse; }> = {}): QueryConfig<T> {
    if (requestParameters.pinId === null || requestParameters.pinId === undefined) {
        throw new runtime.RequiredError('pinId','Required parameter requestParameters.pinId was null or undefined when calling pinsAnalytics.');
    }

    if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
        throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling pinsAnalytics.');
    }

    if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
        throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling pinsAnalytics.');
    }

    if (requestParameters.metricTypes === null || requestParameters.metricTypes === undefined) {
        throw new runtime.RequiredError('metricTypes','Required parameter requestParameters.metricTypes was null or undefined when calling pinsAnalytics.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.startDate !== undefined) {
        queryParameters['start_date'] = (requestParameters.startDate as any).toISOString().substring(0,10);
    }


    if (requestParameters.endDate !== undefined) {
        queryParameters['end_date'] = (requestParameters.endDate as any).toISOString().substring(0,10);
    }


    if (requestParameters.appTypes !== undefined) {
        queryParameters['app_types'] = requestParameters.appTypes;
    }


    if (requestParameters.metricTypes) {
        queryParameters['metric_types'] = requestParameters.metricTypes?.join(runtime.COLLECTION_FORMATS["csv"]);
    }


    if (requestParameters.splitField !== undefined) {
        queryParameters['split_field'] = requestParameters.splitField;
    }


    if (requestParameters.adAccountId !== undefined) {
        queryParameters['ad_account_id'] = requestParameters.adAccountId;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["boards:read", "pins:read"]];
    meta.authType = ['oauth', ["boards:read", "pins:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/pins/{pin_id}/analytics`.replace(`{${"pin_id"}}`, encodeURIComponent(String(requestParameters.pinId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PinAnalyticsMetricsResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get analytics for a Pin owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\"/docs/api/v5/#operation/ad_accounts/list\">List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Admin, Analyst. - For Pins on secret boards: Admin.  If Pin was created before <code>2023-03-20</code> lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then.
* Get Pin analytics
*/
export function pinsAnalytics<T>(requestParameters: PinsAnalyticsRequest, requestConfig?: runtime.TypedQueryConfig<T, { [key: string]: PinAnalyticsMetricsResponse; }>): QueryConfig<T> {
    return pinsAnalyticsRaw(requestParameters, requestConfig);
}

/**
 * Create a Pin on a board or board section owned by the \"operation user_account\".  Note: If the current \"operation user_account\" (defined by the access token) has access to another user\'s Ad Accounts via Pinterest Business Access, you can modify your request to make use of the current operation_user_account\'s permissions to those Ad Accounts by including the ad_account_id in the path parameters for the request (e.g. .../?ad_account_id=12345&...).  - This function is intended solely for publishing new content created by the user. If you are interested in saving content created by others to your Pinterest boards, sometimes called \'curated content\', please use our <a href=\'/docs/web-features/add-ons-overview/\'>Save button</a> instead. For more tips on creating fresh content for Pinterest, review our <a href=\'/docs/api-features/content-overview/\'>Content App Solutions Guide</a>.  <strong><a href=\'/docs/api-features/creating-boards-and-pins/#creating-video-pins\'>Learn more</a></strong> about video Pin creation.
 * Create Pin
 */
function pinsCreateRaw<T>(requestParameters: PinsCreateRequest, requestConfig: runtime.TypedQueryConfig<T, Pin> = {}): QueryConfig<T> {
    if (requestParameters.pinCreate === null || requestParameters.pinCreate === undefined) {
        throw new runtime.RequiredError('pinCreate','Required parameter requestParameters.pinCreate was null or undefined when calling pinsCreate.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.adAccountId !== undefined) {
        queryParameters['ad_account_id'] = requestParameters.adAccountId;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["boards:read", "boards:write", "pins:read", "pins:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/pins`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || PinCreateToJSON(requestParameters.pinCreate),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PinFromJSON(body), text);
    }

    return config;
}

/**
* Create a Pin on a board or board section owned by the \"operation user_account\".  Note: If the current \"operation user_account\" (defined by the access token) has access to another user\'s Ad Accounts via Pinterest Business Access, you can modify your request to make use of the current operation_user_account\'s permissions to those Ad Accounts by including the ad_account_id in the path parameters for the request (e.g. .../?ad_account_id=12345&...).  - This function is intended solely for publishing new content created by the user. If you are interested in saving content created by others to your Pinterest boards, sometimes called \'curated content\', please use our <a href=\'/docs/web-features/add-ons-overview/\'>Save button</a> instead. For more tips on creating fresh content for Pinterest, review our <a href=\'/docs/api-features/content-overview/\'>Content App Solutions Guide</a>.  <strong><a href=\'/docs/api-features/creating-boards-and-pins/#creating-video-pins\'>Learn more</a></strong> about video Pin creation.
* Create Pin
*/
export function pinsCreate<T>(requestParameters: PinsCreateRequest, requestConfig?: runtime.TypedQueryConfig<T, Pin>): QueryConfig<T> {
    return pinsCreateRaw(requestParameters, requestConfig);
}

/**
 * Delete a Pins owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.
 * Delete Pin
 */
function pinsDeleteRaw<T>(requestParameters: PinsDeleteRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.pinId === null || requestParameters.pinId === undefined) {
        throw new runtime.RequiredError('pinId','Required parameter requestParameters.pinId was null or undefined when calling pinsDelete.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.adAccountId !== undefined) {
        queryParameters['ad_account_id'] = requestParameters.adAccountId;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["boards:read", "boards:write", "pins:read", "pins:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/pins/{pin_id}`.replace(`{${"pin_id"}}`, encodeURIComponent(String(requestParameters.pinId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Delete a Pins owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.
* Delete Pin
*/
export function pinsDelete<T>(requestParameters: PinsDeleteRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return pinsDeleteRaw(requestParameters, requestConfig);
}

/**
 * Get a Pin owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.
 * Get Pin
 */
function pinsGetRaw<T>(requestParameters: PinsGetRequest, requestConfig: runtime.TypedQueryConfig<T, Pin> = {}): QueryConfig<T> {
    if (requestParameters.pinId === null || requestParameters.pinId === undefined) {
        throw new runtime.RequiredError('pinId','Required parameter requestParameters.pinId was null or undefined when calling pinsGet.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.pinMetrics !== undefined) {
        queryParameters['pin_metrics'] = requestParameters.pinMetrics;
    }


    if (requestParameters.adAccountId !== undefined) {
        queryParameters['ad_account_id'] = requestParameters.adAccountId;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["boards:read", "pins:read"]];
    meta.authType = ['oauth', ["boards:read", "pins:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/pins/{pin_id}`.replace(`{${"pin_id"}}`, encodeURIComponent(String(requestParameters.pinId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PinFromJSON(body), text);
    }

    return config;
}

/**
* Get a Pin owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.
* Get Pin
*/
export function pinsGet<T>(requestParameters: PinsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, Pin>): QueryConfig<T> {
    return pinsGetRaw(requestParameters, requestConfig);
}

/**
 * Get a list of the Pins owned by the \"operation user_account\".   - By default, the \"operation user_account\" is the token user_account.   - All Pins owned by the \"operation user_account\" are included, regardless of who owns the board they are on. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".  Disclaimer: there are known performance issues when filtering by field <code>creative_type</code> and including protected pins. If your request is timing out in this scenario we encourage you to use <a href=\'/docs/api/v5/#operation/boards/list_pins\'>GET List Pins on Board</a>.
 * List Pins
 */
function pinsListRaw<T>(requestParameters: PinsListRequest, requestConfig: runtime.TypedQueryConfig<T, PinsList200Response> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.bookmark !== undefined) {
        queryParameters['bookmark'] = requestParameters.bookmark;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['page_size'] = requestParameters.pageSize;
    }


    if (requestParameters.pinFilter !== undefined) {
        queryParameters['pin_filter'] = requestParameters.pinFilter;
    }


    if (requestParameters.includeProtectedPins !== undefined) {
        queryParameters['include_protected_pins'] = requestParameters.includeProtectedPins;
    }


    if (requestParameters.pinType !== undefined) {
        queryParameters['pin_type'] = requestParameters.pinType;
    }


    if (requestParameters.creativeTypes) {
        queryParameters['creative_types'] = requestParameters.creativeTypes;
    }


    if (requestParameters.adAccountId !== undefined) {
        queryParameters['ad_account_id'] = requestParameters.adAccountId;
    }


    if (requestParameters.pinMetrics !== undefined) {
        queryParameters['pin_metrics'] = requestParameters.pinMetrics;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["boards:read", "pins:read"]];
    meta.authType = ['oauth', ["boards:read", "pins:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/pins`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PinsList200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get a list of the Pins owned by the \"operation user_account\".   - By default, the \"operation user_account\" is the token user_account.   - All Pins owned by the \"operation user_account\" are included, regardless of who owns the board they are on. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".  Disclaimer: there are known performance issues when filtering by field <code>creative_type</code> and including protected pins. If your request is timing out in this scenario we encourage you to use <a href=\'/docs/api/v5/#operation/boards/list_pins\'>GET List Pins on Board</a>.
* List Pins
*/
export function pinsList<T>(requestParameters: PinsListRequest, requestConfig?: runtime.TypedQueryConfig<T, PinsList200Response>): QueryConfig<T> {
    return pinsListRaw(requestParameters, requestConfig);
}

/**
 * Save a Pin on a board or board section owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account. Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.  - Any Pin type can be saved: image Pin, video Pin, Idea Pin, product Pin, etc. - Any public Pin can be saved given a pin ID.
 * Save Pin
 */
function pinsSaveRaw<T>(requestParameters: PinsSaveRequest, requestConfig: runtime.TypedQueryConfig<T, Pin> = {}): QueryConfig<T> {
    if (requestParameters.pinId === null || requestParameters.pinId === undefined) {
        throw new runtime.RequiredError('pinId','Required parameter requestParameters.pinId was null or undefined when calling pinsSave.');
    }

    if (requestParameters.pinsSaveRequest === null || requestParameters.pinsSaveRequest === undefined) {
        throw new runtime.RequiredError('pinsSaveRequest','Required parameter requestParameters.pinsSaveRequest was null or undefined when calling pinsSave.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.adAccountId !== undefined) {
        queryParameters['ad_account_id'] = requestParameters.adAccountId;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["boards:read", "boards:write", "pins:read", "pins:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/pins/{pin_id}/save`.replace(`{${"pin_id"}}`, encodeURIComponent(String(requestParameters.pinId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || PinsSaveRequestToJSON(requestParameters.pinsSaveRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PinFromJSON(body), text);
    }

    return config;
}

/**
* Save a Pin on a board or board section owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account. Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.  - Any Pin type can be saved: image Pin, video Pin, Idea Pin, product Pin, etc. - Any public Pin can be saved given a pin ID.
* Save Pin
*/
export function pinsSave<T>(requestParameters: PinsSaveRequest, requestConfig?: runtime.TypedQueryConfig<T, Pin>): QueryConfig<T> {
    return pinsSaveRaw(requestParameters, requestConfig);
}

/**
 * Update a pin owned by the \"operating user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.</strong>
 * Update Pin
 */
function pinsUpdateRaw<T>(requestParameters: PinsUpdateRequest, requestConfig: runtime.TypedQueryConfig<T, Pin> = {}): QueryConfig<T> {
    if (requestParameters.pinId === null || requestParameters.pinId === undefined) {
        throw new runtime.RequiredError('pinId','Required parameter requestParameters.pinId was null or undefined when calling pinsUpdate.');
    }

    if (requestParameters.pinUpdate === null || requestParameters.pinUpdate === undefined) {
        throw new runtime.RequiredError('pinUpdate','Required parameter requestParameters.pinUpdate was null or undefined when calling pinsUpdate.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.adAccountId !== undefined) {
        queryParameters['ad_account_id'] = requestParameters.adAccountId;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["boards:read", "boards:write", "pins:read", "pins:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/pins/{pin_id}`.replace(`{${"pin_id"}}`, encodeURIComponent(String(requestParameters.pinId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PATCH',
            headers: headerParameters,
        },
        body: queryParameters || PinUpdateToJSON(requestParameters.pinUpdate),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PinFromJSON(body), text);
    }

    return config;
}

/**
* Update a pin owned by the \"operating user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.</strong>
* Update Pin
*/
export function pinsUpdate<T>(requestParameters: PinsUpdateRequest, requestConfig?: runtime.TypedQueryConfig<T, Pin>): QueryConfig<T> {
    return pinsUpdateRaw(requestParameters, requestConfig);
}


/**
    * @export
    * @enum {string}
    */
export enum MultiPinsAnalyticsAppTypesEnum {
    All = 'ALL',
    Mobile = 'MOBILE',
    Tablet = 'TABLET',
    Web = 'WEB'
}
/**
    * @export
    * @enum {string}
    */
export enum PinsAnalyticsAppTypesEnum {
    All = 'ALL',
    Mobile = 'MOBILE',
    Tablet = 'TABLET',
    Web = 'WEB'
}
/**
    * @export
    * @enum {string}
    */
export enum PinsAnalyticsSplitFieldEnum {
    NoSplit = 'NO_SPLIT',
    AppType = 'APP_TYPE'
}
/**
    * @export
    * @enum {string}
    */
export enum PinsListPinFilterEnum {
    ExcludeNative = 'exclude_native',
    ExcludeRepins = 'exclude_repins',
    HasBeenPromoted = 'has_been_promoted'
}
/**
    * @export
    * @enum {string}
    */
export enum PinsListPinTypeEnum {
    Private = 'PRIVATE'
}
/**
    * @export
    * @enum {string}
    */
export enum PinsListCreativeTypesEnum {
    Regular = 'REGULAR',
    Video = 'VIDEO',
    Shopping = 'SHOPPING',
    Carousel = 'CAROUSEL',
    MaxVideo = 'MAX_VIDEO',
    ShopThePin = 'SHOP_THE_PIN',
    Collection = 'COLLECTION',
    Idea = 'IDEA'
}
