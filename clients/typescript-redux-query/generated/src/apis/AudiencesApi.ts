// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    Audience,
    AudienceFromJSON,
    AudienceToJSON,
    AudienceCreateCustomRequest,
    AudienceCreateCustomRequestFromJSON,
    AudienceCreateCustomRequestToJSON,
    AudienceCreateRequest,
    AudienceCreateRequestFromJSON,
    AudienceCreateRequestToJSON,
    AudienceUpdateRequest,
    AudienceUpdateRequestFromJSON,
    AudienceUpdateRequestToJSON,
    AudiencesList200Response,
    AudiencesList200ResponseFromJSON,
    AudiencesList200ResponseToJSON,
} from '../models';

export interface AudiencesCreateRequest {
    adAccountId: string;
    audienceCreateRequest: AudienceCreateRequest;
}

export interface AudiencesCreateCustomRequest {
    adAccountId: string;
    audienceCreateCustomRequest: AudienceCreateCustomRequest;
}

export interface AudiencesGetRequest {
    adAccountId: string;
    audienceId: string;
}

export interface AudiencesListRequest {
    adAccountId: string;
    bookmark?: string;
    order?: AudiencesListOrderEnum;
    pageSize?: number;
    ownershipType?: AudiencesListOwnershipTypeEnum;
}

export interface AudiencesUpdateRequest {
    adAccountId: string;
    audienceId: string;
    audienceUpdateRequest?: AudienceUpdateRequest;
}


/**
 * Create an audience you can use in targeting for specific ad groups. Targeting combines customer information with the ways users interact with Pinterest to help you reach specific groups of users; you can include or exclude specific audience_ids when you create an ad group. <p/> For more, see <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/audience-targeting\" target=\"_blank\">Audience targeting</a>.
 * Create audience
 */
function audiencesCreateRaw<T>(requestParameters: AudiencesCreateRequest, requestConfig: runtime.TypedQueryConfig<T, Audience> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling audiencesCreate.');
    }

    if (requestParameters.audienceCreateRequest === null || requestParameters.audienceCreateRequest === undefined) {
        throw new runtime.RequiredError('audienceCreateRequest','Required parameter requestParameters.audienceCreateRequest was null or undefined when calling audiencesCreate.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/audiences`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || AudienceCreateRequestToJSON(requestParameters.audienceCreateRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AudienceFromJSON(body), text);
    }

    return config;
}

/**
* Create an audience you can use in targeting for specific ad groups. Targeting combines customer information with the ways users interact with Pinterest to help you reach specific groups of users; you can include or exclude specific audience_ids when you create an ad group. <p/> For more, see <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/audience-targeting\" target=\"_blank\">Audience targeting</a>.
* Create audience
*/
export function audiencesCreate<T>(requestParameters: AudiencesCreateRequest, requestConfig?: runtime.TypedQueryConfig<T, Audience>): QueryConfig<T> {
    return audiencesCreateRaw(requestParameters, requestConfig);
}

/**
 * Create a custom audience and find the audiences you want your ads to reach.
 * Create custom audience
 */
function audiencesCreateCustomRaw<T>(requestParameters: AudiencesCreateCustomRequest, requestConfig: runtime.TypedQueryConfig<T, Audience> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling audiencesCreateCustom.');
    }

    if (requestParameters.audienceCreateCustomRequest === null || requestParameters.audienceCreateCustomRequest === undefined) {
        throw new runtime.RequiredError('audienceCreateCustomRequest','Required parameter requestParameters.audienceCreateCustomRequest was null or undefined when calling audiencesCreateCustom.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/audiences/custom`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || AudienceCreateCustomRequestToJSON(requestParameters.audienceCreateCustomRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AudienceFromJSON(body), text);
    }

    return config;
}

/**
* Create a custom audience and find the audiences you want your ads to reach.
* Create custom audience
*/
export function audiencesCreateCustom<T>(requestParameters: AudiencesCreateCustomRequest, requestConfig?: runtime.TypedQueryConfig<T, Audience>): QueryConfig<T> {
    return audiencesCreateCustomRaw(requestParameters, requestConfig);
}

/**
 * Get a specific audience given the audience ID.
 * Get audience
 */
function audiencesGetRaw<T>(requestParameters: AudiencesGetRequest, requestConfig: runtime.TypedQueryConfig<T, Audience> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling audiencesGet.');
    }

    if (requestParameters.audienceId === null || requestParameters.audienceId === undefined) {
        throw new runtime.RequiredError('audienceId','Required parameter requestParameters.audienceId was null or undefined when calling audiencesGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/audiences/{audience_id}`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))).replace(`{${"audience_id"}}`, encodeURIComponent(String(requestParameters.audienceId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AudienceFromJSON(body), text);
    }

    return config;
}

/**
* Get a specific audience given the audience ID.
* Get audience
*/
export function audiencesGet<T>(requestParameters: AudiencesGetRequest, requestConfig?: runtime.TypedQueryConfig<T, Audience>): QueryConfig<T> {
    return audiencesGetRaw(requestParameters, requestConfig);
}

/**
 * Get list of audiences for the ad account.
 * List audiences
 */
function audiencesListRaw<T>(requestParameters: AudiencesListRequest, requestConfig: runtime.TypedQueryConfig<T, AudiencesList200Response> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling audiencesList.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.bookmark !== undefined) {
        queryParameters['bookmark'] = requestParameters.bookmark;
    }


    if (requestParameters.order !== undefined) {
        queryParameters['order'] = requestParameters.order;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['page_size'] = requestParameters.pageSize;
    }


    if (requestParameters.ownershipType !== undefined) {
        queryParameters['ownership_type'] = requestParameters.ownershipType;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/audiences`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AudiencesList200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get list of audiences for the ad account.
* List audiences
*/
export function audiencesList<T>(requestParameters: AudiencesListRequest, requestConfig?: runtime.TypedQueryConfig<T, AudiencesList200Response>): QueryConfig<T> {
    return audiencesListRaw(requestParameters, requestConfig);
}

/**
 * Update (edit or remove) an existing targeting audience.
 * Update audience
 */
function audiencesUpdateRaw<T>(requestParameters: AudiencesUpdateRequest, requestConfig: runtime.TypedQueryConfig<T, Audience> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling audiencesUpdate.');
    }

    if (requestParameters.audienceId === null || requestParameters.audienceId === undefined) {
        throw new runtime.RequiredError('audienceId','Required parameter requestParameters.audienceId was null or undefined when calling audiencesUpdate.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/audiences/{audience_id}`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))).replace(`{${"audience_id"}}`, encodeURIComponent(String(requestParameters.audienceId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PATCH',
            headers: headerParameters,
        },
        body: queryParameters || AudienceUpdateRequestToJSON(requestParameters.audienceUpdateRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AudienceFromJSON(body), text);
    }

    return config;
}

/**
* Update (edit or remove) an existing targeting audience.
* Update audience
*/
export function audiencesUpdate<T>(requestParameters: AudiencesUpdateRequest, requestConfig?: runtime.TypedQueryConfig<T, Audience>): QueryConfig<T> {
    return audiencesUpdateRaw(requestParameters, requestConfig);
}


/**
    * @export
    * @enum {string}
    */
export enum AudiencesListOrderEnum {
    Ascending = 'ASCENDING',
    Descending = 'DESCENDING'
}
/**
    * @export
    * @enum {string}
    */
export enum AudiencesListOwnershipTypeEnum {
    Owned = 'OWNED',
    Received = 'RECEIVED'
}
