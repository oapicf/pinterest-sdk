// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    PinsList200Response,
    PinsList200ResponseFromJSON,
    PinsList200ResponseToJSON,
    SearchPartnerPins200Response,
    SearchPartnerPins200ResponseFromJSON,
    SearchPartnerPins200ResponseToJSON,
    SearchUserBoardsGet200Response,
    SearchUserBoardsGet200ResponseFromJSON,
    SearchUserBoardsGet200ResponseToJSON,
} from '../models';

export interface SearchPartnerPinsRequest {
    term: string;
    countryCode: string;
    bookmark?: string;
    locale?: string;
    limit?: number;
}

export interface SearchUserBoardsGetRequest {
    adAccountId?: string;
    bookmark?: string;
    pageSize?: number;
    query?: string;
}

export interface SearchUserPinsListRequest {
    query: string;
    adAccountId?: string;
    bookmark?: string;
}


/**
 * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.</strong>  Get the top 10 Pins by a given search term.
 * Search pins by a given search term
 */
function searchPartnerPinsRaw<T>(requestParameters: SearchPartnerPinsRequest, requestConfig: runtime.TypedQueryConfig<T, SearchPartnerPins200Response> = {}): QueryConfig<T> {
    if (requestParameters.term === null || requestParameters.term === undefined) {
        throw new runtime.RequiredError('term','Required parameter requestParameters.term was null or undefined when calling searchPartnerPins.');
    }

    if (requestParameters.countryCode === null || requestParameters.countryCode === undefined) {
        throw new runtime.RequiredError('countryCode','Required parameter requestParameters.countryCode was null or undefined when calling searchPartnerPins.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.term !== undefined) {
        queryParameters['term'] = requestParameters.term;
    }


    if (requestParameters.countryCode !== undefined) {
        queryParameters['country_code'] = requestParameters.countryCode;
    }


    if (requestParameters.bookmark !== undefined) {
        queryParameters['bookmark'] = requestParameters.bookmark;
    }


    if (requestParameters.locale !== undefined) {
        queryParameters['locale'] = requestParameters.locale;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["boards:read", "pins:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/search/partner/pins`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SearchPartnerPins200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.</strong>  Get the top 10 Pins by a given search term.
* Search pins by a given search term
*/
export function searchPartnerPins<T>(requestParameters: SearchPartnerPinsRequest, requestConfig?: runtime.TypedQueryConfig<T, SearchPartnerPins200Response>): QueryConfig<T> {
    return searchPartnerPinsRaw(requestParameters, requestConfig);
}

/**
 * Search for boards for the \"operation user_account\". This includes boards of all board types. - By default, the \"operation user_account\" is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". See <a href=\'/docs/getting-started/using-business-access/\'>Understanding Business Access</a> for more information.
 * Search user\'s boards
 */
function searchUserBoardsGetRaw<T>(requestParameters: SearchUserBoardsGetRequest, requestConfig: runtime.TypedQueryConfig<T, SearchUserBoardsGet200Response> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.adAccountId !== undefined) {
        queryParameters['ad_account_id'] = requestParameters.adAccountId;
    }


    if (requestParameters.bookmark !== undefined) {
        queryParameters['bookmark'] = requestParameters.bookmark;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['page_size'] = requestParameters.pageSize;
    }


    if (requestParameters.query !== undefined) {
        queryParameters['query'] = requestParameters.query;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["boards:read", "boards:read_secret"]];
    meta.authType = ['oauth', ["boards:read", "boards:read_secret"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/search/boards`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SearchUserBoardsGet200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* Search for boards for the \"operation user_account\". This includes boards of all board types. - By default, the \"operation user_account\" is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". See <a href=\'/docs/getting-started/using-business-access/\'>Understanding Business Access</a> for more information.
* Search user\'s boards
*/
export function searchUserBoardsGet<T>(requestParameters: SearchUserBoardsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, SearchUserBoardsGet200Response>): QueryConfig<T> {
    return searchUserBoardsGetRaw(requestParameters, requestConfig);
}

/**
 * Search for pins for the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". See <a href=\'/docs/getting-started/using-business-access/\'>Understanding Business Access</a> for more information.
 * Search user\'s Pins
 */
function searchUserPinsListRaw<T>(requestParameters: SearchUserPinsListRequest, requestConfig: runtime.TypedQueryConfig<T, PinsList200Response> = {}): QueryConfig<T> {
    if (requestParameters.query === null || requestParameters.query === undefined) {
        throw new runtime.RequiredError('query','Required parameter requestParameters.query was null or undefined when calling searchUserPinsList.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.adAccountId !== undefined) {
        queryParameters['ad_account_id'] = requestParameters.adAccountId;
    }


    if (requestParameters.query !== undefined) {
        queryParameters['query'] = requestParameters.query;
    }


    if (requestParameters.bookmark !== undefined) {
        queryParameters['bookmark'] = requestParameters.bookmark;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["boards:read", "boards:read_secret", "pins:read", "pins:read_secret"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/search/pins`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PinsList200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* Search for pins for the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". See <a href=\'/docs/getting-started/using-business-access/\'>Understanding Business Access</a> for more information.
* Search user\'s Pins
*/
export function searchUserPinsList<T>(requestParameters: SearchUserPinsListRequest, requestConfig?: runtime.TypedQueryConfig<T, PinsList200Response>): QueryConfig<T> {
    return searchUserPinsListRaw(requestParameters, requestConfig);
}

