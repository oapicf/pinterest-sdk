// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    TargetingTemplateCreate,
    TargetingTemplateCreateFromJSON,
    TargetingTemplateCreateToJSON,
    TargetingTemplateGetResponseData,
    TargetingTemplateGetResponseDataFromJSON,
    TargetingTemplateGetResponseDataToJSON,
    TargetingTemplateList200Response,
    TargetingTemplateList200ResponseFromJSON,
    TargetingTemplateList200ResponseToJSON,
    TargetingTemplateUpdateRequest,
    TargetingTemplateUpdateRequestFromJSON,
    TargetingTemplateUpdateRequestToJSON,
} from '../models';

export interface TargetingTemplateCreateRequest {
    adAccountId: string;
    targetingTemplateCreate: TargetingTemplateCreate;
}

export interface TargetingTemplateListRequest {
    adAccountId: string;
    order?: TargetingTemplateListOrderEnum;
    includeSizing?: boolean;
    searchQuery?: string;
    pageSize?: number;
    bookmark?: string;
}

export interface TargetingTemplateUpdateRequest {
    adAccountId: string;
    targetingTemplateUpdateRequest: TargetingTemplateUpdateRequest;
}


/**
 * <p>Targeting templates allow advertisers to save a set of targeting details including audience lists,  keywords & interest, demographics, and placements to use more than once during the campaign creation process.</p>  <p>Templates can be used to build out basic targeting criteria that you plan to use across campaigns and to reuse   performance targeting from prior campaigns for new campaigns.</p>
 * Create targeting templates
 */
function targetingTemplateCreateRaw<T>(requestParameters: TargetingTemplateCreateRequest, requestConfig: runtime.TypedQueryConfig<T, TargetingTemplateGetResponseData> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling targetingTemplateCreate.');
    }

    if (requestParameters.targetingTemplateCreate === null || requestParameters.targetingTemplateCreate === undefined) {
        throw new runtime.RequiredError('targetingTemplateCreate','Required parameter requestParameters.targetingTemplateCreate was null or undefined when calling targetingTemplateCreate.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/targeting_templates`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || TargetingTemplateCreateToJSON(requestParameters.targetingTemplateCreate),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(TargetingTemplateGetResponseDataFromJSON(body), text);
    }

    return config;
}

/**
* <p>Targeting templates allow advertisers to save a set of targeting details including audience lists,  keywords & interest, demographics, and placements to use more than once during the campaign creation process.</p>  <p>Templates can be used to build out basic targeting criteria that you plan to use across campaigns and to reuse   performance targeting from prior campaigns for new campaigns.</p>
* Create targeting templates
*/
export function targetingTemplateCreate<T>(requestParameters: TargetingTemplateCreateRequest, requestConfig?: runtime.TypedQueryConfig<T, TargetingTemplateGetResponseData>): QueryConfig<T> {
    return targetingTemplateCreateRaw(requestParameters, requestConfig);
}

/**
 * Get a list of the targeting templates in the specified <code>ad_account_id</code>
 * List targeting templates
 */
function targetingTemplateListRaw<T>(requestParameters: TargetingTemplateListRequest, requestConfig: runtime.TypedQueryConfig<T, TargetingTemplateList200Response> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling targetingTemplateList.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.order !== undefined) {
        queryParameters['order'] = requestParameters.order;
    }


    if (requestParameters.includeSizing !== undefined) {
        queryParameters['include_sizing'] = requestParameters.includeSizing;
    }


    if (requestParameters.searchQuery !== undefined) {
        queryParameters['search_query'] = requestParameters.searchQuery;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['page_size'] = requestParameters.pageSize;
    }


    if (requestParameters.bookmark !== undefined) {
        queryParameters['bookmark'] = requestParameters.bookmark;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/targeting_templates`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(TargetingTemplateList200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get a list of the targeting templates in the specified <code>ad_account_id</code>
* List targeting templates
*/
export function targetingTemplateList<T>(requestParameters: TargetingTemplateListRequest, requestConfig?: runtime.TypedQueryConfig<T, TargetingTemplateList200Response>): QueryConfig<T> {
    return targetingTemplateListRaw(requestParameters, requestConfig);
}

/**
 * <p>Update the targeting template given advertiser ID and targeting template ID</p>
 * Update targeting templates
 */
function targetingTemplateUpdateRaw<T>(requestParameters: TargetingTemplateUpdateRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling targetingTemplateUpdate.');
    }

    if (requestParameters.targetingTemplateUpdateRequest === null || requestParameters.targetingTemplateUpdateRequest === undefined) {
        throw new runtime.RequiredError('targetingTemplateUpdateRequest','Required parameter requestParameters.targetingTemplateUpdateRequest was null or undefined when calling targetingTemplateUpdate.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/targeting_templates`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PATCH',
            headers: headerParameters,
        },
        body: queryParameters || TargetingTemplateUpdateRequestToJSON(requestParameters.targetingTemplateUpdateRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* <p>Update the targeting template given advertiser ID and targeting template ID</p>
* Update targeting templates
*/
export function targetingTemplateUpdate<T>(requestParameters: TargetingTemplateUpdateRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return targetingTemplateUpdateRaw(requestParameters, requestConfig);
}


/**
    * @export
    * @enum {string}
    */
export enum TargetingTemplateListOrderEnum {
    Ascending = 'ASCENDING',
    Descending = 'DESCENDING'
}
