// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    RelatedTerms,
    RelatedTermsFromJSON,
    RelatedTermsToJSON,
} from '../models';

export interface TermsRelatedListRequest {
    terms: Array<string>;
}

export interface TermsSuggestedListRequest {
    term: string;
    limit?: number;
}


/**
 * Get a list of terms logically related to each input term. <p/> Example: the term \'workout\' would list related terms like \'one song workout\', \'yoga workout\', \'workout motivation\', etc.
 * List related terms
 */
function termsRelatedListRaw<T>(requestParameters: TermsRelatedListRequest, requestConfig: runtime.TypedQueryConfig<T, RelatedTerms> = {}): QueryConfig<T> {
    if (requestParameters.terms === null || requestParameters.terms === undefined) {
        throw new runtime.RequiredError('terms','Required parameter requestParameters.terms was null or undefined when calling termsRelatedList.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.terms) {
        queryParameters['terms'] = requestParameters.terms;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/terms/related`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(RelatedTermsFromJSON(body), text);
    }

    return config;
}

/**
* Get a list of terms logically related to each input term. <p/> Example: the term \'workout\' would list related terms like \'one song workout\', \'yoga workout\', \'workout motivation\', etc.
* List related terms
*/
export function termsRelatedList<T>(requestParameters: TermsRelatedListRequest, requestConfig?: runtime.TypedQueryConfig<T, RelatedTerms>): QueryConfig<T> {
    return termsRelatedListRaw(requestParameters, requestConfig);
}

/**
 * Get popular search terms that begin with your input term. <p/> Example: \'sport\' would return popular terms like \'sports bar\' and \'sportswear\', but not \'motor sports\' since the phrase does not begin with the given term.
 * List suggested terms
 */
function termsSuggestedListRaw<T>(requestParameters: TermsSuggestedListRequest, requestConfig: runtime.TypedQueryConfig<T, Array<string>> = {}): QueryConfig<T> {
    if (requestParameters.term === null || requestParameters.term === undefined) {
        throw new runtime.RequiredError('term','Required parameter requestParameters.term was null or undefined when calling termsSuggestedList.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.term !== undefined) {
        queryParameters['term'] = requestParameters.term;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/terms/suggested`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Get popular search terms that begin with your input term. <p/> Example: \'sport\' would return popular terms like \'sports bar\' and \'sportswear\', but not \'motor sports\' since the phrase does not begin with the given term.
* List suggested terms
*/
export function termsSuggestedList<T>(requestParameters: TermsSuggestedListRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<string>>): QueryConfig<T> {
    return termsSuggestedListRaw(requestParameters, requestConfig);
}

