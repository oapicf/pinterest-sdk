// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    BulkDownloadRequest,
    BulkDownloadRequestFromJSON,
    BulkDownloadRequestToJSON,
    BulkDownloadResponse,
    BulkDownloadResponseFromJSON,
    BulkDownloadResponseToJSON,
    BulkUpsertRequest,
    BulkUpsertRequestFromJSON,
    BulkUpsertRequestToJSON,
    BulkUpsertResponse,
    BulkUpsertResponseFromJSON,
    BulkUpsertResponseToJSON,
    BulkUpsertStatusResponse,
    BulkUpsertStatusResponseFromJSON,
    BulkUpsertStatusResponseToJSON,
} from '../models';

export interface BulkDownloadCreateRequest {
    adAccountId: string;
    bulkDownloadRequest: BulkDownloadRequest;
}

export interface BulkRequestGetRequest {
    adAccountId: string;
    bulkRequestId: string;
    includeDetails?: boolean;
}

export interface BulkUpsertCreateRequest {
    adAccountId: string;
    bulkUpsertRequest: BulkUpsertRequest;
}


/**
 * Create an asynchronous report that may include information on campaigns, ad groups, product groups, ads, and/or keywords; can filter by campaigns. Though the entities may be active, archived, or paused, only active entities will return data.
 * Get advertiser entities in bulk
 */
function bulkDownloadCreateRaw<T>(requestParameters: BulkDownloadCreateRequest, requestConfig: runtime.TypedQueryConfig<T, BulkDownloadResponse> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling bulkDownloadCreate.');
    }

    if (requestParameters.bulkDownloadRequest === null || requestParameters.bulkDownloadRequest === undefined) {
        throw new runtime.RequiredError('bulkDownloadRequest','Required parameter requestParameters.bulkDownloadRequest was null or undefined when calling bulkDownloadCreate.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/bulk/download`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || BulkDownloadRequestToJSON(requestParameters.bulkDownloadRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(BulkDownloadResponseFromJSON(body), text);
    }

    return config;
}

/**
* Create an asynchronous report that may include information on campaigns, ad groups, product groups, ads, and/or keywords; can filter by campaigns. Though the entities may be active, archived, or paused, only active entities will return data.
* Get advertiser entities in bulk
*/
export function bulkDownloadCreate<T>(requestParameters: BulkDownloadCreateRequest, requestConfig?: runtime.TypedQueryConfig<T, BulkDownloadResponse>): QueryConfig<T> {
    return bulkDownloadCreateRaw(requestParameters, requestConfig);
}

/**
 * Get the status of a bulk request by <code>request_id</code>, along with a download URL that will allow you to download the new or updated entity data (campaigns, ad groups, product groups, ads, or keywords).
 * Download advertiser entities in bulk
 */
function bulkRequestGetRaw<T>(requestParameters: BulkRequestGetRequest, requestConfig: runtime.TypedQueryConfig<T, BulkUpsertStatusResponse> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling bulkRequestGet.');
    }

    if (requestParameters.bulkRequestId === null || requestParameters.bulkRequestId === undefined) {
        throw new runtime.RequiredError('bulkRequestId','Required parameter requestParameters.bulkRequestId was null or undefined when calling bulkRequestGet.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.includeDetails !== undefined) {
        queryParameters['include_details'] = requestParameters.includeDetails;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/bulk/{bulk_request_id}`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))).replace(`{${"bulk_request_id"}}`, encodeURIComponent(String(requestParameters.bulkRequestId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(BulkUpsertStatusResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get the status of a bulk request by <code>request_id</code>, along with a download URL that will allow you to download the new or updated entity data (campaigns, ad groups, product groups, ads, or keywords).
* Download advertiser entities in bulk
*/
export function bulkRequestGet<T>(requestParameters: BulkRequestGetRequest, requestConfig?: runtime.TypedQueryConfig<T, BulkUpsertStatusResponse>): QueryConfig<T> {
    return bulkRequestGetRaw(requestParameters, requestConfig);
}

/**
 * Either create or update any combination of campaigns, ad groups, product groups, ads, or keywords. Note that this request will be processed asynchronously; the response will include a <code>request_id</code> that can be used to obtain the status of the request.
 * Create/update ad entities in bulk
 */
function bulkUpsertCreateRaw<T>(requestParameters: BulkUpsertCreateRequest, requestConfig: runtime.TypedQueryConfig<T, BulkUpsertResponse> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling bulkUpsertCreate.');
    }

    if (requestParameters.bulkUpsertRequest === null || requestParameters.bulkUpsertRequest === undefined) {
        throw new runtime.RequiredError('bulkUpsertRequest','Required parameter requestParameters.bulkUpsertRequest was null or undefined when calling bulkUpsertCreate.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/bulk/upsert`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || BulkUpsertRequestToJSON(requestParameters.bulkUpsertRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(BulkUpsertResponseFromJSON(body), text);
    }

    return config;
}

/**
* Either create or update any combination of campaigns, ad groups, product groups, ads, or keywords. Note that this request will be processed asynchronously; the response will include a <code>request_id</code> that can be used to obtain the status of the request.
* Create/update ad entities in bulk
*/
export function bulkUpsertCreate<T>(requestParameters: BulkUpsertCreateRequest, requestConfig?: runtime.TypedQueryConfig<T, BulkUpsertResponse>): QueryConfig<T> {
    return bulkUpsertCreateRaw(requestParameters, requestConfig);
}

