// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    MediaList200Response,
    MediaList200ResponseFromJSON,
    MediaList200ResponseToJSON,
    MediaUpload,
    MediaUploadFromJSON,
    MediaUploadToJSON,
    MediaUploadDetails,
    MediaUploadDetailsFromJSON,
    MediaUploadDetailsToJSON,
    MediaUploadRequest,
    MediaUploadRequestFromJSON,
    MediaUploadRequestToJSON,
} from '../models';

export interface MediaCreateRequest {
    mediaUploadRequest: MediaUploadRequest;
}

export interface MediaGetRequest {
    mediaId: string;
}

export interface MediaListRequest {
    bookmark?: string;
    pageSize?: number;
}


/**
 * Register your intent to upload media  The response includes all of the information needed to upload the media to Pinterest.  To upload the media, make an HTTP POST request (using <tt>curl</tt>, for example) to <tt>upload_url</tt> using the <tt>Content-Type</tt> header value. Send the media file\'s contents as the request\'s <tt>file</tt> parameter and also include all of the parameters from <tt>upload_parameters</tt>.  <strong><a href=\'/docs/api-features/creating-boards-and-pins/#creating-video-pins\'>Learn more</a></strong> about video Pin creation.
 * Register media upload
 */
function mediaCreateRaw<T>(requestParameters: MediaCreateRequest, requestConfig: runtime.TypedQueryConfig<T, MediaUpload> = {}): QueryConfig<T> {
    if (requestParameters.mediaUploadRequest === null || requestParameters.mediaUploadRequest === undefined) {
        throw new runtime.RequiredError('mediaUploadRequest','Required parameter requestParameters.mediaUploadRequest was null or undefined when calling mediaCreate.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["pins:read", "pins:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/media`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || MediaUploadRequestToJSON(requestParameters.mediaUploadRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(MediaUploadFromJSON(body), text);
    }

    return config;
}

/**
* Register your intent to upload media  The response includes all of the information needed to upload the media to Pinterest.  To upload the media, make an HTTP POST request (using <tt>curl</tt>, for example) to <tt>upload_url</tt> using the <tt>Content-Type</tt> header value. Send the media file\'s contents as the request\'s <tt>file</tt> parameter and also include all of the parameters from <tt>upload_parameters</tt>.  <strong><a href=\'/docs/api-features/creating-boards-and-pins/#creating-video-pins\'>Learn more</a></strong> about video Pin creation.
* Register media upload
*/
export function mediaCreate<T>(requestParameters: MediaCreateRequest, requestConfig?: runtime.TypedQueryConfig<T, MediaUpload>): QueryConfig<T> {
    return mediaCreateRaw(requestParameters, requestConfig);
}

/**
 * Get details for a registered media upload, including its current status.  <strong><a href=\'/docs/api-features/creating-boards-and-pins/#creating-video-pins\'>Learn more</a></strong> about video Pin creation.
 * Get media upload details
 */
function mediaGetRaw<T>(requestParameters: MediaGetRequest, requestConfig: runtime.TypedQueryConfig<T, MediaUploadDetails> = {}): QueryConfig<T> {
    if (requestParameters.mediaId === null || requestParameters.mediaId === undefined) {
        throw new runtime.RequiredError('mediaId','Required parameter requestParameters.mediaId was null or undefined when calling mediaGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["pins:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/media/{media_id}`.replace(`{${"media_id"}}`, encodeURIComponent(String(requestParameters.mediaId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(MediaUploadDetailsFromJSON(body), text);
    }

    return config;
}

/**
* Get details for a registered media upload, including its current status.  <strong><a href=\'/docs/api-features/creating-boards-and-pins/#creating-video-pins\'>Learn more</a></strong> about video Pin creation.
* Get media upload details
*/
export function mediaGet<T>(requestParameters: MediaGetRequest, requestConfig?: runtime.TypedQueryConfig<T, MediaUploadDetails>): QueryConfig<T> {
    return mediaGetRaw(requestParameters, requestConfig);
}

/**
 * List media uploads filtered by given parameters.  <strong><a href=\'/docs/api-features/creating-boards-and-pins/#creating-video-pins\'>Learn more</a></strong> about video Pin creation.
 * List media uploads
 */
function mediaListRaw<T>(requestParameters: MediaListRequest, requestConfig: runtime.TypedQueryConfig<T, MediaList200Response> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.bookmark !== undefined) {
        queryParameters['bookmark'] = requestParameters.bookmark;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['page_size'] = requestParameters.pageSize;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["pins:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/media`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(MediaList200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* List media uploads filtered by given parameters.  <strong><a href=\'/docs/api-features/creating-boards-and-pins/#creating-video-pins\'>Learn more</a></strong> about video Pin creation.
* List media uploads
*/
export function mediaList<T>(requestParameters: MediaListRequest, requestConfig?: runtime.TypedQueryConfig<T, MediaList200Response>): QueryConfig<T> {
    return mediaListRaw(requestParameters, requestConfig);
}

