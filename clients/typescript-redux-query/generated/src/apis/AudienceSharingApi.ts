// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    AdAccountsAudiencesSharedAccountsList200Response,
    AdAccountsAudiencesSharedAccountsList200ResponseFromJSON,
    AdAccountsAudiencesSharedAccountsList200ResponseToJSON,
    AudienceAccountType,
    AudienceAccountTypeFromJSON,
    AudienceAccountTypeToJSON,
    AudiencesList200Response,
    AudiencesList200ResponseFromJSON,
    AudiencesList200ResponseToJSON,
    BusinessSharedAudience,
    BusinessSharedAudienceFromJSON,
    BusinessSharedAudienceToJSON,
    BusinessSharedAudienceResponse,
    BusinessSharedAudienceResponseFromJSON,
    BusinessSharedAudienceResponseToJSON,
    SharedAudience,
    SharedAudienceFromJSON,
    SharedAudienceToJSON,
    SharedAudienceResponse,
    SharedAudienceResponseFromJSON,
    SharedAudienceResponseToJSON,
} from '../models';

export interface AdAccountsAudiencesSharedAccountsListRequest {
    adAccountId: string;
    audienceId: string;
    accountType: AudienceAccountType;
    pageSize?: number;
    bookmark?: string;
}

export interface BusinessAccountAudiencesSharedAccountsListRequest {
    businessId: string;
    audienceId: string;
    accountType: AudienceAccountType;
    pageSize?: number;
    bookmark?: string;
}

export interface SharedAudiencesForBusinessListRequest {
    businessId: string;
    bookmark?: string;
    order?: SharedAudiencesForBusinessListOrderEnum;
    pageSize?: number;
}

export interface UpdateAdAccountToAdAccountSharedAudienceRequest {
    adAccountId: string;
    sharedAudience: SharedAudience;
}

export interface UpdateAdAccountToBusinessSharedAudienceRequest {
    adAccountId: string;
    businessSharedAudience: BusinessSharedAudience;
}

export interface UpdateBusinessToAdAccountSharedAudienceRequest {
    businessId: string;
    sharedAudience: SharedAudience;
}

export interface UpdateBusinessToBusinessSharedAudienceRequest {
    businessId: string;
    businessSharedAudience: BusinessSharedAudience;
}


/**
 * List all ad accounts and/or businesses that have access to a specific audience. The audience must be owned by the requesting ad account.
 * List accounts with access to an audience owned by an ad account
 */
function adAccountsAudiencesSharedAccountsListRaw<T>(requestParameters: AdAccountsAudiencesSharedAccountsListRequest, requestConfig: runtime.TypedQueryConfig<T, AdAccountsAudiencesSharedAccountsList200Response> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling adAccountsAudiencesSharedAccountsList.');
    }

    if (requestParameters.audienceId === null || requestParameters.audienceId === undefined) {
        throw new runtime.RequiredError('audienceId','Required parameter requestParameters.audienceId was null or undefined when calling adAccountsAudiencesSharedAccountsList.');
    }

    if (requestParameters.accountType === null || requestParameters.accountType === undefined) {
        throw new runtime.RequiredError('accountType','Required parameter requestParameters.accountType was null or undefined when calling adAccountsAudiencesSharedAccountsList.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.audienceId !== undefined) {
        queryParameters['audience_id'] = requestParameters.audienceId;
    }


    if (requestParameters.accountType !== undefined) {
        queryParameters['account_type'] = requestParameters.accountType;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['page_size'] = requestParameters.pageSize;
    }


    if (requestParameters.bookmark !== undefined) {
        queryParameters['bookmark'] = requestParameters.bookmark;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/audiences/shared/accounts`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AdAccountsAudiencesSharedAccountsList200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* List all ad accounts and/or businesses that have access to a specific audience. The audience must be owned by the requesting ad account.
* List accounts with access to an audience owned by an ad account
*/
export function adAccountsAudiencesSharedAccountsList<T>(requestParameters: AdAccountsAudiencesSharedAccountsListRequest, requestConfig?: runtime.TypedQueryConfig<T, AdAccountsAudiencesSharedAccountsList200Response>): QueryConfig<T> {
    return adAccountsAudiencesSharedAccountsListRaw(requestParameters, requestConfig);
}

/**
 * List all ad accounts and/or businesses that have access to a specific audience. The audience must either be owned by an ad account in the requesting business, or it must have been shared with the requesting business. If the requesting business is not the owner of the audience, only ad accounts owned by the requesting business will be returned.
 * List accounts with access to an audience owned by a business
 */
function businessAccountAudiencesSharedAccountsListRaw<T>(requestParameters: BusinessAccountAudiencesSharedAccountsListRequest, requestConfig: runtime.TypedQueryConfig<T, AdAccountsAudiencesSharedAccountsList200Response> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling businessAccountAudiencesSharedAccountsList.');
    }

    if (requestParameters.audienceId === null || requestParameters.audienceId === undefined) {
        throw new runtime.RequiredError('audienceId','Required parameter requestParameters.audienceId was null or undefined when calling businessAccountAudiencesSharedAccountsList.');
    }

    if (requestParameters.accountType === null || requestParameters.accountType === undefined) {
        throw new runtime.RequiredError('accountType','Required parameter requestParameters.accountType was null or undefined when calling businessAccountAudiencesSharedAccountsList.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.audienceId !== undefined) {
        queryParameters['audience_id'] = requestParameters.audienceId;
    }


    if (requestParameters.accountType !== undefined) {
        queryParameters['account_type'] = requestParameters.accountType;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['page_size'] = requestParameters.pageSize;
    }


    if (requestParameters.bookmark !== undefined) {
        queryParameters['bookmark'] = requestParameters.bookmark;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["biz_access:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{business_id}/audiences/shared/accounts`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AdAccountsAudiencesSharedAccountsList200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* List all ad accounts and/or businesses that have access to a specific audience. The audience must either be owned by an ad account in the requesting business, or it must have been shared with the requesting business. If the requesting business is not the owner of the audience, only ad accounts owned by the requesting business will be returned.
* List accounts with access to an audience owned by a business
*/
export function businessAccountAudiencesSharedAccountsList<T>(requestParameters: BusinessAccountAudiencesSharedAccountsListRequest, requestConfig?: runtime.TypedQueryConfig<T, AdAccountsAudiencesSharedAccountsList200Response>): QueryConfig<T> {
    return businessAccountAudiencesSharedAccountsListRaw(requestParameters, requestConfig);
}

/**
 * Get a list of received audiences for the given business.
 * List received audiences for a business
 */
function sharedAudiencesForBusinessListRaw<T>(requestParameters: SharedAudiencesForBusinessListRequest, requestConfig: runtime.TypedQueryConfig<T, AudiencesList200Response> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling sharedAudiencesForBusinessList.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.bookmark !== undefined) {
        queryParameters['bookmark'] = requestParameters.bookmark;
    }


    if (requestParameters.order !== undefined) {
        queryParameters['order'] = requestParameters.order;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['page_size'] = requestParameters.pageSize;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["biz_access:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{business_id}/audiences`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AudiencesList200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get a list of received audiences for the given business.
* List received audiences for a business
*/
export function sharedAudiencesForBusinessList<T>(requestParameters: SharedAudiencesForBusinessListRequest, requestConfig?: runtime.TypedQueryConfig<T, AudiencesList200Response>): QueryConfig<T> {
    return sharedAudiencesForBusinessListRaw(requestParameters, requestConfig);
}

/**
 * From an ad account, share a specific audience with another ad account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient ad account(s) must be in the same <a href=\'https://help.pinterest.com/en/business/article/create-and-manage-accounts\'>Pinterest Business Hierarchy</a> as the business owner of the ad account.<br> This endpoint is not available to all apps.<a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.
 * Update audience sharing between ad accounts
 */
function updateAdAccountToAdAccountSharedAudienceRaw<T>(requestParameters: UpdateAdAccountToAdAccountSharedAudienceRequest, requestConfig: runtime.TypedQueryConfig<T, SharedAudienceResponse> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling updateAdAccountToAdAccountSharedAudience.');
    }

    if (requestParameters.sharedAudience === null || requestParameters.sharedAudience === undefined) {
        throw new runtime.RequiredError('sharedAudience','Required parameter requestParameters.sharedAudience was null or undefined when calling updateAdAccountToAdAccountSharedAudience.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/audiences/ad_accounts/shared`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PATCH',
            headers: headerParameters,
        },
        body: queryParameters || SharedAudienceToJSON(requestParameters.sharedAudience),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SharedAudienceResponseFromJSON(body), text);
    }

    return config;
}

/**
* From an ad account, share a specific audience with another ad account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient ad account(s) must be in the same <a href=\'https://help.pinterest.com/en/business/article/create-and-manage-accounts\'>Pinterest Business Hierarchy</a> as the business owner of the ad account.<br> This endpoint is not available to all apps.<a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.
* Update audience sharing between ad accounts
*/
export function updateAdAccountToAdAccountSharedAudience<T>(requestParameters: UpdateAdAccountToAdAccountSharedAudienceRequest, requestConfig?: runtime.TypedQueryConfig<T, SharedAudienceResponse>): QueryConfig<T> {
    return updateAdAccountToAdAccountSharedAudienceRaw(requestParameters, requestConfig);
}

/**
 * From an ad account, share a specific audience with a business account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient business account must be in the same business hierarchy as the business owner of the ad account.<br> This endpoint is not available to all apps.<a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.
 * Update audience sharing from an ad account to businesses
 */
function updateAdAccountToBusinessSharedAudienceRaw<T>(requestParameters: UpdateAdAccountToBusinessSharedAudienceRequest, requestConfig: runtime.TypedQueryConfig<T, BusinessSharedAudienceResponse> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling updateAdAccountToBusinessSharedAudience.');
    }

    if (requestParameters.businessSharedAudience === null || requestParameters.businessSharedAudience === undefined) {
        throw new runtime.RequiredError('businessSharedAudience','Required parameter requestParameters.businessSharedAudience was null or undefined when calling updateAdAccountToBusinessSharedAudience.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/audiences/businesses/shared`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PATCH',
            headers: headerParameters,
        },
        body: queryParameters || BusinessSharedAudienceToJSON(requestParameters.businessSharedAudience),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(BusinessSharedAudienceResponseFromJSON(body), text);
    }

    return config;
}

/**
* From an ad account, share a specific audience with a business account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient business account must be in the same business hierarchy as the business owner of the ad account.<br> This endpoint is not available to all apps.<a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.
* Update audience sharing from an ad account to businesses
*/
export function updateAdAccountToBusinessSharedAudience<T>(requestParameters: UpdateAdAccountToBusinessSharedAudienceRequest, requestConfig?: runtime.TypedQueryConfig<T, BusinessSharedAudienceResponse>): QueryConfig<T> {
    return updateAdAccountToBusinessSharedAudienceRaw(requestParameters, requestConfig);
}

/**
 * From a business, share a specific audience with other ad account(s), or revoke access to a previously shared audience. <ul> <li>If the business is the owner of the audience, it can share with any ad account within the same business hierarchy.</li> <li>If the business is the recipient of the audience, it can share with any of its owned ad accounts.</li> </ul> This endpoint is not available to all apps.<a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.
 * Update audience sharing from a business to ad accounts
 */
function updateBusinessToAdAccountSharedAudienceRaw<T>(requestParameters: UpdateBusinessToAdAccountSharedAudienceRequest, requestConfig: runtime.TypedQueryConfig<T, SharedAudienceResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling updateBusinessToAdAccountSharedAudience.');
    }

    if (requestParameters.sharedAudience === null || requestParameters.sharedAudience === undefined) {
        throw new runtime.RequiredError('sharedAudience','Required parameter requestParameters.sharedAudience was null or undefined when calling updateBusinessToAdAccountSharedAudience.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["biz_access:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{business_id}/audiences/ad_accounts/shared`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PATCH',
            headers: headerParameters,
        },
        body: queryParameters || SharedAudienceToJSON(requestParameters.sharedAudience),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SharedAudienceResponseFromJSON(body), text);
    }

    return config;
}

/**
* From a business, share a specific audience with other ad account(s), or revoke access to a previously shared audience. <ul> <li>If the business is the owner of the audience, it can share with any ad account within the same business hierarchy.</li> <li>If the business is the recipient of the audience, it can share with any of its owned ad accounts.</li> </ul> This endpoint is not available to all apps.<a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.
* Update audience sharing from a business to ad accounts
*/
export function updateBusinessToAdAccountSharedAudience<T>(requestParameters: UpdateBusinessToAdAccountSharedAudienceRequest, requestConfig?: runtime.TypedQueryConfig<T, SharedAudienceResponse>): QueryConfig<T> {
    return updateBusinessToAdAccountSharedAudienceRaw(requestParameters, requestConfig);
}

/**
 * From a business, share a specific audience with another business account, or revoke access to a previously shared audience. Only the audience owner can share the audience with other businesses, and the recipient business must be within the same business hierarchy.<br> This endpoint is not available to all apps.<a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.
 * Update audience sharing between businesses
 */
function updateBusinessToBusinessSharedAudienceRaw<T>(requestParameters: UpdateBusinessToBusinessSharedAudienceRequest, requestConfig: runtime.TypedQueryConfig<T, BusinessSharedAudienceResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling updateBusinessToBusinessSharedAudience.');
    }

    if (requestParameters.businessSharedAudience === null || requestParameters.businessSharedAudience === undefined) {
        throw new runtime.RequiredError('businessSharedAudience','Required parameter requestParameters.businessSharedAudience was null or undefined when calling updateBusinessToBusinessSharedAudience.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["biz_access:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{business_id}/audiences/businesses/shared`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PATCH',
            headers: headerParameters,
        },
        body: queryParameters || BusinessSharedAudienceToJSON(requestParameters.businessSharedAudience),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(BusinessSharedAudienceResponseFromJSON(body), text);
    }

    return config;
}

/**
* From a business, share a specific audience with another business account, or revoke access to a previously shared audience. Only the audience owner can share the audience with other businesses, and the recipient business must be within the same business hierarchy.<br> This endpoint is not available to all apps.<a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.
* Update audience sharing between businesses
*/
export function updateBusinessToBusinessSharedAudience<T>(requestParameters: UpdateBusinessToBusinessSharedAudienceRequest, requestConfig?: runtime.TypedQueryConfig<T, BusinessSharedAudienceResponse>): QueryConfig<T> {
    return updateBusinessToBusinessSharedAudienceRaw(requestParameters, requestConfig);
}


/**
    * @export
    * @enum {string}
    */
export enum SharedAudiencesForBusinessListOrderEnum {
    Ascending = 'ASCENDING',
    Descending = 'DESCENDING'
}
