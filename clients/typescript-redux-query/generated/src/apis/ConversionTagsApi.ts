// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    ConversionEventResponse,
    ConversionEventResponseFromJSON,
    ConversionEventResponseToJSON,
    ConversionTagCreate,
    ConversionTagCreateFromJSON,
    ConversionTagCreateToJSON,
    ConversionTagListResponse,
    ConversionTagListResponseFromJSON,
    ConversionTagListResponseToJSON,
    ConversionTagResponse,
    ConversionTagResponseFromJSON,
    ConversionTagResponseToJSON,
    PageVisitConversionTagsGet200Response,
    PageVisitConversionTagsGet200ResponseFromJSON,
    PageVisitConversionTagsGet200ResponseToJSON,
} from '../models';

export interface ConversionTagsCreateRequest {
    adAccountId: string;
    conversionTagCreate: ConversionTagCreate;
}

export interface ConversionTagsGetRequest {
    adAccountId: string;
    conversionTagId: string;
}

export interface ConversionTagsListRequest {
    adAccountId: string;
    filterDeleted?: boolean;
}

export interface OcpmEligibleConversionTagsGetRequest {
    adAccountId: string;
}

export interface PageVisitConversionTagsGetRequest {
    adAccountId: string;
    pageSize?: number;
    order?: PageVisitConversionTagsGetOrderEnum;
    bookmark?: string;
}


/**
 * Create a conversion tag, also known as <a href=\"https://help.pinterest.com/en/business/article/set-up-the-pinterest-tag\" target=\"_blank\">Pinterest tag</a>, with the option to enable enhanced match.<p/> The Pinterest Tag tracks actions people take on the ad account’ s website after they view the ad account\'s ad on Pinterest. The advertiser needs to customize this tag to track conversions.<p/> For more information, see:<p/> <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/set-up-the-pinterest-tag\">Set up the Pinterest tag</a><p/> <a class=\"reference external\" href=\"/docs/api-features/pinterest-tag/\">Pinterest Tag</a><p/> <a class=\"reference external\" href=\"/docs/api-features/pinterest-tag/#enhanced-match\">Enhanced match</a>
 * Create conversion tag
 */
function conversionTagsCreateRaw<T>(requestParameters: ConversionTagsCreateRequest, requestConfig: runtime.TypedQueryConfig<T, ConversionTagResponse> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling conversionTagsCreate.');
    }

    if (requestParameters.conversionTagCreate === null || requestParameters.conversionTagCreate === undefined) {
        throw new runtime.RequiredError('conversionTagCreate','Required parameter requestParameters.conversionTagCreate was null or undefined when calling conversionTagsCreate.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/conversion_tags`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ConversionTagCreateToJSON(requestParameters.conversionTagCreate),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ConversionTagResponseFromJSON(body), text);
    }

    return config;
}

/**
* Create a conversion tag, also known as <a href=\"https://help.pinterest.com/en/business/article/set-up-the-pinterest-tag\" target=\"_blank\">Pinterest tag</a>, with the option to enable enhanced match.<p/> The Pinterest Tag tracks actions people take on the ad account’ s website after they view the ad account\'s ad on Pinterest. The advertiser needs to customize this tag to track conversions.<p/> For more information, see:<p/> <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/set-up-the-pinterest-tag\">Set up the Pinterest tag</a><p/> <a class=\"reference external\" href=\"/docs/api-features/pinterest-tag/\">Pinterest Tag</a><p/> <a class=\"reference external\" href=\"/docs/api-features/pinterest-tag/#enhanced-match\">Enhanced match</a>
* Create conversion tag
*/
export function conversionTagsCreate<T>(requestParameters: ConversionTagsCreateRequest, requestConfig?: runtime.TypedQueryConfig<T, ConversionTagResponse>): QueryConfig<T> {
    return conversionTagsCreateRaw(requestParameters, requestConfig);
}

/**
 * Get information about an existing conversion tag.
 * Get conversion tag
 */
function conversionTagsGetRaw<T>(requestParameters: ConversionTagsGetRequest, requestConfig: runtime.TypedQueryConfig<T, ConversionTagResponse> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling conversionTagsGet.');
    }

    if (requestParameters.conversionTagId === null || requestParameters.conversionTagId === undefined) {
        throw new runtime.RequiredError('conversionTagId','Required parameter requestParameters.conversionTagId was null or undefined when calling conversionTagsGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/conversion_tags/{conversion_tag_id}`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))).replace(`{${"conversion_tag_id"}}`, encodeURIComponent(String(requestParameters.conversionTagId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ConversionTagResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get information about an existing conversion tag.
* Get conversion tag
*/
export function conversionTagsGet<T>(requestParameters: ConversionTagsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, ConversionTagResponse>): QueryConfig<T> {
    return conversionTagsGetRaw(requestParameters, requestConfig);
}

/**
 * List conversion tags associated with an ad account.
 * Get conversion tags
 */
function conversionTagsListRaw<T>(requestParameters: ConversionTagsListRequest, requestConfig: runtime.TypedQueryConfig<T, ConversionTagListResponse> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling conversionTagsList.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.filterDeleted !== undefined) {
        queryParameters['filter_deleted'] = requestParameters.filterDeleted;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/conversion_tags`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ConversionTagListResponseFromJSON(body), text);
    }

    return config;
}

/**
* List conversion tags associated with an ad account.
* Get conversion tags
*/
export function conversionTagsList<T>(requestParameters: ConversionTagsListRequest, requestConfig?: runtime.TypedQueryConfig<T, ConversionTagListResponse>): QueryConfig<T> {
    return conversionTagsListRaw(requestParameters, requestConfig);
}

/**
 * Get Ocpm eligible conversion tag events for an ad account.
 * Get Ocpm eligible conversion tags
 */
function ocpmEligibleConversionTagsGetRaw<T>(requestParameters: OcpmEligibleConversionTagsGetRequest, requestConfig: runtime.TypedQueryConfig<T, { [key: string]: Array<ConversionEventResponse>; }> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling ocpmEligibleConversionTagsGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/conversion_tags/ocpm_eligible`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Get Ocpm eligible conversion tag events for an ad account.
* Get Ocpm eligible conversion tags
*/
export function ocpmEligibleConversionTagsGet<T>(requestParameters: OcpmEligibleConversionTagsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, { [key: string]: Array<ConversionEventResponse>; }>): QueryConfig<T> {
    return ocpmEligibleConversionTagsGetRaw(requestParameters, requestConfig);
}

/**
 * Get all page visit conversion tag events for an ad account.
 * Get page visit conversion tags
 */
function pageVisitConversionTagsGetRaw<T>(requestParameters: PageVisitConversionTagsGetRequest, requestConfig: runtime.TypedQueryConfig<T, PageVisitConversionTagsGet200Response> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling pageVisitConversionTagsGet.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.pageSize !== undefined) {
        queryParameters['page_size'] = requestParameters.pageSize;
    }


    if (requestParameters.order !== undefined) {
        queryParameters['order'] = requestParameters.order;
    }


    if (requestParameters.bookmark !== undefined) {
        queryParameters['bookmark'] = requestParameters.bookmark;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/conversion_tags/page_visit`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PageVisitConversionTagsGet200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get all page visit conversion tag events for an ad account.
* Get page visit conversion tags
*/
export function pageVisitConversionTagsGet<T>(requestParameters: PageVisitConversionTagsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, PageVisitConversionTagsGet200Response>): QueryConfig<T> {
    return pageVisitConversionTagsGetRaw(requestParameters, requestConfig);
}


/**
    * @export
    * @enum {string}
    */
export enum PageVisitConversionTagsGetOrderEnum {
    Ascending = 'ASCENDING',
    Descending = 'DESCENDING'
}
