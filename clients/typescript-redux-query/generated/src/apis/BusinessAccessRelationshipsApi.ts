// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    DeletePartnersRequest,
    DeletePartnersRequestFromJSON,
    DeletePartnersRequestToJSON,
    DeletePartnersResponse,
    DeletePartnersResponseFromJSON,
    DeletePartnersResponseToJSON,
    DeletedMembersResponse,
    DeletedMembersResponseFromJSON,
    DeletedMembersResponseToJSON,
    GetBusinessEmployers200Response,
    GetBusinessEmployers200ResponseFromJSON,
    GetBusinessEmployers200ResponseToJSON,
    GetBusinessMembers200Response,
    GetBusinessMembers200ResponseFromJSON,
    GetBusinessMembers200ResponseToJSON,
    GetBusinessPartners200Response,
    GetBusinessPartners200ResponseFromJSON,
    GetBusinessPartners200ResponseToJSON,
    MemberBusinessRole,
    MemberBusinessRoleFromJSON,
    MemberBusinessRoleToJSON,
    MembersToDeleteBody,
    MembersToDeleteBodyFromJSON,
    MembersToDeleteBodyToJSON,
    PartnerType,
    PartnerTypeFromJSON,
    PartnerTypeToJSON,
    UpdateMemberBusinessRoleBody,
    UpdateMemberBusinessRoleBodyFromJSON,
    UpdateMemberBusinessRoleBodyToJSON,
    UpdateMemberResultsResponseArray,
    UpdateMemberResultsResponseArrayFromJSON,
    UpdateMemberResultsResponseArrayToJSON,
} from '../models';

export interface DeleteBusinessMembershipRequest {
    businessId: string;
    membersToDeleteBody: MembersToDeleteBody;
}

export interface DeleteBusinessPartnersRequest {
    businessId: string;
    deletePartnersRequest: DeletePartnersRequest;
}

export interface GetBusinessEmployersRequest {
    pageSize?: number;
    bookmark?: string;
}

export interface GetBusinessMembersRequest {
    businessId: string;
    assetsSummary?: boolean;
    businessRoles?: Array<MemberBusinessRole>;
    memberIds?: string;
    startIndex?: number;
    bookmark?: string;
    pageSize?: number;
}

export interface GetBusinessPartnersRequest {
    businessId: string;
    assetsSummary?: boolean;
    partnerType?: PartnerType;
    partnerIds?: string;
    startIndex?: number;
    pageSize?: number;
    bookmark?: string;
}

export interface UpdateBusinessMembershipsRequest {
    businessId: string;
    updateMemberBusinessRoleBody: Array<UpdateMemberBusinessRoleBody>;
}


/**
 * Terminate memberships between the specified members and your business.
 * Terminate business memberships
 */
function deleteBusinessMembershipRaw<T>(requestParameters: DeleteBusinessMembershipRequest, requestConfig: runtime.TypedQueryConfig<T, DeletedMembersResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling deleteBusinessMembership.');
    }

    if (requestParameters.membersToDeleteBody === null || requestParameters.membersToDeleteBody === undefined) {
        throw new runtime.RequiredError('membersToDeleteBody','Required parameter requestParameters.membersToDeleteBody was null or undefined when calling deleteBusinessMembership.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["biz_access:read", "biz_access:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{business_id}/members`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters || MembersToDeleteBodyToJSON(requestParameters.membersToDeleteBody),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(DeletedMembersResponseFromJSON(body), text);
    }

    return config;
}

/**
* Terminate memberships between the specified members and your business.
* Terminate business memberships
*/
export function deleteBusinessMembership<T>(requestParameters: DeleteBusinessMembershipRequest, requestConfig?: runtime.TypedQueryConfig<T, DeletedMembersResponse>): QueryConfig<T> {
    return deleteBusinessMembershipRaw(requestParameters, requestConfig);
}

/**
 * Terminate partnerships between the specified partners and your business. Note: You may only batch terminate partners of the same partner type.
 * Terminate business partnerships
 */
function deleteBusinessPartnersRaw<T>(requestParameters: DeleteBusinessPartnersRequest, requestConfig: runtime.TypedQueryConfig<T, DeletePartnersResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling deleteBusinessPartners.');
    }

    if (requestParameters.deletePartnersRequest === null || requestParameters.deletePartnersRequest === undefined) {
        throw new runtime.RequiredError('deletePartnersRequest','Required parameter requestParameters.deletePartnersRequest was null or undefined when calling deleteBusinessPartners.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["biz_access:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{business_id}/partners`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters || DeletePartnersRequestToJSON(requestParameters.deletePartnersRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(DeletePartnersResponseFromJSON(body), text);
    }

    return config;
}

/**
* Terminate partnerships between the specified partners and your business. Note: You may only batch terminate partners of the same partner type.
* Terminate business partnerships
*/
export function deleteBusinessPartners<T>(requestParameters: DeleteBusinessPartnersRequest, requestConfig?: runtime.TypedQueryConfig<T, DeletePartnersResponse>): QueryConfig<T> {
    return deleteBusinessPartnersRaw(requestParameters, requestConfig);
}

/**
 * Get all of the viewing user\'s business employers.
 * List business employers for user
 */
function getBusinessEmployersRaw<T>(requestParameters: GetBusinessEmployersRequest, requestConfig: runtime.TypedQueryConfig<T, GetBusinessEmployers200Response> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.pageSize !== undefined) {
        queryParameters['page_size'] = requestParameters.pageSize;
    }


    if (requestParameters.bookmark !== undefined) {
        queryParameters['bookmark'] = requestParameters.bookmark;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["biz_access:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/employers`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetBusinessEmployers200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get all of the viewing user\'s business employers.
* List business employers for user
*/
export function getBusinessEmployers<T>(requestParameters: GetBusinessEmployersRequest, requestConfig?: runtime.TypedQueryConfig<T, GetBusinessEmployers200Response>): QueryConfig<T> {
    return getBusinessEmployersRaw(requestParameters, requestConfig);
}

/**
 * Get all members of the specified business. The return response will include the member\'s business_role and assets they have access to if assets_summary=TRUE
 * Get business members
 */
function getBusinessMembersRaw<T>(requestParameters: GetBusinessMembersRequest, requestConfig: runtime.TypedQueryConfig<T, GetBusinessMembers200Response> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling getBusinessMembers.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.assetsSummary !== undefined) {
        queryParameters['assets_summary'] = requestParameters.assetsSummary;
    }


    if (requestParameters.businessRoles) {
        queryParameters['business_roles'] = requestParameters.businessRoles;
    }


    if (requestParameters.memberIds !== undefined) {
        queryParameters['member_ids'] = requestParameters.memberIds;
    }


    if (requestParameters.startIndex !== undefined) {
        queryParameters['start_index'] = requestParameters.startIndex;
    }


    if (requestParameters.bookmark !== undefined) {
        queryParameters['bookmark'] = requestParameters.bookmark;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['page_size'] = requestParameters.pageSize;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["biz_access:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{business_id}/members`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetBusinessMembers200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get all members of the specified business. The return response will include the member\'s business_role and assets they have access to if assets_summary=TRUE
* Get business members
*/
export function getBusinessMembers<T>(requestParameters: GetBusinessMembersRequest, requestConfig?: runtime.TypedQueryConfig<T, GetBusinessMembers200Response>): QueryConfig<T> {
    return getBusinessMembersRaw(requestParameters, requestConfig);
}

/**
 * Get all partners of the specified business.  If the assets_summary=TRUE and: - partner_type=INTERNAL, the business assets returned are your business assets the partner has access to. - partner_type=EXTERNAL, the business assets returned are your partner\'s business assets the partner has granted you   access to.
 * Get business partners
 */
function getBusinessPartnersRaw<T>(requestParameters: GetBusinessPartnersRequest, requestConfig: runtime.TypedQueryConfig<T, GetBusinessPartners200Response> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling getBusinessPartners.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.assetsSummary !== undefined) {
        queryParameters['assets_summary'] = requestParameters.assetsSummary;
    }


    if (requestParameters.partnerType !== undefined) {
        queryParameters['partner_type'] = requestParameters.partnerType;
    }


    if (requestParameters.partnerIds !== undefined) {
        queryParameters['partner_ids'] = requestParameters.partnerIds;
    }


    if (requestParameters.startIndex !== undefined) {
        queryParameters['start_index'] = requestParameters.startIndex;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['page_size'] = requestParameters.pageSize;
    }


    if (requestParameters.bookmark !== undefined) {
        queryParameters['bookmark'] = requestParameters.bookmark;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["biz_access:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{business_id}/partners`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetBusinessPartners200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get all partners of the specified business.  If the assets_summary=TRUE and: - partner_type=INTERNAL, the business assets returned are your business assets the partner has access to. - partner_type=EXTERNAL, the business assets returned are your partner\'s business assets the partner has granted you   access to.
* Get business partners
*/
export function getBusinessPartners<T>(requestParameters: GetBusinessPartnersRequest, requestConfig?: runtime.TypedQueryConfig<T, GetBusinessPartners200Response>): QueryConfig<T> {
    return getBusinessPartnersRaw(requestParameters, requestConfig);
}

/**
 * Update a member\'s business role within the business.
 * Update member\'s business role
 */
function updateBusinessMembershipsRaw<T>(requestParameters: UpdateBusinessMembershipsRequest, requestConfig: runtime.TypedQueryConfig<T, UpdateMemberResultsResponseArray> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling updateBusinessMemberships.');
    }

    if (requestParameters.updateMemberBusinessRoleBody === null || requestParameters.updateMemberBusinessRoleBody === undefined) {
        throw new runtime.RequiredError('updateMemberBusinessRoleBody','Required parameter requestParameters.updateMemberBusinessRoleBody was null or undefined when calling updateBusinessMemberships.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["biz_access:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{business_id}/members`.replace(`{${"business_id"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PATCH',
            headers: headerParameters,
        },
        body: queryParameters || requestParameters.updateMemberBusinessRoleBody?.map(UpdateMemberBusinessRoleBodyToJSON),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UpdateMemberResultsResponseArrayFromJSON(body), text);
    }

    return config;
}

/**
* Update a member\'s business role within the business.
* Update member\'s business role
*/
export function updateBusinessMemberships<T>(requestParameters: UpdateBusinessMembershipsRequest, requestConfig?: runtime.TypedQueryConfig<T, UpdateMemberResultsResponseArray>): QueryConfig<T> {
    return updateBusinessMembershipsRaw(requestParameters, requestConfig);
}

