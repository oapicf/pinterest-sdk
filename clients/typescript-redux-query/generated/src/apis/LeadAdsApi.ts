// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    AdAccountCreateSubscriptionRequest,
    AdAccountCreateSubscriptionRequestFromJSON,
    AdAccountCreateSubscriptionRequestToJSON,
    AdAccountCreateSubscriptionResponse,
    AdAccountCreateSubscriptionResponseFromJSON,
    AdAccountCreateSubscriptionResponseToJSON,
    AdAccountGetSubscriptionResponse,
    AdAccountGetSubscriptionResponseFromJSON,
    AdAccountGetSubscriptionResponseToJSON,
    AdAccountsSubscriptionsGetList200Response,
    AdAccountsSubscriptionsGetList200ResponseFromJSON,
    AdAccountsSubscriptionsGetList200ResponseToJSON,
} from '../models';

export interface AdAccountsSubscriptionsDelByIdRequest {
    adAccountId: string;
    subscriptionId: string;
}

export interface AdAccountsSubscriptionsGetByIdRequest {
    adAccountId: string;
    subscriptionId: string;
}

export interface AdAccountsSubscriptionsGetListRequest {
    adAccountId: string;
    pageSize?: number;
    bookmark?: string;
}

export interface AdAccountsSubscriptionsPostRequest {
    adAccountId: string;
    adAccountCreateSubscriptionRequest: AdAccountCreateSubscriptionRequest;
}


/**
 * Delete an existing lead ads webhook subscription by ID. - Only requests for the OWNER or ADMIN of the ad_account will be allowed.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.</strong>
 * Delete lead ads subscription
 */
function adAccountsSubscriptionsDelByIdRaw<T>(requestParameters: AdAccountsSubscriptionsDelByIdRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling adAccountsSubscriptionsDelById.');
    }

    if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
        throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling adAccountsSubscriptionsDelById.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/leads/subscriptions/{subscription_id}`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))).replace(`{${"subscription_id"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Delete an existing lead ads webhook subscription by ID. - Only requests for the OWNER or ADMIN of the ad_account will be allowed.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.</strong>
* Delete lead ads subscription
*/
export function adAccountsSubscriptionsDelById<T>(requestParameters: AdAccountsSubscriptionsDelByIdRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return adAccountsSubscriptionsDelByIdRaw(requestParameters, requestConfig);
}

/**
 * Get a specific lead ads subscription record. - Only requests for the OWNER or ADMIN of the ad_account will be allowed.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.</strong>
 * Get lead ads subscription
 */
function adAccountsSubscriptionsGetByIdRaw<T>(requestParameters: AdAccountsSubscriptionsGetByIdRequest, requestConfig: runtime.TypedQueryConfig<T, AdAccountGetSubscriptionResponse> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling adAccountsSubscriptionsGetById.');
    }

    if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
        throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling adAccountsSubscriptionsGetById.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/leads/subscriptions/{subscription_id}`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))).replace(`{${"subscription_id"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AdAccountGetSubscriptionResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get a specific lead ads subscription record. - Only requests for the OWNER or ADMIN of the ad_account will be allowed.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.</strong>
* Get lead ads subscription
*/
export function adAccountsSubscriptionsGetById<T>(requestParameters: AdAccountsSubscriptionsGetByIdRequest, requestConfig?: runtime.TypedQueryConfig<T, AdAccountGetSubscriptionResponse>): QueryConfig<T> {
    return adAccountsSubscriptionsGetByIdRaw(requestParameters, requestConfig);
}

/**
 * Get the advertiser\'s list of lead ads subscriptions. - Only requests for the OWNER or ADMIN of the ad_account will be allowed.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.</strong>
 * Get lead ads subscriptions
 */
function adAccountsSubscriptionsGetListRaw<T>(requestParameters: AdAccountsSubscriptionsGetListRequest, requestConfig: runtime.TypedQueryConfig<T, AdAccountsSubscriptionsGetList200Response> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling adAccountsSubscriptionsGetList.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.pageSize !== undefined) {
        queryParameters['page_size'] = requestParameters.pageSize;
    }


    if (requestParameters.bookmark !== undefined) {
        queryParameters['bookmark'] = requestParameters.bookmark;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/leads/subscriptions`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AdAccountsSubscriptionsGetList200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get the advertiser\'s list of lead ads subscriptions. - Only requests for the OWNER or ADMIN of the ad_account will be allowed.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.</strong>
* Get lead ads subscriptions
*/
export function adAccountsSubscriptionsGetList<T>(requestParameters: AdAccountsSubscriptionsGetListRequest, requestConfig?: runtime.TypedQueryConfig<T, AdAccountsSubscriptionsGetList200Response>): QueryConfig<T> {
    return adAccountsSubscriptionsGetListRaw(requestParameters, requestConfig);
}

/**
 * Create a lead ads webhook subscription. Subscriptions allow Pinterest to deliver lead data from Ads Manager directly to the subscriber. Subscriptions can exist for a specific lead form or at ad account level. - Only requests for the OWNER or ADMIN of the ad_account will be allowed. - Advertisers can set up multiple integrations using ad_account_id + lead_form_id but only one integration per unique records. - For data security, egress lead data is encrypted with AES-256-GCM.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.</strong>
 * Create lead ads subscription
 */
function adAccountsSubscriptionsPostRaw<T>(requestParameters: AdAccountsSubscriptionsPostRequest, requestConfig: runtime.TypedQueryConfig<T, AdAccountCreateSubscriptionResponse> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling adAccountsSubscriptionsPost.');
    }

    if (requestParameters.adAccountCreateSubscriptionRequest === null || requestParameters.adAccountCreateSubscriptionRequest === undefined) {
        throw new runtime.RequiredError('adAccountCreateSubscriptionRequest','Required parameter requestParameters.adAccountCreateSubscriptionRequest was null or undefined when calling adAccountsSubscriptionsPost.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/leads/subscriptions`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || AdAccountCreateSubscriptionRequestToJSON(requestParameters.adAccountCreateSubscriptionRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AdAccountCreateSubscriptionResponseFromJSON(body), text);
    }

    return config;
}

/**
* Create a lead ads webhook subscription. Subscriptions allow Pinterest to deliver lead data from Ads Manager directly to the subscriber. Subscriptions can exist for a specific lead form or at ad account level. - Only requests for the OWNER or ADMIN of the ad_account will be allowed. - Advertisers can set up multiple integrations using ad_account_id + lead_form_id but only one integration per unique records. - For data security, egress lead data is encrypted with AES-256-GCM.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.</strong>
* Create lead ads subscription
*/
export function adAccountsSubscriptionsPost<T>(requestParameters: AdAccountsSubscriptionsPostRequest, requestConfig?: runtime.TypedQueryConfig<T, AdAccountCreateSubscriptionResponse>): QueryConfig<T> {
    return adAccountsSubscriptionsPostRaw(requestParameters, requestConfig);
}

