// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    OauthAccessTokenResponse,
    OauthAccessTokenResponseFromJSON,
    OauthAccessTokenResponseToJSON,
} from '../models';

export interface OauthTokenRequest {
    grantType: OauthTokenGrantTypeEnum;
}


/**
 * Generate an OAuth access token by using an authorization code or a refresh token.  IMPORTANT: You need to start the OAuth flow via www.pinterest.com/oauth before calling this endpoint (or have an existing refresh token).  See <a href=\'/docs/getting-started/authentication-and-scopes/\'>Authentication</a> for more.  <strong>Parameter <i>refresh_on</i> and its corresponding response type <i>everlasting_refresh</i> are now available to all apps! Later this year, continuous refresh will become the default behavior (ie you will no longer need to send this parameter). <a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.</strong>  <strong>Grant type <i>client_credentials</i> and its corresponding response type are not fully available. You will likely get a default error if you attempt to use this grant_type.</strong>
 * Generate OAuth access token
 */
function oauthTokenRaw<T>(requestParameters: OauthTokenRequest, requestConfig: runtime.TypedQueryConfig<T, OauthAccessTokenResponse> = {}): QueryConfig<T> {
    if (requestParameters.grantType === null || requestParameters.grantType === undefined) {
        throw new runtime.RequiredError('grantType','Required parameter requestParameters.grantType was null or undefined when calling oauthToken.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const formData = new FormData();
    if (requestParameters.grantType !== undefined) {
        formData.append('grant_type', requestParameters.grantType as any);
    }

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/oauth/token`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: formData,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OauthAccessTokenResponseFromJSON(body), text);
    }

    return config;
}

/**
* Generate an OAuth access token by using an authorization code or a refresh token.  IMPORTANT: You need to start the OAuth flow via www.pinterest.com/oauth before calling this endpoint (or have an existing refresh token).  See <a href=\'/docs/getting-started/authentication-and-scopes/\'>Authentication</a> for more.  <strong>Parameter <i>refresh_on</i> and its corresponding response type <i>everlasting_refresh</i> are now available to all apps! Later this year, continuous refresh will become the default behavior (ie you will no longer need to send this parameter). <a href=\'/docs/getting-started/beta-and-advanced-access/\'>Learn more</a>.</strong>  <strong>Grant type <i>client_credentials</i> and its corresponding response type are not fully available. You will likely get a default error if you attempt to use this grant_type.</strong>
* Generate OAuth access token
*/
export function oauthToken<T>(requestParameters: OauthTokenRequest, requestConfig?: runtime.TypedQueryConfig<T, OauthAccessTokenResponse>): QueryConfig<T> {
    return oauthTokenRaw(requestParameters, requestConfig);
}


/**
    * @export
    * @enum {string}
    */
export enum OauthTokenGrantTypeEnum {
    AuthorizationCode = 'authorization_code',
    RefreshToken = 'refresh_token',
    ClientCredentials = 'client_credentials'
}
