// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    AdAccount,
    AdAccountFromJSON,
    AdAccountToJSON,
    AdAccountAnalyticsResponseInner,
    AdAccountAnalyticsResponseInnerFromJSON,
    AdAccountAnalyticsResponseInnerToJSON,
    AdAccountCreateRequest,
    AdAccountCreateRequestFromJSON,
    AdAccountCreateRequestToJSON,
    AdAccountsList200Response,
    AdAccountsList200ResponseFromJSON,
    AdAccountsList200ResponseToJSON,
    AdsAnalyticsCreateAsyncRequest,
    AdsAnalyticsCreateAsyncRequestFromJSON,
    AdsAnalyticsCreateAsyncRequestToJSON,
    AdsAnalyticsCreateAsyncResponse,
    AdsAnalyticsCreateAsyncResponseFromJSON,
    AdsAnalyticsCreateAsyncResponseToJSON,
    AdsAnalyticsGetAsyncResponse,
    AdsAnalyticsGetAsyncResponseFromJSON,
    AdsAnalyticsGetAsyncResponseToJSON,
    AdsAnalyticsTargetingType,
    AdsAnalyticsTargetingTypeFromJSON,
    AdsAnalyticsTargetingTypeToJSON,
    ConversionReportAttributionType,
    ConversionReportAttributionTypeFromJSON,
    ConversionReportAttributionTypeToJSON,
    CreateMMMReportRequest,
    CreateMMMReportRequestFromJSON,
    CreateMMMReportRequestToJSON,
    CreateMMMReportResponse,
    CreateMMMReportResponseFromJSON,
    CreateMMMReportResponseToJSON,
    GetMMMReportResponse,
    GetMMMReportResponseFromJSON,
    GetMMMReportResponseToJSON,
    Granularity,
    GranularityFromJSON,
    GranularityToJSON,
    MetricsResponse,
    MetricsResponseFromJSON,
    MetricsResponseToJSON,
    TemplatesList200Response,
    TemplatesList200ResponseFromJSON,
    TemplatesList200ResponseToJSON,
} from '../models';

export interface AdAccountAnalyticsRequest {
    adAccountId: string;
    startDate: Date;
    endDate: Date;
    columns: Array<AdAccountAnalyticsColumnsEnum>;
    granularity: Granularity;
    clickWindowDays?: AdAccountAnalyticsClickWindowDaysEnum;
    engagementWindowDays?: AdAccountAnalyticsEngagementWindowDaysEnum;
    viewWindowDays?: AdAccountAnalyticsViewWindowDaysEnum;
    conversionReportTime?: AdAccountAnalyticsConversionReportTimeEnum;
}

export interface AdAccountTargetingAnalyticsGetRequest {
    adAccountId: string;
    startDate: Date;
    endDate: Date;
    targetingTypes: Array<AdsAnalyticsTargetingType>;
    columns: Array<AdAccountTargetingAnalyticsGetColumnsEnum>;
    granularity: Granularity;
    clickWindowDays?: AdAccountTargetingAnalyticsGetClickWindowDaysEnum;
    engagementWindowDays?: AdAccountTargetingAnalyticsGetEngagementWindowDaysEnum;
    viewWindowDays?: AdAccountTargetingAnalyticsGetViewWindowDaysEnum;
    conversionReportTime?: AdAccountTargetingAnalyticsGetConversionReportTimeEnum;
    attributionTypes?: ConversionReportAttributionType;
}

export interface AdAccountsCreateRequest {
    adAccountCreateRequest: AdAccountCreateRequest;
}

export interface AdAccountsGetRequest {
    adAccountId: string;
}

export interface AdAccountsListRequest {
    bookmark?: string;
    pageSize?: number;
    includeSharedAccounts?: boolean;
}

export interface AnalyticsCreateMmmReportRequest {
    adAccountId: string;
    createMMMReportRequest: CreateMMMReportRequest;
}

export interface AnalyticsCreateReportRequest {
    adAccountId: string;
    adsAnalyticsCreateAsyncRequest: AdsAnalyticsCreateAsyncRequest;
}

export interface AnalyticsCreateTemplateReportRequest {
    adAccountId: string;
    templateId: string;
    startDate?: Date;
    endDate?: Date;
    granularity?: Granularity;
}

export interface AnalyticsGetMmmReportRequest {
    adAccountId: string;
    token: string;
}

export interface AnalyticsGetReportRequest {
    adAccountId: string;
    token: string;
}

export interface SandboxDeleteRequest {
    adAccountId: string;
}

export interface TemplatesListRequest {
    adAccountId: string;
    pageSize?: number;
    order?: TemplatesListOrderEnum;
    bookmark?: string;
}


/**
 * Get analytics for the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time.
 * Get ad account analytics
 */
function adAccountAnalyticsRaw<T>(requestParameters: AdAccountAnalyticsRequest, requestConfig: runtime.TypedQueryConfig<T, Array<AdAccountAnalyticsResponseInner>> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling adAccountAnalytics.');
    }

    if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
        throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling adAccountAnalytics.');
    }

    if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
        throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling adAccountAnalytics.');
    }

    if (requestParameters.columns === null || requestParameters.columns === undefined) {
        throw new runtime.RequiredError('columns','Required parameter requestParameters.columns was null or undefined when calling adAccountAnalytics.');
    }

    if (requestParameters.granularity === null || requestParameters.granularity === undefined) {
        throw new runtime.RequiredError('granularity','Required parameter requestParameters.granularity was null or undefined when calling adAccountAnalytics.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.startDate !== undefined) {
        queryParameters['start_date'] = (requestParameters.startDate as any).toISOString().substring(0,10);
    }


    if (requestParameters.endDate !== undefined) {
        queryParameters['end_date'] = (requestParameters.endDate as any).toISOString().substring(0,10);
    }


    if (requestParameters.columns) {
        queryParameters['columns'] = requestParameters.columns?.join(runtime.COLLECTION_FORMATS["csv"]);
    }


    if (requestParameters.granularity !== undefined) {
        queryParameters['granularity'] = requestParameters.granularity;
    }


    if (requestParameters.clickWindowDays !== undefined) {
        queryParameters['click_window_days'] = requestParameters.clickWindowDays;
    }


    if (requestParameters.engagementWindowDays !== undefined) {
        queryParameters['engagement_window_days'] = requestParameters.engagementWindowDays;
    }


    if (requestParameters.viewWindowDays !== undefined) {
        queryParameters['view_window_days'] = requestParameters.viewWindowDays;
    }


    if (requestParameters.conversionReportTime !== undefined) {
        queryParameters['conversion_report_time'] = requestParameters.conversionReportTime;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/analytics`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(AdAccountAnalyticsResponseInnerFromJSON), text);
    }

    return config;
}

/**
* Get analytics for the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time.
* Get ad account analytics
*/
export function adAccountAnalytics<T>(requestParameters: AdAccountAnalyticsRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<AdAccountAnalyticsResponseInner>>): QueryConfig<T> {
    return adAccountAnalyticsRaw(requestParameters, requestConfig);
}

/**
 * Get targeting analytics for an ad account. For the requested account and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \"age_bucket\") for applicable values (e.g. \"45-49\"). <p/> - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
 * Get targeting analytics for an ad account
 */
function adAccountTargetingAnalyticsGetRaw<T>(requestParameters: AdAccountTargetingAnalyticsGetRequest, requestConfig: runtime.TypedQueryConfig<T, MetricsResponse> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling adAccountTargetingAnalyticsGet.');
    }

    if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
        throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling adAccountTargetingAnalyticsGet.');
    }

    if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
        throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling adAccountTargetingAnalyticsGet.');
    }

    if (requestParameters.targetingTypes === null || requestParameters.targetingTypes === undefined) {
        throw new runtime.RequiredError('targetingTypes','Required parameter requestParameters.targetingTypes was null or undefined when calling adAccountTargetingAnalyticsGet.');
    }

    if (requestParameters.columns === null || requestParameters.columns === undefined) {
        throw new runtime.RequiredError('columns','Required parameter requestParameters.columns was null or undefined when calling adAccountTargetingAnalyticsGet.');
    }

    if (requestParameters.granularity === null || requestParameters.granularity === undefined) {
        throw new runtime.RequiredError('granularity','Required parameter requestParameters.granularity was null or undefined when calling adAccountTargetingAnalyticsGet.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.startDate !== undefined) {
        queryParameters['start_date'] = (requestParameters.startDate as any).toISOString().substring(0,10);
    }


    if (requestParameters.endDate !== undefined) {
        queryParameters['end_date'] = (requestParameters.endDate as any).toISOString().substring(0,10);
    }


    if (requestParameters.targetingTypes) {
        queryParameters['targeting_types'] = requestParameters.targetingTypes?.join(runtime.COLLECTION_FORMATS["csv"]);
    }


    if (requestParameters.columns) {
        queryParameters['columns'] = requestParameters.columns?.join(runtime.COLLECTION_FORMATS["csv"]);
    }


    if (requestParameters.granularity !== undefined) {
        queryParameters['granularity'] = requestParameters.granularity;
    }


    if (requestParameters.clickWindowDays !== undefined) {
        queryParameters['click_window_days'] = requestParameters.clickWindowDays;
    }


    if (requestParameters.engagementWindowDays !== undefined) {
        queryParameters['engagement_window_days'] = requestParameters.engagementWindowDays;
    }


    if (requestParameters.viewWindowDays !== undefined) {
        queryParameters['view_window_days'] = requestParameters.viewWindowDays;
    }


    if (requestParameters.conversionReportTime !== undefined) {
        queryParameters['conversion_report_time'] = requestParameters.conversionReportTime;
    }


    if (requestParameters.attributionTypes !== undefined) {
        queryParameters['attribution_types'] = requestParameters.attributionTypes;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/targeting_analytics`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(MetricsResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get targeting analytics for an ad account. For the requested account and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \"age_bucket\") for applicable values (e.g. \"45-49\"). <p/> - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
* Get targeting analytics for an ad account
*/
export function adAccountTargetingAnalyticsGet<T>(requestParameters: AdAccountTargetingAnalyticsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, MetricsResponse>): QueryConfig<T> {
    return adAccountTargetingAnalyticsGetRaw(requestParameters, requestConfig);
}

/**
 * Create a new ad account. Different ad accounts can support different currencies, payment methods, etc. An ad account is needed to create campaigns, ad groups, and ads; other accounts (your employees or partners) can be assigned business access and appropriate roles to access an ad account. <p/> You can set up up to 50 ad accounts per user. (The user must have a business account to create an ad account.) <p/> For more, see <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/create-an-advertiser-account\">Create an advertiser account</a>.
 * Create ad account
 */
function adAccountsCreateRaw<T>(requestParameters: AdAccountsCreateRequest, requestConfig: runtime.TypedQueryConfig<T, AdAccount> = {}): QueryConfig<T> {
    if (requestParameters.adAccountCreateRequest === null || requestParameters.adAccountCreateRequest === undefined) {
        throw new runtime.RequiredError('adAccountCreateRequest','Required parameter requestParameters.adAccountCreateRequest was null or undefined when calling adAccountsCreate.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || AdAccountCreateRequestToJSON(requestParameters.adAccountCreateRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AdAccountFromJSON(body), text);
    }

    return config;
}

/**
* Create a new ad account. Different ad accounts can support different currencies, payment methods, etc. An ad account is needed to create campaigns, ad groups, and ads; other accounts (your employees or partners) can be assigned business access and appropriate roles to access an ad account. <p/> You can set up up to 50 ad accounts per user. (The user must have a business account to create an ad account.) <p/> For more, see <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/create-an-advertiser-account\">Create an advertiser account</a>.
* Create ad account
*/
export function adAccountsCreate<T>(requestParameters: AdAccountsCreateRequest, requestConfig?: runtime.TypedQueryConfig<T, AdAccount>): QueryConfig<T> {
    return adAccountsCreateRaw(requestParameters, requestConfig);
}

/**
 * Get an ad account
 * Get ad account
 */
function adAccountsGetRaw<T>(requestParameters: AdAccountsGetRequest, requestConfig: runtime.TypedQueryConfig<T, AdAccount> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling adAccountsGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AdAccountFromJSON(body), text);
    }

    return config;
}

/**
* Get an ad account
* Get ad account
*/
export function adAccountsGet<T>(requestParameters: AdAccountsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, AdAccount>): QueryConfig<T> {
    return adAccountsGetRaw(requestParameters, requestConfig);
}

/**
 * Get a list of the ad_accounts that the \"operation user_account\" has access to. - This includes ad_accounts they own and ad_accounts that are owned by others who have granted them <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>.
 * List ad accounts
 */
function adAccountsListRaw<T>(requestParameters: AdAccountsListRequest, requestConfig: runtime.TypedQueryConfig<T, AdAccountsList200Response> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.bookmark !== undefined) {
        queryParameters['bookmark'] = requestParameters.bookmark;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['page_size'] = requestParameters.pageSize;
    }


    if (requestParameters.includeSharedAccounts !== undefined) {
        queryParameters['include_shared_accounts'] = requestParameters.includeSharedAccounts;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AdAccountsList200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get a list of the ad_accounts that the \"operation user_account\" has access to. - This includes ad_accounts they own and ad_accounts that are owned by others who have granted them <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>.
* List ad accounts
*/
export function adAccountsList<T>(requestParameters: AdAccountsListRequest, requestConfig?: runtime.TypedQueryConfig<T, AdAccountsList200Response>): QueryConfig<T> {
    return adAccountsListRaw(requestParameters, requestConfig);
}

/**
 * This creates an asynchronous mmm report based on the given request. It returns a token that you can use to download the report when it is ready. NOTE: An additional limit of 5 queries per minute per advertiser applies to this endpoint while it\'s in beta release.
 * Create a request for a Marketing Mix Modeling (MMM) report
 */
function analyticsCreateMmmReportRaw<T>(requestParameters: AnalyticsCreateMmmReportRequest, requestConfig: runtime.TypedQueryConfig<T, CreateMMMReportResponse> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling analyticsCreateMmmReport.');
    }

    if (requestParameters.createMMMReportRequest === null || requestParameters.createMMMReportRequest === undefined) {
        throw new runtime.RequiredError('createMMMReportRequest','Required parameter requestParameters.createMMMReportRequest was null or undefined when calling analyticsCreateMmmReport.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/mmm_reports`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || CreateMMMReportRequestToJSON(requestParameters.createMMMReportRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CreateMMMReportResponseFromJSON(body), text);
    }

    return config;
}

/**
* This creates an asynchronous mmm report based on the given request. It returns a token that you can use to download the report when it is ready. NOTE: An additional limit of 5 queries per minute per advertiser applies to this endpoint while it\'s in beta release.
* Create a request for a Marketing Mix Modeling (MMM) report
*/
export function analyticsCreateMmmReport<T>(requestParameters: AnalyticsCreateMmmReportRequest, requestConfig?: runtime.TypedQueryConfig<T, CreateMMMReportResponse>): QueryConfig<T> {
    return analyticsCreateMmmReportRaw(requestParameters, requestConfig);
}

/**
 * This returns a token that you can use to download the report when it is ready. Note that this endpoint requires the parameters to be passed as JSON-formatted in the request body. This endpoint does not support URL query parameters. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 914 days before the current date in UTC time and the max time range supported is 186 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days. - If level is PRODUCT_ITEM, the furthest back you can are allowed to pull data is 92 days before the current date in UTC time and the max time range supported is 31 days. - If level is PRODUCT_ITEM, ad_ids and ad_statuses parameters are not allowed. Any columns related to pin promotion and ad is not allowed either.
 * Create async request for an account analytics report
 */
function analyticsCreateReportRaw<T>(requestParameters: AnalyticsCreateReportRequest, requestConfig: runtime.TypedQueryConfig<T, AdsAnalyticsCreateAsyncResponse> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling analyticsCreateReport.');
    }

    if (requestParameters.adsAnalyticsCreateAsyncRequest === null || requestParameters.adsAnalyticsCreateAsyncRequest === undefined) {
        throw new runtime.RequiredError('adsAnalyticsCreateAsyncRequest','Required parameter requestParameters.adsAnalyticsCreateAsyncRequest was null or undefined when calling analyticsCreateReport.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/reports`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || AdsAnalyticsCreateAsyncRequestToJSON(requestParameters.adsAnalyticsCreateAsyncRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AdsAnalyticsCreateAsyncResponseFromJSON(body), text);
    }

    return config;
}

/**
* This returns a token that you can use to download the report when it is ready. Note that this endpoint requires the parameters to be passed as JSON-formatted in the request body. This endpoint does not support URL query parameters. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 914 days before the current date in UTC time and the max time range supported is 186 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days. - If level is PRODUCT_ITEM, the furthest back you can are allowed to pull data is 92 days before the current date in UTC time and the max time range supported is 31 days. - If level is PRODUCT_ITEM, ad_ids and ad_statuses parameters are not allowed. Any columns related to pin promotion and ad is not allowed either.
* Create async request for an account analytics report
*/
export function analyticsCreateReport<T>(requestParameters: AnalyticsCreateReportRequest, requestConfig?: runtime.TypedQueryConfig<T, AdsAnalyticsCreateAsyncResponse>): QueryConfig<T> {
    return analyticsCreateReportRaw(requestParameters, requestConfig);
}

/**
 * This takes a template ID and an optional custom timeframe and constructs an asynchronous report based on the template. It returns a token that you can use to download the report when it is ready.
 * Create async request for an analytics report using a template
 */
function analyticsCreateTemplateReportRaw<T>(requestParameters: AnalyticsCreateTemplateReportRequest, requestConfig: runtime.TypedQueryConfig<T, AdsAnalyticsCreateAsyncResponse> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling analyticsCreateTemplateReport.');
    }

    if (requestParameters.templateId === null || requestParameters.templateId === undefined) {
        throw new runtime.RequiredError('templateId','Required parameter requestParameters.templateId was null or undefined when calling analyticsCreateTemplateReport.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.startDate !== undefined) {
        queryParameters['start_date'] = (requestParameters.startDate as any).toISOString().substring(0,10);
    }


    if (requestParameters.endDate !== undefined) {
        queryParameters['end_date'] = (requestParameters.endDate as any).toISOString().substring(0,10);
    }


    if (requestParameters.granularity !== undefined) {
        queryParameters['granularity'] = requestParameters.granularity;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/templates/{template_id}/reports`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))).replace(`{${"template_id"}}`, encodeURIComponent(String(requestParameters.templateId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AdsAnalyticsCreateAsyncResponseFromJSON(body), text);
    }

    return config;
}

/**
* This takes a template ID and an optional custom timeframe and constructs an asynchronous report based on the template. It returns a token that you can use to download the report when it is ready.
* Create async request for an analytics report using a template
*/
export function analyticsCreateTemplateReport<T>(requestParameters: AnalyticsCreateTemplateReportRequest, requestConfig?: runtime.TypedQueryConfig<T, AdsAnalyticsCreateAsyncResponse>): QueryConfig<T> {
    return analyticsCreateTemplateReportRaw(requestParameters, requestConfig);
}

/**
 * Get an mmm report for an ad account. This returns a URL to an mmm metrics report given a token returned from the create mmm report endpoint.
 * Get advertiser Marketing Mix Modeling (MMM) report.
 */
function analyticsGetMmmReportRaw<T>(requestParameters: AnalyticsGetMmmReportRequest, requestConfig: runtime.TypedQueryConfig<T, GetMMMReportResponse> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling analyticsGetMmmReport.');
    }

    if (requestParameters.token === null || requestParameters.token === undefined) {
        throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling analyticsGetMmmReport.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.token !== undefined) {
        queryParameters['token'] = requestParameters.token;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/mmm_reports`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetMMMReportResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get an mmm report for an ad account. This returns a URL to an mmm metrics report given a token returned from the create mmm report endpoint.
* Get advertiser Marketing Mix Modeling (MMM) report.
*/
export function analyticsGetMmmReport<T>(requestParameters: AnalyticsGetMmmReportRequest, requestConfig?: runtime.TypedQueryConfig<T, GetMMMReportResponse>): QueryConfig<T> {
    return analyticsGetMmmReportRaw(requestParameters, requestConfig);
}

/**
 * This returns a URL to an analytics report given a token returned from the post request report creation call. You can use the URL to download the report. The link is valid for five minutes and the report is valid for one hour. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
 * Get the account analytics report created by the async call
 */
function analyticsGetReportRaw<T>(requestParameters: AnalyticsGetReportRequest, requestConfig: runtime.TypedQueryConfig<T, AdsAnalyticsGetAsyncResponse> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling analyticsGetReport.');
    }

    if (requestParameters.token === null || requestParameters.token === undefined) {
        throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling analyticsGetReport.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.token !== undefined) {
        queryParameters['token'] = requestParameters.token;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/reports`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AdsAnalyticsGetAsyncResponseFromJSON(body), text);
    }

    return config;
}

/**
* This returns a URL to an analytics report given a token returned from the post request report creation call. You can use the URL to download the report. The link is valid for five minutes and the report is valid for one hour. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
* Get the account analytics report created by the async call
*/
export function analyticsGetReport<T>(requestParameters: AnalyticsGetReportRequest, requestConfig?: runtime.TypedQueryConfig<T, AdsAnalyticsGetAsyncResponse>): QueryConfig<T> {
    return analyticsGetReportRaw(requestParameters, requestConfig);
}

/**
 * Delete an ad account and all the ads data associated with that account. A string message is returned indicating the status of the delete operation.  Note: This endpoint is only allowed in the Pinterest API Sandbox (https://api-sandbox.pinterest.com/v5). Go to /docs/developer-tools/sandbox/ for more information.
 * Delete ads data for ad account in API Sandbox
 */
function sandboxDeleteRaw<T>(requestParameters: SandboxDeleteRequest, requestConfig: runtime.TypedQueryConfig<T, string> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling sandboxDelete.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/sandbox`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* Delete an ad account and all the ads data associated with that account. A string message is returned indicating the status of the delete operation.  Note: This endpoint is only allowed in the Pinterest API Sandbox (https://api-sandbox.pinterest.com/v5). Go to /docs/developer-tools/sandbox/ for more information.
* Delete ads data for ad account in API Sandbox
*/
export function sandboxDelete<T>(requestParameters: SandboxDeleteRequest, requestConfig?: runtime.TypedQueryConfig<T, string>): QueryConfig<T> {
    return sandboxDeleteRaw(requestParameters, requestConfig);
}

/**
 * Gets all Templates associated with an ad account ID.
 * List templates
 */
function templatesListRaw<T>(requestParameters: TemplatesListRequest, requestConfig: runtime.TypedQueryConfig<T, TemplatesList200Response> = {}): QueryConfig<T> {
    if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
        throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling templatesList.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.pageSize !== undefined) {
        queryParameters['page_size'] = requestParameters.pageSize;
    }


    if (requestParameters.order !== undefined) {
        queryParameters['order'] = requestParameters.order;
    }


    if (requestParameters.bookmark !== undefined) {
        queryParameters['bookmark'] = requestParameters.bookmark;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["ads:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ad_accounts/{ad_account_id}/templates`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(TemplatesList200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* Gets all Templates associated with an ad account ID.
* List templates
*/
export function templatesList<T>(requestParameters: TemplatesListRequest, requestConfig?: runtime.TypedQueryConfig<T, TemplatesList200Response>): QueryConfig<T> {
    return templatesListRaw(requestParameters, requestConfig);
}


/**
    * @export
    * @enum {string}
    */
export enum AdAccountAnalyticsColumnsEnum {
    SpendInMicroDollar = 'SPEND_IN_MICRO_DOLLAR',
    PaidImpression = 'PAID_IMPRESSION',
    SpendInDollar = 'SPEND_IN_DOLLAR',
    CpcInMicroDollar = 'CPC_IN_MICRO_DOLLAR',
    EcpcInMicroDollar = 'ECPC_IN_MICRO_DOLLAR',
    EcpcInDollar = 'ECPC_IN_DOLLAR',
    Ctr = 'CTR',
    Ectr = 'ECTR',
    CampaignName = 'CAMPAIGN_NAME',
    PinId = 'PIN_ID',
    TotalEngagement = 'TOTAL_ENGAGEMENT',
    Engagement1 = 'ENGAGEMENT_1',
    Engagement2 = 'ENGAGEMENT_2',
    EcpeInDollar = 'ECPE_IN_DOLLAR',
    EngagementRate = 'ENGAGEMENT_RATE',
    EengagementRate = 'EENGAGEMENT_RATE',
    EcpmInMicroDollar = 'ECPM_IN_MICRO_DOLLAR',
    RepinRate = 'REPIN_RATE',
    Ctr2 = 'CTR_2',
    CampaignId = 'CAMPAIGN_ID',
    AdvertiserId = 'ADVERTISER_ID',
    AdAccountId = 'AD_ACCOUNT_ID',
    PinPromotionId = 'PIN_PROMOTION_ID',
    AdId = 'AD_ID',
    AdGroupId = 'AD_GROUP_ID',
    CampaignEntityStatus = 'CAMPAIGN_ENTITY_STATUS',
    CampaignObjectiveType = 'CAMPAIGN_OBJECTIVE_TYPE',
    CpmInMicroDollar = 'CPM_IN_MICRO_DOLLAR',
    CpmInDollar = 'CPM_IN_DOLLAR',
    AdGroupEntityStatus = 'AD_GROUP_ENTITY_STATUS',
    OrderLineId = 'ORDER_LINE_ID',
    OrderLineName = 'ORDER_LINE_NAME',
    Clickthrough1 = 'CLICKTHROUGH_1',
    Repin1 = 'REPIN_1',
    Impression1 = 'IMPRESSION_1',
    Impression1Gross = 'IMPRESSION_1_GROSS',
    Clickthrough1Gross = 'CLICKTHROUGH_1_GROSS',
    OutboundClick1 = 'OUTBOUND_CLICK_1',
    Clickthrough2 = 'CLICKTHROUGH_2',
    Repin2 = 'REPIN_2',
    Impression2 = 'IMPRESSION_2',
    OutboundClick2 = 'OUTBOUND_CLICK_2',
    TotalClickthrough = 'TOTAL_CLICKTHROUGH',
    TotalImpression = 'TOTAL_IMPRESSION',
    TotalImpressionUser = 'TOTAL_IMPRESSION_USER',
    TotalImpressionFrequency = 'TOTAL_IMPRESSION_FREQUENCY',
    CostPerOutboundClickInDollar = 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR',
    TotalEngagementSignup = 'TOTAL_ENGAGEMENT_SIGNUP',
    TotalEngagementCheckout = 'TOTAL_ENGAGEMENT_CHECKOUT',
    TotalEngagementLead = 'TOTAL_ENGAGEMENT_LEAD',
    TotalClickSignup = 'TOTAL_CLICK_SIGNUP',
    TotalClickCheckout = 'TOTAL_CLICK_CHECKOUT',
    TotalClickAddToCart = 'TOTAL_CLICK_ADD_TO_CART',
    TotalClickLead = 'TOTAL_CLICK_LEAD',
    TotalViewSignup = 'TOTAL_VIEW_SIGNUP',
    TotalViewCheckout = 'TOTAL_VIEW_CHECKOUT',
    TotalViewAddToCart = 'TOTAL_VIEW_ADD_TO_CART',
    TotalViewLead = 'TOTAL_VIEW_LEAD',
    TotalConversions = 'TOTAL_CONVERSIONS',
    TotalEngagementSignupValueInMicroDollar = 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementCheckoutValueInMicroDollar = 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickSignupValueInMicroDollar = 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalClickCheckoutValueInMicroDollar = 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalViewSignupValueInMicroDollar = 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalViewCheckoutValueInMicroDollar = 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebSessions = 'TOTAL_WEB_SESSIONS',
    WebSessions1 = 'WEB_SESSIONS_1',
    WebSessions2 = 'WEB_SESSIONS_2',
    CampaignLifetimeSpendCap = 'CAMPAIGN_LIFETIME_SPEND_CAP',
    CampaignDailySpendCap = 'CAMPAIGN_DAILY_SPEND_CAP',
    TotalPageVisit = 'TOTAL_PAGE_VISIT',
    TotalSignup = 'TOTAL_SIGNUP',
    TotalCheckout = 'TOTAL_CHECKOUT',
    TotalCustom = 'TOTAL_CUSTOM',
    TotalLead = 'TOTAL_LEAD',
    TotalSignupValueInMicroDollar = 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalCheckoutValueInMicroDollar = 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalCustomValueInMicroDollar = 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR',
    PageVisitCostPerAction = 'PAGE_VISIT_COST_PER_ACTION',
    PageVisitRoas = 'PAGE_VISIT_ROAS',
    CheckoutRoas = 'CHECKOUT_ROAS',
    CustomRoas = 'CUSTOM_ROAS',
    VideoMrcViews1 = 'VIDEO_MRC_VIEWS_1',
    Video3SecViews2 = 'VIDEO_3SEC_VIEWS_2',
    VideoP100Complete2 = 'VIDEO_P100_COMPLETE_2',
    VideoP0Combined2 = 'VIDEO_P0_COMBINED_2',
    VideoP25Combined2 = 'VIDEO_P25_COMBINED_2',
    VideoP50Combined2 = 'VIDEO_P50_COMBINED_2',
    VideoP75Combined2 = 'VIDEO_P75_COMBINED_2',
    VideoP95Combined2 = 'VIDEO_P95_COMBINED_2',
    VideoMrcViews2 = 'VIDEO_MRC_VIEWS_2',
    PaidVideoViewableRate = 'PAID_VIDEO_VIEWABLE_RATE',
    VideoLength = 'VIDEO_LENGTH',
    EcpvInDollar = 'ECPV_IN_DOLLAR',
    EcpcvInDollar = 'ECPCV_IN_DOLLAR',
    EcpcvP95InDollar = 'ECPCV_P95_IN_DOLLAR',
    TotalVideo3SecViews = 'TOTAL_VIDEO_3SEC_VIEWS',
    TotalVideoP100Complete = 'TOTAL_VIDEO_P100_COMPLETE',
    TotalVideoP0Combined = 'TOTAL_VIDEO_P0_COMBINED',
    TotalVideoP25Combined = 'TOTAL_VIDEO_P25_COMBINED',
    TotalVideoP50Combined = 'TOTAL_VIDEO_P50_COMBINED',
    TotalVideoP75Combined = 'TOTAL_VIDEO_P75_COMBINED',
    TotalVideoP95Combined = 'TOTAL_VIDEO_P95_COMBINED',
    TotalVideoMrcViews = 'TOTAL_VIDEO_MRC_VIEWS',
    TotalVideoAvgWatchtimeInSecond = 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND',
    TotalRepinRate = 'TOTAL_REPIN_RATE',
    WebCheckoutCostPerAction = 'WEB_CHECKOUT_COST_PER_ACTION',
    WebCheckoutRoas = 'WEB_CHECKOUT_ROAS',
    TotalWebCheckout = 'TOTAL_WEB_CHECKOUT',
    TotalWebCheckoutValueInMicroDollar = 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickCheckout = 'TOTAL_WEB_CLICK_CHECKOUT',
    TotalWebClickCheckoutValueInMicroDollar = 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementCheckout = 'TOTAL_WEB_ENGAGEMENT_CHECKOUT',
    TotalWebEngagementCheckoutValueInMicroDollar = 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebViewCheckout = 'TOTAL_WEB_VIEW_CHECKOUT',
    TotalWebViewCheckoutValueInMicroDollar = 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    InappCheckoutCostPerAction = 'INAPP_CHECKOUT_COST_PER_ACTION',
    TotalOfflineCheckout = 'TOTAL_OFFLINE_CHECKOUT',
    IdeaPinProductTagVisit1 = 'IDEA_PIN_PRODUCT_TAG_VISIT_1',
    IdeaPinProductTagVisit2 = 'IDEA_PIN_PRODUCT_TAG_VISIT_2',
    TotalIdeaPinProductTagVisit = 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT',
    Leads = 'LEADS',
    CostPerLead = 'COST_PER_LEAD',
    QuizCompleted = 'QUIZ_COMPLETED',
    QuizPinResultOpen = 'QUIZ_PIN_RESULT_OPEN',
    QuizCompletionRate = 'QUIZ_COMPLETION_RATE',
    ShowcasePinClickthrough = 'SHOWCASE_PIN_CLICKTHROUGH',
    ShowcaseSubpageClickthrough = 'SHOWCASE_SUBPAGE_CLICKTHROUGH',
    ShowcaseSubpinClickthrough = 'SHOWCASE_SUBPIN_CLICKTHROUGH',
    ShowcaseSubpageImpression = 'SHOWCASE_SUBPAGE_IMPRESSION',
    ShowcaseSubpinImpression = 'SHOWCASE_SUBPIN_IMPRESSION',
    ShowcaseSubpageSwipeLeft = 'SHOWCASE_SUBPAGE_SWIPE_LEFT',
    ShowcaseSubpageSwipeRight = 'SHOWCASE_SUBPAGE_SWIPE_RIGHT',
    ShowcaseSubpinSwipeLeft = 'SHOWCASE_SUBPIN_SWIPE_LEFT',
    ShowcaseSubpinSwipeRight = 'SHOWCASE_SUBPIN_SWIPE_RIGHT',
    ShowcaseSubpageRepin = 'SHOWCASE_SUBPAGE_REPIN',
    ShowcaseSubpinRepin = 'SHOWCASE_SUBPIN_REPIN',
    ShowcaseSubpageCloseup = 'SHOWCASE_SUBPAGE_CLOSEUP',
    ShowcaseCardThumbnailSwipeForward = 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD',
    ShowcaseCardThumbnailSwipeBackward = 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD',
    ShowcaseAverageSubpageCloseupPerSession = 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION',
    TotalCheckoutConversionRate = 'TOTAL_CHECKOUT_CONVERSION_RATE',
    TotalViewCategoryConversionRate = 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE',
    TotalAddToCartConversionRate = 'TOTAL_ADD_TO_CART_CONVERSION_RATE',
    TotalSignupConversionRate = 'TOTAL_SIGNUP_CONVERSION_RATE',
    TotalPageVisitConversionRate = 'TOTAL_PAGE_VISIT_CONVERSION_RATE',
    TotalLeadConversionRate = 'TOTAL_LEAD_CONVERSION_RATE',
    TotalSearchConversionRate = 'TOTAL_SEARCH_CONVERSION_RATE',
    TotalWatchVideoConversionRate = 'TOTAL_WATCH_VIDEO_CONVERSION_RATE',
    TotalUnknownConversionRate = 'TOTAL_UNKNOWN_CONVERSION_RATE',
    TotalCustomConversionRate = 'TOTAL_CUSTOM_CONVERSION_RATE'
}
/**
    * @export
    * @enum {string}
    */
export enum AdAccountAnalyticsClickWindowDaysEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_14 = 14,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
    * @export
    * @enum {string}
    */
export enum AdAccountAnalyticsEngagementWindowDaysEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_14 = 14,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
    * @export
    * @enum {string}
    */
export enum AdAccountAnalyticsViewWindowDaysEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_14 = 14,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
    * @export
    * @enum {string}
    */
export enum AdAccountAnalyticsConversionReportTimeEnum {
    AdAction = 'TIME_OF_AD_ACTION',
    Conversion = 'TIME_OF_CONVERSION'
}
/**
    * @export
    * @enum {string}
    */
export enum AdAccountTargetingAnalyticsGetColumnsEnum {
    SpendInMicroDollar = 'SPEND_IN_MICRO_DOLLAR',
    PaidImpression = 'PAID_IMPRESSION',
    SpendInDollar = 'SPEND_IN_DOLLAR',
    CpcInMicroDollar = 'CPC_IN_MICRO_DOLLAR',
    EcpcInMicroDollar = 'ECPC_IN_MICRO_DOLLAR',
    EcpcInDollar = 'ECPC_IN_DOLLAR',
    Ctr = 'CTR',
    Ectr = 'ECTR',
    CampaignName = 'CAMPAIGN_NAME',
    PinId = 'PIN_ID',
    TotalEngagement = 'TOTAL_ENGAGEMENT',
    Engagement1 = 'ENGAGEMENT_1',
    Engagement2 = 'ENGAGEMENT_2',
    EcpeInDollar = 'ECPE_IN_DOLLAR',
    EngagementRate = 'ENGAGEMENT_RATE',
    EengagementRate = 'EENGAGEMENT_RATE',
    EcpmInMicroDollar = 'ECPM_IN_MICRO_DOLLAR',
    RepinRate = 'REPIN_RATE',
    Ctr2 = 'CTR_2',
    CampaignId = 'CAMPAIGN_ID',
    AdvertiserId = 'ADVERTISER_ID',
    AdAccountId = 'AD_ACCOUNT_ID',
    PinPromotionId = 'PIN_PROMOTION_ID',
    AdId = 'AD_ID',
    AdGroupId = 'AD_GROUP_ID',
    CampaignEntityStatus = 'CAMPAIGN_ENTITY_STATUS',
    CampaignObjectiveType = 'CAMPAIGN_OBJECTIVE_TYPE',
    CpmInMicroDollar = 'CPM_IN_MICRO_DOLLAR',
    CpmInDollar = 'CPM_IN_DOLLAR',
    AdGroupEntityStatus = 'AD_GROUP_ENTITY_STATUS',
    OrderLineId = 'ORDER_LINE_ID',
    OrderLineName = 'ORDER_LINE_NAME',
    Clickthrough1 = 'CLICKTHROUGH_1',
    Repin1 = 'REPIN_1',
    Impression1 = 'IMPRESSION_1',
    Impression1Gross = 'IMPRESSION_1_GROSS',
    Clickthrough1Gross = 'CLICKTHROUGH_1_GROSS',
    OutboundClick1 = 'OUTBOUND_CLICK_1',
    Clickthrough2 = 'CLICKTHROUGH_2',
    Repin2 = 'REPIN_2',
    Impression2 = 'IMPRESSION_2',
    OutboundClick2 = 'OUTBOUND_CLICK_2',
    TotalClickthrough = 'TOTAL_CLICKTHROUGH',
    TotalImpression = 'TOTAL_IMPRESSION',
    TotalImpressionUser = 'TOTAL_IMPRESSION_USER',
    TotalImpressionFrequency = 'TOTAL_IMPRESSION_FREQUENCY',
    CostPerOutboundClickInDollar = 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR',
    TotalEngagementSignup = 'TOTAL_ENGAGEMENT_SIGNUP',
    TotalEngagementCheckout = 'TOTAL_ENGAGEMENT_CHECKOUT',
    TotalEngagementLead = 'TOTAL_ENGAGEMENT_LEAD',
    TotalClickSignup = 'TOTAL_CLICK_SIGNUP',
    TotalClickCheckout = 'TOTAL_CLICK_CHECKOUT',
    TotalClickAddToCart = 'TOTAL_CLICK_ADD_TO_CART',
    TotalClickLead = 'TOTAL_CLICK_LEAD',
    TotalViewSignup = 'TOTAL_VIEW_SIGNUP',
    TotalViewCheckout = 'TOTAL_VIEW_CHECKOUT',
    TotalViewAddToCart = 'TOTAL_VIEW_ADD_TO_CART',
    TotalViewLead = 'TOTAL_VIEW_LEAD',
    TotalConversions = 'TOTAL_CONVERSIONS',
    TotalEngagementSignupValueInMicroDollar = 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementCheckoutValueInMicroDollar = 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickSignupValueInMicroDollar = 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalClickCheckoutValueInMicroDollar = 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalViewSignupValueInMicroDollar = 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalViewCheckoutValueInMicroDollar = 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebSessions = 'TOTAL_WEB_SESSIONS',
    WebSessions1 = 'WEB_SESSIONS_1',
    WebSessions2 = 'WEB_SESSIONS_2',
    CampaignLifetimeSpendCap = 'CAMPAIGN_LIFETIME_SPEND_CAP',
    CampaignDailySpendCap = 'CAMPAIGN_DAILY_SPEND_CAP',
    TotalPageVisit = 'TOTAL_PAGE_VISIT',
    TotalSignup = 'TOTAL_SIGNUP',
    TotalCheckout = 'TOTAL_CHECKOUT',
    TotalCustom = 'TOTAL_CUSTOM',
    TotalLead = 'TOTAL_LEAD',
    TotalSignupValueInMicroDollar = 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalCheckoutValueInMicroDollar = 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalCustomValueInMicroDollar = 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR',
    PageVisitCostPerAction = 'PAGE_VISIT_COST_PER_ACTION',
    PageVisitRoas = 'PAGE_VISIT_ROAS',
    CheckoutRoas = 'CHECKOUT_ROAS',
    CustomRoas = 'CUSTOM_ROAS',
    VideoMrcViews1 = 'VIDEO_MRC_VIEWS_1',
    Video3SecViews2 = 'VIDEO_3SEC_VIEWS_2',
    VideoP100Complete2 = 'VIDEO_P100_COMPLETE_2',
    VideoP0Combined2 = 'VIDEO_P0_COMBINED_2',
    VideoP25Combined2 = 'VIDEO_P25_COMBINED_2',
    VideoP50Combined2 = 'VIDEO_P50_COMBINED_2',
    VideoP75Combined2 = 'VIDEO_P75_COMBINED_2',
    VideoP95Combined2 = 'VIDEO_P95_COMBINED_2',
    VideoMrcViews2 = 'VIDEO_MRC_VIEWS_2',
    PaidVideoViewableRate = 'PAID_VIDEO_VIEWABLE_RATE',
    VideoLength = 'VIDEO_LENGTH',
    EcpvInDollar = 'ECPV_IN_DOLLAR',
    EcpcvInDollar = 'ECPCV_IN_DOLLAR',
    EcpcvP95InDollar = 'ECPCV_P95_IN_DOLLAR',
    TotalVideo3SecViews = 'TOTAL_VIDEO_3SEC_VIEWS',
    TotalVideoP100Complete = 'TOTAL_VIDEO_P100_COMPLETE',
    TotalVideoP0Combined = 'TOTAL_VIDEO_P0_COMBINED',
    TotalVideoP25Combined = 'TOTAL_VIDEO_P25_COMBINED',
    TotalVideoP50Combined = 'TOTAL_VIDEO_P50_COMBINED',
    TotalVideoP75Combined = 'TOTAL_VIDEO_P75_COMBINED',
    TotalVideoP95Combined = 'TOTAL_VIDEO_P95_COMBINED',
    TotalVideoMrcViews = 'TOTAL_VIDEO_MRC_VIEWS',
    TotalVideoAvgWatchtimeInSecond = 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND',
    TotalRepinRate = 'TOTAL_REPIN_RATE',
    WebCheckoutCostPerAction = 'WEB_CHECKOUT_COST_PER_ACTION',
    WebCheckoutRoas = 'WEB_CHECKOUT_ROAS',
    TotalWebCheckout = 'TOTAL_WEB_CHECKOUT',
    TotalWebCheckoutValueInMicroDollar = 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickCheckout = 'TOTAL_WEB_CLICK_CHECKOUT',
    TotalWebClickCheckoutValueInMicroDollar = 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementCheckout = 'TOTAL_WEB_ENGAGEMENT_CHECKOUT',
    TotalWebEngagementCheckoutValueInMicroDollar = 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebViewCheckout = 'TOTAL_WEB_VIEW_CHECKOUT',
    TotalWebViewCheckoutValueInMicroDollar = 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    InappCheckoutCostPerAction = 'INAPP_CHECKOUT_COST_PER_ACTION',
    TotalOfflineCheckout = 'TOTAL_OFFLINE_CHECKOUT',
    IdeaPinProductTagVisit1 = 'IDEA_PIN_PRODUCT_TAG_VISIT_1',
    IdeaPinProductTagVisit2 = 'IDEA_PIN_PRODUCT_TAG_VISIT_2',
    TotalIdeaPinProductTagVisit = 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT',
    Leads = 'LEADS',
    CostPerLead = 'COST_PER_LEAD',
    QuizCompleted = 'QUIZ_COMPLETED',
    QuizPinResultOpen = 'QUIZ_PIN_RESULT_OPEN',
    QuizCompletionRate = 'QUIZ_COMPLETION_RATE',
    ShowcasePinClickthrough = 'SHOWCASE_PIN_CLICKTHROUGH',
    ShowcaseSubpageClickthrough = 'SHOWCASE_SUBPAGE_CLICKTHROUGH',
    ShowcaseSubpinClickthrough = 'SHOWCASE_SUBPIN_CLICKTHROUGH',
    ShowcaseSubpageImpression = 'SHOWCASE_SUBPAGE_IMPRESSION',
    ShowcaseSubpinImpression = 'SHOWCASE_SUBPIN_IMPRESSION',
    ShowcaseSubpageSwipeLeft = 'SHOWCASE_SUBPAGE_SWIPE_LEFT',
    ShowcaseSubpageSwipeRight = 'SHOWCASE_SUBPAGE_SWIPE_RIGHT',
    ShowcaseSubpinSwipeLeft = 'SHOWCASE_SUBPIN_SWIPE_LEFT',
    ShowcaseSubpinSwipeRight = 'SHOWCASE_SUBPIN_SWIPE_RIGHT',
    ShowcaseSubpageRepin = 'SHOWCASE_SUBPAGE_REPIN',
    ShowcaseSubpinRepin = 'SHOWCASE_SUBPIN_REPIN',
    ShowcaseSubpageCloseup = 'SHOWCASE_SUBPAGE_CLOSEUP',
    ShowcaseCardThumbnailSwipeForward = 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD',
    ShowcaseCardThumbnailSwipeBackward = 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD',
    ShowcaseAverageSubpageCloseupPerSession = 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION',
    TotalCheckoutConversionRate = 'TOTAL_CHECKOUT_CONVERSION_RATE',
    TotalViewCategoryConversionRate = 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE',
    TotalAddToCartConversionRate = 'TOTAL_ADD_TO_CART_CONVERSION_RATE',
    TotalSignupConversionRate = 'TOTAL_SIGNUP_CONVERSION_RATE',
    TotalPageVisitConversionRate = 'TOTAL_PAGE_VISIT_CONVERSION_RATE',
    TotalLeadConversionRate = 'TOTAL_LEAD_CONVERSION_RATE',
    TotalSearchConversionRate = 'TOTAL_SEARCH_CONVERSION_RATE',
    TotalWatchVideoConversionRate = 'TOTAL_WATCH_VIDEO_CONVERSION_RATE',
    TotalUnknownConversionRate = 'TOTAL_UNKNOWN_CONVERSION_RATE',
    TotalCustomConversionRate = 'TOTAL_CUSTOM_CONVERSION_RATE'
}
/**
    * @export
    * @enum {string}
    */
export enum AdAccountTargetingAnalyticsGetClickWindowDaysEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_14 = 14,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
    * @export
    * @enum {string}
    */
export enum AdAccountTargetingAnalyticsGetEngagementWindowDaysEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_14 = 14,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
    * @export
    * @enum {string}
    */
export enum AdAccountTargetingAnalyticsGetViewWindowDaysEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_14 = 14,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
    * @export
    * @enum {string}
    */
export enum AdAccountTargetingAnalyticsGetConversionReportTimeEnum {
    AdAction = 'TIME_OF_AD_ACTION',
    Conversion = 'TIME_OF_CONVERSION'
}
/**
    * @export
    * @enum {string}
    */
export enum TemplatesListOrderEnum {
    Ascending = 'ASCENDING',
    Descending = 'DESCENDING'
}
