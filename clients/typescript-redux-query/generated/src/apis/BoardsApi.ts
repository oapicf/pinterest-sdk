// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    Board,
    BoardFromJSON,
    BoardToJSON,
    BoardSection,
    BoardSectionFromJSON,
    BoardSectionToJSON,
    BoardSectionsList200Response,
    BoardSectionsList200ResponseFromJSON,
    BoardSectionsList200ResponseToJSON,
    BoardUpdate,
    BoardUpdateFromJSON,
    BoardUpdateToJSON,
    BoardsList200Response,
    BoardsList200ResponseFromJSON,
    BoardsList200ResponseToJSON,
    BoardsListPins200Response,
    BoardsListPins200ResponseFromJSON,
    BoardsListPins200ResponseToJSON,
} from '../models';

export interface BoardSectionsCreateRequest {
    boardId: string;
    boardSection: BoardSection;
    adAccountId?: string;
}

export interface BoardSectionsDeleteRequest {
    boardId: string;
    sectionId: string;
    adAccountId?: string;
}

export interface BoardSectionsListRequest {
    boardId: string;
    adAccountId?: string;
    bookmark?: string;
    pageSize?: number;
}

export interface BoardSectionsListPinsRequest {
    boardId: string;
    sectionId: string;
    adAccountId?: string;
    bookmark?: string;
    pageSize?: number;
}

export interface BoardSectionsUpdateRequest {
    boardId: string;
    sectionId: string;
    boardSection: BoardSection;
    adAccountId?: string;
}

export interface BoardsCreateRequest {
    board: Board;
    adAccountId?: string;
}

export interface BoardsDeleteRequest {
    boardId: string;
    adAccountId?: string;
}

export interface BoardsGetRequest {
    boardId: string;
    adAccountId?: string;
}

export interface BoardsListRequest {
    adAccountId?: string;
    bookmark?: string;
    pageSize?: number;
    privacy?: BoardsListPrivacyEnum;
}

export interface BoardsListPinsRequest {
    boardId: string;
    bookmark?: string;
    pageSize?: number;
    creativeTypes?: Array<BoardsListPinsCreativeTypesEnum>;
    adAccountId?: string;
    pinMetrics?: boolean;
}

export interface BoardsUpdateRequest {
    boardId: string;
    boardUpdate: BoardUpdate;
    adAccountId?: string;
}


/**
 * Create a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
 * Create board section
 */
function boardSectionsCreateRaw<T>(requestParameters: BoardSectionsCreateRequest, requestConfig: runtime.TypedQueryConfig<T, BoardSection> = {}): QueryConfig<T> {
    if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
        throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling boardSectionsCreate.');
    }

    if (requestParameters.boardSection === null || requestParameters.boardSection === undefined) {
        throw new runtime.RequiredError('boardSection','Required parameter requestParameters.boardSection was null or undefined when calling boardSectionsCreate.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.adAccountId !== undefined) {
        queryParameters['ad_account_id'] = requestParameters.adAccountId;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["boards:read", "boards:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/boards/{board_id}/sections`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters.boardId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || BoardSectionToJSON(requestParameters.boardSection),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(BoardSectionFromJSON(body), text);
    }

    return config;
}

/**
* Create a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
* Create board section
*/
export function boardSectionsCreate<T>(requestParameters: BoardSectionsCreateRequest, requestConfig?: runtime.TypedQueryConfig<T, BoardSection>): QueryConfig<T> {
    return boardSectionsCreateRaw(requestParameters, requestConfig);
}

/**
 * Delete a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
 * Delete board section
 */
function boardSectionsDeleteRaw<T>(requestParameters: BoardSectionsDeleteRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
        throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling boardSectionsDelete.');
    }

    if (requestParameters.sectionId === null || requestParameters.sectionId === undefined) {
        throw new runtime.RequiredError('sectionId','Required parameter requestParameters.sectionId was null or undefined when calling boardSectionsDelete.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.adAccountId !== undefined) {
        queryParameters['ad_account_id'] = requestParameters.adAccountId;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["boards:read", "boards:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/boards/{board_id}/sections/{section_id}`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters.boardId))).replace(`{${"section_id"}}`, encodeURIComponent(String(requestParameters.sectionId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Delete a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
* Delete board section
*/
export function boardSectionsDelete<T>(requestParameters: BoardSectionsDeleteRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return boardSectionsDeleteRaw(requestParameters, requestConfig);
}

/**
 * Get a list of all board sections from a board owned by the \"operation user_account\" - or a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
 * List board sections
 */
function boardSectionsListRaw<T>(requestParameters: BoardSectionsListRequest, requestConfig: runtime.TypedQueryConfig<T, BoardSectionsList200Response> = {}): QueryConfig<T> {
    if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
        throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling boardSectionsList.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.adAccountId !== undefined) {
        queryParameters['ad_account_id'] = requestParameters.adAccountId;
    }


    if (requestParameters.bookmark !== undefined) {
        queryParameters['bookmark'] = requestParameters.bookmark;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['page_size'] = requestParameters.pageSize;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["boards:read"]];
    meta.authType = ['oauth', ["boards:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/boards/{board_id}/sections`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters.boardId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(BoardSectionsList200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get a list of all board sections from a board owned by the \"operation user_account\" - or a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
* List board sections
*/
export function boardSectionsList<T>(requestParameters: BoardSectionsListRequest, requestConfig?: runtime.TypedQueryConfig<T, BoardSectionsList200Response>): QueryConfig<T> {
    return boardSectionsListRaw(requestParameters, requestConfig);
}

/**
 * Get a list of the Pins on a board section of a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
 * List Pins on board section
 */
function boardSectionsListPinsRaw<T>(requestParameters: BoardSectionsListPinsRequest, requestConfig: runtime.TypedQueryConfig<T, BoardsListPins200Response> = {}): QueryConfig<T> {
    if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
        throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling boardSectionsListPins.');
    }

    if (requestParameters.sectionId === null || requestParameters.sectionId === undefined) {
        throw new runtime.RequiredError('sectionId','Required parameter requestParameters.sectionId was null or undefined when calling boardSectionsListPins.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.adAccountId !== undefined) {
        queryParameters['ad_account_id'] = requestParameters.adAccountId;
    }


    if (requestParameters.bookmark !== undefined) {
        queryParameters['bookmark'] = requestParameters.bookmark;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['page_size'] = requestParameters.pageSize;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["boards:read", "pins:read"]];
    meta.authType = ['oauth', ["boards:read", "pins:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/boards/{board_id}/sections/{section_id}/pins`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters.boardId))).replace(`{${"section_id"}}`, encodeURIComponent(String(requestParameters.sectionId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(BoardsListPins200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get a list of the Pins on a board section of a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
* List Pins on board section
*/
export function boardSectionsListPins<T>(requestParameters: BoardSectionsListPinsRequest, requestConfig?: runtime.TypedQueryConfig<T, BoardsListPins200Response>): QueryConfig<T> {
    return boardSectionsListPinsRaw(requestParameters, requestConfig);
}

/**
 * Update a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
 * Update board section
 */
function boardSectionsUpdateRaw<T>(requestParameters: BoardSectionsUpdateRequest, requestConfig: runtime.TypedQueryConfig<T, BoardSection> = {}): QueryConfig<T> {
    if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
        throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling boardSectionsUpdate.');
    }

    if (requestParameters.sectionId === null || requestParameters.sectionId === undefined) {
        throw new runtime.RequiredError('sectionId','Required parameter requestParameters.sectionId was null or undefined when calling boardSectionsUpdate.');
    }

    if (requestParameters.boardSection === null || requestParameters.boardSection === undefined) {
        throw new runtime.RequiredError('boardSection','Required parameter requestParameters.boardSection was null or undefined when calling boardSectionsUpdate.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.adAccountId !== undefined) {
        queryParameters['ad_account_id'] = requestParameters.adAccountId;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["boards:read", "boards:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/boards/{board_id}/sections/{section_id}`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters.boardId))).replace(`{${"section_id"}}`, encodeURIComponent(String(requestParameters.sectionId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PATCH',
            headers: headerParameters,
        },
        body: queryParameters || BoardSectionToJSON(requestParameters.boardSection),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(BoardSectionFromJSON(body), text);
    }

    return config;
}

/**
* Update a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
* Update board section
*/
export function boardSectionsUpdate<T>(requestParameters: BoardSectionsUpdateRequest, requestConfig?: runtime.TypedQueryConfig<T, BoardSection>): QueryConfig<T> {
    return boardSectionsUpdateRaw(requestParameters, requestConfig);
}

/**
 * Create a board owned by the \"operation user_account\". Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
 * Create board
 */
function boardsCreateRaw<T>(requestParameters: BoardsCreateRequest, requestConfig: runtime.TypedQueryConfig<T, Board> = {}): QueryConfig<T> {
    if (requestParameters.board === null || requestParameters.board === undefined) {
        throw new runtime.RequiredError('board','Required parameter requestParameters.board was null or undefined when calling boardsCreate.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.adAccountId !== undefined) {
        queryParameters['ad_account_id'] = requestParameters.adAccountId;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["boards:read", "boards:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/boards`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || BoardToJSON(requestParameters.board),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(BoardFromJSON(body), text);
    }

    return config;
}

/**
* Create a board owned by the \"operation user_account\". Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
* Create board
*/
export function boardsCreate<T>(requestParameters: BoardsCreateRequest, requestConfig?: runtime.TypedQueryConfig<T, Board>): QueryConfig<T> {
    return boardsCreateRaw(requestParameters, requestConfig);
}

/**
 * Delete a board owned by the \"operation user_account\". - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
 * Delete board
 */
function boardsDeleteRaw<T>(requestParameters: BoardsDeleteRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
        throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling boardsDelete.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.adAccountId !== undefined) {
        queryParameters['ad_account_id'] = requestParameters.adAccountId;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["boards:read", "boards:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/boards/{board_id}`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters.boardId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Delete a board owned by the \"operation user_account\". - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
* Delete board
*/
export function boardsDelete<T>(requestParameters: BoardsDeleteRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return boardsDeleteRaw(requestParameters, requestConfig);
}

/**
 * Get a board owned by the operation user_account - or a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
 * Get board
 */
function boardsGetRaw<T>(requestParameters: BoardsGetRequest, requestConfig: runtime.TypedQueryConfig<T, Board> = {}): QueryConfig<T> {
    if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
        throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling boardsGet.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.adAccountId !== undefined) {
        queryParameters['ad_account_id'] = requestParameters.adAccountId;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["boards:read"]];
    meta.authType = ['oauth', ["boards:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/boards/{board_id}`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters.boardId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(BoardFromJSON(body), text);
    }

    return config;
}

/**
* Get a board owned by the operation user_account - or a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
* Get board
*/
export function boardsGet<T>(requestParameters: BoardsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, Board>): QueryConfig<T> {
    return boardsGetRaw(requestParameters, requestConfig);
}

/**
 * Get a list of the boards owned by the \"operation user_account\" + group boards where this account is a collaborator Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
 * List boards
 */
function boardsListRaw<T>(requestParameters: BoardsListRequest, requestConfig: runtime.TypedQueryConfig<T, BoardsList200Response> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.adAccountId !== undefined) {
        queryParameters['ad_account_id'] = requestParameters.adAccountId;
    }


    if (requestParameters.bookmark !== undefined) {
        queryParameters['bookmark'] = requestParameters.bookmark;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['page_size'] = requestParameters.pageSize;
    }


    if (requestParameters.privacy !== undefined) {
        queryParameters['privacy'] = requestParameters.privacy;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["boards:read"]];
    meta.authType = ['oauth', ["boards:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/boards`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(BoardsList200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get a list of the boards owned by the \"operation user_account\" + group boards where this account is a collaborator Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
* List boards
*/
export function boardsList<T>(requestParameters: BoardsListRequest, requestConfig?: runtime.TypedQueryConfig<T, BoardsList200Response>): QueryConfig<T> {
    return boardsListRaw(requestParameters, requestConfig);
}

/**
 * Get a list of the Pins on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
 * List Pins on board
 */
function boardsListPinsRaw<T>(requestParameters: BoardsListPinsRequest, requestConfig: runtime.TypedQueryConfig<T, BoardsListPins200Response> = {}): QueryConfig<T> {
    if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
        throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling boardsListPins.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.bookmark !== undefined) {
        queryParameters['bookmark'] = requestParameters.bookmark;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['page_size'] = requestParameters.pageSize;
    }


    if (requestParameters.creativeTypes) {
        queryParameters['creative_types'] = requestParameters.creativeTypes;
    }


    if (requestParameters.adAccountId !== undefined) {
        queryParameters['ad_account_id'] = requestParameters.adAccountId;
    }


    if (requestParameters.pinMetrics !== undefined) {
        queryParameters['pin_metrics'] = requestParameters.pinMetrics;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["boards:read", "pins:read"]];
    meta.authType = ['oauth', ["boards:read", "pins:read"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/boards/{board_id}/pins`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters.boardId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(BoardsListPins200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get a list of the Pins on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
* List Pins on board
*/
export function boardsListPins<T>(requestParameters: BoardsListPinsRequest, requestConfig?: runtime.TypedQueryConfig<T, BoardsListPins200Response>): QueryConfig<T> {
    return boardsListPinsRaw(requestParameters, requestConfig);
}

/**
 * Update a board owned by the \"operating user_account\". - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
 * Update board
 */
function boardsUpdateRaw<T>(requestParameters: BoardsUpdateRequest, requestConfig: runtime.TypedQueryConfig<T, Board> = {}): QueryConfig<T> {
    if (requestParameters.boardId === null || requestParameters.boardId === undefined) {
        throw new runtime.RequiredError('boardId','Required parameter requestParameters.boardId was null or undefined when calling boardsUpdate.');
    }

    if (requestParameters.boardUpdate === null || requestParameters.boardUpdate === undefined) {
        throw new runtime.RequiredError('boardUpdate','Required parameter requestParameters.boardUpdate was null or undefined when calling boardsUpdate.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.adAccountId !== undefined) {
        queryParameters['ad_account_id'] = requestParameters.adAccountId;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["boards:read", "boards:write"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/boards/{board_id}`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters.boardId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PATCH',
            headers: headerParameters,
        },
        body: queryParameters || BoardUpdateToJSON(requestParameters.boardUpdate),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(BoardFromJSON(body), text);
    }

    return config;
}

/**
* Update a board owned by the \"operating user_account\". - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
* Update board
*/
export function boardsUpdate<T>(requestParameters: BoardsUpdateRequest, requestConfig?: runtime.TypedQueryConfig<T, Board>): QueryConfig<T> {
    return boardsUpdateRaw(requestParameters, requestConfig);
}


/**
    * @export
    * @enum {string}
    */
export enum BoardsListPrivacyEnum {
    All = 'ALL',
    Protected = 'PROTECTED',
    Public = 'PUBLIC',
    Secret = 'SECRET',
    PublicAndSecret = 'PUBLIC_AND_SECRET'
}
/**
    * @export
    * @enum {string}
    */
export enum BoardsListPinsCreativeTypesEnum {
    Regular = 'REGULAR',
    Video = 'VIDEO',
    Shopping = 'SHOPPING',
    Carousel = 'CAROUSEL',
    MaxVideo = 'MAX_VIDEO',
    ShopThePin = 'SHOP_THE_PIN',
    Collection = 'COLLECTION',
    Idea = 'IDEA'
}
