// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CatalogsHotelBatchItem,
    CatalogsHotelBatchItemFromJSON,
    CatalogsHotelBatchItemToJSON,
    CatalogsItemsRequestLanguage,
    CatalogsItemsRequestLanguageFromJSON,
    CatalogsItemsRequestLanguageToJSON,
    Country,
    CountryFromJSON,
    CountryToJSON,
} from './';

/**
 * Request object to update catalogs hotel items
 * @export
 * @interface CatalogsHotelBatchRequest
 */
export interface CatalogsHotelBatchRequest  {
    /**
     * 
     * @type {string}
     * @memberof CatalogsHotelBatchRequest
     */
    catalogType: CatalogsHotelBatchRequestCatalogTypeEnum;
    /**
     * 
     * @type {Country}
     * @memberof CatalogsHotelBatchRequest
     */
    country: Country;
    /**
     * 
     * @type {CatalogsItemsRequestLanguage}
     * @memberof CatalogsHotelBatchRequest
     */
    language: CatalogsItemsRequestLanguage;
    /**
     * Array with catalogs item operations
     * @type {Array<CatalogsHotelBatchItem>}
     * @memberof CatalogsHotelBatchRequest
     */
    items: Array<CatalogsHotelBatchItem>;
    /**
     * Catalog id pertaining to the hotel item. If not provided, default to oldest hotel catalog
     * @type {string}
     * @memberof CatalogsHotelBatchRequest
     */
    catalogId?: string;
}

export function CatalogsHotelBatchRequestFromJSON(json: any): CatalogsHotelBatchRequest {
    return {
        'catalogType': json['catalog_type'],
        'country': CountryFromJSON(json['country']),
        'language': CatalogsItemsRequestLanguageFromJSON(json['language']),
        'items': (json['items'] as Array<any>).map(CatalogsHotelBatchItemFromJSON),
        'catalogId': !exists(json, 'catalog_id') ? undefined : json['catalog_id'],
    };
}

export function CatalogsHotelBatchRequestToJSON(value?: CatalogsHotelBatchRequest): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'catalog_type': value.catalogType,
        'country': CountryToJSON(value.country),
        'language': CatalogsItemsRequestLanguageToJSON(value.language),
        'items': (value.items as Array<any>).map(CatalogsHotelBatchItemToJSON),
        'catalog_id': value.catalogId,
    };
}

/**
* @export
* @enum {string}
*/
export enum CatalogsHotelBatchRequestCatalogTypeEnum {
    Hotel = 'HOTEL'
}


