// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CatalogsLocale,
    CatalogsLocaleFromJSON,
    CatalogsLocaleToJSON,
    CatalogsProductGroupFiltersRequest,
    CatalogsProductGroupFiltersRequestFromJSON,
    CatalogsProductGroupFiltersRequestToJSON,
    Country,
    CountryFromJSON,
    CountryToJSON,
} from './';

/**
 * Request object for updating a retail product group.
 * @export
 * @interface CatalogsRetailProductGroupUpdateRequest
 */
export interface CatalogsRetailProductGroupUpdateRequest  {
    /**
     * Retail catalog based product group is available only for selected partners at the moment. If you are not eligible, please use feed based one.
     * @type {string}
     * @memberof CatalogsRetailProductGroupUpdateRequest
     */
    catalogType?: CatalogsRetailProductGroupUpdateRequestCatalogTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CatalogsRetailProductGroupUpdateRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsRetailProductGroupUpdateRequest
     */
    description?: string;
    /**
     * 
     * @type {CatalogsProductGroupFiltersRequest}
     * @memberof CatalogsRetailProductGroupUpdateRequest
     */
    filters?: CatalogsProductGroupFiltersRequest;
    /**
     * 
     * @type {Country}
     * @memberof CatalogsRetailProductGroupUpdateRequest
     */
    country?: Country;
    /**
     * 
     * @type {CatalogsLocale}
     * @memberof CatalogsRetailProductGroupUpdateRequest
     */
    locale?: CatalogsLocale;
}

export function CatalogsRetailProductGroupUpdateRequestFromJSON(json: any): CatalogsRetailProductGroupUpdateRequest {
    return {
        'catalogType': !exists(json, 'catalog_type') ? undefined : json['catalog_type'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'filters': !exists(json, 'filters') ? undefined : CatalogsProductGroupFiltersRequestFromJSON(json['filters']),
        'country': !exists(json, 'country') ? undefined : CountryFromJSON(json['country']),
        'locale': !exists(json, 'locale') ? undefined : CatalogsLocaleFromJSON(json['locale']),
    };
}

export function CatalogsRetailProductGroupUpdateRequestToJSON(value?: CatalogsRetailProductGroupUpdateRequest): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'catalog_type': value.catalogType,
        'name': value.name,
        'description': value.description,
        'filters': CatalogsProductGroupFiltersRequestToJSON(value.filters),
        'country': CountryToJSON(value.country),
        'locale': CatalogsLocaleToJSON(value.locale),
    };
}

/**
* @export
* @enum {string}
*/
export enum CatalogsRetailProductGroupUpdateRequestCatalogTypeEnum {
    Retail = 'RETAIL'
}


