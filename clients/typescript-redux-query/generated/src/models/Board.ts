// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BoardMedia,
    BoardMediaFromJSON,
    BoardMediaToJSON,
    BoardOwner,
    BoardOwnerFromJSON,
    BoardOwnerToJSON,
} from './';

/**
 * Board
 * @export
 * @interface Board
 */
export interface Board  {
    /**
     * 
     * @type {string}
     * @memberof Board
     */
    readonly id?: string;
    /**
     * Date and time of board creation.
     * @type {Date}
     * @memberof Board
     */
    readonly createdAt?: Date;
    /**
     * Date and time of last board pins modified.
     * @type {Date}
     * @memberof Board
     */
    readonly boardPinsModifiedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Board
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Board
     */
    description?: string;
    /**
     * Count of collaborators on the board.
     * @type {number}
     * @memberof Board
     */
    readonly collaboratorCount?: number;
    /**
     * Count of pins on the board.
     * @type {number}
     * @memberof Board
     */
    readonly pinCount?: number;
    /**
     * Board follower count.
     * @type {number}
     * @memberof Board
     */
    readonly followerCount?: number;
    /**
     * 
     * @type {BoardMedia}
     * @memberof Board
     */
    media?: BoardMedia;
    /**
     * 
     * @type {BoardOwner}
     * @memberof Board
     */
    readonly owner?: BoardOwner;
    /**
     * Privacy setting for a board. Learn more about <a href=\"https://help.pinterest.com/en/article/secret-boards\">secret boards</a> and <a href=\"https://help.pinterest.com/en/business/article/protected-boards\">protected boards</a>
     * @type {string}
     * @memberof Board
     */
    privacy?: BoardPrivacyEnum;
}

export function BoardFromJSON(json: any): Board {
    return {
        'id': !exists(json, 'id') ? undefined : json['id'],
        'createdAt': !exists(json, 'created_at') ? undefined : new Date(json['created_at']),
        'boardPinsModifiedAt': !exists(json, 'board_pins_modified_at') ? undefined : new Date(json['board_pins_modified_at']),
        'name': json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'collaboratorCount': !exists(json, 'collaborator_count') ? undefined : json['collaborator_count'],
        'pinCount': !exists(json, 'pin_count') ? undefined : json['pin_count'],
        'followerCount': !exists(json, 'follower_count') ? undefined : json['follower_count'],
        'media': !exists(json, 'media') ? undefined : BoardMediaFromJSON(json['media']),
        'owner': !exists(json, 'owner') ? undefined : BoardOwnerFromJSON(json['owner']),
        'privacy': !exists(json, 'privacy') ? undefined : json['privacy'],
    };
}

export function BoardToJSON(value?: Board): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'name': value.name,
        'description': value.description,
        'media': BoardMediaToJSON(value.media),
        'privacy': value.privacy,
    };
}

/**
* @export
* @enum {string}
*/
export enum BoardPrivacyEnum {
    Public = 'PUBLIC',
    Protected = 'PROTECTED',
    Secret = 'SECRET'
}


