// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * System error details included in the log sent by the client.
 * @export
 * @interface IntegrationLogClientError
 */
export interface IntegrationLogClientError  {
    /**
     * Original cause of the error.
     * @type {string}
     * @memberof IntegrationLogClientError
     */
    cause?: string;
    /**
     * Column number in the line of the file that raised the error.
     * @type {number}
     * @memberof IntegrationLogClientError
     */
    columnNumber?: number;
    /**
     * Filename where the error happened.
     * @type {string}
     * @memberof IntegrationLogClientError
     */
    fileName?: string;
    /**
     * Line number where the error happened.
     * @type {number}
     * @memberof IntegrationLogClientError
     */
    lineNumber?: number;
    /**
     * Human-readable description of the error.
     * @type {string}
     * @memberof IntegrationLogClientError
     */
    message?: string;
    /**
     * More detail about the message.
     * @type {string}
     * @memberof IntegrationLogClientError
     */
    messageDetail?: string;
    /**
     * Filename where the error happened.
     * @type {string}
     * @memberof IntegrationLogClientError
     */
    name?: string;
    /**
     * Integer that specifies the error code.
     * @type {number}
     * @memberof IntegrationLogClientError
     */
    number?: number;
    /**
     * Stack trace of where the error happened.
     * @type {string}
     * @memberof IntegrationLogClientError
     */
    stackTrace?: string;
}

export function IntegrationLogClientErrorFromJSON(json: any): IntegrationLogClientError {
    return {
        'cause': !exists(json, 'cause') ? undefined : json['cause'],
        'columnNumber': !exists(json, 'column_number') ? undefined : json['column_number'],
        'fileName': !exists(json, 'file_name') ? undefined : json['file_name'],
        'lineNumber': !exists(json, 'line_number') ? undefined : json['line_number'],
        'message': !exists(json, 'message') ? undefined : json['message'],
        'messageDetail': !exists(json, 'message_detail') ? undefined : json['message_detail'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'number': !exists(json, 'number') ? undefined : json['number'],
        'stackTrace': !exists(json, 'stack_trace') ? undefined : json['stack_trace'],
    };
}

export function IntegrationLogClientErrorToJSON(value?: IntegrationLogClientError): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'cause': value.cause,
        'column_number': value.columnNumber,
        'file_name': value.fileName,
        'line_number': value.lineNumber,
        'message': value.message,
        'message_detail': value.messageDetail,
        'name': value.name,
        'number': value.number,
        'stack_trace': value.stackTrace,
    };
}


