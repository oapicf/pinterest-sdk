// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CatalogsItemsRequestLanguage,
    CatalogsItemsRequestLanguageFromJSON,
    CatalogsItemsRequestLanguageToJSON,
    CatalogsRetailBatchRequestItemsInner,
    CatalogsRetailBatchRequestItemsInnerFromJSON,
    CatalogsRetailBatchRequestItemsInnerToJSON,
    Country,
    CountryFromJSON,
    CountryToJSON,
} from './';

/**
 * A request object that can have multiple operations on a single retail batch
 * @export
 * @interface CatalogsRetailBatchRequest
 */
export interface CatalogsRetailBatchRequest  {
    /**
     * 
     * @type {string}
     * @memberof CatalogsRetailBatchRequest
     */
    catalogType: CatalogsRetailBatchRequestCatalogTypeEnum;
    /**
     * 
     * @type {Country}
     * @memberof CatalogsRetailBatchRequest
     */
    country: Country;
    /**
     * 
     * @type {CatalogsItemsRequestLanguage}
     * @memberof CatalogsRetailBatchRequest
     */
    language: CatalogsItemsRequestLanguage;
    /**
     * Array with catalogs item operations
     * @type {Array<CatalogsRetailBatchRequestItemsInner>}
     * @memberof CatalogsRetailBatchRequest
     */
    items: Array<CatalogsRetailBatchRequestItemsInner>;
}

export function CatalogsRetailBatchRequestFromJSON(json: any): CatalogsRetailBatchRequest {
    return {
        'catalogType': json['catalog_type'],
        'country': CountryFromJSON(json['country']),
        'language': CatalogsItemsRequestLanguageFromJSON(json['language']),
        'items': (json['items'] as Array<any>).map(CatalogsRetailBatchRequestItemsInnerFromJSON),
    };
}

export function CatalogsRetailBatchRequestToJSON(value?: CatalogsRetailBatchRequest): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'catalog_type': value.catalogType,
        'country': CountryToJSON(value.country),
        'language': CatalogsItemsRequestLanguageToJSON(value.language),
        'items': (value.items as Array<any>).map(CatalogsRetailBatchRequestItemsInnerToJSON),
    };
}

/**
* @export
* @enum {string}
*/
export enum CatalogsRetailBatchRequestCatalogTypeEnum {
    Retail = 'RETAIL'
}


