/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { RelatedTerms } from '../model/relatedTerms';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class TermsService {
    private basePath: string = 'https://api.pinterest.com/v5';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * List related terms
     * Get a list of terms logically related to each input term. &lt;p/&gt; Example: the term \&#39;workout\&#39; would list related terms like \&#39;one song workout\&#39;, \&#39;yoga workout\&#39;, \&#39;workout motivation\&#39;, etc.
     * @param terms List of input terms.
     
     */
    public termsRelatedList(terms: Array<string>, observe?: 'body', headers?: Headers): Observable<RelatedTerms>;
    public termsRelatedList(terms: Array<string>, observe?: 'response', headers?: Headers): Observable<HttpResponse<RelatedTerms>>;
    public termsRelatedList(terms: Array<string>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (terms === null || terms === undefined){
            throw new Error('Required parameter terms was null or undefined when calling termsRelatedList.');
        }

        let queryParameters: string[] = [];
        if (terms) {
            terms.forEach((element) => {
                queryParameters.push('terms='+encodeURIComponent(String(element)));
            })
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<RelatedTerms>> = this.httpClient.get(`${this.basePath}/terms/related?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <RelatedTerms>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * List suggested terms
     * Get popular search terms that begin with your input term. &lt;p/&gt; Example: \&#39;sport\&#39; would return popular terms like \&#39;sports bar\&#39; and \&#39;sportswear\&#39;, but not \&#39;motor sports\&#39; since the phrase does not begin with the given term.
     * @param term Input term.
     * @param limit Max suggested terms to return.
     
     */
    public termsSuggestedList(term: string, limit?: number, observe?: 'body', headers?: Headers): Observable<Array<string>>;
    public termsSuggestedList(term: string, limit?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<string>>>;
    public termsSuggestedList(term: string, limit?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (term === null || term === undefined){
            throw new Error('Required parameter term was null or undefined when calling termsSuggestedList.');
        }

        let queryParameters: string[] = [];
        if (term !== undefined) {
            queryParameters.push('term='+encodeURIComponent(String(term)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<string>>> = this.httpClient.get(`${this.basePath}/terms/suggested?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<string>>(httpResponse.response))
               );
        }
        return response;
    }

}
