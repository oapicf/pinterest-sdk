/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { TargetingTemplateCreate } from '../model/targetingTemplateCreate';
import { TargetingTemplateGetResponseData } from '../model/targetingTemplateGetResponseData';
import { TargetingTemplateList200Response } from '../model/targetingTemplateList200Response';
import { TargetingTemplateUpdateRequest } from '../model/targetingTemplateUpdateRequest';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class TargetingTemplateService {
    private basePath: string = 'https://api.pinterest.com/v5';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Create targeting templates
     * &lt;p&gt;Targeting templates allow advertisers to save a set of targeting details including audience lists,  keywords &amp; interest, demographics, and placements to use more than once during the campaign creation process.&lt;/p&gt;  &lt;p&gt;Templates can be used to build out basic targeting criteria that you plan to use across campaigns and to reuse   performance targeting from prior campaigns for new campaigns.&lt;/p&gt;
     * @param adAccountId Unique identifier of an ad account.
     * @param targetingTemplateCreate targeting template creation entity
     
     */
    public targetingTemplateCreate(adAccountId: string, targetingTemplateCreate: TargetingTemplateCreate, observe?: 'body', headers?: Headers): Observable<TargetingTemplateGetResponseData>;
    public targetingTemplateCreate(adAccountId: string, targetingTemplateCreate: TargetingTemplateCreate, observe?: 'response', headers?: Headers): Observable<HttpResponse<TargetingTemplateGetResponseData>>;
    public targetingTemplateCreate(adAccountId: string, targetingTemplateCreate: TargetingTemplateCreate, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (adAccountId === null || adAccountId === undefined){
            throw new Error('Required parameter adAccountId was null or undefined when calling targetingTemplateCreate.');
        }

        if (targetingTemplateCreate === null || targetingTemplateCreate === undefined){
            throw new Error('Required parameter targetingTemplateCreate was null or undefined when calling targetingTemplateCreate.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<TargetingTemplateGetResponseData>> = this.httpClient.post(`${this.basePath}/ad_accounts/${encodeURIComponent(String(adAccountId))}/targeting_templates`, targetingTemplateCreate , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <TargetingTemplateGetResponseData>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * List targeting templates
     * Get a list of the targeting templates in the specified &lt;code&gt;ad_account_id&lt;/code&gt;
     * @param adAccountId Unique identifier of an ad account.
     * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
     * @param includeSizing Include audience sizing in result or not
     * @param searchQuery Search keyword for targeting templates
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
     * @param bookmark Cursor used to fetch the next page of items
     
     */
    public targetingTemplateList(adAccountId: string, order?: 'ASCENDING' | 'DESCENDING', includeSizing?: boolean, searchQuery?: string, pageSize?: number, bookmark?: string, observe?: 'body', headers?: Headers): Observable<TargetingTemplateList200Response>;
    public targetingTemplateList(adAccountId: string, order?: 'ASCENDING' | 'DESCENDING', includeSizing?: boolean, searchQuery?: string, pageSize?: number, bookmark?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<TargetingTemplateList200Response>>;
    public targetingTemplateList(adAccountId: string, order?: 'ASCENDING' | 'DESCENDING', includeSizing?: boolean, searchQuery?: string, pageSize?: number, bookmark?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (adAccountId === null || adAccountId === undefined){
            throw new Error('Required parameter adAccountId was null or undefined when calling targetingTemplateList.');
        }

        let queryParameters: string[] = [];
        if (order !== undefined) {
            queryParameters.push('order='+encodeURIComponent(String(order)));
        }
        if (includeSizing !== undefined) {
            queryParameters.push('includeSizing='+encodeURIComponent(String(includeSizing)));
        }
        if (searchQuery !== undefined) {
            queryParameters.push('searchQuery='+encodeURIComponent(String(searchQuery)));
        }
        if (pageSize !== undefined) {
            queryParameters.push('pageSize='+encodeURIComponent(String(pageSize)));
        }
        if (bookmark !== undefined) {
            queryParameters.push('bookmark='+encodeURIComponent(String(bookmark)));
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<TargetingTemplateList200Response>> = this.httpClient.get(`${this.basePath}/ad_accounts/${encodeURIComponent(String(adAccountId))}/targeting_templates?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <TargetingTemplateList200Response>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update targeting templates
     * &lt;p&gt;Update the targeting template given advertiser ID and targeting template ID&lt;/p&gt;
     * @param adAccountId Unique identifier of an ad account.
     * @param targetingTemplateUpdateRequest Operation type and targeting template ID
     
     */
    public targetingTemplateUpdate(adAccountId: string, targetingTemplateUpdateRequest: TargetingTemplateUpdateRequest, observe?: 'body', headers?: Headers): Observable<any>;
    public targetingTemplateUpdate(adAccountId: string, targetingTemplateUpdateRequest: TargetingTemplateUpdateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public targetingTemplateUpdate(adAccountId: string, targetingTemplateUpdateRequest: TargetingTemplateUpdateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (adAccountId === null || adAccountId === undefined){
            throw new Error('Required parameter adAccountId was null or undefined when calling targetingTemplateUpdate.');
        }

        if (targetingTemplateUpdateRequest === null || targetingTemplateUpdateRequest === undefined){
            throw new Error('Required parameter targetingTemplateUpdateRequest was null or undefined when calling targetingTemplateUpdate.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.patch(`${this.basePath}/ad_accounts/${encodeURIComponent(String(adAccountId))}/targeting_templates`, targetingTemplateUpdateRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }

}
