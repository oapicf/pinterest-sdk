/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { PinsList200Response } from '../model/pinsList200Response';
import { SearchPartnerPins200Response } from '../model/searchPartnerPins200Response';
import { SearchUserBoardsGet200Response } from '../model/searchUserBoardsGet200Response';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class SearchService {
    private basePath: string = 'https://api.pinterest.com/v5';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Search pins by a given search term
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;\&#39;/docs/getting-started/beta-and-advanced-access/\&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get the top 10 Pins by a given search term.
     * @param term Search term to look up pins.
     * @param countryCode Two letter country code (ISO 3166-1 alpha-2)
     * @param bookmark Cursor used to fetch the next page of items
     * @param locale Search locale.
     * @param limit Max search result size
     
     */
    public searchPartnerPins(term: string, countryCode: string, bookmark?: string, locale?: string, limit?: number, observe?: 'body', headers?: Headers): Observable<SearchPartnerPins200Response>;
    public searchPartnerPins(term: string, countryCode: string, bookmark?: string, locale?: string, limit?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<SearchPartnerPins200Response>>;
    public searchPartnerPins(term: string, countryCode: string, bookmark?: string, locale?: string, limit?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (term === null || term === undefined){
            throw new Error('Required parameter term was null or undefined when calling searchPartnerPins.');
        }

        if (countryCode === null || countryCode === undefined){
            throw new Error('Required parameter countryCode was null or undefined when calling searchPartnerPins.');
        }

        let queryParameters: string[] = [];
        if (term !== undefined) {
            queryParameters.push('term='+encodeURIComponent(String(term)));
        }
        if (countryCode !== undefined) {
            queryParameters.push('countryCode='+encodeURIComponent(String(countryCode)));
        }
        if (bookmark !== undefined) {
            queryParameters.push('bookmark='+encodeURIComponent(String(bookmark)));
        }
        if (locale !== undefined) {
            queryParameters.push('locale='+encodeURIComponent(String(locale)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<SearchPartnerPins200Response>> = this.httpClient.get(`${this.basePath}/search/partner/pins?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SearchPartnerPins200Response>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Search user\&#39;s boards
     * Search for boards for the \&quot;operation user_account\&quot;. This includes boards of all board types. - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;\&#39;/docs/getting-started/using-business-access/\&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
     * @param adAccountId Unique identifier of an ad account.
     * @param bookmark Cursor used to fetch the next page of items
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
     * @param query Search query. Can contain pin description keywords or comma-separated pin IDs.
     
     */
    public searchUserBoardsGet(adAccountId?: string, bookmark?: string, pageSize?: number, query?: string, observe?: 'body', headers?: Headers): Observable<SearchUserBoardsGet200Response>;
    public searchUserBoardsGet(adAccountId?: string, bookmark?: string, pageSize?: number, query?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<SearchUserBoardsGet200Response>>;
    public searchUserBoardsGet(adAccountId?: string, bookmark?: string, pageSize?: number, query?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (adAccountId !== undefined) {
            queryParameters.push('adAccountId='+encodeURIComponent(String(adAccountId)));
        }
        if (bookmark !== undefined) {
            queryParameters.push('bookmark='+encodeURIComponent(String(bookmark)));
        }
        if (pageSize !== undefined) {
            queryParameters.push('pageSize='+encodeURIComponent(String(pageSize)));
        }
        if (query !== undefined) {
            queryParameters.push('query='+encodeURIComponent(String(query)));
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        // authentication (client_credentials) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<SearchUserBoardsGet200Response>> = this.httpClient.get(`${this.basePath}/search/boards?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SearchUserBoardsGet200Response>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Search user\&#39;s Pins
     * Search for pins for the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;\&#39;/docs/getting-started/using-business-access/\&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
     * @param query Search query. Can contain pin description keywords or comma-separated pin IDs.
     * @param adAccountId Unique identifier of an ad account.
     * @param bookmark Cursor used to fetch the next page of items
     
     */
    public searchUserPinsList(query: string, adAccountId?: string, bookmark?: string, observe?: 'body', headers?: Headers): Observable<PinsList200Response>;
    public searchUserPinsList(query: string, adAccountId?: string, bookmark?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PinsList200Response>>;
    public searchUserPinsList(query: string, adAccountId?: string, bookmark?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (query === null || query === undefined){
            throw new Error('Required parameter query was null or undefined when calling searchUserPinsList.');
        }

        let queryParameters: string[] = [];
        if (adAccountId !== undefined) {
            queryParameters.push('adAccountId='+encodeURIComponent(String(adAccountId)));
        }
        if (query !== undefined) {
            queryParameters.push('query='+encodeURIComponent(String(query)));
        }
        if (bookmark !== undefined) {
            queryParameters.push('bookmark='+encodeURIComponent(String(bookmark)));
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<PinsList200Response>> = this.httpClient.get(`${this.basePath}/search/pins?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <PinsList200Response>(httpResponse.response))
               );
        }
        return response;
    }

}
