/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { AuthRespondInvitesBody } from '../model/authRespondInvitesBody';
import { CancelInvitesBody } from '../model/cancelInvitesBody';
import { CreateAssetAccessRequestBody } from '../model/createAssetAccessRequestBody';
import { CreateAssetAccessRequestResponse } from '../model/createAssetAccessRequestResponse';
import { CreateAssetInvitesRequest } from '../model/createAssetInvitesRequest';
import { CreateInvitesResultsResponseArray } from '../model/createInvitesResultsResponseArray';
import { CreateMembershipOrPartnershipInvitesBody } from '../model/createMembershipOrPartnershipInvitesBody';
import { DeleteInvitesResultsResponseArray } from '../model/deleteInvitesResultsResponseArray';
import { GetInvites200Response } from '../model/getInvites200Response';
import { InviteType } from '../model/inviteType';
import { RespondToInvitesResponseArray } from '../model/respondToInvitesResponseArray';
import { UpdateInvitesResultsResponseArray } from '../model/updateInvitesResultsResponseArray';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class BusinessAccessInviteService {
    private basePath: string = 'https://api.pinterest.com/v5';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Create a request to access an existing partner\&#39;s assets.
     * Create a request to access an existing partner\&#39;s assets with the specified permissions. The request will be sent to the partner for approval. The assets that can be requested are ad accounts and profiles.
     * @param businessId Unique identifier of the requesting business.
     * @param createAssetAccessRequestBody 
     
     */
    public assetAccessRequestsCreate(businessId: string, createAssetAccessRequestBody: CreateAssetAccessRequestBody, observe?: 'body', headers?: Headers): Observable<CreateAssetAccessRequestResponse>;
    public assetAccessRequestsCreate(businessId: string, createAssetAccessRequestBody: CreateAssetAccessRequestBody, observe?: 'response', headers?: Headers): Observable<HttpResponse<CreateAssetAccessRequestResponse>>;
    public assetAccessRequestsCreate(businessId: string, createAssetAccessRequestBody: CreateAssetAccessRequestBody, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling assetAccessRequestsCreate.');
        }

        if (createAssetAccessRequestBody === null || createAssetAccessRequestBody === undefined){
            throw new Error('Required parameter createAssetAccessRequestBody was null or undefined when calling assetAccessRequestsCreate.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<CreateAssetAccessRequestResponse>> = this.httpClient.post(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/requests/assets/access`, createAssetAccessRequestBody , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CreateAssetAccessRequestResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Cancel invites/requests
     * Cancel membership/partnership invites and/or requests.
     * @param businessId Business id
     * @param cancelInvitesBody A list with invite ids
     
     */
    public cancelInvitesOrRequests(businessId: string, cancelInvitesBody: CancelInvitesBody, observe?: 'body', headers?: Headers): Observable<DeleteInvitesResultsResponseArray>;
    public cancelInvitesOrRequests(businessId: string, cancelInvitesBody: CancelInvitesBody, observe?: 'response', headers?: Headers): Observable<HttpResponse<DeleteInvitesResultsResponseArray>>;
    public cancelInvitesOrRequests(businessId: string, cancelInvitesBody: CancelInvitesBody, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling cancelInvitesOrRequests.');
        }

        if (cancelInvitesBody === null || cancelInvitesBody === undefined){
            throw new Error('Required parameter cancelInvitesBody was null or undefined when calling cancelInvitesOrRequests.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<DeleteInvitesResultsResponseArray>> = this.httpClient.delete(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/invites`, cancelInvitesBody , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <DeleteInvitesResultsResponseArray>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update invite/request with an asset permission
     * Assign asset permissions information to an existing invite/request. Can be used to: - Request access to a partner\&#39;s asset. Note: This is only for when no existing partnership exists. If an existing   partnership exists, use \&quot;Create a request to access an existing partner\&#39;s assets\&quot; to request access to your   partner\&#39;s assets.     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot; - Invite a partner to access your business assets. Note: This is only for when there is no existing partnership.   If there is an existing partnership, use \&quot;Assign/Update partner asset permissions\&quot; to assign a partner access to   new assets.     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot; - Invite a member to access your business assets. Note: This is only for when there is no existing membership.   If there is an existing membership, use \&quot;Assign/Update member asset permissions\&quot; to assign a member access to new   assets.     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;  To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview.
     * @param businessId Unique identifier of the requesting business.
     * @param createAssetInvitesRequest A list of invites/requests together with the asset permissions to be assigned to the invite/request. 
     
     */
    public createAssetInvites(businessId: string, createAssetInvitesRequest: CreateAssetInvitesRequest, observe?: 'body', headers?: Headers): Observable<UpdateInvitesResultsResponseArray>;
    public createAssetInvites(businessId: string, createAssetInvitesRequest: CreateAssetInvitesRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<UpdateInvitesResultsResponseArray>>;
    public createAssetInvites(businessId: string, createAssetInvitesRequest: CreateAssetInvitesRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling createAssetInvites.');
        }

        if (createAssetInvitesRequest === null || createAssetInvitesRequest === undefined){
            throw new Error('Required parameter createAssetInvitesRequest was null or undefined when calling createAssetInvites.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<UpdateInvitesResultsResponseArray>> = this.httpClient.post(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/invites/assets/access`, createAssetInvitesRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <UpdateInvitesResultsResponseArray>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create invites or requests
     * Create batch invites or requests. Can create batch invites or requests as described below. - Invite members to join the business. This would required specifying the following:     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;     - business_role&#x3D;\&quot;EMPLOYEE\&quot; OR business_role&#x3D;\&quot;BIZ_ADMIN\&quot; (To learn more about business roles, visit     https://help.pinterest.com/en/business/article/profile-permissions-in-business-access.)     - members - Invite partners to access your business assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners - Request to be a partner so you can access their assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners
     * @param businessId Business id
     * @param createMembershipOrPartnershipInvitesBody An object with the properties: invite_type, partners, members, business_role
     
     */
    public createMembershipOrPartnershipInvites(businessId: string, createMembershipOrPartnershipInvitesBody: CreateMembershipOrPartnershipInvitesBody, observe?: 'body', headers?: Headers): Observable<CreateInvitesResultsResponseArray>;
    public createMembershipOrPartnershipInvites(businessId: string, createMembershipOrPartnershipInvitesBody: CreateMembershipOrPartnershipInvitesBody, observe?: 'response', headers?: Headers): Observable<HttpResponse<CreateInvitesResultsResponseArray>>;
    public createMembershipOrPartnershipInvites(businessId: string, createMembershipOrPartnershipInvitesBody: CreateMembershipOrPartnershipInvitesBody, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling createMembershipOrPartnershipInvites.');
        }

        if (createMembershipOrPartnershipInvitesBody === null || createMembershipOrPartnershipInvitesBody === undefined){
            throw new Error('Required parameter createMembershipOrPartnershipInvitesBody was null or undefined when calling createMembershipOrPartnershipInvites.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<CreateInvitesResultsResponseArray>> = this.httpClient.post(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/invites`, createMembershipOrPartnershipInvitesBody , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CreateInvitesResultsResponseArray>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get invites/requests
     * Get the membership/partnership invites and/or requests for the authorized user.
     * @param businessId Unique identifier of the requesting business.
     * @param isMember A boolean field to indicate whether the invite is to create a partnership or a membership.
     * @param inviteStatus A list of invite statuses to filter invites by. Only invites whose status is in the provided statuses will be returned.
     * @param inviteType Invite type to filter invites by. Only invites of the specified type will be returned.
     * @param bookmark Cursor used to fetch the next page of items
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
     
     */
    public getInvites(businessId: string, isMember?: boolean, inviteStatus?: Array<'PENDING' | 'EXPIRED'>, inviteType?: InviteType, bookmark?: string, pageSize?: number, observe?: 'body', headers?: Headers): Observable<GetInvites200Response>;
    public getInvites(businessId: string, isMember?: boolean, inviteStatus?: Array<'PENDING' | 'EXPIRED'>, inviteType?: InviteType, bookmark?: string, pageSize?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<GetInvites200Response>>;
    public getInvites(businessId: string, isMember?: boolean, inviteStatus?: Array<'PENDING' | 'EXPIRED'>, inviteType?: InviteType, bookmark?: string, pageSize?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling getInvites.');
        }

        let queryParameters: string[] = [];
        if (isMember !== undefined) {
            queryParameters.push('isMember='+encodeURIComponent(String(isMember)));
        }
        if (inviteStatus) {
            inviteStatus.forEach((element) => {
                queryParameters.push('inviteStatus='+encodeURIComponent(String(element)));
            })
        }
        if (inviteType !== undefined) {
            queryParameters.push('inviteType='+encodeURIComponent(String(inviteType)));
        }
        if (bookmark !== undefined) {
            queryParameters.push('bookmark='+encodeURIComponent(String(bookmark)));
        }
        if (pageSize !== undefined) {
            queryParameters.push('pageSize='+encodeURIComponent(String(pageSize)));
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GetInvites200Response>> = this.httpClient.get(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/invites?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetInvites200Response>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Accept or decline an invite/request
     * Accept or decline invites or requests.
     * @param authRespondInvitesBody 
     
     */
    public respondBusinessAccessInvites(authRespondInvitesBody: AuthRespondInvitesBody, observe?: 'body', headers?: Headers): Observable<RespondToInvitesResponseArray>;
    public respondBusinessAccessInvites(authRespondInvitesBody: AuthRespondInvitesBody, observe?: 'response', headers?: Headers): Observable<HttpResponse<RespondToInvitesResponseArray>>;
    public respondBusinessAccessInvites(authRespondInvitesBody: AuthRespondInvitesBody, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authRespondInvitesBody === null || authRespondInvitesBody === undefined){
            throw new Error('Required parameter authRespondInvitesBody was null or undefined when calling respondBusinessAccessInvites.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<RespondToInvitesResponseArray>> = this.httpClient.patch(`${this.basePath}/businesses/invites`, authRespondInvitesBody , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <RespondToInvitesResponseArray>(httpResponse.response))
               );
        }
        return response;
    }

}
