/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { BulkDownloadRequest } from '../model/bulkDownloadRequest';
import { BulkDownloadResponse } from '../model/bulkDownloadResponse';
import { BulkUpsertRequest } from '../model/bulkUpsertRequest';
import { BulkUpsertResponse } from '../model/bulkUpsertResponse';
import { BulkUpsertStatusResponse } from '../model/bulkUpsertStatusResponse';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class BulkService {
    private basePath: string = 'https://api.pinterest.com/v5';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Get advertiser entities in bulk
     * Create an asynchronous report that may include information on campaigns, ad groups, product groups, ads, and/or keywords; can filter by campaigns. Though the entities may be active, archived, or paused, only active entities will return data.
     * @param adAccountId Unique identifier of an ad account.
     * @param bulkDownloadRequest Parameters to get ad entities in bulk
     
     */
    public bulkDownloadCreate(adAccountId: string, bulkDownloadRequest: BulkDownloadRequest, observe?: 'body', headers?: Headers): Observable<BulkDownloadResponse>;
    public bulkDownloadCreate(adAccountId: string, bulkDownloadRequest: BulkDownloadRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<BulkDownloadResponse>>;
    public bulkDownloadCreate(adAccountId: string, bulkDownloadRequest: BulkDownloadRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (adAccountId === null || adAccountId === undefined){
            throw new Error('Required parameter adAccountId was null or undefined when calling bulkDownloadCreate.');
        }

        if (bulkDownloadRequest === null || bulkDownloadRequest === undefined){
            throw new Error('Required parameter bulkDownloadRequest was null or undefined when calling bulkDownloadCreate.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<BulkDownloadResponse>> = this.httpClient.post(`${this.basePath}/ad_accounts/${encodeURIComponent(String(adAccountId))}/bulk/download`, bulkDownloadRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <BulkDownloadResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Download advertiser entities in bulk
     * Get the status of a bulk request by &lt;code&gt;request_id&lt;/code&gt;, along with a download URL that will allow you to download the new or updated entity data (campaigns, ad groups, product groups, ads, or keywords).
     * @param adAccountId Unique identifier of an ad account.
     * @param bulkRequestId Unique identifier of a bulk upsert request.
     * @param includeDetails if set to True then attach the errors/details to all the requests
     
     */
    public bulkRequestGet(adAccountId: string, bulkRequestId: string, includeDetails?: boolean, observe?: 'body', headers?: Headers): Observable<BulkUpsertStatusResponse>;
    public bulkRequestGet(adAccountId: string, bulkRequestId: string, includeDetails?: boolean, observe?: 'response', headers?: Headers): Observable<HttpResponse<BulkUpsertStatusResponse>>;
    public bulkRequestGet(adAccountId: string, bulkRequestId: string, includeDetails?: boolean, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (adAccountId === null || adAccountId === undefined){
            throw new Error('Required parameter adAccountId was null or undefined when calling bulkRequestGet.');
        }

        if (bulkRequestId === null || bulkRequestId === undefined){
            throw new Error('Required parameter bulkRequestId was null or undefined when calling bulkRequestGet.');
        }

        let queryParameters: string[] = [];
        if (includeDetails !== undefined) {
            queryParameters.push('includeDetails='+encodeURIComponent(String(includeDetails)));
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<BulkUpsertStatusResponse>> = this.httpClient.get(`${this.basePath}/ad_accounts/${encodeURIComponent(String(adAccountId))}/bulk/${encodeURIComponent(String(bulkRequestId))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <BulkUpsertStatusResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create/update ad entities in bulk
     * Either create or update any combination of campaigns, ad groups, product groups, ads, or keywords. Note that this request will be processed asynchronously; the response will include a &lt;code&gt;request_id&lt;/code&gt; that can be used to obtain the status of the request.
     * @param adAccountId Unique identifier of an ad account.
     * @param bulkUpsertRequest Parameters to get create/update ad entities in bulk
     
     */
    public bulkUpsertCreate(adAccountId: string, bulkUpsertRequest: BulkUpsertRequest, observe?: 'body', headers?: Headers): Observable<BulkUpsertResponse>;
    public bulkUpsertCreate(adAccountId: string, bulkUpsertRequest: BulkUpsertRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<BulkUpsertResponse>>;
    public bulkUpsertCreate(adAccountId: string, bulkUpsertRequest: BulkUpsertRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (adAccountId === null || adAccountId === undefined){
            throw new Error('Required parameter adAccountId was null or undefined when calling bulkUpsertCreate.');
        }

        if (bulkUpsertRequest === null || bulkUpsertRequest === undefined){
            throw new Error('Required parameter bulkUpsertRequest was null or undefined when calling bulkUpsertCreate.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<BulkUpsertResponse>> = this.httpClient.post(`${this.basePath}/ad_accounts/${encodeURIComponent(String(adAccountId))}/bulk/upsert`, bulkUpsertRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <BulkUpsertResponse>(httpResponse.response))
               );
        }
        return response;
    }

}
