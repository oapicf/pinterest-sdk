/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { DetailedError } from '../model/detailedError';
import { IntegrationLogsRequest } from '../model/integrationLogsRequest';
import { IntegrationLogsSuccessResponse } from '../model/integrationLogsSuccessResponse';
import { IntegrationMetadata } from '../model/integrationMetadata';
import { IntegrationRecord } from '../model/integrationRecord';
import { IntegrationRequest } from '../model/integrationRequest';
import { IntegrationRequestPatch } from '../model/integrationRequestPatch';
import { IntegrationsGetList200Response } from '../model/integrationsGetList200Response';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class IntegrationsService {
    private basePath: string = 'https://api.pinterest.com/v5';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Delete commerce integration
     * Delete commerce integration metadata for the given external business ID. Note: If you\&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
     * @param externalBusinessId External business ID for the integration.
     
     */
    public integrationsCommerceDel(externalBusinessId: string, observe?: 'body', headers?: Headers): Observable<any>;
    public integrationsCommerceDel(externalBusinessId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public integrationsCommerceDel(externalBusinessId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (externalBusinessId === null || externalBusinessId === undefined){
            throw new Error('Required parameter externalBusinessId was null or undefined when calling integrationsCommerceDel.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/integrations/commerce/${encodeURIComponent(String(externalBusinessId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get commerce integration
     * Get commerce integration metadata associated with the given external business ID. Note: If you\&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
     * @param externalBusinessId External business ID for the integration.
     
     */
    public integrationsCommerceGet(externalBusinessId: string, observe?: 'body', headers?: Headers): Observable<IntegrationMetadata>;
    public integrationsCommerceGet(externalBusinessId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IntegrationMetadata>>;
    public integrationsCommerceGet(externalBusinessId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (externalBusinessId === null || externalBusinessId === undefined){
            throw new Error('Required parameter externalBusinessId was null or undefined when calling integrationsCommerceGet.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<IntegrationMetadata>> = this.httpClient.get(`${this.basePath}/integrations/commerce/${encodeURIComponent(String(externalBusinessId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <IntegrationMetadata>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update commerce integration
     * Update commerce integration metadata for the given external business ID. Note: If you\&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
     * @param externalBusinessId External business ID for the integration.
     * @param integrationRequestPatch Parameters to get create/update the Integration Metadata
     
     */
    public integrationsCommercePatch(externalBusinessId: string, integrationRequestPatch?: IntegrationRequestPatch, observe?: 'body', headers?: Headers): Observable<IntegrationMetadata>;
    public integrationsCommercePatch(externalBusinessId: string, integrationRequestPatch?: IntegrationRequestPatch, observe?: 'response', headers?: Headers): Observable<HttpResponse<IntegrationMetadata>>;
    public integrationsCommercePatch(externalBusinessId: string, integrationRequestPatch?: IntegrationRequestPatch, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (externalBusinessId === null || externalBusinessId === undefined){
            throw new Error('Required parameter externalBusinessId was null or undefined when calling integrationsCommercePatch.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<IntegrationMetadata>> = this.httpClient.patch(`${this.basePath}/integrations/commerce/${encodeURIComponent(String(externalBusinessId))}`, integrationRequestPatch , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <IntegrationMetadata>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create commerce integration
     * Create commerce integration metadata to link an external business ID with a Pinterest merchant &amp; ad account. Note: If you\&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
     * @param integrationRequest Parameters to get create/update the Integration Metadata
     
     */
    public integrationsCommercePost(integrationRequest?: IntegrationRequest, observe?: 'body', headers?: Headers): Observable<IntegrationMetadata>;
    public integrationsCommercePost(integrationRequest?: IntegrationRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IntegrationMetadata>>;
    public integrationsCommercePost(integrationRequest?: IntegrationRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<IntegrationMetadata>> = this.httpClient.post(`${this.basePath}/integrations/commerce`, integrationRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <IntegrationMetadata>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get integration metadata
     * Get integration metadata by ID. Note: If you\&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
     * @param id Integration ID.
     
     */
    public integrationsGetById(id: string, observe?: 'body', headers?: Headers): Observable<IntegrationRecord>;
    public integrationsGetById(id: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<IntegrationRecord>>;
    public integrationsGetById(id: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling integrationsGetById.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<IntegrationRecord>> = this.httpClient.get(`${this.basePath}/integrations/${encodeURIComponent(String(id))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <IntegrationRecord>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get integration metadata list
     * Get integration metadata list. Note: If you\&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
     * @param bookmark Cursor used to fetch the next page of items
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
     
     */
    public integrationsGetList(bookmark?: string, pageSize?: number, observe?: 'body', headers?: Headers): Observable<IntegrationsGetList200Response>;
    public integrationsGetList(bookmark?: string, pageSize?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<IntegrationsGetList200Response>>;
    public integrationsGetList(bookmark?: string, pageSize?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (bookmark !== undefined) {
            queryParameters.push('bookmark='+encodeURIComponent(String(bookmark)));
        }
        if (pageSize !== undefined) {
            queryParameters.push('pageSize='+encodeURIComponent(String(pageSize)));
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<IntegrationsGetList200Response>> = this.httpClient.get(`${this.basePath}/integrations?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <IntegrationsGetList200Response>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Receives batched logs from integration applications.
     * This endpoint receives batched logs from integration applications on partner platforms. Note: If you\&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
     * @param integrationLogsRequest Ingest log information from external integration application.
     
     */
    public integrationsLogsPost(integrationLogsRequest: IntegrationLogsRequest, observe?: 'body', headers?: Headers): Observable<IntegrationLogsSuccessResponse>;
    public integrationsLogsPost(integrationLogsRequest: IntegrationLogsRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<IntegrationLogsSuccessResponse>>;
    public integrationsLogsPost(integrationLogsRequest: IntegrationLogsRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (integrationLogsRequest === null || integrationLogsRequest === undefined){
            throw new Error('Required parameter integrationLogsRequest was null or undefined when calling integrationsLogsPost.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<IntegrationLogsSuccessResponse>> = this.httpClient.post(`${this.basePath}/integrations/logs`, integrationLogsRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <IntegrationLogsSuccessResponse>(httpResponse.response))
               );
        }
        return response;
    }

}
