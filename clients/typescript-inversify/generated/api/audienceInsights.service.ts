/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { AudienceDefinitionResponse } from '../model/audienceDefinitionResponse';
import { AudienceInsightType } from '../model/audienceInsightType';
import { AudienceInsightsResponse } from '../model/audienceInsightsResponse';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class AudienceInsightsService {
    private basePath: string = 'https://api.pinterest.com/v5';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Get audience insights
     * Get Audience Insights for an ad account. The response will return insights for 3 types of audiences: the ad account\&#39;s engaged audience on Pinterest, the ad account\&#39;s total audience on Pinterest and Pinterest\&#39;s total audience.&lt;p/&gt; &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/audience-insights\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Learn more about Audience Insights&lt;/a&gt;.
     * @param adAccountId Unique identifier of an ad account.
     * @param audienceInsightType Type of audience insights.
     
     */
    public audienceInsightsGet(adAccountId: string, audienceInsightType: AudienceInsightType, observe?: 'body', headers?: Headers): Observable<AudienceInsightsResponse>;
    public audienceInsightsGet(adAccountId: string, audienceInsightType: AudienceInsightType, observe?: 'response', headers?: Headers): Observable<HttpResponse<AudienceInsightsResponse>>;
    public audienceInsightsGet(adAccountId: string, audienceInsightType: AudienceInsightType, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (adAccountId === null || adAccountId === undefined){
            throw new Error('Required parameter adAccountId was null or undefined when calling audienceInsightsGet.');
        }

        if (audienceInsightType === null || audienceInsightType === undefined){
            throw new Error('Required parameter audienceInsightType was null or undefined when calling audienceInsightsGet.');
        }

        let queryParameters: string[] = [];
        if (audienceInsightType !== undefined) {
            queryParameters.push('audienceInsightType='+encodeURIComponent(String(audienceInsightType)));
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<AudienceInsightsResponse>> = this.httpClient.get(`${this.basePath}/ad_accounts/${encodeURIComponent(String(adAccountId))}/audience_insights?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <AudienceInsightsResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get audience insights scope and type
     * Get the scope and type of available audiences, which along with a date, is an audience that has recently had an interaction (referred to here as a type) on pins. Interacted pins can belong to at least the most common **partner** or **Pinterest** scopes. This means that user interactions made on advertiser or partner pins will have the **partner** scope. You can also have user interactions performed in general on Pinterest with the **Pinterest** scope. In that case, you can then use the returned type and scope values together on requests to other endpoints to retrieve insight metrics for a desired audience.
     * @param adAccountId Unique identifier of an ad account.
     
     */
    public audienceInsightsScopeAndTypeGet(adAccountId: string, observe?: 'body', headers?: Headers): Observable<AudienceDefinitionResponse>;
    public audienceInsightsScopeAndTypeGet(adAccountId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<AudienceDefinitionResponse>>;
    public audienceInsightsScopeAndTypeGet(adAccountId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (adAccountId === null || adAccountId === undefined){
            throw new Error('Required parameter adAccountId was null or undefined when calling audienceInsightsScopeAndTypeGet.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<AudienceDefinitionResponse>> = this.httpClient.get(`${this.basePath}/ad_accounts/${encodeURIComponent(String(adAccountId))}/insights/audiences`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <AudienceDefinitionResponse>(httpResponse.response))
               );
        }
        return response;
    }

}
