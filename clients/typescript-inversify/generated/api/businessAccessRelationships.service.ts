/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { DeletePartnersRequest } from '../model/deletePartnersRequest';
import { DeletePartnersResponse } from '../model/deletePartnersResponse';
import { DeletedMembersResponse } from '../model/deletedMembersResponse';
import { GetBusinessEmployers200Response } from '../model/getBusinessEmployers200Response';
import { GetBusinessMembers200Response } from '../model/getBusinessMembers200Response';
import { GetBusinessPartners200Response } from '../model/getBusinessPartners200Response';
import { MemberBusinessRole } from '../model/memberBusinessRole';
import { MembersToDeleteBody } from '../model/membersToDeleteBody';
import { PartnerType } from '../model/partnerType';
import { UpdateMemberBusinessRoleBody } from '../model/updateMemberBusinessRoleBody';
import { UpdateMemberResultsResponseArray } from '../model/updateMemberResultsResponseArray';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class BusinessAccessRelationshipsService {
    private basePath: string = 'https://api.pinterest.com/v5';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Terminate business memberships
     * Terminate memberships between the specified members and your business.
     * @param businessId Business id
     * @param membersToDeleteBody List of members with role to delete.
     
     */
    public deleteBusinessMembership(businessId: string, membersToDeleteBody: MembersToDeleteBody, observe?: 'body', headers?: Headers): Observable<DeletedMembersResponse>;
    public deleteBusinessMembership(businessId: string, membersToDeleteBody: MembersToDeleteBody, observe?: 'response', headers?: Headers): Observable<HttpResponse<DeletedMembersResponse>>;
    public deleteBusinessMembership(businessId: string, membersToDeleteBody: MembersToDeleteBody, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling deleteBusinessMembership.');
        }

        if (membersToDeleteBody === null || membersToDeleteBody === undefined){
            throw new Error('Required parameter membersToDeleteBody was null or undefined when calling deleteBusinessMembership.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<DeletedMembersResponse>> = this.httpClient.delete(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/members`, membersToDeleteBody , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <DeletedMembersResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Terminate business partnerships
     * Terminate partnerships between the specified partners and your business. Note: You may only batch terminate partners of the same partner type.
     * @param businessId Unique identifier of the requesting business.
     * @param deletePartnersRequest An object containing a \&quot;partner_ids\&quot; property composed of a list of partner IDs and a \&quot;partners_type\&quot; property specifying the type of partners to delete. 
     
     */
    public deleteBusinessPartners(businessId: string, deletePartnersRequest: DeletePartnersRequest, observe?: 'body', headers?: Headers): Observable<DeletePartnersResponse>;
    public deleteBusinessPartners(businessId: string, deletePartnersRequest: DeletePartnersRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<DeletePartnersResponse>>;
    public deleteBusinessPartners(businessId: string, deletePartnersRequest: DeletePartnersRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling deleteBusinessPartners.');
        }

        if (deletePartnersRequest === null || deletePartnersRequest === undefined){
            throw new Error('Required parameter deletePartnersRequest was null or undefined when calling deleteBusinessPartners.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<DeletePartnersResponse>> = this.httpClient.delete(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/partners`, deletePartnersRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <DeletePartnersResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * List business employers for user
     * Get all of the viewing user\&#39;s business employers.
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
     * @param bookmark Cursor used to fetch the next page of items
     
     */
    public getBusinessEmployers(pageSize?: number, bookmark?: string, observe?: 'body', headers?: Headers): Observable<GetBusinessEmployers200Response>;
    public getBusinessEmployers(pageSize?: number, bookmark?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<GetBusinessEmployers200Response>>;
    public getBusinessEmployers(pageSize?: number, bookmark?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (pageSize !== undefined) {
            queryParameters.push('pageSize='+encodeURIComponent(String(pageSize)));
        }
        if (bookmark !== undefined) {
            queryParameters.push('bookmark='+encodeURIComponent(String(bookmark)));
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GetBusinessEmployers200Response>> = this.httpClient.get(`${this.basePath}/businesses/employers?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetBusinessEmployers200Response>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get business members
     * Get all members of the specified business. The return response will include the member\&#39;s business_role and assets they have access to if assets_summary&#x3D;TRUE
     * @param businessId Unique identifier of the requesting business.
     * @param assetsSummary Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are
     * @param businessRoles A list of business roles to filter the members by. Only members whose roles are in the specified roles will be returned.
     * @param memberIds A list of business members ids separated by comma.
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned.
     * @param bookmark Cursor used to fetch the next page of items
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
     
     */
    public getBusinessMembers(businessId: string, assetsSummary?: boolean, businessRoles?: Array<MemberBusinessRole>, memberIds?: string, startIndex?: number, bookmark?: string, pageSize?: number, observe?: 'body', headers?: Headers): Observable<GetBusinessMembers200Response>;
    public getBusinessMembers(businessId: string, assetsSummary?: boolean, businessRoles?: Array<MemberBusinessRole>, memberIds?: string, startIndex?: number, bookmark?: string, pageSize?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<GetBusinessMembers200Response>>;
    public getBusinessMembers(businessId: string, assetsSummary?: boolean, businessRoles?: Array<MemberBusinessRole>, memberIds?: string, startIndex?: number, bookmark?: string, pageSize?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling getBusinessMembers.');
        }

        let queryParameters: string[] = [];
        if (assetsSummary !== undefined) {
            queryParameters.push('assetsSummary='+encodeURIComponent(String(assetsSummary)));
        }
        if (businessRoles) {
            businessRoles.forEach((element) => {
                queryParameters.push('businessRoles='+encodeURIComponent(String(element)));
            })
        }
        if (memberIds !== undefined) {
            queryParameters.push('memberIds='+encodeURIComponent(String(memberIds)));
        }
        if (startIndex !== undefined) {
            queryParameters.push('startIndex='+encodeURIComponent(String(startIndex)));
        }
        if (bookmark !== undefined) {
            queryParameters.push('bookmark='+encodeURIComponent(String(bookmark)));
        }
        if (pageSize !== undefined) {
            queryParameters.push('pageSize='+encodeURIComponent(String(pageSize)));
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GetBusinessMembers200Response>> = this.httpClient.get(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/members?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetBusinessMembers200Response>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get business partners
     * Get all partners of the specified business.  If the assets_summary&#x3D;TRUE and: - partner_type&#x3D;INTERNAL, the business assets returned are your business assets the partner has access to. - partner_type&#x3D;EXTERNAL, the business assets returned are your partner\&#39;s business assets the partner has granted you   access to.
     * @param businessId Unique identifier of the requesting business.
     * @param assetsSummary Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are
     * @param partnerType Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner\&#39;s business asset.
     * @param partnerIds A list of business partner ids separated by commas used to filter the results. Only partners with the specified ids will be returned.
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned.
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
     * @param bookmark Cursor used to fetch the next page of items
     
     */
    public getBusinessPartners(businessId: string, assetsSummary?: boolean, partnerType?: PartnerType, partnerIds?: string, startIndex?: number, pageSize?: number, bookmark?: string, observe?: 'body', headers?: Headers): Observable<GetBusinessPartners200Response>;
    public getBusinessPartners(businessId: string, assetsSummary?: boolean, partnerType?: PartnerType, partnerIds?: string, startIndex?: number, pageSize?: number, bookmark?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<GetBusinessPartners200Response>>;
    public getBusinessPartners(businessId: string, assetsSummary?: boolean, partnerType?: PartnerType, partnerIds?: string, startIndex?: number, pageSize?: number, bookmark?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling getBusinessPartners.');
        }

        let queryParameters: string[] = [];
        if (assetsSummary !== undefined) {
            queryParameters.push('assetsSummary='+encodeURIComponent(String(assetsSummary)));
        }
        if (partnerType !== undefined) {
            queryParameters.push('partnerType='+encodeURIComponent(String(partnerType)));
        }
        if (partnerIds !== undefined) {
            queryParameters.push('partnerIds='+encodeURIComponent(String(partnerIds)));
        }
        if (startIndex !== undefined) {
            queryParameters.push('startIndex='+encodeURIComponent(String(startIndex)));
        }
        if (pageSize !== undefined) {
            queryParameters.push('pageSize='+encodeURIComponent(String(pageSize)));
        }
        if (bookmark !== undefined) {
            queryParameters.push('bookmark='+encodeURIComponent(String(bookmark)));
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GetBusinessPartners200Response>> = this.httpClient.get(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/partners?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetBusinessPartners200Response>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update member\&#39;s business role
     * Update a member\&#39;s business role within the business.
     * @param businessId Business id
     * @param updateMemberBusinessRoleBody List of objects with the member id and the business_role.
     
     */
    public updateBusinessMemberships(businessId: string, updateMemberBusinessRoleBody: Array<UpdateMemberBusinessRoleBody>, observe?: 'body', headers?: Headers): Observable<UpdateMemberResultsResponseArray>;
    public updateBusinessMemberships(businessId: string, updateMemberBusinessRoleBody: Array<UpdateMemberBusinessRoleBody>, observe?: 'response', headers?: Headers): Observable<HttpResponse<UpdateMemberResultsResponseArray>>;
    public updateBusinessMemberships(businessId: string, updateMemberBusinessRoleBody: Array<UpdateMemberBusinessRoleBody>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (businessId === null || businessId === undefined){
            throw new Error('Required parameter businessId was null or undefined when calling updateBusinessMemberships.');
        }

        if (updateMemberBusinessRoleBody === null || updateMemberBusinessRoleBody === undefined){
            throw new Error('Required parameter updateMemberBusinessRoleBody was null or undefined when calling updateBusinessMemberships.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<UpdateMemberResultsResponseArray>> = this.httpClient.patch(`${this.basePath}/businesses/${encodeURIComponent(String(businessId))}/members`, updateMemberBusinessRoleBody , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <UpdateMemberResultsResponseArray>(httpResponse.response))
               );
        }
        return response;
    }

}
