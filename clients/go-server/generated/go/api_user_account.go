// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// UserAccountAPIController binds http requests to an api service and writes the service results to the http response
type UserAccountAPIController struct {
	service UserAccountAPIServicer
	errorHandler ErrorHandler
}

// UserAccountAPIOption for how the controller is set up.
type UserAccountAPIOption func(*UserAccountAPIController)

// WithUserAccountAPIErrorHandler inject ErrorHandler into controller
func WithUserAccountAPIErrorHandler(h ErrorHandler) UserAccountAPIOption {
	return func(c *UserAccountAPIController) {
		c.errorHandler = h
	}
}

// NewUserAccountAPIController creates a default api controller
func NewUserAccountAPIController(s UserAccountAPIServicer, opts ...UserAccountAPIOption) *UserAccountAPIController {
	controller := &UserAccountAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UserAccountAPIController
func (c *UserAccountAPIController) Routes() Routes {
	return Routes{
		"UserAccountGet": Route{
			strings.ToUpper("Get"),
			"/v5/user_account",
			c.UserAccountGet,
		},
		"UserAccountAnalytics": Route{
			strings.ToUpper("Get"),
			"/v5/user_account/analytics",
			c.UserAccountAnalytics,
		},
		"UserAccountAnalyticsTopPins": Route{
			strings.ToUpper("Get"),
			"/v5/user_account/analytics/top_pins",
			c.UserAccountAnalyticsTopPins,
		},
		"UserAccountAnalyticsTopVideoPins": Route{
			strings.ToUpper("Get"),
			"/v5/user_account/analytics/top_video_pins",
			c.UserAccountAnalyticsTopVideoPins,
		},
		"LinkedBusinessAccountsGet": Route{
			strings.ToUpper("Get"),
			"/v5/user_account/businesses",
			c.LinkedBusinessAccountsGet,
		},
		"FollowersList": Route{
			strings.ToUpper("Get"),
			"/v5/user_account/followers",
			c.FollowersList,
		},
		"UserFollowingGet": Route{
			strings.ToUpper("Get"),
			"/v5/user_account/following",
			c.UserFollowingGet,
		},
		"BoardsUserFollowsList": Route{
			strings.ToUpper("Get"),
			"/v5/user_account/following/boards",
			c.BoardsUserFollowsList,
		},
		"FollowUserUpdate": Route{
			strings.ToUpper("Post"),
			"/v5/user_account/following/{username}",
			c.FollowUserUpdate,
		},
		"UserWebsitesGet": Route{
			strings.ToUpper("Get"),
			"/v5/user_account/websites",
			c.UserWebsitesGet,
		},
		"VerifyWebsiteUpdate": Route{
			strings.ToUpper("Post"),
			"/v5/user_account/websites",
			c.VerifyWebsiteUpdate,
		},
		"UnverifyWebsiteDelete": Route{
			strings.ToUpper("Delete"),
			"/v5/user_account/websites",
			c.UnverifyWebsiteDelete,
		},
		"WebsiteVerificationGet": Route{
			strings.ToUpper("Get"),
			"/v5/user_account/websites/verification",
			c.WebsiteVerificationGet,
		},
		"UserAccountFollowedInterests": Route{
			strings.ToUpper("Get"),
			"/v5/users/{username}/interests/follow",
			c.UserAccountFollowedInterests,
		},
	}
}

// UserAccountGet - Get user account
func (c *UserAccountAPIController) UserAccountGet(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var adAccountIdParam string
	if query.Has("ad_account_id") {
		param := query.Get("ad_account_id")

		adAccountIdParam = param
	} else {
	}
	result, err := c.service.UserAccountGet(r.Context(), adAccountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UserAccountAnalytics - Get user account analytics
func (c *UserAccountAPIController) UserAccountAnalytics(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var startDateParam string
	if query.Has("start_date") {
		param := string(query.Get("start_date"))

		startDateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "start_date"}, nil)
		return
	}
	var endDateParam string
	if query.Has("end_date") {
		param := string(query.Get("end_date"))

		endDateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "end_date"}, nil)
		return
	}
	var fromClaimedContentParam string
	if query.Has("from_claimed_content") {
		param := query.Get("from_claimed_content")

		fromClaimedContentParam = param
	} else {
		param := "BOTH"
		fromClaimedContentParam = param
	}
	var pinFormatParam string
	if query.Has("pin_format") {
		param := query.Get("pin_format")

		pinFormatParam = param
	} else {
		param := "ALL"
		pinFormatParam = param
	}
	var appTypesParam string
	if query.Has("app_types") {
		param := query.Get("app_types")

		appTypesParam = param
	} else {
		param := "ALL"
		appTypesParam = param
	}
	var contentTypeParam string
	if query.Has("content_type") {
		param := query.Get("content_type")

		contentTypeParam = param
	} else {
		param := "ALL"
		contentTypeParam = param
	}
	var sourceParam string
	if query.Has("source") {
		param := query.Get("source")

		sourceParam = param
	} else {
		param := "ALL"
		sourceParam = param
	}
	var metricTypesParam []string
	if query.Has("metric_types") {
		metricTypesParam = strings.Split(query.Get("metric_types"), ",")
	}
	var splitFieldParam string
	if query.Has("split_field") {
		param := query.Get("split_field")

		splitFieldParam = param
	} else {
		param := "NO_SPLIT"
		splitFieldParam = param
	}
	var adAccountIdParam string
	if query.Has("ad_account_id") {
		param := query.Get("ad_account_id")

		adAccountIdParam = param
	} else {
	}
	result, err := c.service.UserAccountAnalytics(r.Context(), startDateParam, endDateParam, fromClaimedContentParam, pinFormatParam, appTypesParam, contentTypeParam, sourceParam, metricTypesParam, splitFieldParam, adAccountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UserAccountAnalyticsTopPins - Get user account top pins analytics
func (c *UserAccountAPIController) UserAccountAnalyticsTopPins(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var startDateParam string
	if query.Has("start_date") {
		param := string(query.Get("start_date"))

		startDateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "start_date"}, nil)
		return
	}
	var endDateParam string
	if query.Has("end_date") {
		param := string(query.Get("end_date"))

		endDateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "end_date"}, nil)
		return
	}
	var sortByParam string
	if query.Has("sort_by") {
		param := query.Get("sort_by")

		sortByParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "sort_by"}, nil)
		return
	}
	var fromClaimedContentParam string
	if query.Has("from_claimed_content") {
		param := query.Get("from_claimed_content")

		fromClaimedContentParam = param
	} else {
		param := "BOTH"
		fromClaimedContentParam = param
	}
	var pinFormatParam string
	if query.Has("pin_format") {
		param := query.Get("pin_format")

		pinFormatParam = param
	} else {
		param := "ALL"
		pinFormatParam = param
	}
	var appTypesParam string
	if query.Has("app_types") {
		param := query.Get("app_types")

		appTypesParam = param
	} else {
		param := "ALL"
		appTypesParam = param
	}
	var contentTypeParam string
	if query.Has("content_type") {
		param := query.Get("content_type")

		contentTypeParam = param
	} else {
		param := "ALL"
		contentTypeParam = param
	}
	var sourceParam string
	if query.Has("source") {
		param := query.Get("source")

		sourceParam = param
	} else {
		param := "ALL"
		sourceParam = param
	}
	var metricTypesParam []string
	if query.Has("metric_types") {
		metricTypesParam = strings.Split(query.Get("metric_types"), ",")
	}
	var numOfPinsParam int32
	if query.Has("num_of_pins") {
		param, err := parseNumericParameter[int32](
			query.Get("num_of_pins"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "num_of_pins", Err: err}, nil)
			return
		}

		numOfPinsParam = param
	} else {
		var param int32 = 10
		numOfPinsParam = param
	}
	var createdInLastNDaysParam int32
	if query.Has("created_in_last_n_days") {
		param, err := parseNumericParameter[int32](
			query.Get("created_in_last_n_days"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "created_in_last_n_days", Err: err}, nil)
			return
		}

		createdInLastNDaysParam = param
	} else {
	}
	var adAccountIdParam string
	if query.Has("ad_account_id") {
		param := query.Get("ad_account_id")

		adAccountIdParam = param
	} else {
	}
	result, err := c.service.UserAccountAnalyticsTopPins(r.Context(), startDateParam, endDateParam, sortByParam, fromClaimedContentParam, pinFormatParam, appTypesParam, contentTypeParam, sourceParam, metricTypesParam, numOfPinsParam, createdInLastNDaysParam, adAccountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UserAccountAnalyticsTopVideoPins - Get user account top video pins analytics
func (c *UserAccountAPIController) UserAccountAnalyticsTopVideoPins(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var startDateParam string
	if query.Has("start_date") {
		param := string(query.Get("start_date"))

		startDateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "start_date"}, nil)
		return
	}
	var endDateParam string
	if query.Has("end_date") {
		param := string(query.Get("end_date"))

		endDateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "end_date"}, nil)
		return
	}
	var sortByParam string
	if query.Has("sort_by") {
		param := query.Get("sort_by")

		sortByParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "sort_by"}, nil)
		return
	}
	var fromClaimedContentParam string
	if query.Has("from_claimed_content") {
		param := query.Get("from_claimed_content")

		fromClaimedContentParam = param
	} else {
		param := "BOTH"
		fromClaimedContentParam = param
	}
	var pinFormatParam string
	if query.Has("pin_format") {
		param := query.Get("pin_format")

		pinFormatParam = param
	} else {
		param := "ALL"
		pinFormatParam = param
	}
	var appTypesParam string
	if query.Has("app_types") {
		param := query.Get("app_types")

		appTypesParam = param
	} else {
		param := "ALL"
		appTypesParam = param
	}
	var contentTypeParam string
	if query.Has("content_type") {
		param := query.Get("content_type")

		contentTypeParam = param
	} else {
		param := "ALL"
		contentTypeParam = param
	}
	var sourceParam string
	if query.Has("source") {
		param := query.Get("source")

		sourceParam = param
	} else {
		param := "ALL"
		sourceParam = param
	}
	var metricTypesParam []string
	if query.Has("metric_types") {
		metricTypesParam = strings.Split(query.Get("metric_types"), ",")
	}
	var numOfPinsParam int32
	if query.Has("num_of_pins") {
		param, err := parseNumericParameter[int32](
			query.Get("num_of_pins"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "num_of_pins", Err: err}, nil)
			return
		}

		numOfPinsParam = param
	} else {
		var param int32 = 10
		numOfPinsParam = param
	}
	var createdInLastNDaysParam int32
	if query.Has("created_in_last_n_days") {
		param, err := parseNumericParameter[int32](
			query.Get("created_in_last_n_days"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "created_in_last_n_days", Err: err}, nil)
			return
		}

		createdInLastNDaysParam = param
	} else {
	}
	var adAccountIdParam string
	if query.Has("ad_account_id") {
		param := query.Get("ad_account_id")

		adAccountIdParam = param
	} else {
	}
	result, err := c.service.UserAccountAnalyticsTopVideoPins(r.Context(), startDateParam, endDateParam, sortByParam, fromClaimedContentParam, pinFormatParam, appTypesParam, contentTypeParam, sourceParam, metricTypesParam, numOfPinsParam, createdInLastNDaysParam, adAccountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// LinkedBusinessAccountsGet - List linked businesses
func (c *UserAccountAPIController) LinkedBusinessAccountsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.LinkedBusinessAccountsGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// FollowersList - List followers
func (c *UserAccountAPIController) FollowersList(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	result, err := c.service.FollowersList(r.Context(), bookmarkParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UserFollowingGet - List following
func (c *UserAccountAPIController) UserFollowingGet(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	var feedTypeParam UserFollowingFeedType
	if query.Has("feed_type") {
		param := query.Get("feed_type")

		feedTypeParam = param
	} else {
	}
	var explicitFollowingParam bool
	if query.Has("explicit_following") {
		param, err := parseBoolParameter(
			query.Get("explicit_following"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "explicit_following", Err: err}, nil)
			return
		}

		explicitFollowingParam = param
	} else {
		var param bool = false
		explicitFollowingParam = param
	}
	var adAccountIdParam string
	if query.Has("ad_account_id") {
		param := query.Get("ad_account_id")

		adAccountIdParam = param
	} else {
	}
	result, err := c.service.UserFollowingGet(r.Context(), bookmarkParam, pageSizeParam, feedTypeParam, explicitFollowingParam, adAccountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// BoardsUserFollowsList - List following boards
func (c *UserAccountAPIController) BoardsUserFollowsList(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	var explicitFollowingParam bool
	if query.Has("explicit_following") {
		param, err := parseBoolParameter(
			query.Get("explicit_following"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "explicit_following", Err: err}, nil)
			return
		}

		explicitFollowingParam = param
	} else {
		var param bool = false
		explicitFollowingParam = param
	}
	var adAccountIdParam string
	if query.Has("ad_account_id") {
		param := query.Get("ad_account_id")

		adAccountIdParam = param
	} else {
	}
	result, err := c.service.BoardsUserFollowsList(r.Context(), bookmarkParam, pageSizeParam, explicitFollowingParam, adAccountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// FollowUserUpdate - Follow user
func (c *UserAccountAPIController) FollowUserUpdate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	usernameParam := params["username"]
	if usernameParam == "" {
		c.errorHandler(w, r, &RequiredError{"username"}, nil)
		return
	}
	followUserRequestParam := FollowUserRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&followUserRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertFollowUserRequestRequired(followUserRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertFollowUserRequestConstraints(followUserRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.FollowUserUpdate(r.Context(), usernameParam, followUserRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UserWebsitesGet - Get user websites
func (c *UserAccountAPIController) UserWebsitesGet(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	result, err := c.service.UserWebsitesGet(r.Context(), bookmarkParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// VerifyWebsiteUpdate - Verify website
func (c *UserAccountAPIController) VerifyWebsiteUpdate(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	userWebsiteVerifyRequestParam := UserWebsiteVerifyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&userWebsiteVerifyRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserWebsiteVerifyRequestRequired(userWebsiteVerifyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserWebsiteVerifyRequestConstraints(userWebsiteVerifyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var adAccountIdParam string
	if query.Has("ad_account_id") {
		param := query.Get("ad_account_id")

		adAccountIdParam = param
	} else {
	}
	result, err := c.service.VerifyWebsiteUpdate(r.Context(), userWebsiteVerifyRequestParam, adAccountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UnverifyWebsiteDelete - Unverify website
func (c *UserAccountAPIController) UnverifyWebsiteDelete(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var websiteParam string
	if query.Has("website") {
		param := query.Get("website")

		websiteParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "website"}, nil)
		return
	}
	result, err := c.service.UnverifyWebsiteDelete(r.Context(), websiteParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// WebsiteVerificationGet - Get user verification code for website claiming
func (c *UserAccountAPIController) WebsiteVerificationGet(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var adAccountIdParam string
	if query.Has("ad_account_id") {
		param := query.Get("ad_account_id")

		adAccountIdParam = param
	} else {
	}
	result, err := c.service.WebsiteVerificationGet(r.Context(), adAccountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UserAccountFollowedInterests - List following interests
func (c *UserAccountAPIController) UserAccountFollowedInterests(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	usernameParam := params["username"]
	if usernameParam == "" {
		c.errorHandler(w, r, &RequiredError{"username"}, nil)
		return
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	result, err := c.service.UserAccountFollowedInterests(r.Context(), usernameParam, bookmarkParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
