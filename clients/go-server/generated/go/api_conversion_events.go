// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ConversionEventsAPIController binds http requests to an api service and writes the service results to the http response
type ConversionEventsAPIController struct {
	service ConversionEventsAPIServicer
	errorHandler ErrorHandler
}

// ConversionEventsAPIOption for how the controller is set up.
type ConversionEventsAPIOption func(*ConversionEventsAPIController)

// WithConversionEventsAPIErrorHandler inject ErrorHandler into controller
func WithConversionEventsAPIErrorHandler(h ErrorHandler) ConversionEventsAPIOption {
	return func(c *ConversionEventsAPIController) {
		c.errorHandler = h
	}
}

// NewConversionEventsAPIController creates a default api controller
func NewConversionEventsAPIController(s ConversionEventsAPIServicer, opts ...ConversionEventsAPIOption) *ConversionEventsAPIController {
	controller := &ConversionEventsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ConversionEventsAPIController
func (c *ConversionEventsAPIController) Routes() Routes {
	return Routes{
		"EventsCreate": Route{
			strings.ToUpper("Post"),
			"/v5/ad_accounts/{ad_account_id}/events",
			c.EventsCreate,
		},
	}
}

// EventsCreate - Send conversions
func (c *ConversionEventsAPIController) EventsCreate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	conversionEventsParam := ConversionEvents{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&conversionEventsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertConversionEventsRequired(conversionEventsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertConversionEventsConstraints(conversionEventsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var testParam bool
	if query.Has("test") {
		param, err := parseBoolParameter(
			query.Get("test"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "test", Err: err}, nil)
			return
		}

		testParam = param
	} else {
	}
	result, err := c.service.EventsCreate(r.Context(), adAccountIdParam, conversionEventsParam, testParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
