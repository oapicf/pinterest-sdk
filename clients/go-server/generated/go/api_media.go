// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// MediaAPIController binds http requests to an api service and writes the service results to the http response
type MediaAPIController struct {
	service MediaAPIServicer
	errorHandler ErrorHandler
}

// MediaAPIOption for how the controller is set up.
type MediaAPIOption func(*MediaAPIController)

// WithMediaAPIErrorHandler inject ErrorHandler into controller
func WithMediaAPIErrorHandler(h ErrorHandler) MediaAPIOption {
	return func(c *MediaAPIController) {
		c.errorHandler = h
	}
}

// NewMediaAPIController creates a default api controller
func NewMediaAPIController(s MediaAPIServicer, opts ...MediaAPIOption) *MediaAPIController {
	controller := &MediaAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the MediaAPIController
func (c *MediaAPIController) Routes() Routes {
	return Routes{
		"MediaList": Route{
			strings.ToUpper("Get"),
			"/v5/media",
			c.MediaList,
		},
		"MediaCreate": Route{
			strings.ToUpper("Post"),
			"/v5/media",
			c.MediaCreate,
		},
		"MediaGet": Route{
			strings.ToUpper("Get"),
			"/v5/media/{media_id}",
			c.MediaGet,
		},
	}
}

// MediaList - List media uploads
func (c *MediaAPIController) MediaList(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	result, err := c.service.MediaList(r.Context(), bookmarkParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// MediaCreate - Register media upload
func (c *MediaAPIController) MediaCreate(w http.ResponseWriter, r *http.Request) {
	mediaUploadRequestParam := MediaUploadRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&mediaUploadRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertMediaUploadRequestRequired(mediaUploadRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertMediaUploadRequestConstraints(mediaUploadRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.MediaCreate(r.Context(), mediaUploadRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// MediaGet - Get media upload details
func (c *MediaAPIController) MediaGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	mediaIdParam := params["media_id"]
	if mediaIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"media_id"}, nil)
		return
	}
	result, err := c.service.MediaGet(r.Context(), mediaIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
