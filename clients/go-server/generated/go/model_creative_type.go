// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi


import (
	"fmt"
)


// CreativeType : Ad creative type enum. For update, only draft ads may update creative type. </p><strong>Note:</strong> SHOP_THE_PIN has been deprecated. Please use COLLECTION instead.
type CreativeType string

// List of CreativeType
const (
	REGULAR CreativeType = "REGULAR"
	VIDEO CreativeType = "VIDEO"
	SHOPPING CreativeType = "SHOPPING"
	CAROUSEL CreativeType = "CAROUSEL"
	MAX_VIDEO CreativeType = "MAX_VIDEO"
	SHOP_THE_PIN CreativeType = "SHOP_THE_PIN"
	COLLECTION CreativeType = "COLLECTION"
	IDEA CreativeType = "IDEA"
	SHOWCASE CreativeType = "SHOWCASE"
	QUIZ CreativeType = "QUIZ"
)

// AllowedCreativeTypeEnumValues is all the allowed values of CreativeType enum
var AllowedCreativeTypeEnumValues = []CreativeType{
	"REGULAR",
	"VIDEO",
	"SHOPPING",
	"CAROUSEL",
	"MAX_VIDEO",
	"SHOP_THE_PIN",
	"COLLECTION",
	"IDEA",
	"SHOWCASE",
	"QUIZ",
}

// validCreativeTypeEnumValue provides a map of CreativeTypes for fast verification of use input
var validCreativeTypeEnumValues = map[CreativeType]struct{}{
	"REGULAR": {},
	"VIDEO": {},
	"SHOPPING": {},
	"CAROUSEL": {},
	"MAX_VIDEO": {},
	"SHOP_THE_PIN": {},
	"COLLECTION": {},
	"IDEA": {},
	"SHOWCASE": {},
	"QUIZ": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CreativeType) IsValid() bool {
	_, ok := validCreativeTypeEnumValues[v]
	return ok
}

// NewCreativeTypeFromValue returns a pointer to a valid CreativeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCreativeTypeFromValue(v string) (CreativeType, error) {
	ev := CreativeType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for CreativeType: valid values are %v", v, AllowedCreativeTypeEnumValues)
}



// AssertCreativeTypeRequired checks if the required fields are not zero-ed
func AssertCreativeTypeRequired(obj CreativeType) error {
	return nil
}

// AssertCreativeTypeConstraints checks if the values respects the defined constraints
func AssertCreativeTypeConstraints(obj CreativeType) error {
	return nil
}
