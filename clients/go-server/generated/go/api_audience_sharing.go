// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AudienceSharingAPIController binds http requests to an api service and writes the service results to the http response
type AudienceSharingAPIController struct {
	service AudienceSharingAPIServicer
	errorHandler ErrorHandler
}

// AudienceSharingAPIOption for how the controller is set up.
type AudienceSharingAPIOption func(*AudienceSharingAPIController)

// WithAudienceSharingAPIErrorHandler inject ErrorHandler into controller
func WithAudienceSharingAPIErrorHandler(h ErrorHandler) AudienceSharingAPIOption {
	return func(c *AudienceSharingAPIController) {
		c.errorHandler = h
	}
}

// NewAudienceSharingAPIController creates a default api controller
func NewAudienceSharingAPIController(s AudienceSharingAPIServicer, opts ...AudienceSharingAPIOption) *AudienceSharingAPIController {
	controller := &AudienceSharingAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AudienceSharingAPIController
func (c *AudienceSharingAPIController) Routes() Routes {
	return Routes{
		"AdAccountsAudiencesSharedAccountsList": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/audiences/shared/accounts",
			c.AdAccountsAudiencesSharedAccountsList,
		},
		"UpdateAdAccountToAdAccountSharedAudience": Route{
			strings.ToUpper("Patch"),
			"/v5/ad_accounts/{ad_account_id}/audiences/ad_accounts/shared",
			c.UpdateAdAccountToAdAccountSharedAudience,
		},
		"UpdateAdAccountToBusinessSharedAudience": Route{
			strings.ToUpper("Patch"),
			"/v5/ad_accounts/{ad_account_id}/audiences/businesses/shared",
			c.UpdateAdAccountToBusinessSharedAudience,
		},
		"SharedAudiencesForBusinessList": Route{
			strings.ToUpper("Get"),
			"/v5/businesses/{business_id}/audiences",
			c.SharedAudiencesForBusinessList,
		},
		"BusinessAccountAudiencesSharedAccountsList": Route{
			strings.ToUpper("Get"),
			"/v5/businesses/{business_id}/audiences/shared/accounts",
			c.BusinessAccountAudiencesSharedAccountsList,
		},
		"UpdateBusinessToAdAccountSharedAudience": Route{
			strings.ToUpper("Patch"),
			"/v5/businesses/{business_id}/audiences/ad_accounts/shared",
			c.UpdateBusinessToAdAccountSharedAudience,
		},
		"UpdateBusinessToBusinessSharedAudience": Route{
			strings.ToUpper("Patch"),
			"/v5/businesses/{business_id}/audiences/businesses/shared",
			c.UpdateBusinessToBusinessSharedAudience,
		},
	}
}

// AdAccountsAudiencesSharedAccountsList - List accounts with access to an audience owned by an ad account
func (c *AudienceSharingAPIController) AdAccountsAudiencesSharedAccountsList(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	var audienceIdParam string
	if query.Has("audience_id") {
		param := query.Get("audience_id")

		audienceIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "audience_id"}, nil)
		return
	}
	var accountTypeParam AudienceAccountType
	if query.Has("account_type") {
		param := AudienceAccountType(query.Get("account_type"))

		accountTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "account_type"}, nil)
		return
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	result, err := c.service.AdAccountsAudiencesSharedAccountsList(r.Context(), adAccountIdParam, audienceIdParam, accountTypeParam, pageSizeParam, bookmarkParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateAdAccountToAdAccountSharedAudience - Update audience sharing between ad accounts
func (c *AudienceSharingAPIController) UpdateAdAccountToAdAccountSharedAudience(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	sharedAudienceParam := SharedAudience{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&sharedAudienceParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSharedAudienceRequired(sharedAudienceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSharedAudienceConstraints(sharedAudienceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateAdAccountToAdAccountSharedAudience(r.Context(), adAccountIdParam, sharedAudienceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateAdAccountToBusinessSharedAudience - Update audience sharing from an ad account to businesses
func (c *AudienceSharingAPIController) UpdateAdAccountToBusinessSharedAudience(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	businessSharedAudienceParam := BusinessSharedAudience{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&businessSharedAudienceParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBusinessSharedAudienceRequired(businessSharedAudienceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBusinessSharedAudienceConstraints(businessSharedAudienceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateAdAccountToBusinessSharedAudience(r.Context(), adAccountIdParam, businessSharedAudienceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SharedAudiencesForBusinessList - List received audiences for a business
func (c *AudienceSharingAPIController) SharedAudiencesForBusinessList(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam := params["business_id"]
	if businessIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"business_id"}, nil)
		return
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	result, err := c.service.SharedAudiencesForBusinessList(r.Context(), businessIdParam, bookmarkParam, orderParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// BusinessAccountAudiencesSharedAccountsList - List accounts with access to an audience owned by a business
func (c *AudienceSharingAPIController) BusinessAccountAudiencesSharedAccountsList(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam := params["business_id"]
	if businessIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"business_id"}, nil)
		return
	}
	var audienceIdParam string
	if query.Has("audience_id") {
		param := query.Get("audience_id")

		audienceIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "audience_id"}, nil)
		return
	}
	var accountTypeParam AudienceAccountType
	if query.Has("account_type") {
		param := AudienceAccountType(query.Get("account_type"))

		accountTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "account_type"}, nil)
		return
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	result, err := c.service.BusinessAccountAudiencesSharedAccountsList(r.Context(), businessIdParam, audienceIdParam, accountTypeParam, pageSizeParam, bookmarkParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateBusinessToAdAccountSharedAudience - Update audience sharing from a business to ad accounts
func (c *AudienceSharingAPIController) UpdateBusinessToAdAccountSharedAudience(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam := params["business_id"]
	if businessIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"business_id"}, nil)
		return
	}
	sharedAudienceParam := SharedAudience{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&sharedAudienceParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSharedAudienceRequired(sharedAudienceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSharedAudienceConstraints(sharedAudienceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateBusinessToAdAccountSharedAudience(r.Context(), businessIdParam, sharedAudienceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateBusinessToBusinessSharedAudience - Update audience sharing between businesses
func (c *AudienceSharingAPIController) UpdateBusinessToBusinessSharedAudience(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam := params["business_id"]
	if businessIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"business_id"}, nil)
		return
	}
	businessSharedAudienceParam := BusinessSharedAudience{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&businessSharedAudienceParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBusinessSharedAudienceRequired(businessSharedAudienceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBusinessSharedAudienceConstraints(businessSharedAudienceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateBusinessToBusinessSharedAudience(r.Context(), businessIdParam, businessSharedAudienceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
