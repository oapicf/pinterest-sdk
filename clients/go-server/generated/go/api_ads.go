// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// AdsAPIController binds http requests to an api service and writes the service results to the http response
type AdsAPIController struct {
	service AdsAPIServicer
	errorHandler ErrorHandler
}

// AdsAPIOption for how the controller is set up.
type AdsAPIOption func(*AdsAPIController)

// WithAdsAPIErrorHandler inject ErrorHandler into controller
func WithAdsAPIErrorHandler(h ErrorHandler) AdsAPIOption {
	return func(c *AdsAPIController) {
		c.errorHandler = h
	}
}

// NewAdsAPIController creates a default api controller
func NewAdsAPIController(s AdsAPIServicer, opts ...AdsAPIOption) *AdsAPIController {
	controller := &AdsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AdsAPIController
func (c *AdsAPIController) Routes() Routes {
	return Routes{
		"AdPreviewsCreate": Route{
			strings.ToUpper("Post"),
			"/v5/ad_accounts/{ad_account_id}/ad_previews",
			c.AdPreviewsCreate,
		},
		"AdsList": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/ads",
			c.AdsList,
		},
		"AdsCreate": Route{
			strings.ToUpper("Post"),
			"/v5/ad_accounts/{ad_account_id}/ads",
			c.AdsCreate,
		},
		"AdsUpdate": Route{
			strings.ToUpper("Patch"),
			"/v5/ad_accounts/{ad_account_id}/ads",
			c.AdsUpdate,
		},
		"AdsAnalytics": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/ads/analytics",
			c.AdsAnalytics,
		},
		"AdTargetingAnalyticsGet": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/ads/targeting_analytics",
			c.AdTargetingAnalyticsGet,
		},
		"AdsGet": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/ads/{ad_id}",
			c.AdsGet,
		},
	}
}

// AdPreviewsCreate - Create ad preview with pin or image
func (c *AdsAPIController) AdPreviewsCreate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	adPreviewRequestParam := AdPreviewRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&adPreviewRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAdPreviewRequestRequired(adPreviewRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAdPreviewRequestConstraints(adPreviewRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AdPreviewsCreate(r.Context(), adAccountIdParam, adPreviewRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AdsList - List ads
func (c *AdsAPIController) AdsList(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	var campaignIdsParam []string
	if query.Has("campaign_ids") {
		campaignIdsParam = strings.Split(query.Get("campaign_ids"), ",")
	}
	var adGroupIdsParam []string
	if query.Has("ad_group_ids") {
		adGroupIdsParam = strings.Split(query.Get("ad_group_ids"), ",")
	}
	var adIdsParam []string
	if query.Has("ad_ids") {
		adIdsParam = strings.Split(query.Get("ad_ids"), ",")
	}
	var entityStatusesParam []string
	if query.Has("entity_statuses") {
		entityStatusesParam = strings.Split(query.Get("entity_statuses"), ",")
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	result, err := c.service.AdsList(r.Context(), adAccountIdParam, campaignIdsParam, adGroupIdsParam, adIdsParam, entityStatusesParam, pageSizeParam, orderParam, bookmarkParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AdsCreate - Create ads
func (c *AdsAPIController) AdsCreate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	adCreateRequestParam := []AdCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&adCreateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range adCreateRequestParam {
		if err := AssertAdCreateRequestRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.AdsCreate(r.Context(), adAccountIdParam, adCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AdsUpdate - Update ads
func (c *AdsAPIController) AdsUpdate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	adUpdateRequestParam := []AdUpdateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&adUpdateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range adUpdateRequestParam {
		if err := AssertAdUpdateRequestRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.AdsUpdate(r.Context(), adAccountIdParam, adUpdateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AdsAnalytics - Get ad analytics
func (c *AdsAPIController) AdsAnalytics(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	var startDateParam string
	if query.Has("start_date") {
		param := string(query.Get("start_date"))

		startDateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "start_date"}, nil)
		return
	}
	var endDateParam string
	if query.Has("end_date") {
		param := string(query.Get("end_date"))

		endDateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "end_date"}, nil)
		return
	}
	var columnsParam []string
	if query.Has("columns") {
		columnsParam = strings.Split(query.Get("columns"), ",")
	}
	var granularityParam Granularity
	if query.Has("granularity") {
		param := Granularity(query.Get("granularity"))

		granularityParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "granularity"}, nil)
		return
	}
	var adIdsParam []string
	if query.Has("ad_ids") {
		adIdsParam = strings.Split(query.Get("ad_ids"), ",")
	}
	var clickWindowDaysParam int32
	if query.Has("click_window_days") {
		param, err := parseNumericParameter[int32](
			query.Get("click_window_days"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "click_window_days", Err: err}, nil)
			return
		}

		clickWindowDaysParam = param
	} else {
		var param int32 = 30
		clickWindowDaysParam = param
	}
	var engagementWindowDaysParam int32
	if query.Has("engagement_window_days") {
		param, err := parseNumericParameter[int32](
			query.Get("engagement_window_days"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "engagement_window_days", Err: err}, nil)
			return
		}

		engagementWindowDaysParam = param
	} else {
		var param int32 = 30
		engagementWindowDaysParam = param
	}
	var viewWindowDaysParam int32
	if query.Has("view_window_days") {
		param, err := parseNumericParameter[int32](
			query.Get("view_window_days"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "view_window_days", Err: err}, nil)
			return
		}

		viewWindowDaysParam = param
	} else {
		var param int32 = 1
		viewWindowDaysParam = param
	}
	var conversionReportTimeParam string
	if query.Has("conversion_report_time") {
		param := query.Get("conversion_report_time")

		conversionReportTimeParam = param
	} else {
		param := "TIME_OF_AD_ACTION"
		conversionReportTimeParam = param
	}
	var pinIdsParam []string
	if query.Has("pin_ids") {
		pinIdsParam = strings.Split(query.Get("pin_ids"), ",")
	}
	var campaignIdsParam []string
	if query.Has("campaign_ids") {
		campaignIdsParam = strings.Split(query.Get("campaign_ids"), ",")
	}
	result, err := c.service.AdsAnalytics(r.Context(), adAccountIdParam, startDateParam, endDateParam, columnsParam, granularityParam, adIdsParam, clickWindowDaysParam, engagementWindowDaysParam, viewWindowDaysParam, conversionReportTimeParam, pinIdsParam, campaignIdsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AdTargetingAnalyticsGet - Get targeting analytics for ads
func (c *AdsAPIController) AdTargetingAnalyticsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	var adIdsParam []string
	if query.Has("ad_ids") {
		adIdsParam = strings.Split(query.Get("ad_ids"), ",")
	}
	var startDateParam string
	if query.Has("start_date") {
		param := string(query.Get("start_date"))

		startDateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "start_date"}, nil)
		return
	}
	var endDateParam string
	if query.Has("end_date") {
		param := string(query.Get("end_date"))

		endDateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "end_date"}, nil)
		return
	}
	var targetingTypesParam []AdsAnalyticsAdTargetingType
	if query.Has("targeting_types") {
		paramSplits := strings.Split(query.Get("targeting_types"), ",")
		targetingTypesParam = make([]AdsAnalyticsAdTargetingType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewAdsAnalyticsAdTargetingTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Param: "targeting_types", Err: err}, nil)
				return
			}
			targetingTypesParam = append(targetingTypesParam, paramEnum)
		}
	}
	var columnsParam []string
	if query.Has("columns") {
		columnsParam = strings.Split(query.Get("columns"), ",")
	}
	var granularityParam Granularity
	if query.Has("granularity") {
		param := Granularity(query.Get("granularity"))

		granularityParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "granularity"}, nil)
		return
	}
	var clickWindowDaysParam int32
	if query.Has("click_window_days") {
		param, err := parseNumericParameter[int32](
			query.Get("click_window_days"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "click_window_days", Err: err}, nil)
			return
		}

		clickWindowDaysParam = param
	} else {
		var param int32 = 30
		clickWindowDaysParam = param
	}
	var engagementWindowDaysParam int32
	if query.Has("engagement_window_days") {
		param, err := parseNumericParameter[int32](
			query.Get("engagement_window_days"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "engagement_window_days", Err: err}, nil)
			return
		}

		engagementWindowDaysParam = param
	} else {
		var param int32 = 30
		engagementWindowDaysParam = param
	}
	var viewWindowDaysParam int32
	if query.Has("view_window_days") {
		param, err := parseNumericParameter[int32](
			query.Get("view_window_days"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "view_window_days", Err: err}, nil)
			return
		}

		viewWindowDaysParam = param
	} else {
		var param int32 = 1
		viewWindowDaysParam = param
	}
	var conversionReportTimeParam string
	if query.Has("conversion_report_time") {
		param := query.Get("conversion_report_time")

		conversionReportTimeParam = param
	} else {
		param := "TIME_OF_AD_ACTION"
		conversionReportTimeParam = param
	}
	var attributionTypesParam ConversionReportAttributionType
	if query.Has("attribution_types") {
		param := ConversionReportAttributionType(query.Get("attribution_types"))

		attributionTypesParam = param
	} else {
	}
	result, err := c.service.AdTargetingAnalyticsGet(r.Context(), adAccountIdParam, adIdsParam, startDateParam, endDateParam, targetingTypesParam, columnsParam, granularityParam, clickWindowDaysParam, engagementWindowDaysParam, viewWindowDaysParam, conversionReportTimeParam, attributionTypesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AdsGet - Get ad
func (c *AdsAPIController) AdsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	adIdParam := params["ad_id"]
	if adIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_id"}, nil)
		return
	}
	result, err := c.service.AdsGet(r.Context(), adAccountIdParam, adIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
