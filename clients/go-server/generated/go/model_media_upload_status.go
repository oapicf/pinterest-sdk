// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi


import (
	"fmt"
)


// MediaUploadStatus : Media upload status
type MediaUploadStatus string

// List of MediaUploadStatus
const (
	REGISTERED MediaUploadStatus = "registered"
	PROCESSING MediaUploadStatus = "processing"
	SUCCEEDED MediaUploadStatus = "succeeded"
	FAILED MediaUploadStatus = "failed"
)

// AllowedMediaUploadStatusEnumValues is all the allowed values of MediaUploadStatus enum
var AllowedMediaUploadStatusEnumValues = []MediaUploadStatus{
	"registered",
	"processing",
	"succeeded",
	"failed",
}

// validMediaUploadStatusEnumValue provides a map of MediaUploadStatuss for fast verification of use input
var validMediaUploadStatusEnumValues = map[MediaUploadStatus]struct{}{
	"registered": {},
	"processing": {},
	"succeeded": {},
	"failed": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MediaUploadStatus) IsValid() bool {
	_, ok := validMediaUploadStatusEnumValues[v]
	return ok
}

// NewMediaUploadStatusFromValue returns a pointer to a valid MediaUploadStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMediaUploadStatusFromValue(v string) (MediaUploadStatus, error) {
	ev := MediaUploadStatus(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for MediaUploadStatus: valid values are %v", v, AllowedMediaUploadStatusEnumValues)
}



// AssertMediaUploadStatusRequired checks if the required fields are not zero-ed
func AssertMediaUploadStatusRequired(obj MediaUploadStatus) error {
	return nil
}

// AssertMediaUploadStatusConstraints checks if the values respects the defined constraints
func AssertMediaUploadStatusConstraints(obj MediaUploadStatus) error {
	return nil
}
