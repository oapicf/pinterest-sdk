// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi


import (
	"fmt"
)



type CatalogsLocale string

// List of CatalogsLocale
const (
	AF_ZA CatalogsLocale = "af-ZA"
	AR_SA CatalogsLocale = "ar-SA"
	BG_BG CatalogsLocale = "bg-BG"
	BN_IN CatalogsLocale = "bn-IN"
	CS_CZ CatalogsLocale = "cs-CZ"
	DA_DK CatalogsLocale = "da-DK"
	DE CatalogsLocale = "de"
	EL_GR CatalogsLocale = "el-GR"
	EN_AU CatalogsLocale = "en-AU"
	EN_CA CatalogsLocale = "en-CA"
	EN_GB CatalogsLocale = "en-GB"
	EN_IN CatalogsLocale = "en-IN"
	EN_US CatalogsLocale = "en-US"
	ES_419 CatalogsLocale = "es-419"
	ES_AR CatalogsLocale = "es-AR"
	ES_ES CatalogsLocale = "es-ES"
	ES_MX CatalogsLocale = "es-MX"
	FI_FI CatalogsLocale = "fi-FI"
	FR CatalogsLocale = "fr"
	FR_CA CatalogsLocale = "fr-CA"
	HE_IL CatalogsLocale = "he-IL"
	HI_IN CatalogsLocale = "hi-IN"
	HR_HR CatalogsLocale = "hr-HR"
	HU_HU CatalogsLocale = "hu-HU"
	ID_ID CatalogsLocale = "id-ID"
	IT CatalogsLocale = "it"
	JA CatalogsLocale = "ja"
	KO_KR CatalogsLocale = "ko-KR"
	MS_MY CatalogsLocale = "ms-MY"
	NB_NO CatalogsLocale = "nb-NO"
	NL CatalogsLocale = "nl"
	PL_PL CatalogsLocale = "pl-PL"
	PT_BR CatalogsLocale = "pt-BR"
	PT_PT CatalogsLocale = "pt-PT"
	RO_RO CatalogsLocale = "ro-RO"
	RU_RU CatalogsLocale = "ru-RU"
	SK_SK CatalogsLocale = "sk-SK"
	SV_SE CatalogsLocale = "sv-SE"
	TE_IN CatalogsLocale = "te-IN"
	TH_TH CatalogsLocale = "th-TH"
	TL_PH CatalogsLocale = "tl-PH"
	TR CatalogsLocale = "tr"
	UK_UA CatalogsLocale = "uk-UA"
	VI_VN CatalogsLocale = "vi-VN"
	ZH_CN CatalogsLocale = "zh-CN"
	ZH_TW CatalogsLocale = "zh-TW"
)

// AllowedCatalogsLocaleEnumValues is all the allowed values of CatalogsLocale enum
var AllowedCatalogsLocaleEnumValues = []CatalogsLocale{
	"af-ZA",
	"ar-SA",
	"bg-BG",
	"bn-IN",
	"cs-CZ",
	"da-DK",
	"de",
	"el-GR",
	"en-AU",
	"en-CA",
	"en-GB",
	"en-IN",
	"en-US",
	"es-419",
	"es-AR",
	"es-ES",
	"es-MX",
	"fi-FI",
	"fr",
	"fr-CA",
	"he-IL",
	"hi-IN",
	"hr-HR",
	"hu-HU",
	"id-ID",
	"it",
	"ja",
	"ko-KR",
	"ms-MY",
	"nb-NO",
	"nl",
	"pl-PL",
	"pt-BR",
	"pt-PT",
	"ro-RO",
	"ru-RU",
	"sk-SK",
	"sv-SE",
	"te-IN",
	"th-TH",
	"tl-PH",
	"tr",
	"uk-UA",
	"vi-VN",
	"zh-CN",
	"zh-TW",
}

// validCatalogsLocaleEnumValue provides a map of CatalogsLocales for fast verification of use input
var validCatalogsLocaleEnumValues = map[CatalogsLocale]struct{}{
	"af-ZA": {},
	"ar-SA": {},
	"bg-BG": {},
	"bn-IN": {},
	"cs-CZ": {},
	"da-DK": {},
	"de": {},
	"el-GR": {},
	"en-AU": {},
	"en-CA": {},
	"en-GB": {},
	"en-IN": {},
	"en-US": {},
	"es-419": {},
	"es-AR": {},
	"es-ES": {},
	"es-MX": {},
	"fi-FI": {},
	"fr": {},
	"fr-CA": {},
	"he-IL": {},
	"hi-IN": {},
	"hr-HR": {},
	"hu-HU": {},
	"id-ID": {},
	"it": {},
	"ja": {},
	"ko-KR": {},
	"ms-MY": {},
	"nb-NO": {},
	"nl": {},
	"pl-PL": {},
	"pt-BR": {},
	"pt-PT": {},
	"ro-RO": {},
	"ru-RU": {},
	"sk-SK": {},
	"sv-SE": {},
	"te-IN": {},
	"th-TH": {},
	"tl-PH": {},
	"tr": {},
	"uk-UA": {},
	"vi-VN": {},
	"zh-CN": {},
	"zh-TW": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CatalogsLocale) IsValid() bool {
	_, ok := validCatalogsLocaleEnumValues[v]
	return ok
}

// NewCatalogsLocaleFromValue returns a pointer to a valid CatalogsLocale
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCatalogsLocaleFromValue(v string) (CatalogsLocale, error) {
	ev := CatalogsLocale(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for CatalogsLocale: valid values are %v", v, AllowedCatalogsLocaleEnumValues)
}



// AssertCatalogsLocaleRequired checks if the required fields are not zero-ed
func AssertCatalogsLocaleRequired(obj CatalogsLocale) error {
	return nil
}

// AssertCatalogsLocaleConstraints checks if the values respects the defined constraints
func AssertCatalogsLocaleConstraints(obj CatalogsLocale) error {
	return nil
}
