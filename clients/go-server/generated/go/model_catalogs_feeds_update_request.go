// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi




// CatalogsFeedsUpdateRequest - Request object for updating a feed.
type CatalogsFeedsUpdateRequest struct {

	DefaultAvailability *ProductAvailabilityType `json:"default_availability,omitempty"`

	DefaultCurrency *NullableCurrency `json:"default_currency,omitempty"`

	// A human-friendly name associated to a given feed.
	Name string `json:"name,omitempty"`

	Format CatalogsFormat `json:"format,omitempty"`

	Credentials *CatalogsFeedCredentials `json:"credentials,omitempty"`

	// The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
	Location string `json:"location,omitempty" validate:"regexp=^(http|https|ftp|sftp):\\/\\/"`

	PreferredProcessingSchedule *CatalogsFeedProcessingSchedule `json:"preferred_processing_schedule,omitempty"`

	Status CatalogsStatus `json:"status,omitempty"`
}

// AssertCatalogsFeedsUpdateRequestRequired checks if the required fields are not zero-ed
func AssertCatalogsFeedsUpdateRequestRequired(obj CatalogsFeedsUpdateRequest) error {
	if obj.Credentials != nil {
		if err := AssertCatalogsFeedCredentialsRequired(*obj.Credentials); err != nil {
			return err
		}
	}
	if obj.PreferredProcessingSchedule != nil {
		if err := AssertCatalogsFeedProcessingScheduleRequired(*obj.PreferredProcessingSchedule); err != nil {
			return err
		}
	}
	return nil
}

// AssertCatalogsFeedsUpdateRequestConstraints checks if the values respects the defined constraints
func AssertCatalogsFeedsUpdateRequestConstraints(obj CatalogsFeedsUpdateRequest) error {
    if obj.Credentials != nil {
     	if err := AssertCatalogsFeedCredentialsConstraints(*obj.Credentials); err != nil {
     		return err
     	}
    }
    if obj.PreferredProcessingSchedule != nil {
     	if err := AssertCatalogsFeedProcessingScheduleConstraints(*obj.PreferredProcessingSchedule); err != nil {
     		return err
     	}
    }
	return nil
}
