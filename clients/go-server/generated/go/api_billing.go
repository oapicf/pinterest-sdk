// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BillingAPIController binds http requests to an api service and writes the service results to the http response
type BillingAPIController struct {
	service BillingAPIServicer
	errorHandler ErrorHandler
}

// BillingAPIOption for how the controller is set up.
type BillingAPIOption func(*BillingAPIController)

// WithBillingAPIErrorHandler inject ErrorHandler into controller
func WithBillingAPIErrorHandler(h ErrorHandler) BillingAPIOption {
	return func(c *BillingAPIController) {
		c.errorHandler = h
	}
}

// NewBillingAPIController creates a default api controller
func NewBillingAPIController(s BillingAPIServicer, opts ...BillingAPIOption) *BillingAPIController {
	controller := &BillingAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BillingAPIController
func (c *BillingAPIController) Routes() Routes {
	return Routes{
		"AdsCreditsDiscountsGet": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/ads_credit/discounts",
			c.AdsCreditsDiscountsGet,
		},
		"AdsCreditRedeem": Route{
			strings.ToUpper("Post"),
			"/v5/ad_accounts/{ad_account_id}/ads_credit/redeem",
			c.AdsCreditRedeem,
		},
		"BillingProfilesGet": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/billing_profiles",
			c.BillingProfilesGet,
		},
		"SsioAccountsGet": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/ssio/accounts",
			c.SsioAccountsGet,
		},
		"SsioInsertionOrderCreate": Route{
			strings.ToUpper("Post"),
			"/v5/ad_accounts/{ad_account_id}/ssio/insertion_orders",
			c.SsioInsertionOrderCreate,
		},
		"SsioInsertionOrderEdit": Route{
			strings.ToUpper("Patch"),
			"/v5/ad_accounts/{ad_account_id}/ssio/insertion_orders",
			c.SsioInsertionOrderEdit,
		},
		"SsioInsertionOrdersStatusGetByAdAccount": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/ssio/insertion_orders/status",
			c.SsioInsertionOrdersStatusGetByAdAccount,
		},
		"SsioInsertionOrdersStatusGetByPinOrderId": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/ssio/insertion_orders/{pin_order_id}/status",
			c.SsioInsertionOrdersStatusGetByPinOrderId,
		},
		"SsioOrderLinesGetByAdAccount": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/ssio/order_lines",
			c.SsioOrderLinesGetByAdAccount,
		},
	}
}

// AdsCreditsDiscountsGet - Get ads credit discounts
func (c *BillingAPIController) AdsCreditsDiscountsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	result, err := c.service.AdsCreditsDiscountsGet(r.Context(), adAccountIdParam, bookmarkParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AdsCreditRedeem - Redeem ad credits
func (c *BillingAPIController) AdsCreditRedeem(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	adsCreditRedeemRequestParam := AdsCreditRedeemRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&adsCreditRedeemRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAdsCreditRedeemRequestRequired(adsCreditRedeemRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAdsCreditRedeemRequestConstraints(adsCreditRedeemRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AdsCreditRedeem(r.Context(), adAccountIdParam, adsCreditRedeemRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// BillingProfilesGet - Get billing profiles
func (c *BillingAPIController) BillingProfilesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	var isActiveParam bool
	if query.Has("is_active") {
		param, err := parseBoolParameter(
			query.Get("is_active"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "is_active", Err: err}, nil)
			return
		}

		isActiveParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "is_active"}, nil)
		return
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	result, err := c.service.BillingProfilesGet(r.Context(), adAccountIdParam, isActiveParam, bookmarkParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SsioAccountsGet - Get Salesforce account details including bill-to information.
func (c *BillingAPIController) SsioAccountsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	result, err := c.service.SsioAccountsGet(r.Context(), adAccountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SsioInsertionOrderCreate - Create insertion order through SSIO.
func (c *BillingAPIController) SsioInsertionOrderCreate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	ssioCreateInsertionOrderRequestParam := SsioCreateInsertionOrderRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&ssioCreateInsertionOrderRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSsioCreateInsertionOrderRequestRequired(ssioCreateInsertionOrderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSsioCreateInsertionOrderRequestConstraints(ssioCreateInsertionOrderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SsioInsertionOrderCreate(r.Context(), adAccountIdParam, ssioCreateInsertionOrderRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SsioInsertionOrderEdit - Edit insertion order through SSIO.
func (c *BillingAPIController) SsioInsertionOrderEdit(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	ssioEditInsertionOrderRequestParam := SsioEditInsertionOrderRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&ssioEditInsertionOrderRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSsioEditInsertionOrderRequestRequired(ssioEditInsertionOrderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSsioEditInsertionOrderRequestConstraints(ssioEditInsertionOrderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SsioInsertionOrderEdit(r.Context(), adAccountIdParam, ssioEditInsertionOrderRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SsioInsertionOrdersStatusGetByAdAccount - Get insertion order status by ad account id.
func (c *BillingAPIController) SsioInsertionOrdersStatusGetByAdAccount(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	result, err := c.service.SsioInsertionOrdersStatusGetByAdAccount(r.Context(), adAccountIdParam, bookmarkParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SsioInsertionOrdersStatusGetByPinOrderId - Get insertion order status by pin order id.
func (c *BillingAPIController) SsioInsertionOrdersStatusGetByPinOrderId(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	pinOrderIdParam := params["pin_order_id"]
	if pinOrderIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"pin_order_id"}, nil)
		return
	}
	result, err := c.service.SsioInsertionOrdersStatusGetByPinOrderId(r.Context(), adAccountIdParam, pinOrderIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SsioOrderLinesGetByAdAccount - Get Salesforce order lines by ad account id.
func (c *BillingAPIController) SsioOrderLinesGetByAdAccount(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	var pinOrderIdParam string
	if query.Has("pin_order_id") {
		param := query.Get("pin_order_id")

		pinOrderIdParam = param
	} else {
	}
	result, err := c.service.SsioOrderLinesGetByAdAccount(r.Context(), adAccountIdParam, bookmarkParam, pageSizeParam, pinOrderIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
