// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi


import (
	"fmt"
)


// Currency : Currency Codes from ISO 4217
type Currency string

// List of Currency
const (
	UNK Currency = "UNK"
	USD Currency = "USD"
	GBP Currency = "GBP"
	CAD Currency = "CAD"
	EUR Currency = "EUR"
	AUD Currency = "AUD"
	NZD Currency = "NZD"
	SEK Currency = "SEK"
	ILS Currency = "ILS"
	CHF Currency = "CHF"
	HKD Currency = "HKD"
	JPY Currency = "JPY"
	SGD Currency = "SGD"
	KRW Currency = "KRW"
	NOK Currency = "NOK"
	DKK Currency = "DKK"
	PLN Currency = "PLN"
	RON Currency = "RON"
	HUF Currency = "HUF"
	CZK Currency = "CZK"
	BRL Currency = "BRL"
	MXN Currency = "MXN"
	ARS Currency = "ARS"
	CLP Currency = "CLP"
	COP Currency = "COP"
	INR Currency = "INR"
	TRY Currency = "TRY"
)

// AllowedCurrencyEnumValues is all the allowed values of Currency enum
var AllowedCurrencyEnumValues = []Currency{
	"UNK",
	"USD",
	"GBP",
	"CAD",
	"EUR",
	"AUD",
	"NZD",
	"SEK",
	"ILS",
	"CHF",
	"HKD",
	"JPY",
	"SGD",
	"KRW",
	"NOK",
	"DKK",
	"PLN",
	"RON",
	"HUF",
	"CZK",
	"BRL",
	"MXN",
	"ARS",
	"CLP",
	"COP",
	"INR",
	"TRY",
}

// validCurrencyEnumValue provides a map of Currencys for fast verification of use input
var validCurrencyEnumValues = map[Currency]struct{}{
	"UNK": {},
	"USD": {},
	"GBP": {},
	"CAD": {},
	"EUR": {},
	"AUD": {},
	"NZD": {},
	"SEK": {},
	"ILS": {},
	"CHF": {},
	"HKD": {},
	"JPY": {},
	"SGD": {},
	"KRW": {},
	"NOK": {},
	"DKK": {},
	"PLN": {},
	"RON": {},
	"HUF": {},
	"CZK": {},
	"BRL": {},
	"MXN": {},
	"ARS": {},
	"CLP": {},
	"COP": {},
	"INR": {},
	"TRY": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Currency) IsValid() bool {
	_, ok := validCurrencyEnumValues[v]
	return ok
}

// NewCurrencyFromValue returns a pointer to a valid Currency
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCurrencyFromValue(v string) (Currency, error) {
	ev := Currency(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Currency: valid values are %v", v, AllowedCurrencyEnumValues)
}



// AssertCurrencyRequired checks if the required fields are not zero-ed
func AssertCurrencyRequired(obj Currency) error {
	return nil
}

// AssertCurrencyConstraints checks if the values respects the defined constraints
func AssertCurrencyConstraints(obj Currency) error {
	return nil
}
