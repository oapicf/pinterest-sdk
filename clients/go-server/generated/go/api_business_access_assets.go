// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// BusinessAccessAssetsAPIController binds http requests to an api service and writes the service results to the http response
type BusinessAccessAssetsAPIController struct {
	service BusinessAccessAssetsAPIServicer
	errorHandler ErrorHandler
}

// BusinessAccessAssetsAPIOption for how the controller is set up.
type BusinessAccessAssetsAPIOption func(*BusinessAccessAssetsAPIController)

// WithBusinessAccessAssetsAPIErrorHandler inject ErrorHandler into controller
func WithBusinessAccessAssetsAPIErrorHandler(h ErrorHandler) BusinessAccessAssetsAPIOption {
	return func(c *BusinessAccessAssetsAPIController) {
		c.errorHandler = h
	}
}

// NewBusinessAccessAssetsAPIController creates a default api controller
func NewBusinessAccessAssetsAPIController(s BusinessAccessAssetsAPIServicer, opts ...BusinessAccessAssetsAPIOption) *BusinessAccessAssetsAPIController {
	controller := &BusinessAccessAssetsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BusinessAccessAssetsAPIController
func (c *BusinessAccessAssetsAPIController) Routes() Routes {
	return Routes{
		"BusinessAssetMembersGet": Route{
			strings.ToUpper("Get"),
			"/v5/businesses/{business_id}/assets/{asset_id}/members",
			c.BusinessAssetMembersGet,
		},
		"BusinessAssetPartnersGet": Route{
			strings.ToUpper("Get"),
			"/v5/businesses/{business_id}/assets/{asset_id}/partners",
			c.BusinessAssetPartnersGet,
		},
		"BusinessAssetsGet": Route{
			strings.ToUpper("Get"),
			"/v5/businesses/{business_id}/assets",
			c.BusinessAssetsGet,
		},
		"BusinessMemberAssetsGet": Route{
			strings.ToUpper("Get"),
			"/v5/businesses/{business_id}/members/{member_id}/assets",
			c.BusinessMemberAssetsGet,
		},
		"BusinessMembersAssetAccessDelete": Route{
			strings.ToUpper("Delete"),
			"/v5/businesses/{business_id}/members/assets/access",
			c.BusinessMembersAssetAccessDelete,
		},
		"BusinessMembersAssetAccessUpdate": Route{
			strings.ToUpper("Patch"),
			"/v5/businesses/{business_id}/members/assets/access",
			c.BusinessMembersAssetAccessUpdate,
		},
		"DeletePartnerAssetAccessHandlerImpl": Route{
			strings.ToUpper("Delete"),
			"/v5/businesses/{business_id}/partners/assets",
			c.DeletePartnerAssetAccessHandlerImpl,
		},
		"UpdatePartnerAssetAccessHandlerImpl": Route{
			strings.ToUpper("Patch"),
			"/v5/businesses/{business_id}/partners/assets",
			c.UpdatePartnerAssetAccessHandlerImpl,
		},
		"BusinessPartnerAssetAccessGet": Route{
			strings.ToUpper("Get"),
			"/v5/businesses/{business_id}/partners/{partner_id}/assets",
			c.BusinessPartnerAssetAccessGet,
		},
		"AssetGroupCreate": Route{
			strings.ToUpper("Post"),
			"/v5/businesses/{business_id}/asset_groups",
			c.AssetGroupCreate,
		},
		"AssetGroupDelete": Route{
			strings.ToUpper("Delete"),
			"/v5/businesses/{business_id}/asset_groups",
			c.AssetGroupDelete,
		},
		"AssetGroupUpdate": Route{
			strings.ToUpper("Patch"),
			"/v5/businesses/{business_id}/asset_groups",
			c.AssetGroupUpdate,
		},
	}
}

// BusinessAssetMembersGet - Get members with access to asset
func (c *BusinessAccessAssetsAPIController) BusinessAssetMembersGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam := params["business_id"]
	if businessIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"business_id"}, nil)
		return
	}
	assetIdParam := params["asset_id"]
	if assetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"asset_id"}, nil)
		return
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	var startIndexParam int32
	if query.Has("start_index") {
		param, err := parseNumericParameter[int32](
			query.Get("start_index"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](0),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "start_index", Err: err}, nil)
			return
		}

		startIndexParam = param
	} else {
		var param int32 = 0
		startIndexParam = param
	}
	result, err := c.service.BusinessAssetMembersGet(r.Context(), businessIdParam, assetIdParam, bookmarkParam, pageSizeParam, startIndexParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// BusinessAssetPartnersGet - Get partners with access to asset
func (c *BusinessAccessAssetsAPIController) BusinessAssetPartnersGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam := params["business_id"]
	if businessIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"business_id"}, nil)
		return
	}
	assetIdParam := params["asset_id"]
	if assetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"asset_id"}, nil)
		return
	}
	var startIndexParam int32
	if query.Has("start_index") {
		param, err := parseNumericParameter[int32](
			query.Get("start_index"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](0),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "start_index", Err: err}, nil)
			return
		}

		startIndexParam = param
	} else {
		var param int32 = 0
		startIndexParam = param
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	result, err := c.service.BusinessAssetPartnersGet(r.Context(), businessIdParam, assetIdParam, startIndexParam, bookmarkParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// BusinessAssetsGet - List business assets
func (c *BusinessAccessAssetsAPIController) BusinessAssetsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam := params["business_id"]
	if businessIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"business_id"}, nil)
		return
	}
	var permissionsParam []PermissionsWithOwner
	if query.Has("permissions") {
		paramSplits := strings.Split(query.Get("permissions"), ",")
		permissionsParam = make([]PermissionsWithOwner, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewPermissionsWithOwnerFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Param: "permissions", Err: err}, nil)
				return
			}
			permissionsParam = append(permissionsParam, paramEnum)
		}
	}
	var childAssetIdParam string
	if query.Has("child_asset_id") {
		param := query.Get("child_asset_id")

		childAssetIdParam = param
	} else {
	}
	var assetGroupIdParam string
	if query.Has("asset_group_id") {
		param := query.Get("asset_group_id")

		assetGroupIdParam = param
	} else {
	}
	var assetTypeParam string
	if query.Has("asset_type") {
		param := query.Get("asset_type")

		assetTypeParam = param
	} else {
		param := "AD_ACCOUNT"
		assetTypeParam = param
	}
	var startIndexParam int32
	if query.Has("start_index") {
		param, err := parseNumericParameter[int32](
			query.Get("start_index"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](0),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "start_index", Err: err}, nil)
			return
		}

		startIndexParam = param
	} else {
		var param int32 = 0
		startIndexParam = param
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	result, err := c.service.BusinessAssetsGet(r.Context(), businessIdParam, permissionsParam, childAssetIdParam, assetGroupIdParam, assetTypeParam, startIndexParam, bookmarkParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// BusinessMemberAssetsGet - Get assets assigned to a member
func (c *BusinessAccessAssetsAPIController) BusinessMemberAssetsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam := params["business_id"]
	if businessIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"business_id"}, nil)
		return
	}
	memberIdParam := params["member_id"]
	if memberIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"member_id"}, nil)
		return
	}
	var assetTypeParam string
	if query.Has("asset_type") {
		param := query.Get("asset_type")

		assetTypeParam = param
	} else {
		param := "AD_ACCOUNT"
		assetTypeParam = param
	}
	var startIndexParam int32
	if query.Has("start_index") {
		param, err := parseNumericParameter[int32](
			query.Get("start_index"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](0),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "start_index", Err: err}, nil)
			return
		}

		startIndexParam = param
	} else {
		var param int32 = 0
		startIndexParam = param
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	result, err := c.service.BusinessMemberAssetsGet(r.Context(), businessIdParam, memberIdParam, assetTypeParam, startIndexParam, bookmarkParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// BusinessMembersAssetAccessDelete - Delete member access to asset
func (c *BusinessAccessAssetsAPIController) BusinessMembersAssetAccessDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam := params["business_id"]
	if businessIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"business_id"}, nil)
		return
	}
	businessMembersAssetAccessDeleteRequestParam := BusinessMembersAssetAccessDeleteRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&businessMembersAssetAccessDeleteRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBusinessMembersAssetAccessDeleteRequestRequired(businessMembersAssetAccessDeleteRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBusinessMembersAssetAccessDeleteRequestConstraints(businessMembersAssetAccessDeleteRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BusinessMembersAssetAccessDelete(r.Context(), businessIdParam, businessMembersAssetAccessDeleteRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// BusinessMembersAssetAccessUpdate - Assign/Update member asset permissions
func (c *BusinessAccessAssetsAPIController) BusinessMembersAssetAccessUpdate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam := params["business_id"]
	if businessIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"business_id"}, nil)
		return
	}
	updateMemberAssetAccessBodyParam := UpdateMemberAssetAccessBody{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateMemberAssetAccessBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateMemberAssetAccessBodyRequired(updateMemberAssetAccessBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateMemberAssetAccessBodyConstraints(updateMemberAssetAccessBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BusinessMembersAssetAccessUpdate(r.Context(), businessIdParam, updateMemberAssetAccessBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeletePartnerAssetAccessHandlerImpl - Delete partner access to asset
func (c *BusinessAccessAssetsAPIController) DeletePartnerAssetAccessHandlerImpl(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam := params["business_id"]
	if businessIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"business_id"}, nil)
		return
	}
	deletePartnerAssetAccessBodyParam := DeletePartnerAssetAccessBody{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deletePartnerAssetAccessBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeletePartnerAssetAccessBodyRequired(deletePartnerAssetAccessBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeletePartnerAssetAccessBodyConstraints(deletePartnerAssetAccessBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DeletePartnerAssetAccessHandlerImpl(r.Context(), businessIdParam, deletePartnerAssetAccessBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdatePartnerAssetAccessHandlerImpl - Assign/Update partner asset permissions
func (c *BusinessAccessAssetsAPIController) UpdatePartnerAssetAccessHandlerImpl(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam := params["business_id"]
	if businessIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"business_id"}, nil)
		return
	}
	updatePartnerAssetAccessBodyParam := UpdatePartnerAssetAccessBody{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updatePartnerAssetAccessBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdatePartnerAssetAccessBodyRequired(updatePartnerAssetAccessBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdatePartnerAssetAccessBodyConstraints(updatePartnerAssetAccessBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdatePartnerAssetAccessHandlerImpl(r.Context(), businessIdParam, updatePartnerAssetAccessBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// BusinessPartnerAssetAccessGet - Get assets assigned to a partner or assets assigned by a partner
func (c *BusinessAccessAssetsAPIController) BusinessPartnerAssetAccessGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam := params["business_id"]
	if businessIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"business_id"}, nil)
		return
	}
	partnerIdParam := params["partner_id"]
	if partnerIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"partner_id"}, nil)
		return
	}
	var partnerTypeParam PartnerType
	if query.Has("partner_type") {
		param := PartnerType(query.Get("partner_type"))

		partnerTypeParam = param
	} else {
	}
	var assetTypeParam string
	if query.Has("asset_type") {
		param := query.Get("asset_type")

		assetTypeParam = param
	} else {
		param := "AD_ACCOUNT"
		assetTypeParam = param
	}
	var startIndexParam int32
	if query.Has("start_index") {
		param, err := parseNumericParameter[int32](
			query.Get("start_index"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](0),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "start_index", Err: err}, nil)
			return
		}

		startIndexParam = param
	} else {
		var param int32 = 0
		startIndexParam = param
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	result, err := c.service.BusinessPartnerAssetAccessGet(r.Context(), businessIdParam, partnerIdParam, partnerTypeParam, assetTypeParam, startIndexParam, pageSizeParam, bookmarkParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AssetGroupCreate - Create a new asset group.
func (c *BusinessAccessAssetsAPIController) AssetGroupCreate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam := params["business_id"]
	if businessIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"business_id"}, nil)
		return
	}
	createAssetGroupBodyParam := CreateAssetGroupBody{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createAssetGroupBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateAssetGroupBodyRequired(createAssetGroupBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateAssetGroupBodyConstraints(createAssetGroupBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AssetGroupCreate(r.Context(), businessIdParam, createAssetGroupBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AssetGroupDelete - Delete asset groups.
func (c *BusinessAccessAssetsAPIController) AssetGroupDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam := params["business_id"]
	if businessIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"business_id"}, nil)
		return
	}
	deleteAssetGroupBodyParam := DeleteAssetGroupBody{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteAssetGroupBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteAssetGroupBodyRequired(deleteAssetGroupBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeleteAssetGroupBodyConstraints(deleteAssetGroupBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AssetGroupDelete(r.Context(), businessIdParam, deleteAssetGroupBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AssetGroupUpdate - Update asset groups.
func (c *BusinessAccessAssetsAPIController) AssetGroupUpdate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam := params["business_id"]
	if businessIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"business_id"}, nil)
		return
	}
	updateAssetGroupBodyParam := UpdateAssetGroupBody{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateAssetGroupBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateAssetGroupBodyRequired(updateAssetGroupBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateAssetGroupBodyConstraints(updateAssetGroupBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AssetGroupUpdate(r.Context(), businessIdParam, updateAssetGroupBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
