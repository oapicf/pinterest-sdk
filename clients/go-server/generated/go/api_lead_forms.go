// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// LeadFormsAPIController binds http requests to an api service and writes the service results to the http response
type LeadFormsAPIController struct {
	service LeadFormsAPIServicer
	errorHandler ErrorHandler
}

// LeadFormsAPIOption for how the controller is set up.
type LeadFormsAPIOption func(*LeadFormsAPIController)

// WithLeadFormsAPIErrorHandler inject ErrorHandler into controller
func WithLeadFormsAPIErrorHandler(h ErrorHandler) LeadFormsAPIOption {
	return func(c *LeadFormsAPIController) {
		c.errorHandler = h
	}
}

// NewLeadFormsAPIController creates a default api controller
func NewLeadFormsAPIController(s LeadFormsAPIServicer, opts ...LeadFormsAPIOption) *LeadFormsAPIController {
	controller := &LeadFormsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the LeadFormsAPIController
func (c *LeadFormsAPIController) Routes() Routes {
	return Routes{
		"LeadFormsList": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/lead_forms",
			c.LeadFormsList,
		},
		"LeadFormsCreate": Route{
			strings.ToUpper("Post"),
			"/v5/ad_accounts/{ad_account_id}/lead_forms",
			c.LeadFormsCreate,
		},
		"LeadFormsUpdate": Route{
			strings.ToUpper("Patch"),
			"/v5/ad_accounts/{ad_account_id}/lead_forms",
			c.LeadFormsUpdate,
		},
		"LeadFormGet": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/lead_forms/{lead_form_id}",
			c.LeadFormGet,
		},
		"LeadFormTestCreate": Route{
			strings.ToUpper("Post"),
			"/v5/ad_accounts/{ad_account_id}/lead_forms/{lead_form_id}/test",
			c.LeadFormTestCreate,
		},
	}
}

// LeadFormsList - List lead forms
func (c *LeadFormsAPIController) LeadFormsList(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	result, err := c.service.LeadFormsList(r.Context(), adAccountIdParam, pageSizeParam, orderParam, bookmarkParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// LeadFormsCreate - Create lead forms
func (c *LeadFormsAPIController) LeadFormsCreate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	leadFormCreateRequestParam := []LeadFormCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&leadFormCreateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range leadFormCreateRequestParam {
		if err := AssertLeadFormCreateRequestRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.LeadFormsCreate(r.Context(), adAccountIdParam, leadFormCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// LeadFormsUpdate - Update lead forms
func (c *LeadFormsAPIController) LeadFormsUpdate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	leadFormUpdateRequestParam := []LeadFormUpdateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&leadFormUpdateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range leadFormUpdateRequestParam {
		if err := AssertLeadFormUpdateRequestRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.LeadFormsUpdate(r.Context(), adAccountIdParam, leadFormUpdateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// LeadFormGet - Get lead form by id
func (c *LeadFormsAPIController) LeadFormGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	leadFormIdParam := params["lead_form_id"]
	if leadFormIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"lead_form_id"}, nil)
		return
	}
	result, err := c.service.LeadFormGet(r.Context(), adAccountIdParam, leadFormIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// LeadFormTestCreate - Create lead form test data
func (c *LeadFormsAPIController) LeadFormTestCreate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	leadFormIdParam := params["lead_form_id"]
	if leadFormIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"lead_form_id"}, nil)
		return
	}
	leadFormTestRequestParam := LeadFormTestRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&leadFormTestRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLeadFormTestRequestRequired(leadFormTestRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertLeadFormTestRequestConstraints(leadFormTestRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.LeadFormTestCreate(r.Context(), adAccountIdParam, leadFormIdParam, leadFormTestRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
