// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi


import (
	"fmt"
)


// Role : An internal role type used on business access, EMPLOYEE, ADMIN.
type Role string

// List of Role
const (
	UNKNOWN Role = "UNKNOWN"
	OWNER Role = "OWNER"
	ADMIN Role = "ADMIN"
	ANALYST Role = "ANALYST"
	SOS_READER Role = "SOS_READER"
	FINANCE_MANAGER Role = "FINANCE_MANAGER"
	AUDIENCE_MANAGER Role = "AUDIENCE_MANAGER"
	CAMPAIGN_MANAGER Role = "CAMPAIGN_MANAGER"
	CATALOGS_MANAGER Role = "CATALOGS_MANAGER"
	RESTRICTED_OWNER Role = "RESTRICTED_OWNER"
	PROFILE_MANAGER Role = "PROFILE_MANAGER"
	PROFILE_PUBLISHER Role = "PROFILE_PUBLISHER"
	RESOURCE_PINNER_LIST_OWNER Role = "RESOURCE_PINNER_LIST_OWNER"
	RESOURCE_PINNER_LIST_READER Role = "RESOURCE_PINNER_LIST_READER"
	BIZ_PINNER_LIST_SHARER Role = "BIZ_PINNER_LIST_SHARER"
	RESOURCE_CONVERSION_TAGS_READER Role = "RESOURCE_CONVERSION_TAGS_READER"
)

// AllowedRoleEnumValues is all the allowed values of Role enum
var AllowedRoleEnumValues = []Role{
	"UNKNOWN",
	"OWNER",
	"ADMIN",
	"ANALYST",
	"SOS_READER",
	"FINANCE_MANAGER",
	"AUDIENCE_MANAGER",
	"CAMPAIGN_MANAGER",
	"CATALOGS_MANAGER",
	"RESTRICTED_OWNER",
	"PROFILE_MANAGER",
	"PROFILE_PUBLISHER",
	"RESOURCE_PINNER_LIST_OWNER",
	"RESOURCE_PINNER_LIST_READER",
	"BIZ_PINNER_LIST_SHARER",
	"RESOURCE_CONVERSION_TAGS_READER",
}

// validRoleEnumValue provides a map of Roles for fast verification of use input
var validRoleEnumValues = map[Role]struct{}{
	"UNKNOWN": {},
	"OWNER": {},
	"ADMIN": {},
	"ANALYST": {},
	"SOS_READER": {},
	"FINANCE_MANAGER": {},
	"AUDIENCE_MANAGER": {},
	"CAMPAIGN_MANAGER": {},
	"CATALOGS_MANAGER": {},
	"RESTRICTED_OWNER": {},
	"PROFILE_MANAGER": {},
	"PROFILE_PUBLISHER": {},
	"RESOURCE_PINNER_LIST_OWNER": {},
	"RESOURCE_PINNER_LIST_READER": {},
	"BIZ_PINNER_LIST_SHARER": {},
	"RESOURCE_CONVERSION_TAGS_READER": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Role) IsValid() bool {
	_, ok := validRoleEnumValues[v]
	return ok
}

// NewRoleFromValue returns a pointer to a valid Role
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoleFromValue(v string) (Role, error) {
	ev := Role(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Role: valid values are %v", v, AllowedRoleEnumValues)
}



// AssertRoleRequired checks if the required fields are not zero-ed
func AssertRoleRequired(obj Role) error {
	return nil
}

// AssertRoleConstraints checks if the values respects the defined constraints
func AssertRoleConstraints(obj Role) error {
	return nil
}
