// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// CampaignsAPIController binds http requests to an api service and writes the service results to the http response
type CampaignsAPIController struct {
	service CampaignsAPIServicer
	errorHandler ErrorHandler
}

// CampaignsAPIOption for how the controller is set up.
type CampaignsAPIOption func(*CampaignsAPIController)

// WithCampaignsAPIErrorHandler inject ErrorHandler into controller
func WithCampaignsAPIErrorHandler(h ErrorHandler) CampaignsAPIOption {
	return func(c *CampaignsAPIController) {
		c.errorHandler = h
	}
}

// NewCampaignsAPIController creates a default api controller
func NewCampaignsAPIController(s CampaignsAPIServicer, opts ...CampaignsAPIOption) *CampaignsAPIController {
	controller := &CampaignsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CampaignsAPIController
func (c *CampaignsAPIController) Routes() Routes {
	return Routes{
		"CampaignsList": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/campaigns",
			c.CampaignsList,
		},
		"CampaignsCreate": Route{
			strings.ToUpper("Post"),
			"/v5/ad_accounts/{ad_account_id}/campaigns",
			c.CampaignsCreate,
		},
		"CampaignsUpdate": Route{
			strings.ToUpper("Patch"),
			"/v5/ad_accounts/{ad_account_id}/campaigns",
			c.CampaignsUpdate,
		},
		"CampaignsAnalytics": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/campaigns/analytics",
			c.CampaignsAnalytics,
		},
		"CampaignTargetingAnalyticsGet": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/campaigns/targeting_analytics",
			c.CampaignTargetingAnalyticsGet,
		},
		"CampaignsGet": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/campaigns/{campaign_id}",
			c.CampaignsGet,
		},
	}
}

// CampaignsList - List campaigns
func (c *CampaignsAPIController) CampaignsList(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	var campaignIdsParam []string
	if query.Has("campaign_ids") {
		campaignIdsParam = strings.Split(query.Get("campaign_ids"), ",")
	}
	var entityStatusesParam []string
	if query.Has("entity_statuses") {
		entityStatusesParam = strings.Split(query.Get("entity_statuses"), ",")
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	result, err := c.service.CampaignsList(r.Context(), adAccountIdParam, campaignIdsParam, entityStatusesParam, pageSizeParam, orderParam, bookmarkParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CampaignsCreate - Create campaigns
func (c *CampaignsAPIController) CampaignsCreate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	campaignCreateRequestParam := []CampaignCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&campaignCreateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range campaignCreateRequestParam {
		if err := AssertCampaignCreateRequestRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.CampaignsCreate(r.Context(), adAccountIdParam, campaignCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CampaignsUpdate - Update campaigns
func (c *CampaignsAPIController) CampaignsUpdate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	campaignUpdateRequestParam := []CampaignUpdateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&campaignUpdateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range campaignUpdateRequestParam {
		if err := AssertCampaignUpdateRequestRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.CampaignsUpdate(r.Context(), adAccountIdParam, campaignUpdateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CampaignsAnalytics - Get campaign analytics
func (c *CampaignsAPIController) CampaignsAnalytics(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	var startDateParam string
	if query.Has("start_date") {
		param := string(query.Get("start_date"))

		startDateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "start_date"}, nil)
		return
	}
	var endDateParam string
	if query.Has("end_date") {
		param := string(query.Get("end_date"))

		endDateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "end_date"}, nil)
		return
	}
	var campaignIdsParam []string
	if query.Has("campaign_ids") {
		campaignIdsParam = strings.Split(query.Get("campaign_ids"), ",")
	}
	var columnsParam []string
	if query.Has("columns") {
		columnsParam = strings.Split(query.Get("columns"), ",")
	}
	var granularityParam Granularity
	if query.Has("granularity") {
		param := Granularity(query.Get("granularity"))

		granularityParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "granularity"}, nil)
		return
	}
	var clickWindowDaysParam int32
	if query.Has("click_window_days") {
		param, err := parseNumericParameter[int32](
			query.Get("click_window_days"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "click_window_days", Err: err}, nil)
			return
		}

		clickWindowDaysParam = param
	} else {
		var param int32 = 30
		clickWindowDaysParam = param
	}
	var engagementWindowDaysParam int32
	if query.Has("engagement_window_days") {
		param, err := parseNumericParameter[int32](
			query.Get("engagement_window_days"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "engagement_window_days", Err: err}, nil)
			return
		}

		engagementWindowDaysParam = param
	} else {
		var param int32 = 30
		engagementWindowDaysParam = param
	}
	var viewWindowDaysParam int32
	if query.Has("view_window_days") {
		param, err := parseNumericParameter[int32](
			query.Get("view_window_days"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "view_window_days", Err: err}, nil)
			return
		}

		viewWindowDaysParam = param
	} else {
		var param int32 = 1
		viewWindowDaysParam = param
	}
	var conversionReportTimeParam string
	if query.Has("conversion_report_time") {
		param := query.Get("conversion_report_time")

		conversionReportTimeParam = param
	} else {
		param := "TIME_OF_AD_ACTION"
		conversionReportTimeParam = param
	}
	result, err := c.service.CampaignsAnalytics(r.Context(), adAccountIdParam, startDateParam, endDateParam, campaignIdsParam, columnsParam, granularityParam, clickWindowDaysParam, engagementWindowDaysParam, viewWindowDaysParam, conversionReportTimeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CampaignTargetingAnalyticsGet - Get targeting analytics for campaigns
func (c *CampaignsAPIController) CampaignTargetingAnalyticsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	var campaignIdsParam []string
	if query.Has("campaign_ids") {
		campaignIdsParam = strings.Split(query.Get("campaign_ids"), ",")
	}
	var startDateParam string
	if query.Has("start_date") {
		param := string(query.Get("start_date"))

		startDateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "start_date"}, nil)
		return
	}
	var endDateParam string
	if query.Has("end_date") {
		param := string(query.Get("end_date"))

		endDateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "end_date"}, nil)
		return
	}
	var targetingTypesParam []AdsAnalyticsCampaignTargetingType
	if query.Has("targeting_types") {
		paramSplits := strings.Split(query.Get("targeting_types"), ",")
		targetingTypesParam = make([]AdsAnalyticsCampaignTargetingType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewAdsAnalyticsCampaignTargetingTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Param: "targeting_types", Err: err}, nil)
				return
			}
			targetingTypesParam = append(targetingTypesParam, paramEnum)
		}
	}
	var columnsParam []string
	if query.Has("columns") {
		columnsParam = strings.Split(query.Get("columns"), ",")
	}
	var granularityParam Granularity
	if query.Has("granularity") {
		param := Granularity(query.Get("granularity"))

		granularityParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "granularity"}, nil)
		return
	}
	var clickWindowDaysParam int32
	if query.Has("click_window_days") {
		param, err := parseNumericParameter[int32](
			query.Get("click_window_days"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "click_window_days", Err: err}, nil)
			return
		}

		clickWindowDaysParam = param
	} else {
		var param int32 = 30
		clickWindowDaysParam = param
	}
	var engagementWindowDaysParam int32
	if query.Has("engagement_window_days") {
		param, err := parseNumericParameter[int32](
			query.Get("engagement_window_days"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "engagement_window_days", Err: err}, nil)
			return
		}

		engagementWindowDaysParam = param
	} else {
		var param int32 = 30
		engagementWindowDaysParam = param
	}
	var viewWindowDaysParam int32
	if query.Has("view_window_days") {
		param, err := parseNumericParameter[int32](
			query.Get("view_window_days"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "view_window_days", Err: err}, nil)
			return
		}

		viewWindowDaysParam = param
	} else {
		var param int32 = 1
		viewWindowDaysParam = param
	}
	var conversionReportTimeParam string
	if query.Has("conversion_report_time") {
		param := query.Get("conversion_report_time")

		conversionReportTimeParam = param
	} else {
		param := "TIME_OF_AD_ACTION"
		conversionReportTimeParam = param
	}
	var attributionTypesParam ConversionReportAttributionType
	if query.Has("attribution_types") {
		param := ConversionReportAttributionType(query.Get("attribution_types"))

		attributionTypesParam = param
	} else {
	}
	result, err := c.service.CampaignTargetingAnalyticsGet(r.Context(), adAccountIdParam, campaignIdsParam, startDateParam, endDateParam, targetingTypesParam, columnsParam, granularityParam, clickWindowDaysParam, engagementWindowDaysParam, viewWindowDaysParam, conversionReportTimeParam, attributionTypesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CampaignsGet - Get campaign
func (c *CampaignsAPIController) CampaignsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	campaignIdParam := params["campaign_id"]
	if campaignIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"campaign_id"}, nil)
		return
	}
	result, err := c.service.CampaignsGet(r.Context(), adAccountIdParam, campaignIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
