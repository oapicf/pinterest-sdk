// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi


import (
	"fmt"
)


// ConversionReportTimeType : Conversion report time type
type ConversionReportTimeType string

// List of ConversionReportTimeType
const (
	AD_ACTION ConversionReportTimeType = "TIME_OF_AD_ACTION"
	CONVERSION ConversionReportTimeType = "TIME_OF_CONVERSION"
)

// AllowedConversionReportTimeTypeEnumValues is all the allowed values of ConversionReportTimeType enum
var AllowedConversionReportTimeTypeEnumValues = []ConversionReportTimeType{
	"TIME_OF_AD_ACTION",
	"TIME_OF_CONVERSION",
}

// validConversionReportTimeTypeEnumValue provides a map of ConversionReportTimeTypes for fast verification of use input
var validConversionReportTimeTypeEnumValues = map[ConversionReportTimeType]struct{}{
	"TIME_OF_AD_ACTION": {},
	"TIME_OF_CONVERSION": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConversionReportTimeType) IsValid() bool {
	_, ok := validConversionReportTimeTypeEnumValues[v]
	return ok
}

// NewConversionReportTimeTypeFromValue returns a pointer to a valid ConversionReportTimeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConversionReportTimeTypeFromValue(v string) (ConversionReportTimeType, error) {
	ev := ConversionReportTimeType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ConversionReportTimeType: valid values are %v", v, AllowedConversionReportTimeTypeEnumValues)
}



// AssertConversionReportTimeTypeRequired checks if the required fields are not zero-ed
func AssertConversionReportTimeTypeRequired(obj ConversionReportTimeType) error {
	return nil
}

// AssertConversionReportTimeTypeConstraints checks if the values respects the defined constraints
func AssertConversionReportTimeTypeConstraints(obj ConversionReportTimeType) error {
	return nil
}
