// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi


import (
	"fmt"
)


// MatchType : Keyword match type
type MatchType string

// List of MatchType
const (
	BROAD MatchType = "BROAD"
	PHRASE MatchType = "PHRASE"
	EXACT MatchType = "EXACT"
	EXACT_NEGATIVE MatchType = "EXACT_NEGATIVE"
	PHRASE_NEGATIVE MatchType = "PHRASE_NEGATIVE"
)

// AllowedMatchTypeEnumValues is all the allowed values of MatchType enum
var AllowedMatchTypeEnumValues = []MatchType{
	"BROAD",
	"PHRASE",
	"EXACT",
	"EXACT_NEGATIVE",
	"PHRASE_NEGATIVE",
}

// validMatchTypeEnumValue provides a map of MatchTypes for fast verification of use input
var validMatchTypeEnumValues = map[MatchType]struct{}{
	"BROAD": {},
	"PHRASE": {},
	"EXACT": {},
	"EXACT_NEGATIVE": {},
	"PHRASE_NEGATIVE": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MatchType) IsValid() bool {
	_, ok := validMatchTypeEnumValues[v]
	return ok
}

// NewMatchTypeFromValue returns a pointer to a valid MatchType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMatchTypeFromValue(v string) (MatchType, error) {
	ev := MatchType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for MatchType: valid values are %v", v, AllowedMatchTypeEnumValues)
}



// AssertMatchTypeRequired checks if the required fields are not zero-ed
func AssertMatchTypeRequired(obj MatchType) error {
	return nil
}

// AssertMatchTypeConstraints checks if the values respects the defined constraints
func AssertMatchTypeConstraints(obj MatchType) error {
	return nil
}
