// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi


import (
	"gopkg.in/validator.v2"
	"errors"
)



// PinMediaSource - Pin media source.
type PinMediaSource struct {

	SourceType string `json:"source_type"`

	ContentType string `json:"content_type"`

	Data string `json:"data"`

	// Set the parameter to false to create the new simplified Pin instead of the standard pin. Currently the field is only available to a list of beta users.
	IsStandard bool `json:"is_standard,omitempty"`

	Url string `json:"url"`

	// Cover image url.
	CoverImageUrl string `json:"cover_image_url,omitempty"`

	// Content type for cover image Base64.
	CoverImageContentType string `json:"cover_image_content_type,omitempty"`

	// Cover image Base64.
	CoverImageData string `json:"cover_image_data,omitempty"`

	MediaId string `json:"media_id"`

	// Array with image objects.
	Items []PinMediaSourceImagesUrlItemsInner `json:"items"`

	Index int32 `json:"index,omitempty"`

	// This is an affiliate link or sponsored product. The FTC requires disclosure for paid partnerships and affiliate products.
	IsAffiliateLink bool `json:"is_affiliate_link,omitempty"`
}

// AssertPinMediaSourceRequired checks if the required fields are not zero-ed
func AssertPinMediaSourceRequired(obj PinMediaSource) error {
	elements := map[string]interface{}{
		"source_type": obj.SourceType,
		"content_type": obj.ContentType,
		"data": obj.Data,
		"url": obj.Url,
		"media_id": obj.MediaId,
		"items": obj.Items,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Items {
		if err := AssertPinMediaSourceImagesUrlItemsInnerRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertPinMediaSourceConstraints checks if the values respects the defined constraints
func AssertPinMediaSourceConstraints(obj PinMediaSource) error {
	for _, el := range obj.Items {
		if err := AssertPinMediaSourceImagesUrlItemsInnerConstraints(el); err != nil {
			return err
		}
	}
	if obj.Index < 0 {
		return &ParsingError{Param: "Index", Err: errors.New(errMsgMinValueConstraint)}
	}
	return nil
}
