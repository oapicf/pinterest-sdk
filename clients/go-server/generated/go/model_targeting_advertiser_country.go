// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi


import (
	"fmt"
)


// TargetingAdvertiserCountry : Advertiser's ISO two character country code.
type TargetingAdvertiserCountry string

// List of TargetingAdvertiserCountry
const (
	US TargetingAdvertiserCountry = "US"
	GB TargetingAdvertiserCountry = "GB"
	CA TargetingAdvertiserCountry = "CA"
	IE TargetingAdvertiserCountry = "IE"
	AU TargetingAdvertiserCountry = "AU"
	NZ TargetingAdvertiserCountry = "NZ"
	FR TargetingAdvertiserCountry = "FR"
	SE TargetingAdvertiserCountry = "SE"
	IL TargetingAdvertiserCountry = "IL"
	DE TargetingAdvertiserCountry = "DE"
	AT TargetingAdvertiserCountry = "AT"
	IT TargetingAdvertiserCountry = "IT"
	ES TargetingAdvertiserCountry = "ES"
	NL TargetingAdvertiserCountry = "NL"
	BE TargetingAdvertiserCountry = "BE"
	PT TargetingAdvertiserCountry = "PT"
	CH TargetingAdvertiserCountry = "CH"
	HK TargetingAdvertiserCountry = "HK"
	JP TargetingAdvertiserCountry = "JP"
	KR TargetingAdvertiserCountry = "KR"
	SG TargetingAdvertiserCountry = "SG"
	NO TargetingAdvertiserCountry = "NO"
	DK TargetingAdvertiserCountry = "DK"
	FI TargetingAdvertiserCountry = "FI"
	CY TargetingAdvertiserCountry = "CY"
	LU TargetingAdvertiserCountry = "LU"
	MT TargetingAdvertiserCountry = "MT"
	PL TargetingAdvertiserCountry = "PL"
	RO TargetingAdvertiserCountry = "RO"
	HU TargetingAdvertiserCountry = "HU"
	CZ TargetingAdvertiserCountry = "CZ"
	GR TargetingAdvertiserCountry = "GR"
	SK TargetingAdvertiserCountry = "SK"
	BR TargetingAdvertiserCountry = "BR"
	MX TargetingAdvertiserCountry = "MX"
	AR TargetingAdvertiserCountry = "AR"
	CL TargetingAdvertiserCountry = "CL"
	CO TargetingAdvertiserCountry = "CO"
)

// AllowedTargetingAdvertiserCountryEnumValues is all the allowed values of TargetingAdvertiserCountry enum
var AllowedTargetingAdvertiserCountryEnumValues = []TargetingAdvertiserCountry{
	"US",
	"GB",
	"CA",
	"IE",
	"AU",
	"NZ",
	"FR",
	"SE",
	"IL",
	"DE",
	"AT",
	"IT",
	"ES",
	"NL",
	"BE",
	"PT",
	"CH",
	"HK",
	"JP",
	"KR",
	"SG",
	"NO",
	"DK",
	"FI",
	"CY",
	"LU",
	"MT",
	"PL",
	"RO",
	"HU",
	"CZ",
	"GR",
	"SK",
	"BR",
	"MX",
	"AR",
	"CL",
	"CO",
}

// validTargetingAdvertiserCountryEnumValue provides a map of TargetingAdvertiserCountrys for fast verification of use input
var validTargetingAdvertiserCountryEnumValues = map[TargetingAdvertiserCountry]struct{}{
	"US": {},
	"GB": {},
	"CA": {},
	"IE": {},
	"AU": {},
	"NZ": {},
	"FR": {},
	"SE": {},
	"IL": {},
	"DE": {},
	"AT": {},
	"IT": {},
	"ES": {},
	"NL": {},
	"BE": {},
	"PT": {},
	"CH": {},
	"HK": {},
	"JP": {},
	"KR": {},
	"SG": {},
	"NO": {},
	"DK": {},
	"FI": {},
	"CY": {},
	"LU": {},
	"MT": {},
	"PL": {},
	"RO": {},
	"HU": {},
	"CZ": {},
	"GR": {},
	"SK": {},
	"BR": {},
	"MX": {},
	"AR": {},
	"CL": {},
	"CO": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TargetingAdvertiserCountry) IsValid() bool {
	_, ok := validTargetingAdvertiserCountryEnumValues[v]
	return ok
}

// NewTargetingAdvertiserCountryFromValue returns a pointer to a valid TargetingAdvertiserCountry
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTargetingAdvertiserCountryFromValue(v string) (TargetingAdvertiserCountry, error) {
	ev := TargetingAdvertiserCountry(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for TargetingAdvertiserCountry: valid values are %v", v, AllowedTargetingAdvertiserCountryEnumValues)
}



// AssertTargetingAdvertiserCountryRequired checks if the required fields are not zero-ed
func AssertTargetingAdvertiserCountryRequired(obj TargetingAdvertiserCountry) error {
	return nil
}

// AssertTargetingAdvertiserCountryConstraints checks if the values respects the defined constraints
func AssertTargetingAdvertiserCountryConstraints(obj TargetingAdvertiserCountry) error {
	return nil
}
