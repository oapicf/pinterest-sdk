// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi




type TargetingTemplateGetResponseData struct {

	// targeting template name
	Name string `json:"name,omitempty"`

	// Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>.
	AutoTargetingEnabled bool `json:"auto_targeting_enabled,omitempty"`

	TargetingAttributes TargetingSpec `json:"targeting_attributes,omitempty"`

	PlacementGroup PlacementGroupType `json:"placement_group,omitempty"`

	Keywords []TargetingTemplateKeyword `json:"keywords,omitempty"`

	TrackingUrls *TrackingUrls `json:"tracking_urls,omitempty"`

	// Targeting template ID.
	Id string `json:"id,omitempty" validate:"regexp=^\\\\d+$"`

	// Targeting template created time. Unix timestamp in seconds.
	CreatedTime int32 `json:"created_time,omitempty"`

	// Targeting template updated time.Unix timestamp in seconds.
	UpdatedTime int32 `json:"updated_time,omitempty"`

	// The ID of the advertiser that this targeting template belongs to.
	AdAccountId string `json:"ad_account_id,omitempty" validate:"regexp=^\\\\d+$"`

	// Indicate targeting template is active or Deleted
	Status string `json:"status,omitempty"`

	Sizing *TargetingTemplateAudienceSizing `json:"sizing,omitempty"`

	// Inform if the targeting template is valid (ex. would be false if has revoked audience)
	Valid *bool `json:"valid,omitempty"`
}

// AssertTargetingTemplateGetResponseDataRequired checks if the required fields are not zero-ed
func AssertTargetingTemplateGetResponseDataRequired(obj TargetingTemplateGetResponseData) error {
	if err := AssertTargetingSpecRequired(obj.TargetingAttributes); err != nil {
		return err
	}
	for _, el := range obj.Keywords {
		if err := AssertTargetingTemplateKeywordRequired(el); err != nil {
			return err
		}
	}
	if obj.TrackingUrls != nil {
		if err := AssertTrackingUrlsRequired(*obj.TrackingUrls); err != nil {
			return err
		}
	}
	if obj.Sizing != nil {
		if err := AssertTargetingTemplateAudienceSizingRequired(*obj.Sizing); err != nil {
			return err
		}
	}
	return nil
}

// AssertTargetingTemplateGetResponseDataConstraints checks if the values respects the defined constraints
func AssertTargetingTemplateGetResponseDataConstraints(obj TargetingTemplateGetResponseData) error {
	if err := AssertTargetingSpecConstraints(obj.TargetingAttributes); err != nil {
		return err
	}
	for _, el := range obj.Keywords {
		if err := AssertTargetingTemplateKeywordConstraints(el); err != nil {
			return err
		}
	}
    if obj.TrackingUrls != nil {
     	if err := AssertTrackingUrlsConstraints(*obj.TrackingUrls); err != nil {
     		return err
     	}
    }
    if obj.Sizing != nil {
     	if err := AssertTargetingTemplateAudienceSizingConstraints(*obj.Sizing); err != nil {
     		return err
     	}
    }
	return nil
}
