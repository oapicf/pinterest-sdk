// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi


import (
	"fmt"
)



type Permissions string

// List of Permissions
const (
	ADMIN Permissions = "ADMIN"
	ANALYST Permissions = "ANALYST"
	FINANCE_MANAGER Permissions = "FINANCE_MANAGER"
	AUDIENCE_MANAGER Permissions = "AUDIENCE_MANAGER"
	CAMPAIGN_MANAGER Permissions = "CAMPAIGN_MANAGER"
	CATALOGS_MANAGER Permissions = "CATALOGS_MANAGER"
	PROFILE_PUBLISHER Permissions = "PROFILE_PUBLISHER"
)

// AllowedPermissionsEnumValues is all the allowed values of Permissions enum
var AllowedPermissionsEnumValues = []Permissions{
	"ADMIN",
	"ANALYST",
	"FINANCE_MANAGER",
	"AUDIENCE_MANAGER",
	"CAMPAIGN_MANAGER",
	"CATALOGS_MANAGER",
	"PROFILE_PUBLISHER",
}

// validPermissionsEnumValue provides a map of Permissionss for fast verification of use input
var validPermissionsEnumValues = map[Permissions]struct{}{
	"ADMIN": {},
	"ANALYST": {},
	"FINANCE_MANAGER": {},
	"AUDIENCE_MANAGER": {},
	"CAMPAIGN_MANAGER": {},
	"CATALOGS_MANAGER": {},
	"PROFILE_PUBLISHER": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Permissions) IsValid() bool {
	_, ok := validPermissionsEnumValues[v]
	return ok
}

// NewPermissionsFromValue returns a pointer to a valid Permissions
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPermissionsFromValue(v string) (Permissions, error) {
	ev := Permissions(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for Permissions: valid values are %v", v, AllowedPermissionsEnumValues)
}



// AssertPermissionsRequired checks if the required fields are not zero-ed
func AssertPermissionsRequired(obj Permissions) error {
	return nil
}

// AssertPermissionsConstraints checks if the values respects the defined constraints
func AssertPermissionsConstraints(obj Permissions) error {
	return nil
}
