// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi

import (
	"net/http"
	"strings"
)

// SearchAPIController binds http requests to an api service and writes the service results to the http response
type SearchAPIController struct {
	service SearchAPIServicer
	errorHandler ErrorHandler
}

// SearchAPIOption for how the controller is set up.
type SearchAPIOption func(*SearchAPIController)

// WithSearchAPIErrorHandler inject ErrorHandler into controller
func WithSearchAPIErrorHandler(h ErrorHandler) SearchAPIOption {
	return func(c *SearchAPIController) {
		c.errorHandler = h
	}
}

// NewSearchAPIController creates a default api controller
func NewSearchAPIController(s SearchAPIServicer, opts ...SearchAPIOption) *SearchAPIController {
	controller := &SearchAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SearchAPIController
func (c *SearchAPIController) Routes() Routes {
	return Routes{
		"SearchUserBoardsGet": Route{
			strings.ToUpper("Get"),
			"/v5/search/boards",
			c.SearchUserBoardsGet,
		},
		"SearchUserPinsList": Route{
			strings.ToUpper("Get"),
			"/v5/search/pins",
			c.SearchUserPinsList,
		},
		"SearchPartnerPins": Route{
			strings.ToUpper("Get"),
			"/v5/search/partner/pins",
			c.SearchPartnerPins,
		},
	}
}

// SearchUserBoardsGet - Search user's boards
func (c *SearchAPIController) SearchUserBoardsGet(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var adAccountIdParam string
	if query.Has("ad_account_id") {
		param := query.Get("ad_account_id")

		adAccountIdParam = param
	} else {
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	var queryParam string
	if query.Has("query") {
		param := query.Get("query")

		queryParam = param
	} else {
	}
	result, err := c.service.SearchUserBoardsGet(r.Context(), adAccountIdParam, bookmarkParam, pageSizeParam, queryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SearchUserPinsList - Search user's Pins
func (c *SearchAPIController) SearchUserPinsList(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var queryParam string
	if query.Has("query") {
		param := query.Get("query")

		queryParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "query"}, nil)
		return
	}
	var adAccountIdParam string
	if query.Has("ad_account_id") {
		param := query.Get("ad_account_id")

		adAccountIdParam = param
	} else {
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	result, err := c.service.SearchUserPinsList(r.Context(), queryParam, adAccountIdParam, bookmarkParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SearchPartnerPins - Search pins by a given search term
func (c *SearchAPIController) SearchPartnerPins(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var termParam string
	if query.Has("term") {
		param := query.Get("term")

		termParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "term"}, nil)
		return
	}
	var countryCodeParam string
	if query.Has("country_code") {
		param := query.Get("country_code")

		countryCodeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "country_code"}, nil)
		return
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	var localeParam string
	if query.Has("locale") {
		param := query.Get("locale")

		localeParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 10
		limitParam = param
	}
	result, err := c.service.SearchPartnerPins(r.Context(), termParam, countryCodeParam, bookmarkParam, localeParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
