// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AdAccountsAPIController binds http requests to an api service and writes the service results to the http response
type AdAccountsAPIController struct {
	service AdAccountsAPIServicer
	errorHandler ErrorHandler
}

// AdAccountsAPIOption for how the controller is set up.
type AdAccountsAPIOption func(*AdAccountsAPIController)

// WithAdAccountsAPIErrorHandler inject ErrorHandler into controller
func WithAdAccountsAPIErrorHandler(h ErrorHandler) AdAccountsAPIOption {
	return func(c *AdAccountsAPIController) {
		c.errorHandler = h
	}
}

// NewAdAccountsAPIController creates a default api controller
func NewAdAccountsAPIController(s AdAccountsAPIServicer, opts ...AdAccountsAPIOption) *AdAccountsAPIController {
	controller := &AdAccountsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AdAccountsAPIController
func (c *AdAccountsAPIController) Routes() Routes {
	return Routes{
		"AdAccountsList": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts",
			c.AdAccountsList,
		},
		"AdAccountsCreate": Route{
			strings.ToUpper("Post"),
			"/v5/ad_accounts",
			c.AdAccountsCreate,
		},
		"AdAccountsGet": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}",
			c.AdAccountsGet,
		},
		"AdAccountAnalytics": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/analytics",
			c.AdAccountAnalytics,
		},
		"AnalyticsGetMmmReport": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/mmm_reports",
			c.AnalyticsGetMmmReport,
		},
		"AnalyticsCreateMmmReport": Route{
			strings.ToUpper("Post"),
			"/v5/ad_accounts/{ad_account_id}/mmm_reports",
			c.AnalyticsCreateMmmReport,
		},
		"AnalyticsGetReport": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/reports",
			c.AnalyticsGetReport,
		},
		"AnalyticsCreateReport": Route{
			strings.ToUpper("Post"),
			"/v5/ad_accounts/{ad_account_id}/reports",
			c.AnalyticsCreateReport,
		},
		"SandboxDelete": Route{
			strings.ToUpper("Delete"),
			"/v5/ad_accounts/{ad_account_id}/sandbox",
			c.SandboxDelete,
		},
		"AdAccountTargetingAnalyticsGet": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/targeting_analytics",
			c.AdAccountTargetingAnalyticsGet,
		},
		"TemplatesList": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/templates",
			c.TemplatesList,
		},
		"AnalyticsCreateTemplateReport": Route{
			strings.ToUpper("Post"),
			"/v5/ad_accounts/{ad_account_id}/templates/{template_id}/reports",
			c.AnalyticsCreateTemplateReport,
		},
	}
}

// AdAccountsList - List ad accounts
func (c *AdAccountsAPIController) AdAccountsList(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	var includeSharedAccountsParam bool
	if query.Has("include_shared_accounts") {
		param, err := parseBoolParameter(
			query.Get("include_shared_accounts"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "include_shared_accounts", Err: err}, nil)
			return
		}

		includeSharedAccountsParam = param
	} else {
		var param bool = true
		includeSharedAccountsParam = param
	}
	result, err := c.service.AdAccountsList(r.Context(), bookmarkParam, pageSizeParam, includeSharedAccountsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AdAccountsCreate - Create ad account
func (c *AdAccountsAPIController) AdAccountsCreate(w http.ResponseWriter, r *http.Request) {
	adAccountCreateRequestParam := AdAccountCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&adAccountCreateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAdAccountCreateRequestRequired(adAccountCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAdAccountCreateRequestConstraints(adAccountCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AdAccountsCreate(r.Context(), adAccountCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AdAccountsGet - Get ad account
func (c *AdAccountsAPIController) AdAccountsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	result, err := c.service.AdAccountsGet(r.Context(), adAccountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AdAccountAnalytics - Get ad account analytics
func (c *AdAccountsAPIController) AdAccountAnalytics(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	var startDateParam string
	if query.Has("start_date") {
		param := string(query.Get("start_date"))

		startDateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "start_date"}, nil)
		return
	}
	var endDateParam string
	if query.Has("end_date") {
		param := string(query.Get("end_date"))

		endDateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "end_date"}, nil)
		return
	}
	var columnsParam []string
	if query.Has("columns") {
		columnsParam = strings.Split(query.Get("columns"), ",")
	}
	var granularityParam Granularity
	if query.Has("granularity") {
		param := Granularity(query.Get("granularity"))

		granularityParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "granularity"}, nil)
		return
	}
	var clickWindowDaysParam int32
	if query.Has("click_window_days") {
		param, err := parseNumericParameter[int32](
			query.Get("click_window_days"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "click_window_days", Err: err}, nil)
			return
		}

		clickWindowDaysParam = param
	} else {
		var param int32 = 30
		clickWindowDaysParam = param
	}
	var engagementWindowDaysParam int32
	if query.Has("engagement_window_days") {
		param, err := parseNumericParameter[int32](
			query.Get("engagement_window_days"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "engagement_window_days", Err: err}, nil)
			return
		}

		engagementWindowDaysParam = param
	} else {
		var param int32 = 30
		engagementWindowDaysParam = param
	}
	var viewWindowDaysParam int32
	if query.Has("view_window_days") {
		param, err := parseNumericParameter[int32](
			query.Get("view_window_days"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "view_window_days", Err: err}, nil)
			return
		}

		viewWindowDaysParam = param
	} else {
		var param int32 = 1
		viewWindowDaysParam = param
	}
	var conversionReportTimeParam string
	if query.Has("conversion_report_time") {
		param := query.Get("conversion_report_time")

		conversionReportTimeParam = param
	} else {
		param := "TIME_OF_AD_ACTION"
		conversionReportTimeParam = param
	}
	result, err := c.service.AdAccountAnalytics(r.Context(), adAccountIdParam, startDateParam, endDateParam, columnsParam, granularityParam, clickWindowDaysParam, engagementWindowDaysParam, viewWindowDaysParam, conversionReportTimeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AnalyticsGetMmmReport - Get advertiser Marketing Mix Modeling (MMM) report.
func (c *AdAccountsAPIController) AnalyticsGetMmmReport(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	var tokenParam string
	if query.Has("token") {
		param := query.Get("token")

		tokenParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "token"}, nil)
		return
	}
	result, err := c.service.AnalyticsGetMmmReport(r.Context(), adAccountIdParam, tokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AnalyticsCreateMmmReport - Create a request for a Marketing Mix Modeling (MMM) report
func (c *AdAccountsAPIController) AnalyticsCreateMmmReport(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	createMmmReportRequestParam := CreateMmmReportRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createMmmReportRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateMmmReportRequestRequired(createMmmReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateMmmReportRequestConstraints(createMmmReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AnalyticsCreateMmmReport(r.Context(), adAccountIdParam, createMmmReportRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AnalyticsGetReport - Get the account analytics report created by the async call
func (c *AdAccountsAPIController) AnalyticsGetReport(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	var tokenParam string
	if query.Has("token") {
		param := query.Get("token")

		tokenParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "token"}, nil)
		return
	}
	result, err := c.service.AnalyticsGetReport(r.Context(), adAccountIdParam, tokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AnalyticsCreateReport - Create async request for an account analytics report
func (c *AdAccountsAPIController) AnalyticsCreateReport(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	adsAnalyticsCreateAsyncRequestParam := AdsAnalyticsCreateAsyncRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&adsAnalyticsCreateAsyncRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAdsAnalyticsCreateAsyncRequestRequired(adsAnalyticsCreateAsyncRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAdsAnalyticsCreateAsyncRequestConstraints(adsAnalyticsCreateAsyncRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AnalyticsCreateReport(r.Context(), adAccountIdParam, adsAnalyticsCreateAsyncRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SandboxDelete - Delete ads data for ad account in API Sandbox
func (c *AdAccountsAPIController) SandboxDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	result, err := c.service.SandboxDelete(r.Context(), adAccountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AdAccountTargetingAnalyticsGet - Get targeting analytics for an ad account
func (c *AdAccountsAPIController) AdAccountTargetingAnalyticsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	var startDateParam string
	if query.Has("start_date") {
		param := string(query.Get("start_date"))

		startDateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "start_date"}, nil)
		return
	}
	var endDateParam string
	if query.Has("end_date") {
		param := string(query.Get("end_date"))

		endDateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "end_date"}, nil)
		return
	}
	var targetingTypesParam []AdsAnalyticsTargetingType
	if query.Has("targeting_types") {
		paramSplits := strings.Split(query.Get("targeting_types"), ",")
		targetingTypesParam = make([]AdsAnalyticsTargetingType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewAdsAnalyticsTargetingTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Param: "targeting_types", Err: err}, nil)
				return
			}
			targetingTypesParam = append(targetingTypesParam, paramEnum)
		}
	}
	var columnsParam []string
	if query.Has("columns") {
		columnsParam = strings.Split(query.Get("columns"), ",")
	}
	var granularityParam Granularity
	if query.Has("granularity") {
		param := Granularity(query.Get("granularity"))

		granularityParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "granularity"}, nil)
		return
	}
	var clickWindowDaysParam int32
	if query.Has("click_window_days") {
		param, err := parseNumericParameter[int32](
			query.Get("click_window_days"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "click_window_days", Err: err}, nil)
			return
		}

		clickWindowDaysParam = param
	} else {
		var param int32 = 30
		clickWindowDaysParam = param
	}
	var engagementWindowDaysParam int32
	if query.Has("engagement_window_days") {
		param, err := parseNumericParameter[int32](
			query.Get("engagement_window_days"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "engagement_window_days", Err: err}, nil)
			return
		}

		engagementWindowDaysParam = param
	} else {
		var param int32 = 30
		engagementWindowDaysParam = param
	}
	var viewWindowDaysParam int32
	if query.Has("view_window_days") {
		param, err := parseNumericParameter[int32](
			query.Get("view_window_days"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "view_window_days", Err: err}, nil)
			return
		}

		viewWindowDaysParam = param
	} else {
		var param int32 = 1
		viewWindowDaysParam = param
	}
	var conversionReportTimeParam string
	if query.Has("conversion_report_time") {
		param := query.Get("conversion_report_time")

		conversionReportTimeParam = param
	} else {
		param := "TIME_OF_AD_ACTION"
		conversionReportTimeParam = param
	}
	var attributionTypesParam ConversionReportAttributionType
	if query.Has("attribution_types") {
		param := ConversionReportAttributionType(query.Get("attribution_types"))

		attributionTypesParam = param
	} else {
	}
	result, err := c.service.AdAccountTargetingAnalyticsGet(r.Context(), adAccountIdParam, startDateParam, endDateParam, targetingTypesParam, columnsParam, granularityParam, clickWindowDaysParam, engagementWindowDaysParam, viewWindowDaysParam, conversionReportTimeParam, attributionTypesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// TemplatesList - List templates
func (c *AdAccountsAPIController) TemplatesList(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	result, err := c.service.TemplatesList(r.Context(), adAccountIdParam, pageSizeParam, orderParam, bookmarkParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AnalyticsCreateTemplateReport - Create async request for an analytics report using a template
func (c *AdAccountsAPIController) AnalyticsCreateTemplateReport(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	templateIdParam := params["template_id"]
	if templateIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"template_id"}, nil)
		return
	}
	var startDateParam string
	if query.Has("start_date") {
		param := string(query.Get("start_date"))

		startDateParam = param
	} else {
	}
	var endDateParam string
	if query.Has("end_date") {
		param := string(query.Get("end_date"))

		endDateParam = param
	} else {
	}
	var granularityParam Granularity
	if query.Has("granularity") {
		param := Granularity(query.Get("granularity"))

		granularityParam = param
	} else {
	}
	result, err := c.service.AnalyticsCreateTemplateReport(r.Context(), adAccountIdParam, templateIdParam, startDateParam, endDateParam, granularityParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
