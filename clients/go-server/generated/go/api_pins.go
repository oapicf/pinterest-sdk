// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// PinsAPIController binds http requests to an api service and writes the service results to the http response
type PinsAPIController struct {
	service PinsAPIServicer
	errorHandler ErrorHandler
}

// PinsAPIOption for how the controller is set up.
type PinsAPIOption func(*PinsAPIController)

// WithPinsAPIErrorHandler inject ErrorHandler into controller
func WithPinsAPIErrorHandler(h ErrorHandler) PinsAPIOption {
	return func(c *PinsAPIController) {
		c.errorHandler = h
	}
}

// NewPinsAPIController creates a default api controller
func NewPinsAPIController(s PinsAPIServicer, opts ...PinsAPIOption) *PinsAPIController {
	controller := &PinsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PinsAPIController
func (c *PinsAPIController) Routes() Routes {
	return Routes{
		"PinsList": Route{
			strings.ToUpper("Get"),
			"/v5/pins",
			c.PinsList,
		},
		"PinsCreate": Route{
			strings.ToUpper("Post"),
			"/v5/pins",
			c.PinsCreate,
		},
		"PinsGet": Route{
			strings.ToUpper("Get"),
			"/v5/pins/{pin_id}",
			c.PinsGet,
		},
		"PinsDelete": Route{
			strings.ToUpper("Delete"),
			"/v5/pins/{pin_id}",
			c.PinsDelete,
		},
		"PinsUpdate": Route{
			strings.ToUpper("Patch"),
			"/v5/pins/{pin_id}",
			c.PinsUpdate,
		},
		"PinsAnalytics": Route{
			strings.ToUpper("Get"),
			"/v5/pins/{pin_id}/analytics",
			c.PinsAnalytics,
		},
		"MultiPinsAnalytics": Route{
			strings.ToUpper("Get"),
			"/v5/pins/analytics",
			c.MultiPinsAnalytics,
		},
		"PinsSave": Route{
			strings.ToUpper("Post"),
			"/v5/pins/{pin_id}/save",
			c.PinsSave,
		},
	}
}

// PinsList - List Pins
func (c *PinsAPIController) PinsList(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	var pinFilterParam string
	if query.Has("pin_filter") {
		param := query.Get("pin_filter")

		pinFilterParam = param
	} else {
	}
	var includeProtectedPinsParam bool
	if query.Has("include_protected_pins") {
		param, err := parseBoolParameter(
			query.Get("include_protected_pins"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "include_protected_pins", Err: err}, nil)
			return
		}

		includeProtectedPinsParam = param
	} else {
		var param bool = false
		includeProtectedPinsParam = param
	}
	var pinTypeParam string
	if query.Has("pin_type") {
		param := query.Get("pin_type")

		pinTypeParam = param
	} else {
	}
	var creativeTypesParam []string
	if query.Has("creative_types") {
		creativeTypesParam = strings.Split(query.Get("creative_types"), ",")
	}
	var adAccountIdParam string
	if query.Has("ad_account_id") {
		param := query.Get("ad_account_id")

		adAccountIdParam = param
	} else {
	}
	var pinMetricsParam bool
	if query.Has("pin_metrics") {
		param, err := parseBoolParameter(
			query.Get("pin_metrics"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "pin_metrics", Err: err}, nil)
			return
		}

		pinMetricsParam = param
	} else {
		var param bool = false
		pinMetricsParam = param
	}
	result, err := c.service.PinsList(r.Context(), bookmarkParam, pageSizeParam, pinFilterParam, includeProtectedPinsParam, pinTypeParam, creativeTypesParam, adAccountIdParam, pinMetricsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// PinsCreate - Create Pin
func (c *PinsAPIController) PinsCreate(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	pinCreateParam := PinCreate{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&pinCreateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPinCreateRequired(pinCreateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPinCreateConstraints(pinCreateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var adAccountIdParam string
	if query.Has("ad_account_id") {
		param := query.Get("ad_account_id")

		adAccountIdParam = param
	} else {
	}
	result, err := c.service.PinsCreate(r.Context(), pinCreateParam, adAccountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// PinsGet - Get Pin
func (c *PinsAPIController) PinsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	pinIdParam := params["pin_id"]
	if pinIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"pin_id"}, nil)
		return
	}
	var pinMetricsParam bool
	if query.Has("pin_metrics") {
		param, err := parseBoolParameter(
			query.Get("pin_metrics"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "pin_metrics", Err: err}, nil)
			return
		}

		pinMetricsParam = param
	} else {
		var param bool = false
		pinMetricsParam = param
	}
	var adAccountIdParam string
	if query.Has("ad_account_id") {
		param := query.Get("ad_account_id")

		adAccountIdParam = param
	} else {
	}
	result, err := c.service.PinsGet(r.Context(), pinIdParam, pinMetricsParam, adAccountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// PinsDelete - Delete Pin
func (c *PinsAPIController) PinsDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	pinIdParam := params["pin_id"]
	if pinIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"pin_id"}, nil)
		return
	}
	var adAccountIdParam string
	if query.Has("ad_account_id") {
		param := query.Get("ad_account_id")

		adAccountIdParam = param
	} else {
	}
	result, err := c.service.PinsDelete(r.Context(), pinIdParam, adAccountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// PinsUpdate - Update Pin
func (c *PinsAPIController) PinsUpdate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	pinIdParam := params["pin_id"]
	if pinIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"pin_id"}, nil)
		return
	}
	pinUpdateParam := PinUpdate{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&pinUpdateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPinUpdateRequired(pinUpdateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPinUpdateConstraints(pinUpdateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var adAccountIdParam string
	if query.Has("ad_account_id") {
		param := query.Get("ad_account_id")

		adAccountIdParam = param
	} else {
	}
	result, err := c.service.PinsUpdate(r.Context(), pinIdParam, pinUpdateParam, adAccountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// PinsAnalytics - Get Pin analytics
func (c *PinsAPIController) PinsAnalytics(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	pinIdParam := params["pin_id"]
	if pinIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"pin_id"}, nil)
		return
	}
	var startDateParam string
	if query.Has("start_date") {
		param := string(query.Get("start_date"))

		startDateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "start_date"}, nil)
		return
	}
	var endDateParam string
	if query.Has("end_date") {
		param := string(query.Get("end_date"))

		endDateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "end_date"}, nil)
		return
	}
	var metricTypesParam []string
	if query.Has("metric_types") {
		metricTypesParam = strings.Split(query.Get("metric_types"), ",")
	}
	var appTypesParam string
	if query.Has("app_types") {
		param := query.Get("app_types")

		appTypesParam = param
	} else {
		param := "ALL"
		appTypesParam = param
	}
	var splitFieldParam string
	if query.Has("split_field") {
		param := query.Get("split_field")

		splitFieldParam = param
	} else {
		param := "NO_SPLIT"
		splitFieldParam = param
	}
	var adAccountIdParam string
	if query.Has("ad_account_id") {
		param := query.Get("ad_account_id")

		adAccountIdParam = param
	} else {
	}
	result, err := c.service.PinsAnalytics(r.Context(), pinIdParam, startDateParam, endDateParam, metricTypesParam, appTypesParam, splitFieldParam, adAccountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// MultiPinsAnalytics - Get multiple Pin analytics
func (c *PinsAPIController) MultiPinsAnalytics(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var pinIdsParam []string
	if query.Has("pin_ids") {
		pinIdsParam = strings.Split(query.Get("pin_ids"), ",")
	}
	var startDateParam string
	if query.Has("start_date") {
		param := string(query.Get("start_date"))

		startDateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "start_date"}, nil)
		return
	}
	var endDateParam string
	if query.Has("end_date") {
		param := string(query.Get("end_date"))

		endDateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "end_date"}, nil)
		return
	}
	var metricTypesParam []string
	if query.Has("metric_types") {
		metricTypesParam = strings.Split(query.Get("metric_types"), ",")
	}
	var appTypesParam string
	if query.Has("app_types") {
		param := query.Get("app_types")

		appTypesParam = param
	} else {
		param := "ALL"
		appTypesParam = param
	}
	var adAccountIdParam string
	if query.Has("ad_account_id") {
		param := query.Get("ad_account_id")

		adAccountIdParam = param
	} else {
	}
	result, err := c.service.MultiPinsAnalytics(r.Context(), pinIdsParam, startDateParam, endDateParam, metricTypesParam, appTypesParam, adAccountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// PinsSave - Save Pin
func (c *PinsAPIController) PinsSave(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	pinIdParam := params["pin_id"]
	if pinIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"pin_id"}, nil)
		return
	}
	pinsSaveRequestParam := PinsSaveRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&pinsSaveRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPinsSaveRequestRequired(pinsSaveRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPinsSaveRequestConstraints(pinsSaveRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var adAccountIdParam string
	if query.Has("ad_account_id") {
		param := query.Get("ad_account_id")

		adAccountIdParam = param
	} else {
	}
	result, err := c.service.PinsSave(r.Context(), pinIdParam, pinsSaveRequestParam, adAccountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
