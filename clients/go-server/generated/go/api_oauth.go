// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi

import (
	"net/http"
	"strings"
)

// OauthAPIController binds http requests to an api service and writes the service results to the http response
type OauthAPIController struct {
	service OauthAPIServicer
	errorHandler ErrorHandler
}

// OauthAPIOption for how the controller is set up.
type OauthAPIOption func(*OauthAPIController)

// WithOauthAPIErrorHandler inject ErrorHandler into controller
func WithOauthAPIErrorHandler(h ErrorHandler) OauthAPIOption {
	return func(c *OauthAPIController) {
		c.errorHandler = h
	}
}

// NewOauthAPIController creates a default api controller
func NewOauthAPIController(s OauthAPIServicer, opts ...OauthAPIOption) *OauthAPIController {
	controller := &OauthAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the OauthAPIController
func (c *OauthAPIController) Routes() Routes {
	return Routes{
		"OauthToken": Route{
			strings.ToUpper("Post"),
			"/v5/oauth/token",
			c.OauthToken,
		},
	}
}

// OauthToken - Generate OAuth access token
func (c *OauthAPIController) OauthToken(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	
	
	grantTypeParam := r.FormValue("grant_type")
	result, err := c.service.OauthToken(r.Context(), grantTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
