// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CustomerListsAPIController binds http requests to an api service and writes the service results to the http response
type CustomerListsAPIController struct {
	service CustomerListsAPIServicer
	errorHandler ErrorHandler
}

// CustomerListsAPIOption for how the controller is set up.
type CustomerListsAPIOption func(*CustomerListsAPIController)

// WithCustomerListsAPIErrorHandler inject ErrorHandler into controller
func WithCustomerListsAPIErrorHandler(h ErrorHandler) CustomerListsAPIOption {
	return func(c *CustomerListsAPIController) {
		c.errorHandler = h
	}
}

// NewCustomerListsAPIController creates a default api controller
func NewCustomerListsAPIController(s CustomerListsAPIServicer, opts ...CustomerListsAPIOption) *CustomerListsAPIController {
	controller := &CustomerListsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CustomerListsAPIController
func (c *CustomerListsAPIController) Routes() Routes {
	return Routes{
		"CustomerListsList": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/customer_lists",
			c.CustomerListsList,
		},
		"CustomerListsCreate": Route{
			strings.ToUpper("Post"),
			"/v5/ad_accounts/{ad_account_id}/customer_lists",
			c.CustomerListsCreate,
		},
		"CustomerListsGet": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/customer_lists/{customer_list_id}",
			c.CustomerListsGet,
		},
		"CustomerListsUpdate": Route{
			strings.ToUpper("Patch"),
			"/v5/ad_accounts/{ad_account_id}/customer_lists/{customer_list_id}",
			c.CustomerListsUpdate,
		},
	}
}

// CustomerListsList - Get customer lists
func (c *CustomerListsAPIController) CustomerListsList(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	result, err := c.service.CustomerListsList(r.Context(), adAccountIdParam, pageSizeParam, orderParam, bookmarkParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CustomerListsCreate - Create customer lists
func (c *CustomerListsAPIController) CustomerListsCreate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	customerListRequestParam := CustomerListRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&customerListRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCustomerListRequestRequired(customerListRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCustomerListRequestConstraints(customerListRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CustomerListsCreate(r.Context(), adAccountIdParam, customerListRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CustomerListsGet - Get customer list
func (c *CustomerListsAPIController) CustomerListsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	customerListIdParam := params["customer_list_id"]
	if customerListIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"customer_list_id"}, nil)
		return
	}
	result, err := c.service.CustomerListsGet(r.Context(), adAccountIdParam, customerListIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CustomerListsUpdate - Update customer list
func (c *CustomerListsAPIController) CustomerListsUpdate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	customerListIdParam := params["customer_list_id"]
	if customerListIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"customer_list_id"}, nil)
		return
	}
	customerListUpdateRequestParam := CustomerListUpdateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&customerListUpdateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCustomerListUpdateRequestRequired(customerListUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCustomerListUpdateRequestConstraints(customerListUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CustomerListsUpdate(r.Context(), adAccountIdParam, customerListIdParam, customerListUpdateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
