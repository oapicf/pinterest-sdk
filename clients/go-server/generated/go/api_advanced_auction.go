// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// AdvancedAuctionAPIController binds http requests to an api service and writes the service results to the http response
type AdvancedAuctionAPIController struct {
	service AdvancedAuctionAPIServicer
	errorHandler ErrorHandler
}

// AdvancedAuctionAPIOption for how the controller is set up.
type AdvancedAuctionAPIOption func(*AdvancedAuctionAPIController)

// WithAdvancedAuctionAPIErrorHandler inject ErrorHandler into controller
func WithAdvancedAuctionAPIErrorHandler(h ErrorHandler) AdvancedAuctionAPIOption {
	return func(c *AdvancedAuctionAPIController) {
		c.errorHandler = h
	}
}

// NewAdvancedAuctionAPIController creates a default api controller
func NewAdvancedAuctionAPIController(s AdvancedAuctionAPIServicer, opts ...AdvancedAuctionAPIOption) *AdvancedAuctionAPIController {
	controller := &AdvancedAuctionAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AdvancedAuctionAPIController
func (c *AdvancedAuctionAPIController) Routes() Routes {
	return Routes{
		"AdvancedAuctionItemsGetPost": Route{
			strings.ToUpper("Post"),
			"/v5/advanced_auction/items/get",
			c.AdvancedAuctionItemsGetPost,
		},
		"AdvancedAuctionItemsSubmitPost": Route{
			strings.ToUpper("Post"),
			"/v5/advanced_auction/items/submit",
			c.AdvancedAuctionItemsSubmitPost,
		},
	}
}

// AdvancedAuctionItemsGetPost - Get item bid options (POST)
func (c *AdvancedAuctionAPIController) AdvancedAuctionItemsGetPost(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	advancedAuctionItemsGetRequestParam := AdvancedAuctionItemsGetRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&advancedAuctionItemsGetRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAdvancedAuctionItemsGetRequestRequired(advancedAuctionItemsGetRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAdvancedAuctionItemsGetRequestConstraints(advancedAuctionItemsGetRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var adAccountIdParam string
	if query.Has("ad_account_id") {
		param := query.Get("ad_account_id")

		adAccountIdParam = param
	} else {
	}
	result, err := c.service.AdvancedAuctionItemsGetPost(r.Context(), advancedAuctionItemsGetRequestParam, adAccountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AdvancedAuctionItemsSubmitPost - Operate on item level bid options
func (c *AdvancedAuctionAPIController) AdvancedAuctionItemsSubmitPost(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	advancedAuctionItemsSubmitRequestParam := AdvancedAuctionItemsSubmitRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&advancedAuctionItemsSubmitRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAdvancedAuctionItemsSubmitRequestRequired(advancedAuctionItemsSubmitRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAdvancedAuctionItemsSubmitRequestConstraints(advancedAuctionItemsSubmitRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var adAccountIdParam string
	if query.Has("ad_account_id") {
		param := query.Get("ad_account_id")

		adAccountIdParam = param
	} else {
	}
	result, err := c.service.AdvancedAuctionItemsSubmitPost(r.Context(), advancedAuctionItemsSubmitRequestParam, adAccountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
