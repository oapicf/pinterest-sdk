// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// TargetingTemplateAPIController binds http requests to an api service and writes the service results to the http response
type TargetingTemplateAPIController struct {
	service TargetingTemplateAPIServicer
	errorHandler ErrorHandler
}

// TargetingTemplateAPIOption for how the controller is set up.
type TargetingTemplateAPIOption func(*TargetingTemplateAPIController)

// WithTargetingTemplateAPIErrorHandler inject ErrorHandler into controller
func WithTargetingTemplateAPIErrorHandler(h ErrorHandler) TargetingTemplateAPIOption {
	return func(c *TargetingTemplateAPIController) {
		c.errorHandler = h
	}
}

// NewTargetingTemplateAPIController creates a default api controller
func NewTargetingTemplateAPIController(s TargetingTemplateAPIServicer, opts ...TargetingTemplateAPIOption) *TargetingTemplateAPIController {
	controller := &TargetingTemplateAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TargetingTemplateAPIController
func (c *TargetingTemplateAPIController) Routes() Routes {
	return Routes{
		"TargetingTemplateList": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/targeting_templates",
			c.TargetingTemplateList,
		},
		"TargetingTemplateCreate": Route{
			strings.ToUpper("Post"),
			"/v5/ad_accounts/{ad_account_id}/targeting_templates",
			c.TargetingTemplateCreate,
		},
		"TargetingTemplateUpdate": Route{
			strings.ToUpper("Patch"),
			"/v5/ad_accounts/{ad_account_id}/targeting_templates",
			c.TargetingTemplateUpdate,
		},
	}
}

// TargetingTemplateList - List targeting templates
func (c *TargetingTemplateAPIController) TargetingTemplateList(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var includeSizingParam bool
	if query.Has("include_sizing") {
		param, err := parseBoolParameter(
			query.Get("include_sizing"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "include_sizing", Err: err}, nil)
			return
		}

		includeSizingParam = param
	} else {
		var param bool = false
		includeSizingParam = param
	}
	var searchQueryParam string
	if query.Has("search_query") {
		param := query.Get("search_query")

		searchQueryParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	result, err := c.service.TargetingTemplateList(r.Context(), adAccountIdParam, orderParam, includeSizingParam, searchQueryParam, pageSizeParam, bookmarkParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// TargetingTemplateCreate - Create targeting templates
func (c *TargetingTemplateAPIController) TargetingTemplateCreate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	targetingTemplateCreateParam := TargetingTemplateCreate{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&targetingTemplateCreateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTargetingTemplateCreateRequired(targetingTemplateCreateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTargetingTemplateCreateConstraints(targetingTemplateCreateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.TargetingTemplateCreate(r.Context(), adAccountIdParam, targetingTemplateCreateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// TargetingTemplateUpdate - Update targeting templates
func (c *TargetingTemplateAPIController) TargetingTemplateUpdate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	targetingTemplateUpdateRequestParam := TargetingTemplateUpdateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&targetingTemplateUpdateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTargetingTemplateUpdateRequestRequired(targetingTemplateUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTargetingTemplateUpdateRequestConstraints(targetingTemplateUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.TargetingTemplateUpdate(r.Context(), adAccountIdParam, targetingTemplateUpdateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
