// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// BusinessAccessInviteAPIController binds http requests to an api service and writes the service results to the http response
type BusinessAccessInviteAPIController struct {
	service BusinessAccessInviteAPIServicer
	errorHandler ErrorHandler
}

// BusinessAccessInviteAPIOption for how the controller is set up.
type BusinessAccessInviteAPIOption func(*BusinessAccessInviteAPIController)

// WithBusinessAccessInviteAPIErrorHandler inject ErrorHandler into controller
func WithBusinessAccessInviteAPIErrorHandler(h ErrorHandler) BusinessAccessInviteAPIOption {
	return func(c *BusinessAccessInviteAPIController) {
		c.errorHandler = h
	}
}

// NewBusinessAccessInviteAPIController creates a default api controller
func NewBusinessAccessInviteAPIController(s BusinessAccessInviteAPIServicer, opts ...BusinessAccessInviteAPIOption) *BusinessAccessInviteAPIController {
	controller := &BusinessAccessInviteAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BusinessAccessInviteAPIController
func (c *BusinessAccessInviteAPIController) Routes() Routes {
	return Routes{
		"RespondBusinessAccessInvites": Route{
			strings.ToUpper("Patch"),
			"/v5/businesses/invites",
			c.RespondBusinessAccessInvites,
		},
		"CreateAssetInvites": Route{
			strings.ToUpper("Post"),
			"/v5/businesses/{business_id}/invites/assets/access",
			c.CreateAssetInvites,
		},
		"AssetAccessRequestsCreate": Route{
			strings.ToUpper("Post"),
			"/v5/businesses/{business_id}/requests/assets/access",
			c.AssetAccessRequestsCreate,
		},
		"GetInvites": Route{
			strings.ToUpper("Get"),
			"/v5/businesses/{business_id}/invites",
			c.GetInvites,
		},
		"CreateMembershipOrPartnershipInvites": Route{
			strings.ToUpper("Post"),
			"/v5/businesses/{business_id}/invites",
			c.CreateMembershipOrPartnershipInvites,
		},
		"CancelInvitesOrRequests": Route{
			strings.ToUpper("Delete"),
			"/v5/businesses/{business_id}/invites",
			c.CancelInvitesOrRequests,
		},
	}
}

// RespondBusinessAccessInvites - Accept or decline an invite/request
func (c *BusinessAccessInviteAPIController) RespondBusinessAccessInvites(w http.ResponseWriter, r *http.Request) {
	authRespondInvitesBodyParam := AuthRespondInvitesBody{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&authRespondInvitesBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAuthRespondInvitesBodyRequired(authRespondInvitesBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAuthRespondInvitesBodyConstraints(authRespondInvitesBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RespondBusinessAccessInvites(r.Context(), authRespondInvitesBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateAssetInvites - Update invite/request with an asset permission
func (c *BusinessAccessInviteAPIController) CreateAssetInvites(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam := params["business_id"]
	if businessIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"business_id"}, nil)
		return
	}
	createAssetInvitesRequestParam := CreateAssetInvitesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createAssetInvitesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateAssetInvitesRequestRequired(createAssetInvitesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateAssetInvitesRequestConstraints(createAssetInvitesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateAssetInvites(r.Context(), businessIdParam, createAssetInvitesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AssetAccessRequestsCreate - Create a request to access an existing partner's assets.
func (c *BusinessAccessInviteAPIController) AssetAccessRequestsCreate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam := params["business_id"]
	if businessIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"business_id"}, nil)
		return
	}
	createAssetAccessRequestBodyParam := CreateAssetAccessRequestBody{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createAssetAccessRequestBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateAssetAccessRequestBodyRequired(createAssetAccessRequestBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateAssetAccessRequestBodyConstraints(createAssetAccessRequestBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AssetAccessRequestsCreate(r.Context(), businessIdParam, createAssetAccessRequestBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetInvites - Get invites/requests
func (c *BusinessAccessInviteAPIController) GetInvites(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam := params["business_id"]
	if businessIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"business_id"}, nil)
		return
	}
	var isMemberParam bool
	if query.Has("is_member") {
		param, err := parseBoolParameter(
			query.Get("is_member"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "is_member", Err: err}, nil)
			return
		}

		isMemberParam = param
	} else {
		var param bool = true
		isMemberParam = param
	}
	var inviteStatusParam []string
	if query.Has("invite_status") {
		inviteStatusParam = strings.Split(query.Get("invite_status"), ",")
	}
	var inviteTypeParam InviteType
	if query.Has("invite_type") {
		param := InviteType(query.Get("invite_type"))

		inviteTypeParam = param
	} else {
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	result, err := c.service.GetInvites(r.Context(), businessIdParam, isMemberParam, inviteStatusParam, inviteTypeParam, bookmarkParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateMembershipOrPartnershipInvites - Create invites or requests
func (c *BusinessAccessInviteAPIController) CreateMembershipOrPartnershipInvites(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam := params["business_id"]
	if businessIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"business_id"}, nil)
		return
	}
	createMembershipOrPartnershipInvitesBodyParam := CreateMembershipOrPartnershipInvitesBody{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createMembershipOrPartnershipInvitesBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateMembershipOrPartnershipInvitesBodyRequired(createMembershipOrPartnershipInvitesBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateMembershipOrPartnershipInvitesBodyConstraints(createMembershipOrPartnershipInvitesBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateMembershipOrPartnershipInvites(r.Context(), businessIdParam, createMembershipOrPartnershipInvitesBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CancelInvitesOrRequests - Cancel invites/requests
func (c *BusinessAccessInviteAPIController) CancelInvitesOrRequests(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam := params["business_id"]
	if businessIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"business_id"}, nil)
		return
	}
	cancelInvitesBodyParam := CancelInvitesBody{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&cancelInvitesBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCancelInvitesBodyRequired(cancelInvitesBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCancelInvitesBodyConstraints(cancelInvitesBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CancelInvitesOrRequests(r.Context(), businessIdParam, cancelInvitesBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
