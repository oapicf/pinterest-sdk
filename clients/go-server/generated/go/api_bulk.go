// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BulkAPIController binds http requests to an api service and writes the service results to the http response
type BulkAPIController struct {
	service BulkAPIServicer
	errorHandler ErrorHandler
}

// BulkAPIOption for how the controller is set up.
type BulkAPIOption func(*BulkAPIController)

// WithBulkAPIErrorHandler inject ErrorHandler into controller
func WithBulkAPIErrorHandler(h ErrorHandler) BulkAPIOption {
	return func(c *BulkAPIController) {
		c.errorHandler = h
	}
}

// NewBulkAPIController creates a default api controller
func NewBulkAPIController(s BulkAPIServicer, opts ...BulkAPIOption) *BulkAPIController {
	controller := &BulkAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BulkAPIController
func (c *BulkAPIController) Routes() Routes {
	return Routes{
		"BulkDownloadCreate": Route{
			strings.ToUpper("Post"),
			"/v5/ad_accounts/{ad_account_id}/bulk/download",
			c.BulkDownloadCreate,
		},
		"BulkUpsertCreate": Route{
			strings.ToUpper("Post"),
			"/v5/ad_accounts/{ad_account_id}/bulk/upsert",
			c.BulkUpsertCreate,
		},
		"BulkRequestGet": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/bulk/{bulk_request_id}",
			c.BulkRequestGet,
		},
	}
}

// BulkDownloadCreate - Get advertiser entities in bulk
func (c *BulkAPIController) BulkDownloadCreate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	bulkDownloadRequestParam := BulkDownloadRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bulkDownloadRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBulkDownloadRequestRequired(bulkDownloadRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBulkDownloadRequestConstraints(bulkDownloadRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BulkDownloadCreate(r.Context(), adAccountIdParam, bulkDownloadRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// BulkUpsertCreate - Create/update ad entities in bulk
func (c *BulkAPIController) BulkUpsertCreate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	bulkUpsertRequestParam := BulkUpsertRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bulkUpsertRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBulkUpsertRequestRequired(bulkUpsertRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBulkUpsertRequestConstraints(bulkUpsertRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BulkUpsertCreate(r.Context(), adAccountIdParam, bulkUpsertRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// BulkRequestGet - Download advertiser entities in bulk
func (c *BulkAPIController) BulkRequestGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	bulkRequestIdParam := params["bulk_request_id"]
	if bulkRequestIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"bulk_request_id"}, nil)
		return
	}
	var includeDetailsParam bool
	if query.Has("include_details") {
		param, err := parseBoolParameter(
			query.Get("include_details"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "include_details", Err: err}, nil)
			return
		}

		includeDetailsParam = param
	} else {
		var param bool = false
		includeDetailsParam = param
	}
	result, err := c.service.BulkRequestGet(r.Context(), adAccountIdParam, bulkRequestIdParam, includeDetailsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
