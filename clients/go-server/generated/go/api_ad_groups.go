// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// AdGroupsAPIController binds http requests to an api service and writes the service results to the http response
type AdGroupsAPIController struct {
	service AdGroupsAPIServicer
	errorHandler ErrorHandler
}

// AdGroupsAPIOption for how the controller is set up.
type AdGroupsAPIOption func(*AdGroupsAPIController)

// WithAdGroupsAPIErrorHandler inject ErrorHandler into controller
func WithAdGroupsAPIErrorHandler(h ErrorHandler) AdGroupsAPIOption {
	return func(c *AdGroupsAPIController) {
		c.errorHandler = h
	}
}

// NewAdGroupsAPIController creates a default api controller
func NewAdGroupsAPIController(s AdGroupsAPIServicer, opts ...AdGroupsAPIOption) *AdGroupsAPIController {
	controller := &AdGroupsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AdGroupsAPIController
func (c *AdGroupsAPIController) Routes() Routes {
	return Routes{
		"AdGroupsList": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/ad_groups",
			c.AdGroupsList,
		},
		"AdGroupsCreate": Route{
			strings.ToUpper("Post"),
			"/v5/ad_accounts/{ad_account_id}/ad_groups",
			c.AdGroupsCreate,
		},
		"AdGroupsUpdate": Route{
			strings.ToUpper("Patch"),
			"/v5/ad_accounts/{ad_account_id}/ad_groups",
			c.AdGroupsUpdate,
		},
		"AdGroupsAnalytics": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/ad_groups/analytics",
			c.AdGroupsAnalytics,
		},
		"AdGroupsTargetingAnalyticsGet": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/ad_groups/targeting_analytics",
			c.AdGroupsTargetingAnalyticsGet,
		},
		"AdGroupsAudienceSizing": Route{
			strings.ToUpper("Post"),
			"/v5/ad_accounts/{ad_account_id}/ad_groups/audience_sizing",
			c.AdGroupsAudienceSizing,
		},
		"AdGroupsGet": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/ad_groups/{ad_group_id}",
			c.AdGroupsGet,
		},
		"AdGroupsBidFloorGet": Route{
			strings.ToUpper("Post"),
			"/v5/ad_accounts/{ad_account_id}/bid_floor",
			c.AdGroupsBidFloorGet,
		},
	}
}

// AdGroupsList - List ad groups
func (c *AdGroupsAPIController) AdGroupsList(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	var campaignIdsParam []string
	if query.Has("campaign_ids") {
		campaignIdsParam = strings.Split(query.Get("campaign_ids"), ",")
	}
	var adGroupIdsParam []string
	if query.Has("ad_group_ids") {
		adGroupIdsParam = strings.Split(query.Get("ad_group_ids"), ",")
	}
	var entityStatusesParam []string
	if query.Has("entity_statuses") {
		entityStatusesParam = strings.Split(query.Get("entity_statuses"), ",")
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	var translateInterestsToNamesParam bool
	if query.Has("translate_interests_to_names") {
		param, err := parseBoolParameter(
			query.Get("translate_interests_to_names"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "translate_interests_to_names", Err: err}, nil)
			return
		}

		translateInterestsToNamesParam = param
	} else {
		var param bool = false
		translateInterestsToNamesParam = param
	}
	result, err := c.service.AdGroupsList(r.Context(), adAccountIdParam, campaignIdsParam, adGroupIdsParam, entityStatusesParam, pageSizeParam, orderParam, bookmarkParam, translateInterestsToNamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AdGroupsCreate - Create ad groups
func (c *AdGroupsAPIController) AdGroupsCreate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	adGroupCreateRequestParam := []AdGroupCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&adGroupCreateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range adGroupCreateRequestParam {
		if err := AssertAdGroupCreateRequestRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.AdGroupsCreate(r.Context(), adAccountIdParam, adGroupCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AdGroupsUpdate - Update ad groups
func (c *AdGroupsAPIController) AdGroupsUpdate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	adGroupUpdateRequestParam := []AdGroupUpdateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&adGroupUpdateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range adGroupUpdateRequestParam {
		if err := AssertAdGroupUpdateRequestRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.AdGroupsUpdate(r.Context(), adAccountIdParam, adGroupUpdateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AdGroupsAnalytics - Get ad group analytics
func (c *AdGroupsAPIController) AdGroupsAnalytics(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	var startDateParam string
	if query.Has("start_date") {
		param := string(query.Get("start_date"))

		startDateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "start_date"}, nil)
		return
	}
	var endDateParam string
	if query.Has("end_date") {
		param := string(query.Get("end_date"))

		endDateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "end_date"}, nil)
		return
	}
	var adGroupIdsParam []string
	if query.Has("ad_group_ids") {
		adGroupIdsParam = strings.Split(query.Get("ad_group_ids"), ",")
	}
	var columnsParam []string
	if query.Has("columns") {
		columnsParam = strings.Split(query.Get("columns"), ",")
	}
	var granularityParam Granularity
	if query.Has("granularity") {
		param := Granularity(query.Get("granularity"))

		granularityParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "granularity"}, nil)
		return
	}
	var clickWindowDaysParam int32
	if query.Has("click_window_days") {
		param, err := parseNumericParameter[int32](
			query.Get("click_window_days"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "click_window_days", Err: err}, nil)
			return
		}

		clickWindowDaysParam = param
	} else {
		var param int32 = 30
		clickWindowDaysParam = param
	}
	var engagementWindowDaysParam int32
	if query.Has("engagement_window_days") {
		param, err := parseNumericParameter[int32](
			query.Get("engagement_window_days"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "engagement_window_days", Err: err}, nil)
			return
		}

		engagementWindowDaysParam = param
	} else {
		var param int32 = 30
		engagementWindowDaysParam = param
	}
	var viewWindowDaysParam int32
	if query.Has("view_window_days") {
		param, err := parseNumericParameter[int32](
			query.Get("view_window_days"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "view_window_days", Err: err}, nil)
			return
		}

		viewWindowDaysParam = param
	} else {
		var param int32 = 1
		viewWindowDaysParam = param
	}
	var conversionReportTimeParam string
	if query.Has("conversion_report_time") {
		param := query.Get("conversion_report_time")

		conversionReportTimeParam = param
	} else {
		param := "TIME_OF_AD_ACTION"
		conversionReportTimeParam = param
	}
	result, err := c.service.AdGroupsAnalytics(r.Context(), adAccountIdParam, startDateParam, endDateParam, adGroupIdsParam, columnsParam, granularityParam, clickWindowDaysParam, engagementWindowDaysParam, viewWindowDaysParam, conversionReportTimeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AdGroupsTargetingAnalyticsGet - Get targeting analytics for ad groups
func (c *AdGroupsAPIController) AdGroupsTargetingAnalyticsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	var adGroupIdsParam []string
	if query.Has("ad_group_ids") {
		adGroupIdsParam = strings.Split(query.Get("ad_group_ids"), ",")
	}
	var startDateParam string
	if query.Has("start_date") {
		param := string(query.Get("start_date"))

		startDateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "start_date"}, nil)
		return
	}
	var endDateParam string
	if query.Has("end_date") {
		param := string(query.Get("end_date"))

		endDateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "end_date"}, nil)
		return
	}
	var targetingTypesParam []AdsAnalyticsTargetingType
	if query.Has("targeting_types") {
		paramSplits := strings.Split(query.Get("targeting_types"), ",")
		targetingTypesParam = make([]AdsAnalyticsTargetingType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewAdsAnalyticsTargetingTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Param: "targeting_types", Err: err}, nil)
				return
			}
			targetingTypesParam = append(targetingTypesParam, paramEnum)
		}
	}
	var columnsParam []string
	if query.Has("columns") {
		columnsParam = strings.Split(query.Get("columns"), ",")
	}
	var granularityParam Granularity
	if query.Has("granularity") {
		param := Granularity(query.Get("granularity"))

		granularityParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "granularity"}, nil)
		return
	}
	var clickWindowDaysParam int32
	if query.Has("click_window_days") {
		param, err := parseNumericParameter[int32](
			query.Get("click_window_days"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "click_window_days", Err: err}, nil)
			return
		}

		clickWindowDaysParam = param
	} else {
		var param int32 = 30
		clickWindowDaysParam = param
	}
	var engagementWindowDaysParam int32
	if query.Has("engagement_window_days") {
		param, err := parseNumericParameter[int32](
			query.Get("engagement_window_days"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "engagement_window_days", Err: err}, nil)
			return
		}

		engagementWindowDaysParam = param
	} else {
		var param int32 = 30
		engagementWindowDaysParam = param
	}
	var viewWindowDaysParam int32
	if query.Has("view_window_days") {
		param, err := parseNumericParameter[int32](
			query.Get("view_window_days"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "view_window_days", Err: err}, nil)
			return
		}

		viewWindowDaysParam = param
	} else {
		var param int32 = 1
		viewWindowDaysParam = param
	}
	var conversionReportTimeParam string
	if query.Has("conversion_report_time") {
		param := query.Get("conversion_report_time")

		conversionReportTimeParam = param
	} else {
		param := "TIME_OF_AD_ACTION"
		conversionReportTimeParam = param
	}
	var attributionTypesParam ConversionReportAttributionType
	if query.Has("attribution_types") {
		param := ConversionReportAttributionType(query.Get("attribution_types"))

		attributionTypesParam = param
	} else {
	}
	result, err := c.service.AdGroupsTargetingAnalyticsGet(r.Context(), adAccountIdParam, adGroupIdsParam, startDateParam, endDateParam, targetingTypesParam, columnsParam, granularityParam, clickWindowDaysParam, engagementWindowDaysParam, viewWindowDaysParam, conversionReportTimeParam, attributionTypesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AdGroupsAudienceSizing - Get audience sizing
func (c *AdGroupsAPIController) AdGroupsAudienceSizing(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	adGroupAudienceSizingRequestParam := AdGroupAudienceSizingRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&adGroupAudienceSizingRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAdGroupAudienceSizingRequestRequired(adGroupAudienceSizingRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAdGroupAudienceSizingRequestConstraints(adGroupAudienceSizingRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AdGroupsAudienceSizing(r.Context(), adAccountIdParam, adGroupAudienceSizingRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AdGroupsGet - Get ad group
func (c *AdGroupsAPIController) AdGroupsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	adGroupIdParam := params["ad_group_id"]
	if adGroupIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_group_id"}, nil)
		return
	}
	result, err := c.service.AdGroupsGet(r.Context(), adAccountIdParam, adGroupIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AdGroupsBidFloorGet - Get bid floors
func (c *AdGroupsAPIController) AdGroupsBidFloorGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	bidFloorRequestParam := BidFloorRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bidFloorRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBidFloorRequestRequired(bidFloorRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBidFloorRequestConstraints(bidFloorRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AdGroupsBidFloorGet(r.Context(), adAccountIdParam, bidFloorRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
