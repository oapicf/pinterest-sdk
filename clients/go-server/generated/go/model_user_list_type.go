// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi


import (
	"fmt"
)


// UserListType : User list type
type UserListType string

// List of UserListType
const (
	EMAIL UserListType = "EMAIL"
	IDFA UserListType = "IDFA"
	MAID UserListType = "MAID"
	LR_ID UserListType = "LR_ID"
	DLX_ID UserListType = "DLX_ID"
	HASHED_PINNER_ID UserListType = "HASHED_PINNER_ID"
)

// AllowedUserListTypeEnumValues is all the allowed values of UserListType enum
var AllowedUserListTypeEnumValues = []UserListType{
	"EMAIL",
	"IDFA",
	"MAID",
	"LR_ID",
	"DLX_ID",
	"HASHED_PINNER_ID",
}

// validUserListTypeEnumValue provides a map of UserListTypes for fast verification of use input
var validUserListTypeEnumValues = map[UserListType]struct{}{
	"EMAIL": {},
	"IDFA": {},
	"MAID": {},
	"LR_ID": {},
	"DLX_ID": {},
	"HASHED_PINNER_ID": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserListType) IsValid() bool {
	_, ok := validUserListTypeEnumValues[v]
	return ok
}

// NewUserListTypeFromValue returns a pointer to a valid UserListType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserListTypeFromValue(v string) (UserListType, error) {
	ev := UserListType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for UserListType: valid values are %v", v, AllowedUserListTypeEnumValues)
}



// AssertUserListTypeRequired checks if the required fields are not zero-ed
func AssertUserListTypeRequired(obj UserListType) error {
	return nil
}

// AssertUserListTypeConstraints checks if the values respects the defined constraints
func AssertUserListTypeConstraints(obj UserListType) error {
	return nil
}
