// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// KeywordsAPIController binds http requests to an api service and writes the service results to the http response
type KeywordsAPIController struct {
	service KeywordsAPIServicer
	errorHandler ErrorHandler
}

// KeywordsAPIOption for how the controller is set up.
type KeywordsAPIOption func(*KeywordsAPIController)

// WithKeywordsAPIErrorHandler inject ErrorHandler into controller
func WithKeywordsAPIErrorHandler(h ErrorHandler) KeywordsAPIOption {
	return func(c *KeywordsAPIController) {
		c.errorHandler = h
	}
}

// NewKeywordsAPIController creates a default api controller
func NewKeywordsAPIController(s KeywordsAPIServicer, opts ...KeywordsAPIOption) *KeywordsAPIController {
	controller := &KeywordsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the KeywordsAPIController
func (c *KeywordsAPIController) Routes() Routes {
	return Routes{
		"KeywordsGet": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/keywords",
			c.KeywordsGet,
		},
		"KeywordsCreate": Route{
			strings.ToUpper("Post"),
			"/v5/ad_accounts/{ad_account_id}/keywords",
			c.KeywordsCreate,
		},
		"KeywordsUpdate": Route{
			strings.ToUpper("Patch"),
			"/v5/ad_accounts/{ad_account_id}/keywords",
			c.KeywordsUpdate,
		},
		"CountryKeywordsMetricsGet": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/keywords/metrics",
			c.CountryKeywordsMetricsGet,
		},
		"TrendingKeywordsList": Route{
			strings.ToUpper("Get"),
			"/v5/trends/keywords/{region}/top/{trend_type}",
			c.TrendingKeywordsList,
		},
	}
}

// KeywordsGet - Get keywords
func (c *KeywordsAPIController) KeywordsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	var campaignIdParam string
	if query.Has("campaign_id") {
		param := query.Get("campaign_id")

		campaignIdParam = param
	} else {
	}
	var adGroupIdParam string
	if query.Has("ad_group_id") {
		param := query.Get("ad_group_id")

		adGroupIdParam = param
	} else {
	}
	var matchTypesParam []MatchType
	if query.Has("match_types") {
		paramSplits := strings.Split(query.Get("match_types"), ",")
		matchTypesParam = make([]MatchType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewMatchTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Param: "match_types", Err: err}, nil)
				return
			}
			matchTypesParam = append(matchTypesParam, paramEnum)
		}
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	result, err := c.service.KeywordsGet(r.Context(), adAccountIdParam, campaignIdParam, adGroupIdParam, matchTypesParam, pageSizeParam, bookmarkParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// KeywordsCreate - Create keywords
func (c *KeywordsAPIController) KeywordsCreate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	keywordsRequestParam := KeywordsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&keywordsRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKeywordsRequestRequired(keywordsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKeywordsRequestConstraints(keywordsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.KeywordsCreate(r.Context(), adAccountIdParam, keywordsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// KeywordsUpdate - Update keywords
func (c *KeywordsAPIController) KeywordsUpdate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	keywordUpdateBodyParam := KeywordUpdateBody{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&keywordUpdateBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKeywordUpdateBodyRequired(keywordUpdateBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKeywordUpdateBodyConstraints(keywordUpdateBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.KeywordsUpdate(r.Context(), adAccountIdParam, keywordUpdateBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CountryKeywordsMetricsGet - Get country's keyword metrics
func (c *KeywordsAPIController) CountryKeywordsMetricsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	var countryCodeParam string
	if query.Has("country_code") {
		param := query.Get("country_code")

		countryCodeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "country_code"}, nil)
		return
	}
	var keywordsParam []string
	if query.Has("keywords") {
		keywordsParam = strings.Split(query.Get("keywords"), ",")
	}
	result, err := c.service.CountryKeywordsMetricsGet(r.Context(), adAccountIdParam, countryCodeParam, keywordsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// TrendingKeywordsList - List trending keywords
func (c *KeywordsAPIController) TrendingKeywordsList(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	regionParam, err := NewTrendsSupportedRegionFromValue(params["region"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "region", Err: err}, nil)
		return
	}
	trendTypeParam, err := NewTrendTypeFromValue(params["trend_type"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "trend_type", Err: err}, nil)
		return
	}
	var interestsParam []string
	if query.Has("interests") {
		interestsParam = strings.Split(query.Get("interests"), ",")
	}
	var gendersParam []string
	if query.Has("genders") {
		gendersParam = strings.Split(query.Get("genders"), ",")
	}
	var agesParam []string
	if query.Has("ages") {
		agesParam = strings.Split(query.Get("ages"), ",")
	}
	var includeKeywordsParam []string
	if query.Has("include_keywords") {
		includeKeywordsParam = strings.Split(query.Get("include_keywords"), ",")
	}
	var normalizeAgainstGroupParam bool
	if query.Has("normalize_against_group") {
		param, err := parseBoolParameter(
			query.Get("normalize_against_group"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "normalize_against_group", Err: err}, nil)
			return
		}

		normalizeAgainstGroupParam = param
	} else {
		var param bool = false
		normalizeAgainstGroupParam = param
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 50
		limitParam = param
	}
	result, err := c.service.TrendingKeywordsList(r.Context(), regionParam, trendTypeParam, interestsParam, gendersParam, agesParam, includeKeywordsParam, normalizeAgainstGroupParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
