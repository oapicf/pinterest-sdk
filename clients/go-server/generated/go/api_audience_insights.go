// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AudienceInsightsAPIController binds http requests to an api service and writes the service results to the http response
type AudienceInsightsAPIController struct {
	service AudienceInsightsAPIServicer
	errorHandler ErrorHandler
}

// AudienceInsightsAPIOption for how the controller is set up.
type AudienceInsightsAPIOption func(*AudienceInsightsAPIController)

// WithAudienceInsightsAPIErrorHandler inject ErrorHandler into controller
func WithAudienceInsightsAPIErrorHandler(h ErrorHandler) AudienceInsightsAPIOption {
	return func(c *AudienceInsightsAPIController) {
		c.errorHandler = h
	}
}

// NewAudienceInsightsAPIController creates a default api controller
func NewAudienceInsightsAPIController(s AudienceInsightsAPIServicer, opts ...AudienceInsightsAPIOption) *AudienceInsightsAPIController {
	controller := &AudienceInsightsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AudienceInsightsAPIController
func (c *AudienceInsightsAPIController) Routes() Routes {
	return Routes{
		"AudienceInsightsGet": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/audience_insights",
			c.AudienceInsightsGet,
		},
		"AudienceInsightsScopeAndTypeGet": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/insights/audiences",
			c.AudienceInsightsScopeAndTypeGet,
		},
	}
}

// AudienceInsightsGet - Get audience insights
func (c *AudienceInsightsAPIController) AudienceInsightsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	var audienceInsightTypeParam AudienceInsightType
	if query.Has("audience_insight_type") {
		param := AudienceInsightType(query.Get("audience_insight_type"))

		audienceInsightTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "audience_insight_type"}, nil)
		return
	}
	result, err := c.service.AudienceInsightsGet(r.Context(), adAccountIdParam, audienceInsightTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AudienceInsightsScopeAndTypeGet - Get audience insights scope and type
func (c *AudienceInsightsAPIController) AudienceInsightsScopeAndTypeGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	result, err := c.service.AudienceInsightsScopeAndTypeGet(r.Context(), adAccountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
