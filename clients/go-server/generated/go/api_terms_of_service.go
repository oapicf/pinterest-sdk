// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// TermsOfServiceAPIController binds http requests to an api service and writes the service results to the http response
type TermsOfServiceAPIController struct {
	service TermsOfServiceAPIServicer
	errorHandler ErrorHandler
}

// TermsOfServiceAPIOption for how the controller is set up.
type TermsOfServiceAPIOption func(*TermsOfServiceAPIController)

// WithTermsOfServiceAPIErrorHandler inject ErrorHandler into controller
func WithTermsOfServiceAPIErrorHandler(h ErrorHandler) TermsOfServiceAPIOption {
	return func(c *TermsOfServiceAPIController) {
		c.errorHandler = h
	}
}

// NewTermsOfServiceAPIController creates a default api controller
func NewTermsOfServiceAPIController(s TermsOfServiceAPIServicer, opts ...TermsOfServiceAPIOption) *TermsOfServiceAPIController {
	controller := &TermsOfServiceAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TermsOfServiceAPIController
func (c *TermsOfServiceAPIController) Routes() Routes {
	return Routes{
		"TermsOfServiceGet": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/terms_of_service",
			c.TermsOfServiceGet,
		},
	}
}

// TermsOfServiceGet - Get terms of service
func (c *TermsOfServiceAPIController) TermsOfServiceGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	var includeHtmlParam bool
	if query.Has("include_html") {
		param, err := parseBoolParameter(
			query.Get("include_html"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "include_html", Err: err}, nil)
			return
		}

		includeHtmlParam = param
	} else {
		var param bool = false
		includeHtmlParam = param
	}
	var tosTypeParam string
	if query.Has("tos_type") {
		param := query.Get("tos_type")

		tosTypeParam = param
	} else {
	}
	result, err := c.service.TermsOfServiceGet(r.Context(), adAccountIdParam, includeHtmlParam, tosTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
