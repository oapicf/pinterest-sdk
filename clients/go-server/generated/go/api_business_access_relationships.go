// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// BusinessAccessRelationshipsAPIController binds http requests to an api service and writes the service results to the http response
type BusinessAccessRelationshipsAPIController struct {
	service BusinessAccessRelationshipsAPIServicer
	errorHandler ErrorHandler
}

// BusinessAccessRelationshipsAPIOption for how the controller is set up.
type BusinessAccessRelationshipsAPIOption func(*BusinessAccessRelationshipsAPIController)

// WithBusinessAccessRelationshipsAPIErrorHandler inject ErrorHandler into controller
func WithBusinessAccessRelationshipsAPIErrorHandler(h ErrorHandler) BusinessAccessRelationshipsAPIOption {
	return func(c *BusinessAccessRelationshipsAPIController) {
		c.errorHandler = h
	}
}

// NewBusinessAccessRelationshipsAPIController creates a default api controller
func NewBusinessAccessRelationshipsAPIController(s BusinessAccessRelationshipsAPIServicer, opts ...BusinessAccessRelationshipsAPIOption) *BusinessAccessRelationshipsAPIController {
	controller := &BusinessAccessRelationshipsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BusinessAccessRelationshipsAPIController
func (c *BusinessAccessRelationshipsAPIController) Routes() Routes {
	return Routes{
		"GetBusinessEmployers": Route{
			strings.ToUpper("Get"),
			"/v5/businesses/employers",
			c.GetBusinessEmployers,
		},
		"GetBusinessMembers": Route{
			strings.ToUpper("Get"),
			"/v5/businesses/{business_id}/members",
			c.GetBusinessMembers,
		},
		"DeleteBusinessMembership": Route{
			strings.ToUpper("Delete"),
			"/v5/businesses/{business_id}/members",
			c.DeleteBusinessMembership,
		},
		"UpdateBusinessMemberships": Route{
			strings.ToUpper("Patch"),
			"/v5/businesses/{business_id}/members",
			c.UpdateBusinessMemberships,
		},
		"GetBusinessPartners": Route{
			strings.ToUpper("Get"),
			"/v5/businesses/{business_id}/partners",
			c.GetBusinessPartners,
		},
		"DeleteBusinessPartners": Route{
			strings.ToUpper("Delete"),
			"/v5/businesses/{business_id}/partners",
			c.DeleteBusinessPartners,
		},
	}
}

// GetBusinessEmployers - List business employers for user
func (c *BusinessAccessRelationshipsAPIController) GetBusinessEmployers(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	result, err := c.service.GetBusinessEmployers(r.Context(), pageSizeParam, bookmarkParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetBusinessMembers - Get business members
func (c *BusinessAccessRelationshipsAPIController) GetBusinessMembers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam := params["business_id"]
	if businessIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"business_id"}, nil)
		return
	}
	var assetsSummaryParam bool
	if query.Has("assets_summary") {
		param, err := parseBoolParameter(
			query.Get("assets_summary"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "assets_summary", Err: err}, nil)
			return
		}

		assetsSummaryParam = param
	} else {
		var param bool = false
		assetsSummaryParam = param
	}
	var businessRolesParam []MemberBusinessRole
	if query.Has("business_roles") {
		paramSplits := strings.Split(query.Get("business_roles"), ",")
		businessRolesParam = make([]MemberBusinessRole, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewMemberBusinessRoleFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Param: "business_roles", Err: err}, nil)
				return
			}
			businessRolesParam = append(businessRolesParam, paramEnum)
		}
	}
	var memberIdsParam string
	if query.Has("member_ids") {
		param := query.Get("member_ids")

		memberIdsParam = param
	} else {
	}
	var startIndexParam int32
	if query.Has("start_index") {
		param, err := parseNumericParameter[int32](
			query.Get("start_index"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](0),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "start_index", Err: err}, nil)
			return
		}

		startIndexParam = param
	} else {
		var param int32 = 0
		startIndexParam = param
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	result, err := c.service.GetBusinessMembers(r.Context(), businessIdParam, assetsSummaryParam, businessRolesParam, memberIdsParam, startIndexParam, bookmarkParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteBusinessMembership - Terminate business memberships
func (c *BusinessAccessRelationshipsAPIController) DeleteBusinessMembership(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam := params["business_id"]
	if businessIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"business_id"}, nil)
		return
	}
	membersToDeleteBodyParam := MembersToDeleteBody{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&membersToDeleteBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertMembersToDeleteBodyRequired(membersToDeleteBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertMembersToDeleteBodyConstraints(membersToDeleteBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DeleteBusinessMembership(r.Context(), businessIdParam, membersToDeleteBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateBusinessMemberships - Update member's business role
func (c *BusinessAccessRelationshipsAPIController) UpdateBusinessMemberships(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam := params["business_id"]
	if businessIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"business_id"}, nil)
		return
	}
	updateMemberBusinessRoleBodyParam := []UpdateMemberBusinessRoleBody{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateMemberBusinessRoleBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range updateMemberBusinessRoleBodyParam {
		if err := AssertUpdateMemberBusinessRoleBodyRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.UpdateBusinessMemberships(r.Context(), businessIdParam, updateMemberBusinessRoleBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetBusinessPartners - Get business partners
func (c *BusinessAccessRelationshipsAPIController) GetBusinessPartners(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam := params["business_id"]
	if businessIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"business_id"}, nil)
		return
	}
	var assetsSummaryParam bool
	if query.Has("assets_summary") {
		param, err := parseBoolParameter(
			query.Get("assets_summary"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "assets_summary", Err: err}, nil)
			return
		}

		assetsSummaryParam = param
	} else {
		var param bool = false
		assetsSummaryParam = param
	}
	var partnerTypeParam PartnerType
	if query.Has("partner_type") {
		param := PartnerType(query.Get("partner_type"))

		partnerTypeParam = param
	} else {
	}
	var partnerIdsParam string
	if query.Has("partner_ids") {
		param := query.Get("partner_ids")

		partnerIdsParam = param
	} else {
	}
	var startIndexParam int32
	if query.Has("start_index") {
		param, err := parseNumericParameter[int32](
			query.Get("start_index"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](0),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "start_index", Err: err}, nil)
			return
		}

		startIndexParam = param
	} else {
		var param int32 = 0
		startIndexParam = param
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	result, err := c.service.GetBusinessPartners(r.Context(), businessIdParam, assetsSummaryParam, partnerTypeParam, partnerIdsParam, startIndexParam, pageSizeParam, bookmarkParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteBusinessPartners - Terminate business partnerships
func (c *BusinessAccessRelationshipsAPIController) DeleteBusinessPartners(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam := params["business_id"]
	if businessIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"business_id"}, nil)
		return
	}
	deletePartnersRequestParam := DeletePartnersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deletePartnersRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeletePartnersRequestRequired(deletePartnersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeletePartnersRequestConstraints(deletePartnersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DeleteBusinessPartners(r.Context(), businessIdParam, deletePartnersRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
