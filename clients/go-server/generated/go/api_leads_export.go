// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// LeadsExportAPIController binds http requests to an api service and writes the service results to the http response
type LeadsExportAPIController struct {
	service LeadsExportAPIServicer
	errorHandler ErrorHandler
}

// LeadsExportAPIOption for how the controller is set up.
type LeadsExportAPIOption func(*LeadsExportAPIController)

// WithLeadsExportAPIErrorHandler inject ErrorHandler into controller
func WithLeadsExportAPIErrorHandler(h ErrorHandler) LeadsExportAPIOption {
	return func(c *LeadsExportAPIController) {
		c.errorHandler = h
	}
}

// NewLeadsExportAPIController creates a default api controller
func NewLeadsExportAPIController(s LeadsExportAPIServicer, opts ...LeadsExportAPIOption) *LeadsExportAPIController {
	controller := &LeadsExportAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the LeadsExportAPIController
func (c *LeadsExportAPIController) Routes() Routes {
	return Routes{
		"LeadsExportCreate": Route{
			strings.ToUpper("Post"),
			"/v5/ad_accounts/{ad_account_id}/leads_export",
			c.LeadsExportCreate,
		},
		"LeadsExportGet": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/leads_export/{leads_export_id}",
			c.LeadsExportGet,
		},
	}
}

// LeadsExportCreate - Create a request to export leads collected from a lead ad
func (c *LeadsExportAPIController) LeadsExportCreate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	leadsExportCreateRequestParam := LeadsExportCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&leadsExportCreateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLeadsExportCreateRequestRequired(leadsExportCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertLeadsExportCreateRequestConstraints(leadsExportCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.LeadsExportCreate(r.Context(), adAccountIdParam, leadsExportCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// LeadsExportGet - Get the lead export from the lead export create call
func (c *LeadsExportAPIController) LeadsExportGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	leadsExportIdParam := params["leads_export_id"]
	if leadsExportIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"leads_export_id"}, nil)
		return
	}
	result, err := c.service.LeadsExportGet(r.Context(), adAccountIdParam, leadsExportIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
