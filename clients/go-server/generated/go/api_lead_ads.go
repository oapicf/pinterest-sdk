// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// LeadAdsAPIController binds http requests to an api service and writes the service results to the http response
type LeadAdsAPIController struct {
	service LeadAdsAPIServicer
	errorHandler ErrorHandler
}

// LeadAdsAPIOption for how the controller is set up.
type LeadAdsAPIOption func(*LeadAdsAPIController)

// WithLeadAdsAPIErrorHandler inject ErrorHandler into controller
func WithLeadAdsAPIErrorHandler(h ErrorHandler) LeadAdsAPIOption {
	return func(c *LeadAdsAPIController) {
		c.errorHandler = h
	}
}

// NewLeadAdsAPIController creates a default api controller
func NewLeadAdsAPIController(s LeadAdsAPIServicer, opts ...LeadAdsAPIOption) *LeadAdsAPIController {
	controller := &LeadAdsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the LeadAdsAPIController
func (c *LeadAdsAPIController) Routes() Routes {
	return Routes{
		"AdAccountsSubscriptionsGetList": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/leads/subscriptions",
			c.AdAccountsSubscriptionsGetList,
		},
		"AdAccountsSubscriptionsPost": Route{
			strings.ToUpper("Post"),
			"/v5/ad_accounts/{ad_account_id}/leads/subscriptions",
			c.AdAccountsSubscriptionsPost,
		},
		"AdAccountsSubscriptionsGetById": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/leads/subscriptions/{subscription_id}",
			c.AdAccountsSubscriptionsGetById,
		},
		"AdAccountsSubscriptionsDelById": Route{
			strings.ToUpper("Delete"),
			"/v5/ad_accounts/{ad_account_id}/leads/subscriptions/{subscription_id}",
			c.AdAccountsSubscriptionsDelById,
		},
	}
}

// AdAccountsSubscriptionsGetList - Get lead ads subscriptions
func (c *LeadAdsAPIController) AdAccountsSubscriptionsGetList(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	result, err := c.service.AdAccountsSubscriptionsGetList(r.Context(), adAccountIdParam, pageSizeParam, bookmarkParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AdAccountsSubscriptionsPost - Create lead ads subscription
func (c *LeadAdsAPIController) AdAccountsSubscriptionsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	adAccountCreateSubscriptionRequestParam := AdAccountCreateSubscriptionRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&adAccountCreateSubscriptionRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAdAccountCreateSubscriptionRequestRequired(adAccountCreateSubscriptionRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAdAccountCreateSubscriptionRequestConstraints(adAccountCreateSubscriptionRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AdAccountsSubscriptionsPost(r.Context(), adAccountIdParam, adAccountCreateSubscriptionRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AdAccountsSubscriptionsGetById - Get lead ads subscription
func (c *LeadAdsAPIController) AdAccountsSubscriptionsGetById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	subscriptionIdParam := params["subscription_id"]
	if subscriptionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"subscription_id"}, nil)
		return
	}
	result, err := c.service.AdAccountsSubscriptionsGetById(r.Context(), adAccountIdParam, subscriptionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AdAccountsSubscriptionsDelById - Delete lead ads subscription
func (c *LeadAdsAPIController) AdAccountsSubscriptionsDelById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	subscriptionIdParam := params["subscription_id"]
	if subscriptionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"subscription_id"}, nil)
		return
	}
	result, err := c.service.AdAccountsSubscriptionsDelById(r.Context(), adAccountIdParam, subscriptionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
