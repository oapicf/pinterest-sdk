// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ConversionTagsAPIController binds http requests to an api service and writes the service results to the http response
type ConversionTagsAPIController struct {
	service ConversionTagsAPIServicer
	errorHandler ErrorHandler
}

// ConversionTagsAPIOption for how the controller is set up.
type ConversionTagsAPIOption func(*ConversionTagsAPIController)

// WithConversionTagsAPIErrorHandler inject ErrorHandler into controller
func WithConversionTagsAPIErrorHandler(h ErrorHandler) ConversionTagsAPIOption {
	return func(c *ConversionTagsAPIController) {
		c.errorHandler = h
	}
}

// NewConversionTagsAPIController creates a default api controller
func NewConversionTagsAPIController(s ConversionTagsAPIServicer, opts ...ConversionTagsAPIOption) *ConversionTagsAPIController {
	controller := &ConversionTagsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ConversionTagsAPIController
func (c *ConversionTagsAPIController) Routes() Routes {
	return Routes{
		"ConversionTagsList": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/conversion_tags",
			c.ConversionTagsList,
		},
		"ConversionTagsCreate": Route{
			strings.ToUpper("Post"),
			"/v5/ad_accounts/{ad_account_id}/conversion_tags",
			c.ConversionTagsCreate,
		},
		"OcpmEligibleConversionTagsGet": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/conversion_tags/ocpm_eligible",
			c.OcpmEligibleConversionTagsGet,
		},
		"PageVisitConversionTagsGet": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/conversion_tags/page_visit",
			c.PageVisitConversionTagsGet,
		},
		"ConversionTagsGet": Route{
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/conversion_tags/{conversion_tag_id}",
			c.ConversionTagsGet,
		},
	}
}

// ConversionTagsList - Get conversion tags
func (c *ConversionTagsAPIController) ConversionTagsList(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	var filterDeletedParam bool
	if query.Has("filter_deleted") {
		param, err := parseBoolParameter(
			query.Get("filter_deleted"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "filter_deleted", Err: err}, nil)
			return
		}

		filterDeletedParam = param
	} else {
		var param bool = false
		filterDeletedParam = param
	}
	result, err := c.service.ConversionTagsList(r.Context(), adAccountIdParam, filterDeletedParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ConversionTagsCreate - Create conversion tag
func (c *ConversionTagsAPIController) ConversionTagsCreate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	conversionTagCreateParam := ConversionTagCreate{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&conversionTagCreateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertConversionTagCreateRequired(conversionTagCreateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertConversionTagCreateConstraints(conversionTagCreateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ConversionTagsCreate(r.Context(), adAccountIdParam, conversionTagCreateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// OcpmEligibleConversionTagsGet - Get Ocpm eligible conversion tags
func (c *ConversionTagsAPIController) OcpmEligibleConversionTagsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	result, err := c.service.OcpmEligibleConversionTagsGet(r.Context(), adAccountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// PageVisitConversionTagsGet - Get page visit conversion tags
func (c *ConversionTagsAPIController) PageVisitConversionTagsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](250),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var bookmarkParam string
	if query.Has("bookmark") {
		param := query.Get("bookmark")

		bookmarkParam = param
	} else {
	}
	result, err := c.service.PageVisitConversionTagsGet(r.Context(), adAccountIdParam, pageSizeParam, orderParam, bookmarkParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ConversionTagsGet - Get conversion tag
func (c *ConversionTagsAPIController) ConversionTagsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	if adAccountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ad_account_id"}, nil)
		return
	}
	conversionTagIdParam := params["conversion_tag_id"]
	if conversionTagIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"conversion_tag_id"}, nil)
		return
	}
	result, err := c.service.ConversionTagsGet(r.Context(), adAccountIdParam, conversionTagIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
