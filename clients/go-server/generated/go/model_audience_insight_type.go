// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi


import (
	"fmt"
)



type AudienceInsightType string

// List of AudienceInsightType
const (
	YOUR_TOTAL_AUDIENCE AudienceInsightType = "YOUR_TOTAL_AUDIENCE"
	YOUR_ENGAGED_AUDIENCE AudienceInsightType = "YOUR_ENGAGED_AUDIENCE"
	PINTEREST_TOTAL_AUDIENCE AudienceInsightType = "PINTEREST_TOTAL_AUDIENCE"
)

// AllowedAudienceInsightTypeEnumValues is all the allowed values of AudienceInsightType enum
var AllowedAudienceInsightTypeEnumValues = []AudienceInsightType{
	"YOUR_TOTAL_AUDIENCE",
	"YOUR_ENGAGED_AUDIENCE",
	"PINTEREST_TOTAL_AUDIENCE",
}

// validAudienceInsightTypeEnumValue provides a map of AudienceInsightTypes for fast verification of use input
var validAudienceInsightTypeEnumValues = map[AudienceInsightType]struct{}{
	"YOUR_TOTAL_AUDIENCE": {},
	"YOUR_ENGAGED_AUDIENCE": {},
	"PINTEREST_TOTAL_AUDIENCE": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AudienceInsightType) IsValid() bool {
	_, ok := validAudienceInsightTypeEnumValues[v]
	return ok
}

// NewAudienceInsightTypeFromValue returns a pointer to a valid AudienceInsightType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAudienceInsightTypeFromValue(v string) (AudienceInsightType, error) {
	ev := AudienceInsightType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for AudienceInsightType: valid values are %v", v, AllowedAudienceInsightTypeEnumValues)
}



// AssertAudienceInsightTypeRequired checks if the required fields are not zero-ed
func AssertAudienceInsightTypeRequired(obj AudienceInsightType) error {
	return nil
}

// AssertAudienceInsightTypeConstraints checks if the values respects the defined constraints
func AssertAudienceInsightTypeConstraints(obj AudienceInsightType) error {
	return nil
}
