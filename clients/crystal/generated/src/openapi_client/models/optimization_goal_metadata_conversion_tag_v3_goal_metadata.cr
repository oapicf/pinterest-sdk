# #Pinterest REST API
#
##Pinterest's REST API
#
#The version of the OpenAPI document: 5.14.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.9.0
#

require "big"
require "json"
require "time"

module OpenAPIClient
  class OptimizationGoalMetadataConversionTagV3GoalMetadata
    include JSON::Serializable

    # Optional properties
    @[JSON::Field(key: "attribution_windows", type: OptimizationGoalMetadataConversionTagV3GoalMetadataAttributionWindows?, nillable: true, emit_null: false)]
    property attribution_windows : OptimizationGoalMetadataConversionTagV3GoalMetadataAttributionWindows?

    @[JSON::Field(key: "conversion_event", type: String?, nillable: true, emit_null: false)]
    property conversion_event : String?

    @[JSON::Field(key: "conversion_tag_id", type: String?, nillable: true, emit_null: false)]
    property conversion_tag_id : String?

    @[JSON::Field(key: "cpa_goal_value_in_micro_currency", type: String?, nillable: true, emit_null: false)]
    property cpa_goal_value_in_micro_currency : String?

    # ROAS optimization is not supported
    @[JSON::Field(key: "is_roas_optimized", type: Bool?, nillable: true, emit_null: false)]
    property is_roas_optimized : Bool?

    # Conversion learning model type
    @[JSON::Field(key: "learning_mode_type", type: String?, nillable: true, emit_null: false)]
    property learning_mode_type : String?

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@attribution_windows : OptimizationGoalMetadataConversionTagV3GoalMetadataAttributionWindows?, @conversion_event : String?, @conversion_tag_id : String?, @cpa_goal_value_in_micro_currency : String?, @is_roas_optimized : Bool?, @learning_mode_type : String?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      pattern = Regexp.new(/^[0-9]+$/)
      if !@conversion_tag_id.nil? && @conversion_tag_id !~ pattern
        invalid_properties.push("invalid value for \"conversion_tag_id\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[0-9]+$/)
      if !@cpa_goal_value_in_micro_currency.nil? && @cpa_goal_value_in_micro_currency !~ pattern
        invalid_properties.push("invalid value for \"cpa_goal_value_in_micro_currency\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      conversion_event_validator = EnumAttributeValidator.new("String", ["PAGE_VISIT", "SIGNUP", "CHECKOUT", "CUSTOM", "VIEW_CATEGORY", "SEARCH", "ADD_TO_CART", "WATCH_VIDEO", "LEAD", "APP_INSTALL"])
      return false unless conversion_event_validator.valid?(@conversion_event)
      return false if !@conversion_tag_id.nil? && @conversion_tag_id !~ Regexp.new(/^[0-9]+$/)
      return false if !@cpa_goal_value_in_micro_currency.nil? && @cpa_goal_value_in_micro_currency !~ Regexp.new(/^[0-9]+$/)
      learning_mode_type_validator = EnumAttributeValidator.new("String", ["NOT_ACTIVE", "ACTIVE"])
      return false unless learning_mode_type_validator.valid?(@learning_mode_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] conversion_event Object to be assigned
    def conversion_event=(conversion_event)
      validator = EnumAttributeValidator.new("String", ["PAGE_VISIT", "SIGNUP", "CHECKOUT", "CUSTOM", "VIEW_CATEGORY", "SEARCH", "ADD_TO_CART", "WATCH_VIDEO", "LEAD", "APP_INSTALL"])
      unless validator.valid?(conversion_event)
        raise ArgumentError.new("invalid value for \"conversion_event\", must be one of #{validator.allowable_values}.")
      end
      @conversion_event = conversion_event
    end

    # Custom attribute writer method with validation
    # @param [Object] conversion_tag_id Value to be assigned
    def conversion_tag_id=(conversion_tag_id)
      pattern = Regexp.new(/^[0-9]+$/)
      if !conversion_tag_id.nil? && conversion_tag_id !~ pattern
        raise ArgumentError.new("invalid value for \"conversion_tag_id\", must conform to the pattern #{pattern}.")
      end

      @conversion_tag_id = conversion_tag_id
    end

    # Custom attribute writer method with validation
    # @param [Object] cpa_goal_value_in_micro_currency Value to be assigned
    def cpa_goal_value_in_micro_currency=(cpa_goal_value_in_micro_currency)
      pattern = Regexp.new(/^[0-9]+$/)
      if !cpa_goal_value_in_micro_currency.nil? && cpa_goal_value_in_micro_currency !~ pattern
        raise ArgumentError.new("invalid value for \"cpa_goal_value_in_micro_currency\", must conform to the pattern #{pattern}.")
      end

      @cpa_goal_value_in_micro_currency = cpa_goal_value_in_micro_currency
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] learning_mode_type Object to be assigned
    def learning_mode_type=(learning_mode_type)
      validator = EnumAttributeValidator.new("String", ["NOT_ACTIVE", "ACTIVE"])
      unless validator.valid?(learning_mode_type)
        raise ArgumentError.new("invalid value for \"learning_mode_type\", must be one of #{validator.allowable_values}.")
      end
      @learning_mode_type = learning_mode_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          attribution_windows == o.attribution_windows &&
          conversion_event == o.conversion_event &&
          conversion_tag_id == o.conversion_tag_id &&
          cpa_goal_value_in_micro_currency == o.cpa_goal_value_in_micro_currency &&
          is_roas_optimized == o.is_roas_optimized &&
          learning_mode_type == o.learning_mode_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [attribution_windows, conversion_event, conversion_tag_id, cpa_goal_value_in_micro_currency, is_roas_optimized, learning_mode_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
