# #Pinterest REST API
#
##Pinterest's REST API
#
#The version of the OpenAPI document: 5.14.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.9.0
#

require "big"
require "json"
require "time"

module OpenAPIClient
  # Template fields
  class TemplateResponse
    include JSON::Serializable

    # Optional properties
    # Template ID
    @[JSON::Field(key: "id", type: String?, nillable: true, emit_null: false)]
    property id : String?

    # ID of the Ad Account that owns the template
    @[JSON::Field(key: "ad_account_id", type: String?, nillable: true, emit_null: false)]
    property ad_account_id : String?

    # IDs of the Ad Accounts that have access to this template
    @[JSON::Field(key: "ad_account_ids", type: Array(String)?, nillable: true, emit_null: false)]
    property ad_account_ids : Array(String)?

    # ID of the user who created the template
    @[JSON::Field(key: "user_id", type: String?, nillable: true, emit_null: false)]
    property user_id : String?

    # Template Name
    @[JSON::Field(key: "name", type: String?, nillable: true, emit_null: false)]
    property name : String?

    # The number of days prior to the day the report will be delivered at which the report will start
    @[JSON::Field(key: "report_start_relative_days_in_past", type: Float64?, nillable: true, emit_null: false)]
    property report_start_relative_days_in_past : Float64?

    # The number of days prior to the day the report will be delivered at which the report will end
    @[JSON::Field(key: "report_end_relative_days_in_past", type: Float64?, nillable: true, emit_null: false)]
    property report_end_relative_days_in_past : Float64?

    @[JSON::Field(key: "date_range", type: TemplateResponseDateRange?, nillable: true, emit_null: false)]
    property date_range : TemplateResponseDateRange?

    @[JSON::Field(key: "report_level", type: MetricsReportingLevel?, nillable: true, emit_null: false)]
    property report_level : MetricsReportingLevel?

    @[JSON::Field(key: "report_format", type: DataOutputFormat?, nillable: true, emit_null: false)]
    property report_format : DataOutputFormat?

    # A list of columns to be included in the report
    @[JSON::Field(key: "columns", type: Array(String)?, nillable: true, emit_null: false)]
    property columns : Array(String)?

    @[JSON::Field(key: "granularity", type: Granularity?, nillable: true, emit_null: false)]
    property granularity : Granularity?

    # The length of the sliding window over which view conversions will be attributed
    @[JSON::Field(key: "view_window_days", type: Float64?, nillable: true, emit_null: false)]
    property view_window_days : Float64?

    # The length of the sliding window over which click conversions will be attributed
    @[JSON::Field(key: "click_window_days", type: Float64?, nillable: true, emit_null: false)]
    property click_window_days : Float64?

    # The length of the sliding window over which engagement conversions will be attributed
    @[JSON::Field(key: "engagement_window_days", type: Float64?, nillable: true, emit_null: false)]
    property engagement_window_days : Float64?

    # Conversion report time type
    @[JSON::Field(key: "conversion_report_time_type", type: String?, nillable: true, emit_null: false)]
    property conversion_report_time_type : String?

    # A JSON representation of any filters to be applied before returning report data. Each filter object should contain all of the following fields:<br> \"field\": The column name<br> \"operator\": The operator. Allowed operators: [\"=\", \"!=\", \"in\", \"not_in\", \"~\", \">\", \"<\", \"contains_substring\"]<br> \"value\": A single value or a list of values
    @[JSON::Field(key: "filters_json", type: String?, nillable: true, emit_null: false)]
    property filters_json : String?

    # A boolean value that indicates if the user owns the template
    @[JSON::Field(key: "is_owned_by_user", type: Bool?, nillable: true, emit_null: false)]
    property is_owned_by_user : Bool?

    # A boolean value that indicates if this template has been used to create a scheduled report
    @[JSON::Field(key: "is_scheduled", type: Bool?, nillable: true, emit_null: false)]
    property is_scheduled : Bool?

    # The surface used to create this template
    @[JSON::Field(key: "creation_source", type: String?, nillable: true, emit_null: false)]
    property creation_source : String?

    # A boolean that indicates if the template has been deleted
    @[JSON::Field(key: "is_deleted", type: Bool?, nillable: true, emit_null: false)]
    property is_deleted : Bool?

    # Time of last update in seconds since Unix epoch
    @[JSON::Field(key: "updated_time", type: Float64?, nillable: true, emit_null: false)]
    property updated_time : Float64?

    # A list of custom column IDs
    @[JSON::Field(key: "custom_column_ids", type: Array(String)?, nillable: true, emit_null: false)]
    property custom_column_ids : Array(String)?

    # Reporting template type
    @[JSON::Field(key: "type", type: String?, nillable: true, emit_null: false)]
    property _type : String?

    # The filter on the conversion ingestion source method for conversion metrics
    @[JSON::Field(key: "ingestion_sources", type: Array(String)?, nillable: true, emit_null: false)]
    property ingestion_sources : Array(String)?

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@id : String?, @ad_account_id : String?, @ad_account_ids : Array(String)?, @user_id : String?, @name : String?, @report_start_relative_days_in_past : Float64?, @report_end_relative_days_in_past : Float64?, @date_range : TemplateResponseDateRange?, @report_level : MetricsReportingLevel?, @report_format : DataOutputFormat?, @columns : Array(String)?, @granularity : Granularity?, @view_window_days : Float64?, @click_window_days : Float64?, @engagement_window_days : Float64?, @conversion_report_time_type : String?, @filters_json : String?, @is_owned_by_user : Bool?, @is_scheduled : Bool?, @creation_source : String?, @is_deleted : Bool?, @updated_time : Float64?, @custom_column_ids : Array(String)?, @_type : String?, @ingestion_sources : Array(String)?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      conversion_report_time_type_validator = EnumAttributeValidator.new("String", ["TIME_OF_AD_ACTION", "TIME_OF_CONVERSION"])
      return false unless conversion_report_time_type_validator.valid?(@conversion_report_time_type)
      creation_source_validator = EnumAttributeValidator.new("String", ["ADS_API", "ADS_MANAGER_REPORTING_PAGE", "ADS_MANAGER_REPORT_BUILDER"])
      return false unless creation_source_validator.valid?(@creation_source)
      _type_validator = EnumAttributeValidator.new("String", ["UNSPECIFIED", "BULK", "OVERVIEW", "TABLE"])
      return false unless _type_validator.valid?(@_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] conversion_report_time_type Object to be assigned
    def conversion_report_time_type=(conversion_report_time_type)
      validator = EnumAttributeValidator.new("String", ["TIME_OF_AD_ACTION", "TIME_OF_CONVERSION"])
      unless validator.valid?(conversion_report_time_type)
        raise ArgumentError.new("invalid value for \"conversion_report_time_type\", must be one of #{validator.allowable_values}.")
      end
      @conversion_report_time_type = conversion_report_time_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] creation_source Object to be assigned
    def creation_source=(creation_source)
      validator = EnumAttributeValidator.new("String", ["ADS_API", "ADS_MANAGER_REPORTING_PAGE", "ADS_MANAGER_REPORT_BUILDER"])
      unless validator.valid?(creation_source)
        raise ArgumentError.new("invalid value for \"creation_source\", must be one of #{validator.allowable_values}.")
      end
      @creation_source = creation_source
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(_type)
      validator = EnumAttributeValidator.new("String", ["UNSPECIFIED", "BULK", "OVERVIEW", "TABLE"])
      unless validator.valid?(_type)
        raise ArgumentError.new("invalid value for \"_type\", must be one of #{validator.allowable_values}.")
      end
      @_type = _type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          id == o.id &&
          ad_account_id == o.ad_account_id &&
          ad_account_ids == o.ad_account_ids &&
          user_id == o.user_id &&
          name == o.name &&
          report_start_relative_days_in_past == o.report_start_relative_days_in_past &&
          report_end_relative_days_in_past == o.report_end_relative_days_in_past &&
          date_range == o.date_range &&
          report_level == o.report_level &&
          report_format == o.report_format &&
          columns == o.columns &&
          granularity == o.granularity &&
          view_window_days == o.view_window_days &&
          click_window_days == o.click_window_days &&
          engagement_window_days == o.engagement_window_days &&
          conversion_report_time_type == o.conversion_report_time_type &&
          filters_json == o.filters_json &&
          is_owned_by_user == o.is_owned_by_user &&
          is_scheduled == o.is_scheduled &&
          creation_source == o.creation_source &&
          is_deleted == o.is_deleted &&
          updated_time == o.updated_time &&
          custom_column_ids == o.custom_column_ids &&
          _type == o._type &&
          ingestion_sources == o.ingestion_sources
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, ad_account_id, ad_account_ids, user_id, name, report_start_relative_days_in_past, report_end_relative_days_in_past, date_range, report_level, report_format, columns, granularity, view_window_days, click_window_days, engagement_window_days, conversion_report_time_type, filters_json, is_owned_by_user, is_scheduled, creation_source, is_deleted, updated_time, custom_column_ids, _type, ingestion_sources].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
