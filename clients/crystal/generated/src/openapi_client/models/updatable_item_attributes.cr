# #Pinterest REST API
#
##Pinterest's REST API
#
#The version of the OpenAPI document: 5.14.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.9.0
#

require "big"
require "json"
require "time"

module OpenAPIClient
  class UpdatableItemAttributes
    include JSON::Serializable

    # Optional properties
    # Allows advertisers to specify a separate URL that can be used to track traffic coming from Pinterest shopping ads. Must send full URL including tracking—do not send tracking parameters only. At this time we do not support impression tracking. Must begin with http:// or https://.
    @[JSON::Field(key: "ad_link", type: String?, nillable: true, emit_null: false)]
    property ad_link : String?

    # Set this attribute to TRUE if you're submitting items that are considered “adult”. These will not be shown on Pinterest.
    @[JSON::Field(key: "adult", type: Bool?, nillable: true, emit_null: false)]
    property adult : Bool?

    # The age group to apply a demographic range to the product. Must be one of the following values (upper or lowercased): ‘newborn’ , ‘infant’, ‘toddler’, ‘kids’, or ‘adult’.
    @[JSON::Field(key: "age_group", type: String?, nillable: true, emit_null: false)]
    property age_group : String?

    # The availability of the product. Must be one of the following values (upper or lowercased): ‘in stock’, ‘out of stock’ , ‘preorder’.
    @[JSON::Field(key: "availability", type: String?, nillable: true, emit_null: false)]
    property availability : String?

    # Average reviews for the item. Can be a number from 1-5.
    @[JSON::Field(key: "average_review_rating", type: Float64?, nillable: true, emit_null: false)]
    property average_review_rating : Float64?

    # The brand of the product.
    @[JSON::Field(key: "brand", type: String?, nillable: true, emit_null: false)]
    property brand : String?

    # This attribute is not supported anymore.
    @[JSON::Field(key: "checkout_enabled", type: Bool?, nillable: true, emit_null: false)]
    property checkout_enabled : Bool?

    # The primary color of the product.
    @[JSON::Field(key: "color", type: String?, nillable: true, emit_null: false)]
    property color : String?

    # The condition of the product. Must be one of the following values (upper or lowercased): ‘new’, ‘used’, or ‘refurbished’.
    @[JSON::Field(key: "condition", type: String?, nillable: true, emit_null: false)]
    property condition : String?

    # <p><= 1000 characters</p> <p>Custom grouping of products.</p>
    @[JSON::Field(key: "custom_label_0", type: String?, nillable: true, emit_null: false)]
    property custom_label_0 : String?

    # <p><= 1000 characters</p> <p>Custom grouping of products.</p>
    @[JSON::Field(key: "custom_label_1", type: String?, nillable: true, emit_null: false)]
    property custom_label_1 : String?

    # <p><= 1000 characters</p> <p>Custom grouping of products.</p>
    @[JSON::Field(key: "custom_label_2", type: String?, nillable: true, emit_null: false)]
    property custom_label_2 : String?

    # <p><= 1000 characters</p> <p>Custom grouping of products.</p>
    @[JSON::Field(key: "custom_label_3", type: String?, nillable: true, emit_null: false)]
    property custom_label_3 : String?

    # <p><= 1000 characters</p> <p>Custom grouping of products.</p>
    @[JSON::Field(key: "custom_label_4", type: String?, nillable: true, emit_null: false)]
    property custom_label_4 : String?

    # <p><= 10000 characters</p> <p>The description of the product.</p>
    @[JSON::Field(key: "description", type: String?, nillable: true, emit_null: false)]
    property description : String?

    # The item is free to ship.
    @[JSON::Field(key: "free_shipping_label", type: Bool?, nillable: true, emit_null: false)]
    property free_shipping_label : Bool?

    # The minimum order purchase necessary for the customer to get free shipping. Only relevant if free shipping is offered.
    @[JSON::Field(key: "free_shipping_limit", type: String?, nillable: true, emit_null: false)]
    property free_shipping_limit : String?

    # The gender associated with the product. Must be one of the following values (upper or lowercased): ‘male’, ‘female’ , or ‘unisex’.
    @[JSON::Field(key: "gender", type: String?, nillable: true, emit_null: false)]
    property gender : String?

    # The categorization of the product based on the standardized Google Product Taxonomy. This is a set taxonomy. Both the text values and numeric codes are accepted.
    @[JSON::Field(key: "google_product_category", type: String?, nillable: true, emit_null: false)]
    property google_product_category : String?

    # The unique universal product identifier.
    @[JSON::Field(key: "gtin", type: Int32?, nillable: true, emit_null: false)]
    property gtin : Int32?

    # <p><= 127 characters</p> <p>The user-created unique ID that represents the product. Only Unicode characters are accepted.</p>
    @[JSON::Field(key: "id", type: String?, nillable: true, emit_null: false)]
    property id : String?

    # <p><= 127 characters</p> <p>The parent ID of the product.</p>
    @[JSON::Field(key: "item_group_id", type: String?, nillable: true, emit_null: false)]
    property item_group_id : String?

    # The millisecond timestamp when the item was lastly modified by the merchant.
    @[JSON::Field(key: "last_updated_time", type: Int64?, nillable: true, emit_null: false)]
    property last_updated_time : Int64?

    # <p><= 511 characters</p> <p>The landing page for the product.</p>
    @[JSON::Field(key: "link", type: String?, nillable: true, emit_null: false)]
    property link : String?

    # The material used to make the product.
    @[JSON::Field(key: "material", type: String?, nillable: true, emit_null: false)]
    property material : String?

    # The minimum advertised price of the product. It supports the following formats, \"19.99 USD\", \"19.99USD\" and \"19.99\". If the currency is not included, we default to US dollars.
    @[JSON::Field(key: "min_ad_price", type: String?, nillable: true, emit_null: false)]
    property min_ad_price : String?

    # The mobile-optimized version of your landing page. Must begin with http:// or https://.
    @[JSON::Field(key: "mobile_link", type: String?, nillable: true, emit_null: false)]
    property mobile_link : String?

    # Manufacturer Part Number are alpha-numeric codes created by the manufacturer of a product to uniquely identify it among all products from the same manufacturer.
    @[JSON::Field(key: "mpn", type: String?, nillable: true, emit_null: false)]
    property mpn : String?

    # The number of ratings for the item.
    @[JSON::Field(key: "number_of_ratings", type: Int32?, nillable: true, emit_null: false)]
    property number_of_ratings : Int32?

    # The number of reviews available for the item.
    @[JSON::Field(key: "number_of_reviews", type: Int32?, nillable: true, emit_null: false)]
    property number_of_reviews : Int32?

    # The description of the pattern used for the product.
    @[JSON::Field(key: "pattern", type: String?, nillable: true, emit_null: false)]
    property pattern : String?

    # The price of the product. It supports the following formats, \"24.99 USD\", \"24.99USD\" and \"24.99\". If the currency is not included, we default to US dollars.
    @[JSON::Field(key: "price", type: String?, nillable: true, emit_null: false)]
    property price : String?

    # <p><= 1000 characters</p> <p>The categorization of your product based on your custom product taxonomy. Subcategories must be sent separated by “ > “. The > must be wrapped by spaces. We do not recognize any other delimiters such as comma or pipe.</p>
    @[JSON::Field(key: "product_type", type: String?, nillable: true, emit_null: false)]
    property product_type : String?

    # The discounted price of the product. The sale_price must be lower than the price. It supports the following formats, \"14.99 USD\", \"14.99USD\" and \"14.99\". If the currency is not included, we default to US dollars.
    @[JSON::Field(key: "sale_price", type: String?, nillable: true, emit_null: false)]
    property sale_price : String?

    # Shipping consists of one group of up to four elements, country, region, service (all optional) and price (required). All colons, even for blank values, are required.
    @[JSON::Field(key: "shipping", type: String?, nillable: true, emit_null: false)]
    property shipping : String?

    # The height of the package needed to ship the product. Ensure there is a space between the numeric string and the metric.
    @[JSON::Field(key: "shipping_height", type: String?, nillable: true, emit_null: false)]
    property shipping_height : String?

    # The weight of the product. Ensure there is a space between the numeric string and the metric.
    @[JSON::Field(key: "shipping_weight", type: String?, nillable: true, emit_null: false)]
    property shipping_weight : String?

    # The width of the package needed to ship the product. Ensure there is a space between the numeric string and the metric.
    @[JSON::Field(key: "shipping_width", type: String?, nillable: true, emit_null: false)]
    property shipping_width : String?

    # The size of the product.
    @[JSON::Field(key: "size", type: String?, nillable: true, emit_null: false)]
    property size : String?

    # Indicates the country’s sizing system in which you are submitting your product. Must be one of the following values (upper or lowercased): ‘US’, ‘UK’, ‘EU’, ‘DE’ , ‘FR’, ‘JP’, ‘CN’, ‘IT’, ‘ BR’, ‘MEX’, or ‘AU’.
    @[JSON::Field(key: "size_system", type: String?, nillable: true, emit_null: false)]
    property size_system : String?

    # Additional description for the size. Must be one of the following values (upper or lowercased): ‘regular’, ‘petite’ , ‘plus’, ‘big_and_tall’, or ‘maternity’.
    @[JSON::Field(key: "size_type", type: String?, nillable: true, emit_null: false)]
    property size_type : String?

    # Tax consists of one group of up to four elements, country, region, rate (all required) and tax_ship (optional). All colons, even for blank values, are required.
    @[JSON::Field(key: "tax", type: String?, nillable: true, emit_null: false)]
    property tax : String?

    # <p><= 500 characters</p> <p>The name of the product.</p>
    @[JSON::Field(key: "title", type: String?, nillable: true, emit_null: false)]
    property title : String?

    # Options for this variant. People will see these options next to your Pin and can select the one they want. List them in the order you want them displayed.
    @[JSON::Field(key: "variant_names", type: Array(String)?, nillable: true, emit_null: false)]
    property variant_names : Array(String)?

    # Option values for this variant. People will see these options next to your Pin and can select the one they want. List them in the order you want them displayed. The order of the variant values must be consistent with the order of the variant names.
    @[JSON::Field(key: "variant_values", type: Array(String)?, nillable: true, emit_null: false)]
    property variant_values : Array(String)?

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@ad_link : String?, @adult : Bool?, @age_group : String?, @availability : String?, @average_review_rating : Float64?, @brand : String?, @checkout_enabled : Bool?, @color : String?, @condition : String?, @custom_label_0 : String?, @custom_label_1 : String?, @custom_label_2 : String?, @custom_label_3 : String?, @custom_label_4 : String?, @description : String?, @free_shipping_label : Bool?, @free_shipping_limit : String?, @gender : String?, @google_product_category : String?, @gtin : Int32?, @id : String?, @item_group_id : String?, @last_updated_time : Int64?, @link : String?, @material : String?, @min_ad_price : String?, @mobile_link : String?, @mpn : String?, @number_of_ratings : Int32?, @number_of_reviews : Int32?, @pattern : String?, @price : String?, @product_type : String?, @sale_price : String?, @shipping : String?, @shipping_height : String?, @shipping_weight : String?, @shipping_width : String?, @size : String?, @size_system : String?, @size_type : String?, @tax : String?, @title : String?, @variant_names : Array(String)?, @variant_values : Array(String)?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          ad_link == o.ad_link &&
          adult == o.adult &&
          age_group == o.age_group &&
          availability == o.availability &&
          average_review_rating == o.average_review_rating &&
          brand == o.brand &&
          checkout_enabled == o.checkout_enabled &&
          color == o.color &&
          condition == o.condition &&
          custom_label_0 == o.custom_label_0 &&
          custom_label_1 == o.custom_label_1 &&
          custom_label_2 == o.custom_label_2 &&
          custom_label_3 == o.custom_label_3 &&
          custom_label_4 == o.custom_label_4 &&
          description == o.description &&
          free_shipping_label == o.free_shipping_label &&
          free_shipping_limit == o.free_shipping_limit &&
          gender == o.gender &&
          google_product_category == o.google_product_category &&
          gtin == o.gtin &&
          id == o.id &&
          item_group_id == o.item_group_id &&
          last_updated_time == o.last_updated_time &&
          link == o.link &&
          material == o.material &&
          min_ad_price == o.min_ad_price &&
          mobile_link == o.mobile_link &&
          mpn == o.mpn &&
          number_of_ratings == o.number_of_ratings &&
          number_of_reviews == o.number_of_reviews &&
          pattern == o.pattern &&
          price == o.price &&
          product_type == o.product_type &&
          sale_price == o.sale_price &&
          shipping == o.shipping &&
          shipping_height == o.shipping_height &&
          shipping_weight == o.shipping_weight &&
          shipping_width == o.shipping_width &&
          size == o.size &&
          size_system == o.size_system &&
          size_type == o.size_type &&
          tax == o.tax &&
          title == o.title &&
          variant_names == o.variant_names &&
          variant_values == o.variant_values
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [ad_link, adult, age_group, availability, average_review_rating, brand, checkout_enabled, color, condition, custom_label_0, custom_label_1, custom_label_2, custom_label_3, custom_label_4, description, free_shipping_label, free_shipping_limit, gender, google_product_category, gtin, id, item_group_id, last_updated_time, link, material, min_ad_price, mobile_link, mpn, number_of_ratings, number_of_reviews, pattern, price, product_type, sale_price, shipping, shipping_height, shipping_weight, shipping_width, size, size_system, size_type, tax, title, variant_names, variant_values].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
