# #Pinterest REST API
#
##Pinterest's REST API
#
#The version of the OpenAPI document: 5.14.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.9.0
#

require "big"
require "json"
require "time"

module OpenAPIClient
  class ProductGroupPromotion
    include JSON::Serializable

    # Optional properties
    # ID of the product group promotion.
    @[JSON::Field(key: "id", type: String?, nillable: true, emit_null: false)]
    property id : String?

    # ID of the ad group the product group belongs to.
    @[JSON::Field(key: "ad_group_id", type: String?, nillable: true, emit_null: false)]
    property ad_group_id : String?

    # The bid in micro currency.
    @[JSON::Field(key: "bid_in_micro_currency", type: Int32?, nillable: true, emit_null: false)]
    property bid_in_micro_currency : Int32?

    # True if the group is BIDDABLE, false if it should be EXCLUDED from serving ads.
    @[JSON::Field(key: "included", type: Bool?, nillable: true, emit_null: false)]
    property included : Bool?

    # The full product group definition path
    @[JSON::Field(key: "definition", type: String?, nillable: true, emit_null: false)]
    property definition : String?

    # The definition of the product group, relative to its parent - an attribute name/value pair
    @[JSON::Field(key: "relative_definition", type: String?, nillable: true, emit_null: false)]
    property relative_definition : String?

    # The parent Product Group ID of this Product Group
    @[JSON::Field(key: "parent_id", type: String?, nillable: true, emit_null: false)]
    property parent_id : String?

    # Slideshow Collections Title
    @[JSON::Field(key: "slideshow_collections_title", type: String?, nillable: true, emit_null: false)]
    property slideshow_collections_title : String?

    # Slideshow Collections Description
    @[JSON::Field(key: "slideshow_collections_description", type: String?, nillable: true, emit_null: false)]
    property slideshow_collections_description : String?

    # If set to true products promoted in this product group will use the Mobile Deep Link specified in your catalog
    @[JSON::Field(key: "is_mdl", type: Bool?, nillable: true, emit_null: false)]
    property is_mdl : Bool?

    @[JSON::Field(key: "status", type: EntityStatus?, nillable: true, emit_null: false)]
    property status : EntityStatus?

    # Tracking template for proudct group promotions. 4000 limit
    @[JSON::Field(key: "tracking_url", type: String?, nillable: true, emit_null: false)]
    property tracking_url : String?

    # ID of the catalogs product group that this product group promotion references
    @[JSON::Field(key: "catalog_product_group_id", type: String?, nillable: true, emit_null: false)]
    property catalog_product_group_id : String?

    # Catalogs product group name
    @[JSON::Field(key: "catalog_product_group_name", type: String?, nillable: true, emit_null: false)]
    property catalog_product_group_name : String?

    # Hero Pin ID if this PG is promoted as a Collection
    @[JSON::Field(key: "collections_hero_pin_id", type: String?, nillable: true, emit_null: false)]
    property collections_hero_pin_id : String?

    # Collections Hero Destination Url
    @[JSON::Field(key: "collections_hero_destination_url", type: String?, nillable: true, emit_null: false)]
    property collections_hero_destination_url : String?

    @[JSON::Field(key: "grid_click_type", type: GridClickType?, nillable: true, emit_null: false)]
    property grid_click_type : GridClickType?

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@id : String?, @ad_group_id : String?, @bid_in_micro_currency : Int32?, @included : Bool?, @definition : String?, @relative_definition : String?, @parent_id : String?, @slideshow_collections_title : String?, @slideshow_collections_description : String?, @is_mdl : Bool?, @status : EntityStatus?, @tracking_url : String?, @catalog_product_group_id : String?, @catalog_product_group_name : String?, @collections_hero_pin_id : String?, @collections_hero_destination_url : String?, @grid_click_type : GridClickType?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      pattern = Regexp.new(/^\d+$/)
      if !@id.nil? && @id !~ pattern
        invalid_properties.push("invalid value for \"id\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^(AG)?\d+$/)
      if !@ad_group_id.nil? && @ad_group_id !~ pattern
        invalid_properties.push("invalid value for \"ad_group_id\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^\d+$/)
      if !@parent_id.nil? && @parent_id !~ pattern
        invalid_properties.push("invalid value for \"parent_id\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^\d+$/)
      if !@catalog_product_group_id.nil? && @catalog_product_group_id !~ pattern
        invalid_properties.push("invalid value for \"catalog_product_group_id\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^\d+$/)
      if !@collections_hero_pin_id.nil? && @collections_hero_pin_id !~ pattern
        invalid_properties.push("invalid value for \"collections_hero_pin_id\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@id.nil? && @id !~ Regexp.new(/^\d+$/)
      return false if !@ad_group_id.nil? && @ad_group_id !~ Regexp.new(/^(AG)?\d+$/)
      return false if !@parent_id.nil? && @parent_id !~ Regexp.new(/^\d+$/)
      return false if !@catalog_product_group_id.nil? && @catalog_product_group_id !~ Regexp.new(/^\d+$/)
      return false if !@collections_hero_pin_id.nil? && @collections_hero_pin_id !~ Regexp.new(/^\d+$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      pattern = Regexp.new(/^\d+$/)
      if !id.nil? && id !~ pattern
        raise ArgumentError.new("invalid value for \"id\", must conform to the pattern #{pattern}.")
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] ad_group_id Value to be assigned
    def ad_group_id=(ad_group_id)
      pattern = Regexp.new(/^(AG)?\d+$/)
      if !ad_group_id.nil? && ad_group_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_group_id\", must conform to the pattern #{pattern}.")
      end

      @ad_group_id = ad_group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] parent_id Value to be assigned
    def parent_id=(parent_id)
      pattern = Regexp.new(/^\d+$/)
      if !parent_id.nil? && parent_id !~ pattern
        raise ArgumentError.new("invalid value for \"parent_id\", must conform to the pattern #{pattern}.")
      end

      @parent_id = parent_id
    end

    # Custom attribute writer method with validation
    # @param [Object] catalog_product_group_id Value to be assigned
    def catalog_product_group_id=(catalog_product_group_id)
      pattern = Regexp.new(/^\d+$/)
      if !catalog_product_group_id.nil? && catalog_product_group_id !~ pattern
        raise ArgumentError.new("invalid value for \"catalog_product_group_id\", must conform to the pattern #{pattern}.")
      end

      @catalog_product_group_id = catalog_product_group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] collections_hero_pin_id Value to be assigned
    def collections_hero_pin_id=(collections_hero_pin_id)
      pattern = Regexp.new(/^\d+$/)
      if !collections_hero_pin_id.nil? && collections_hero_pin_id !~ pattern
        raise ArgumentError.new("invalid value for \"collections_hero_pin_id\", must conform to the pattern #{pattern}.")
      end

      @collections_hero_pin_id = collections_hero_pin_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          id == o.id &&
          ad_group_id == o.ad_group_id &&
          bid_in_micro_currency == o.bid_in_micro_currency &&
          included == o.included &&
          definition == o.definition &&
          relative_definition == o.relative_definition &&
          parent_id == o.parent_id &&
          slideshow_collections_title == o.slideshow_collections_title &&
          slideshow_collections_description == o.slideshow_collections_description &&
          is_mdl == o.is_mdl &&
          status == o.status &&
          tracking_url == o.tracking_url &&
          catalog_product_group_id == o.catalog_product_group_id &&
          catalog_product_group_name == o.catalog_product_group_name &&
          collections_hero_pin_id == o.collections_hero_pin_id &&
          collections_hero_destination_url == o.collections_hero_destination_url &&
          grid_click_type == o.grid_click_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, ad_group_id, bid_in_micro_currency, included, definition, relative_definition, parent_id, slideshow_collections_title, slideshow_collections_description, is_mdl, status, tracking_url, catalog_product_group_id, catalog_product_group_name, collections_hero_pin_id, collections_hero_destination_url, grid_click_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
