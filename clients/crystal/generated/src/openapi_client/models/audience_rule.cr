# #Pinterest REST API
#
##Pinterest's REST API
#
#The version of the OpenAPI document: 5.14.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.9.0
#

require "big"
require "json"
require "time"

module OpenAPIClient
  # JSON object defining targeted audience users. Example rule formats per audience type:<br>CUSTOMER_LIST: { \"customer_list_id\": \"&lt;customer list ID&gt;\"}<br>ACTALIKE: { \"seed_id\": [\"&lt;audience ID&gt;\"], \"country\": \"US\", \"percentage\": \"10\" }<br>(Valid countries include: \"US\", \"CA\", and \"GB\". Percentage should be 1-10.<br>The targeted audience should be this % size across Pinterest.)<br>VISITOR: { \"visitor_source_id\": [\"&lt;conversion tag ID&gt;\"], \"retention_days\": \"180\", \"event_source\": {\"=\": [\"web\", \"mobile\"]}, \"ingestion_source\": {\"=\": [\"tag\"]}}<br>(Retention days should be 1-540. Retention applies to specific customers.)<br>ENGAGEMENT: {\"engagement_domain\": [\"www.entomi.com\"], \"engager_type\": 1}<br>For more details on engagement audiences, see <a href=\"/docs/redoc/adtech_ads_v4/#section/November-2021\" target=\"_blank\">November 2021 changelog</a>.
  class AudienceRule
    include JSON::Serializable

    # Optional properties
    # Valid countries include: \"US\", \"CA\", and \"GB\".
    @[JSON::Field(key: "country", type: String?, nillable: true, emit_null: false)]
    property country : String?

    # Customer list ID. For CUSTOMER_LIST `audience_type`.
    @[JSON::Field(key: "customer_list_id", type: String?, nillable: true, emit_null: false)]
    property customer_list_id : String?

    # The audience account's verified domain. **Required** for ENGAGEMENT `audience_type`.
    @[JSON::Field(key: "engagement_domain", type: Array(String)?, nillable: true, emit_null: false)]
    property engagement_domain : Array(String)?

    # Engagement type enum. Optional for ENGAGEMENT `audience_type`. Supported values are `click`, `save`, `closeup`, `comment` and `like`. All engagements are included if this field is not set. 
    @[JSON::Field(key: "engagement_type", type: String?, nillable: true, emit_null: false)]
    property engagement_type : String?

    # A Pinterest tag event. Optional for VISITOR `audience_type`. Possible values are `pagevisit`, `signup`, `checkout`, `viewcategory`, `search`, `addtocart`, `watchvideo`, `lead`, and `custom`. This field also accepts a partner-defined Pinterest tag event.
    @[JSON::Field(key: "event", type: String?, nillable: true, emit_null: false)]
    property event : String?

    @[JSON::Field(key: "event_data", type: PinterestTagEventData?, nillable: true, emit_null: false)]
    property event_data : PinterestTagEventData?

    # Percentage should be 1-10. The targeted audience should be this % size across Pinterest.
    @[JSON::Field(key: "percentage", type: Int32?, nillable: true, emit_null: false)]
    property percentage : Int32?

    # IDs of engaged organic pins. Optional for ENGAGEMENT `audience_type`. For example, \"pin_id:\": [\"34567\"]
    @[JSON::Field(key: "pin_id", type: Array(String)?, nillable: true, emit_null: false)]
    property pin_id : Array(String)?

    # Optional for VISITOR `audience_type`. If `true`, the specified rule on existing engagement data is applied to pre-populate the audience. If `false`, the audience is empty at creation time. The default is `true`.
    @[JSON::Field(key: "prefill", type: Bool?, nillable: true, emit_null: false)]
    property prefill : Bool?

    # Number of days a Pinterest user remains in the audience. Optional for ENGAGEMENT and VISITOR `audience_type`. Accepted range is 1-540. Defaults to 180 if not specified.
    @[JSON::Field(key: "retention_days", type: Int32?, nillable: true, emit_null: false)]
    property retention_days : Int32?

    # Audience ID(s). For ACTALIKE `audience_type`. 
    @[JSON::Field(key: "seed_id", type: Array(String)?, nillable: true, emit_null: false)]
    property seed_id : Array(String)?

    # Optional for ENGAGEMENT or VISITOR `audience_type`. For ENGAGEMENT, it is the engaged pin's URL. For VISITOR, you can use it as a string or a {operator: value} object for filtering visitors based on conversion tag event URLs. Supported operators are [ =, !=, contains, not_contains].<br>Example 1:  \"url\": \"http://www.myonlinestore123.com/view_item/shoe\"<br>Example 2: \"url\": {\"contains\": \"/view_item/shoe\"}
    @[JSON::Field(key: "url", type: Array(String)?, nillable: true, emit_null: false)]
    property url : Array(String)?

    # The conversion tag ID, or the Pinterest tag ID, that you use on your website. For VISITOR `audience_type`.
    @[JSON::Field(key: "visitor_source_id", type: String?, nillable: true, emit_null: false)]
    property visitor_source_id : String?

    # Optional for VISITOR. You can use it as a {'=': [value]}. Supported values are: web, mobile, offline
    @[JSON::Field(key: "event_source", type: Object?, nillable: true, emit_null: false)]
    property event_source : Object?

    # Optional for VISITOR. You can use it as a {'=': [value]}. Supported values are: tag, mmp, file_upload, conversions_api
    @[JSON::Field(key: "ingestion_source", type: Object?, nillable: true, emit_null: false)]
    property ingestion_source : Object?

    # Optional for ENGAGEMENT. Engager type value should be 1-2.
    @[JSON::Field(key: "engager_type", type: Int32?, nillable: true, emit_null: false)]
    property engager_type : Int32?

    # Campaign ID for engagement audience filter.
    @[JSON::Field(key: "campaign_id", type: Array(String)?, nillable: true, emit_null: false)]
    property campaign_id : Array(String)?

    # Ad ID for engagement audience filter.
    @[JSON::Field(key: "ad_id", type: Array(String)?, nillable: true, emit_null: false)]
    property ad_id : Array(String)?

    # Objective for engagement audience filter.
    @[JSON::Field(key: "objective_type", type: Array(ObjectiveType)?, nillable: true, emit_null: false)]
    property objective_type : Array(ObjectiveType)?

    # Ad account ID.
    @[JSON::Field(key: "ad_account_id", type: String?, nillable: true, emit_null: false)]
    property ad_account_id : String?

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@country : String?, @customer_list_id : String?, @engagement_domain : Array(String)?, @engagement_type : String?, @event : String?, @event_data : PinterestTagEventData?, @percentage : Int32?, @pin_id : Array(String)?, @prefill : Bool?, @retention_days : Int32?, @seed_id : Array(String)?, @url : Array(String)?, @visitor_source_id : String?, @event_source : Object?, @ingestion_source : Object?, @engager_type : Int32?, @campaign_id : Array(String)?, @ad_id : Array(String)?, @objective_type : Array(ObjectiveType)?, @ad_account_id : String?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      pattern = Regexp.new(/^\d+$/)
      if !@customer_list_id.nil? && @customer_list_id !~ pattern
        invalid_properties.push("invalid value for \"customer_list_id\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^\d+$/)
      if !@visitor_source_id.nil? && @visitor_source_id !~ pattern
        invalid_properties.push("invalid value for \"visitor_source_id\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^\d+$/)
      if !@ad_account_id.nil? && @ad_account_id !~ pattern
        invalid_properties.push("invalid value for \"ad_account_id\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@customer_list_id.nil? && @customer_list_id !~ Regexp.new(/^\d+$/)
      return false if !@visitor_source_id.nil? && @visitor_source_id !~ Regexp.new(/^\d+$/)
      return false if !@ad_account_id.nil? && @ad_account_id !~ Regexp.new(/^\d+$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_list_id Value to be assigned
    def customer_list_id=(customer_list_id)
      pattern = Regexp.new(/^\d+$/)
      if !customer_list_id.nil? && customer_list_id !~ pattern
        raise ArgumentError.new("invalid value for \"customer_list_id\", must conform to the pattern #{pattern}.")
      end

      @customer_list_id = customer_list_id
    end

    # Custom attribute writer method with validation
    # @param [Object] visitor_source_id Value to be assigned
    def visitor_source_id=(visitor_source_id)
      pattern = Regexp.new(/^\d+$/)
      if !visitor_source_id.nil? && visitor_source_id !~ pattern
        raise ArgumentError.new("invalid value for \"visitor_source_id\", must conform to the pattern #{pattern}.")
      end

      @visitor_source_id = visitor_source_id
    end

    # Custom attribute writer method with validation
    # @param [Object] ad_account_id Value to be assigned
    def ad_account_id=(ad_account_id)
      pattern = Regexp.new(/^\d+$/)
      if !ad_account_id.nil? && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\", must conform to the pattern #{pattern}.")
      end

      @ad_account_id = ad_account_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          country == o.country &&
          customer_list_id == o.customer_list_id &&
          engagement_domain == o.engagement_domain &&
          engagement_type == o.engagement_type &&
          event == o.event &&
          event_data == o.event_data &&
          percentage == o.percentage &&
          pin_id == o.pin_id &&
          prefill == o.prefill &&
          retention_days == o.retention_days &&
          seed_id == o.seed_id &&
          url == o.url &&
          visitor_source_id == o.visitor_source_id &&
          event_source == o.event_source &&
          ingestion_source == o.ingestion_source &&
          engager_type == o.engager_type &&
          campaign_id == o.campaign_id &&
          ad_id == o.ad_id &&
          objective_type == o.objective_type &&
          ad_account_id == o.ad_account_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [country, customer_list_id, engagement_domain, engagement_type, event, event_data, percentage, pin_id, prefill, retention_days, seed_id, url, visitor_source_id, event_source, ingestion_source, engager_type, campaign_id, ad_id, objective_type, ad_account_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
