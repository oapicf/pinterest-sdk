# #Pinterest REST API
#
##Pinterest's REST API
#
#The version of the OpenAPI document: 5.14.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.9.0
#

require "big"
require "json"
require "time"

module OpenAPIClient
  class AdsAnalyticsCreateAsyncRequest
    include JSON::Serializable

    # Required properties
    # Metric report start date (UTC). Format: YYYY-MM-DD
    @[JSON::Field(key: "start_date", type: String, nillable: false, emit_null: false)]
    property start_date : String

    # Metric report end date (UTC). Format: YYYY-MM-DD
    @[JSON::Field(key: "end_date", type: String, nillable: false, emit_null: false)]
    property end_date : String

    # TOTAL - metrics are aggregated over the specified date range.<br> DAY - metrics are broken down daily.<br> HOUR - metrics are broken down hourly.<br>WEEKLY - metrics are broken down weekly.<br>MONTHLY - metrics are broken down monthly
    @[JSON::Field(key: "granularity", type: Granularity, nillable: false, emit_null: false)]
    property granularity : Granularity

    # Metric and entity columns. Pin promotion and ad related columns are not supported for the Product Item level reports.
    @[JSON::Field(key: "columns", type: Array(ReportingColumnAsync), nillable: false, emit_null: false)]
    property columns : Array(ReportingColumnAsync)

    # Level of the report
    @[JSON::Field(key: "level", type: MetricsReportingLevel, nillable: false, emit_null: false)]
    property level : MetricsReportingLevel

    # Optional properties
    # Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
    @[JSON::Field(key: "click_window_days", type: ConversionAttributionWindowDays?, default: 30, nillable: true, emit_null: false)]
    property click_window_days : ConversionAttributionWindowDays?

    # Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
    @[JSON::Field(key: "engagement_window_days", type: ConversionAttributionWindowDays?, default: 30, nillable: true, emit_null: false)]
    property engagement_window_days : ConversionAttributionWindowDays?

    # Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `1` day.
    @[JSON::Field(key: "view_window_days", type: ConversionAttributionWindowDays?, default: 1, nillable: true, emit_null: false)]
    property view_window_days : ConversionAttributionWindowDays?

    # The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
    @[JSON::Field(key: "conversion_report_time", type: ConversionReportTimeType?, default: "TIME_OF_AD_ACTION", nillable: true, emit_null: false)]
    property conversion_report_time : ConversionReportTimeType?

    # List of types of attribution for the conversion report
    @[JSON::Field(key: "attribution_types", type: Array(ConversionReportAttributionType)?, nillable: true, emit_null: false)]
    property attribution_types : Array(ConversionReportAttributionType)?

    # List of campaign ids
    @[JSON::Field(key: "campaign_ids", type: Array(String)?, nillable: true, emit_null: false)]
    property campaign_ids : Array(String)?

    # List of status values for filtering
    @[JSON::Field(key: "campaign_statuses", type: Array(CampaignSummaryStatus)?, nillable: true, emit_null: false)]
    property campaign_statuses : Array(CampaignSummaryStatus)?

    # List of values for filtering. [\"WEB_SESSIONS\"] in BETA.
    @[JSON::Field(key: "campaign_objective_types", type: Array(ObjectiveType)?, nillable: true, emit_null: false)]
    property campaign_objective_types : Array(ObjectiveType)?

    # List of ad group ids
    @[JSON::Field(key: "ad_group_ids", type: Array(String)?, nillable: true, emit_null: false)]
    property ad_group_ids : Array(String)?

    # List of values for filtering
    @[JSON::Field(key: "ad_group_statuses", type: Array(AdGroupSummaryStatus)?, nillable: true, emit_null: false)]
    property ad_group_statuses : Array(AdGroupSummaryStatus)?

    # List of ad ids [This parameter is no supported for Product Item Level Reports]
    @[JSON::Field(key: "ad_ids", type: Array(String)?, nillable: true, emit_null: false)]
    property ad_ids : Array(String)?

    # List of values for filtering [This parameter is not supported for Product Item Level Reports]
    @[JSON::Field(key: "ad_statuses", type: Array(PinPromotionSummaryStatus)?, nillable: true, emit_null: false)]
    property ad_statuses : Array(PinPromotionSummaryStatus)?

    # List of product group ids
    @[JSON::Field(key: "product_group_ids", type: Array(String)?, nillable: true, emit_null: false)]
    property product_group_ids : Array(String)?

    # List of values for filtering
    @[JSON::Field(key: "product_group_statuses", type: Array(ProductGroupSummaryStatus)?, nillable: true, emit_null: false)]
    property product_group_statuses : Array(ProductGroupSummaryStatus)?

    # List of product item ids
    @[JSON::Field(key: "product_item_ids", type: Array(String)?, nillable: true, emit_null: false)]
    property product_item_ids : Array(String)?

    # List of targeting types. Requires `level` to be a value ending in `_TARGETING`. [\"AGE_BUCKET_AND_GENDER\"] is in BETA and not yet available to all users.
    @[JSON::Field(key: "targeting_types", type: Array(AdsAnalyticsTargetingType)?, nillable: true, emit_null: false)]
    property targeting_types : Array(AdsAnalyticsTargetingType)?

    # List of metrics filters
    @[JSON::Field(key: "metrics_filters", type: Array(AdsAnalyticsMetricsFilter)?, nillable: true, emit_null: false)]
    property metrics_filters : Array(AdsAnalyticsMetricsFilter)?

    # Specification for formatting the report data. Reports in JSON will not zero-fill metrics, whereas reports in CSV will. Both report formats will omit rows where all the columns are equal to 0.
    @[JSON::Field(key: "report_format", type: DataOutputFormat?, default: "JSON", nillable: true, emit_null: false)]
    property report_format : DataOutputFormat?

    # Whether to first sort the report by date or by entity ID of the reporting entity level. Date will be used as the first level key for JSON reports that use BY_DATE. BY_DATE is recommended for large requests.
    @[JSON::Field(key: "primary_sort", type: String?, nillable: true, emit_null: false)]
    property primary_sort : String?

    # Which hour of the start date to begin the report. The entire day will be included if no start hour is provided. Only allowed for hourly reports.
    @[JSON::Field(key: "start_hour", type: Int32?, nillable: true, emit_null: false)]
    property start_hour : Int32?

    # Which hour of the end date to stop the report (inclusive). For example, with an end_date of '2020-01-01' and end_hour of '15', the report will contain metrics up to '2020-01-01 14:59:59'. The entire day will be included if no end hour is provided. Only allowed for hourly reports.
    @[JSON::Field(key: "end_hour", type: Int32?, nillable: true, emit_null: false)]
    property end_hour : Int32?

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@start_date : String, @end_date : String, @granularity : Granularity, @columns : Array(ReportingColumnAsync), @level : MetricsReportingLevel, @click_window_days : ConversionAttributionWindowDays?, @engagement_window_days : ConversionAttributionWindowDays?, @view_window_days : ConversionAttributionWindowDays?, @conversion_report_time : ConversionReportTimeType?, @attribution_types : Array(ConversionReportAttributionType)?, @campaign_ids : Array(String)?, @campaign_statuses : Array(CampaignSummaryStatus)?, @campaign_objective_types : Array(ObjectiveType)?, @ad_group_ids : Array(String)?, @ad_group_statuses : Array(AdGroupSummaryStatus)?, @ad_ids : Array(String)?, @ad_statuses : Array(PinPromotionSummaryStatus)?, @product_group_ids : Array(String)?, @product_group_statuses : Array(ProductGroupSummaryStatus)?, @product_item_ids : Array(String)?, @targeting_types : Array(AdsAnalyticsTargetingType)?, @metrics_filters : Array(AdsAnalyticsMetricsFilter)?, @report_format : DataOutputFormat?, @primary_sort : String?, @start_hour : Int32?, @end_hour : Int32?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      pattern = Regexp.new(/^(\d{4})-(\d{2})-(\d{2})$/)
      if @start_date !~ pattern
        invalid_properties.push("invalid value for \"start_date\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^(\d{4})-(\d{2})-(\d{2})$/)
      if @end_date !~ pattern
        invalid_properties.push("invalid value for \"end_date\", must conform to the pattern #{pattern}.")
      end

      if !@campaign_ids.nil? && @campaign_ids.size > 500
        invalid_properties.push("invalid value for \"campaign_ids\", number of items must be less than or equal to 500."
      end

      if !@campaign_ids.nil? && @campaign_ids.size < 1
        invalid_properties.push("invalid value for \"campaign_ids\", number of items must be greater than or equal to 1."
      end

      if !@campaign_statuses.nil? && @campaign_statuses.size > 6
        invalid_properties.push("invalid value for \"campaign_statuses\", number of items must be less than or equal to 6."
      end

      if !@campaign_statuses.nil? && @campaign_statuses.size < 1
        invalid_properties.push("invalid value for \"campaign_statuses\", number of items must be greater than or equal to 1."
      end

      if !@campaign_objective_types.nil? && @campaign_objective_types.size > 7
        invalid_properties.push("invalid value for \"campaign_objective_types\", number of items must be less than or equal to 7."
      end

      if !@campaign_objective_types.nil? && @campaign_objective_types.size < 1
        invalid_properties.push("invalid value for \"campaign_objective_types\", number of items must be greater than or equal to 1."
      end

      if !@ad_group_ids.nil? && @ad_group_ids.size > 500
        invalid_properties.push("invalid value for \"ad_group_ids\", number of items must be less than or equal to 500."
      end

      if !@ad_group_ids.nil? && @ad_group_ids.size < 1
        invalid_properties.push("invalid value for \"ad_group_ids\", number of items must be greater than or equal to 1."
      end

      if !@ad_group_statuses.nil? && @ad_group_statuses.size > 6
        invalid_properties.push("invalid value for \"ad_group_statuses\", number of items must be less than or equal to 6."
      end

      if !@ad_group_statuses.nil? && @ad_group_statuses.size < 1
        invalid_properties.push("invalid value for \"ad_group_statuses\", number of items must be greater than or equal to 1."
      end

      if !@ad_ids.nil? && @ad_ids.size > 500
        invalid_properties.push("invalid value for \"ad_ids\", number of items must be less than or equal to 500."
      end

      if !@ad_ids.nil? && @ad_ids.size < 1
        invalid_properties.push("invalid value for \"ad_ids\", number of items must be greater than or equal to 1."
      end

      if !@ad_statuses.nil? && @ad_statuses.size > 6
        invalid_properties.push("invalid value for \"ad_statuses\", number of items must be less than or equal to 6."
      end

      if !@ad_statuses.nil? && @ad_statuses.size < 1
        invalid_properties.push("invalid value for \"ad_statuses\", number of items must be greater than or equal to 1."
      end

      if !@product_group_ids.nil? && @product_group_ids.size > 500
        invalid_properties.push("invalid value for \"product_group_ids\", number of items must be less than or equal to 500."
      end

      if !@product_group_ids.nil? && @product_group_ids.size < 1
        invalid_properties.push("invalid value for \"product_group_ids\", number of items must be greater than or equal to 1."
      end

      if !@product_group_statuses.nil? && @product_group_statuses.size > 6
        invalid_properties.push("invalid value for \"product_group_statuses\", number of items must be less than or equal to 6."
      end

      if !@product_group_statuses.nil? && @product_group_statuses.size < 1
        invalid_properties.push("invalid value for \"product_group_statuses\", number of items must be greater than or equal to 1."
      end

      if !@product_item_ids.nil? && @product_item_ids.size > 500
        invalid_properties.push("invalid value for \"product_item_ids\", number of items must be less than or equal to 500."
      end

      if !@product_item_ids.nil? && @product_item_ids.size < 1
        invalid_properties.push("invalid value for \"product_item_ids\", number of items must be greater than or equal to 1."
      end

      if !@targeting_types.nil? && @targeting_types.size > 5
        invalid_properties.push("invalid value for \"targeting_types\", number of items must be less than or equal to 5."
      end

      if !@targeting_types.nil? && @targeting_types.size < 1
        invalid_properties.push("invalid value for \"targeting_types\", number of items must be greater than or equal to 1."
      end

      if !@metrics_filters.nil? && @metrics_filters.size < 1
        invalid_properties.push("invalid value for \"metrics_filters\", number of items must be greater than or equal to 1."
      end

      if !@start_hour.nil? && @start_hour > 23
        invalid_properties.push("invalid value for \"start_hour\", must be smaller than or equal to 23.")
      end

      if !@start_hour.nil? && @start_hour < 0
        invalid_properties.push("invalid value for \"start_hour\", must be greater than or equal to 0.")
      end

      if !@end_hour.nil? && @end_hour > 23
        invalid_properties.push("invalid value for \"end_hour\", must be smaller than or equal to 23.")
      end

      if !@end_hour.nil? && @end_hour < 0
        invalid_properties.push("invalid value for \"end_hour\", must be greater than or equal to 0.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @start_date !~ Regexp.new(/^(\d{4})-(\d{2})-(\d{2})$/)
      return false if @end_date !~ Regexp.new(/^(\d{4})-(\d{2})-(\d{2})$/)
      return false if !@campaign_ids.nil? && @campaign_ids.size > 500
      return false if !@campaign_ids.nil? && @campaign_ids.size < 1
      return false if !@campaign_statuses.nil? && @campaign_statuses.size > 6
      return false if !@campaign_statuses.nil? && @campaign_statuses.size < 1
      return false if !@campaign_objective_types.nil? && @campaign_objective_types.size > 7
      return false if !@campaign_objective_types.nil? && @campaign_objective_types.size < 1
      return false if !@ad_group_ids.nil? && @ad_group_ids.size > 500
      return false if !@ad_group_ids.nil? && @ad_group_ids.size < 1
      return false if !@ad_group_statuses.nil? && @ad_group_statuses.size > 6
      return false if !@ad_group_statuses.nil? && @ad_group_statuses.size < 1
      return false if !@ad_ids.nil? && @ad_ids.size > 500
      return false if !@ad_ids.nil? && @ad_ids.size < 1
      return false if !@ad_statuses.nil? && @ad_statuses.size > 6
      return false if !@ad_statuses.nil? && @ad_statuses.size < 1
      return false if !@product_group_ids.nil? && @product_group_ids.size > 500
      return false if !@product_group_ids.nil? && @product_group_ids.size < 1
      return false if !@product_group_statuses.nil? && @product_group_statuses.size > 6
      return false if !@product_group_statuses.nil? && @product_group_statuses.size < 1
      return false if !@product_item_ids.nil? && @product_item_ids.size > 500
      return false if !@product_item_ids.nil? && @product_item_ids.size < 1
      return false if !@targeting_types.nil? && @targeting_types.size > 5
      return false if !@targeting_types.nil? && @targeting_types.size < 1
      return false if !@metrics_filters.nil? && @metrics_filters.size < 1
      primary_sort_validator = EnumAttributeValidator.new("String", ["BY_ID", "BY_DATE"])
      return false unless primary_sort_validator.valid?(@primary_sort)
      return false if !@start_hour.nil? && @start_hour > 23
      return false if !@start_hour.nil? && @start_hour < 0
      return false if !@end_hour.nil? && @end_hour > 23
      return false if !@end_hour.nil? && @end_hour < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] start_date Value to be assigned
    def start_date=(start_date)
      pattern = Regexp.new(/^(\d{4})-(\d{2})-(\d{2})$/)
      if start_date !~ pattern
        raise ArgumentError.new("invalid value for \"start_date\", must conform to the pattern #{pattern}.")
      end

      @start_date = start_date
    end

    # Custom attribute writer method with validation
    # @param [Object] end_date Value to be assigned
    def end_date=(end_date)
      pattern = Regexp.new(/^(\d{4})-(\d{2})-(\d{2})$/)
      if end_date !~ pattern
        raise ArgumentError.new("invalid value for \"end_date\", must conform to the pattern #{pattern}.")
      end

      @end_date = end_date
    end

    # Custom attribute writer method with validation
    # @param [Object] campaign_ids Value to be assigned
    def campaign_ids=(campaign_ids)
      if !campaign_ids.nil? && campaign_ids.size > 500
        raise ArgumentError.new("invalid value for \"campaign_ids\", number of items must be less than or equal to 500.")
      end

      if !campaign_ids.nil? && campaign_ids.size < 1
        raise ArgumentError.new("invalid value for \"campaign_ids\", number of items must be greater than or equal to 1.")
      end

      @campaign_ids = campaign_ids
    end

    # Custom attribute writer method with validation
    # @param [Object] campaign_statuses Value to be assigned
    def campaign_statuses=(campaign_statuses)
      if !campaign_statuses.nil? && campaign_statuses.size > 6
        raise ArgumentError.new("invalid value for \"campaign_statuses\", number of items must be less than or equal to 6.")
      end

      if !campaign_statuses.nil? && campaign_statuses.size < 1
        raise ArgumentError.new("invalid value for \"campaign_statuses\", number of items must be greater than or equal to 1.")
      end

      @campaign_statuses = campaign_statuses
    end

    # Custom attribute writer method with validation
    # @param [Object] campaign_objective_types Value to be assigned
    def campaign_objective_types=(campaign_objective_types)
      if !campaign_objective_types.nil? && campaign_objective_types.size > 7
        raise ArgumentError.new("invalid value for \"campaign_objective_types\", number of items must be less than or equal to 7.")
      end

      if !campaign_objective_types.nil? && campaign_objective_types.size < 1
        raise ArgumentError.new("invalid value for \"campaign_objective_types\", number of items must be greater than or equal to 1.")
      end

      @campaign_objective_types = campaign_objective_types
    end

    # Custom attribute writer method with validation
    # @param [Object] ad_group_ids Value to be assigned
    def ad_group_ids=(ad_group_ids)
      if !ad_group_ids.nil? && ad_group_ids.size > 500
        raise ArgumentError.new("invalid value for \"ad_group_ids\", number of items must be less than or equal to 500.")
      end

      if !ad_group_ids.nil? && ad_group_ids.size < 1
        raise ArgumentError.new("invalid value for \"ad_group_ids\", number of items must be greater than or equal to 1.")
      end

      @ad_group_ids = ad_group_ids
    end

    # Custom attribute writer method with validation
    # @param [Object] ad_group_statuses Value to be assigned
    def ad_group_statuses=(ad_group_statuses)
      if !ad_group_statuses.nil? && ad_group_statuses.size > 6
        raise ArgumentError.new("invalid value for \"ad_group_statuses\", number of items must be less than or equal to 6.")
      end

      if !ad_group_statuses.nil? && ad_group_statuses.size < 1
        raise ArgumentError.new("invalid value for \"ad_group_statuses\", number of items must be greater than or equal to 1.")
      end

      @ad_group_statuses = ad_group_statuses
    end

    # Custom attribute writer method with validation
    # @param [Object] ad_ids Value to be assigned
    def ad_ids=(ad_ids)
      if !ad_ids.nil? && ad_ids.size > 500
        raise ArgumentError.new("invalid value for \"ad_ids\", number of items must be less than or equal to 500.")
      end

      if !ad_ids.nil? && ad_ids.size < 1
        raise ArgumentError.new("invalid value for \"ad_ids\", number of items must be greater than or equal to 1.")
      end

      @ad_ids = ad_ids
    end

    # Custom attribute writer method with validation
    # @param [Object] ad_statuses Value to be assigned
    def ad_statuses=(ad_statuses)
      if !ad_statuses.nil? && ad_statuses.size > 6
        raise ArgumentError.new("invalid value for \"ad_statuses\", number of items must be less than or equal to 6.")
      end

      if !ad_statuses.nil? && ad_statuses.size < 1
        raise ArgumentError.new("invalid value for \"ad_statuses\", number of items must be greater than or equal to 1.")
      end

      @ad_statuses = ad_statuses
    end

    # Custom attribute writer method with validation
    # @param [Object] product_group_ids Value to be assigned
    def product_group_ids=(product_group_ids)
      if !product_group_ids.nil? && product_group_ids.size > 500
        raise ArgumentError.new("invalid value for \"product_group_ids\", number of items must be less than or equal to 500.")
      end

      if !product_group_ids.nil? && product_group_ids.size < 1
        raise ArgumentError.new("invalid value for \"product_group_ids\", number of items must be greater than or equal to 1.")
      end

      @product_group_ids = product_group_ids
    end

    # Custom attribute writer method with validation
    # @param [Object] product_group_statuses Value to be assigned
    def product_group_statuses=(product_group_statuses)
      if !product_group_statuses.nil? && product_group_statuses.size > 6
        raise ArgumentError.new("invalid value for \"product_group_statuses\", number of items must be less than or equal to 6.")
      end

      if !product_group_statuses.nil? && product_group_statuses.size < 1
        raise ArgumentError.new("invalid value for \"product_group_statuses\", number of items must be greater than or equal to 1.")
      end

      @product_group_statuses = product_group_statuses
    end

    # Custom attribute writer method with validation
    # @param [Object] product_item_ids Value to be assigned
    def product_item_ids=(product_item_ids)
      if !product_item_ids.nil? && product_item_ids.size > 500
        raise ArgumentError.new("invalid value for \"product_item_ids\", number of items must be less than or equal to 500.")
      end

      if !product_item_ids.nil? && product_item_ids.size < 1
        raise ArgumentError.new("invalid value for \"product_item_ids\", number of items must be greater than or equal to 1.")
      end

      @product_item_ids = product_item_ids
    end

    # Custom attribute writer method with validation
    # @param [Object] targeting_types Value to be assigned
    def targeting_types=(targeting_types)
      if !targeting_types.nil? && targeting_types.size > 5
        raise ArgumentError.new("invalid value for \"targeting_types\", number of items must be less than or equal to 5.")
      end

      if !targeting_types.nil? && targeting_types.size < 1
        raise ArgumentError.new("invalid value for \"targeting_types\", number of items must be greater than or equal to 1.")
      end

      @targeting_types = targeting_types
    end

    # Custom attribute writer method with validation
    # @param [Object] metrics_filters Value to be assigned
    def metrics_filters=(metrics_filters)
      if !metrics_filters.nil? && metrics_filters.size < 1
        raise ArgumentError.new("invalid value for \"metrics_filters\", number of items must be greater than or equal to 1.")
      end

      @metrics_filters = metrics_filters
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] primary_sort Object to be assigned
    def primary_sort=(primary_sort)
      validator = EnumAttributeValidator.new("String", ["BY_ID", "BY_DATE"])
      unless validator.valid?(primary_sort)
        raise ArgumentError.new("invalid value for \"primary_sort\", must be one of #{validator.allowable_values}.")
      end
      @primary_sort = primary_sort
    end

    # Custom attribute writer method with validation
    # @param [Object] start_hour Value to be assigned
    def start_hour=(start_hour)
      if !start_hour.nil? && start_hour > 23
        raise ArgumentError.new("invalid value for \"start_hour\", must be smaller than or equal to 23.")
      end

      if !start_hour.nil? && start_hour < 0
        raise ArgumentError.new("invalid value for \"start_hour\", must be greater than or equal to 0.")
      end

      @start_hour = start_hour
    end

    # Custom attribute writer method with validation
    # @param [Object] end_hour Value to be assigned
    def end_hour=(end_hour)
      if !end_hour.nil? && end_hour > 23
        raise ArgumentError.new("invalid value for \"end_hour\", must be smaller than or equal to 23.")
      end

      if !end_hour.nil? && end_hour < 0
        raise ArgumentError.new("invalid value for \"end_hour\", must be greater than or equal to 0.")
      end

      @end_hour = end_hour
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          start_date == o.start_date &&
          end_date == o.end_date &&
          granularity == o.granularity &&
          click_window_days == o.click_window_days &&
          engagement_window_days == o.engagement_window_days &&
          view_window_days == o.view_window_days &&
          conversion_report_time == o.conversion_report_time &&
          attribution_types == o.attribution_types &&
          campaign_ids == o.campaign_ids &&
          campaign_statuses == o.campaign_statuses &&
          campaign_objective_types == o.campaign_objective_types &&
          ad_group_ids == o.ad_group_ids &&
          ad_group_statuses == o.ad_group_statuses &&
          ad_ids == o.ad_ids &&
          ad_statuses == o.ad_statuses &&
          product_group_ids == o.product_group_ids &&
          product_group_statuses == o.product_group_statuses &&
          product_item_ids == o.product_item_ids &&
          targeting_types == o.targeting_types &&
          metrics_filters == o.metrics_filters &&
          columns == o.columns &&
          level == o.level &&
          report_format == o.report_format &&
          primary_sort == o.primary_sort &&
          start_hour == o.start_hour &&
          end_hour == o.end_hour
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [start_date, end_date, granularity, click_window_days, engagement_window_days, view_window_days, conversion_report_time, attribution_types, campaign_ids, campaign_statuses, campaign_objective_types, ad_group_ids, ad_group_statuses, ad_ids, ad_statuses, product_group_ids, product_group_statuses, product_item_ids, targeting_types, metrics_filters, columns, level, report_format, primary_sort, start_hour, end_hour].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
