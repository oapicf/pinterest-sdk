# #Pinterest REST API
#
##Pinterest's REST API
#
#The version of the OpenAPI document: 5.14.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.9.0
#

require "big"
require "json"
require "time"

module OpenAPIClient
  class CatalogsItemValidationErrors
    include JSON::Serializable

    # Optional properties
    @[JSON::Field(key: "ADULT_INVALID", type: CatalogsItemValidationDetails?, nillable: true, emit_null: false)]
    property adult_invalid : CatalogsItemValidationDetails?

    @[JSON::Field(key: "ADWORDS_FORMAT_INVALID", type: CatalogsItemValidationDetails?, nillable: true, emit_null: false)]
    property adwords_format_invalid : CatalogsItemValidationDetails?

    @[JSON::Field(key: "AVAILABILITY_INVALID", type: CatalogsItemValidationDetails?, nillable: true, emit_null: false)]
    property availability_invalid : CatalogsItemValidationDetails?

    @[JSON::Field(key: "BLOCKLISTED_IMAGE_SIGNATURE", type: CatalogsItemValidationDetails?, nillable: true, emit_null: false)]
    property blocklisted_image_signature : CatalogsItemValidationDetails?

    @[JSON::Field(key: "DESCRIPTION_MISSING", type: CatalogsItemValidationDetails?, nillable: true, emit_null: false)]
    property description_missing : CatalogsItemValidationDetails?

    @[JSON::Field(key: "DUPLICATE_PRODUCTS", type: CatalogsItemValidationDetails?, nillable: true, emit_null: false)]
    property duplicate_products : CatalogsItemValidationDetails?

    @[JSON::Field(key: "IMAGE_LINK_INVALID", type: CatalogsItemValidationDetails?, nillable: true, emit_null: false)]
    property image_link_invalid : CatalogsItemValidationDetails?

    @[JSON::Field(key: "IMAGE_LINK_LENGTH_TOO_LONG", type: CatalogsItemValidationDetails?, nillable: true, emit_null: false)]
    property image_link_length_too_long : CatalogsItemValidationDetails?

    @[JSON::Field(key: "IMAGE_LINK_MISSING", type: CatalogsItemValidationDetails?, nillable: true, emit_null: false)]
    property image_link_missing : CatalogsItemValidationDetails?

    @[JSON::Field(key: "INVALID_DOMAIN", type: CatalogsItemValidationDetails?, nillable: true, emit_null: false)]
    property invalid_domain : CatalogsItemValidationDetails?

    @[JSON::Field(key: "ITEMID_MISSING", type: CatalogsItemValidationDetails?, nillable: true, emit_null: false)]
    property itemid_missing : CatalogsItemValidationDetails?

    @[JSON::Field(key: "ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE", type: CatalogsItemValidationDetails?, nillable: true, emit_null: false)]
    property item_main_image_download_failure : CatalogsItemValidationDetails?

    @[JSON::Field(key: "LINK_FORMAT_INVALID", type: CatalogsItemValidationDetails?, nillable: true, emit_null: false)]
    property link_format_invalid : CatalogsItemValidationDetails?

    @[JSON::Field(key: "LINK_LENGTH_TOO_LONG", type: CatalogsItemValidationDetails?, nillable: true, emit_null: false)]
    property link_length_too_long : CatalogsItemValidationDetails?

    @[JSON::Field(key: "LIST_PRICE_INVALID", type: CatalogsItemValidationDetails?, nillable: true, emit_null: false)]
    property list_price_invalid : CatalogsItemValidationDetails?

    @[JSON::Field(key: "MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED", type: CatalogsItemValidationDetails?, nillable: true, emit_null: false)]
    property max_items_per_item_group_exceeded : CatalogsItemValidationDetails?

    @[JSON::Field(key: "PARSE_LINE_ERROR", type: CatalogsItemValidationDetails?, nillable: true, emit_null: false)]
    property parse_line_error : CatalogsItemValidationDetails?

    @[JSON::Field(key: "PINJOIN_CONTENT_UNSAFE", type: CatalogsItemValidationDetails?, nillable: true, emit_null: false)]
    property pinjoin_content_unsafe : CatalogsItemValidationDetails?

    @[JSON::Field(key: "PRICE_CANNOT_BE_DETERMINED", type: CatalogsItemValidationDetails?, nillable: true, emit_null: false)]
    property price_cannot_be_determined : CatalogsItemValidationDetails?

    @[JSON::Field(key: "PRICE_MISSING", type: CatalogsItemValidationDetails?, nillable: true, emit_null: false)]
    property price_missing : CatalogsItemValidationDetails?

    @[JSON::Field(key: "PRODUCT_LINK_MISSING", type: CatalogsItemValidationDetails?, nillable: true, emit_null: false)]
    property product_link_missing : CatalogsItemValidationDetails?

    @[JSON::Field(key: "PRODUCT_PRICE_INVALID", type: CatalogsItemValidationDetails?, nillable: true, emit_null: false)]
    property product_price_invalid : CatalogsItemValidationDetails?

    @[JSON::Field(key: "TITLE_MISSING", type: CatalogsItemValidationDetails?, nillable: true, emit_null: false)]
    property title_missing : CatalogsItemValidationDetails?

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@adult_invalid : CatalogsItemValidationDetails?, @adwords_format_invalid : CatalogsItemValidationDetails?, @availability_invalid : CatalogsItemValidationDetails?, @blocklisted_image_signature : CatalogsItemValidationDetails?, @description_missing : CatalogsItemValidationDetails?, @duplicate_products : CatalogsItemValidationDetails?, @image_link_invalid : CatalogsItemValidationDetails?, @image_link_length_too_long : CatalogsItemValidationDetails?, @image_link_missing : CatalogsItemValidationDetails?, @invalid_domain : CatalogsItemValidationDetails?, @itemid_missing : CatalogsItemValidationDetails?, @item_main_image_download_failure : CatalogsItemValidationDetails?, @link_format_invalid : CatalogsItemValidationDetails?, @link_length_too_long : CatalogsItemValidationDetails?, @list_price_invalid : CatalogsItemValidationDetails?, @max_items_per_item_group_exceeded : CatalogsItemValidationDetails?, @parse_line_error : CatalogsItemValidationDetails?, @pinjoin_content_unsafe : CatalogsItemValidationDetails?, @price_cannot_be_determined : CatalogsItemValidationDetails?, @price_missing : CatalogsItemValidationDetails?, @product_link_missing : CatalogsItemValidationDetails?, @product_price_invalid : CatalogsItemValidationDetails?, @title_missing : CatalogsItemValidationDetails?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          adult_invalid == o.adult_invalid &&
          adwords_format_invalid == o.adwords_format_invalid &&
          availability_invalid == o.availability_invalid &&
          blocklisted_image_signature == o.blocklisted_image_signature &&
          description_missing == o.description_missing &&
          duplicate_products == o.duplicate_products &&
          image_link_invalid == o.image_link_invalid &&
          image_link_length_too_long == o.image_link_length_too_long &&
          image_link_missing == o.image_link_missing &&
          invalid_domain == o.invalid_domain &&
          itemid_missing == o.itemid_missing &&
          item_main_image_download_failure == o.item_main_image_download_failure &&
          link_format_invalid == o.link_format_invalid &&
          link_length_too_long == o.link_length_too_long &&
          list_price_invalid == o.list_price_invalid &&
          max_items_per_item_group_exceeded == o.max_items_per_item_group_exceeded &&
          parse_line_error == o.parse_line_error &&
          pinjoin_content_unsafe == o.pinjoin_content_unsafe &&
          price_cannot_be_determined == o.price_cannot_be_determined &&
          price_missing == o.price_missing &&
          product_link_missing == o.product_link_missing &&
          product_price_invalid == o.product_price_invalid &&
          title_missing == o.title_missing
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [adult_invalid, adwords_format_invalid, availability_invalid, blocklisted_image_signature, description_missing, duplicate_products, image_link_invalid, image_link_length_too_long, image_link_missing, invalid_domain, itemid_missing, item_main_image_download_failure, link_format_invalid, link_length_too_long, list_price_invalid, max_items_per_item_group_exceeded, parse_line_error, pinjoin_content_unsafe, price_cannot_be_determined, price_missing, product_link_missing, product_price_invalid, title_missing].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
