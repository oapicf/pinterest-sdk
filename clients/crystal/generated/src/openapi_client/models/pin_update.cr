# #Pinterest REST API
#
##Pinterest's REST API
#
#The version of the OpenAPI document: 5.14.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.9.0
#

require "big"
require "json"
require "time"

module OpenAPIClient
  # Pin fields for updates
  class PinUpdate
    include JSON::Serializable

    # Optional properties
    # Pin's alternative text.
    @[JSON::Field(key: "alt_text", type: String?, nillable: true, emit_null: false)]
    property alt_text : String?

    # The id of the board to move the Pin onto.
    @[JSON::Field(key: "board_id", type: String?, nillable: true, emit_null: false)]
    property board_id : String?

    # <a href=\"https://help.pinterest.com/en/article/create-a-board-section\">Board section</a> ID.
    @[JSON::Field(key: "board_section_id", type: String?, nillable: true, emit_null: false)]
    property board_section_id : String?

    # Pin description - 800 characters maximum.
    @[JSON::Field(key: "description", type: String?, nillable: true, emit_null: false)]
    property description : String?

    # URL viewer is taken to when they click pin.
    @[JSON::Field(key: "link", type: String?, nillable: true, emit_null: false)]
    property link : String?

    # The native pin title that creators explicitly prefer to display.
    @[JSON::Field(key: "title", type: String?, nillable: true, emit_null: false)]
    property title : String?

    # Carousel Pin slots data.
    @[JSON::Field(key: "carousel_slots", type: Array(PinUpdateCarouselSlotsInner)?, nillable: true, emit_null: false)]
    property carousel_slots : Array(PinUpdateCarouselSlotsInner)?

    # Private note for this Pin. <a href=\"https://help.pinterest.com/en/article/add-notes-to-your-pins\">Learn more</a>.
    @[JSON::Field(key: "note", type: String?, nillable: true, emit_null: false)]
    property note : String?

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@alt_text : String?, @board_id : String?, @board_section_id : String?, @description : String?, @link : String?, @title : String?, @carousel_slots : Array(PinUpdateCarouselSlotsInner)?, @note : String?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if !@alt_text.nil? && @alt_text.to_s.size > 500
        invalid_properties.push("invalid value for \"alt_text\", the character length must be smaller than or equal to 500.")
      end

      pattern = Regexp.new(/^\d+$/)
      if !@board_id.nil? && @board_id !~ pattern
        invalid_properties.push("invalid value for \"board_id\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^\d+$/)
      if !@board_section_id.nil? && @board_section_id !~ pattern
        invalid_properties.push("invalid value for \"board_section_id\", must conform to the pattern #{pattern}.")
      end

      if !@description.nil? && @description.to_s.size > 800
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 800.")
      end

      if !@link.nil? && @link.to_s.size > 2048
        invalid_properties.push("invalid value for \"link\", the character length must be smaller than or equal to 2048.")
      end

      if !@title.nil? && @title.to_s.size > 100
        invalid_properties.push("invalid value for \"title\", the character length must be smaller than or equal to 100.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@alt_text.nil? && @alt_text.to_s.size > 500
      return false if !@board_id.nil? && @board_id !~ Regexp.new(/^\d+$/)
      return false if !@board_section_id.nil? && @board_section_id !~ Regexp.new(/^\d+$/)
      return false if !@description.nil? && @description.to_s.size > 800
      return false if !@link.nil? && @link.to_s.size > 2048
      return false if !@title.nil? && @title.to_s.size > 100
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] alt_text Value to be assigned
    def alt_text=(alt_text)
      if !alt_text.nil? && alt_text.to_s.size > 500
        raise ArgumentError.new("invalid value for \"alt_text\", the character length must be smaller than or equal to 500.")
      end

      @alt_text = alt_text
    end

    # Custom attribute writer method with validation
    # @param [Object] board_id Value to be assigned
    def board_id=(board_id)
      pattern = Regexp.new(/^\d+$/)
      if !board_id.nil? && board_id !~ pattern
        raise ArgumentError.new("invalid value for \"board_id\", must conform to the pattern #{pattern}.")
      end

      @board_id = board_id
    end

    # Custom attribute writer method with validation
    # @param [Object] board_section_id Value to be assigned
    def board_section_id=(board_section_id)
      pattern = Regexp.new(/^\d+$/)
      if !board_section_id.nil? && board_section_id !~ pattern
        raise ArgumentError.new("invalid value for \"board_section_id\", must conform to the pattern #{pattern}.")
      end

      @board_section_id = board_section_id
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.size > 800
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 800.")
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] link Value to be assigned
    def link=(link)
      if !link.nil? && link.to_s.size > 2048
        raise ArgumentError.new("invalid value for \"link\", the character length must be smaller than or equal to 2048.")
      end

      @link = link
    end

    # Custom attribute writer method with validation
    # @param [Object] title Value to be assigned
    def title=(title)
      if !title.nil? && title.to_s.size > 100
        raise ArgumentError.new("invalid value for \"title\", the character length must be smaller than or equal to 100.")
      end

      @title = title
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          alt_text == o.alt_text &&
          board_id == o.board_id &&
          board_section_id == o.board_section_id &&
          description == o.description &&
          link == o.link &&
          title == o.title &&
          carousel_slots == o.carousel_slots &&
          note == o.note
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [alt_text, board_id, board_section_id, description, link, title, carousel_slots, note].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
