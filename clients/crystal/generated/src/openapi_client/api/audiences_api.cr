# #Pinterest REST API
#
##Pinterest's REST API
#
#The version of the OpenAPI document: 5.14.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.9.0
#

require "uri"

module OpenAPIClient
  class AudiencesApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create audience
    # Create an audience you can use in targeting for specific ad groups. Targeting combines customer information with the ways users interact with Pinterest to help you reach specific groups of users; you can include or exclude specific audience_ids when you create an ad group. <p/> For more, see <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/audience-targeting\" target=\"_blank\">Audience targeting</a>.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param audience_create_request [AudienceCreateRequest] List of ads to create, size limit [1, 30]
    # @return [Audience]
    def audiences_create(ad_account_id : String, audience_create_request : AudienceCreateRequest)
      data, _status_code, _headers = audiences_create_with_http_info(ad_account_id, audience_create_request)
      data
    end

    # Create audience
    # Create an audience you can use in targeting for specific ad groups. Targeting combines customer information with the ways users interact with Pinterest to help you reach specific groups of users; you can include or exclude specific audience_ids when you create an ad group. &lt;p/&gt; For more, see &lt;a class&#x3D;\&quot;reference external\&quot; href&#x3D;\&quot;https://help.pinterest.com/en/business/article/audience-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Audience targeting&lt;/a&gt;.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param audience_create_request [AudienceCreateRequest] List of ads to create, size limit [1, 30]
    # @return [Array<(Audience, Integer, Hash)>] Audience data, response status code and response headers
    def audiences_create_with_http_info(ad_account_id : String, audience_create_request : AudienceCreateRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: AudiencesApi.audiences_create ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AudiencesApi.audiences_create")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AudiencesApi.audiences_create, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AudiencesApi.audiences_create, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "audience_create_request" is set
      if @api_client.config.client_side_validation && audience_create_request.nil?
        raise ArgumentError.new("Missing the required parameter 'audience_create_request' when calling AudiencesApi.audiences_create")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/audiences".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = audience_create_request.to_json

      # return_type
      return_type = "Audience"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AudiencesApi.audiences_create",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AudiencesApi#audiences_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Audience.from_json(data), status_code, headers
    end

    # Create custom audience
    # Create a custom audience and find the audiences you want your ads to reach.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param audience_create_custom_request [AudienceCreateCustomRequest] Custom audience to create.
    # @return [Audience]
    def audiences_create_custom(ad_account_id : String, audience_create_custom_request : AudienceCreateCustomRequest)
      data, _status_code, _headers = audiences_create_custom_with_http_info(ad_account_id, audience_create_custom_request)
      data
    end

    # Create custom audience
    # Create a custom audience and find the audiences you want your ads to reach.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param audience_create_custom_request [AudienceCreateCustomRequest] Custom audience to create.
    # @return [Array<(Audience, Integer, Hash)>] Audience data, response status code and response headers
    def audiences_create_custom_with_http_info(ad_account_id : String, audience_create_custom_request : AudienceCreateCustomRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: AudiencesApi.audiences_create_custom ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AudiencesApi.audiences_create_custom")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AudiencesApi.audiences_create_custom, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AudiencesApi.audiences_create_custom, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "audience_create_custom_request" is set
      if @api_client.config.client_side_validation && audience_create_custom_request.nil?
        raise ArgumentError.new("Missing the required parameter 'audience_create_custom_request' when calling AudiencesApi.audiences_create_custom")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/audiences/custom".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = audience_create_custom_request.to_json

      # return_type
      return_type = "Audience"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AudiencesApi.audiences_create_custom",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AudiencesApi#audiences_create_custom\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Audience.from_json(data), status_code, headers
    end

    # Get audience
    # Get a specific audience given the audience ID.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param audience_id [String] Unique identifier of an audience
    # @return [Audience]
    def audiences_get(ad_account_id : String, audience_id : String)
      data, _status_code, _headers = audiences_get_with_http_info(ad_account_id, audience_id)
      data
    end

    # Get audience
    # Get a specific audience given the audience ID.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param audience_id [String] Unique identifier of an audience
    # @return [Array<(Audience, Integer, Hash)>] Audience data, response status code and response headers
    def audiences_get_with_http_info(ad_account_id : String, audience_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: AudiencesApi.audiences_get ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AudiencesApi.audiences_get")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AudiencesApi.audiences_get, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AudiencesApi.audiences_get, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "audience_id" is set
      if @api_client.config.client_side_validation && audience_id.nil?
        raise ArgumentError.new("Missing the required parameter 'audience_id' when calling AudiencesApi.audiences_get")
      end
      if @api_client.config.client_side_validation && audience_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"audience_id\" when calling AudiencesApi.audiences_get, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && audience_id !~ pattern
        raise ArgumentError.new("invalid value for \"audience_id\" when calling AudiencesApi.audiences_get, must conform to the pattern #{pattern}.")
      end

      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/audiences/{audience_id}".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s)).sub("{" + "audience_id" + "}", URI.encode_path(audience_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Audience"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AudiencesApi.audiences_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AudiencesApi#audiences_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Audience.from_json(data), status_code, headers
    end

    # List audiences
    # Get list of audiences for the ad account.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @return [AudiencesList200Response]
    def audiences_list(ad_account_id : String, bookmark : String?, order : String?, page_size : Int32?, ownership_type : String?)
      data, _status_code, _headers = audiences_list_with_http_info(ad_account_id, bookmark, order, page_size, ownership_type)
      data
    end

    # List audiences
    # Get list of audiences for the ad account.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @return [Array<(AudiencesList200Response, Integer, Hash)>] AudiencesList200Response data, response status code and response headers
    def audiences_list_with_http_info(ad_account_id : String, bookmark : String?, order : String?, page_size : Int32?, ownership_type : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AudiencesApi.audiences_list ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AudiencesApi.audiences_list")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AudiencesApi.audiences_list, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AudiencesApi.audiences_list, must conform to the pattern #{pattern}.")
      end

      allowable_values = ["ASCENDING", "DESCENDING"]
      if @api_client.config.client_side_validation && order && !allowable_values.includes?(order)
        raise ArgumentError.new("invalid value for \"order\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !page_size.nil? && page_size > 250
        raise ArgumentError.new("invalid value for \"page_size\" when calling AudiencesApi.audiences_list, must be smaller than or equal to 250.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size < 1
        raise ArgumentError.new("invalid value for \"page_size\" when calling AudiencesApi.audiences_list, must be greater than or equal to 1.")
      end

      allowable_values = ["OWNED", "RECEIVED"]
      if @api_client.config.client_side_validation && ownership_type && !allowable_values.includes?(ownership_type)
        raise ArgumentError.new("invalid value for \"ownership_type\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/audiences".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["bookmark"] = bookmark.to_s unless bookmark.nil?
      query_params["order"] = order.to_s unless order.nil?
      query_params["page_size"] = page_size.to_s unless page_size.nil?
      query_params["ownership_type"] = ownership_type.to_s unless ownership_type.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "AudiencesList200Response"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AudiencesApi.audiences_list",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AudiencesApi#audiences_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AudiencesList200Response.from_json(data), status_code, headers
    end

    # Update audience
    # Update (edit or remove) an existing targeting audience.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param audience_id [String] Unique identifier of an audience
    # @return [Audience]
    def audiences_update(ad_account_id : String, audience_id : String, audience_update_request : AudienceUpdateRequest?)
      data, _status_code, _headers = audiences_update_with_http_info(ad_account_id, audience_id, audience_update_request)
      data
    end

    # Update audience
    # Update (edit or remove) an existing targeting audience.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param audience_id [String] Unique identifier of an audience
    # @return [Array<(Audience, Integer, Hash)>] Audience data, response status code and response headers
    def audiences_update_with_http_info(ad_account_id : String, audience_id : String, audience_update_request : AudienceUpdateRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AudiencesApi.audiences_update ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AudiencesApi.audiences_update")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AudiencesApi.audiences_update, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AudiencesApi.audiences_update, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "audience_id" is set
      if @api_client.config.client_side_validation && audience_id.nil?
        raise ArgumentError.new("Missing the required parameter 'audience_id' when calling AudiencesApi.audiences_update")
      end
      if @api_client.config.client_side_validation && audience_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"audience_id\" when calling AudiencesApi.audiences_update, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && audience_id !~ pattern
        raise ArgumentError.new("invalid value for \"audience_id\" when calling AudiencesApi.audiences_update, must conform to the pattern #{pattern}.")
      end

      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/audiences/{audience_id}".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s)).sub("{" + "audience_id" + "}", URI.encode_path(audience_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = audience_update_request.to_json

      # return_type
      return_type = "Audience"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"AudiencesApi.audiences_update",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AudiencesApi#audiences_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Audience.from_json(data), status_code, headers
    end
  end
end
