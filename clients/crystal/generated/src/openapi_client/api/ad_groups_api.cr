# #Pinterest REST API
#
##Pinterest's REST API
#
#The version of the OpenAPI document: 5.14.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.9.0
#

require "uri"

module OpenAPIClient
  class AdGroupsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get ad group analytics
    # Get analytics for the specified ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param start_date [Time] Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
    # @param end_date [Time] Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
    # @param ad_group_ids [Array(String)] List of Ad group Ids to use to filter the results.
    # @param columns [Array(String)] Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
    # @param granularity [Granularity] TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
    # @return [Array(AdGroupsAnalyticsResponseInner)]
    def ad_groups_analytics(ad_account_id : String, start_date : Time, end_date : Time, ad_group_ids : Array(String), columns : Array(String), granularity : Granularity, click_window_days : Int32?, engagement_window_days : Int32?, view_window_days : Int32?, conversion_report_time : String?)
      data, _status_code, _headers = ad_groups_analytics_with_http_info(ad_account_id, start_date, end_date, ad_group_ids, columns, granularity, click_window_days, engagement_window_days, view_window_days, conversion_report_time)
      data
    end

    # Get ad group analytics
    # Get analytics for the specified ad groups in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param start_date [Time] Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
    # @param end_date [Time] Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
    # @param ad_group_ids [Array(String)] List of Ad group Ids to use to filter the results.
    # @param columns [Array(String)] Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
    # @param granularity [Granularity] TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
    # @return [Array<(Array(AdGroupsAnalyticsResponseInner), Integer, Hash)>] Array(AdGroupsAnalyticsResponseInner) data, response status code and response headers
    def ad_groups_analytics_with_http_info(ad_account_id : String, start_date : Time, end_date : Time, ad_group_ids : Array(String), columns : Array(String), granularity : Granularity, click_window_days : Int32?, engagement_window_days : Int32?, view_window_days : Int32?, conversion_report_time : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdGroupsApi.ad_groups_analytics ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdGroupsApi.ad_groups_analytics")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdGroupsApi.ad_groups_analytics, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdGroupsApi.ad_groups_analytics, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "start_date" is set
      if @api_client.config.client_side_validation && start_date.nil?
        raise ArgumentError.new("Missing the required parameter 'start_date' when calling AdGroupsApi.ad_groups_analytics")
      end
      # verify the required parameter "end_date" is set
      if @api_client.config.client_side_validation && end_date.nil?
        raise ArgumentError.new("Missing the required parameter 'end_date' when calling AdGroupsApi.ad_groups_analytics")
      end
      # verify the required parameter "ad_group_ids" is set
      if @api_client.config.client_side_validation && ad_group_ids.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_group_ids' when calling AdGroupsApi.ad_groups_analytics")
      end
      if @api_client.config.client_side_validation && ad_group_ids.size > 100
        raise ArgumentError.new("invalid value for \"ad_group_ids\" when calling AdGroupsApi.ad_groups_analytics, number of items must be less than or equal to 100.")
      end

      if @api_client.config.client_side_validation && ad_group_ids.size < 1
        raise ArgumentError.new("invalid value for \"ad_group_ids\" when calling AdGroupsApi.ad_groups_analytics, number of items must be greater than or equal to 1.")
      end

      # verify the required parameter "columns" is set
      if @api_client.config.client_side_validation && columns.nil?
        raise ArgumentError.new("Missing the required parameter 'columns' when calling AdGroupsApi.ad_groups_analytics")
      end
      # verify the required parameter "granularity" is set
      if @api_client.config.client_side_validation && granularity.nil?
        raise ArgumentError.new("Missing the required parameter 'granularity' when calling AdGroupsApi.ad_groups_analytics")
      end
      allowable_values = ["0", "1", "7", "14", "30", "60"]
      if @api_client.config.client_side_validation && click_window_days && !allowable_values.includes?(click_window_days)
        raise ArgumentError.new("invalid value for \"click_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["0", "1", "7", "14", "30", "60"]
      if @api_client.config.client_side_validation && engagement_window_days && !allowable_values.includes?(engagement_window_days)
        raise ArgumentError.new("invalid value for \"engagement_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["0", "1", "7", "14", "30", "60"]
      if @api_client.config.client_side_validation && view_window_days && !allowable_values.includes?(view_window_days)
        raise ArgumentError.new("invalid value for \"view_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["TIME_OF_AD_ACTION", "TIME_OF_CONVERSION"]
      if @api_client.config.client_side_validation && conversion_report_time && !allowable_values.includes?(conversion_report_time)
        raise ArgumentError.new("invalid value for \"conversion_report_time\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/ad_groups/analytics".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["start_date"] = start_date.to_s unless start_date.nil?
      query_params["end_date"] = end_date.to_s unless end_date.nil?
      query_params["ad_group_ids"] = @api_client.build_collection_param(ad_group_ids, :multi)
      query_params["columns"] = @api_client.build_collection_param(columns, :csv)
      query_params["granularity"] = granularity.to_s unless granularity.nil?
      query_params["click_window_days"] = click_window_days.to_s unless click_window_days.nil?
      query_params["engagement_window_days"] = engagement_window_days.to_s unless engagement_window_days.nil?
      query_params["view_window_days"] = view_window_days.to_s unless view_window_days.nil?
      query_params["conversion_report_time"] = conversion_report_time.to_s unless conversion_report_time.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(AdGroupsAnalyticsResponseInner)"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AdGroupsApi.ad_groups_analytics",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdGroupsApi#ad_groups_analytics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(AdGroupsAnalyticsResponseInner).from_json(data), status_code, headers
    end

    # Get audience sizing
    # Get potential audience size for an ad group with given targeting criteria.  Potential audience size estimates the number of people you may be able to reach per month with your campaign.  It is based on historical advertising data and the targeting criteria you select. It does not guarantee results or take into account factors such as bid, budget, schedule, seasonality or product experiments.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @return [AdGroupAudienceSizingResponse]
    def ad_groups_audience_sizing(ad_account_id : String, ad_group_audience_sizing_request : AdGroupAudienceSizingRequest?)
      data, _status_code, _headers = ad_groups_audience_sizing_with_http_info(ad_account_id, ad_group_audience_sizing_request)
      data
    end

    # Get audience sizing
    # Get potential audience size for an ad group with given targeting criteria.  Potential audience size estimates the number of people you may be able to reach per month with your campaign.  It is based on historical advertising data and the targeting criteria you select. It does not guarantee results or take into account factors such as bid, budget, schedule, seasonality or product experiments.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @return [Array<(AdGroupAudienceSizingResponse, Integer, Hash)>] AdGroupAudienceSizingResponse data, response status code and response headers
    def ad_groups_audience_sizing_with_http_info(ad_account_id : String, ad_group_audience_sizing_request : AdGroupAudienceSizingRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdGroupsApi.ad_groups_audience_sizing ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdGroupsApi.ad_groups_audience_sizing")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdGroupsApi.ad_groups_audience_sizing, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdGroupsApi.ad_groups_audience_sizing, must conform to the pattern #{pattern}.")
      end

      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/ad_groups/audience_sizing".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = ad_group_audience_sizing_request.to_json

      # return_type
      return_type = "AdGroupAudienceSizingResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AdGroupsApi.ad_groups_audience_sizing",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdGroupsApi#ad_groups_audience_sizing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AdGroupAudienceSizingResponse.from_json(data), status_code, headers
    end

    # Get bid floors
    # List bid floors for your campaign configuration. Bid floors are given in microcurrency values based on the currency in the bid floor specification. <p/> <p>Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.</p> <p>A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’ s profile.</p> <p><strong>Equivalency equations</strong>, using dollars as an example currency:</p> <ul>   <li>$1 = 1,000,000 microdollars</li>   <li>1 microdollar = $0.000001 </li> </ul> <p><strong>To convert between currency and microcurrency</strong>, using dollars as an example currency:</p> <ul>   <li>To convert dollars to microdollars, mutiply dollars by 1,000,000</li>   <li>To convert microdollars to dollars, divide microdollars by 1,000,000</li>  </ul> For more on bid floors see <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/set-your-bid\"> Set your bid</a>.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param bid_floor_request [BidFloorRequest] Parameters to get bid_floor info
    # @return [BidFloor]
    def ad_groups_bid_floor_get(ad_account_id : String, bid_floor_request : BidFloorRequest)
      data, _status_code, _headers = ad_groups_bid_floor_get_with_http_info(ad_account_id, bid_floor_request)
      data
    end

    # Get bid floors
    # List bid floors for your campaign configuration. Bid floors are given in microcurrency values based on the currency in the bid floor specification. &lt;p/&gt; &lt;p&gt;Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.&lt;/p&gt; &lt;p&gt;A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’ s profile.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Equivalency equations&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;$1 &#x3D; 1,000,000 microdollars&lt;/li&gt;   &lt;li&gt;1 microdollar &#x3D; $0.000001 &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;To convert between currency and microcurrency&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;To convert dollars to microdollars, mutiply dollars by 1,000,000&lt;/li&gt;   &lt;li&gt;To convert microdollars to dollars, divide microdollars by 1,000,000&lt;/li&gt;  &lt;/ul&gt; For more on bid floors see &lt;a class&#x3D;\&quot;reference external\&quot; href&#x3D;\&quot;https://help.pinterest.com/en/business/article/set-your-bid\&quot;&gt; Set your bid&lt;/a&gt;.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param bid_floor_request [BidFloorRequest] Parameters to get bid_floor info
    # @return [Array<(BidFloor, Integer, Hash)>] BidFloor data, response status code and response headers
    def ad_groups_bid_floor_get_with_http_info(ad_account_id : String, bid_floor_request : BidFloorRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdGroupsApi.ad_groups_bid_floor_get ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdGroupsApi.ad_groups_bid_floor_get")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdGroupsApi.ad_groups_bid_floor_get, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdGroupsApi.ad_groups_bid_floor_get, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "bid_floor_request" is set
      if @api_client.config.client_side_validation && bid_floor_request.nil?
        raise ArgumentError.new("Missing the required parameter 'bid_floor_request' when calling AdGroupsApi.ad_groups_bid_floor_get")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/bid_floor".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = bid_floor_request.to_json

      # return_type
      return_type = "BidFloor"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AdGroupsApi.ad_groups_bid_floor_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdGroupsApi#ad_groups_bid_floor_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return BidFloor.from_json(data), status_code, headers
    end

    # Create ad groups
    # Create multiple new ad groups. All ads in a given ad group will have the same budget, bid, run dates, targeting, and placement (search, browse, other). For more information, <a href=\"https://help.pinterest.com/en/business/article/campaign-structure\" target=\"_blank\"> click here</a>.</p> <strong>Note:</strong> - 'bid_in_micro_currency' and 'budget_in_micro_currency' should be expressed in microcurrency amounts based on the currency field set in the advertiser's profile.<p/> <p>Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.</p> <p>A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’s profile.</p>  <p><strong>Equivalency equations</strong>, using dollars as an example currency:</p> <ul>   <li>$1 = 1,000,000 microdollars</li>   <li>1 microdollar = $0.000001 </li> </ul> <p><strong>To convert between currency and microcurrency</strong>, using dollars as an example currency:</p> <ul>   <li>To convert dollars to microdollars, mutiply dollars by 1,000,000</li>   <li>To convert microdollars to dollars, divide microdollars by 1,000,000</li> </ul> - Ad groups belong to ad campaigns. Some types of campaigns (e.g. budget optimization) have limits on the number of ad groups they can hold. If you exceed those limits, you will get an error message. - Start and end time cannot be set for ad groups that belong to CBO campaigns. Currently, campaigns with the following objective types: TRAFFIC, AWARENESS, WEB_CONVERSIONS, and CATALOG_SALES will default to CBO.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param ad_group_create_request [Array(AdGroupCreateRequest)] List of ad groups to create, size limit [1, 30].
    # @return [AdGroupArrayResponse]
    def ad_groups_create(ad_account_id : String, ad_group_create_request : Array(AdGroupCreateRequest))
      data, _status_code, _headers = ad_groups_create_with_http_info(ad_account_id, ad_group_create_request)
      data
    end

    # Create ad groups
    # Create multiple new ad groups. All ads in a given ad group will have the same budget, bid, run dates, targeting, and placement (search, browse, other). For more information, &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/campaign-structure\&quot; target&#x3D;\&quot;_blank\&quot;&gt; click here&lt;/a&gt;.&lt;/p&gt; &lt;strong&gt;Note:&lt;/strong&gt; - &#39;bid_in_micro_currency&#39; and &#39;budget_in_micro_currency&#39; should be expressed in microcurrency amounts based on the currency field set in the advertiser&#39;s profile.&lt;p/&gt; &lt;p&gt;Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.&lt;/p&gt; &lt;p&gt;A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’s profile.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Equivalency equations&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;$1 &#x3D; 1,000,000 microdollars&lt;/li&gt;   &lt;li&gt;1 microdollar &#x3D; $0.000001 &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;To convert between currency and microcurrency&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;To convert dollars to microdollars, mutiply dollars by 1,000,000&lt;/li&gt;   &lt;li&gt;To convert microdollars to dollars, divide microdollars by 1,000,000&lt;/li&gt; &lt;/ul&gt; - Ad groups belong to ad campaigns. Some types of campaigns (e.g. budget optimization) have limits on the number of ad groups they can hold. If you exceed those limits, you will get an error message. - Start and end time cannot be set for ad groups that belong to CBO campaigns. Currently, campaigns with the following objective types: TRAFFIC, AWARENESS, WEB_CONVERSIONS, and CATALOG_SALES will default to CBO.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param ad_group_create_request [Array(AdGroupCreateRequest)] List of ad groups to create, size limit [1, 30].
    # @return [Array<(AdGroupArrayResponse, Integer, Hash)>] AdGroupArrayResponse data, response status code and response headers
    def ad_groups_create_with_http_info(ad_account_id : String, ad_group_create_request : Array(AdGroupCreateRequest))
      if @api_client.config.debugging
        Log.debug {"Calling API: AdGroupsApi.ad_groups_create ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdGroupsApi.ad_groups_create")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdGroupsApi.ad_groups_create, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdGroupsApi.ad_groups_create, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "ad_group_create_request" is set
      if @api_client.config.client_side_validation && ad_group_create_request.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_group_create_request' when calling AdGroupsApi.ad_groups_create")
      end
      if @api_client.config.client_side_validation && ad_group_create_request.size > 30
        raise ArgumentError.new("invalid value for \"ad_group_create_request\" when calling AdGroupsApi.ad_groups_create, number of items must be less than or equal to 30.")
      end

      if @api_client.config.client_side_validation && ad_group_create_request.size < 1
        raise ArgumentError.new("invalid value for \"ad_group_create_request\" when calling AdGroupsApi.ad_groups_create, number of items must be greater than or equal to 1.")
      end

      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/ad_groups".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = ad_group_create_request.to_json

      # return_type
      return_type = "AdGroupArrayResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AdGroupsApi.ad_groups_create",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdGroupsApi#ad_groups_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AdGroupArrayResponse.from_json(data), status_code, headers
    end

    # Get ad group
    # Get a specific ad given the ad ID. If your pin is rejected, rejected_reasons will contain additional information from the Ad Review process. For more information about our policies and rejection reasons see the <a href=\"https://www.pinterest.com/_/_/policy/advertising-guidelines/\" target=\"_blank\">Pinterest advertising standards</a>.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param ad_group_id [String] Unique identifier of an ad group.
    # @return [AdGroupResponse]
    def ad_groups_get(ad_account_id : String, ad_group_id : String)
      data, _status_code, _headers = ad_groups_get_with_http_info(ad_account_id, ad_group_id)
      data
    end

    # Get ad group
    # Get a specific ad given the ad ID. If your pin is rejected, rejected_reasons will contain additional information from the Ad Review process. For more information about our policies and rejection reasons see the &lt;a href&#x3D;\&quot;https://www.pinterest.com/_/_/policy/advertising-guidelines/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Pinterest advertising standards&lt;/a&gt;.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param ad_group_id [String] Unique identifier of an ad group.
    # @return [Array<(AdGroupResponse, Integer, Hash)>] AdGroupResponse data, response status code and response headers
    def ad_groups_get_with_http_info(ad_account_id : String, ad_group_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdGroupsApi.ad_groups_get ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdGroupsApi.ad_groups_get")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdGroupsApi.ad_groups_get, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdGroupsApi.ad_groups_get, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "ad_group_id" is set
      if @api_client.config.client_side_validation && ad_group_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_group_id' when calling AdGroupsApi.ad_groups_get")
      end
      if @api_client.config.client_side_validation && ad_group_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_group_id\" when calling AdGroupsApi.ad_groups_get, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_group_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_group_id\" when calling AdGroupsApi.ad_groups_get, must conform to the pattern #{pattern}.")
      end

      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/ad_groups/{ad_group_id}".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s)).sub("{" + "ad_group_id" + "}", URI.encode_path(ad_group_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "AdGroupResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AdGroupsApi.ad_groups_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdGroupsApi#ad_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AdGroupResponse.from_json(data), status_code, headers
    end

    # List ad groups
    # List ad groups based on provided campaign IDs or ad group IDs.(campaign_ids or ad_group_ids). <p/> <strong>Note:</strong><p/> Provide only campaign_id or ad_group_id. Do not provide both.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @return [AdGroupsList200Response]
    def ad_groups_list(ad_account_id : String, campaign_ids : Array(String)?, ad_group_ids : Array(String)?, entity_statuses : Array(String)?, page_size : Int32?, order : String?, bookmark : String?, translate_interests_to_names : Bool?)
      data, _status_code, _headers = ad_groups_list_with_http_info(ad_account_id, campaign_ids, ad_group_ids, entity_statuses, page_size, order, bookmark, translate_interests_to_names)
      data
    end

    # List ad groups
    # List ad groups based on provided campaign IDs or ad group IDs.(campaign_ids or ad_group_ids). &lt;p/&gt; &lt;strong&gt;Note:&lt;/strong&gt;&lt;p/&gt; Provide only campaign_id or ad_group_id. Do not provide both.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @return [Array<(AdGroupsList200Response, Integer, Hash)>] AdGroupsList200Response data, response status code and response headers
    def ad_groups_list_with_http_info(ad_account_id : String, campaign_ids : Array(String)?, ad_group_ids : Array(String)?, entity_statuses : Array(String)?, page_size : Int32?, order : String?, bookmark : String?, translate_interests_to_names : Bool?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdGroupsApi.ad_groups_list ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdGroupsApi.ad_groups_list")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdGroupsApi.ad_groups_list, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdGroupsApi.ad_groups_list, must conform to the pattern #{pattern}.")
      end

      if @api_client.config.client_side_validation && campaign_ids.nil? && campaign_ids.size > 100
        raise ArgumentError.new("invalid value for \"campaign_ids\" when calling AdGroupsApi.ad_groups_list, number of items must be less than or equal to 100.")
      end

      if @api_client.config.client_side_validation && campaign_ids.nil? && campaign_ids.size < 1
        raise ArgumentError.new("invalid value for \"campaign_ids\" when calling AdGroupsApi.ad_groups_list, number of items must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && ad_group_ids.nil? && ad_group_ids.size > 100
        raise ArgumentError.new("invalid value for \"ad_group_ids\" when calling AdGroupsApi.ad_groups_list, number of items must be less than or equal to 100.")
      end

      if @api_client.config.client_side_validation && ad_group_ids.nil? && ad_group_ids.size < 1
        raise ArgumentError.new("invalid value for \"ad_group_ids\" when calling AdGroupsApi.ad_groups_list, number of items must be greater than or equal to 1.")
      end

      allowable_values = ["ACTIVE", "PAUSED", "ARCHIVED", "DRAFT", "DELETED_DRAFT"]
      if @api_client.config.client_side_validation && entity_statuses && entity_statuses.all? { |item| allowable_values.includes?(item) }
        raise ArgumentError.new("invalid value for \"entity_statuses\", must include one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !page_size.nil? && page_size > 250
        raise ArgumentError.new("invalid value for \"page_size\" when calling AdGroupsApi.ad_groups_list, must be smaller than or equal to 250.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size < 1
        raise ArgumentError.new("invalid value for \"page_size\" when calling AdGroupsApi.ad_groups_list, must be greater than or equal to 1.")
      end

      allowable_values = ["ASCENDING", "DESCENDING"]
      if @api_client.config.client_side_validation && order && !allowable_values.includes?(order)
        raise ArgumentError.new("invalid value for \"order\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/ad_groups".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["campaign_ids"] = @api_client.build_collection_param(campaign_ids, :multi)
      query_params["ad_group_ids"] = @api_client.build_collection_param(ad_group_ids, :multi)
      query_params["entity_statuses"] = @api_client.build_collection_param(entity_statuses, :multi)
      query_params["page_size"] = page_size.to_s unless page_size.nil?
      query_params["order"] = order.to_s unless order.nil?
      query_params["bookmark"] = bookmark.to_s unless bookmark.nil?
      query_params["translate_interests_to_names"] = translate_interests_to_names.to_s unless translate_interests_to_names.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "AdGroupsList200Response"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AdGroupsApi.ad_groups_list",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdGroupsApi#ad_groups_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AdGroupsList200Response.from_json(data), status_code, headers
    end

    # Get targeting analytics for ad groups
    # Get targeting analytics for one or more ad groups. For the requested ad group(s) and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \"age_bucket\") for applicable values (e.g. \"45-49\"). <p/> - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param ad_group_ids [Array(String)] List of Ad group Ids to use to filter the results.
    # @param start_date [Time] Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
    # @param end_date [Time] Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
    # @param targeting_types [Array(AdsAnalyticsTargetingType)] Targeting type breakdowns for the report. The reporting per targeting type &lt;br&gt; is independent from each other. [\&quot;AGE_BUCKET_AND_GENDER\&quot;] is in BETA and not yet available to all users.
    # @param columns [Array(String)] Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
    # @param granularity [Granularity] TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
    # @return [MetricsResponse]
    def ad_groups_targeting_analytics_get(ad_account_id : String, ad_group_ids : Array(String), start_date : Time, end_date : Time, targeting_types : Array(AdsAnalyticsTargetingType), columns : Array(String), granularity : Granularity, click_window_days : Int32?, engagement_window_days : Int32?, view_window_days : Int32?, conversion_report_time : String?, attribution_types : ConversionReportAttributionType?)
      data, _status_code, _headers = ad_groups_targeting_analytics_get_with_http_info(ad_account_id, ad_group_ids, start_date, end_date, targeting_types, columns, granularity, click_window_days, engagement_window_days, view_window_days, conversion_report_time, attribution_types)
      data
    end

    # Get targeting analytics for ad groups
    # Get targeting analytics for one or more ad groups. For the requested ad group(s) and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \&quot;age_bucket\&quot;) for applicable values (e.g. \&quot;45-49\&quot;). &lt;p/&gt; - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param ad_group_ids [Array(String)] List of Ad group Ids to use to filter the results.
    # @param start_date [Time] Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
    # @param end_date [Time] Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
    # @param targeting_types [Array(AdsAnalyticsTargetingType)] Targeting type breakdowns for the report. The reporting per targeting type &lt;br&gt; is independent from each other. [\&quot;AGE_BUCKET_AND_GENDER\&quot;] is in BETA and not yet available to all users.
    # @param columns [Array(String)] Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
    # @param granularity [Granularity] TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
    # @return [Array<(MetricsResponse, Integer, Hash)>] MetricsResponse data, response status code and response headers
    def ad_groups_targeting_analytics_get_with_http_info(ad_account_id : String, ad_group_ids : Array(String), start_date : Time, end_date : Time, targeting_types : Array(AdsAnalyticsTargetingType), columns : Array(String), granularity : Granularity, click_window_days : Int32?, engagement_window_days : Int32?, view_window_days : Int32?, conversion_report_time : String?, attribution_types : ConversionReportAttributionType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdGroupsApi.ad_groups_targeting_analytics_get ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdGroupsApi.ad_groups_targeting_analytics_get")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdGroupsApi.ad_groups_targeting_analytics_get, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdGroupsApi.ad_groups_targeting_analytics_get, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "ad_group_ids" is set
      if @api_client.config.client_side_validation && ad_group_ids.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_group_ids' when calling AdGroupsApi.ad_groups_targeting_analytics_get")
      end
      if @api_client.config.client_side_validation && ad_group_ids.size > 100
        raise ArgumentError.new("invalid value for \"ad_group_ids\" when calling AdGroupsApi.ad_groups_targeting_analytics_get, number of items must be less than or equal to 100.")
      end

      if @api_client.config.client_side_validation && ad_group_ids.size < 1
        raise ArgumentError.new("invalid value for \"ad_group_ids\" when calling AdGroupsApi.ad_groups_targeting_analytics_get, number of items must be greater than or equal to 1.")
      end

      # verify the required parameter "start_date" is set
      if @api_client.config.client_side_validation && start_date.nil?
        raise ArgumentError.new("Missing the required parameter 'start_date' when calling AdGroupsApi.ad_groups_targeting_analytics_get")
      end
      # verify the required parameter "end_date" is set
      if @api_client.config.client_side_validation && end_date.nil?
        raise ArgumentError.new("Missing the required parameter 'end_date' when calling AdGroupsApi.ad_groups_targeting_analytics_get")
      end
      # verify the required parameter "targeting_types" is set
      if @api_client.config.client_side_validation && targeting_types.nil?
        raise ArgumentError.new("Missing the required parameter 'targeting_types' when calling AdGroupsApi.ad_groups_targeting_analytics_get")
      end
      if @api_client.config.client_side_validation && targeting_types.size > 15
        raise ArgumentError.new("invalid value for \"targeting_types\" when calling AdGroupsApi.ad_groups_targeting_analytics_get, number of items must be less than or equal to 15.")
      end

      if @api_client.config.client_side_validation && targeting_types.size < 1
        raise ArgumentError.new("invalid value for \"targeting_types\" when calling AdGroupsApi.ad_groups_targeting_analytics_get, number of items must be greater than or equal to 1.")
      end

      # verify the required parameter "columns" is set
      if @api_client.config.client_side_validation && columns.nil?
        raise ArgumentError.new("Missing the required parameter 'columns' when calling AdGroupsApi.ad_groups_targeting_analytics_get")
      end
      # verify the required parameter "granularity" is set
      if @api_client.config.client_side_validation && granularity.nil?
        raise ArgumentError.new("Missing the required parameter 'granularity' when calling AdGroupsApi.ad_groups_targeting_analytics_get")
      end
      allowable_values = ["0", "1", "7", "14", "30", "60"]
      if @api_client.config.client_side_validation && click_window_days && !allowable_values.includes?(click_window_days)
        raise ArgumentError.new("invalid value for \"click_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["0", "1", "7", "14", "30", "60"]
      if @api_client.config.client_side_validation && engagement_window_days && !allowable_values.includes?(engagement_window_days)
        raise ArgumentError.new("invalid value for \"engagement_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["0", "1", "7", "14", "30", "60"]
      if @api_client.config.client_side_validation && view_window_days && !allowable_values.includes?(view_window_days)
        raise ArgumentError.new("invalid value for \"view_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["TIME_OF_AD_ACTION", "TIME_OF_CONVERSION"]
      if @api_client.config.client_side_validation && conversion_report_time && !allowable_values.includes?(conversion_report_time)
        raise ArgumentError.new("invalid value for \"conversion_report_time\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/ad_groups/targeting_analytics".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["ad_group_ids"] = @api_client.build_collection_param(ad_group_ids, :multi)
      query_params["start_date"] = start_date.to_s unless start_date.nil?
      query_params["end_date"] = end_date.to_s unless end_date.nil?
      query_params["targeting_types"] = @api_client.build_collection_param(targeting_types, :csv)
      query_params["columns"] = @api_client.build_collection_param(columns, :csv)
      query_params["granularity"] = granularity.to_s unless granularity.nil?
      query_params["click_window_days"] = click_window_days.to_s unless click_window_days.nil?
      query_params["engagement_window_days"] = engagement_window_days.to_s unless engagement_window_days.nil?
      query_params["view_window_days"] = view_window_days.to_s unless view_window_days.nil?
      query_params["conversion_report_time"] = conversion_report_time.to_s unless conversion_report_time.nil?
      query_params["attribution_types"] = attribution_types.to_s unless attribution_types.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "MetricsResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AdGroupsApi.ad_groups_targeting_analytics_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdGroupsApi#ad_groups_targeting_analytics_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return MetricsResponse.from_json(data), status_code, headers
    end

    # Update ad groups
    # Update multiple existing ad groups.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param ad_group_update_request [Array(AdGroupUpdateRequest)] List of ad groups to update, size limit [1, 30].
    # @return [AdGroupArrayResponse]
    def ad_groups_update(ad_account_id : String, ad_group_update_request : Array(AdGroupUpdateRequest))
      data, _status_code, _headers = ad_groups_update_with_http_info(ad_account_id, ad_group_update_request)
      data
    end

    # Update ad groups
    # Update multiple existing ad groups.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param ad_group_update_request [Array(AdGroupUpdateRequest)] List of ad groups to update, size limit [1, 30].
    # @return [Array<(AdGroupArrayResponse, Integer, Hash)>] AdGroupArrayResponse data, response status code and response headers
    def ad_groups_update_with_http_info(ad_account_id : String, ad_group_update_request : Array(AdGroupUpdateRequest))
      if @api_client.config.debugging
        Log.debug {"Calling API: AdGroupsApi.ad_groups_update ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdGroupsApi.ad_groups_update")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdGroupsApi.ad_groups_update, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdGroupsApi.ad_groups_update, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "ad_group_update_request" is set
      if @api_client.config.client_side_validation && ad_group_update_request.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_group_update_request' when calling AdGroupsApi.ad_groups_update")
      end
      if @api_client.config.client_side_validation && ad_group_update_request.size > 30
        raise ArgumentError.new("invalid value for \"ad_group_update_request\" when calling AdGroupsApi.ad_groups_update, number of items must be less than or equal to 30.")
      end

      if @api_client.config.client_side_validation && ad_group_update_request.size < 1
        raise ArgumentError.new("invalid value for \"ad_group_update_request\" when calling AdGroupsApi.ad_groups_update, number of items must be greater than or equal to 1.")
      end

      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/ad_groups".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = ad_group_update_request.to_json

      # return_type
      return_type = "AdGroupArrayResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"AdGroupsApi.ad_groups_update",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdGroupsApi#ad_groups_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AdGroupArrayResponse.from_json(data), status_code, headers
    end
  end
end
