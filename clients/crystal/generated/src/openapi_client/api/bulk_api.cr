# #Pinterest REST API
#
##Pinterest's REST API
#
#The version of the OpenAPI document: 5.14.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.9.0
#

require "uri"

module OpenAPIClient
  class BulkApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get advertiser entities in bulk
    # Create an asynchronous report that may include information on campaigns, ad groups, product groups, ads, and/or keywords; can filter by campaigns. Though the entities may be active, archived, or paused, only active entities will return data.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param bulk_download_request [BulkDownloadRequest] Parameters to get ad entities in bulk
    # @return [BulkDownloadResponse]
    def bulk_download_create(ad_account_id : String, bulk_download_request : BulkDownloadRequest)
      data, _status_code, _headers = bulk_download_create_with_http_info(ad_account_id, bulk_download_request)
      data
    end

    # Get advertiser entities in bulk
    # Create an asynchronous report that may include information on campaigns, ad groups, product groups, ads, and/or keywords; can filter by campaigns. Though the entities may be active, archived, or paused, only active entities will return data.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param bulk_download_request [BulkDownloadRequest] Parameters to get ad entities in bulk
    # @return [Array<(BulkDownloadResponse, Integer, Hash)>] BulkDownloadResponse data, response status code and response headers
    def bulk_download_create_with_http_info(ad_account_id : String, bulk_download_request : BulkDownloadRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: BulkApi.bulk_download_create ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling BulkApi.bulk_download_create")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling BulkApi.bulk_download_create, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling BulkApi.bulk_download_create, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "bulk_download_request" is set
      if @api_client.config.client_side_validation && bulk_download_request.nil?
        raise ArgumentError.new("Missing the required parameter 'bulk_download_request' when calling BulkApi.bulk_download_create")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/bulk/download".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = bulk_download_request.to_json

      # return_type
      return_type = "BulkDownloadResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"BulkApi.bulk_download_create",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BulkApi#bulk_download_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return BulkDownloadResponse.from_json(data), status_code, headers
    end

    # Download advertiser entities in bulk
    # Get the status of a bulk request by <code>request_id</code>, along with a download URL that will allow you to download the new or updated entity data (campaigns, ad groups, product groups, ads, or keywords).
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param bulk_request_id [String] Unique identifier of a bulk upsert request.
    # @return [BulkUpsertStatusResponse]
    def bulk_request_get(ad_account_id : String, bulk_request_id : String, include_details : Bool?)
      data, _status_code, _headers = bulk_request_get_with_http_info(ad_account_id, bulk_request_id, include_details)
      data
    end

    # Download advertiser entities in bulk
    # Get the status of a bulk request by &lt;code&gt;request_id&lt;/code&gt;, along with a download URL that will allow you to download the new or updated entity data (campaigns, ad groups, product groups, ads, or keywords).
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param bulk_request_id [String] Unique identifier of a bulk upsert request.
    # @return [Array<(BulkUpsertStatusResponse, Integer, Hash)>] BulkUpsertStatusResponse data, response status code and response headers
    def bulk_request_get_with_http_info(ad_account_id : String, bulk_request_id : String, include_details : Bool?)
      if @api_client.config.debugging
        Log.debug {"Calling API: BulkApi.bulk_request_get ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling BulkApi.bulk_request_get")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling BulkApi.bulk_request_get, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling BulkApi.bulk_request_get, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "bulk_request_id" is set
      if @api_client.config.client_side_validation && bulk_request_id.nil?
        raise ArgumentError.new("Missing the required parameter 'bulk_request_id' when calling BulkApi.bulk_request_get")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/bulk/{bulk_request_id}".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s)).sub("{" + "bulk_request_id" + "}", URI.encode_path(bulk_request_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["include_details"] = include_details.to_s unless include_details.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "BulkUpsertStatusResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BulkApi.bulk_request_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BulkApi#bulk_request_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return BulkUpsertStatusResponse.from_json(data), status_code, headers
    end

    # Create/update ad entities in bulk
    # Either create or update any combination of campaigns, ad groups, product groups, ads, or keywords. Note that this request will be processed asynchronously; the response will include a <code>request_id</code> that can be used to obtain the status of the request.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param bulk_upsert_request [BulkUpsertRequest] Parameters to get create/update ad entities in bulk
    # @return [BulkUpsertResponse]
    def bulk_upsert_create(ad_account_id : String, bulk_upsert_request : BulkUpsertRequest)
      data, _status_code, _headers = bulk_upsert_create_with_http_info(ad_account_id, bulk_upsert_request)
      data
    end

    # Create/update ad entities in bulk
    # Either create or update any combination of campaigns, ad groups, product groups, ads, or keywords. Note that this request will be processed asynchronously; the response will include a &lt;code&gt;request_id&lt;/code&gt; that can be used to obtain the status of the request.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param bulk_upsert_request [BulkUpsertRequest] Parameters to get create/update ad entities in bulk
    # @return [Array<(BulkUpsertResponse, Integer, Hash)>] BulkUpsertResponse data, response status code and response headers
    def bulk_upsert_create_with_http_info(ad_account_id : String, bulk_upsert_request : BulkUpsertRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: BulkApi.bulk_upsert_create ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling BulkApi.bulk_upsert_create")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling BulkApi.bulk_upsert_create, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling BulkApi.bulk_upsert_create, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "bulk_upsert_request" is set
      if @api_client.config.client_side_validation && bulk_upsert_request.nil?
        raise ArgumentError.new("Missing the required parameter 'bulk_upsert_request' when calling BulkApi.bulk_upsert_create")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/bulk/upsert".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = bulk_upsert_request.to_json

      # return_type
      return_type = "BulkUpsertResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"BulkApi.bulk_upsert_create",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BulkApi#bulk_upsert_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return BulkUpsertResponse.from_json(data), status_code, headers
    end
  end
end
