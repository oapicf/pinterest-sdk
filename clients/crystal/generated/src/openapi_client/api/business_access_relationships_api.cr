# #Pinterest REST API
#
##Pinterest's REST API
#
#The version of the OpenAPI document: 5.14.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.9.0
#

require "uri"

module OpenAPIClient
  class BusinessAccessRelationshipsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Terminate business memberships
    # Terminate memberships between the specified members and your business.
    # @param business_id [String] Business id
    # @param members_to_delete_body [MembersToDeleteBody] List of members with role to delete.
    # @return [DeletedMembersResponse]
    def delete_business_membership(business_id : String, members_to_delete_body : MembersToDeleteBody)
      data, _status_code, _headers = delete_business_membership_with_http_info(business_id, members_to_delete_body)
      data
    end

    # Terminate business memberships
    # Terminate memberships between the specified members and your business.
    # @param business_id [String] Business id
    # @param members_to_delete_body [MembersToDeleteBody] List of members with role to delete.
    # @return [Array<(DeletedMembersResponse, Integer, Hash)>] DeletedMembersResponse data, response status code and response headers
    def delete_business_membership_with_http_info(business_id : String, members_to_delete_body : MembersToDeleteBody)
      if @api_client.config.debugging
        Log.debug {"Calling API: BusinessAccessRelationshipsApi.delete_business_membership ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling BusinessAccessRelationshipsApi.delete_business_membership")
      end
      if @api_client.config.client_side_validation && business_id.to_s.size > 20
        raise ArgumentError.new("invalid value for \"business_id\" when calling BusinessAccessRelationshipsApi.delete_business_membership, the character length must be smaller than or equal to 20.")
      end

      if @api_client.config.client_side_validation && business_id.to_s.size < 1
        raise ArgumentError.new("invalid value for \"business_id\" when calling BusinessAccessRelationshipsApi.delete_business_membership, the character length must be great than or equal to 1.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && business_id !~ pattern
        raise ArgumentError.new("invalid value for \"business_id\" when calling BusinessAccessRelationshipsApi.delete_business_membership, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "members_to_delete_body" is set
      if @api_client.config.client_side_validation && members_to_delete_body.nil?
        raise ArgumentError.new("Missing the required parameter 'members_to_delete_body' when calling BusinessAccessRelationshipsApi.delete_business_membership")
      end
      # resource path
      local_var_path = "/businesses/{business_id}/members".sub("{" + "business_id" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = members_to_delete_body.to_json

      # return_type
      return_type = "DeletedMembersResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"BusinessAccessRelationshipsApi.delete_business_membership",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BusinessAccessRelationshipsApi#delete_business_membership\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return DeletedMembersResponse.from_json(data), status_code, headers
    end

    # Terminate business partnerships
    # Terminate partnerships between the specified partners and your business. Note: You may only batch terminate partners of the same partner type.
    # @param business_id [String] Unique identifier of the requesting business.
    # @param delete_partners_request [DeletePartnersRequest] An object containing a \&quot;partner_ids\&quot; property composed of a list of partner IDs and a \&quot;partners_type\&quot; property specifying the type of partners to delete. 
    # @return [DeletePartnersResponse]
    def delete_business_partners(business_id : String, delete_partners_request : DeletePartnersRequest)
      data, _status_code, _headers = delete_business_partners_with_http_info(business_id, delete_partners_request)
      data
    end

    # Terminate business partnerships
    # Terminate partnerships between the specified partners and your business. Note: You may only batch terminate partners of the same partner type.
    # @param business_id [String] Unique identifier of the requesting business.
    # @param delete_partners_request [DeletePartnersRequest] An object containing a \&quot;partner_ids\&quot; property composed of a list of partner IDs and a \&quot;partners_type\&quot; property specifying the type of partners to delete. 
    # @return [Array<(DeletePartnersResponse, Integer, Hash)>] DeletePartnersResponse data, response status code and response headers
    def delete_business_partners_with_http_info(business_id : String, delete_partners_request : DeletePartnersRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: BusinessAccessRelationshipsApi.delete_business_partners ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling BusinessAccessRelationshipsApi.delete_business_partners")
      end
      if @api_client.config.client_side_validation && business_id.to_s.size > 20
        raise ArgumentError.new("invalid value for \"business_id\" when calling BusinessAccessRelationshipsApi.delete_business_partners, the character length must be smaller than or equal to 20.")
      end

      if @api_client.config.client_side_validation && business_id.to_s.size < 1
        raise ArgumentError.new("invalid value for \"business_id\" when calling BusinessAccessRelationshipsApi.delete_business_partners, the character length must be great than or equal to 1.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && business_id !~ pattern
        raise ArgumentError.new("invalid value for \"business_id\" when calling BusinessAccessRelationshipsApi.delete_business_partners, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "delete_partners_request" is set
      if @api_client.config.client_side_validation && delete_partners_request.nil?
        raise ArgumentError.new("Missing the required parameter 'delete_partners_request' when calling BusinessAccessRelationshipsApi.delete_business_partners")
      end
      # resource path
      local_var_path = "/businesses/{business_id}/partners".sub("{" + "business_id" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = delete_partners_request.to_json

      # return_type
      return_type = "DeletePartnersResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"BusinessAccessRelationshipsApi.delete_business_partners",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BusinessAccessRelationshipsApi#delete_business_partners\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return DeletePartnersResponse.from_json(data), status_code, headers
    end

    # List business employers for user
    # Get all of the viewing user's business employers.
    # @return [GetBusinessEmployers200Response]
    def get_business_employers(page_size : Int32?, bookmark : String?)
      data, _status_code, _headers = get_business_employers_with_http_info(page_size, bookmark)
      data
    end

    # List business employers for user
    # Get all of the viewing user&#39;s business employers.
    # @return [Array<(GetBusinessEmployers200Response, Integer, Hash)>] GetBusinessEmployers200Response data, response status code and response headers
    def get_business_employers_with_http_info(page_size : Int32?, bookmark : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: BusinessAccessRelationshipsApi.get_business_employers ..."}
      end
      if @api_client.config.client_side_validation && !page_size.nil? && page_size > 250
        raise ArgumentError.new("invalid value for \"page_size\" when calling BusinessAccessRelationshipsApi.get_business_employers, must be smaller than or equal to 250.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size < 1
        raise ArgumentError.new("invalid value for \"page_size\" when calling BusinessAccessRelationshipsApi.get_business_employers, must be greater than or equal to 1.")
      end

      # resource path
      local_var_path = "/businesses/employers"

      # query parameters
      query_params = Hash(String, String).new
      query_params["page_size"] = page_size.to_s unless page_size.nil?
      query_params["bookmark"] = bookmark.to_s unless bookmark.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetBusinessEmployers200Response"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BusinessAccessRelationshipsApi.get_business_employers",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BusinessAccessRelationshipsApi#get_business_employers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetBusinessEmployers200Response.from_json(data), status_code, headers
    end

    # Get business members
    # Get all members of the specified business. The return response will include the member's business_role and assets they have access to if assets_summary=TRUE
    # @param business_id [String] Unique identifier of the requesting business.
    # @return [GetBusinessMembers200Response]
    def get_business_members(business_id : String, assets_summary : Bool?, business_roles : Array(MemberBusinessRole)?, member_ids : String?, start_index : Int32?, bookmark : String?, page_size : Int32?)
      data, _status_code, _headers = get_business_members_with_http_info(business_id, assets_summary, business_roles, member_ids, start_index, bookmark, page_size)
      data
    end

    # Get business members
    # Get all members of the specified business. The return response will include the member&#39;s business_role and assets they have access to if assets_summary&#x3D;TRUE
    # @param business_id [String] Unique identifier of the requesting business.
    # @return [Array<(GetBusinessMembers200Response, Integer, Hash)>] GetBusinessMembers200Response data, response status code and response headers
    def get_business_members_with_http_info(business_id : String, assets_summary : Bool?, business_roles : Array(MemberBusinessRole)?, member_ids : String?, start_index : Int32?, bookmark : String?, page_size : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: BusinessAccessRelationshipsApi.get_business_members ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling BusinessAccessRelationshipsApi.get_business_members")
      end
      if @api_client.config.client_side_validation && business_id.to_s.size > 20
        raise ArgumentError.new("invalid value for \"business_id\" when calling BusinessAccessRelationshipsApi.get_business_members, the character length must be smaller than or equal to 20.")
      end

      if @api_client.config.client_side_validation && business_id.to_s.size < 1
        raise ArgumentError.new("invalid value for \"business_id\" when calling BusinessAccessRelationshipsApi.get_business_members, the character length must be great than or equal to 1.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && business_id !~ pattern
        raise ArgumentError.new("invalid value for \"business_id\" when calling BusinessAccessRelationshipsApi.get_business_members, must conform to the pattern #{pattern}.")
      end

      if @api_client.config.client_side_validation && !member_ids.nil? && member_ids.to_s.size > 500
        raise ArgumentError.new("invalid value for \"member_ids\" when calling BusinessAccessRelationshipsApi.get_business_members, the character length must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && !start_index.nil? && start_index < 0
        raise ArgumentError.new("invalid value for \"start_index\" when calling BusinessAccessRelationshipsApi.get_business_members, must be greater than or equal to 0.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size > 250
        raise ArgumentError.new("invalid value for \"page_size\" when calling BusinessAccessRelationshipsApi.get_business_members, must be smaller than or equal to 250.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size < 1
        raise ArgumentError.new("invalid value for \"page_size\" when calling BusinessAccessRelationshipsApi.get_business_members, must be greater than or equal to 1.")
      end

      # resource path
      local_var_path = "/businesses/{business_id}/members".sub("{" + "business_id" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["assets_summary"] = assets_summary.to_s unless assets_summary.nil?
      query_params["business_roles"] = @api_client.build_collection_param(business_roles, :multi)
      query_params["member_ids"] = member_ids.to_s unless member_ids.nil?
      query_params["start_index"] = start_index.to_s unless start_index.nil?
      query_params["bookmark"] = bookmark.to_s unless bookmark.nil?
      query_params["page_size"] = page_size.to_s unless page_size.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetBusinessMembers200Response"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BusinessAccessRelationshipsApi.get_business_members",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BusinessAccessRelationshipsApi#get_business_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetBusinessMembers200Response.from_json(data), status_code, headers
    end

    # Get business partners
    # Get all partners of the specified business.  If the assets_summary=TRUE and: - partner_type=INTERNAL, the business assets returned are your business assets the partner has access to. - partner_type=EXTERNAL, the business assets returned are your partner's business assets the partner has granted you   access to.
    # @param business_id [String] Unique identifier of the requesting business.
    # @return [GetBusinessPartners200Response]
    def get_business_partners(business_id : String, assets_summary : Bool?, partner_type : PartnerType?, partner_ids : String?, start_index : Int32?, page_size : Int32?, bookmark : String?)
      data, _status_code, _headers = get_business_partners_with_http_info(business_id, assets_summary, partner_type, partner_ids, start_index, page_size, bookmark)
      data
    end

    # Get business partners
    # Get all partners of the specified business.  If the assets_summary&#x3D;TRUE and: - partner_type&#x3D;INTERNAL, the business assets returned are your business assets the partner has access to. - partner_type&#x3D;EXTERNAL, the business assets returned are your partner&#39;s business assets the partner has granted you   access to.
    # @param business_id [String] Unique identifier of the requesting business.
    # @return [Array<(GetBusinessPartners200Response, Integer, Hash)>] GetBusinessPartners200Response data, response status code and response headers
    def get_business_partners_with_http_info(business_id : String, assets_summary : Bool?, partner_type : PartnerType?, partner_ids : String?, start_index : Int32?, page_size : Int32?, bookmark : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: BusinessAccessRelationshipsApi.get_business_partners ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling BusinessAccessRelationshipsApi.get_business_partners")
      end
      if @api_client.config.client_side_validation && business_id.to_s.size > 20
        raise ArgumentError.new("invalid value for \"business_id\" when calling BusinessAccessRelationshipsApi.get_business_partners, the character length must be smaller than or equal to 20.")
      end

      if @api_client.config.client_side_validation && business_id.to_s.size < 1
        raise ArgumentError.new("invalid value for \"business_id\" when calling BusinessAccessRelationshipsApi.get_business_partners, the character length must be great than or equal to 1.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && business_id !~ pattern
        raise ArgumentError.new("invalid value for \"business_id\" when calling BusinessAccessRelationshipsApi.get_business_partners, must conform to the pattern #{pattern}.")
      end

      if @api_client.config.client_side_validation && !partner_ids.nil? && partner_ids.to_s.size > 500
        raise ArgumentError.new("invalid value for \"partner_ids\" when calling BusinessAccessRelationshipsApi.get_business_partners, the character length must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && !start_index.nil? && start_index < 0
        raise ArgumentError.new("invalid value for \"start_index\" when calling BusinessAccessRelationshipsApi.get_business_partners, must be greater than or equal to 0.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size > 250
        raise ArgumentError.new("invalid value for \"page_size\" when calling BusinessAccessRelationshipsApi.get_business_partners, must be smaller than or equal to 250.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size < 1
        raise ArgumentError.new("invalid value for \"page_size\" when calling BusinessAccessRelationshipsApi.get_business_partners, must be greater than or equal to 1.")
      end

      # resource path
      local_var_path = "/businesses/{business_id}/partners".sub("{" + "business_id" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["assets_summary"] = assets_summary.to_s unless assets_summary.nil?
      query_params["partner_type"] = partner_type.to_s unless partner_type.nil?
      query_params["partner_ids"] = partner_ids.to_s unless partner_ids.nil?
      query_params["start_index"] = start_index.to_s unless start_index.nil?
      query_params["page_size"] = page_size.to_s unless page_size.nil?
      query_params["bookmark"] = bookmark.to_s unless bookmark.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetBusinessPartners200Response"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BusinessAccessRelationshipsApi.get_business_partners",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BusinessAccessRelationshipsApi#get_business_partners\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetBusinessPartners200Response.from_json(data), status_code, headers
    end

    # Update member's business role
    # Update a member's business role within the business.
    # @param business_id [String] Business id
    # @param update_member_business_role_body [Array(UpdateMemberBusinessRoleBody)] List of objects with the member id and the business_role.
    # @return [UpdateMemberResultsResponseArray]
    def update_business_memberships(business_id : String, update_member_business_role_body : Array(UpdateMemberBusinessRoleBody))
      data, _status_code, _headers = update_business_memberships_with_http_info(business_id, update_member_business_role_body)
      data
    end

    # Update member&#39;s business role
    # Update a member&#39;s business role within the business.
    # @param business_id [String] Business id
    # @param update_member_business_role_body [Array(UpdateMemberBusinessRoleBody)] List of objects with the member id and the business_role.
    # @return [Array<(UpdateMemberResultsResponseArray, Integer, Hash)>] UpdateMemberResultsResponseArray data, response status code and response headers
    def update_business_memberships_with_http_info(business_id : String, update_member_business_role_body : Array(UpdateMemberBusinessRoleBody))
      if @api_client.config.debugging
        Log.debug {"Calling API: BusinessAccessRelationshipsApi.update_business_memberships ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling BusinessAccessRelationshipsApi.update_business_memberships")
      end
      if @api_client.config.client_side_validation && business_id.to_s.size > 20
        raise ArgumentError.new("invalid value for \"business_id\" when calling BusinessAccessRelationshipsApi.update_business_memberships, the character length must be smaller than or equal to 20.")
      end

      if @api_client.config.client_side_validation && business_id.to_s.size < 1
        raise ArgumentError.new("invalid value for \"business_id\" when calling BusinessAccessRelationshipsApi.update_business_memberships, the character length must be great than or equal to 1.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && business_id !~ pattern
        raise ArgumentError.new("invalid value for \"business_id\" when calling BusinessAccessRelationshipsApi.update_business_memberships, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "update_member_business_role_body" is set
      if @api_client.config.client_side_validation && update_member_business_role_body.nil?
        raise ArgumentError.new("Missing the required parameter 'update_member_business_role_body' when calling BusinessAccessRelationshipsApi.update_business_memberships")
      end
      if @api_client.config.client_side_validation && update_member_business_role_body.size < 1
        raise ArgumentError.new("invalid value for \"update_member_business_role_body\" when calling BusinessAccessRelationshipsApi.update_business_memberships, number of items must be greater than or equal to 1.")
      end

      # resource path
      local_var_path = "/businesses/{business_id}/members".sub("{" + "business_id" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = update_member_business_role_body.to_json

      # return_type
      return_type = "UpdateMemberResultsResponseArray"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"BusinessAccessRelationshipsApi.update_business_memberships",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BusinessAccessRelationshipsApi#update_business_memberships\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return UpdateMemberResultsResponseArray.from_json(data), status_code, headers
    end
  end
end
