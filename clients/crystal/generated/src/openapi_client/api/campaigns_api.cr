# #Pinterest REST API
#
##Pinterest's REST API
#
#The version of the OpenAPI document: 5.14.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.9.0
#

require "uri"

module OpenAPIClient
  class CampaignsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get targeting analytics for campaigns
    # Get targeting analytics for one or more campaigns. For the requested account and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \"age_bucket\") for applicable values (e.g. \"45-49\"). <p/> - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param campaign_ids [Array(String)] List of Campaign Ids to use to filter the results.
    # @param start_date [Time] Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
    # @param end_date [Time] Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
    # @param targeting_types [Array(AdsAnalyticsCampaignTargetingType)] Targeting type breakdowns for the report. The reporting per targeting type &lt;br&gt; is independent from each other. [\&quot;AGE_BUCKET_AND_GENDER\&quot;] is in BETA and not yet available to all users.
    # @param columns [Array(String)] Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
    # @param granularity [Granularity] TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
    # @return [MetricsResponse]
    def campaign_targeting_analytics_get(ad_account_id : String, campaign_ids : Array(String), start_date : Time, end_date : Time, targeting_types : Array(AdsAnalyticsCampaignTargetingType), columns : Array(String), granularity : Granularity, click_window_days : Int32?, engagement_window_days : Int32?, view_window_days : Int32?, conversion_report_time : String?, attribution_types : ConversionReportAttributionType?)
      data, _status_code, _headers = campaign_targeting_analytics_get_with_http_info(ad_account_id, campaign_ids, start_date, end_date, targeting_types, columns, granularity, click_window_days, engagement_window_days, view_window_days, conversion_report_time, attribution_types)
      data
    end

    # Get targeting analytics for campaigns
    # Get targeting analytics for one or more campaigns. For the requested account and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \&quot;age_bucket\&quot;) for applicable values (e.g. \&quot;45-49\&quot;). &lt;p/&gt; - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param campaign_ids [Array(String)] List of Campaign Ids to use to filter the results.
    # @param start_date [Time] Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
    # @param end_date [Time] Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
    # @param targeting_types [Array(AdsAnalyticsCampaignTargetingType)] Targeting type breakdowns for the report. The reporting per targeting type &lt;br&gt; is independent from each other. [\&quot;AGE_BUCKET_AND_GENDER\&quot;] is in BETA and not yet available to all users.
    # @param columns [Array(String)] Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
    # @param granularity [Granularity] TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
    # @return [Array<(MetricsResponse, Integer, Hash)>] MetricsResponse data, response status code and response headers
    def campaign_targeting_analytics_get_with_http_info(ad_account_id : String, campaign_ids : Array(String), start_date : Time, end_date : Time, targeting_types : Array(AdsAnalyticsCampaignTargetingType), columns : Array(String), granularity : Granularity, click_window_days : Int32?, engagement_window_days : Int32?, view_window_days : Int32?, conversion_report_time : String?, attribution_types : ConversionReportAttributionType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: CampaignsApi.campaign_targeting_analytics_get ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling CampaignsApi.campaign_targeting_analytics_get")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling CampaignsApi.campaign_targeting_analytics_get, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling CampaignsApi.campaign_targeting_analytics_get, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "campaign_ids" is set
      if @api_client.config.client_side_validation && campaign_ids.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_ids' when calling CampaignsApi.campaign_targeting_analytics_get")
      end
      if @api_client.config.client_side_validation && campaign_ids.size > 100
        raise ArgumentError.new("invalid value for \"campaign_ids\" when calling CampaignsApi.campaign_targeting_analytics_get, number of items must be less than or equal to 100.")
      end

      if @api_client.config.client_side_validation && campaign_ids.size < 1
        raise ArgumentError.new("invalid value for \"campaign_ids\" when calling CampaignsApi.campaign_targeting_analytics_get, number of items must be greater than or equal to 1.")
      end

      # verify the required parameter "start_date" is set
      if @api_client.config.client_side_validation && start_date.nil?
        raise ArgumentError.new("Missing the required parameter 'start_date' when calling CampaignsApi.campaign_targeting_analytics_get")
      end
      # verify the required parameter "end_date" is set
      if @api_client.config.client_side_validation && end_date.nil?
        raise ArgumentError.new("Missing the required parameter 'end_date' when calling CampaignsApi.campaign_targeting_analytics_get")
      end
      # verify the required parameter "targeting_types" is set
      if @api_client.config.client_side_validation && targeting_types.nil?
        raise ArgumentError.new("Missing the required parameter 'targeting_types' when calling CampaignsApi.campaign_targeting_analytics_get")
      end
      if @api_client.config.client_side_validation && targeting_types.size > 14
        raise ArgumentError.new("invalid value for \"targeting_types\" when calling CampaignsApi.campaign_targeting_analytics_get, number of items must be less than or equal to 14.")
      end

      if @api_client.config.client_side_validation && targeting_types.size < 1
        raise ArgumentError.new("invalid value for \"targeting_types\" when calling CampaignsApi.campaign_targeting_analytics_get, number of items must be greater than or equal to 1.")
      end

      # verify the required parameter "columns" is set
      if @api_client.config.client_side_validation && columns.nil?
        raise ArgumentError.new("Missing the required parameter 'columns' when calling CampaignsApi.campaign_targeting_analytics_get")
      end
      # verify the required parameter "granularity" is set
      if @api_client.config.client_side_validation && granularity.nil?
        raise ArgumentError.new("Missing the required parameter 'granularity' when calling CampaignsApi.campaign_targeting_analytics_get")
      end
      allowable_values = ["0", "1", "7", "14", "30", "60"]
      if @api_client.config.client_side_validation && click_window_days && !allowable_values.includes?(click_window_days)
        raise ArgumentError.new("invalid value for \"click_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["0", "1", "7", "14", "30", "60"]
      if @api_client.config.client_side_validation && engagement_window_days && !allowable_values.includes?(engagement_window_days)
        raise ArgumentError.new("invalid value for \"engagement_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["0", "1", "7", "14", "30", "60"]
      if @api_client.config.client_side_validation && view_window_days && !allowable_values.includes?(view_window_days)
        raise ArgumentError.new("invalid value for \"view_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["TIME_OF_AD_ACTION", "TIME_OF_CONVERSION"]
      if @api_client.config.client_side_validation && conversion_report_time && !allowable_values.includes?(conversion_report_time)
        raise ArgumentError.new("invalid value for \"conversion_report_time\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/campaigns/targeting_analytics".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["campaign_ids"] = @api_client.build_collection_param(campaign_ids, :multi)
      query_params["start_date"] = start_date.to_s unless start_date.nil?
      query_params["end_date"] = end_date.to_s unless end_date.nil?
      query_params["targeting_types"] = @api_client.build_collection_param(targeting_types, :csv)
      query_params["columns"] = @api_client.build_collection_param(columns, :csv)
      query_params["granularity"] = granularity.to_s unless granularity.nil?
      query_params["click_window_days"] = click_window_days.to_s unless click_window_days.nil?
      query_params["engagement_window_days"] = engagement_window_days.to_s unless engagement_window_days.nil?
      query_params["view_window_days"] = view_window_days.to_s unless view_window_days.nil?
      query_params["conversion_report_time"] = conversion_report_time.to_s unless conversion_report_time.nil?
      query_params["attribution_types"] = attribution_types.to_s unless attribution_types.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "MetricsResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"CampaignsApi.campaign_targeting_analytics_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: CampaignsApi#campaign_targeting_analytics_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return MetricsResponse.from_json(data), status_code, headers
    end

    # Get campaign analytics
    # Get analytics for the specified campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param start_date [Time] Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
    # @param end_date [Time] Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
    # @param campaign_ids [Array(String)] List of Campaign Ids to use to filter the results.
    # @param columns [Array(String)] Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
    # @param granularity [Granularity] TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
    # @return [Array(CampaignsAnalyticsResponseInner)]
    def campaigns_analytics(ad_account_id : String, start_date : Time, end_date : Time, campaign_ids : Array(String), columns : Array(String), granularity : Granularity, click_window_days : Int32?, engagement_window_days : Int32?, view_window_days : Int32?, conversion_report_time : String?)
      data, _status_code, _headers = campaigns_analytics_with_http_info(ad_account_id, start_date, end_date, campaign_ids, columns, granularity, click_window_days, engagement_window_days, view_window_days, conversion_report_time)
      data
    end

    # Get campaign analytics
    # Get analytics for the specified campaigns in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param start_date [Time] Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
    # @param end_date [Time] Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
    # @param campaign_ids [Array(String)] List of Campaign Ids to use to filter the results.
    # @param columns [Array(String)] Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
    # @param granularity [Granularity] TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
    # @return [Array<(Array(CampaignsAnalyticsResponseInner), Integer, Hash)>] Array(CampaignsAnalyticsResponseInner) data, response status code and response headers
    def campaigns_analytics_with_http_info(ad_account_id : String, start_date : Time, end_date : Time, campaign_ids : Array(String), columns : Array(String), granularity : Granularity, click_window_days : Int32?, engagement_window_days : Int32?, view_window_days : Int32?, conversion_report_time : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: CampaignsApi.campaigns_analytics ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling CampaignsApi.campaigns_analytics")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling CampaignsApi.campaigns_analytics, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling CampaignsApi.campaigns_analytics, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "start_date" is set
      if @api_client.config.client_side_validation && start_date.nil?
        raise ArgumentError.new("Missing the required parameter 'start_date' when calling CampaignsApi.campaigns_analytics")
      end
      # verify the required parameter "end_date" is set
      if @api_client.config.client_side_validation && end_date.nil?
        raise ArgumentError.new("Missing the required parameter 'end_date' when calling CampaignsApi.campaigns_analytics")
      end
      # verify the required parameter "campaign_ids" is set
      if @api_client.config.client_side_validation && campaign_ids.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_ids' when calling CampaignsApi.campaigns_analytics")
      end
      if @api_client.config.client_side_validation && campaign_ids.size > 100
        raise ArgumentError.new("invalid value for \"campaign_ids\" when calling CampaignsApi.campaigns_analytics, number of items must be less than or equal to 100.")
      end

      if @api_client.config.client_side_validation && campaign_ids.size < 1
        raise ArgumentError.new("invalid value for \"campaign_ids\" when calling CampaignsApi.campaigns_analytics, number of items must be greater than or equal to 1.")
      end

      # verify the required parameter "columns" is set
      if @api_client.config.client_side_validation && columns.nil?
        raise ArgumentError.new("Missing the required parameter 'columns' when calling CampaignsApi.campaigns_analytics")
      end
      # verify the required parameter "granularity" is set
      if @api_client.config.client_side_validation && granularity.nil?
        raise ArgumentError.new("Missing the required parameter 'granularity' when calling CampaignsApi.campaigns_analytics")
      end
      allowable_values = ["0", "1", "7", "14", "30", "60"]
      if @api_client.config.client_side_validation && click_window_days && !allowable_values.includes?(click_window_days)
        raise ArgumentError.new("invalid value for \"click_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["0", "1", "7", "14", "30", "60"]
      if @api_client.config.client_side_validation && engagement_window_days && !allowable_values.includes?(engagement_window_days)
        raise ArgumentError.new("invalid value for \"engagement_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["0", "1", "7", "14", "30", "60"]
      if @api_client.config.client_side_validation && view_window_days && !allowable_values.includes?(view_window_days)
        raise ArgumentError.new("invalid value for \"view_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["TIME_OF_AD_ACTION", "TIME_OF_CONVERSION"]
      if @api_client.config.client_side_validation && conversion_report_time && !allowable_values.includes?(conversion_report_time)
        raise ArgumentError.new("invalid value for \"conversion_report_time\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/campaigns/analytics".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["start_date"] = start_date.to_s unless start_date.nil?
      query_params["end_date"] = end_date.to_s unless end_date.nil?
      query_params["campaign_ids"] = @api_client.build_collection_param(campaign_ids, :multi)
      query_params["columns"] = @api_client.build_collection_param(columns, :csv)
      query_params["granularity"] = granularity.to_s unless granularity.nil?
      query_params["click_window_days"] = click_window_days.to_s unless click_window_days.nil?
      query_params["engagement_window_days"] = engagement_window_days.to_s unless engagement_window_days.nil?
      query_params["view_window_days"] = view_window_days.to_s unless view_window_days.nil?
      query_params["conversion_report_time"] = conversion_report_time.to_s unless conversion_report_time.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(CampaignsAnalyticsResponseInner)"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"CampaignsApi.campaigns_analytics",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: CampaignsApi#campaigns_analytics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(CampaignsAnalyticsResponseInner).from_json(data), status_code, headers
    end

    # Create campaigns
    # Create multiple new campaigns. Every campaign has its own campaign_id and houses one or more ad groups, which contain one or more ads. For more, see <a href=\"https://help.pinterest.com/en/business/article/set-up-your-campaign/\">Set up your campaign</a>. <p/> <strong>Note:</strong> - The values for 'lifetime_spend_cap' and 'daily_spend_cap' are microcurrency amounts based on the currency field set in the advertiser's profile. (e.g. USD) <p/> <p>Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.</p> <p>A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’s profile.</p>  <p><strong>Equivalency equations</strong>, using dollars as an example currency:</p> <ul>   <li>$1 = 1,000,000 microdollars</li>   <li>1 microdollar = $0.000001 </li> </ul> <p><strong>To convert between currency and microcurrency</strong>, using dollars as an example currency:</p> <ul>   <li>To convert dollars to microdollars, mutiply dollars by 1,000,000</li>   <li>To convert microdollars to dollars, divide microdollars by 1,000,000</li> </ul>
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param campaign_create_request [Array(CampaignCreateRequest)] Array of campaigns.
    # @return [CampaignCreateResponse]
    def campaigns_create(ad_account_id : String, campaign_create_request : Array(CampaignCreateRequest))
      data, _status_code, _headers = campaigns_create_with_http_info(ad_account_id, campaign_create_request)
      data
    end

    # Create campaigns
    # Create multiple new campaigns. Every campaign has its own campaign_id and houses one or more ad groups, which contain one or more ads. For more, see &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/set-up-your-campaign/\&quot;&gt;Set up your campaign&lt;/a&gt;. &lt;p/&gt; &lt;strong&gt;Note:&lt;/strong&gt; - The values for &#39;lifetime_spend_cap&#39; and &#39;daily_spend_cap&#39; are microcurrency amounts based on the currency field set in the advertiser&#39;s profile. (e.g. USD) &lt;p/&gt; &lt;p&gt;Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.&lt;/p&gt; &lt;p&gt;A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’s profile.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Equivalency equations&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;$1 &#x3D; 1,000,000 microdollars&lt;/li&gt;   &lt;li&gt;1 microdollar &#x3D; $0.000001 &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;To convert between currency and microcurrency&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;To convert dollars to microdollars, mutiply dollars by 1,000,000&lt;/li&gt;   &lt;li&gt;To convert microdollars to dollars, divide microdollars by 1,000,000&lt;/li&gt; &lt;/ul&gt;
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param campaign_create_request [Array(CampaignCreateRequest)] Array of campaigns.
    # @return [Array<(CampaignCreateResponse, Integer, Hash)>] CampaignCreateResponse data, response status code and response headers
    def campaigns_create_with_http_info(ad_account_id : String, campaign_create_request : Array(CampaignCreateRequest))
      if @api_client.config.debugging
        Log.debug {"Calling API: CampaignsApi.campaigns_create ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling CampaignsApi.campaigns_create")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling CampaignsApi.campaigns_create, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling CampaignsApi.campaigns_create, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "campaign_create_request" is set
      if @api_client.config.client_side_validation && campaign_create_request.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_create_request' when calling CampaignsApi.campaigns_create")
      end
      if @api_client.config.client_side_validation && campaign_create_request.size > 30
        raise ArgumentError.new("invalid value for \"campaign_create_request\" when calling CampaignsApi.campaigns_create, number of items must be less than or equal to 30.")
      end

      if @api_client.config.client_side_validation && campaign_create_request.size < 1
        raise ArgumentError.new("invalid value for \"campaign_create_request\" when calling CampaignsApi.campaigns_create, number of items must be greater than or equal to 1.")
      end

      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/campaigns".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = campaign_create_request.to_json

      # return_type
      return_type = "CampaignCreateResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"CampaignsApi.campaigns_create",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: CampaignsApi#campaigns_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return CampaignCreateResponse.from_json(data), status_code, headers
    end

    # Get campaign
    # Get a specific campaign given the campaign ID.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param campaign_id [String] Campaign ID, must be associated with the ad account ID provided in the path.
    # @return [CampaignResponse]
    def campaigns_get(ad_account_id : String, campaign_id : String)
      data, _status_code, _headers = campaigns_get_with_http_info(ad_account_id, campaign_id)
      data
    end

    # Get campaign
    # Get a specific campaign given the campaign ID.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param campaign_id [String] Campaign ID, must be associated with the ad account ID provided in the path.
    # @return [Array<(CampaignResponse, Integer, Hash)>] CampaignResponse data, response status code and response headers
    def campaigns_get_with_http_info(ad_account_id : String, campaign_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: CampaignsApi.campaigns_get ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling CampaignsApi.campaigns_get")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling CampaignsApi.campaigns_get, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling CampaignsApi.campaigns_get, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling CampaignsApi.campaigns_get")
      end
      if @api_client.config.client_side_validation && campaign_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"campaign_id\" when calling CampaignsApi.campaigns_get, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && campaign_id !~ pattern
        raise ArgumentError.new("invalid value for \"campaign_id\" when calling CampaignsApi.campaigns_get, must conform to the pattern #{pattern}.")
      end

      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/campaigns/{campaign_id}".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s)).sub("{" + "campaign_id" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "CampaignResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"CampaignsApi.campaigns_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: CampaignsApi#campaigns_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return CampaignResponse.from_json(data), status_code, headers
    end

    # List campaigns
    # Get a list of the campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @return [CampaignsList200Response]
    def campaigns_list(ad_account_id : String, campaign_ids : Array(String)?, entity_statuses : Array(String)?, page_size : Int32?, order : String?, bookmark : String?)
      data, _status_code, _headers = campaigns_list_with_http_info(ad_account_id, campaign_ids, entity_statuses, page_size, order, bookmark)
      data
    end

    # List campaigns
    # Get a list of the campaigns in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @return [Array<(CampaignsList200Response, Integer, Hash)>] CampaignsList200Response data, response status code and response headers
    def campaigns_list_with_http_info(ad_account_id : String, campaign_ids : Array(String)?, entity_statuses : Array(String)?, page_size : Int32?, order : String?, bookmark : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: CampaignsApi.campaigns_list ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling CampaignsApi.campaigns_list")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling CampaignsApi.campaigns_list, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling CampaignsApi.campaigns_list, must conform to the pattern #{pattern}.")
      end

      if @api_client.config.client_side_validation && campaign_ids.nil? && campaign_ids.size > 100
        raise ArgumentError.new("invalid value for \"campaign_ids\" when calling CampaignsApi.campaigns_list, number of items must be less than or equal to 100.")
      end

      if @api_client.config.client_side_validation && campaign_ids.nil? && campaign_ids.size < 1
        raise ArgumentError.new("invalid value for \"campaign_ids\" when calling CampaignsApi.campaigns_list, number of items must be greater than or equal to 1.")
      end

      allowable_values = ["ACTIVE", "PAUSED", "ARCHIVED", "DRAFT", "DELETED_DRAFT"]
      if @api_client.config.client_side_validation && entity_statuses && entity_statuses.all? { |item| allowable_values.includes?(item) }
        raise ArgumentError.new("invalid value for \"entity_statuses\", must include one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !page_size.nil? && page_size > 250
        raise ArgumentError.new("invalid value for \"page_size\" when calling CampaignsApi.campaigns_list, must be smaller than or equal to 250.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size < 1
        raise ArgumentError.new("invalid value for \"page_size\" when calling CampaignsApi.campaigns_list, must be greater than or equal to 1.")
      end

      allowable_values = ["ASCENDING", "DESCENDING"]
      if @api_client.config.client_side_validation && order && !allowable_values.includes?(order)
        raise ArgumentError.new("invalid value for \"order\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/campaigns".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["campaign_ids"] = @api_client.build_collection_param(campaign_ids, :multi)
      query_params["entity_statuses"] = @api_client.build_collection_param(entity_statuses, :multi)
      query_params["page_size"] = page_size.to_s unless page_size.nil?
      query_params["order"] = order.to_s unless order.nil?
      query_params["bookmark"] = bookmark.to_s unless bookmark.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "CampaignsList200Response"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"CampaignsApi.campaigns_list",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: CampaignsApi#campaigns_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return CampaignsList200Response.from_json(data), status_code, headers
    end

    # Update campaigns
    # Update multiple ad campaigns based on campaign_ids. <p/> <strong>Note:</strong><p/>  - <p>The values for 'lifetime_spend_cap' and 'daily_spend_cap' are microcurrency amounts based on the currency field set in the advertiser's profile. (e.g. USD) <p/> <p>Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.</p> <p>A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’ s profile.</p> <p><strong>Equivalency equations</strong>, using dollars as an example currency:</p> <ul>   <li>$1 = 1,000,000 microdollars</li>   <li>1 microdollar = $0.000001 </li> </ul> <p><strong>To convert between currency and microcurrency</strong>, using dollars as an example currency:</p> <ul>   <li>To convert dollars to microdollars, mutiply dollars by 1,000,000</li>   <li>To convert microdollars to dollars, divide microdollars by 1,000,000</li> </ul>
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param campaign_update_request [Array(CampaignUpdateRequest)] Array of campaigns.
    # @return [CampaignUpdateResponse]
    def campaigns_update(ad_account_id : String, campaign_update_request : Array(CampaignUpdateRequest))
      data, _status_code, _headers = campaigns_update_with_http_info(ad_account_id, campaign_update_request)
      data
    end

    # Update campaigns
    # Update multiple ad campaigns based on campaign_ids. &lt;p/&gt; &lt;strong&gt;Note:&lt;/strong&gt;&lt;p/&gt;  - &lt;p&gt;The values for &#39;lifetime_spend_cap&#39; and &#39;daily_spend_cap&#39; are microcurrency amounts based on the currency field set in the advertiser&#39;s profile. (e.g. USD) &lt;p/&gt; &lt;p&gt;Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.&lt;/p&gt; &lt;p&gt;A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’ s profile.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Equivalency equations&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;$1 &#x3D; 1,000,000 microdollars&lt;/li&gt;   &lt;li&gt;1 microdollar &#x3D; $0.000001 &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;To convert between currency and microcurrency&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;To convert dollars to microdollars, mutiply dollars by 1,000,000&lt;/li&gt;   &lt;li&gt;To convert microdollars to dollars, divide microdollars by 1,000,000&lt;/li&gt; &lt;/ul&gt;
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param campaign_update_request [Array(CampaignUpdateRequest)] Array of campaigns.
    # @return [Array<(CampaignUpdateResponse, Integer, Hash)>] CampaignUpdateResponse data, response status code and response headers
    def campaigns_update_with_http_info(ad_account_id : String, campaign_update_request : Array(CampaignUpdateRequest))
      if @api_client.config.debugging
        Log.debug {"Calling API: CampaignsApi.campaigns_update ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling CampaignsApi.campaigns_update")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling CampaignsApi.campaigns_update, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling CampaignsApi.campaigns_update, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "campaign_update_request" is set
      if @api_client.config.client_side_validation && campaign_update_request.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_update_request' when calling CampaignsApi.campaigns_update")
      end
      if @api_client.config.client_side_validation && campaign_update_request.size > 30
        raise ArgumentError.new("invalid value for \"campaign_update_request\" when calling CampaignsApi.campaigns_update, number of items must be less than or equal to 30.")
      end

      if @api_client.config.client_side_validation && campaign_update_request.size < 1
        raise ArgumentError.new("invalid value for \"campaign_update_request\" when calling CampaignsApi.campaigns_update, number of items must be greater than or equal to 1.")
      end

      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/campaigns".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = campaign_update_request.to_json

      # return_type
      return_type = "CampaignUpdateResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"CampaignsApi.campaigns_update",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: CampaignsApi#campaigns_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return CampaignUpdateResponse.from_json(data), status_code, headers
    end
  end
end
