# #Pinterest REST API
#
##Pinterest's REST API
#
#The version of the OpenAPI document: 5.14.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.9.0
#

require "uri"

module OpenAPIClient
  class AdAccountsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get ad account analytics
    # Get analytics for the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param start_date [Time] Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
    # @param end_date [Time] Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
    # @param columns [Array(String)] Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
    # @param granularity [Granularity] TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
    # @return [Array(AdAccountAnalyticsResponseInner)]
    def ad_account_analytics(ad_account_id : String, start_date : Time, end_date : Time, columns : Array(String), granularity : Granularity, click_window_days : Int32?, engagement_window_days : Int32?, view_window_days : Int32?, conversion_report_time : String?)
      data, _status_code, _headers = ad_account_analytics_with_http_info(ad_account_id, start_date, end_date, columns, granularity, click_window_days, engagement_window_days, view_window_days, conversion_report_time)
      data
    end

    # Get ad account analytics
    # Get analytics for the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param start_date [Time] Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
    # @param end_date [Time] Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
    # @param columns [Array(String)] Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
    # @param granularity [Granularity] TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
    # @return [Array<(Array(AdAccountAnalyticsResponseInner), Integer, Hash)>] Array(AdAccountAnalyticsResponseInner) data, response status code and response headers
    def ad_account_analytics_with_http_info(ad_account_id : String, start_date : Time, end_date : Time, columns : Array(String), granularity : Granularity, click_window_days : Int32?, engagement_window_days : Int32?, view_window_days : Int32?, conversion_report_time : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdAccountsApi.ad_account_analytics ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdAccountsApi.ad_account_analytics")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdAccountsApi.ad_account_analytics, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdAccountsApi.ad_account_analytics, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "start_date" is set
      if @api_client.config.client_side_validation && start_date.nil?
        raise ArgumentError.new("Missing the required parameter 'start_date' when calling AdAccountsApi.ad_account_analytics")
      end
      # verify the required parameter "end_date" is set
      if @api_client.config.client_side_validation && end_date.nil?
        raise ArgumentError.new("Missing the required parameter 'end_date' when calling AdAccountsApi.ad_account_analytics")
      end
      # verify the required parameter "columns" is set
      if @api_client.config.client_side_validation && columns.nil?
        raise ArgumentError.new("Missing the required parameter 'columns' when calling AdAccountsApi.ad_account_analytics")
      end
      # verify the required parameter "granularity" is set
      if @api_client.config.client_side_validation && granularity.nil?
        raise ArgumentError.new("Missing the required parameter 'granularity' when calling AdAccountsApi.ad_account_analytics")
      end
      allowable_values = ["0", "1", "7", "14", "30", "60"]
      if @api_client.config.client_side_validation && click_window_days && !allowable_values.includes?(click_window_days)
        raise ArgumentError.new("invalid value for \"click_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["0", "1", "7", "14", "30", "60"]
      if @api_client.config.client_side_validation && engagement_window_days && !allowable_values.includes?(engagement_window_days)
        raise ArgumentError.new("invalid value for \"engagement_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["0", "1", "7", "14", "30", "60"]
      if @api_client.config.client_side_validation && view_window_days && !allowable_values.includes?(view_window_days)
        raise ArgumentError.new("invalid value for \"view_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["TIME_OF_AD_ACTION", "TIME_OF_CONVERSION"]
      if @api_client.config.client_side_validation && conversion_report_time && !allowable_values.includes?(conversion_report_time)
        raise ArgumentError.new("invalid value for \"conversion_report_time\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/analytics".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["start_date"] = start_date.to_s unless start_date.nil?
      query_params["end_date"] = end_date.to_s unless end_date.nil?
      query_params["columns"] = @api_client.build_collection_param(columns, :csv)
      query_params["granularity"] = granularity.to_s unless granularity.nil?
      query_params["click_window_days"] = click_window_days.to_s unless click_window_days.nil?
      query_params["engagement_window_days"] = engagement_window_days.to_s unless engagement_window_days.nil?
      query_params["view_window_days"] = view_window_days.to_s unless view_window_days.nil?
      query_params["conversion_report_time"] = conversion_report_time.to_s unless conversion_report_time.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(AdAccountAnalyticsResponseInner)"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AdAccountsApi.ad_account_analytics",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdAccountsApi#ad_account_analytics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(AdAccountAnalyticsResponseInner).from_json(data), status_code, headers
    end

    # Get targeting analytics for an ad account
    # Get targeting analytics for an ad account. For the requested account and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \"age_bucket\") for applicable values (e.g. \"45-49\"). <p/> - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param start_date [Time] Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
    # @param end_date [Time] Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
    # @param targeting_types [Array(AdsAnalyticsTargetingType)] Targeting type breakdowns for the report. The reporting per targeting type &lt;br&gt; is independent from each other. [\&quot;AGE_BUCKET_AND_GENDER\&quot;] is in BETA and not yet available to all users.
    # @param columns [Array(String)] Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
    # @param granularity [Granularity] TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
    # @return [MetricsResponse]
    def ad_account_targeting_analytics_get(ad_account_id : String, start_date : Time, end_date : Time, targeting_types : Array(AdsAnalyticsTargetingType), columns : Array(String), granularity : Granularity, click_window_days : Int32?, engagement_window_days : Int32?, view_window_days : Int32?, conversion_report_time : String?, attribution_types : ConversionReportAttributionType?)
      data, _status_code, _headers = ad_account_targeting_analytics_get_with_http_info(ad_account_id, start_date, end_date, targeting_types, columns, granularity, click_window_days, engagement_window_days, view_window_days, conversion_report_time, attribution_types)
      data
    end

    # Get targeting analytics for an ad account
    # Get targeting analytics for an ad account. For the requested account and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \&quot;age_bucket\&quot;) for applicable values (e.g. \&quot;45-49\&quot;). &lt;p/&gt; - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param start_date [Time] Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
    # @param end_date [Time] Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
    # @param targeting_types [Array(AdsAnalyticsTargetingType)] Targeting type breakdowns for the report. The reporting per targeting type &lt;br&gt; is independent from each other. [\&quot;AGE_BUCKET_AND_GENDER\&quot;] is in BETA and not yet available to all users.
    # @param columns [Array(String)] Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
    # @param granularity [Granularity] TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
    # @return [Array<(MetricsResponse, Integer, Hash)>] MetricsResponse data, response status code and response headers
    def ad_account_targeting_analytics_get_with_http_info(ad_account_id : String, start_date : Time, end_date : Time, targeting_types : Array(AdsAnalyticsTargetingType), columns : Array(String), granularity : Granularity, click_window_days : Int32?, engagement_window_days : Int32?, view_window_days : Int32?, conversion_report_time : String?, attribution_types : ConversionReportAttributionType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdAccountsApi.ad_account_targeting_analytics_get ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdAccountsApi.ad_account_targeting_analytics_get")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdAccountsApi.ad_account_targeting_analytics_get, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdAccountsApi.ad_account_targeting_analytics_get, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "start_date" is set
      if @api_client.config.client_side_validation && start_date.nil?
        raise ArgumentError.new("Missing the required parameter 'start_date' when calling AdAccountsApi.ad_account_targeting_analytics_get")
      end
      # verify the required parameter "end_date" is set
      if @api_client.config.client_side_validation && end_date.nil?
        raise ArgumentError.new("Missing the required parameter 'end_date' when calling AdAccountsApi.ad_account_targeting_analytics_get")
      end
      # verify the required parameter "targeting_types" is set
      if @api_client.config.client_side_validation && targeting_types.nil?
        raise ArgumentError.new("Missing the required parameter 'targeting_types' when calling AdAccountsApi.ad_account_targeting_analytics_get")
      end
      if @api_client.config.client_side_validation && targeting_types.size > 15
        raise ArgumentError.new("invalid value for \"targeting_types\" when calling AdAccountsApi.ad_account_targeting_analytics_get, number of items must be less than or equal to 15.")
      end

      if @api_client.config.client_side_validation && targeting_types.size < 1
        raise ArgumentError.new("invalid value for \"targeting_types\" when calling AdAccountsApi.ad_account_targeting_analytics_get, number of items must be greater than or equal to 1.")
      end

      # verify the required parameter "columns" is set
      if @api_client.config.client_side_validation && columns.nil?
        raise ArgumentError.new("Missing the required parameter 'columns' when calling AdAccountsApi.ad_account_targeting_analytics_get")
      end
      # verify the required parameter "granularity" is set
      if @api_client.config.client_side_validation && granularity.nil?
        raise ArgumentError.new("Missing the required parameter 'granularity' when calling AdAccountsApi.ad_account_targeting_analytics_get")
      end
      allowable_values = ["0", "1", "7", "14", "30", "60"]
      if @api_client.config.client_side_validation && click_window_days && !allowable_values.includes?(click_window_days)
        raise ArgumentError.new("invalid value for \"click_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["0", "1", "7", "14", "30", "60"]
      if @api_client.config.client_side_validation && engagement_window_days && !allowable_values.includes?(engagement_window_days)
        raise ArgumentError.new("invalid value for \"engagement_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["0", "1", "7", "14", "30", "60"]
      if @api_client.config.client_side_validation && view_window_days && !allowable_values.includes?(view_window_days)
        raise ArgumentError.new("invalid value for \"view_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["TIME_OF_AD_ACTION", "TIME_OF_CONVERSION"]
      if @api_client.config.client_side_validation && conversion_report_time && !allowable_values.includes?(conversion_report_time)
        raise ArgumentError.new("invalid value for \"conversion_report_time\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/targeting_analytics".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["start_date"] = start_date.to_s unless start_date.nil?
      query_params["end_date"] = end_date.to_s unless end_date.nil?
      query_params["targeting_types"] = @api_client.build_collection_param(targeting_types, :csv)
      query_params["columns"] = @api_client.build_collection_param(columns, :csv)
      query_params["granularity"] = granularity.to_s unless granularity.nil?
      query_params["click_window_days"] = click_window_days.to_s unless click_window_days.nil?
      query_params["engagement_window_days"] = engagement_window_days.to_s unless engagement_window_days.nil?
      query_params["view_window_days"] = view_window_days.to_s unless view_window_days.nil?
      query_params["conversion_report_time"] = conversion_report_time.to_s unless conversion_report_time.nil?
      query_params["attribution_types"] = attribution_types.to_s unless attribution_types.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "MetricsResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AdAccountsApi.ad_account_targeting_analytics_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdAccountsApi#ad_account_targeting_analytics_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return MetricsResponse.from_json(data), status_code, headers
    end

    # Create ad account
    # Create a new ad account. Different ad accounts can support different currencies, payment methods, etc. An ad account is needed to create campaigns, ad groups, and ads; other accounts (your employees or partners) can be assigned business access and appropriate roles to access an ad account. <p/> You can set up up to 50 ad accounts per user. (The user must have a business account to create an ad account.) <p/> For more, see <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/create-an-advertiser-account\">Create an advertiser account</a>.
    # @param ad_account_create_request [AdAccountCreateRequest] Ad account to create.
    # @return [AdAccount]
    def ad_accounts_create(ad_account_create_request : AdAccountCreateRequest)
      data, _status_code, _headers = ad_accounts_create_with_http_info(ad_account_create_request)
      data
    end

    # Create ad account
    # Create a new ad account. Different ad accounts can support different currencies, payment methods, etc. An ad account is needed to create campaigns, ad groups, and ads; other accounts (your employees or partners) can be assigned business access and appropriate roles to access an ad account. &lt;p/&gt; You can set up up to 50 ad accounts per user. (The user must have a business account to create an ad account.) &lt;p/&gt; For more, see &lt;a class&#x3D;\&quot;reference external\&quot; href&#x3D;\&quot;https://help.pinterest.com/en/business/article/create-an-advertiser-account\&quot;&gt;Create an advertiser account&lt;/a&gt;.
    # @param ad_account_create_request [AdAccountCreateRequest] Ad account to create.
    # @return [Array<(AdAccount, Integer, Hash)>] AdAccount data, response status code and response headers
    def ad_accounts_create_with_http_info(ad_account_create_request : AdAccountCreateRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdAccountsApi.ad_accounts_create ..."}
      end
      # verify the required parameter "ad_account_create_request" is set
      if @api_client.config.client_side_validation && ad_account_create_request.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_create_request' when calling AdAccountsApi.ad_accounts_create")
      end
      # resource path
      local_var_path = "/ad_accounts"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = ad_account_create_request.to_json

      # return_type
      return_type = "AdAccount"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AdAccountsApi.ad_accounts_create",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdAccountsApi#ad_accounts_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AdAccount.from_json(data), status_code, headers
    end

    # Get ad account
    # Get an ad account
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @return [AdAccount]
    def ad_accounts_get(ad_account_id : String)
      data, _status_code, _headers = ad_accounts_get_with_http_info(ad_account_id)
      data
    end

    # Get ad account
    # Get an ad account
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @return [Array<(AdAccount, Integer, Hash)>] AdAccount data, response status code and response headers
    def ad_accounts_get_with_http_info(ad_account_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdAccountsApi.ad_accounts_get ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdAccountsApi.ad_accounts_get")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdAccountsApi.ad_accounts_get, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdAccountsApi.ad_accounts_get, must conform to the pattern #{pattern}.")
      end

      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "AdAccount"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AdAccountsApi.ad_accounts_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdAccountsApi#ad_accounts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AdAccount.from_json(data), status_code, headers
    end

    # List ad accounts
    # Get a list of the ad_accounts that the \"operation user_account\" has access to. - This includes ad_accounts they own and ad_accounts that are owned by others who have granted them <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>.
    # @return [AdAccountsList200Response]
    def ad_accounts_list(bookmark : String?, page_size : Int32?, include_shared_accounts : Bool?)
      data, _status_code, _headers = ad_accounts_list_with_http_info(bookmark, page_size, include_shared_accounts)
      data
    end

    # List ad accounts
    # Get a list of the ad_accounts that the \&quot;operation user_account\&quot; has access to. - This includes ad_accounts they own and ad_accounts that are owned by others who have granted them &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;.
    # @return [Array<(AdAccountsList200Response, Integer, Hash)>] AdAccountsList200Response data, response status code and response headers
    def ad_accounts_list_with_http_info(bookmark : String?, page_size : Int32?, include_shared_accounts : Bool?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdAccountsApi.ad_accounts_list ..."}
      end
      if @api_client.config.client_side_validation && !page_size.nil? && page_size > 250
        raise ArgumentError.new("invalid value for \"page_size\" when calling AdAccountsApi.ad_accounts_list, must be smaller than or equal to 250.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size < 1
        raise ArgumentError.new("invalid value for \"page_size\" when calling AdAccountsApi.ad_accounts_list, must be greater than or equal to 1.")
      end

      # resource path
      local_var_path = "/ad_accounts"

      # query parameters
      query_params = Hash(String, String).new
      query_params["bookmark"] = bookmark.to_s unless bookmark.nil?
      query_params["page_size"] = page_size.to_s unless page_size.nil?
      query_params["include_shared_accounts"] = include_shared_accounts.to_s unless include_shared_accounts.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "AdAccountsList200Response"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AdAccountsApi.ad_accounts_list",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdAccountsApi#ad_accounts_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AdAccountsList200Response.from_json(data), status_code, headers
    end

    # Create a request for a Marketing Mix Modeling (MMM) report
    # This creates an asynchronous mmm report based on the given request. It returns a token that you can use to download the report when it is ready. NOTE: An additional limit of 5 queries per minute per advertiser applies to this endpoint while it's in beta release.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param create_mmm_report_request [CreateMMMReportRequest] 
    # @return [CreateMMMReportResponse]
    def analytics_create_mmm_report(ad_account_id : String, create_mmm_report_request : CreateMMMReportRequest)
      data, _status_code, _headers = analytics_create_mmm_report_with_http_info(ad_account_id, create_mmm_report_request)
      data
    end

    # Create a request for a Marketing Mix Modeling (MMM) report
    # This creates an asynchronous mmm report based on the given request. It returns a token that you can use to download the report when it is ready. NOTE: An additional limit of 5 queries per minute per advertiser applies to this endpoint while it&#39;s in beta release.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param create_mmm_report_request [CreateMMMReportRequest] 
    # @return [Array<(CreateMMMReportResponse, Integer, Hash)>] CreateMMMReportResponse data, response status code and response headers
    def analytics_create_mmm_report_with_http_info(ad_account_id : String, create_mmm_report_request : CreateMMMReportRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdAccountsApi.analytics_create_mmm_report ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdAccountsApi.analytics_create_mmm_report")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdAccountsApi.analytics_create_mmm_report, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdAccountsApi.analytics_create_mmm_report, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "create_mmm_report_request" is set
      if @api_client.config.client_side_validation && create_mmm_report_request.nil?
        raise ArgumentError.new("Missing the required parameter 'create_mmm_report_request' when calling AdAccountsApi.analytics_create_mmm_report")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/mmm_reports".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = create_mmm_report_request.to_json

      # return_type
      return_type = "CreateMMMReportResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AdAccountsApi.analytics_create_mmm_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdAccountsApi#analytics_create_mmm_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return CreateMMMReportResponse.from_json(data), status_code, headers
    end

    # Create async request for an account analytics report
    # This returns a token that you can use to download the report when it is ready. Note that this endpoint requires the parameters to be passed as JSON-formatted in the request body. This endpoint does not support URL query parameters. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 914 days before the current date in UTC time and the max time range supported is 186 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days. - If level is PRODUCT_ITEM, the furthest back you can are allowed to pull data is 92 days before the current date in UTC time and the max time range supported is 31 days. - If level is PRODUCT_ITEM, ad_ids and ad_statuses parameters are not allowed. Any columns related to pin promotion and ad is not allowed either.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param ads_analytics_create_async_request [AdsAnalyticsCreateAsyncRequest] 
    # @return [AdsAnalyticsCreateAsyncResponse]
    def analytics_create_report(ad_account_id : String, ads_analytics_create_async_request : AdsAnalyticsCreateAsyncRequest)
      data, _status_code, _headers = analytics_create_report_with_http_info(ad_account_id, ads_analytics_create_async_request)
      data
    end

    # Create async request for an account analytics report
    # This returns a token that you can use to download the report when it is ready. Note that this endpoint requires the parameters to be passed as JSON-formatted in the request body. This endpoint does not support URL query parameters. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 914 days before the current date in UTC time and the max time range supported is 186 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days. - If level is PRODUCT_ITEM, the furthest back you can are allowed to pull data is 92 days before the current date in UTC time and the max time range supported is 31 days. - If level is PRODUCT_ITEM, ad_ids and ad_statuses parameters are not allowed. Any columns related to pin promotion and ad is not allowed either.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param ads_analytics_create_async_request [AdsAnalyticsCreateAsyncRequest] 
    # @return [Array<(AdsAnalyticsCreateAsyncResponse, Integer, Hash)>] AdsAnalyticsCreateAsyncResponse data, response status code and response headers
    def analytics_create_report_with_http_info(ad_account_id : String, ads_analytics_create_async_request : AdsAnalyticsCreateAsyncRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdAccountsApi.analytics_create_report ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdAccountsApi.analytics_create_report")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdAccountsApi.analytics_create_report, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdAccountsApi.analytics_create_report, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "ads_analytics_create_async_request" is set
      if @api_client.config.client_side_validation && ads_analytics_create_async_request.nil?
        raise ArgumentError.new("Missing the required parameter 'ads_analytics_create_async_request' when calling AdAccountsApi.analytics_create_report")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/reports".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = ads_analytics_create_async_request.to_json

      # return_type
      return_type = "AdsAnalyticsCreateAsyncResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AdAccountsApi.analytics_create_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdAccountsApi#analytics_create_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AdsAnalyticsCreateAsyncResponse.from_json(data), status_code, headers
    end

    # Create async request for an analytics report using a template
    # This takes a template ID and an optional custom timeframe and constructs an asynchronous report based on the template. It returns a token that you can use to download the report when it is ready.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param template_id [String] Unique identifier of a template.
    # @return [AdsAnalyticsCreateAsyncResponse]
    def analytics_create_template_report(ad_account_id : String, template_id : String, start_date : Time?, end_date : Time?, granularity : Granularity?)
      data, _status_code, _headers = analytics_create_template_report_with_http_info(ad_account_id, template_id, start_date, end_date, granularity)
      data
    end

    # Create async request for an analytics report using a template
    # This takes a template ID and an optional custom timeframe and constructs an asynchronous report based on the template. It returns a token that you can use to download the report when it is ready.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param template_id [String] Unique identifier of a template.
    # @return [Array<(AdsAnalyticsCreateAsyncResponse, Integer, Hash)>] AdsAnalyticsCreateAsyncResponse data, response status code and response headers
    def analytics_create_template_report_with_http_info(ad_account_id : String, template_id : String, start_date : Time?, end_date : Time?, granularity : Granularity?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdAccountsApi.analytics_create_template_report ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdAccountsApi.analytics_create_template_report")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdAccountsApi.analytics_create_template_report, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdAccountsApi.analytics_create_template_report, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "template_id" is set
      if @api_client.config.client_side_validation && template_id.nil?
        raise ArgumentError.new("Missing the required parameter 'template_id' when calling AdAccountsApi.analytics_create_template_report")
      end
      if @api_client.config.client_side_validation && template_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"template_id\" when calling AdAccountsApi.analytics_create_template_report, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && template_id !~ pattern
        raise ArgumentError.new("invalid value for \"template_id\" when calling AdAccountsApi.analytics_create_template_report, must conform to the pattern #{pattern}.")
      end

      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/templates/{template_id}/reports".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s)).sub("{" + "template_id" + "}", URI.encode_path(template_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["start_date"] = start_date.to_s unless start_date.nil?
      query_params["end_date"] = end_date.to_s unless end_date.nil?
      query_params["granularity"] = granularity.to_s unless granularity.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "AdsAnalyticsCreateAsyncResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AdAccountsApi.analytics_create_template_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdAccountsApi#analytics_create_template_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AdsAnalyticsCreateAsyncResponse.from_json(data), status_code, headers
    end

    # Get advertiser Marketing Mix Modeling (MMM) report.
    # Get an mmm report for an ad account. This returns a URL to an mmm metrics report given a token returned from the create mmm report endpoint.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param token [String] Token returned from the post request creation call
    # @return [GetMMMReportResponse]
    def analytics_get_mmm_report(ad_account_id : String, token : String)
      data, _status_code, _headers = analytics_get_mmm_report_with_http_info(ad_account_id, token)
      data
    end

    # Get advertiser Marketing Mix Modeling (MMM) report.
    # Get an mmm report for an ad account. This returns a URL to an mmm metrics report given a token returned from the create mmm report endpoint.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param token [String] Token returned from the post request creation call
    # @return [Array<(GetMMMReportResponse, Integer, Hash)>] GetMMMReportResponse data, response status code and response headers
    def analytics_get_mmm_report_with_http_info(ad_account_id : String, token : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdAccountsApi.analytics_get_mmm_report ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdAccountsApi.analytics_get_mmm_report")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdAccountsApi.analytics_get_mmm_report, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdAccountsApi.analytics_get_mmm_report, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "token" is set
      if @api_client.config.client_side_validation && token.nil?
        raise ArgumentError.new("Missing the required parameter 'token' when calling AdAccountsApi.analytics_get_mmm_report")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/mmm_reports".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["token"] = token.to_s unless token.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetMMMReportResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AdAccountsApi.analytics_get_mmm_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdAccountsApi#analytics_get_mmm_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetMMMReportResponse.from_json(data), status_code, headers
    end

    # Get the account analytics report created by the async call
    # This returns a URL to an analytics report given a token returned from the post request report creation call. You can use the URL to download the report. The link is valid for five minutes and the report is valid for one hour. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param token [String] Token returned from the post request creation call
    # @return [AdsAnalyticsGetAsyncResponse]
    def analytics_get_report(ad_account_id : String, token : String)
      data, _status_code, _headers = analytics_get_report_with_http_info(ad_account_id, token)
      data
    end

    # Get the account analytics report created by the async call
    # This returns a URL to an analytics report given a token returned from the post request report creation call. You can use the URL to download the report. The link is valid for five minutes and the report is valid for one hour. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param token [String] Token returned from the post request creation call
    # @return [Array<(AdsAnalyticsGetAsyncResponse, Integer, Hash)>] AdsAnalyticsGetAsyncResponse data, response status code and response headers
    def analytics_get_report_with_http_info(ad_account_id : String, token : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdAccountsApi.analytics_get_report ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdAccountsApi.analytics_get_report")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdAccountsApi.analytics_get_report, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdAccountsApi.analytics_get_report, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "token" is set
      if @api_client.config.client_side_validation && token.nil?
        raise ArgumentError.new("Missing the required parameter 'token' when calling AdAccountsApi.analytics_get_report")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/reports".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["token"] = token.to_s unless token.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "AdsAnalyticsGetAsyncResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AdAccountsApi.analytics_get_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdAccountsApi#analytics_get_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AdsAnalyticsGetAsyncResponse.from_json(data), status_code, headers
    end

    # Delete ads data for ad account in API Sandbox
    # Delete an ad account and all the ads data associated with that account. A string message is returned indicating the status of the delete operation.  Note: This endpoint is only allowed in the Pinterest API Sandbox (https://api-sandbox.pinterest.com/v5). Go to /docs/developer-tools/sandbox/ for more information.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @return [String]
    def sandbox_delete(ad_account_id : String)
      data, _status_code, _headers = sandbox_delete_with_http_info(ad_account_id)
      data
    end

    # Delete ads data for ad account in API Sandbox
    # Delete an ad account and all the ads data associated with that account. A string message is returned indicating the status of the delete operation.  Note: This endpoint is only allowed in the Pinterest API Sandbox (https://api-sandbox.pinterest.com/v5). Go to /docs/developer-tools/sandbox/ for more information.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def sandbox_delete_with_http_info(ad_account_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdAccountsApi.sandbox_delete ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdAccountsApi.sandbox_delete")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdAccountsApi.sandbox_delete, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdAccountsApi.sandbox_delete, must conform to the pattern #{pattern}.")
      end

      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/sandbox".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "String"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"AdAccountsApi.sandbox_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdAccountsApi#sandbox_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return String.from_json(data), status_code, headers
    end

    # List templates
    # Gets all Templates associated with an ad account ID.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @return [TemplatesList200Response]
    def templates_list(ad_account_id : String, page_size : Int32?, order : String?, bookmark : String?)
      data, _status_code, _headers = templates_list_with_http_info(ad_account_id, page_size, order, bookmark)
      data
    end

    # List templates
    # Gets all Templates associated with an ad account ID.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @return [Array<(TemplatesList200Response, Integer, Hash)>] TemplatesList200Response data, response status code and response headers
    def templates_list_with_http_info(ad_account_id : String, page_size : Int32?, order : String?, bookmark : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdAccountsApi.templates_list ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdAccountsApi.templates_list")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdAccountsApi.templates_list, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdAccountsApi.templates_list, must conform to the pattern #{pattern}.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size > 250
        raise ArgumentError.new("invalid value for \"page_size\" when calling AdAccountsApi.templates_list, must be smaller than or equal to 250.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size < 1
        raise ArgumentError.new("invalid value for \"page_size\" when calling AdAccountsApi.templates_list, must be greater than or equal to 1.")
      end

      allowable_values = ["ASCENDING", "DESCENDING"]
      if @api_client.config.client_side_validation && order && !allowable_values.includes?(order)
        raise ArgumentError.new("invalid value for \"order\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/templates".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["page_size"] = page_size.to_s unless page_size.nil?
      query_params["order"] = order.to_s unless order.nil?
      query_params["bookmark"] = bookmark.to_s unless bookmark.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "TemplatesList200Response"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AdAccountsApi.templates_list",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdAccountsApi#templates_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return TemplatesList200Response.from_json(data), status_code, headers
    end
  end
end
