# #Pinterest REST API
#
##Pinterest's REST API
#
#The version of the OpenAPI document: 5.14.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.9.0
#

require "uri"

module OpenAPIClient
  class BusinessAccessInviteApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a request to access an existing partner's assets.
    # Create a request to access an existing partner's assets with the specified permissions. The request will be sent to the partner for approval. The assets that can be requested are ad accounts and profiles.
    # @param business_id [String] Unique identifier of the requesting business.
    # @param create_asset_access_request_body [CreateAssetAccessRequestBody] 
    # @return [CreateAssetAccessRequestResponse]
    def asset_access_requests_create(business_id : String, create_asset_access_request_body : CreateAssetAccessRequestBody)
      data, _status_code, _headers = asset_access_requests_create_with_http_info(business_id, create_asset_access_request_body)
      data
    end

    # Create a request to access an existing partner&#39;s assets.
    # Create a request to access an existing partner&#39;s assets with the specified permissions. The request will be sent to the partner for approval. The assets that can be requested are ad accounts and profiles.
    # @param business_id [String] Unique identifier of the requesting business.
    # @param create_asset_access_request_body [CreateAssetAccessRequestBody] 
    # @return [Array<(CreateAssetAccessRequestResponse, Integer, Hash)>] CreateAssetAccessRequestResponse data, response status code and response headers
    def asset_access_requests_create_with_http_info(business_id : String, create_asset_access_request_body : CreateAssetAccessRequestBody)
      if @api_client.config.debugging
        Log.debug {"Calling API: BusinessAccessInviteApi.asset_access_requests_create ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling BusinessAccessInviteApi.asset_access_requests_create")
      end
      if @api_client.config.client_side_validation && business_id.to_s.size > 20
        raise ArgumentError.new("invalid value for \"business_id\" when calling BusinessAccessInviteApi.asset_access_requests_create, the character length must be smaller than or equal to 20.")
      end

      if @api_client.config.client_side_validation && business_id.to_s.size < 1
        raise ArgumentError.new("invalid value for \"business_id\" when calling BusinessAccessInviteApi.asset_access_requests_create, the character length must be great than or equal to 1.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && business_id !~ pattern
        raise ArgumentError.new("invalid value for \"business_id\" when calling BusinessAccessInviteApi.asset_access_requests_create, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "create_asset_access_request_body" is set
      if @api_client.config.client_side_validation && create_asset_access_request_body.nil?
        raise ArgumentError.new("Missing the required parameter 'create_asset_access_request_body' when calling BusinessAccessInviteApi.asset_access_requests_create")
      end
      # resource path
      local_var_path = "/businesses/{business_id}/requests/assets/access".sub("{" + "business_id" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = create_asset_access_request_body.to_json

      # return_type
      return_type = "CreateAssetAccessRequestResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"BusinessAccessInviteApi.asset_access_requests_create",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BusinessAccessInviteApi#asset_access_requests_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return CreateAssetAccessRequestResponse.from_json(data), status_code, headers
    end

    # Cancel invites/requests
    # Cancel membership/partnership invites and/or requests.
    # @param business_id [String] Business id
    # @param cancel_invites_body [CancelInvitesBody] A list with invite ids
    # @return [DeleteInvitesResultsResponseArray]
    def cancel_invites_or_requests(business_id : String, cancel_invites_body : CancelInvitesBody)
      data, _status_code, _headers = cancel_invites_or_requests_with_http_info(business_id, cancel_invites_body)
      data
    end

    # Cancel invites/requests
    # Cancel membership/partnership invites and/or requests.
    # @param business_id [String] Business id
    # @param cancel_invites_body [CancelInvitesBody] A list with invite ids
    # @return [Array<(DeleteInvitesResultsResponseArray, Integer, Hash)>] DeleteInvitesResultsResponseArray data, response status code and response headers
    def cancel_invites_or_requests_with_http_info(business_id : String, cancel_invites_body : CancelInvitesBody)
      if @api_client.config.debugging
        Log.debug {"Calling API: BusinessAccessInviteApi.cancel_invites_or_requests ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling BusinessAccessInviteApi.cancel_invites_or_requests")
      end
      if @api_client.config.client_side_validation && business_id.to_s.size > 20
        raise ArgumentError.new("invalid value for \"business_id\" when calling BusinessAccessInviteApi.cancel_invites_or_requests, the character length must be smaller than or equal to 20.")
      end

      if @api_client.config.client_side_validation && business_id.to_s.size < 1
        raise ArgumentError.new("invalid value for \"business_id\" when calling BusinessAccessInviteApi.cancel_invites_or_requests, the character length must be great than or equal to 1.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && business_id !~ pattern
        raise ArgumentError.new("invalid value for \"business_id\" when calling BusinessAccessInviteApi.cancel_invites_or_requests, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "cancel_invites_body" is set
      if @api_client.config.client_side_validation && cancel_invites_body.nil?
        raise ArgumentError.new("Missing the required parameter 'cancel_invites_body' when calling BusinessAccessInviteApi.cancel_invites_or_requests")
      end
      # resource path
      local_var_path = "/businesses/{business_id}/invites".sub("{" + "business_id" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = cancel_invites_body.to_json

      # return_type
      return_type = "DeleteInvitesResultsResponseArray"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"BusinessAccessInviteApi.cancel_invites_or_requests",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BusinessAccessInviteApi#cancel_invites_or_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return DeleteInvitesResultsResponseArray.from_json(data), status_code, headers
    end

    # Update invite/request with an asset permission
    # Assign asset permissions information to an existing invite/request. Can be used to: - Request access to a partner's asset. Note: This is only for when no existing partnership exists. If an existing   partnership exists, use \"Create a request to access an existing partner's assets\" to request access to your   partner's assets.     - invite_type=\"PARTNER_REQUEST\" - Invite a partner to access your business assets. Note: This is only for when there is no existing partnership.   If there is an existing partnership, use \"Assign/Update partner asset permissions\" to assign a partner access to   new assets.     - invite_type=\"PARTNER_INVITE\" - Invite a member to access your business assets. Note: This is only for when there is no existing membership.   If there is an existing membership, use \"Assign/Update member asset permissions\" to assign a member access to new   assets.     - invite_type=\"MEMBER_INVITE\"  To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview.
    # @param business_id [String] Unique identifier of the requesting business.
    # @param create_asset_invites_request [CreateAssetInvitesRequest] A list of invites/requests together with the asset permissions to be assigned to the invite/request. 
    # @return [UpdateInvitesResultsResponseArray]
    def create_asset_invites(business_id : String, create_asset_invites_request : CreateAssetInvitesRequest)
      data, _status_code, _headers = create_asset_invites_with_http_info(business_id, create_asset_invites_request)
      data
    end

    # Update invite/request with an asset permission
    # Assign asset permissions information to an existing invite/request. Can be used to: - Request access to a partner&#39;s asset. Note: This is only for when no existing partnership exists. If an existing   partnership exists, use \&quot;Create a request to access an existing partner&#39;s assets\&quot; to request access to your   partner&#39;s assets.     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot; - Invite a partner to access your business assets. Note: This is only for when there is no existing partnership.   If there is an existing partnership, use \&quot;Assign/Update partner asset permissions\&quot; to assign a partner access to   new assets.     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot; - Invite a member to access your business assets. Note: This is only for when there is no existing membership.   If there is an existing membership, use \&quot;Assign/Update member asset permissions\&quot; to assign a member access to new   assets.     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;  To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview.
    # @param business_id [String] Unique identifier of the requesting business.
    # @param create_asset_invites_request [CreateAssetInvitesRequest] A list of invites/requests together with the asset permissions to be assigned to the invite/request. 
    # @return [Array<(UpdateInvitesResultsResponseArray, Integer, Hash)>] UpdateInvitesResultsResponseArray data, response status code and response headers
    def create_asset_invites_with_http_info(business_id : String, create_asset_invites_request : CreateAssetInvitesRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: BusinessAccessInviteApi.create_asset_invites ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling BusinessAccessInviteApi.create_asset_invites")
      end
      if @api_client.config.client_side_validation && business_id.to_s.size > 20
        raise ArgumentError.new("invalid value for \"business_id\" when calling BusinessAccessInviteApi.create_asset_invites, the character length must be smaller than or equal to 20.")
      end

      if @api_client.config.client_side_validation && business_id.to_s.size < 1
        raise ArgumentError.new("invalid value for \"business_id\" when calling BusinessAccessInviteApi.create_asset_invites, the character length must be great than or equal to 1.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && business_id !~ pattern
        raise ArgumentError.new("invalid value for \"business_id\" when calling BusinessAccessInviteApi.create_asset_invites, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "create_asset_invites_request" is set
      if @api_client.config.client_side_validation && create_asset_invites_request.nil?
        raise ArgumentError.new("Missing the required parameter 'create_asset_invites_request' when calling BusinessAccessInviteApi.create_asset_invites")
      end
      # resource path
      local_var_path = "/businesses/{business_id}/invites/assets/access".sub("{" + "business_id" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = create_asset_invites_request.to_json

      # return_type
      return_type = "UpdateInvitesResultsResponseArray"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"BusinessAccessInviteApi.create_asset_invites",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BusinessAccessInviteApi#create_asset_invites\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return UpdateInvitesResultsResponseArray.from_json(data), status_code, headers
    end

    # Create invites or requests
    # Create batch invites or requests. Can create batch invites or requests as described below. - Invite members to join the business. This would required specifying the following:     - invite_type=\"MEMBER_INVITE\"     - business_role=\"EMPLOYEE\" OR business_role=\"BIZ_ADMIN\" (To learn more about business roles, visit     https://help.pinterest.com/en/business/article/profile-permissions-in-business-access.)     - members - Invite partners to access your business assets. This would require specifying the following:     - invite_type=\"PARTNER_INVITE\"     - business_role=\"PARTNER\"     - partners - Request to be a partner so you can access their assets. This would require specifying the following:     - invite_type=\"PARTNER_REQUEST\"     - business_role=\"PARTNER\"     - partners
    # @param business_id [String] Business id
    # @param create_membership_or_partnership_invites_body [CreateMembershipOrPartnershipInvitesBody] An object with the properties: invite_type, partners, members, business_role
    # @return [CreateInvitesResultsResponseArray]
    def create_membership_or_partnership_invites(business_id : String, create_membership_or_partnership_invites_body : CreateMembershipOrPartnershipInvitesBody)
      data, _status_code, _headers = create_membership_or_partnership_invites_with_http_info(business_id, create_membership_or_partnership_invites_body)
      data
    end

    # Create invites or requests
    # Create batch invites or requests. Can create batch invites or requests as described below. - Invite members to join the business. This would required specifying the following:     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;     - business_role&#x3D;\&quot;EMPLOYEE\&quot; OR business_role&#x3D;\&quot;BIZ_ADMIN\&quot; (To learn more about business roles, visit     https://help.pinterest.com/en/business/article/profile-permissions-in-business-access.)     - members - Invite partners to access your business assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners - Request to be a partner so you can access their assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners
    # @param business_id [String] Business id
    # @param create_membership_or_partnership_invites_body [CreateMembershipOrPartnershipInvitesBody] An object with the properties: invite_type, partners, members, business_role
    # @return [Array<(CreateInvitesResultsResponseArray, Integer, Hash)>] CreateInvitesResultsResponseArray data, response status code and response headers
    def create_membership_or_partnership_invites_with_http_info(business_id : String, create_membership_or_partnership_invites_body : CreateMembershipOrPartnershipInvitesBody)
      if @api_client.config.debugging
        Log.debug {"Calling API: BusinessAccessInviteApi.create_membership_or_partnership_invites ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling BusinessAccessInviteApi.create_membership_or_partnership_invites")
      end
      if @api_client.config.client_side_validation && business_id.to_s.size > 20
        raise ArgumentError.new("invalid value for \"business_id\" when calling BusinessAccessInviteApi.create_membership_or_partnership_invites, the character length must be smaller than or equal to 20.")
      end

      if @api_client.config.client_side_validation && business_id.to_s.size < 1
        raise ArgumentError.new("invalid value for \"business_id\" when calling BusinessAccessInviteApi.create_membership_or_partnership_invites, the character length must be great than or equal to 1.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && business_id !~ pattern
        raise ArgumentError.new("invalid value for \"business_id\" when calling BusinessAccessInviteApi.create_membership_or_partnership_invites, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "create_membership_or_partnership_invites_body" is set
      if @api_client.config.client_side_validation && create_membership_or_partnership_invites_body.nil?
        raise ArgumentError.new("Missing the required parameter 'create_membership_or_partnership_invites_body' when calling BusinessAccessInviteApi.create_membership_or_partnership_invites")
      end
      # resource path
      local_var_path = "/businesses/{business_id}/invites".sub("{" + "business_id" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = create_membership_or_partnership_invites_body.to_json

      # return_type
      return_type = "CreateInvitesResultsResponseArray"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"BusinessAccessInviteApi.create_membership_or_partnership_invites",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BusinessAccessInviteApi#create_membership_or_partnership_invites\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return CreateInvitesResultsResponseArray.from_json(data), status_code, headers
    end

    # Get invites/requests
    # Get the membership/partnership invites and/or requests for the authorized user.
    # @param business_id [String] Unique identifier of the requesting business.
    # @return [GetInvites200Response]
    def get_invites(business_id : String, is_member : Bool?, invite_status : Array(String)?, invite_type : InviteType?, bookmark : String?, page_size : Int32?)
      data, _status_code, _headers = get_invites_with_http_info(business_id, is_member, invite_status, invite_type, bookmark, page_size)
      data
    end

    # Get invites/requests
    # Get the membership/partnership invites and/or requests for the authorized user.
    # @param business_id [String] Unique identifier of the requesting business.
    # @return [Array<(GetInvites200Response, Integer, Hash)>] GetInvites200Response data, response status code and response headers
    def get_invites_with_http_info(business_id : String, is_member : Bool?, invite_status : Array(String)?, invite_type : InviteType?, bookmark : String?, page_size : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: BusinessAccessInviteApi.get_invites ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling BusinessAccessInviteApi.get_invites")
      end
      if @api_client.config.client_side_validation && business_id.to_s.size > 20
        raise ArgumentError.new("invalid value for \"business_id\" when calling BusinessAccessInviteApi.get_invites, the character length must be smaller than or equal to 20.")
      end

      if @api_client.config.client_side_validation && business_id.to_s.size < 1
        raise ArgumentError.new("invalid value for \"business_id\" when calling BusinessAccessInviteApi.get_invites, the character length must be great than or equal to 1.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && business_id !~ pattern
        raise ArgumentError.new("invalid value for \"business_id\" when calling BusinessAccessInviteApi.get_invites, must conform to the pattern #{pattern}.")
      end

      allowable_values = ["PENDING", "EXPIRED"]
      if @api_client.config.client_side_validation && invite_status && invite_status.all? { |item| allowable_values.includes?(item) }
        raise ArgumentError.new("invalid value for \"invite_status\", must include one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && invite_status.nil? && invite_status.size < 1
        raise ArgumentError.new("invalid value for \"invite_status\" when calling BusinessAccessInviteApi.get_invites, number of items must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size > 250
        raise ArgumentError.new("invalid value for \"page_size\" when calling BusinessAccessInviteApi.get_invites, must be smaller than or equal to 250.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size < 1
        raise ArgumentError.new("invalid value for \"page_size\" when calling BusinessAccessInviteApi.get_invites, must be greater than or equal to 1.")
      end

      # resource path
      local_var_path = "/businesses/{business_id}/invites".sub("{" + "business_id" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["is_member"] = is_member.to_s unless is_member.nil?
      query_params["invite_status"] = @api_client.build_collection_param(invite_status, :multi)
      query_params["invite_type"] = invite_type.to_s unless invite_type.nil?
      query_params["bookmark"] = bookmark.to_s unless bookmark.nil?
      query_params["page_size"] = page_size.to_s unless page_size.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetInvites200Response"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BusinessAccessInviteApi.get_invites",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BusinessAccessInviteApi#get_invites\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetInvites200Response.from_json(data), status_code, headers
    end

    # Accept or decline an invite/request
    # Accept or decline invites or requests.
    # @param auth_respond_invites_body [AuthRespondInvitesBody] 
    # @return [RespondToInvitesResponseArray]
    def respond_business_access_invites(auth_respond_invites_body : AuthRespondInvitesBody)
      data, _status_code, _headers = respond_business_access_invites_with_http_info(auth_respond_invites_body)
      data
    end

    # Accept or decline an invite/request
    # Accept or decline invites or requests.
    # @param auth_respond_invites_body [AuthRespondInvitesBody] 
    # @return [Array<(RespondToInvitesResponseArray, Integer, Hash)>] RespondToInvitesResponseArray data, response status code and response headers
    def respond_business_access_invites_with_http_info(auth_respond_invites_body : AuthRespondInvitesBody)
      if @api_client.config.debugging
        Log.debug {"Calling API: BusinessAccessInviteApi.respond_business_access_invites ..."}
      end
      # verify the required parameter "auth_respond_invites_body" is set
      if @api_client.config.client_side_validation && auth_respond_invites_body.nil?
        raise ArgumentError.new("Missing the required parameter 'auth_respond_invites_body' when calling BusinessAccessInviteApi.respond_business_access_invites")
      end
      # resource path
      local_var_path = "/businesses/invites"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = auth_respond_invites_body.to_json

      # return_type
      return_type = "RespondToInvitesResponseArray"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"BusinessAccessInviteApi.respond_business_access_invites",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BusinessAccessInviteApi#respond_business_access_invites\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return RespondToInvitesResponseArray.from_json(data), status_code, headers
    end
  end
end
