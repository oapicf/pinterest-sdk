# #Pinterest REST API
#
##Pinterest's REST API
#
#The version of the OpenAPI document: 5.14.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.9.0
#

require "uri"

module OpenAPIClient
  class ConversionTagsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create conversion tag
    # Create a conversion tag, also known as <a href=\"https://help.pinterest.com/en/business/article/set-up-the-pinterest-tag\" target=\"_blank\">Pinterest tag</a>, with the option to enable enhanced match.<p/> The Pinterest Tag tracks actions people take on the ad account’ s website after they view the ad account's ad on Pinterest. The advertiser needs to customize this tag to track conversions.<p/> For more information, see:<p/> <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/set-up-the-pinterest-tag\">Set up the Pinterest tag</a><p/> <a class=\"reference external\" href=\"/docs/api-features/pinterest-tag/\">Pinterest Tag</a><p/> <a class=\"reference external\" href=\"/docs/api-features/pinterest-tag/#enhanced-match\">Enhanced match</a>
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param conversion_tag_create [ConversionTagCreate] Conversion Tag to create
    # @return [ConversionTagResponse]
    def conversion_tags_create(ad_account_id : String, conversion_tag_create : ConversionTagCreate)
      data, _status_code, _headers = conversion_tags_create_with_http_info(ad_account_id, conversion_tag_create)
      data
    end

    # Create conversion tag
    # Create a conversion tag, also known as &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/set-up-the-pinterest-tag\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Pinterest tag&lt;/a&gt;, with the option to enable enhanced match.&lt;p/&gt; The Pinterest Tag tracks actions people take on the ad account’ s website after they view the ad account&#39;s ad on Pinterest. The advertiser needs to customize this tag to track conversions.&lt;p/&gt; For more information, see:&lt;p/&gt; &lt;a class&#x3D;\&quot;reference external\&quot; href&#x3D;\&quot;https://help.pinterest.com/en/business/article/set-up-the-pinterest-tag\&quot;&gt;Set up the Pinterest tag&lt;/a&gt;&lt;p/&gt; &lt;a class&#x3D;\&quot;reference external\&quot; href&#x3D;\&quot;/docs/api-features/pinterest-tag/\&quot;&gt;Pinterest Tag&lt;/a&gt;&lt;p/&gt; &lt;a class&#x3D;\&quot;reference external\&quot; href&#x3D;\&quot;/docs/api-features/pinterest-tag/#enhanced-match\&quot;&gt;Enhanced match&lt;/a&gt;
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param conversion_tag_create [ConversionTagCreate] Conversion Tag to create
    # @return [Array<(ConversionTagResponse, Integer, Hash)>] ConversionTagResponse data, response status code and response headers
    def conversion_tags_create_with_http_info(ad_account_id : String, conversion_tag_create : ConversionTagCreate)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConversionTagsApi.conversion_tags_create ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling ConversionTagsApi.conversion_tags_create")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling ConversionTagsApi.conversion_tags_create, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling ConversionTagsApi.conversion_tags_create, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "conversion_tag_create" is set
      if @api_client.config.client_side_validation && conversion_tag_create.nil?
        raise ArgumentError.new("Missing the required parameter 'conversion_tag_create' when calling ConversionTagsApi.conversion_tags_create")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/conversion_tags".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = conversion_tag_create.to_json

      # return_type
      return_type = "ConversionTagResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ConversionTagsApi.conversion_tags_create",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConversionTagsApi#conversion_tags_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ConversionTagResponse.from_json(data), status_code, headers
    end

    # Get conversion tag
    # Get information about an existing conversion tag.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param conversion_tag_id [String] Id of the conversion tag.
    # @return [ConversionTagResponse]
    def conversion_tags_get(ad_account_id : String, conversion_tag_id : String)
      data, _status_code, _headers = conversion_tags_get_with_http_info(ad_account_id, conversion_tag_id)
      data
    end

    # Get conversion tag
    # Get information about an existing conversion tag.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param conversion_tag_id [String] Id of the conversion tag.
    # @return [Array<(ConversionTagResponse, Integer, Hash)>] ConversionTagResponse data, response status code and response headers
    def conversion_tags_get_with_http_info(ad_account_id : String, conversion_tag_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConversionTagsApi.conversion_tags_get ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling ConversionTagsApi.conversion_tags_get")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling ConversionTagsApi.conversion_tags_get, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling ConversionTagsApi.conversion_tags_get, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "conversion_tag_id" is set
      if @api_client.config.client_side_validation && conversion_tag_id.nil?
        raise ArgumentError.new("Missing the required parameter 'conversion_tag_id' when calling ConversionTagsApi.conversion_tags_get")
      end
      if @api_client.config.client_side_validation && conversion_tag_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"conversion_tag_id\" when calling ConversionTagsApi.conversion_tags_get, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && conversion_tag_id !~ pattern
        raise ArgumentError.new("invalid value for \"conversion_tag_id\" when calling ConversionTagsApi.conversion_tags_get, must conform to the pattern #{pattern}.")
      end

      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/conversion_tags/{conversion_tag_id}".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s)).sub("{" + "conversion_tag_id" + "}", URI.encode_path(conversion_tag_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "ConversionTagResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ConversionTagsApi.conversion_tags_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConversionTagsApi#conversion_tags_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ConversionTagResponse.from_json(data), status_code, headers
    end

    # Get conversion tags
    # List conversion tags associated with an ad account.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @return [ConversionTagListResponse]
    def conversion_tags_list(ad_account_id : String, filter_deleted : Bool?)
      data, _status_code, _headers = conversion_tags_list_with_http_info(ad_account_id, filter_deleted)
      data
    end

    # Get conversion tags
    # List conversion tags associated with an ad account.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @return [Array<(ConversionTagListResponse, Integer, Hash)>] ConversionTagListResponse data, response status code and response headers
    def conversion_tags_list_with_http_info(ad_account_id : String, filter_deleted : Bool?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConversionTagsApi.conversion_tags_list ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling ConversionTagsApi.conversion_tags_list")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling ConversionTagsApi.conversion_tags_list, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling ConversionTagsApi.conversion_tags_list, must conform to the pattern #{pattern}.")
      end

      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/conversion_tags".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["filter_deleted"] = filter_deleted.to_s unless filter_deleted.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "ConversionTagListResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ConversionTagsApi.conversion_tags_list",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConversionTagsApi#conversion_tags_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ConversionTagListResponse.from_json(data), status_code, headers
    end

    # Get Ocpm eligible conversion tags
    # Get Ocpm eligible conversion tag events for an ad account.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @return [Hash(String, Array(ConversionEventResponse))]
    def ocpm_eligible_conversion_tags_get(ad_account_id : String)
      data, _status_code, _headers = ocpm_eligible_conversion_tags_get_with_http_info(ad_account_id)
      data
    end

    # Get Ocpm eligible conversion tags
    # Get Ocpm eligible conversion tag events for an ad account.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @return [Array<(Hash(String, Array(ConversionEventResponse)), Integer, Hash)>] Hash(String, Array(ConversionEventResponse)) data, response status code and response headers
    def ocpm_eligible_conversion_tags_get_with_http_info(ad_account_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConversionTagsApi.ocpm_eligible_conversion_tags_get ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling ConversionTagsApi.ocpm_eligible_conversion_tags_get")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling ConversionTagsApi.ocpm_eligible_conversion_tags_get, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling ConversionTagsApi.ocpm_eligible_conversion_tags_get, must conform to the pattern #{pattern}.")
      end

      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/conversion_tags/ocpm_eligible".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Hash(String, Array(ConversionEventResponse))"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ConversionTagsApi.ocpm_eligible_conversion_tags_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConversionTagsApi#ocpm_eligible_conversion_tags_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Hash(String, Array(ConversionEventResponse)).from_json(data), status_code, headers
    end

    # Get page visit conversion tags
    # Get all page visit conversion tag events for an ad account.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @return [PageVisitConversionTagsGet200Response]
    def page_visit_conversion_tags_get(ad_account_id : String, page_size : Int32?, order : String?, bookmark : String?)
      data, _status_code, _headers = page_visit_conversion_tags_get_with_http_info(ad_account_id, page_size, order, bookmark)
      data
    end

    # Get page visit conversion tags
    # Get all page visit conversion tag events for an ad account.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @return [Array<(PageVisitConversionTagsGet200Response, Integer, Hash)>] PageVisitConversionTagsGet200Response data, response status code and response headers
    def page_visit_conversion_tags_get_with_http_info(ad_account_id : String, page_size : Int32?, order : String?, bookmark : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConversionTagsApi.page_visit_conversion_tags_get ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling ConversionTagsApi.page_visit_conversion_tags_get")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling ConversionTagsApi.page_visit_conversion_tags_get, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling ConversionTagsApi.page_visit_conversion_tags_get, must conform to the pattern #{pattern}.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size > 250
        raise ArgumentError.new("invalid value for \"page_size\" when calling ConversionTagsApi.page_visit_conversion_tags_get, must be smaller than or equal to 250.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size < 1
        raise ArgumentError.new("invalid value for \"page_size\" when calling ConversionTagsApi.page_visit_conversion_tags_get, must be greater than or equal to 1.")
      end

      allowable_values = ["ASCENDING", "DESCENDING"]
      if @api_client.config.client_side_validation && order && !allowable_values.includes?(order)
        raise ArgumentError.new("invalid value for \"order\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/conversion_tags/page_visit".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["page_size"] = page_size.to_s unless page_size.nil?
      query_params["order"] = order.to_s unless order.nil?
      query_params["bookmark"] = bookmark.to_s unless bookmark.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageVisitConversionTagsGet200Response"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ConversionTagsApi.page_visit_conversion_tags_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConversionTagsApi#page_visit_conversion_tags_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageVisitConversionTagsGet200Response.from_json(data), status_code, headers
    end
  end
end
