# #Pinterest REST API
#
##Pinterest's REST API
#
#The version of the OpenAPI document: 5.14.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.9.0
#

require "uri"

module OpenAPIClient
  class IntegrationsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete commerce integration
    # Delete commerce integration metadata for the given external business ID. Note: If you're interested in joining the beta, please reach out to your Pinterest account manager.
    # @param external_business_id [String] External business ID for the integration.
    # @return [nil]
    def integrations_commerce_del(external_business_id : String)
      integrations_commerce_del_with_http_info(external_business_id)
      nil
    end

    # Delete commerce integration
    # Delete commerce integration metadata for the given external business ID. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
    # @param external_business_id [String] External business ID for the integration.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def integrations_commerce_del_with_http_info(external_business_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: IntegrationsApi.integrations_commerce_del ..."}
      end
      # verify the required parameter "external_business_id" is set
      if @api_client.config.client_side_validation && external_business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'external_business_id' when calling IntegrationsApi.integrations_commerce_del")
      end
      # resource path
      local_var_path = "/integrations/commerce/{external_business_id}".sub("{" + "external_business_id" + "}", URI.encode_path(external_business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"IntegrationsApi.integrations_commerce_del",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: IntegrationsApi#integrations_commerce_del\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Get commerce integration
    # Get commerce integration metadata associated with the given external business ID. Note: If you're interested in joining the beta, please reach out to your Pinterest account manager.
    # @param external_business_id [String] External business ID for the integration.
    # @return [IntegrationMetadata]
    def integrations_commerce_get(external_business_id : String)
      data, _status_code, _headers = integrations_commerce_get_with_http_info(external_business_id)
      data
    end

    # Get commerce integration
    # Get commerce integration metadata associated with the given external business ID. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
    # @param external_business_id [String] External business ID for the integration.
    # @return [Array<(IntegrationMetadata, Integer, Hash)>] IntegrationMetadata data, response status code and response headers
    def integrations_commerce_get_with_http_info(external_business_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: IntegrationsApi.integrations_commerce_get ..."}
      end
      # verify the required parameter "external_business_id" is set
      if @api_client.config.client_side_validation && external_business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'external_business_id' when calling IntegrationsApi.integrations_commerce_get")
      end
      # resource path
      local_var_path = "/integrations/commerce/{external_business_id}".sub("{" + "external_business_id" + "}", URI.encode_path(external_business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "IntegrationMetadata"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"IntegrationsApi.integrations_commerce_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: IntegrationsApi#integrations_commerce_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return IntegrationMetadata.from_json(data), status_code, headers
    end

    # Update commerce integration
    # Update commerce integration metadata for the given external business ID. Note: If you're interested in joining the beta, please reach out to your Pinterest account manager.
    # @param external_business_id [String] External business ID for the integration.
    # @return [IntegrationMetadata]
    def integrations_commerce_patch(external_business_id : String, integration_request_patch : IntegrationRequestPatch?)
      data, _status_code, _headers = integrations_commerce_patch_with_http_info(external_business_id, integration_request_patch)
      data
    end

    # Update commerce integration
    # Update commerce integration metadata for the given external business ID. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
    # @param external_business_id [String] External business ID for the integration.
    # @return [Array<(IntegrationMetadata, Integer, Hash)>] IntegrationMetadata data, response status code and response headers
    def integrations_commerce_patch_with_http_info(external_business_id : String, integration_request_patch : IntegrationRequestPatch?)
      if @api_client.config.debugging
        Log.debug {"Calling API: IntegrationsApi.integrations_commerce_patch ..."}
      end
      # verify the required parameter "external_business_id" is set
      if @api_client.config.client_side_validation && external_business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'external_business_id' when calling IntegrationsApi.integrations_commerce_patch")
      end
      # resource path
      local_var_path = "/integrations/commerce/{external_business_id}".sub("{" + "external_business_id" + "}", URI.encode_path(external_business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = integration_request_patch.to_json

      # return_type
      return_type = "IntegrationMetadata"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"IntegrationsApi.integrations_commerce_patch",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: IntegrationsApi#integrations_commerce_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return IntegrationMetadata.from_json(data), status_code, headers
    end

    # Create commerce integration
    # Create commerce integration metadata to link an external business ID with a Pinterest merchant & ad account. Note: If you're interested in joining the beta, please reach out to your Pinterest account manager.
    # @return [IntegrationMetadata]
    def integrations_commerce_post(integration_request : IntegrationRequest?)
      data, _status_code, _headers = integrations_commerce_post_with_http_info(integration_request)
      data
    end

    # Create commerce integration
    # Create commerce integration metadata to link an external business ID with a Pinterest merchant &amp; ad account. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
    # @return [Array<(IntegrationMetadata, Integer, Hash)>] IntegrationMetadata data, response status code and response headers
    def integrations_commerce_post_with_http_info(integration_request : IntegrationRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: IntegrationsApi.integrations_commerce_post ..."}
      end
      # resource path
      local_var_path = "/integrations/commerce"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = integration_request.to_json

      # return_type
      return_type = "IntegrationMetadata"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"IntegrationsApi.integrations_commerce_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: IntegrationsApi#integrations_commerce_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return IntegrationMetadata.from_json(data), status_code, headers
    end

    # Get integration metadata
    # Get integration metadata by ID. Note: If you're interested in joining the beta, please reach out to your Pinterest account manager.
    # @param id [String] Integration ID.
    # @return [IntegrationRecord]
    def integrations_get_by_id(id : String)
      data, _status_code, _headers = integrations_get_by_id_with_http_info(id)
      data
    end

    # Get integration metadata
    # Get integration metadata by ID. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
    # @param id [String] Integration ID.
    # @return [Array<(IntegrationRecord, Integer, Hash)>] IntegrationRecord data, response status code and response headers
    def integrations_get_by_id_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: IntegrationsApi.integrations_get_by_id ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling IntegrationsApi.integrations_get_by_id")
      end
      # resource path
      local_var_path = "/integrations/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "IntegrationRecord"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"IntegrationsApi.integrations_get_by_id",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: IntegrationsApi#integrations_get_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return IntegrationRecord.from_json(data), status_code, headers
    end

    # Get integration metadata list
    # Get integration metadata list. Note: If you're interested in joining the beta, please reach out to your Pinterest account manager.
    # @return [IntegrationsGetList200Response]
    def integrations_get_list(bookmark : String?, page_size : Int32?)
      data, _status_code, _headers = integrations_get_list_with_http_info(bookmark, page_size)
      data
    end

    # Get integration metadata list
    # Get integration metadata list. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
    # @return [Array<(IntegrationsGetList200Response, Integer, Hash)>] IntegrationsGetList200Response data, response status code and response headers
    def integrations_get_list_with_http_info(bookmark : String?, page_size : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: IntegrationsApi.integrations_get_list ..."}
      end
      if @api_client.config.client_side_validation && !page_size.nil? && page_size > 250
        raise ArgumentError.new("invalid value for \"page_size\" when calling IntegrationsApi.integrations_get_list, must be smaller than or equal to 250.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size < 1
        raise ArgumentError.new("invalid value for \"page_size\" when calling IntegrationsApi.integrations_get_list, must be greater than or equal to 1.")
      end

      # resource path
      local_var_path = "/integrations"

      # query parameters
      query_params = Hash(String, String).new
      query_params["bookmark"] = bookmark.to_s unless bookmark.nil?
      query_params["page_size"] = page_size.to_s unless page_size.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "IntegrationsGetList200Response"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"IntegrationsApi.integrations_get_list",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: IntegrationsApi#integrations_get_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return IntegrationsGetList200Response.from_json(data), status_code, headers
    end

    # Receives batched logs from integration applications.
    # This endpoint receives batched logs from integration applications on partner platforms. Note: If you're interested in joining the beta, please reach out to your Pinterest account manager.
    # @param integration_logs_request [IntegrationLogsRequest] Ingest log information from external integration application.
    # @return [IntegrationLogsSuccessResponse]
    def integrations_logs_post(integration_logs_request : IntegrationLogsRequest)
      data, _status_code, _headers = integrations_logs_post_with_http_info(integration_logs_request)
      data
    end

    # Receives batched logs from integration applications.
    # This endpoint receives batched logs from integration applications on partner platforms. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
    # @param integration_logs_request [IntegrationLogsRequest] Ingest log information from external integration application.
    # @return [Array<(IntegrationLogsSuccessResponse, Integer, Hash)>] IntegrationLogsSuccessResponse data, response status code and response headers
    def integrations_logs_post_with_http_info(integration_logs_request : IntegrationLogsRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: IntegrationsApi.integrations_logs_post ..."}
      end
      # verify the required parameter "integration_logs_request" is set
      if @api_client.config.client_side_validation && integration_logs_request.nil?
        raise ArgumentError.new("Missing the required parameter 'integration_logs_request' when calling IntegrationsApi.integrations_logs_post")
      end
      # resource path
      local_var_path = "/integrations/logs"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = integration_logs_request.to_json

      # return_type
      return_type = "IntegrationLogsSuccessResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"IntegrationsApi.integrations_logs_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: IntegrationsApi#integrations_logs_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return IntegrationLogsSuccessResponse.from_json(data), status_code, headers
    end
  end
end
