# #Pinterest REST API
#
##Pinterest's REST API
#
#The version of the OpenAPI document: 5.14.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.9.0
#

require "uri"

module OpenAPIClient
  class AudienceSharingApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List accounts with access to an audience owned by an ad account
    # List all ad accounts and/or businesses that have access to a specific audience. The audience must be owned by the requesting ad account.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param audience_id [String] Unique identifier of the audience to use to filter the results.
    # @param account_type [AudienceAccountType] Filter accounts by account type.
    # @return [AdAccountsAudiencesSharedAccountsList200Response]
    def ad_accounts_audiences_shared_accounts_list(ad_account_id : String, audience_id : String, account_type : AudienceAccountType, page_size : Int32?, bookmark : String?)
      data, _status_code, _headers = ad_accounts_audiences_shared_accounts_list_with_http_info(ad_account_id, audience_id, account_type, page_size, bookmark)
      data
    end

    # List accounts with access to an audience owned by an ad account
    # List all ad accounts and/or businesses that have access to a specific audience. The audience must be owned by the requesting ad account.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param audience_id [String] Unique identifier of the audience to use to filter the results.
    # @param account_type [AudienceAccountType] Filter accounts by account type.
    # @return [Array<(AdAccountsAudiencesSharedAccountsList200Response, Integer, Hash)>] AdAccountsAudiencesSharedAccountsList200Response data, response status code and response headers
    def ad_accounts_audiences_shared_accounts_list_with_http_info(ad_account_id : String, audience_id : String, account_type : AudienceAccountType, page_size : Int32?, bookmark : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AudienceSharingApi.ad_accounts_audiences_shared_accounts_list ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AudienceSharingApi.ad_accounts_audiences_shared_accounts_list")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AudienceSharingApi.ad_accounts_audiences_shared_accounts_list, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AudienceSharingApi.ad_accounts_audiences_shared_accounts_list, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "audience_id" is set
      if @api_client.config.client_side_validation && audience_id.nil?
        raise ArgumentError.new("Missing the required parameter 'audience_id' when calling AudienceSharingApi.ad_accounts_audiences_shared_accounts_list")
      end
      if @api_client.config.client_side_validation && audience_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"audience_id\" when calling AudienceSharingApi.ad_accounts_audiences_shared_accounts_list, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && audience_id !~ pattern
        raise ArgumentError.new("invalid value for \"audience_id\" when calling AudienceSharingApi.ad_accounts_audiences_shared_accounts_list, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "account_type" is set
      if @api_client.config.client_side_validation && account_type.nil?
        raise ArgumentError.new("Missing the required parameter 'account_type' when calling AudienceSharingApi.ad_accounts_audiences_shared_accounts_list")
      end
      if @api_client.config.client_side_validation && !page_size.nil? && page_size > 250
        raise ArgumentError.new("invalid value for \"page_size\" when calling AudienceSharingApi.ad_accounts_audiences_shared_accounts_list, must be smaller than or equal to 250.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size < 1
        raise ArgumentError.new("invalid value for \"page_size\" when calling AudienceSharingApi.ad_accounts_audiences_shared_accounts_list, must be greater than or equal to 1.")
      end

      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/audiences/shared/accounts".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["audience_id"] = audience_id.to_s unless audience_id.nil?
      query_params["account_type"] = account_type.to_s unless account_type.nil?
      query_params["page_size"] = page_size.to_s unless page_size.nil?
      query_params["bookmark"] = bookmark.to_s unless bookmark.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "AdAccountsAudiencesSharedAccountsList200Response"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AudienceSharingApi.ad_accounts_audiences_shared_accounts_list",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AudienceSharingApi#ad_accounts_audiences_shared_accounts_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AdAccountsAudiencesSharedAccountsList200Response.from_json(data), status_code, headers
    end

    # List accounts with access to an audience owned by a business
    # List all ad accounts and/or businesses that have access to a specific audience. The audience must either be owned by an ad account in the requesting business, or it must have been shared with the requesting business. If the requesting business is not the owner of the audience, only ad accounts owned by the requesting business will be returned.
    # @param business_id [String] Unique identifier of the requesting business.
    # @param audience_id [String] Unique identifier of the audience to use to filter the results.
    # @param account_type [AudienceAccountType] Filter accounts by account type.
    # @return [AdAccountsAudiencesSharedAccountsList200Response]
    def business_account_audiences_shared_accounts_list(business_id : String, audience_id : String, account_type : AudienceAccountType, page_size : Int32?, bookmark : String?)
      data, _status_code, _headers = business_account_audiences_shared_accounts_list_with_http_info(business_id, audience_id, account_type, page_size, bookmark)
      data
    end

    # List accounts with access to an audience owned by a business
    # List all ad accounts and/or businesses that have access to a specific audience. The audience must either be owned by an ad account in the requesting business, or it must have been shared with the requesting business. If the requesting business is not the owner of the audience, only ad accounts owned by the requesting business will be returned.
    # @param business_id [String] Unique identifier of the requesting business.
    # @param audience_id [String] Unique identifier of the audience to use to filter the results.
    # @param account_type [AudienceAccountType] Filter accounts by account type.
    # @return [Array<(AdAccountsAudiencesSharedAccountsList200Response, Integer, Hash)>] AdAccountsAudiencesSharedAccountsList200Response data, response status code and response headers
    def business_account_audiences_shared_accounts_list_with_http_info(business_id : String, audience_id : String, account_type : AudienceAccountType, page_size : Int32?, bookmark : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AudienceSharingApi.business_account_audiences_shared_accounts_list ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling AudienceSharingApi.business_account_audiences_shared_accounts_list")
      end
      if @api_client.config.client_side_validation && business_id.to_s.size > 20
        raise ArgumentError.new("invalid value for \"business_id\" when calling AudienceSharingApi.business_account_audiences_shared_accounts_list, the character length must be smaller than or equal to 20.")
      end

      if @api_client.config.client_side_validation && business_id.to_s.size < 1
        raise ArgumentError.new("invalid value for \"business_id\" when calling AudienceSharingApi.business_account_audiences_shared_accounts_list, the character length must be great than or equal to 1.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && business_id !~ pattern
        raise ArgumentError.new("invalid value for \"business_id\" when calling AudienceSharingApi.business_account_audiences_shared_accounts_list, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "audience_id" is set
      if @api_client.config.client_side_validation && audience_id.nil?
        raise ArgumentError.new("Missing the required parameter 'audience_id' when calling AudienceSharingApi.business_account_audiences_shared_accounts_list")
      end
      if @api_client.config.client_side_validation && audience_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"audience_id\" when calling AudienceSharingApi.business_account_audiences_shared_accounts_list, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && audience_id !~ pattern
        raise ArgumentError.new("invalid value for \"audience_id\" when calling AudienceSharingApi.business_account_audiences_shared_accounts_list, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "account_type" is set
      if @api_client.config.client_side_validation && account_type.nil?
        raise ArgumentError.new("Missing the required parameter 'account_type' when calling AudienceSharingApi.business_account_audiences_shared_accounts_list")
      end
      if @api_client.config.client_side_validation && !page_size.nil? && page_size > 250
        raise ArgumentError.new("invalid value for \"page_size\" when calling AudienceSharingApi.business_account_audiences_shared_accounts_list, must be smaller than or equal to 250.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size < 1
        raise ArgumentError.new("invalid value for \"page_size\" when calling AudienceSharingApi.business_account_audiences_shared_accounts_list, must be greater than or equal to 1.")
      end

      # resource path
      local_var_path = "/businesses/{business_id}/audiences/shared/accounts".sub("{" + "business_id" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["audience_id"] = audience_id.to_s unless audience_id.nil?
      query_params["account_type"] = account_type.to_s unless account_type.nil?
      query_params["page_size"] = page_size.to_s unless page_size.nil?
      query_params["bookmark"] = bookmark.to_s unless bookmark.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "AdAccountsAudiencesSharedAccountsList200Response"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AudienceSharingApi.business_account_audiences_shared_accounts_list",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AudienceSharingApi#business_account_audiences_shared_accounts_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AdAccountsAudiencesSharedAccountsList200Response.from_json(data), status_code, headers
    end

    # List received audiences for a business
    # Get a list of received audiences for the given business.
    # @param business_id [String] Unique identifier of the requesting business.
    # @return [AudiencesList200Response]
    def shared_audiences_for_business_list(business_id : String, bookmark : String?, order : String?, page_size : Int32?)
      data, _status_code, _headers = shared_audiences_for_business_list_with_http_info(business_id, bookmark, order, page_size)
      data
    end

    # List received audiences for a business
    # Get a list of received audiences for the given business.
    # @param business_id [String] Unique identifier of the requesting business.
    # @return [Array<(AudiencesList200Response, Integer, Hash)>] AudiencesList200Response data, response status code and response headers
    def shared_audiences_for_business_list_with_http_info(business_id : String, bookmark : String?, order : String?, page_size : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AudienceSharingApi.shared_audiences_for_business_list ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling AudienceSharingApi.shared_audiences_for_business_list")
      end
      if @api_client.config.client_side_validation && business_id.to_s.size > 20
        raise ArgumentError.new("invalid value for \"business_id\" when calling AudienceSharingApi.shared_audiences_for_business_list, the character length must be smaller than or equal to 20.")
      end

      if @api_client.config.client_side_validation && business_id.to_s.size < 1
        raise ArgumentError.new("invalid value for \"business_id\" when calling AudienceSharingApi.shared_audiences_for_business_list, the character length must be great than or equal to 1.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && business_id !~ pattern
        raise ArgumentError.new("invalid value for \"business_id\" when calling AudienceSharingApi.shared_audiences_for_business_list, must conform to the pattern #{pattern}.")
      end

      allowable_values = ["ASCENDING", "DESCENDING"]
      if @api_client.config.client_side_validation && order && !allowable_values.includes?(order)
        raise ArgumentError.new("invalid value for \"order\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !page_size.nil? && page_size > 250
        raise ArgumentError.new("invalid value for \"page_size\" when calling AudienceSharingApi.shared_audiences_for_business_list, must be smaller than or equal to 250.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size < 1
        raise ArgumentError.new("invalid value for \"page_size\" when calling AudienceSharingApi.shared_audiences_for_business_list, must be greater than or equal to 1.")
      end

      # resource path
      local_var_path = "/businesses/{business_id}/audiences".sub("{" + "business_id" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["bookmark"] = bookmark.to_s unless bookmark.nil?
      query_params["order"] = order.to_s unless order.nil?
      query_params["page_size"] = page_size.to_s unless page_size.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "AudiencesList200Response"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AudienceSharingApi.shared_audiences_for_business_list",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AudienceSharingApi#shared_audiences_for_business_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AudiencesList200Response.from_json(data), status_code, headers
    end

    # Update audience sharing between ad accounts
    # From an ad account, share a specific audience with another ad account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient ad account(s) must be in the same <a href='https://help.pinterest.com/en/business/article/create-and-manage-accounts'>Pinterest Business Hierarchy</a> as the business owner of the ad account.<br> This endpoint is not available to all apps.<a href='/docs/getting-started/beta-and-advanced-access/'>Learn more</a>.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param shared_audience [SharedAudience] 
    # @return [SharedAudienceResponse]
    def update_ad_account_to_ad_account_shared_audience(ad_account_id : String, shared_audience : SharedAudience)
      data, _status_code, _headers = update_ad_account_to_ad_account_shared_audience_with_http_info(ad_account_id, shared_audience)
      data
    end

    # Update audience sharing between ad accounts
    # From an ad account, share a specific audience with another ad account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient ad account(s) must be in the same &lt;a href&#x3D;&#39;https://help.pinterest.com/en/business/article/create-and-manage-accounts&#39;&gt;Pinterest Business Hierarchy&lt;/a&gt; as the business owner of the ad account.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param shared_audience [SharedAudience] 
    # @return [Array<(SharedAudienceResponse, Integer, Hash)>] SharedAudienceResponse data, response status code and response headers
    def update_ad_account_to_ad_account_shared_audience_with_http_info(ad_account_id : String, shared_audience : SharedAudience)
      if @api_client.config.debugging
        Log.debug {"Calling API: AudienceSharingApi.update_ad_account_to_ad_account_shared_audience ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AudienceSharingApi.update_ad_account_to_ad_account_shared_audience")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AudienceSharingApi.update_ad_account_to_ad_account_shared_audience, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AudienceSharingApi.update_ad_account_to_ad_account_shared_audience, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "shared_audience" is set
      if @api_client.config.client_side_validation && shared_audience.nil?
        raise ArgumentError.new("Missing the required parameter 'shared_audience' when calling AudienceSharingApi.update_ad_account_to_ad_account_shared_audience")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/audiences/ad_accounts/shared".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = shared_audience.to_json

      # return_type
      return_type = "SharedAudienceResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"AudienceSharingApi.update_ad_account_to_ad_account_shared_audience",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AudienceSharingApi#update_ad_account_to_ad_account_shared_audience\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return SharedAudienceResponse.from_json(data), status_code, headers
    end

    # Update audience sharing from an ad account to businesses
    # From an ad account, share a specific audience with a business account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient business account must be in the same business hierarchy as the business owner of the ad account.<br> This endpoint is not available to all apps.<a href='/docs/getting-started/beta-and-advanced-access/'>Learn more</a>.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param business_shared_audience [BusinessSharedAudience] 
    # @return [BusinessSharedAudienceResponse]
    def update_ad_account_to_business_shared_audience(ad_account_id : String, business_shared_audience : BusinessSharedAudience)
      data, _status_code, _headers = update_ad_account_to_business_shared_audience_with_http_info(ad_account_id, business_shared_audience)
      data
    end

    # Update audience sharing from an ad account to businesses
    # From an ad account, share a specific audience with a business account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient business account must be in the same business hierarchy as the business owner of the ad account.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param business_shared_audience [BusinessSharedAudience] 
    # @return [Array<(BusinessSharedAudienceResponse, Integer, Hash)>] BusinessSharedAudienceResponse data, response status code and response headers
    def update_ad_account_to_business_shared_audience_with_http_info(ad_account_id : String, business_shared_audience : BusinessSharedAudience)
      if @api_client.config.debugging
        Log.debug {"Calling API: AudienceSharingApi.update_ad_account_to_business_shared_audience ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AudienceSharingApi.update_ad_account_to_business_shared_audience")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AudienceSharingApi.update_ad_account_to_business_shared_audience, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AudienceSharingApi.update_ad_account_to_business_shared_audience, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "business_shared_audience" is set
      if @api_client.config.client_side_validation && business_shared_audience.nil?
        raise ArgumentError.new("Missing the required parameter 'business_shared_audience' when calling AudienceSharingApi.update_ad_account_to_business_shared_audience")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/audiences/businesses/shared".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = business_shared_audience.to_json

      # return_type
      return_type = "BusinessSharedAudienceResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"AudienceSharingApi.update_ad_account_to_business_shared_audience",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AudienceSharingApi#update_ad_account_to_business_shared_audience\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return BusinessSharedAudienceResponse.from_json(data), status_code, headers
    end

    # Update audience sharing from a business to ad accounts
    # From a business, share a specific audience with other ad account(s), or revoke access to a previously shared audience. <ul> <li>If the business is the owner of the audience, it can share with any ad account within the same business hierarchy.</li> <li>If the business is the recipient of the audience, it can share with any of its owned ad accounts.</li> </ul> This endpoint is not available to all apps.<a href='/docs/getting-started/beta-and-advanced-access/'>Learn more</a>.
    # @param business_id [String] Unique identifier of the requesting business.
    # @param shared_audience [SharedAudience] 
    # @return [SharedAudienceResponse]
    def update_business_to_ad_account_shared_audience(business_id : String, shared_audience : SharedAudience)
      data, _status_code, _headers = update_business_to_ad_account_shared_audience_with_http_info(business_id, shared_audience)
      data
    end

    # Update audience sharing from a business to ad accounts
    # From a business, share a specific audience with other ad account(s), or revoke access to a previously shared audience. &lt;ul&gt; &lt;li&gt;If the business is the owner of the audience, it can share with any ad account within the same business hierarchy.&lt;/li&gt; &lt;li&gt;If the business is the recipient of the audience, it can share with any of its owned ad accounts.&lt;/li&gt; &lt;/ul&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
    # @param business_id [String] Unique identifier of the requesting business.
    # @param shared_audience [SharedAudience] 
    # @return [Array<(SharedAudienceResponse, Integer, Hash)>] SharedAudienceResponse data, response status code and response headers
    def update_business_to_ad_account_shared_audience_with_http_info(business_id : String, shared_audience : SharedAudience)
      if @api_client.config.debugging
        Log.debug {"Calling API: AudienceSharingApi.update_business_to_ad_account_shared_audience ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling AudienceSharingApi.update_business_to_ad_account_shared_audience")
      end
      if @api_client.config.client_side_validation && business_id.to_s.size > 20
        raise ArgumentError.new("invalid value for \"business_id\" when calling AudienceSharingApi.update_business_to_ad_account_shared_audience, the character length must be smaller than or equal to 20.")
      end

      if @api_client.config.client_side_validation && business_id.to_s.size < 1
        raise ArgumentError.new("invalid value for \"business_id\" when calling AudienceSharingApi.update_business_to_ad_account_shared_audience, the character length must be great than or equal to 1.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && business_id !~ pattern
        raise ArgumentError.new("invalid value for \"business_id\" when calling AudienceSharingApi.update_business_to_ad_account_shared_audience, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "shared_audience" is set
      if @api_client.config.client_side_validation && shared_audience.nil?
        raise ArgumentError.new("Missing the required parameter 'shared_audience' when calling AudienceSharingApi.update_business_to_ad_account_shared_audience")
      end
      # resource path
      local_var_path = "/businesses/{business_id}/audiences/ad_accounts/shared".sub("{" + "business_id" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = shared_audience.to_json

      # return_type
      return_type = "SharedAudienceResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"AudienceSharingApi.update_business_to_ad_account_shared_audience",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AudienceSharingApi#update_business_to_ad_account_shared_audience\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return SharedAudienceResponse.from_json(data), status_code, headers
    end

    # Update audience sharing between businesses
    # From a business, share a specific audience with another business account, or revoke access to a previously shared audience. Only the audience owner can share the audience with other businesses, and the recipient business must be within the same business hierarchy.<br> This endpoint is not available to all apps.<a href='/docs/getting-started/beta-and-advanced-access/'>Learn more</a>.
    # @param business_id [String] Unique identifier of the requesting business.
    # @param business_shared_audience [BusinessSharedAudience] 
    # @return [BusinessSharedAudienceResponse]
    def update_business_to_business_shared_audience(business_id : String, business_shared_audience : BusinessSharedAudience)
      data, _status_code, _headers = update_business_to_business_shared_audience_with_http_info(business_id, business_shared_audience)
      data
    end

    # Update audience sharing between businesses
    # From a business, share a specific audience with another business account, or revoke access to a previously shared audience. Only the audience owner can share the audience with other businesses, and the recipient business must be within the same business hierarchy.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
    # @param business_id [String] Unique identifier of the requesting business.
    # @param business_shared_audience [BusinessSharedAudience] 
    # @return [Array<(BusinessSharedAudienceResponse, Integer, Hash)>] BusinessSharedAudienceResponse data, response status code and response headers
    def update_business_to_business_shared_audience_with_http_info(business_id : String, business_shared_audience : BusinessSharedAudience)
      if @api_client.config.debugging
        Log.debug {"Calling API: AudienceSharingApi.update_business_to_business_shared_audience ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling AudienceSharingApi.update_business_to_business_shared_audience")
      end
      if @api_client.config.client_side_validation && business_id.to_s.size > 20
        raise ArgumentError.new("invalid value for \"business_id\" when calling AudienceSharingApi.update_business_to_business_shared_audience, the character length must be smaller than or equal to 20.")
      end

      if @api_client.config.client_side_validation && business_id.to_s.size < 1
        raise ArgumentError.new("invalid value for \"business_id\" when calling AudienceSharingApi.update_business_to_business_shared_audience, the character length must be great than or equal to 1.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && business_id !~ pattern
        raise ArgumentError.new("invalid value for \"business_id\" when calling AudienceSharingApi.update_business_to_business_shared_audience, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "business_shared_audience" is set
      if @api_client.config.client_side_validation && business_shared_audience.nil?
        raise ArgumentError.new("Missing the required parameter 'business_shared_audience' when calling AudienceSharingApi.update_business_to_business_shared_audience")
      end
      # resource path
      local_var_path = "/businesses/{business_id}/audiences/businesses/shared".sub("{" + "business_id" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = business_shared_audience.to_json

      # return_type
      return_type = "BusinessSharedAudienceResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"AudienceSharingApi.update_business_to_business_shared_audience",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AudienceSharingApi#update_business_to_business_shared_audience\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return BusinessSharedAudienceResponse.from_json(data), status_code, headers
    end
  end
end
