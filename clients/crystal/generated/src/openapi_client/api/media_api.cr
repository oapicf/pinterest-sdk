# #Pinterest REST API
#
##Pinterest's REST API
#
#The version of the OpenAPI document: 5.14.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.9.0
#

require "uri"

module OpenAPIClient
  class MediaApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Register media upload
    # Register your intent to upload media  The response includes all of the information needed to upload the media to Pinterest.  To upload the media, make an HTTP POST request (using <tt>curl</tt>, for example) to <tt>upload_url</tt> using the <tt>Content-Type</tt> header value. Send the media file's contents as the request's <tt>file</tt> parameter and also include all of the parameters from <tt>upload_parameters</tt>.  <strong><a href='/docs/api-features/creating-boards-and-pins/#creating-video-pins'>Learn more</a></strong> about video Pin creation.
    # @param media_upload_request [MediaUploadRequest] Create a media upload request
    # @return [MediaUpload]
    def media_create(media_upload_request : MediaUploadRequest)
      data, _status_code, _headers = media_create_with_http_info(media_upload_request)
      data
    end

    # Register media upload
    # Register your intent to upload media  The response includes all of the information needed to upload the media to Pinterest.  To upload the media, make an HTTP POST request (using &lt;tt&gt;curl&lt;/tt&gt;, for example) to &lt;tt&gt;upload_url&lt;/tt&gt; using the &lt;tt&gt;Content-Type&lt;/tt&gt; header value. Send the media file&#39;s contents as the request&#39;s &lt;tt&gt;file&lt;/tt&gt; parameter and also include all of the parameters from &lt;tt&gt;upload_parameters&lt;/tt&gt;.  &lt;strong&gt;&lt;a href&#x3D;&#39;/docs/api-features/creating-boards-and-pins/#creating-video-pins&#39;&gt;Learn more&lt;/a&gt;&lt;/strong&gt; about video Pin creation.
    # @param media_upload_request [MediaUploadRequest] Create a media upload request
    # @return [Array<(MediaUpload, Integer, Hash)>] MediaUpload data, response status code and response headers
    def media_create_with_http_info(media_upload_request : MediaUploadRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: MediaApi.media_create ..."}
      end
      # verify the required parameter "media_upload_request" is set
      if @api_client.config.client_side_validation && media_upload_request.nil?
        raise ArgumentError.new("Missing the required parameter 'media_upload_request' when calling MediaApi.media_create")
      end
      # resource path
      local_var_path = "/media"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = media_upload_request.to_json

      # return_type
      return_type = "MediaUpload"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"MediaApi.media_create",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: MediaApi#media_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return MediaUpload.from_json(data), status_code, headers
    end

    # Get media upload details
    # Get details for a registered media upload, including its current status.  <strong><a href='/docs/api-features/creating-boards-and-pins/#creating-video-pins'>Learn more</a></strong> about video Pin creation.
    # @param media_id [String] Media identifier
    # @return [MediaUploadDetails]
    def media_get(media_id : String)
      data, _status_code, _headers = media_get_with_http_info(media_id)
      data
    end

    # Get media upload details
    # Get details for a registered media upload, including its current status.  &lt;strong&gt;&lt;a href&#x3D;&#39;/docs/api-features/creating-boards-and-pins/#creating-video-pins&#39;&gt;Learn more&lt;/a&gt;&lt;/strong&gt; about video Pin creation.
    # @param media_id [String] Media identifier
    # @return [Array<(MediaUploadDetails, Integer, Hash)>] MediaUploadDetails data, response status code and response headers
    def media_get_with_http_info(media_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: MediaApi.media_get ..."}
      end
      # verify the required parameter "media_id" is set
      if @api_client.config.client_side_validation && media_id.nil?
        raise ArgumentError.new("Missing the required parameter 'media_id' when calling MediaApi.media_get")
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && media_id !~ pattern
        raise ArgumentError.new("invalid value for \"media_id\" when calling MediaApi.media_get, must conform to the pattern #{pattern}.")
      end

      # resource path
      local_var_path = "/media/{media_id}".sub("{" + "media_id" + "}", URI.encode_path(media_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "MediaUploadDetails"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"MediaApi.media_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: MediaApi#media_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return MediaUploadDetails.from_json(data), status_code, headers
    end

    # List media uploads
    # List media uploads filtered by given parameters.  <strong><a href='/docs/api-features/creating-boards-and-pins/#creating-video-pins'>Learn more</a></strong> about video Pin creation.
    # @return [MediaList200Response]
    def media_list(bookmark : String?, page_size : Int32?)
      data, _status_code, _headers = media_list_with_http_info(bookmark, page_size)
      data
    end

    # List media uploads
    # List media uploads filtered by given parameters.  &lt;strong&gt;&lt;a href&#x3D;&#39;/docs/api-features/creating-boards-and-pins/#creating-video-pins&#39;&gt;Learn more&lt;/a&gt;&lt;/strong&gt; about video Pin creation.
    # @return [Array<(MediaList200Response, Integer, Hash)>] MediaList200Response data, response status code and response headers
    def media_list_with_http_info(bookmark : String?, page_size : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: MediaApi.media_list ..."}
      end
      if @api_client.config.client_side_validation && !page_size.nil? && page_size > 250
        raise ArgumentError.new("invalid value for \"page_size\" when calling MediaApi.media_list, must be smaller than or equal to 250.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size < 1
        raise ArgumentError.new("invalid value for \"page_size\" when calling MediaApi.media_list, must be greater than or equal to 1.")
      end

      # resource path
      local_var_path = "/media"

      # query parameters
      query_params = Hash(String, String).new
      query_params["bookmark"] = bookmark.to_s unless bookmark.nil?
      query_params["page_size"] = page_size.to_s unless page_size.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "MediaList200Response"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"MediaApi.media_list",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: MediaApi#media_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return MediaList200Response.from_json(data), status_code, headers
    end
  end
end
