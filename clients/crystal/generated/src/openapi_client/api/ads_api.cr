# #Pinterest REST API
#
##Pinterest's REST API
#
#The version of the OpenAPI document: 5.14.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.9.0
#

require "uri"

module OpenAPIClient
  class AdsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create ad preview with pin or image
    # Create an ad preview given an ad account ID and either an existing organic pin ID or the URL for an image to be used to create the Pin and the ad. <p/> If you are creating a preview from an existing Pin, that Pin must be promotable: that is, it must have a clickthrough link and meet other requirements. (See <a href=\"https://help.pinterest.com/en/business/article/promoted-pins-overview\" target=\"_blank\">Ads Overview</a>.) <p/> You can view the returned preview URL on a webpage or iframe for 7 days, after which the URL expires. Collection ads are not currently supported ad preview.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param ad_preview_request [AdPreviewRequest] Create ad preview with pin or image.
    # @return [AdPreviewURLResponse]
    def ad_previews_create(ad_account_id : String, ad_preview_request : AdPreviewRequest)
      data, _status_code, _headers = ad_previews_create_with_http_info(ad_account_id, ad_preview_request)
      data
    end

    # Create ad preview with pin or image
    # Create an ad preview given an ad account ID and either an existing organic pin ID or the URL for an image to be used to create the Pin and the ad. &lt;p/&gt; If you are creating a preview from an existing Pin, that Pin must be promotable: that is, it must have a clickthrough link and meet other requirements. (See &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/promoted-pins-overview\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Ads Overview&lt;/a&gt;.) &lt;p/&gt; You can view the returned preview URL on a webpage or iframe for 7 days, after which the URL expires. Collection ads are not currently supported ad preview.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param ad_preview_request [AdPreviewRequest] Create ad preview with pin or image.
    # @return [Array<(AdPreviewURLResponse, Integer, Hash)>] AdPreviewURLResponse data, response status code and response headers
    def ad_previews_create_with_http_info(ad_account_id : String, ad_preview_request : AdPreviewRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdsApi.ad_previews_create ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdsApi.ad_previews_create")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdsApi.ad_previews_create, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdsApi.ad_previews_create, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "ad_preview_request" is set
      if @api_client.config.client_side_validation && ad_preview_request.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_preview_request' when calling AdsApi.ad_previews_create")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/ad_previews".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = ad_preview_request.to_json

      # return_type
      return_type = "AdPreviewURLResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AdsApi.ad_previews_create",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdsApi#ad_previews_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AdPreviewURLResponse.from_json(data), status_code, headers
    end

    # Get targeting analytics for ads
    # Get targeting analytics for one or more ads. For the requested ad(s) and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \"age_bucket\") for applicable values (e.g. \"45-49\"). <p/> - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param ad_ids [Array(String)] List of Ad Ids to use to filter the results.
    # @param start_date [Time] Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
    # @param end_date [Time] Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
    # @param targeting_types [Array(AdsAnalyticsAdTargetingType)] Targeting type breakdowns for the report. The reporting per targeting type &lt;br&gt; is independent from each other. [\&quot;AGE_BUCKET_AND_GENDER\&quot;] is in BETA and not yet available to all users.
    # @param columns [Array(String)] Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
    # @param granularity [Granularity] TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
    # @return [MetricsResponse]
    def ad_targeting_analytics_get(ad_account_id : String, ad_ids : Array(String), start_date : Time, end_date : Time, targeting_types : Array(AdsAnalyticsAdTargetingType), columns : Array(String), granularity : Granularity, click_window_days : Int32?, engagement_window_days : Int32?, view_window_days : Int32?, conversion_report_time : String?, attribution_types : ConversionReportAttributionType?)
      data, _status_code, _headers = ad_targeting_analytics_get_with_http_info(ad_account_id, ad_ids, start_date, end_date, targeting_types, columns, granularity, click_window_days, engagement_window_days, view_window_days, conversion_report_time, attribution_types)
      data
    end

    # Get targeting analytics for ads
    # Get targeting analytics for one or more ads. For the requested ad(s) and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \&quot;age_bucket\&quot;) for applicable values (e.g. \&quot;45-49\&quot;). &lt;p/&gt; - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param ad_ids [Array(String)] List of Ad Ids to use to filter the results.
    # @param start_date [Time] Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
    # @param end_date [Time] Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
    # @param targeting_types [Array(AdsAnalyticsAdTargetingType)] Targeting type breakdowns for the report. The reporting per targeting type &lt;br&gt; is independent from each other. [\&quot;AGE_BUCKET_AND_GENDER\&quot;] is in BETA and not yet available to all users.
    # @param columns [Array(String)] Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
    # @param granularity [Granularity] TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
    # @return [Array<(MetricsResponse, Integer, Hash)>] MetricsResponse data, response status code and response headers
    def ad_targeting_analytics_get_with_http_info(ad_account_id : String, ad_ids : Array(String), start_date : Time, end_date : Time, targeting_types : Array(AdsAnalyticsAdTargetingType), columns : Array(String), granularity : Granularity, click_window_days : Int32?, engagement_window_days : Int32?, view_window_days : Int32?, conversion_report_time : String?, attribution_types : ConversionReportAttributionType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdsApi.ad_targeting_analytics_get ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdsApi.ad_targeting_analytics_get")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdsApi.ad_targeting_analytics_get, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdsApi.ad_targeting_analytics_get, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "ad_ids" is set
      if @api_client.config.client_side_validation && ad_ids.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_ids' when calling AdsApi.ad_targeting_analytics_get")
      end
      if @api_client.config.client_side_validation && ad_ids.size > 100
        raise ArgumentError.new("invalid value for \"ad_ids\" when calling AdsApi.ad_targeting_analytics_get, number of items must be less than or equal to 100.")
      end

      if @api_client.config.client_side_validation && ad_ids.size < 1
        raise ArgumentError.new("invalid value for \"ad_ids\" when calling AdsApi.ad_targeting_analytics_get, number of items must be greater than or equal to 1.")
      end

      # verify the required parameter "start_date" is set
      if @api_client.config.client_side_validation && start_date.nil?
        raise ArgumentError.new("Missing the required parameter 'start_date' when calling AdsApi.ad_targeting_analytics_get")
      end
      # verify the required parameter "end_date" is set
      if @api_client.config.client_side_validation && end_date.nil?
        raise ArgumentError.new("Missing the required parameter 'end_date' when calling AdsApi.ad_targeting_analytics_get")
      end
      # verify the required parameter "targeting_types" is set
      if @api_client.config.client_side_validation && targeting_types.nil?
        raise ArgumentError.new("Missing the required parameter 'targeting_types' when calling AdsApi.ad_targeting_analytics_get")
      end
      if @api_client.config.client_side_validation && targeting_types.size > 14
        raise ArgumentError.new("invalid value for \"targeting_types\" when calling AdsApi.ad_targeting_analytics_get, number of items must be less than or equal to 14.")
      end

      if @api_client.config.client_side_validation && targeting_types.size < 1
        raise ArgumentError.new("invalid value for \"targeting_types\" when calling AdsApi.ad_targeting_analytics_get, number of items must be greater than or equal to 1.")
      end

      # verify the required parameter "columns" is set
      if @api_client.config.client_side_validation && columns.nil?
        raise ArgumentError.new("Missing the required parameter 'columns' when calling AdsApi.ad_targeting_analytics_get")
      end
      # verify the required parameter "granularity" is set
      if @api_client.config.client_side_validation && granularity.nil?
        raise ArgumentError.new("Missing the required parameter 'granularity' when calling AdsApi.ad_targeting_analytics_get")
      end
      allowable_values = ["0", "1", "7", "14", "30", "60"]
      if @api_client.config.client_side_validation && click_window_days && !allowable_values.includes?(click_window_days)
        raise ArgumentError.new("invalid value for \"click_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["0", "1", "7", "14", "30", "60"]
      if @api_client.config.client_side_validation && engagement_window_days && !allowable_values.includes?(engagement_window_days)
        raise ArgumentError.new("invalid value for \"engagement_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["0", "1", "7", "14", "30", "60"]
      if @api_client.config.client_side_validation && view_window_days && !allowable_values.includes?(view_window_days)
        raise ArgumentError.new("invalid value for \"view_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["TIME_OF_AD_ACTION", "TIME_OF_CONVERSION"]
      if @api_client.config.client_side_validation && conversion_report_time && !allowable_values.includes?(conversion_report_time)
        raise ArgumentError.new("invalid value for \"conversion_report_time\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/ads/targeting_analytics".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["ad_ids"] = @api_client.build_collection_param(ad_ids, :multi)
      query_params["start_date"] = start_date.to_s unless start_date.nil?
      query_params["end_date"] = end_date.to_s unless end_date.nil?
      query_params["targeting_types"] = @api_client.build_collection_param(targeting_types, :csv)
      query_params["columns"] = @api_client.build_collection_param(columns, :csv)
      query_params["granularity"] = granularity.to_s unless granularity.nil?
      query_params["click_window_days"] = click_window_days.to_s unless click_window_days.nil?
      query_params["engagement_window_days"] = engagement_window_days.to_s unless engagement_window_days.nil?
      query_params["view_window_days"] = view_window_days.to_s unless view_window_days.nil?
      query_params["conversion_report_time"] = conversion_report_time.to_s unless conversion_report_time.nil?
      query_params["attribution_types"] = attribution_types.to_s unless attribution_types.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "MetricsResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AdsApi.ad_targeting_analytics_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdsApi#ad_targeting_analytics_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return MetricsResponse.from_json(data), status_code, headers
    end

    # Get ad analytics
    # Get analytics for the specified ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - The request must contain either ad_ids or both campaign_ids and pin_ids. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param start_date [Time] Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
    # @param end_date [Time] Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
    # @param columns [Array(String)] Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
    # @param granularity [Granularity] TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
    # @return [Array(AdsAnalyticsResponseInner)]
    def ads_analytics(ad_account_id : String, start_date : Time, end_date : Time, columns : Array(String), granularity : Granularity, ad_ids : Array(String)?, click_window_days : Int32?, engagement_window_days : Int32?, view_window_days : Int32?, conversion_report_time : String?, pin_ids : Array(String)?, campaign_ids : Array(String)?)
      data, _status_code, _headers = ads_analytics_with_http_info(ad_account_id, start_date, end_date, columns, granularity, ad_ids, click_window_days, engagement_window_days, view_window_days, conversion_report_time, pin_ids, campaign_ids)
      data
    end

    # Get ad analytics
    # Get analytics for the specified ads in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - The request must contain either ad_ids or both campaign_ids and pin_ids. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param start_date [Time] Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
    # @param end_date [Time] Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
    # @param columns [Array(String)] Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
    # @param granularity [Granularity] TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
    # @return [Array<(Array(AdsAnalyticsResponseInner), Integer, Hash)>] Array(AdsAnalyticsResponseInner) data, response status code and response headers
    def ads_analytics_with_http_info(ad_account_id : String, start_date : Time, end_date : Time, columns : Array(String), granularity : Granularity, ad_ids : Array(String)?, click_window_days : Int32?, engagement_window_days : Int32?, view_window_days : Int32?, conversion_report_time : String?, pin_ids : Array(String)?, campaign_ids : Array(String)?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdsApi.ads_analytics ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdsApi.ads_analytics")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdsApi.ads_analytics, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdsApi.ads_analytics, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "start_date" is set
      if @api_client.config.client_side_validation && start_date.nil?
        raise ArgumentError.new("Missing the required parameter 'start_date' when calling AdsApi.ads_analytics")
      end
      # verify the required parameter "end_date" is set
      if @api_client.config.client_side_validation && end_date.nil?
        raise ArgumentError.new("Missing the required parameter 'end_date' when calling AdsApi.ads_analytics")
      end
      # verify the required parameter "columns" is set
      if @api_client.config.client_side_validation && columns.nil?
        raise ArgumentError.new("Missing the required parameter 'columns' when calling AdsApi.ads_analytics")
      end
      # verify the required parameter "granularity" is set
      if @api_client.config.client_side_validation && granularity.nil?
        raise ArgumentError.new("Missing the required parameter 'granularity' when calling AdsApi.ads_analytics")
      end
      if @api_client.config.client_side_validation && ad_ids.nil? && ad_ids.size > 100
        raise ArgumentError.new("invalid value for \"ad_ids\" when calling AdsApi.ads_analytics, number of items must be less than or equal to 100.")
      end

      if @api_client.config.client_side_validation && ad_ids.nil? && ad_ids.size < 1
        raise ArgumentError.new("invalid value for \"ad_ids\" when calling AdsApi.ads_analytics, number of items must be greater than or equal to 1.")
      end

      allowable_values = ["0", "1", "7", "14", "30", "60"]
      if @api_client.config.client_side_validation && click_window_days && !allowable_values.includes?(click_window_days)
        raise ArgumentError.new("invalid value for \"click_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["0", "1", "7", "14", "30", "60"]
      if @api_client.config.client_side_validation && engagement_window_days && !allowable_values.includes?(engagement_window_days)
        raise ArgumentError.new("invalid value for \"engagement_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["0", "1", "7", "14", "30", "60"]
      if @api_client.config.client_side_validation && view_window_days && !allowable_values.includes?(view_window_days)
        raise ArgumentError.new("invalid value for \"view_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["TIME_OF_AD_ACTION", "TIME_OF_CONVERSION"]
      if @api_client.config.client_side_validation && conversion_report_time && !allowable_values.includes?(conversion_report_time)
        raise ArgumentError.new("invalid value for \"conversion_report_time\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && pin_ids.nil? && pin_ids.size > 100
        raise ArgumentError.new("invalid value for \"pin_ids\" when calling AdsApi.ads_analytics, number of items must be less than or equal to 100.")
      end

      if @api_client.config.client_side_validation && pin_ids.nil? && pin_ids.size < 1
        raise ArgumentError.new("invalid value for \"pin_ids\" when calling AdsApi.ads_analytics, number of items must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && campaign_ids.nil? && campaign_ids.size > 100
        raise ArgumentError.new("invalid value for \"campaign_ids\" when calling AdsApi.ads_analytics, number of items must be less than or equal to 100.")
      end

      if @api_client.config.client_side_validation && campaign_ids.nil? && campaign_ids.size < 1
        raise ArgumentError.new("invalid value for \"campaign_ids\" when calling AdsApi.ads_analytics, number of items must be greater than or equal to 1.")
      end

      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/ads/analytics".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["start_date"] = start_date.to_s unless start_date.nil?
      query_params["end_date"] = end_date.to_s unless end_date.nil?
      query_params["ad_ids"] = @api_client.build_collection_param(ad_ids, :multi)
      query_params["columns"] = @api_client.build_collection_param(columns, :csv)
      query_params["granularity"] = granularity.to_s unless granularity.nil?
      query_params["click_window_days"] = click_window_days.to_s unless click_window_days.nil?
      query_params["engagement_window_days"] = engagement_window_days.to_s unless engagement_window_days.nil?
      query_params["view_window_days"] = view_window_days.to_s unless view_window_days.nil?
      query_params["conversion_report_time"] = conversion_report_time.to_s unless conversion_report_time.nil?
      query_params["pin_ids"] = @api_client.build_collection_param(pin_ids, :multi)
      query_params["campaign_ids"] = @api_client.build_collection_param(campaign_ids, :multi)

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(AdsAnalyticsResponseInner)"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AdsApi.ads_analytics",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdsApi#ads_analytics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(AdsAnalyticsResponseInner).from_json(data), status_code, headers
    end

    # Create ads
    # Create multiple new ads. Request must contain ad_group_id, creative_type, and the source Pin pin_id.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param ad_create_request [Array(AdCreateRequest)] List of ads to create, size limit [1, 30].
    # @return [AdArrayResponse]
    def ads_create(ad_account_id : String, ad_create_request : Array(AdCreateRequest))
      data, _status_code, _headers = ads_create_with_http_info(ad_account_id, ad_create_request)
      data
    end

    # Create ads
    # Create multiple new ads. Request must contain ad_group_id, creative_type, and the source Pin pin_id.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param ad_create_request [Array(AdCreateRequest)] List of ads to create, size limit [1, 30].
    # @return [Array<(AdArrayResponse, Integer, Hash)>] AdArrayResponse data, response status code and response headers
    def ads_create_with_http_info(ad_account_id : String, ad_create_request : Array(AdCreateRequest))
      if @api_client.config.debugging
        Log.debug {"Calling API: AdsApi.ads_create ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdsApi.ads_create")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdsApi.ads_create, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdsApi.ads_create, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "ad_create_request" is set
      if @api_client.config.client_side_validation && ad_create_request.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_create_request' when calling AdsApi.ads_create")
      end
      if @api_client.config.client_side_validation && ad_create_request.size > 30
        raise ArgumentError.new("invalid value for \"ad_create_request\" when calling AdsApi.ads_create, number of items must be less than or equal to 30.")
      end

      if @api_client.config.client_side_validation && ad_create_request.size < 1
        raise ArgumentError.new("invalid value for \"ad_create_request\" when calling AdsApi.ads_create, number of items must be greater than or equal to 1.")
      end

      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/ads".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = ad_create_request.to_json

      # return_type
      return_type = "AdArrayResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AdsApi.ads_create",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdsApi#ads_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AdArrayResponse.from_json(data), status_code, headers
    end

    # Get ad
    # Get a specific ad given the ad ID. If your pin is rejected, rejected_reasons will contain additional information from the Ad Review process. For more information about our policies and rejection reasons see the <a href=\"https://www.pinterest.com/_/_/policy/advertising-guidelines/\" target=\"_blank\">Pinterest advertising standards</a>.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param ad_id [String] Unique identifier of an ad.
    # @return [AdResponse]
    def ads_get(ad_account_id : String, ad_id : String)
      data, _status_code, _headers = ads_get_with_http_info(ad_account_id, ad_id)
      data
    end

    # Get ad
    # Get a specific ad given the ad ID. If your pin is rejected, rejected_reasons will contain additional information from the Ad Review process. For more information about our policies and rejection reasons see the &lt;a href&#x3D;\&quot;https://www.pinterest.com/_/_/policy/advertising-guidelines/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Pinterest advertising standards&lt;/a&gt;.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param ad_id [String] Unique identifier of an ad.
    # @return [Array<(AdResponse, Integer, Hash)>] AdResponse data, response status code and response headers
    def ads_get_with_http_info(ad_account_id : String, ad_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdsApi.ads_get ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdsApi.ads_get")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdsApi.ads_get, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdsApi.ads_get, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "ad_id" is set
      if @api_client.config.client_side_validation && ad_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_id' when calling AdsApi.ads_get")
      end
      if @api_client.config.client_side_validation && ad_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_id\" when calling AdsApi.ads_get, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_id\" when calling AdsApi.ads_get, must conform to the pattern #{pattern}.")
      end

      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/ads/{ad_id}".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s)).sub("{" + "ad_id" + "}", URI.encode_path(ad_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "AdResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AdsApi.ads_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdsApi#ads_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AdResponse.from_json(data), status_code, headers
    end

    # List ads
    # List ads that meet the filters provided:   - Listed campaign ids or ad group ids or ad ids   - Listed entity statuses <p/> If no filter is provided, all ads in the ad account are returned. <p/> <strong>Note:</strong><p/> Provide only campaign_id or ad_group_id or ad_id. Do not provide more than one type. <p/> Review status is provided for each ad; if review_status is REJECTED, the rejected_reasons field will contain additional information. For more, see <a href=\"https://policy.pinterest.com/en/advertising-guidelines\">Pinterest advertising standards</a>.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @return [AdsList200Response]
    def ads_list(ad_account_id : String, campaign_ids : Array(String)?, ad_group_ids : Array(String)?, ad_ids : Array(String)?, entity_statuses : Array(String)?, page_size : Int32?, order : String?, bookmark : String?)
      data, _status_code, _headers = ads_list_with_http_info(ad_account_id, campaign_ids, ad_group_ids, ad_ids, entity_statuses, page_size, order, bookmark)
      data
    end

    # List ads
    # List ads that meet the filters provided:   - Listed campaign ids or ad group ids or ad ids   - Listed entity statuses &lt;p/&gt; If no filter is provided, all ads in the ad account are returned. &lt;p/&gt; &lt;strong&gt;Note:&lt;/strong&gt;&lt;p/&gt; Provide only campaign_id or ad_group_id or ad_id. Do not provide more than one type. &lt;p/&gt; Review status is provided for each ad; if review_status is REJECTED, the rejected_reasons field will contain additional information. For more, see &lt;a href&#x3D;\&quot;https://policy.pinterest.com/en/advertising-guidelines\&quot;&gt;Pinterest advertising standards&lt;/a&gt;.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @return [Array<(AdsList200Response, Integer, Hash)>] AdsList200Response data, response status code and response headers
    def ads_list_with_http_info(ad_account_id : String, campaign_ids : Array(String)?, ad_group_ids : Array(String)?, ad_ids : Array(String)?, entity_statuses : Array(String)?, page_size : Int32?, order : String?, bookmark : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdsApi.ads_list ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdsApi.ads_list")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdsApi.ads_list, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdsApi.ads_list, must conform to the pattern #{pattern}.")
      end

      if @api_client.config.client_side_validation && campaign_ids.nil? && campaign_ids.size > 100
        raise ArgumentError.new("invalid value for \"campaign_ids\" when calling AdsApi.ads_list, number of items must be less than or equal to 100.")
      end

      if @api_client.config.client_side_validation && campaign_ids.nil? && campaign_ids.size < 1
        raise ArgumentError.new("invalid value for \"campaign_ids\" when calling AdsApi.ads_list, number of items must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && ad_group_ids.nil? && ad_group_ids.size > 100
        raise ArgumentError.new("invalid value for \"ad_group_ids\" when calling AdsApi.ads_list, number of items must be less than or equal to 100.")
      end

      if @api_client.config.client_side_validation && ad_group_ids.nil? && ad_group_ids.size < 1
        raise ArgumentError.new("invalid value for \"ad_group_ids\" when calling AdsApi.ads_list, number of items must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && ad_ids.nil? && ad_ids.size > 100
        raise ArgumentError.new("invalid value for \"ad_ids\" when calling AdsApi.ads_list, number of items must be less than or equal to 100.")
      end

      if @api_client.config.client_side_validation && ad_ids.nil? && ad_ids.size < 1
        raise ArgumentError.new("invalid value for \"ad_ids\" when calling AdsApi.ads_list, number of items must be greater than or equal to 1.")
      end

      allowable_values = ["ACTIVE", "PAUSED", "ARCHIVED", "DRAFT", "DELETED_DRAFT"]
      if @api_client.config.client_side_validation && entity_statuses && entity_statuses.all? { |item| allowable_values.includes?(item) }
        raise ArgumentError.new("invalid value for \"entity_statuses\", must include one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !page_size.nil? && page_size > 250
        raise ArgumentError.new("invalid value for \"page_size\" when calling AdsApi.ads_list, must be smaller than or equal to 250.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size < 1
        raise ArgumentError.new("invalid value for \"page_size\" when calling AdsApi.ads_list, must be greater than or equal to 1.")
      end

      allowable_values = ["ASCENDING", "DESCENDING"]
      if @api_client.config.client_side_validation && order && !allowable_values.includes?(order)
        raise ArgumentError.new("invalid value for \"order\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/ads".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["campaign_ids"] = @api_client.build_collection_param(campaign_ids, :multi)
      query_params["ad_group_ids"] = @api_client.build_collection_param(ad_group_ids, :multi)
      query_params["ad_ids"] = @api_client.build_collection_param(ad_ids, :multi)
      query_params["entity_statuses"] = @api_client.build_collection_param(entity_statuses, :multi)
      query_params["page_size"] = page_size.to_s unless page_size.nil?
      query_params["order"] = order.to_s unless order.nil?
      query_params["bookmark"] = bookmark.to_s unless bookmark.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "AdsList200Response"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AdsApi.ads_list",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdsApi#ads_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AdsList200Response.from_json(data), status_code, headers
    end

    # Update ads
    # Update multiple existing ads
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param ad_update_request [Array(AdUpdateRequest)] List of ads to update, size limit [1, 30]
    # @return [AdArrayResponse]
    def ads_update(ad_account_id : String, ad_update_request : Array(AdUpdateRequest))
      data, _status_code, _headers = ads_update_with_http_info(ad_account_id, ad_update_request)
      data
    end

    # Update ads
    # Update multiple existing ads
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param ad_update_request [Array(AdUpdateRequest)] List of ads to update, size limit [1, 30]
    # @return [Array<(AdArrayResponse, Integer, Hash)>] AdArrayResponse data, response status code and response headers
    def ads_update_with_http_info(ad_account_id : String, ad_update_request : Array(AdUpdateRequest))
      if @api_client.config.debugging
        Log.debug {"Calling API: AdsApi.ads_update ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdsApi.ads_update")
      end
      if @api_client.config.client_side_validation && ad_account_id.to_s.size > 18
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdsApi.ads_update, the character length must be smaller than or equal to 18.")
      end

      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdsApi.ads_update, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "ad_update_request" is set
      if @api_client.config.client_side_validation && ad_update_request.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_update_request' when calling AdsApi.ads_update")
      end
      if @api_client.config.client_side_validation && ad_update_request.size > 30
        raise ArgumentError.new("invalid value for \"ad_update_request\" when calling AdsApi.ads_update, number of items must be less than or equal to 30.")
      end

      if @api_client.config.client_side_validation && ad_update_request.size < 1
        raise ArgumentError.new("invalid value for \"ad_update_request\" when calling AdsApi.ads_update, number of items must be greater than or equal to 1.")
      end

      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/ads".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = ad_update_request.to_json

      # return_type
      return_type = "AdArrayResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"AdsApi.ads_update",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdsApi#ads_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AdArrayResponse.from_json(data), status_code, headers
    end
  end
end
