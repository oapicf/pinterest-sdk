/*
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASAudiencesApi {
    OASClient client;

    public OASAudiencesApi(OASClient client) {
        this.client = client;
    }

    public OASAudiencesApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Create audience
     * Create an audience you can use in targeting for specific ad groups. Targeting combines customer information with\nthe ways users interact with Pinterest to help you reach specific groups of users; you can include or exclude\nspecific audience_ids when you create an ad group. &lt;p/&gt;\nFor more, see &lt;a class&#x3D;&quot;reference external&quot; href&#x3D;&quot;https://help.pinterest.com/en/business/article/audience-targeting&quot; target&#x3D;&quot;_blank&quot;&gt;Audience targeting&lt;/a&gt;.
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param oaSAudienceCreateRequest List of ads to create, size limit [1, 30] (required)
     * @return OASAudience
     * @throws OAS.ApiException if fails to make API call
     */
    public OASAudience audiencesCreate(Map<String, Object> params) {
        client.assertNotNull(params.get('adAccountId'), 'adAccountId');
        client.assertNotNull(params.get('oaSAudienceCreateRequest'), 'oaSAudienceCreateRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASAudience) client.invoke(
            'POST', '/ad_accounts/{ad_account_id}/audiences',
            (OASAudienceCreateRequest) params.get('oaSAudienceCreateRequest'),
            query, form,
            new Map<String, Object>{
                'ad_account_id' => (String) params.get('adAccountId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'pinterest_oauth2' },
            OASAudience.class
        );
    }
    /**
     * Create custom audience
     * Create a custom audience and find the audiences you want your ads to reach.
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param oaSAudienceCreateCustomRequest Custom audience to create. (required)
     * @return OASAudience
     * @throws OAS.ApiException if fails to make API call
     */
    public OASAudience audiencesCreateCustom(Map<String, Object> params) {
        client.assertNotNull(params.get('adAccountId'), 'adAccountId');
        client.assertNotNull(params.get('oaSAudienceCreateCustomRequest'), 'oaSAudienceCreateCustomRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASAudience) client.invoke(
            'POST', '/ad_accounts/{ad_account_id}/audiences/custom',
            (OASAudienceCreateCustomRequest) params.get('oaSAudienceCreateCustomRequest'),
            query, form,
            new Map<String, Object>{
                'ad_account_id' => (String) params.get('adAccountId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'pinterest_oauth2' },
            OASAudience.class
        );
    }
    /**
     * Get audience
     * Get a specific audience given the audience ID.
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param audienceId Unique identifier of an audience (required)
     * @return OASAudience
     * @throws OAS.ApiException if fails to make API call
     */
    public OASAudience audiencesGet(Map<String, Object> params) {
        client.assertNotNull(params.get('adAccountId'), 'adAccountId');
        client.assertNotNull(params.get('audienceId'), 'audienceId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASAudience) client.invoke(
            'GET', '/ad_accounts/{ad_account_id}/audiences/{audience_id}', '',
            query, form,
            new Map<String, Object>{
                'ad_account_id' => (String) params.get('adAccountId'),
                'audience_id' => (String) params.get('audienceId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'pinterest_oauth2' },
            OASAudience.class
        );
    }
    /**
     * List audiences
     * Get list of audiences for the ad account.
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID.\nFor received audiences, it is sorted by sharing event time.\nNote that higher-value IDs are associated with more-recently added items. (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param ownershipType Filter audiences by ownership type. (optional, default to OWNED)
     * @return OASAudiencesList200Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASAudiencesList200Response audiencesList(Map<String, Object> params) {
        client.assertNotNull(params.get('adAccountId'), 'adAccountId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('bookmark', (String) params.get('bookmark')));
        query.addAll(client.makeParam('order', (String) params.get('order')));
        query.addAll(client.makeParam('page_size', (Integer) params.get('pageSize')));
        query.addAll(client.makeParam('ownership_type', (String) params.get('ownershipType')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASAudiencesList200Response) client.invoke(
            'GET', '/ad_accounts/{ad_account_id}/audiences', '',
            query, form,
            new Map<String, Object>{
                'ad_account_id' => (String) params.get('adAccountId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'pinterest_oauth2' },
            OASAudiencesList200Response.class
        );
    }
    /**
     * Update audience
     * Update (edit or remove) an existing targeting audience.
     * @param adAccountId Unique identifier of an ad account. (required)
     * @param audienceId Unique identifier of an audience (required)
     * @param oaSAudienceUpdateRequest The audience to be updated. (optional)
     * @return OASAudience
     * @throws OAS.ApiException if fails to make API call
     */
    public OASAudience audiencesUpdate(Map<String, Object> params) {
        client.assertNotNull(params.get('adAccountId'), 'adAccountId');
        client.assertNotNull(params.get('audienceId'), 'audienceId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASAudience) client.invoke(
            'PATCH', '/ad_accounts/{ad_account_id}/audiences/{audience_id}',
            (OASAudienceUpdateRequest) params.get('oaSAudienceUpdateRequest'),
            query, form,
            new Map<String, Object>{
                'ad_account_id' => (String) params.get('adAccountId'),
                'audience_id' => (String) params.get('audienceId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'pinterest_oauth2' },
            OASAudience.class
        );
    }
}
