/*
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASLinkedBusiness
 */
public class OASLinkedBusiness implements OAS.MappedProperties {
    /**
     * Username
     * @return username
     */
    public String username { get; set; }

    /**
     * image_small_url
     * @return imageSmallUrl
     */
    public String imageSmallUrl { get; set; }

    /**
     * image_medium_url
     * @return imageMediumUrl
     */
    public String imageMediumUrl { get; set; }

    /**
     * image_large_url
     * @return imageLargeUrl
     */
    public String imageLargeUrl { get; set; }

    /**
     * image_xlarge_url
     * @return imageXlargeUrl
     */
    public String imageXlargeUrl { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'image_small_url' => 'imageSmallUrl',
        'image_medium_url' => 'imageMediumUrl',
        'image_large_url' => 'imageLargeUrl',
        'image_xlarge_url' => 'imageXlargeUrl'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'image_small_url' => 'imageSmallUrl',
        'image_medium_url' => 'imageMediumUrl',
        'image_large_url' => 'imageLargeUrl',
        'image_xlarge_url' => 'imageXlargeUrl'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'image_small_url' => 'imageSmallUrl',
        'image_medium_url' => 'imageMediumUrl',
        'image_large_url' => 'imageLargeUrl',
        'image_xlarge_url' => 'imageXlargeUrl'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'image_small_url' => 'imageSmallUrl',
        'image_medium_url' => 'imageMediumUrl',
        'image_large_url' => 'imageLargeUrl',
        'image_xlarge_url' => 'imageXlargeUrl'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASLinkedBusiness getExample() {
        OASLinkedBusiness linkedBusiness = new OASLinkedBusiness();
          linkedBusiness.username = 'username';
          linkedBusiness.imageSmallUrl = 'https://www.example.com/dj23454f53dfk2324.jpg';
          linkedBusiness.imageMediumUrl = 'https://www.example.com/dj23454f53dfk2324.jpg';
          linkedBusiness.imageLargeUrl = 'https://www.example.com/dj23454f53dfk2324.jpg';
          linkedBusiness.imageXlargeUrl = 'https://www.example.com/dj23454f53dfk2324.jpg';
        return linkedBusiness;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASLinkedBusiness) {           
            OASLinkedBusiness linkedBusiness = (OASLinkedBusiness) obj;
            return this.username == linkedBusiness.username
                && this.imageSmallUrl == linkedBusiness.imageSmallUrl
                && this.imageMediumUrl == linkedBusiness.imageMediumUrl
                && this.imageLargeUrl == linkedBusiness.imageLargeUrl
                && this.imageXlargeUrl == linkedBusiness.imageXlargeUrl;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (username == null ? 0 : System.hashCode(username));
        hashCode = (17 * hashCode) + (imageSmallUrl == null ? 0 : System.hashCode(imageSmallUrl));
        hashCode = (17 * hashCode) + (imageMediumUrl == null ? 0 : System.hashCode(imageMediumUrl));
        hashCode = (17 * hashCode) + (imageLargeUrl == null ? 0 : System.hashCode(imageLargeUrl));
        hashCode = (17 * hashCode) + (imageXlargeUrl == null ? 0 : System.hashCode(imageXlargeUrl));
        return hashCode;
    }
}

