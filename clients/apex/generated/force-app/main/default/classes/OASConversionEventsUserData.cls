/*
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Object containing customer information data. Note, It is required at least one of 1) em, 2) hashed_maids or 3) pair client_ip_address + client_user_agent.
 */
public class OASConversionEventsUserData implements OASConversionEventsUserDataAnyOf, OASConversionEventsUserDataAnyOf1, OASConversionEventsUserDataAnyOf2, OAS.MappedProperties {
    /**
     * Sha256 hashes of user\'s phone numbers, only digits with country code, area code, and number. Remove any symbols, letters, spaces and leading zeros. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
     * @return ph
     */
    public List<String> ph { get; set; }

    /**
     * Sha256 hashes of user\'s gender, in lowercase. Either "f" or "m" or "n" for non-binary gender. The string should be in the UTF-8 format.
     * @return ge
     */
    public List<String> ge { get; set; }

    /**
     * Sha256 hashes of user\'s date of birthday, given as year, month, and day. The string should be in the UTF-8 format.
     * @return db
     */
    public List<String> db { get; set; }

    /**
     * Sha256 hashes of user\'s last name, in lowercase. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
     * @return ln
     */
    public List<String> ln { get; set; }

    /**
     * Sha256 hashes of user\'s first name, in lowercase. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
     * @return fn
     */
    public List<String> fn { get; set; }

    /**
     * Sha256 hashes of user\'s city, in lowercase, and without spaces or punctuation. User residency city (mostly billing). The string should be in the UTF-8 format.
     * @return ct
     */
    public List<String> ct { get; set; }

    /**
     * Sha256 hashes of user\'s state, given as a two-letter code in lowercase. User residency state (mostly billing). The string should be in the UTF-8 format.
     * @return st
     */
    public List<String> st { get; set; }

    /**
     * Sha256 hashes of user\'s zipcode, only digits. User residency zipcode (mostly billing). The string should be in the UTF-8 format.
     * @return zp
     */
    public List<String> zp { get; set; }

    /**
     * Sha256 hashes of two-character ISO-3166 country code indicating the user\'s country, in lowercase. The string should be in the UTF-8 format.
     * @return country
     */
    public List<String> country { get; set; }

    /**
     * Sha256 hashes of the unique id from the advertiser that identifies a user in their space, e.g. user id, loyalty id, etc. We highly recommend this on all events. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
     * @return externalId
     */
    public List<String> externalId { get; set; }

    /**
     * The unique identifier stored in _epik cookie on your domain or &epik= query parameter in the URL. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA.
     * @return clickId
     */
    public String clickId { get; set; }

    /**
     * A unique identifier of visitors\' information defined by third party partners. e.g RampID
     * @return partnerId
     */
    public String partnerId { get; set; }

    /**
     * Sha256 hashes of lowercase version of user\'s email addresses. Used for matching. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
     * @return em
     */
    public List<String> em { get; set; }

    /**
     * Sha256 hashes of user\'s "Google Advertising IDs" (GAIDs) or "Apple\'s Identifier for Advertisers" (IDFAs). Used for matching. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
     * @return hashedMaids
     */
    public List<String> hashedMaids { get; set; }

    /**
     * The user\'s IP address, which can be either in IPv4 or IPv6 format. Used for matching. We highly recommend this for all events. It may improve reporting performance such as ROAS/CPA.
     * @return clientIpAddress
     */
    public String clientIpAddress { get; set; }

    /**
     * The user agent string of the user\'s web browser. We highly recommend this for all events. It may improve reporting performance such as ROAS/CPA.
     * @return clientUserAgent
     */
    public String clientUserAgent { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'external_id' => 'externalId',
        'click_id' => 'clickId',
        'partner_id' => 'partnerId',
        'hashed_maids' => 'hashedMaids',
        'client_ip_address' => 'clientIpAddress',
        'client_user_agent' => 'clientUserAgent'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'external_id' => 'externalId',
        'click_id' => 'clickId',
        'partner_id' => 'partnerId',
        'hashed_maids' => 'hashedMaids',
        'client_ip_address' => 'clientIpAddress',
        'client_user_agent' => 'clientUserAgent'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'external_id' => 'externalId',
        'click_id' => 'clickId',
        'partner_id' => 'partnerId',
        'hashed_maids' => 'hashedMaids',
        'client_ip_address' => 'clientIpAddress',
        'client_user_agent' => 'clientUserAgent'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'external_id' => 'externalId',
        'click_id' => 'clickId',
        'partner_id' => 'partnerId',
        'hashed_maids' => 'hashedMaids',
        'client_ip_address' => 'clientIpAddress',
        'client_user_agent' => 'clientUserAgent'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'external_id' => 'externalId',
        'click_id' => 'clickId',
        'partner_id' => 'partnerId',
        'hashed_maids' => 'hashedMaids',
        'client_ip_address' => 'clientIpAddress',
        'client_user_agent' => 'clientUserAgent'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'external_id' => 'externalId',
        'click_id' => 'clickId',
        'partner_id' => 'partnerId',
        'hashed_maids' => 'hashedMaids',
        'client_ip_address' => 'clientIpAddress',
        'client_user_agent' => 'clientUserAgent'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public OASConversionEventsUserData() {
        ph = new List<String>();
        ge = new List<String>();
        db = new List<String>();
        ln = new List<String>();
        fn = new List<String>();
        ct = new List<String>();
        st = new List<String>();
        zp = new List<String>();
        country = new List<String>();
        externalId = new List<String>();
        em = new List<String>();
        hashedMaids = new List<String>();
    }

    public static OASConversionEventsUserData getExample() {
        OASConversionEventsUserData conversionEventsUserData = new OASConversionEventsUserData();
          conversionEventsUserData.ph = new List<String>{''};
          conversionEventsUserData.ge = new List<String>{''};
          conversionEventsUserData.db = new List<String>{''};
          conversionEventsUserData.ln = new List<String>{''};
          conversionEventsUserData.fn = new List<String>{''};
          conversionEventsUserData.ct = new List<String>{''};
          conversionEventsUserData.st = new List<String>{''};
          conversionEventsUserData.zp = new List<String>{''};
          conversionEventsUserData.country = new List<String>{''};
          conversionEventsUserData.externalId = new List<String>{''};
          conversionEventsUserData.clickId = 'dj0yJnU9b2JDcFFHekV4SHJNcmVrbFBkUEdqakh0akdUT1VjVVUmcD0yJm49cnNBQ3F2Q2dOVDBXWWhkWklrUGxBUSZ0PUFBQUFBR1BaY3Bv';
          conversionEventsUserData.partnerId = 'BUJrTlRRzGJmWhRXFZdkioV6wKPBve7Lom__GU9J74hq2NIQj4O3nOZJrp3mcUr5MptkXsI14juMOIM9mNZnM4zEUFT2JLVaFhcOfuuWz3IWEDtBf6I0DPc';
          conversionEventsUserData.em = new List<String>{''};
          conversionEventsUserData.hashedMaids = new List<String>{''};
          conversionEventsUserData.clientIpAddress = '216.3.128.12';
          conversionEventsUserData.clientUserAgent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36';
        return conversionEventsUserData;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASConversionEventsUserData) {           
            OASConversionEventsUserData conversionEventsUserData = (OASConversionEventsUserData) obj;
            return this.ph == conversionEventsUserData.ph
                && this.ge == conversionEventsUserData.ge
                && this.db == conversionEventsUserData.db
                && this.ln == conversionEventsUserData.ln
                && this.fn == conversionEventsUserData.fn
                && this.ct == conversionEventsUserData.ct
                && this.st == conversionEventsUserData.st
                && this.zp == conversionEventsUserData.zp
                && this.country == conversionEventsUserData.country
                && this.externalId == conversionEventsUserData.externalId
                && this.clickId == conversionEventsUserData.clickId
                && this.partnerId == conversionEventsUserData.partnerId
                && this.em == conversionEventsUserData.em
                && this.hashedMaids == conversionEventsUserData.hashedMaids
                && this.clientIpAddress == conversionEventsUserData.clientIpAddress
                && this.clientUserAgent == conversionEventsUserData.clientUserAgent;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (ph == null ? 0 : System.hashCode(ph));
        hashCode = (17 * hashCode) + (ge == null ? 0 : System.hashCode(ge));
        hashCode = (17 * hashCode) + (db == null ? 0 : System.hashCode(db));
        hashCode = (17 * hashCode) + (ln == null ? 0 : System.hashCode(ln));
        hashCode = (17 * hashCode) + (fn == null ? 0 : System.hashCode(fn));
        hashCode = (17 * hashCode) + (ct == null ? 0 : System.hashCode(ct));
        hashCode = (17 * hashCode) + (st == null ? 0 : System.hashCode(st));
        hashCode = (17 * hashCode) + (zp == null ? 0 : System.hashCode(zp));
        hashCode = (17 * hashCode) + (country == null ? 0 : System.hashCode(country));
        hashCode = (17 * hashCode) + (externalId == null ? 0 : System.hashCode(externalId));
        hashCode = (17 * hashCode) + (clickId == null ? 0 : System.hashCode(clickId));
        hashCode = (17 * hashCode) + (partnerId == null ? 0 : System.hashCode(partnerId));
        hashCode = (17 * hashCode) + (em == null ? 0 : System.hashCode(em));
        hashCode = (17 * hashCode) + (hashedMaids == null ? 0 : System.hashCode(hashedMaids));
        hashCode = (17 * hashCode) + (clientIpAddress == null ? 0 : System.hashCode(clientIpAddress));
        hashCode = (17 * hashCode) + (clientUserAgent == null ? 0 : System.hashCode(clientUserAgent));
        return hashCode;
    }
}

