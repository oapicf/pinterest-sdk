/*
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * JSON object defining targeted audience users. Example rule formats per audience type:&lt;br&gt;CUSTOMER_LIST: { &quot;customer_list_id&quot;: &quot;&amp;lt;customer list ID&amp;gt;&quot;}&lt;br&gt;ACTALIKE: { &quot;seed_id&quot;: [&quot;&amp;lt;audience ID&amp;gt;&quot;], &quot;country&quot;: &quot;US&quot;, &quot;percentage&quot;: &quot;10&quot; }&lt;br&gt;(Valid countries include: &quot;US&quot;, &quot;CA&quot;, and &quot;GB&quot;. Percentage should be 1-10.&lt;br&gt;The targeted audience should be this % size across Pinterest.)&lt;br&gt;VISITOR: { &quot;visitor_source_id&quot;: [&quot;&amp;lt;conversion tag ID&amp;gt;&quot;], &quot;retention_days&quot;: &quot;180&quot;, &quot;event_source&quot;: {&quot;&#x3D;&quot;: [&quot;web&quot;, &quot;mobile&quot;]}, &quot;ingestion_source&quot;: {&quot;&#x3D;&quot;: [&quot;tag&quot;]}}&lt;br&gt;(Retention days should be 1-540. Retention applies to specific customers.)&lt;br&gt;ENGAGEMENT: {&quot;engagement_domain&quot;: [&quot;www.entomi.com&quot;], &quot;engager_type&quot;: 1}&lt;br&gt;For more details on engagement audiences, see &lt;a href&#x3D;&quot;/docs/redoc/adtech_ads_v4/#section/November-2021&quot; target&#x3D;&quot;_blank&quot;&gt;November 2021 changelog&lt;/a&gt;.
 */
public class OASAudienceRule implements OAS.MappedProperties {
    /**
     * Valid countries include: "US", "CA", and "GB".
     * @return country
     */
    public String country { get; set; }

    /**
     * Customer list ID. For CUSTOMER_LIST `audience_type`.
     * @return customerListId
     */
    public String customerListId { get; set; }

    /**
     * The audience account\'s verified domain. **Required** for ENGAGEMENT `audience_type`.
     * @return engagementDomain
     */
    public List<String> engagementDomain { get; set; }

    /**
     * Engagement type enum. Optional for ENGAGEMENT `audience_type`. Supported values are `click`, `save`, `closeup`, `comment` and `like`. All engagements are included if this field is not set. 
     * @return engagementType
     */
    public String engagementType { get; set; }

    /**
     * A Pinterest tag event. Optional for VISITOR `audience_type`. Possible values are `pagevisit`, `signup`, `checkout`, `viewcategory`, `search`, `addtocart`, `watchvideo`, `lead`, and `custom`. This field also accepts a partner-defined Pinterest tag event.
     * @return event
     */
    public String event { get; set; }

    /**
     * Get eventData
     * @return eventData
     */
    public OASPinterestTagEventData eventData { get; set; }

    /**
     * Percentage should be 1-10. The targeted audience should be this % size across Pinterest.
     * @return percentage
     */
    public Integer percentage { get; set; }

    /**
     * IDs of engaged organic pins. Optional for ENGAGEMENT `audience_type`. For example, "pin_id:": ["34567"]
     * @return pinId
     */
    public List<String> pinId { get; set; }

    /**
     * Optional for VISITOR `audience_type`. If `true`, the specified rule on existing engagement data is applied to pre-populate the audience. If `false`, the audience is empty at creation time. The default is `true`.
     * @return prefill
     */
    public Boolean prefill { get; set; }

    /**
     * Number of days a Pinterest user remains in the audience. Optional for ENGAGEMENT and VISITOR `audience_type`. Accepted range is 1-540. Defaults to 180 if not specified.
     * @return retentionDays
     */
    public Integer retentionDays { get; set; }

    /**
     * Audience ID(s). For ACTALIKE `audience_type`. 
     * @return seedId
     */
    public List<String> seedId { get; set; }

    /**
     * Optional for ENGAGEMENT or VISITOR `audience_type`. For ENGAGEMENT, it is the engaged pin\'s URL. For VISITOR, you can use it as a string or a {operator: value} object for filtering visitors based on conversion tag event URLs. Supported operators are [ =, !=, contains, not_contains].<br>Example 1:  "url": "http://www.myonlinestore123.com/view_item/shoe"<br>Example 2: "url": {"contains": "/view_item/shoe"}
     * @return url
     */
    public List<String> url { get; set; }

    /**
     * The conversion tag ID, or the Pinterest tag ID, that you use on your website. For VISITOR `audience_type`.
     * @return visitorSourceId
     */
    public String visitorSourceId { get; set; }

    /**
     * Optional for VISITOR. You can use it as a {\'=\': [value]}. Supported values are: web, mobile, offline
     * @return eventSource
     */
    public Object eventSource { get; set; }

    /**
     * Optional for VISITOR. You can use it as a {\'=\': [value]}. Supported values are: tag, mmp, file_upload, conversions_api
     * @return ingestionSource
     */
    public Object ingestionSource { get; set; }

    /**
     * Optional for ENGAGEMENT. Engager type value should be 1-2.
     * @return engagerType
     */
    public Integer engagerType { get; set; }

    /**
     * Campaign ID for engagement audience filter.
     * @return campaignId
     */
    public List<String> campaignId { get; set; }

    /**
     * Ad ID for engagement audience filter.
     * @return adId
     */
    public List<String> adId { get; set; }

    /**
     * Objective for engagement audience filter.
     * @return objectiveType
     */
    public List<OASObjectiveType> objectiveType { get; set; }

    /**
     * Ad account ID.
     * @return adAccountId
     */
    public String adAccountId { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'customer_list_id' => 'customerListId',
        'engagement_domain' => 'engagementDomain',
        'engagement_type' => 'engagementType',
        'event_data' => 'eventData',
        'pin_id' => 'pinId',
        'retention_days' => 'retentionDays',
        'seed_id' => 'seedId',
        'visitor_source_id' => 'visitorSourceId',
        'event_source' => 'eventSource',
        'ingestion_source' => 'ingestionSource',
        'engager_type' => 'engagerType',
        'campaign_id' => 'campaignId',
        'ad_id' => 'adId',
        'objective_type' => 'objectiveType',
        'ad_account_id' => 'adAccountId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'customer_list_id' => 'customerListId',
        'engagement_domain' => 'engagementDomain',
        'engagement_type' => 'engagementType',
        'event_data' => 'eventData',
        'pin_id' => 'pinId',
        'retention_days' => 'retentionDays',
        'seed_id' => 'seedId',
        'visitor_source_id' => 'visitorSourceId',
        'event_source' => 'eventSource',
        'ingestion_source' => 'ingestionSource',
        'engager_type' => 'engagerType',
        'campaign_id' => 'campaignId',
        'ad_id' => 'adId',
        'objective_type' => 'objectiveType',
        'ad_account_id' => 'adAccountId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'customer_list_id' => 'customerListId',
        'engagement_domain' => 'engagementDomain',
        'engagement_type' => 'engagementType',
        'event_data' => 'eventData',
        'pin_id' => 'pinId',
        'retention_days' => 'retentionDays',
        'seed_id' => 'seedId',
        'visitor_source_id' => 'visitorSourceId',
        'event_source' => 'eventSource',
        'ingestion_source' => 'ingestionSource',
        'engager_type' => 'engagerType',
        'campaign_id' => 'campaignId',
        'ad_id' => 'adId',
        'objective_type' => 'objectiveType',
        'ad_account_id' => 'adAccountId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'customer_list_id' => 'customerListId',
        'engagement_domain' => 'engagementDomain',
        'engagement_type' => 'engagementType',
        'event_data' => 'eventData',
        'pin_id' => 'pinId',
        'retention_days' => 'retentionDays',
        'seed_id' => 'seedId',
        'visitor_source_id' => 'visitorSourceId',
        'event_source' => 'eventSource',
        'ingestion_source' => 'ingestionSource',
        'engager_type' => 'engagerType',
        'campaign_id' => 'campaignId',
        'ad_id' => 'adId',
        'objective_type' => 'objectiveType',
        'ad_account_id' => 'adAccountId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'customer_list_id' => 'customerListId',
        'engagement_domain' => 'engagementDomain',
        'engagement_type' => 'engagementType',
        'event_data' => 'eventData',
        'pin_id' => 'pinId',
        'retention_days' => 'retentionDays',
        'seed_id' => 'seedId',
        'visitor_source_id' => 'visitorSourceId',
        'event_source' => 'eventSource',
        'ingestion_source' => 'ingestionSource',
        'engager_type' => 'engagerType',
        'campaign_id' => 'campaignId',
        'ad_id' => 'adId',
        'objective_type' => 'objectiveType',
        'ad_account_id' => 'adAccountId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'customer_list_id' => 'customerListId',
        'engagement_domain' => 'engagementDomain',
        'engagement_type' => 'engagementType',
        'event_data' => 'eventData',
        'pin_id' => 'pinId',
        'retention_days' => 'retentionDays',
        'seed_id' => 'seedId',
        'visitor_source_id' => 'visitorSourceId',
        'event_source' => 'eventSource',
        'ingestion_source' => 'ingestionSource',
        'engager_type' => 'engagerType',
        'campaign_id' => 'campaignId',
        'ad_id' => 'adId',
        'objective_type' => 'objectiveType',
        'ad_account_id' => 'adAccountId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'customer_list_id' => 'customerListId',
        'engagement_domain' => 'engagementDomain',
        'engagement_type' => 'engagementType',
        'event_data' => 'eventData',
        'pin_id' => 'pinId',
        'retention_days' => 'retentionDays',
        'seed_id' => 'seedId',
        'visitor_source_id' => 'visitorSourceId',
        'event_source' => 'eventSource',
        'ingestion_source' => 'ingestionSource',
        'engager_type' => 'engagerType',
        'campaign_id' => 'campaignId',
        'ad_id' => 'adId',
        'objective_type' => 'objectiveType',
        'ad_account_id' => 'adAccountId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'customer_list_id' => 'customerListId',
        'engagement_domain' => 'engagementDomain',
        'engagement_type' => 'engagementType',
        'event_data' => 'eventData',
        'pin_id' => 'pinId',
        'retention_days' => 'retentionDays',
        'seed_id' => 'seedId',
        'visitor_source_id' => 'visitorSourceId',
        'event_source' => 'eventSource',
        'ingestion_source' => 'ingestionSource',
        'engager_type' => 'engagerType',
        'campaign_id' => 'campaignId',
        'ad_id' => 'adId',
        'objective_type' => 'objectiveType',
        'ad_account_id' => 'adAccountId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'customer_list_id' => 'customerListId',
        'engagement_domain' => 'engagementDomain',
        'engagement_type' => 'engagementType',
        'event_data' => 'eventData',
        'pin_id' => 'pinId',
        'retention_days' => 'retentionDays',
        'seed_id' => 'seedId',
        'visitor_source_id' => 'visitorSourceId',
        'event_source' => 'eventSource',
        'ingestion_source' => 'ingestionSource',
        'engager_type' => 'engagerType',
        'campaign_id' => 'campaignId',
        'ad_id' => 'adId',
        'objective_type' => 'objectiveType',
        'ad_account_id' => 'adAccountId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'customer_list_id' => 'customerListId',
        'engagement_domain' => 'engagementDomain',
        'engagement_type' => 'engagementType',
        'event_data' => 'eventData',
        'pin_id' => 'pinId',
        'retention_days' => 'retentionDays',
        'seed_id' => 'seedId',
        'visitor_source_id' => 'visitorSourceId',
        'event_source' => 'eventSource',
        'ingestion_source' => 'ingestionSource',
        'engager_type' => 'engagerType',
        'campaign_id' => 'campaignId',
        'ad_id' => 'adId',
        'objective_type' => 'objectiveType',
        'ad_account_id' => 'adAccountId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'customer_list_id' => 'customerListId',
        'engagement_domain' => 'engagementDomain',
        'engagement_type' => 'engagementType',
        'event_data' => 'eventData',
        'pin_id' => 'pinId',
        'retention_days' => 'retentionDays',
        'seed_id' => 'seedId',
        'visitor_source_id' => 'visitorSourceId',
        'event_source' => 'eventSource',
        'ingestion_source' => 'ingestionSource',
        'engager_type' => 'engagerType',
        'campaign_id' => 'campaignId',
        'ad_id' => 'adId',
        'objective_type' => 'objectiveType',
        'ad_account_id' => 'adAccountId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'customer_list_id' => 'customerListId',
        'engagement_domain' => 'engagementDomain',
        'engagement_type' => 'engagementType',
        'event_data' => 'eventData',
        'pin_id' => 'pinId',
        'retention_days' => 'retentionDays',
        'seed_id' => 'seedId',
        'visitor_source_id' => 'visitorSourceId',
        'event_source' => 'eventSource',
        'ingestion_source' => 'ingestionSource',
        'engager_type' => 'engagerType',
        'campaign_id' => 'campaignId',
        'ad_id' => 'adId',
        'objective_type' => 'objectiveType',
        'ad_account_id' => 'adAccountId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'customer_list_id' => 'customerListId',
        'engagement_domain' => 'engagementDomain',
        'engagement_type' => 'engagementType',
        'event_data' => 'eventData',
        'pin_id' => 'pinId',
        'retention_days' => 'retentionDays',
        'seed_id' => 'seedId',
        'visitor_source_id' => 'visitorSourceId',
        'event_source' => 'eventSource',
        'ingestion_source' => 'ingestionSource',
        'engager_type' => 'engagerType',
        'campaign_id' => 'campaignId',
        'ad_id' => 'adId',
        'objective_type' => 'objectiveType',
        'ad_account_id' => 'adAccountId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'customer_list_id' => 'customerListId',
        'engagement_domain' => 'engagementDomain',
        'engagement_type' => 'engagementType',
        'event_data' => 'eventData',
        'pin_id' => 'pinId',
        'retention_days' => 'retentionDays',
        'seed_id' => 'seedId',
        'visitor_source_id' => 'visitorSourceId',
        'event_source' => 'eventSource',
        'ingestion_source' => 'ingestionSource',
        'engager_type' => 'engagerType',
        'campaign_id' => 'campaignId',
        'ad_id' => 'adId',
        'objective_type' => 'objectiveType',
        'ad_account_id' => 'adAccountId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'customer_list_id' => 'customerListId',
        'engagement_domain' => 'engagementDomain',
        'engagement_type' => 'engagementType',
        'event_data' => 'eventData',
        'pin_id' => 'pinId',
        'retention_days' => 'retentionDays',
        'seed_id' => 'seedId',
        'visitor_source_id' => 'visitorSourceId',
        'event_source' => 'eventSource',
        'ingestion_source' => 'ingestionSource',
        'engager_type' => 'engagerType',
        'campaign_id' => 'campaignId',
        'ad_id' => 'adId',
        'objective_type' => 'objectiveType',
        'ad_account_id' => 'adAccountId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public OASAudienceRule() {
        engagementDomain = new List<String>();
        pinId = new List<String>();
        seedId = new List<String>();
        url = new List<String>();
        campaignId = new List<String>();
        adId = new List<String>();
        objectiveType = new List<OASObjectiveType>();
    }

    public static OASAudienceRule getExample() {
        OASAudienceRule audienceRule = new OASAudienceRule();
          audienceRule.country = 'US';
          audienceRule.customerListId = '5497558859876';
          audienceRule.engagementDomain = new List<String>{''};
          audienceRule.engagementType = 'click';
          audienceRule.event = 'checkout';
          audienceRule.eventData = OASPinterestTagEventData.getExample();
          audienceRule.percentage = 3;
          audienceRule.pinId = new List<String>{''};
          audienceRule.prefill = true;
          audienceRule.retentionDays = 30;
          audienceRule.seedId = new List<String>{''};
          audienceRule.url = new List<String>{''};
          audienceRule.visitorSourceId = '549755885175';
          audienceRule.eventSource = {"=":["web","mobile"]};
          audienceRule.ingestionSource = {"=":["tag"]};
          audienceRule.engagerType = 1;
          audienceRule.campaignId = new List<String>{''};
          audienceRule.adId = new List<String>{''};
          audienceRule.objectiveType = new List<OASObjectiveType>{OASObjectiveType.getExample()};
          audienceRule.adAccountId = '549755885175';
        return audienceRule;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASAudienceRule) {           
            OASAudienceRule audienceRule = (OASAudienceRule) obj;
            return this.country == audienceRule.country
                && this.customerListId == audienceRule.customerListId
                && this.engagementDomain == audienceRule.engagementDomain
                && this.engagementType == audienceRule.engagementType
                && this.event == audienceRule.event
                && this.eventData == audienceRule.eventData
                && this.percentage == audienceRule.percentage
                && this.pinId == audienceRule.pinId
                && this.prefill == audienceRule.prefill
                && this.retentionDays == audienceRule.retentionDays
                && this.seedId == audienceRule.seedId
                && this.url == audienceRule.url
                && this.visitorSourceId == audienceRule.visitorSourceId
                && this.eventSource == audienceRule.eventSource
                && this.ingestionSource == audienceRule.ingestionSource
                && this.engagerType == audienceRule.engagerType
                && this.campaignId == audienceRule.campaignId
                && this.adId == audienceRule.adId
                && this.objectiveType == audienceRule.objectiveType
                && this.adAccountId == audienceRule.adAccountId;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (country == null ? 0 : System.hashCode(country));
        hashCode = (17 * hashCode) + (customerListId == null ? 0 : System.hashCode(customerListId));
        hashCode = (17 * hashCode) + (engagementDomain == null ? 0 : System.hashCode(engagementDomain));
        hashCode = (17 * hashCode) + (engagementType == null ? 0 : System.hashCode(engagementType));
        hashCode = (17 * hashCode) + (event == null ? 0 : System.hashCode(event));
        hashCode = (17 * hashCode) + (eventData == null ? 0 : System.hashCode(eventData));
        hashCode = (17 * hashCode) + (percentage == null ? 0 : System.hashCode(percentage));
        hashCode = (17 * hashCode) + (pinId == null ? 0 : System.hashCode(pinId));
        hashCode = (17 * hashCode) + (prefill == null ? 0 : System.hashCode(prefill));
        hashCode = (17 * hashCode) + (retentionDays == null ? 0 : System.hashCode(retentionDays));
        hashCode = (17 * hashCode) + (seedId == null ? 0 : System.hashCode(seedId));
        hashCode = (17 * hashCode) + (url == null ? 0 : System.hashCode(url));
        hashCode = (17 * hashCode) + (visitorSourceId == null ? 0 : System.hashCode(visitorSourceId));
        hashCode = (17 * hashCode) + (eventSource == null ? 0 : System.hashCode(eventSource));
        hashCode = (17 * hashCode) + (ingestionSource == null ? 0 : System.hashCode(ingestionSource));
        hashCode = (17 * hashCode) + (engagerType == null ? 0 : System.hashCode(engagerType));
        hashCode = (17 * hashCode) + (campaignId == null ? 0 : System.hashCode(campaignId));
        hashCode = (17 * hashCode) + (adId == null ? 0 : System.hashCode(adId));
        hashCode = (17 * hashCode) + (objectiveType == null ? 0 : System.hashCode(objectiveType));
        hashCode = (17 * hashCode) + (adAccountId == null ? 0 : System.hashCode(adAccountId));
        return hashCode;
    }
}

