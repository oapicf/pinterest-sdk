/*
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Object containing other custom data.
 */
public class OASConversionEventsDataInnerCustomDa implements OAS.MappedProperties {
    /**
     * The ISO-4217 currency code. If not provided, we will default to the advertiser\'s currency set during account creation. Your campaign performance needs this field to report right ROAS/CPA.
     * @return r_currency
     */
    public String r_currency { get; set; }

    /**
     * Total value of the event. Accepted as a string in the request; it will be parsed into a double. For example, if there are two items in a checkout event, the value should be the total price. We recommend to use pre-tax, pre-shipping final value.
     * @return value
     */
    public String value { get; set; }

    /**
     * List of products IDs. We recommend using this if you are a merchant for PageVisit, AddToCart and Checkouts. For detail, please check <a href="https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs" target="_blank">here</a> (Install the Pinterest tag section).
     * @return contentIds
     */
    public List<String> contentIds { get; set; }

    /**
     * The name of the page or product associated with the event.
     * @return contentName
     */
    public String contentName { get; set; }

    /**
     * The category of the content associated with the event.
     * @return contentCategory
     */
    public String contentCategory { get; set; }

    /**
     * The brand of the content associated with the event.
     * @return contentBrand
     */
    public String contentBrand { get; set; }

    /**
     * A list of objects containing information about products, such as price and quantity. We recommend using this if you are a merchant for PageVisit, AddToCart and Checkouts. For detail, please check <a href="https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs" target="_blank">here</a> (Install the Pinterest tag section).
     * @return contents
     */
    public List<OASConversionEventsDataInnerCustomDa> contents { get; set; }

    /**
     * Total number of products of the event. For example, the total number of items purchased in a checkout event. We recommend using this if you are a merchant for AddToCart and Checkouts. For detail, please check <a href="https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs" target="_blank">here</a> (Install the Pinterest tag section).
     * @return numItems
     */
    public Long numItems { get; set; }

    /**
     * The order ID. We recommend sending order_id to help us deduplicate events when necessary. This also helps to run other measurement products at Pinterest.
     * @return orderId
     */
    public String orderId { get; set; }

    /**
     * The search string related to the user conversion event.
     * @return searchString
     */
    public String searchString { get; set; }

    /**
     * Flags for different privacy rights laws to opt out users of sharing personal information. Values should be comma separated. Please follow the <a href="https://help.pinterest.com/en/business/article/limited-data-processing" target="_blank">Help Center</a> and <a href="/docs/api-features/conversion-overview/" target="_blank">dev site</a> for specific opt_out_type set up.
     * @return optOutType
     */
    public String optOutType { get; set; }

    /**
     * Named partner. Not required, this is for Pinterest internal use only. Please do not use this unless specifically guided.
     * @return np
     */
    public String np { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'currency' => 'r_currency',
        'content_ids' => 'contentIds',
        'content_name' => 'contentName',
        'content_category' => 'contentCategory',
        'content_brand' => 'contentBrand',
        'num_items' => 'numItems',
        'order_id' => 'orderId',
        'search_string' => 'searchString',
        'opt_out_type' => 'optOutType'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'currency' => 'r_currency',
        'content_ids' => 'contentIds',
        'content_name' => 'contentName',
        'content_category' => 'contentCategory',
        'content_brand' => 'contentBrand',
        'num_items' => 'numItems',
        'order_id' => 'orderId',
        'search_string' => 'searchString',
        'opt_out_type' => 'optOutType'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'currency' => 'r_currency',
        'content_ids' => 'contentIds',
        'content_name' => 'contentName',
        'content_category' => 'contentCategory',
        'content_brand' => 'contentBrand',
        'num_items' => 'numItems',
        'order_id' => 'orderId',
        'search_string' => 'searchString',
        'opt_out_type' => 'optOutType'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'currency' => 'r_currency',
        'content_ids' => 'contentIds',
        'content_name' => 'contentName',
        'content_category' => 'contentCategory',
        'content_brand' => 'contentBrand',
        'num_items' => 'numItems',
        'order_id' => 'orderId',
        'search_string' => 'searchString',
        'opt_out_type' => 'optOutType'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'currency' => 'r_currency',
        'content_ids' => 'contentIds',
        'content_name' => 'contentName',
        'content_category' => 'contentCategory',
        'content_brand' => 'contentBrand',
        'num_items' => 'numItems',
        'order_id' => 'orderId',
        'search_string' => 'searchString',
        'opt_out_type' => 'optOutType'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'currency' => 'r_currency',
        'content_ids' => 'contentIds',
        'content_name' => 'contentName',
        'content_category' => 'contentCategory',
        'content_brand' => 'contentBrand',
        'num_items' => 'numItems',
        'order_id' => 'orderId',
        'search_string' => 'searchString',
        'opt_out_type' => 'optOutType'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'currency' => 'r_currency',
        'content_ids' => 'contentIds',
        'content_name' => 'contentName',
        'content_category' => 'contentCategory',
        'content_brand' => 'contentBrand',
        'num_items' => 'numItems',
        'order_id' => 'orderId',
        'search_string' => 'searchString',
        'opt_out_type' => 'optOutType'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'currency' => 'r_currency',
        'content_ids' => 'contentIds',
        'content_name' => 'contentName',
        'content_category' => 'contentCategory',
        'content_brand' => 'contentBrand',
        'num_items' => 'numItems',
        'order_id' => 'orderId',
        'search_string' => 'searchString',
        'opt_out_type' => 'optOutType'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'currency' => 'r_currency',
        'content_ids' => 'contentIds',
        'content_name' => 'contentName',
        'content_category' => 'contentCategory',
        'content_brand' => 'contentBrand',
        'num_items' => 'numItems',
        'order_id' => 'orderId',
        'search_string' => 'searchString',
        'opt_out_type' => 'optOutType'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public OASConversionEventsDataInnerCustomDa() {
        contentIds = new List<String>();
        contents = new List<OASConversionEventsDataInnerCustomDa>();
    }

    public static OASConversionEventsDataInnerCustomDa getExample() {
        OASConversionEventsDataInnerCustomDa conversionEventsDataInnerCustomData = new OASConversionEventsDataInnerCustomDa();
          conversionEventsDataInnerCustomData.r_currency = 'USD';
          conversionEventsDataInnerCustomData.value = '72.39';
          conversionEventsDataInnerCustomData.contentIds = new List<String>{''};
          conversionEventsDataInnerCustomData.contentName = 'pinterest-themed-clothing';
          conversionEventsDataInnerCustomData.contentCategory = 'shirts';
          conversionEventsDataInnerCustomData.contentBrand = 'pinterest-brand';
          conversionEventsDataInnerCustomData.contents = new List<OASConversionEventsDataInnerCustomDa>{OASConversionEventsDataInnerCustomDa.getExample()};
          conversionEventsDataInnerCustomData.numItems = 2L;
          conversionEventsDataInnerCustomData.orderId = 'my_order_id';
          conversionEventsDataInnerCustomData.searchString = 'sample string';
          conversionEventsDataInnerCustomData.optOutType = 'LDP';
          conversionEventsDataInnerCustomData.np = 'ss-company';
        return conversionEventsDataInnerCustomData;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASConversionEventsDataInnerCustomDa) {           
            OASConversionEventsDataInnerCustomDa conversionEventsDataInnerCustomData = (OASConversionEventsDataInnerCustomDa) obj;
            return this.r_currency == conversionEventsDataInnerCustomData.r_currency
                && this.value == conversionEventsDataInnerCustomData.value
                && this.contentIds == conversionEventsDataInnerCustomData.contentIds
                && this.contentName == conversionEventsDataInnerCustomData.contentName
                && this.contentCategory == conversionEventsDataInnerCustomData.contentCategory
                && this.contentBrand == conversionEventsDataInnerCustomData.contentBrand
                && this.contents == conversionEventsDataInnerCustomData.contents
                && this.numItems == conversionEventsDataInnerCustomData.numItems
                && this.orderId == conversionEventsDataInnerCustomData.orderId
                && this.searchString == conversionEventsDataInnerCustomData.searchString
                && this.optOutType == conversionEventsDataInnerCustomData.optOutType
                && this.np == conversionEventsDataInnerCustomData.np;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (r_currency == null ? 0 : System.hashCode(r_currency));
        hashCode = (17 * hashCode) + (value == null ? 0 : System.hashCode(value));
        hashCode = (17 * hashCode) + (contentIds == null ? 0 : System.hashCode(contentIds));
        hashCode = (17 * hashCode) + (contentName == null ? 0 : System.hashCode(contentName));
        hashCode = (17 * hashCode) + (contentCategory == null ? 0 : System.hashCode(contentCategory));
        hashCode = (17 * hashCode) + (contentBrand == null ? 0 : System.hashCode(contentBrand));
        hashCode = (17 * hashCode) + (contents == null ? 0 : System.hashCode(contents));
        hashCode = (17 * hashCode) + (numItems == null ? 0 : System.hashCode(numItems));
        hashCode = (17 * hashCode) + (orderId == null ? 0 : System.hashCode(orderId));
        hashCode = (17 * hashCode) + (searchString == null ? 0 : System.hashCode(searchString));
        hashCode = (17 * hashCode) + (optOutType == null ? 0 : System.hashCode(optOutType));
        hashCode = (17 * hashCode) + (np == null ? 0 : System.hashCode(np));
        return hashCode;
    }
}

