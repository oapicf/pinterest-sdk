/*
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASFeedsCreateRequest
 */
public class OASFeedsCreateRequest implements OASCatalogsVerticalFeedsCreateReques, OASCatalogsFeedsCreateRequest, OAS.MappedProperties {
    /**
     * Get defaultCurrency
     * @return defaultCurrency
     */
    public OASNullableCurrency defaultCurrency { get; set; }

    /**
     * A human-friendly name associated to a given feed.
     * @return name
     */
    public String name { get; set; }

    /**
     * Get format
     * @return format
     */
    public OASCatalogsFormat format { get; set; }

    /**
     * Get defaultLocale
     * @return defaultLocale
     */
    public OASCatalogsFeedsCreateRequestDefault defaultLocale { get; set; }

    /**
     * Get credentials
     * @return credentials
     */
    public OASCatalogsFeedCredentials credentials { get; set; }

    /**
     * The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
     * @return location
     */
    public String location { get; set; }

    /**
     * Get preferredProcessingSchedule
     * @return preferredProcessingSchedule
     */
    public OASCatalogsFeedProcessingSchedule preferredProcessingSchedule { get; set; }

    /**
     * Get catalogType
     * @return catalogType
     */
    public OASCatalogsType catalogType { get; set; }

    /**
     * Get defaultCountry
     * @return defaultCountry
     */
    public OASCountry defaultCountry { get; set; }

    /**
     * Get defaultAvailability
     * @return defaultAvailability
     */
    public OASProductAvailabilityType defaultAvailability { get; set; }

    /**
     * Get status
     * @return status
     */
    public OASCatalogsStatus status { get; set; }

    /**
     * Catalog id pertaining to the feed. If not provided, feed will use a default catalog based on type. At the moment a catalog can not have multiple creative assets feeds but this will change in the future.
     * @return catalogId
     */
    public String catalogId { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'default_currency' => 'defaultCurrency',
        'default_locale' => 'defaultLocale',
        'preferred_processing_schedule' => 'preferredProcessingSchedule',
        'catalog_type' => 'catalogType',
        'default_country' => 'defaultCountry',
        'default_availability' => 'defaultAvailability',
        'catalog_id' => 'catalogId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'default_currency' => 'defaultCurrency',
        'default_locale' => 'defaultLocale',
        'preferred_processing_schedule' => 'preferredProcessingSchedule',
        'catalog_type' => 'catalogType',
        'default_country' => 'defaultCountry',
        'default_availability' => 'defaultAvailability',
        'catalog_id' => 'catalogId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'default_currency' => 'defaultCurrency',
        'default_locale' => 'defaultLocale',
        'preferred_processing_schedule' => 'preferredProcessingSchedule',
        'catalog_type' => 'catalogType',
        'default_country' => 'defaultCountry',
        'default_availability' => 'defaultAvailability',
        'catalog_id' => 'catalogId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'default_currency' => 'defaultCurrency',
        'default_locale' => 'defaultLocale',
        'preferred_processing_schedule' => 'preferredProcessingSchedule',
        'catalog_type' => 'catalogType',
        'default_country' => 'defaultCountry',
        'default_availability' => 'defaultAvailability',
        'catalog_id' => 'catalogId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'default_currency' => 'defaultCurrency',
        'default_locale' => 'defaultLocale',
        'preferred_processing_schedule' => 'preferredProcessingSchedule',
        'catalog_type' => 'catalogType',
        'default_country' => 'defaultCountry',
        'default_availability' => 'defaultAvailability',
        'catalog_id' => 'catalogId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'default_currency' => 'defaultCurrency',
        'default_locale' => 'defaultLocale',
        'preferred_processing_schedule' => 'preferredProcessingSchedule',
        'catalog_type' => 'catalogType',
        'default_country' => 'defaultCountry',
        'default_availability' => 'defaultAvailability',
        'catalog_id' => 'catalogId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'default_currency' => 'defaultCurrency',
        'default_locale' => 'defaultLocale',
        'preferred_processing_schedule' => 'preferredProcessingSchedule',
        'catalog_type' => 'catalogType',
        'default_country' => 'defaultCountry',
        'default_availability' => 'defaultAvailability',
        'catalog_id' => 'catalogId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASFeedsCreateRequest getExample() {
        OASFeedsCreateRequest feedsCreateRequest = new OASFeedsCreateRequest();
          feedsCreateRequest.defaultCurrency = OASNullableCurrency.getExample();
          feedsCreateRequest.name = '';
          feedsCreateRequest.format = OASCatalogsFormat.getExample();
          feedsCreateRequest.defaultLocale = OASCatalogsFeedsCreateRequestDefault.getExample();
          feedsCreateRequest.credentials = OASCatalogsFeedCredentials.getExample();
          feedsCreateRequest.location = '';
          feedsCreateRequest.preferredProcessingSchedule = OASCatalogsFeedProcessingSchedule.getExample();
          feedsCreateRequest.catalogType = OASCatalogsType.getExample();
          feedsCreateRequest.defaultCountry = OASCountry.getExample();
          feedsCreateRequest.defaultAvailability = OASProductAvailabilityType.getExample();
          feedsCreateRequest.status = '';
          feedsCreateRequest.catalogId = '';
        return feedsCreateRequest;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASFeedsCreateRequest) {           
            OASFeedsCreateRequest feedsCreateRequest = (OASFeedsCreateRequest) obj;
            return this.defaultCurrency == feedsCreateRequest.defaultCurrency
                && this.name == feedsCreateRequest.name
                && this.format == feedsCreateRequest.format
                && this.defaultLocale == feedsCreateRequest.defaultLocale
                && this.credentials == feedsCreateRequest.credentials
                && this.location == feedsCreateRequest.location
                && this.preferredProcessingSchedule == feedsCreateRequest.preferredProcessingSchedule
                && this.catalogType == feedsCreateRequest.catalogType
                && this.defaultCountry == feedsCreateRequest.defaultCountry
                && this.defaultAvailability == feedsCreateRequest.defaultAvailability
                && this.status == feedsCreateRequest.status
                && this.catalogId == feedsCreateRequest.catalogId;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (defaultCurrency == null ? 0 : System.hashCode(defaultCurrency));
        hashCode = (17 * hashCode) + (name == null ? 0 : System.hashCode(name));
        hashCode = (17 * hashCode) + (format == null ? 0 : System.hashCode(format));
        hashCode = (17 * hashCode) + (defaultLocale == null ? 0 : System.hashCode(defaultLocale));
        hashCode = (17 * hashCode) + (credentials == null ? 0 : System.hashCode(credentials));
        hashCode = (17 * hashCode) + (location == null ? 0 : System.hashCode(location));
        hashCode = (17 * hashCode) + (preferredProcessingSchedule == null ? 0 : System.hashCode(preferredProcessingSchedule));
        hashCode = (17 * hashCode) + (catalogType == null ? 0 : System.hashCode(catalogType));
        hashCode = (17 * hashCode) + (defaultCountry == null ? 0 : System.hashCode(defaultCountry));
        hashCode = (17 * hashCode) + (defaultAvailability == null ? 0 : System.hashCode(defaultAvailability));
        hashCode = (17 * hashCode) + (status == null ? 0 : System.hashCode(status));
        hashCode = (17 * hashCode) + (catalogId == null ? 0 : System.hashCode(catalogId));
        return hashCode;
    }
}

