/*
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASAdGroupUpdateRequest
 */
public class OASAdGroupUpdateRequest implements OASAdGroupCommon, OAS.MappedProperties {
    /**
     * Ad group name.
     * @return name
     */
    public String name { get; set; }

    /**
     * Ad group/entity status.
     * @return status
     */
    public OASEntityStatus status { get; set; }

    /**
     * Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
     * @return budgetInMicroCurrency
     */
    public Integer budgetInMicroCurrency { get; set; }

    /**
     * Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
     * @return bidInMicroCurrency
     */
    public Integer bidInMicroCurrency { get; set; }

    /**
     * Optimization goals for objective-based performance campaigns. **REQUIRED** when campaign\'s `objective_type` is set to `"WEB_CONVERSION"`.
     * @return optimizationGoalMetadata
     */
    public OASOptimizationGoalMetadata optimizationGoalMetadata { get; set; }

    /**
     * Get budgetType
     * @return budgetType
     */
    public OASBudgetType budgetType { get; set; }

    /**
     * Ad group start time. Unix timestamp in seconds. Defaults to current time.
     * @return startTime
     */
    public Integer startTime { get; set; }

    /**
     * Ad group end time. Unix timestamp in seconds.
     * @return endTime
     */
    public Integer endTime { get; set; }

    /**
     * Get targetingSpec
     * @return targetingSpec
     */
    public OASTargetingSpec targetingSpec { get; set; }

    /**
     * Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION <a href="/docs/redoc/#section/Billable-event">billable_event</a> value. This field **REQUIRES** the `end_time` field.
     * @return lifetimeFrequencyCap
     */
    public Integer lifetimeFrequencyCap { get; set; }

    /**
     * Third-party tracking URLs.<br> JSON object with the format: {"<a href="/docs/redoc/#section/Tracking-URL-event">Tracking event enum</a>":[URL string array],...}<br> For example: {"impression": ["URL1", "URL2"], "click": ["URL1", "URL2", "URL3"]}.<br>Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.<br><br> For more information, see <a href="https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking" target="_blank">Third-party and dynamic tracking</a>.
     * @return trackingUrls
     */
    public OASTrackingUrls trackingUrls { get; set; }

    /**
     * Enable auto-targeting for ad group. Also known as <a href="https://help.pinterest.com/en/business/article/expanded-targeting" target="_blank">"expanded targeting"</a>.
     * @return autoTargetingEnabled
     */
    public Boolean autoTargetingEnabled { get; set; }

    /**
     * <a href="/docs/redoc/#section/Placement-group">Placement group</a>.
     * @return placementGroup
     */
    public OASPlacementGroupType placementGroup { get; set; }

    /**
     * Get pacingDeliveryType
     * @return pacingDeliveryType
     */
    public OASPacingDeliveryType pacingDeliveryType { get; set; }

    /**
     * Campaign ID of the ad group.
     * @return campaignId
     */
    public String campaignId { get; set; }

    /**
     * Get billableEvent
     * @return billableEvent
     */
    public OASActionType billableEvent { get; set; }

    /**
     * Bid strategy type. For Campaigns with Video Completion objectives, the only supported bid strategy type is AUTOMATIC_BID.
     */
    public enum BidStrategyTypeEnum {
        AUTOMATIC_BID,
        MAX_BID,
        TARGET_AVG
    }

    /**
     * Bid strategy type. For Campaigns with Video Completion objectives, the only supported bid strategy type is AUTOMATIC_BID.
     * @return bidStrategyType
     */
    public BidStrategyTypeEnum bidStrategyType { get; set; }

    /**
     * Targeting template IDs applied to the ad group. We currently only support 1 targeting template per ad group. To use targeting templates, do not set any other targeting fields: targeting_spec, tracking_urls, auto_targeting_enabled, placement_group. To clear all targeting template IDs, set this field to [\'0\'].
     * @return targetingTemplateIds
     */
    public List<String> targetingTemplateIds { get; set; }

    /**
     * Ad group ID.
     * @return id
     */
    public String id { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'optimization_goal_metadata' => 'optimizationGoalMetadata',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'bid_strategy_type' => 'bidStrategyType',
        'targeting_template_ids' => 'targetingTemplateIds'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'optimization_goal_metadata' => 'optimizationGoalMetadata',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'bid_strategy_type' => 'bidStrategyType',
        'targeting_template_ids' => 'targetingTemplateIds'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'optimization_goal_metadata' => 'optimizationGoalMetadata',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'bid_strategy_type' => 'bidStrategyType',
        'targeting_template_ids' => 'targetingTemplateIds'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'optimization_goal_metadata' => 'optimizationGoalMetadata',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'bid_strategy_type' => 'bidStrategyType',
        'targeting_template_ids' => 'targetingTemplateIds'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'optimization_goal_metadata' => 'optimizationGoalMetadata',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'bid_strategy_type' => 'bidStrategyType',
        'targeting_template_ids' => 'targetingTemplateIds'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'optimization_goal_metadata' => 'optimizationGoalMetadata',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'bid_strategy_type' => 'bidStrategyType',
        'targeting_template_ids' => 'targetingTemplateIds'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'optimization_goal_metadata' => 'optimizationGoalMetadata',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'bid_strategy_type' => 'bidStrategyType',
        'targeting_template_ids' => 'targetingTemplateIds'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'optimization_goal_metadata' => 'optimizationGoalMetadata',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'bid_strategy_type' => 'bidStrategyType',
        'targeting_template_ids' => 'targetingTemplateIds'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'optimization_goal_metadata' => 'optimizationGoalMetadata',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'bid_strategy_type' => 'bidStrategyType',
        'targeting_template_ids' => 'targetingTemplateIds'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'optimization_goal_metadata' => 'optimizationGoalMetadata',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'bid_strategy_type' => 'bidStrategyType',
        'targeting_template_ids' => 'targetingTemplateIds'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'optimization_goal_metadata' => 'optimizationGoalMetadata',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'bid_strategy_type' => 'bidStrategyType',
        'targeting_template_ids' => 'targetingTemplateIds'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'optimization_goal_metadata' => 'optimizationGoalMetadata',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'bid_strategy_type' => 'bidStrategyType',
        'targeting_template_ids' => 'targetingTemplateIds'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'optimization_goal_metadata' => 'optimizationGoalMetadata',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'bid_strategy_type' => 'bidStrategyType',
        'targeting_template_ids' => 'targetingTemplateIds'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'optimization_goal_metadata' => 'optimizationGoalMetadata',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'bid_strategy_type' => 'bidStrategyType',
        'targeting_template_ids' => 'targetingTemplateIds'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'optimization_goal_metadata' => 'optimizationGoalMetadata',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'bid_strategy_type' => 'bidStrategyType',
        'targeting_template_ids' => 'targetingTemplateIds'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'optimization_goal_metadata' => 'optimizationGoalMetadata',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'bid_strategy_type' => 'bidStrategyType',
        'targeting_template_ids' => 'targetingTemplateIds'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public OASAdGroupUpdateRequest() {
        targetingTemplateIds = new List<String>();
    }

    public static OASAdGroupUpdateRequest getExample() {
        OASAdGroupUpdateRequest adGroupUpdateRequest = new OASAdGroupUpdateRequest();
          adGroupUpdateRequest.name = 'Ad Group For Pin: 687195905986';
          adGroupUpdateRequest.status = OASEntityStatus.getExample();
          adGroupUpdateRequest.budgetInMicroCurrency = 5000000;
          adGroupUpdateRequest.bidInMicroCurrency = 5000000;
          adGroupUpdateRequest.optimizationGoalMetadata = OASOptimizationGoalMetadata.getExample();
          adGroupUpdateRequest.budgetType = OASBudgetType.getExample();
          adGroupUpdateRequest.startTime = 5686848000;
          adGroupUpdateRequest.endTime = 5705424000;
          adGroupUpdateRequest.targetingSpec = OASTargetingSpec.getExample();
          adGroupUpdateRequest.lifetimeFrequencyCap = 100;
          adGroupUpdateRequest.trackingUrls = OASTrackingUrls.getExample();
          adGroupUpdateRequest.autoTargetingEnabled = true;
          adGroupUpdateRequest.placementGroup = OASPlacementGroupType.getExample();
          adGroupUpdateRequest.pacingDeliveryType = OASPacingDeliveryType.getExample();
          adGroupUpdateRequest.campaignId = '626736533506';
          adGroupUpdateRequest.billableEvent = OASActionType.getExample();
          adGroupUpdateRequest.bidStrategyType = BidStrategyTypeEnum.MAX_BID;
          adGroupUpdateRequest.targetingTemplateIds = new List<String>{'643'};
          adGroupUpdateRequest.id = '2680060704746';
        return adGroupUpdateRequest;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASAdGroupUpdateRequest) {           
            OASAdGroupUpdateRequest adGroupUpdateRequest = (OASAdGroupUpdateRequest) obj;
            return this.name == adGroupUpdateRequest.name
                && this.status == adGroupUpdateRequest.status
                && this.budgetInMicroCurrency == adGroupUpdateRequest.budgetInMicroCurrency
                && this.bidInMicroCurrency == adGroupUpdateRequest.bidInMicroCurrency
                && this.optimizationGoalMetadata == adGroupUpdateRequest.optimizationGoalMetadata
                && this.budgetType == adGroupUpdateRequest.budgetType
                && this.startTime == adGroupUpdateRequest.startTime
                && this.endTime == adGroupUpdateRequest.endTime
                && this.targetingSpec == adGroupUpdateRequest.targetingSpec
                && this.lifetimeFrequencyCap == adGroupUpdateRequest.lifetimeFrequencyCap
                && this.trackingUrls == adGroupUpdateRequest.trackingUrls
                && this.autoTargetingEnabled == adGroupUpdateRequest.autoTargetingEnabled
                && this.placementGroup == adGroupUpdateRequest.placementGroup
                && this.pacingDeliveryType == adGroupUpdateRequest.pacingDeliveryType
                && this.campaignId == adGroupUpdateRequest.campaignId
                && this.billableEvent == adGroupUpdateRequest.billableEvent
                && this.bidStrategyType == adGroupUpdateRequest.bidStrategyType
                && this.targetingTemplateIds == adGroupUpdateRequest.targetingTemplateIds
                && this.id == adGroupUpdateRequest.id;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (name == null ? 0 : System.hashCode(name));
        hashCode = (17 * hashCode) + (status == null ? 0 : System.hashCode(status));
        hashCode = (17 * hashCode) + (budgetInMicroCurrency == null ? 0 : System.hashCode(budgetInMicroCurrency));
        hashCode = (17 * hashCode) + (bidInMicroCurrency == null ? 0 : System.hashCode(bidInMicroCurrency));
        hashCode = (17 * hashCode) + (optimizationGoalMetadata == null ? 0 : System.hashCode(optimizationGoalMetadata));
        hashCode = (17 * hashCode) + (budgetType == null ? 0 : System.hashCode(budgetType));
        hashCode = (17 * hashCode) + (startTime == null ? 0 : System.hashCode(startTime));
        hashCode = (17 * hashCode) + (endTime == null ? 0 : System.hashCode(endTime));
        hashCode = (17 * hashCode) + (targetingSpec == null ? 0 : System.hashCode(targetingSpec));
        hashCode = (17 * hashCode) + (lifetimeFrequencyCap == null ? 0 : System.hashCode(lifetimeFrequencyCap));
        hashCode = (17 * hashCode) + (trackingUrls == null ? 0 : System.hashCode(trackingUrls));
        hashCode = (17 * hashCode) + (autoTargetingEnabled == null ? 0 : System.hashCode(autoTargetingEnabled));
        hashCode = (17 * hashCode) + (placementGroup == null ? 0 : System.hashCode(placementGroup));
        hashCode = (17 * hashCode) + (pacingDeliveryType == null ? 0 : System.hashCode(pacingDeliveryType));
        hashCode = (17 * hashCode) + (campaignId == null ? 0 : System.hashCode(campaignId));
        hashCode = (17 * hashCode) + (billableEvent == null ? 0 : System.hashCode(billableEvent));
        hashCode = (17 * hashCode) + (bidStrategyType == null ? 0 : System.hashCode(bidStrategyType));
        hashCode = (17 * hashCode) + (targetingTemplateIds == null ? 0 : System.hashCode(targetingTemplateIds));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        return hashCode;
    }
}

