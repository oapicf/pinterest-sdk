/*
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASUserWebsiteVerificationCode
 */
public class OASUserWebsiteVerificationCode implements OAS.MappedProperties {
    /**
     * Code to check against the user claiming the website
     * @return verificationCode
     */
    public String verificationCode { get; set; }

    /**
     * DNS TXT record to check against for the website to be claimed
     * @return dnsTxtRecord
     */
    public String dnsTxtRecord { get; set; }

    /**
     * Metatag the verification process searchs for the website to be claimed
     * @return metatag
     */
    public String metatag { get; set; }

    /**
     * File expected to find on the website being claimed
     * @return filename
     */
    public String filename { get; set; }

    /**
     * A full html file to upload to the website in order for it to be claimed
     * @return fileContent
     */
    public String fileContent { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'verification_code' => 'verificationCode',
        'dns_txt_record' => 'dnsTxtRecord',
        'file_content' => 'fileContent'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'verification_code' => 'verificationCode',
        'dns_txt_record' => 'dnsTxtRecord',
        'file_content' => 'fileContent'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'verification_code' => 'verificationCode',
        'dns_txt_record' => 'dnsTxtRecord',
        'file_content' => 'fileContent'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASUserWebsiteVerificationCode getExample() {
        OASUserWebsiteVerificationCode userWebsiteVerificationCode = new OASUserWebsiteVerificationCode();
          userWebsiteVerificationCode.verificationCode = 'e1edcc1a43976c646367e9c6c9a9b7b6';
          userWebsiteVerificationCode.dnsTxtRecord = 'pinterest-site-verification=e1edcc1a43976c646367e9c6c9a9b7b6';
          userWebsiteVerificationCode.metatag = '<meta name="p:domain_verify" content="e1edcc1a43976c646367e9c6c9a9b7b6"/>';
          userWebsiteVerificationCode.filename = 'pinterest-e1edc.html';
          userWebsiteVerificationCode.fileContent = '';
        return userWebsiteVerificationCode;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASUserWebsiteVerificationCode) {           
            OASUserWebsiteVerificationCode userWebsiteVerificationCode = (OASUserWebsiteVerificationCode) obj;
            return this.verificationCode == userWebsiteVerificationCode.verificationCode
                && this.dnsTxtRecord == userWebsiteVerificationCode.dnsTxtRecord
                && this.metatag == userWebsiteVerificationCode.metatag
                && this.filename == userWebsiteVerificationCode.filename
                && this.fileContent == userWebsiteVerificationCode.fileContent;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (verificationCode == null ? 0 : System.hashCode(verificationCode));
        hashCode = (17 * hashCode) + (dnsTxtRecord == null ? 0 : System.hashCode(dnsTxtRecord));
        hashCode = (17 * hashCode) + (metatag == null ? 0 : System.hashCode(metatag));
        hashCode = (17 * hashCode) + (filename == null ? 0 : System.hashCode(filename));
        hashCode = (17 * hashCode) + (fileContent == null ? 0 : System.hashCode(fileContent));
        return hashCode;
    }
}

