/*
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASBoardsApi {
    OASClient client;

    public OASBoardsApi(OASClient client) {
        this.client = client;
    }

    public OASBoardsApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Create board section
     * Create a board section on a board owned by the &quot;operation user_account&quot; - or on a group board that has been shared with this account.\nOptional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the &quot;operation user_account&quot;.\n- By default, the &quot;operation user_account&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param oaSBoardSection Create a board section. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return OASBoardSection
     * @throws OAS.ApiException if fails to make API call
     */
    public OASBoardSection boardSectionsCreate(Map<String, Object> params) {
        client.assertNotNull(params.get('boardId'), 'boardId');
        client.assertNotNull(params.get('oaSBoardSection'), 'oaSBoardSection');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('ad_account_id', (String) params.get('adAccountId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASBoardSection) client.invoke(
            'POST', '/boards/{board_id}/sections',
            (OASBoardSection) params.get('oaSBoardSection'),
            query, form,
            new Map<String, Object>{
                'board_id' => (String) params.get('boardId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'pinterest_oauth2' },
            OASBoardSection.class
        );
    }
    /**
     * Delete board section
     * Delete a board section on a board owned by the &quot;operation user_account&quot; - or on a group board that has been shared with this account.\nOptional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the &quot;operation user_account&quot;.\n- By default, the &quot;operation user_account&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param sectionId Unique identifier of a board section. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @throws OAS.ApiException if fails to make API call
     */
    public void boardSectionsDelete(Map<String, Object> params) {
        client.assertNotNull(params.get('boardId'), 'boardId');
        client.assertNotNull(params.get('sectionId'), 'sectionId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('ad_account_id', (String) params.get('adAccountId')));

        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'DELETE', '/boards/{board_id}/sections/{section_id}', '',
            query, form,
            new Map<String, Object>{
                'board_id' => (String) params.get('boardId'),
                'section_id' => (String) params.get('sectionId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'pinterest_oauth2' },
            null
        );
    }
    /**
     * List board sections
     * Get a list of all board sections from a board owned by the &quot;operation user_account&quot; - or a group board that has been shared with this account.\nOptional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the &quot;operation user_account&quot;.\n- By default, the &quot;operation user_account&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return OASBoardSectionsList200Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASBoardSectionsList200Response boardSectionsList(Map<String, Object> params) {
        client.assertNotNull(params.get('boardId'), 'boardId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('ad_account_id', (String) params.get('adAccountId')));
        query.addAll(client.makeParam('bookmark', (String) params.get('bookmark')));
        query.addAll(client.makeParam('page_size', (Integer) params.get('pageSize')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASBoardSectionsList200Response) client.invoke(
            'GET', '/boards/{board_id}/sections', '',
            query, form,
            new Map<String, Object>{
                'board_id' => (String) params.get('boardId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'pinterest_oauth2', 'client_credentials' },
            OASBoardSectionsList200Response.class
        );
    }
    /**
     * List Pins on board section
     * Get a list of the Pins on a board section of a board owned by the &quot;operation user_account&quot; - or on a group board that has been shared with this account.\nOptional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the &quot;operation user_account&quot;.\n- By default, the &quot;operation user_account&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param sectionId Unique identifier of a board section. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return OASBoardsListPins200Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASBoardsListPins200Response boardSectionsListPins(Map<String, Object> params) {
        client.assertNotNull(params.get('boardId'), 'boardId');
        client.assertNotNull(params.get('sectionId'), 'sectionId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('ad_account_id', (String) params.get('adAccountId')));
        query.addAll(client.makeParam('bookmark', (String) params.get('bookmark')));
        query.addAll(client.makeParam('page_size', (Integer) params.get('pageSize')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASBoardsListPins200Response) client.invoke(
            'GET', '/boards/{board_id}/sections/{section_id}/pins', '',
            query, form,
            new Map<String, Object>{
                'board_id' => (String) params.get('boardId'),
                'section_id' => (String) params.get('sectionId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'pinterest_oauth2', 'client_credentials' },
            OASBoardsListPins200Response.class
        );
    }
    /**
     * Update board section
     * Update a board section on a board owned by the &quot;operation user_account&quot; - or on a group board that has been shared with this account.\nOptional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the &quot;operation user_account&quot;.\n- By default, the &quot;operation user_account&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param sectionId Unique identifier of a board section. (required)
     * @param oaSBoardSection Update a board section. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return OASBoardSection
     * @throws OAS.ApiException if fails to make API call
     */
    public OASBoardSection boardSectionsUpdate(Map<String, Object> params) {
        client.assertNotNull(params.get('boardId'), 'boardId');
        client.assertNotNull(params.get('sectionId'), 'sectionId');
        client.assertNotNull(params.get('oaSBoardSection'), 'oaSBoardSection');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('ad_account_id', (String) params.get('adAccountId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASBoardSection) client.invoke(
            'PATCH', '/boards/{board_id}/sections/{section_id}',
            (OASBoardSection) params.get('oaSBoardSection'),
            query, form,
            new Map<String, Object>{
                'board_id' => (String) params.get('boardId'),
                'section_id' => (String) params.get('sectionId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'pinterest_oauth2' },
            OASBoardSection.class
        );
    }
    /**
     * Create board
     * Create a board owned by the &quot;operation user_account&quot;.\nOptional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the &quot;operation user_account&quot;.\n- By default, the &quot;operation user_account&quot; is the token user_account.
     * @param oaSBoard Create a board using a single board json object. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return OASBoard
     * @throws OAS.ApiException if fails to make API call
     */
    public OASBoard boardsCreate(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSBoard'), 'oaSBoard');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('ad_account_id', (String) params.get('adAccountId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASBoard) client.invoke(
            'POST', '/boards',
            (OASBoard) params.get('oaSBoard'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'pinterest_oauth2' },
            OASBoard.class
        );
    }
    /**
     * Delete board
     * Delete a board owned by the &quot;operation user_account&quot;.\n- Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the &quot;operation user_account&quot;.\n- By default, the &quot;operation user_account&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @throws OAS.ApiException if fails to make API call
     */
    public void boardsDelete(Map<String, Object> params) {
        client.assertNotNull(params.get('boardId'), 'boardId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('ad_account_id', (String) params.get('adAccountId')));

        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'DELETE', '/boards/{board_id}', '',
            query, form,
            new Map<String, Object>{
                'board_id' => (String) params.get('boardId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'pinterest_oauth2' },
            null
        );
    }
    /**
     * Get board
     * Get a board owned by the operation user_account - or a group board that has been shared with this account.\n- Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the &quot;operation user_account&quot;.\n- By default, the &quot;operation user_account&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return OASBoard
     * @throws OAS.ApiException if fails to make API call
     */
    public OASBoard boardsGet(Map<String, Object> params) {
        client.assertNotNull(params.get('boardId'), 'boardId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('ad_account_id', (String) params.get('adAccountId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASBoard) client.invoke(
            'GET', '/boards/{board_id}', '',
            query, form,
            new Map<String, Object>{
                'board_id' => (String) params.get('boardId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'pinterest_oauth2', 'client_credentials' },
            OASBoard.class
        );
    }
    /**
     * List boards
     * Get a list of the boards owned by the &quot;operation user_account&quot; + group boards where this account is a collaborator\nOptional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the &quot;operation user_account&quot;.\nOptional: Specify a privacy type (public, protected, or secret) to indicate which boards to return.\n- If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param privacy Privacy setting for a board. (optional)
     * @return OASBoardsList200Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASBoardsList200Response boardsList(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('ad_account_id', (String) params.get('adAccountId')));
        query.addAll(client.makeParam('bookmark', (String) params.get('bookmark')));
        query.addAll(client.makeParam('page_size', (Integer) params.get('pageSize')));
        query.addAll(client.makeParam('privacy', (String) params.get('privacy')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASBoardsList200Response) client.invoke(
            'GET', '/boards', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'pinterest_oauth2', 'client_credentials' },
            OASBoardsList200Response.class
        );
    }
    /**
     * List Pins on board
     * Get a list of the Pins on a board owned by the &quot;operation user_account&quot; - or on a group board that has been shared with this account.\n- Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the &quot;operation user_account&quot;.\n- By default, the &quot;operation user_account&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/reference/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param creativeTypes Pin creative types filter. &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; SHOP_THE_PIN has been deprecated. Please use COLLECTION instead. (optional, default to new List<String>())
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param pinMetrics Specify whether to return 90d and lifetime Pin metrics. Total comments and total reactions are only available with lifetime Pin metrics. If Pin was created before &lt;code&gt;2023-03-20&lt;/code&gt; lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then. (optional, default to false)
     * @return OASBoardsListPins200Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASBoardsListPins200Response boardsListPins(Map<String, Object> params) {
        client.assertNotNull(params.get('boardId'), 'boardId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('bookmark', (String) params.get('bookmark')));
        query.addAll(client.makeParam('page_size', (Integer) params.get('pageSize')));
        query.addAll(client.makeParams('creative_types', (List<String>) params.get('creativeTypes')));
        query.addAll(client.makeParam('ad_account_id', (String) params.get('adAccountId')));
        query.addAll(client.makeParam('pin_metrics', (Boolean) params.get('pinMetrics')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASBoardsListPins200Response) client.invoke(
            'GET', '/boards/{board_id}/pins', '',
            query, form,
            new Map<String, Object>{
                'board_id' => (String) params.get('boardId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'pinterest_oauth2', 'client_credentials' },
            OASBoardsListPins200Response.class
        );
    }
    /**
     * Update board
     * Update a board owned by the &quot;operating user_account&quot;.\n- Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the &quot;operation user_account&quot;.\n- By default, the &quot;operation user_account&quot; is the token user_account.
     * @param boardId Unique identifier of a board. (required)
     * @param oaSBoardUpdate Update a board. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return OASBoard
     * @throws OAS.ApiException if fails to make API call
     */
    public OASBoard boardsUpdate(Map<String, Object> params) {
        client.assertNotNull(params.get('boardId'), 'boardId');
        client.assertNotNull(params.get('oaSBoardUpdate'), 'oaSBoardUpdate');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('ad_account_id', (String) params.get('adAccountId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASBoard) client.invoke(
            'PATCH', '/boards/{board_id}',
            (OASBoardUpdate) params.get('oaSBoardUpdate'),
            query, form,
            new Map<String, Object>{
                'board_id' => (String) params.get('boardId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'pinterest_oauth2' },
            OASBoard.class
        );
    }
}
