/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.swagger.client.api

import akka.{Done, NotUsed}
import com.lightbend.lagom.scaladsl.api.transport.Method
import com.lightbend.lagom.scaladsl.api.{Service, ServiceCall}
import play.api.libs.json._
import com.lightbend.lagom.scaladsl.api.deser.PathParamSerializer

import io.swagger.client.model.Error
import io.swagger.client.model.RelatedTerms

trait TermsApi extends Service {


  final override def descriptor = {
    import Service._
    named("TermsApi").withCalls(
      restCall(Method.GET, "/terms/related?terms", termsRelatedList _), 
      restCall(Method.GET, "/terms/suggested?term&limit", termsSuggestedList _)
    ).withAutoAcl(true)
  }

      
  // terms:Seq[String]  -- not yet supported Seq PathParamSerializers for multi value query parameters https://github.com/lagom/lagom/issues/643
      
  /**
    * List related terms
    * Get a list of terms logically related to each input term. &lt;p/&gt; Example: the term &#39;workout&#39; would list related terms like &#39;one song workout&#39;, &#39;yoga workout&#39;, &#39;workout motivation&#39;, etc.
    *  
    * @param terms List of input terms. 
    * @return RelatedTerms
    */
  def termsRelatedList(): ServiceCall[NotUsed ,RelatedTerms]
        
  /**
    * List suggested terms
    * Get popular search terms that begin with your input term. &lt;p/&gt; Example: &#39;sport&#39; would return popular terms like &#39;sports bar&#39; and &#39;sportswear&#39;, but not &#39;motor sports&#39; since the phrase does not begin with the given term.
    *  
    * @param term Input term.  
    * @param limit Max suggested terms to return. (optional, default to 4)
    * @return Seq[String]
    */
  def termsSuggestedList(term:String          ,limit:           Option[Int] /* = 4*/): ServiceCall[NotUsed ,Seq[String]]
  

  }
