/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.swagger.client.api

import akka.{Done, NotUsed}
import com.lightbend.lagom.scaladsl.api.transport.Method
import com.lightbend.lagom.scaladsl.api.{Service, ServiceCall}
import play.api.libs.json._
import com.lightbend.lagom.scaladsl.api.deser.PathParamSerializer

import io.swagger.client.model.Board
import io.swagger.client.model.BoardSection
import io.swagger.client.model.BoardSectionsList200Response
import io.swagger.client.model.BoardUpdate
import io.swagger.client.model.BoardsList200Response
import io.swagger.client.model.BoardsListPins200Response
import io.swagger.client.model.Error

trait BoardsApi extends Service {


  final override def descriptor = {
    import Service._
    named("BoardsApi").withCalls(
      restCall(Method.POST, "/boards/:board_id/sections?adAccountId", boardSectionsCreate _), 
      restCall(Method.DELETE, "/boards/:board_id/sections/:section_id?adAccountId", boardSectionsDelete _), 
      restCall(Method.GET, "/boards/:board_id/sections?adAccountId&bookmark&pageSize", boardSectionsList _), 
      restCall(Method.GET, "/boards/:board_id/sections/:section_id/pins?adAccountId&bookmark&pageSize", boardSectionsListPins _), 
      restCall(Method.PATCH, "/boards/:board_id/sections/:section_id?adAccountId", boardSectionsUpdate _), 
      restCall(Method.POST, "/boards?adAccountId", boardsCreate _), 
      restCall(Method.DELETE, "/boards/:board_id?adAccountId", boardsDelete _), 
      restCall(Method.GET, "/boards/:board_id?adAccountId", boardsGet _), 
      restCall(Method.GET, "/boards?adAccountId&bookmark&pageSize&privacy", boardsList _), 
      restCall(Method.GET, "/boards/:board_id/pins?bookmark&pageSize&creativeTypes&adAccountId&pinMetrics", boardsListPins _), 
      restCall(Method.PATCH, "/boards/:board_id?adAccountId", boardsUpdate _)
    ).withAutoAcl(true)
  }

      
  /**
    * Create board section
    * Create a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
    *  
    * @param boardId Unique identifier of a board.   
    * @param adAccountId Unique identifier of an ad account. (optional)
    * @return BoardSection Body Parameter  Create a board section. 
    */
  def boardSectionsCreate(adAccountId:           Option[String] = NoneboardId: String): ServiceCall[BoardSection ,BoardSection]
        
  /**
    * Delete board section
    * Delete a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
    *  
    * @param boardId Unique identifier of a board.  
    * @param sectionId Unique identifier of a board section.  
    * @param adAccountId Unique identifier of an ad account. (optional)
    * @return void
    */
  def boardSectionsDelete(adAccountId:           Option[String] = NoneboardId: String, sectionId: String): ServiceCall[NotUsed ,Done]
        
  /**
    * List board sections
    * Get a list of all board sections from a board owned by the \&quot;operation user_account\&quot; - or a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
    *  
    * @param boardId Unique identifier of a board.  
    * @param adAccountId Unique identifier of an ad account. (optional) 
    * @param bookmark Cursor used to fetch the next page of items (optional) 
    * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
    * @return BoardSectionsList200Response
    */
  def boardSectionsList(adAccountId:           Option[String] = None,bookmark:           Option[String] = None,pageSize:           Option[Int] /* = 25*/boardId: String): ServiceCall[NotUsed ,BoardSectionsList200Response]
        
  /**
    * List Pins on board section
    * Get a list of the Pins on a board section of a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
    *  
    * @param boardId Unique identifier of a board.  
    * @param sectionId Unique identifier of a board section.  
    * @param adAccountId Unique identifier of an ad account. (optional) 
    * @param bookmark Cursor used to fetch the next page of items (optional) 
    * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
    * @return BoardsListPins200Response
    */
  def boardSectionsListPins(adAccountId:           Option[String] = None,bookmark:           Option[String] = None,pageSize:           Option[Int] /* = 25*/boardId: String, sectionId: String): ServiceCall[NotUsed ,BoardsListPins200Response]
        
  /**
    * Update board section
    * Update a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
    *  
    * @param boardId Unique identifier of a board.  
    * @param sectionId Unique identifier of a board section.   
    * @param adAccountId Unique identifier of an ad account. (optional)
    * @return BoardSection Body Parameter  Update a board section. 
    */
  def boardSectionsUpdate(adAccountId:           Option[String] = NoneboardId: String, sectionId: String): ServiceCall[BoardSection ,BoardSection]
        
  /**
    * Create board
    * Create a board owned by the \&quot;operation user_account\&quot;. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
    *   
    * @param adAccountId Unique identifier of an ad account. (optional)
    * @return Board Body Parameter  Create a board using a single board json object. 
    */
  def boardsCreate(adAccountId:           Option[String] = None): ServiceCall[Board ,Board]
        
  /**
    * Delete board
    * Delete a board owned by the \&quot;operation user_account\&quot;. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
    *  
    * @param boardId Unique identifier of a board.  
    * @param adAccountId Unique identifier of an ad account. (optional)
    * @return void
    */
  def boardsDelete(adAccountId:           Option[String] = NoneboardId: String): ServiceCall[NotUsed ,Done]
        
  /**
    * Get board
    * Get a board owned by the operation user_account - or a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
    *  
    * @param boardId Unique identifier of a board.  
    * @param adAccountId Unique identifier of an ad account. (optional)
    * @return Board
    */
  def boardsGet(adAccountId:           Option[String] = NoneboardId: String): ServiceCall[NotUsed ,Board]
        
  /**
    * List boards
    * Get a list of the boards owned by the \&quot;operation user_account\&quot; + group boards where this account is a collaborator Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
    *  
    * @param adAccountId Unique identifier of an ad account. (optional) 
    * @param bookmark Cursor used to fetch the next page of items (optional) 
    * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25) 
    * @param privacy Privacy setting for a board. (optional)
    * @return BoardsList200Response
    */
  def boardsList(adAccountId:           Option[String] = None,bookmark:           Option[String] = None,pageSize:           Option[Int] /* = 25*/,privacy: Option[BoardsApiPrivacyEnum.BoardsApiPrivacyEnum]): ServiceCall[NotUsed ,BoardsList200Response]
        
  // creativeTypes:Seq[String]  -- not yet supported Seq PathParamSerializers for multi value query parameters https://github.com/lagom/lagom/issues/643
      
  /**
    * List Pins on board
    * Get a list of the Pins on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
    *  
    * @param boardId Unique identifier of a board.  
    * @param bookmark Cursor used to fetch the next page of items (optional) 
    * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25) 
    * @param creativeTypes Pin creative types filter. &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; SHOP_THE_PIN has been deprecated. Please use COLLECTION instead. (optional, default to new ListBuffer[String]() ) 
    * @param adAccountId Unique identifier of an ad account. (optional) 
    * @param pinMetrics Specify whether to return 90d and lifetime Pin metrics. Total comments and total reactions are only available with lifetime Pin metrics. If Pin was created before &lt;code&gt;2023-03-20&lt;/code&gt; lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then. (optional, default to false)
    * @return BoardsListPins200Response
    */
  def boardsListPins(bookmark:           Option[String] = None,pageSize:           Option[Int] /* = 25*/,creativeTypes: Option[BoardsApiCreativeTypesEnum.BoardsApiCreativeTypesEnum]adAccountId:           Option[String] = None,pinMetrics:           Option[Boolean] /* = false*/boardId: String): ServiceCall[NotUsed ,BoardsListPins200Response]
        
  /**
    * Update board
    * Update a board owned by the \&quot;operating user_account\&quot;. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
    *  
    * @param boardId Unique identifier of a board.   
    * @param adAccountId Unique identifier of an ad account. (optional)
    * @return Board Body Parameter  Update a board. 
    */
  def boardsUpdate(adAccountId:           Option[String] = NoneboardId: String): ServiceCall[BoardUpdate ,Board]
  

        object BoardsApiPrivacyEnum extends Enumeration {
        val   ALL, PROTECTED, PUBLIC, SECRET, PUBLIC_AND_SECRET = Value     
        type BoardsApiPrivacyEnum = Value
        implicit val format: Format[Value] = Format(Reads.enumNameReads(this), Writes.enumNameWrites[BoardsApiPrivacyEnum.type])
        implicit val pathParamSerializer: PathParamSerializer[BoardsApiPrivacyEnum] = PathParamSerializer.required("BoardsApiPrivacyEnum")(withName)(_.toString)
        }
        object BoardsApiCreativeTypesEnum extends Enumeration {
        val   REGULAR, VIDEO, SHOPPING, CAROUSEL, MAX_VIDEO, SHOP_THE_PIN, COLLECTION, IDEA = Value     
        type BoardsApiCreativeTypesEnum = Value
        implicit val format: Format[Value] = Format(Reads.enumNameReads(this), Writes.enumNameWrites[BoardsApiCreativeTypesEnum.type])
        implicit val pathParamSerializer: PathParamSerializer[BoardsApiCreativeTypesEnum] = PathParamSerializer.required("BoardsApiCreativeTypesEnum")(withName)(_.toString)
        }
  }
