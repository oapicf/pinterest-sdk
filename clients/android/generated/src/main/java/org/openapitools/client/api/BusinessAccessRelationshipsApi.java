/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.DeletePartnersRequest;
import org.openapitools.client.model.DeletePartnersResponse;
import org.openapitools.client.model.DeletedMembersResponse;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.GetBusinessEmployers200Response;
import org.openapitools.client.model.GetBusinessMembers200Response;
import org.openapitools.client.model.GetBusinessPartners200Response;
import java.util.*;
import org.openapitools.client.model.MemberBusinessRole;
import org.openapitools.client.model.MembersToDeleteBody;
import org.openapitools.client.model.PartnerType;
import org.openapitools.client.model.UpdateMemberBusinessRoleBody;
import org.openapitools.client.model.UpdateMemberResultsResponseArray;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class BusinessAccessRelationshipsApi {
  String basePath = "https://api.pinterest.com/v5";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Terminate business memberships
  * Terminate memberships between the specified members and your business.
   * @param businessId Business id
   * @param membersToDeleteBody List of members with role to delete.
   * @return DeletedMembersResponse
  */
  public DeletedMembersResponse deleteBusinessMembership (String businessId, MembersToDeleteBody membersToDeleteBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = membersToDeleteBody;
    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling deleteBusinessMembership",
        new ApiException(400, "Missing the required parameter 'businessId' when calling deleteBusinessMembership"));
    }
    // verify the required parameter 'membersToDeleteBody' is set
    if (membersToDeleteBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'membersToDeleteBody' when calling deleteBusinessMembership",
        new ApiException(400, "Missing the required parameter 'membersToDeleteBody' when calling deleteBusinessMembership"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/members".replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (DeletedMembersResponse) ApiInvoker.deserialize(localVarResponse, "", DeletedMembersResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Terminate business memberships
   * Terminate memberships between the specified members and your business.
   * @param businessId Business id   * @param membersToDeleteBody List of members with role to delete.
  */
  public void deleteBusinessMembership (String businessId, MembersToDeleteBody membersToDeleteBody, final Response.Listener<DeletedMembersResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = membersToDeleteBody;

    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling deleteBusinessMembership",
        new ApiException(400, "Missing the required parameter 'businessId' when calling deleteBusinessMembership"));
    }
    // verify the required parameter 'membersToDeleteBody' is set
    if (membersToDeleteBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'membersToDeleteBody' when calling deleteBusinessMembership",
        new ApiException(400, "Missing the required parameter 'membersToDeleteBody' when calling deleteBusinessMembership"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/members".replaceAll("\\{format\\}","json").replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DeletedMembersResponse) ApiInvoker.deserialize(localVarResponse,  "", DeletedMembersResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Terminate business partnerships
  * Terminate partnerships between the specified partners and your business. Note: You may only batch terminate partners of the same partner type.
   * @param businessId Unique identifier of the requesting business.
   * @param deletePartnersRequest An object containing a \&quot;partner_ids\&quot; property composed of a list of partner IDs and a \&quot;partners_type\&quot; property specifying the type of partners to delete. 
   * @return DeletePartnersResponse
  */
  public DeletePartnersResponse deleteBusinessPartners (String businessId, DeletePartnersRequest deletePartnersRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = deletePartnersRequest;
    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling deleteBusinessPartners",
        new ApiException(400, "Missing the required parameter 'businessId' when calling deleteBusinessPartners"));
    }
    // verify the required parameter 'deletePartnersRequest' is set
    if (deletePartnersRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deletePartnersRequest' when calling deleteBusinessPartners",
        new ApiException(400, "Missing the required parameter 'deletePartnersRequest' when calling deleteBusinessPartners"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/partners".replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (DeletePartnersResponse) ApiInvoker.deserialize(localVarResponse, "", DeletePartnersResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Terminate business partnerships
   * Terminate partnerships between the specified partners and your business. Note: You may only batch terminate partners of the same partner type.
   * @param businessId Unique identifier of the requesting business.   * @param deletePartnersRequest An object containing a \&quot;partner_ids\&quot; property composed of a list of partner IDs and a \&quot;partners_type\&quot; property specifying the type of partners to delete. 
  */
  public void deleteBusinessPartners (String businessId, DeletePartnersRequest deletePartnersRequest, final Response.Listener<DeletePartnersResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = deletePartnersRequest;

    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling deleteBusinessPartners",
        new ApiException(400, "Missing the required parameter 'businessId' when calling deleteBusinessPartners"));
    }
    // verify the required parameter 'deletePartnersRequest' is set
    if (deletePartnersRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deletePartnersRequest' when calling deleteBusinessPartners",
        new ApiException(400, "Missing the required parameter 'deletePartnersRequest' when calling deleteBusinessPartners"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/partners".replaceAll("\\{format\\}","json").replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DeletePartnersResponse) ApiInvoker.deserialize(localVarResponse,  "", DeletePartnersResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List business employers for user
  * Get all of the viewing user&#39;s business employers.
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param bookmark Cursor used to fetch the next page of items
   * @return GetBusinessEmployers200Response
  */
  public GetBusinessEmployers200Response getBusinessEmployers (Integer pageSize, String bookmark) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/businesses/employers";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetBusinessEmployers200Response) ApiInvoker.deserialize(localVarResponse, "", GetBusinessEmployers200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List business employers for user
   * Get all of the viewing user&#39;s business employers.
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.   * @param bookmark Cursor used to fetch the next page of items
  */
  public void getBusinessEmployers (Integer pageSize, String bookmark, final Response.Listener<GetBusinessEmployers200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/businesses/employers".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetBusinessEmployers200Response) ApiInvoker.deserialize(localVarResponse,  "", GetBusinessEmployers200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get business members
  * Get all members of the specified business. The return response will include the member&#39;s business_role and assets they have access to if assets_summary&#x3D;TRUE
   * @param businessId Unique identifier of the requesting business.
   * @param assetsSummary Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are
   * @param businessRoles A list of business roles to filter the members by. Only members whose roles are in the specified roles will be returned.
   * @param memberIds A list of business members ids separated by comma.
   * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned.
   * @param bookmark Cursor used to fetch the next page of items
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @return GetBusinessMembers200Response
  */
  public GetBusinessMembers200Response getBusinessMembers (String businessId, Boolean assetsSummary, List<MemberBusinessRole> businessRoles, String memberIds, Integer startIndex, String bookmark, Integer pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling getBusinessMembers",
        new ApiException(400, "Missing the required parameter 'businessId' when calling getBusinessMembers"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/members".replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "assets_summary", assetsSummary));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "business_roles", businessRoles));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "member_ids", memberIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_index", startIndex));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetBusinessMembers200Response) ApiInvoker.deserialize(localVarResponse, "", GetBusinessMembers200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get business members
   * Get all members of the specified business. The return response will include the member&#39;s business_role and assets they have access to if assets_summary&#x3D;TRUE
   * @param businessId Unique identifier of the requesting business.   * @param assetsSummary Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are   * @param businessRoles A list of business roles to filter the members by. Only members whose roles are in the specified roles will be returned.   * @param memberIds A list of business members ids separated by comma.   * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned.   * @param bookmark Cursor used to fetch the next page of items   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
  */
  public void getBusinessMembers (String businessId, Boolean assetsSummary, List<MemberBusinessRole> businessRoles, String memberIds, Integer startIndex, String bookmark, Integer pageSize, final Response.Listener<GetBusinessMembers200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling getBusinessMembers",
        new ApiException(400, "Missing the required parameter 'businessId' when calling getBusinessMembers"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/members".replaceAll("\\{format\\}","json").replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "assets_summary", assetsSummary));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "business_roles", businessRoles));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "member_ids", memberIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_index", startIndex));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetBusinessMembers200Response) ApiInvoker.deserialize(localVarResponse,  "", GetBusinessMembers200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get business partners
  * Get all partners of the specified business.  If the assets_summary&#x3D;TRUE and: - partner_type&#x3D;INTERNAL, the business assets returned are your business assets the partner has access to. - partner_type&#x3D;EXTERNAL, the business assets returned are your partner&#39;s business assets the partner has granted you   access to.
   * @param businessId Unique identifier of the requesting business.
   * @param assetsSummary Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are
   * @param partnerType Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset.
   * @param partnerIds A list of business partner ids separated by commas used to filter the results. Only partners with the specified ids will be returned.
   * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned.
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param bookmark Cursor used to fetch the next page of items
   * @return GetBusinessPartners200Response
  */
  public GetBusinessPartners200Response getBusinessPartners (String businessId, Boolean assetsSummary, PartnerType partnerType, String partnerIds, Integer startIndex, Integer pageSize, String bookmark) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling getBusinessPartners",
        new ApiException(400, "Missing the required parameter 'businessId' when calling getBusinessPartners"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/partners".replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "assets_summary", assetsSummary));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "partner_type", partnerType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "partner_ids", partnerIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_index", startIndex));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetBusinessPartners200Response) ApiInvoker.deserialize(localVarResponse, "", GetBusinessPartners200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get business partners
   * Get all partners of the specified business.  If the assets_summary&#x3D;TRUE and: - partner_type&#x3D;INTERNAL, the business assets returned are your business assets the partner has access to. - partner_type&#x3D;EXTERNAL, the business assets returned are your partner&#39;s business assets the partner has granted you   access to.
   * @param businessId Unique identifier of the requesting business.   * @param assetsSummary Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are   * @param partnerType Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset.   * @param partnerIds A list of business partner ids separated by commas used to filter the results. Only partners with the specified ids will be returned.   * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned.   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.   * @param bookmark Cursor used to fetch the next page of items
  */
  public void getBusinessPartners (String businessId, Boolean assetsSummary, PartnerType partnerType, String partnerIds, Integer startIndex, Integer pageSize, String bookmark, final Response.Listener<GetBusinessPartners200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling getBusinessPartners",
        new ApiException(400, "Missing the required parameter 'businessId' when calling getBusinessPartners"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/partners".replaceAll("\\{format\\}","json").replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "assets_summary", assetsSummary));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "partner_type", partnerType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "partner_ids", partnerIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_index", startIndex));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetBusinessPartners200Response) ApiInvoker.deserialize(localVarResponse,  "", GetBusinessPartners200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update member&#39;s business role
  * Update a member&#39;s business role within the business.
   * @param businessId Business id
   * @param updateMemberBusinessRoleBody List of objects with the member id and the business_role.
   * @return UpdateMemberResultsResponseArray
  */
  public UpdateMemberResultsResponseArray updateBusinessMemberships (String businessId, List<UpdateMemberBusinessRoleBody> updateMemberBusinessRoleBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = updateMemberBusinessRoleBody;
    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling updateBusinessMemberships",
        new ApiException(400, "Missing the required parameter 'businessId' when calling updateBusinessMemberships"));
    }
    // verify the required parameter 'updateMemberBusinessRoleBody' is set
    if (updateMemberBusinessRoleBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'updateMemberBusinessRoleBody' when calling updateBusinessMemberships",
        new ApiException(400, "Missing the required parameter 'updateMemberBusinessRoleBody' when calling updateBusinessMemberships"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/members".replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UpdateMemberResultsResponseArray) ApiInvoker.deserialize(localVarResponse, "", UpdateMemberResultsResponseArray.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update member&#39;s business role
   * Update a member&#39;s business role within the business.
   * @param businessId Business id   * @param updateMemberBusinessRoleBody List of objects with the member id and the business_role.
  */
  public void updateBusinessMemberships (String businessId, List<UpdateMemberBusinessRoleBody> updateMemberBusinessRoleBody, final Response.Listener<UpdateMemberResultsResponseArray> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = updateMemberBusinessRoleBody;

    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling updateBusinessMemberships",
        new ApiException(400, "Missing the required parameter 'businessId' when calling updateBusinessMemberships"));
    }
    // verify the required parameter 'updateMemberBusinessRoleBody' is set
    if (updateMemberBusinessRoleBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'updateMemberBusinessRoleBody' when calling updateBusinessMemberships",
        new ApiException(400, "Missing the required parameter 'updateMemberBusinessRoleBody' when calling updateBusinessMemberships"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/members".replaceAll("\\{format\\}","json").replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UpdateMemberResultsResponseArray) ApiInvoker.deserialize(localVarResponse,  "", UpdateMemberResultsResponseArray.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
