/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * A request to exchange a refresh token for a new access token.
 **/
@ApiModel(description = "A request to exchange a refresh token for a new access token.")
public class OauthAccessTokenRequestRefresh {
  
  public enum GrantTypeEnum {
     authorization_code,  refresh_token,  client_credentials, 
  };
  @SerializedName("grant_type")
  private GrantTypeEnum grantType = null;
  @SerializedName("refresh_token")
  private String refreshToken = null;
  @SerializedName("scope")
  private String scope = null;
  @SerializedName("refresh_on")
  private Boolean refreshOn = null;

  /**
   **/
  @ApiModelProperty(required = true, value = "")
  public GrantTypeEnum getGrantType() {
    return grantType;
  }
  public void setGrantType(GrantTypeEnum grantType) {
    this.grantType = grantType;
  }

  /**
   **/
  @ApiModelProperty(required = true, value = "")
  public String getRefreshToken() {
    return refreshToken;
  }
  public void setRefreshToken(String refreshToken) {
    this.refreshToken = refreshToken;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getScope() {
    return scope;
  }
  public void setScope(String scope) {
    this.scope = scope;
  }

  /**
   * Setting this field to <code>true</code> will add a new refresh token to your 200 response, as well as the refresh_token_expires_in and refresh_token_expires_at fields. To see the structure of this payload, set the 200 response_type to \"everlasting_refresh\".
   **/
  @ApiModelProperty(value = "Setting this field to <code>true</code> will add a new refresh token to your 200 response, as well as the refresh_token_expires_in and refresh_token_expires_at fields. To see the structure of this payload, set the 200 response_type to \"everlasting_refresh\".")
  public Boolean getRefreshOn() {
    return refreshOn;
  }
  public void setRefreshOn(Boolean refreshOn) {
    this.refreshOn = refreshOn;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OauthAccessTokenRequestRefresh oauthAccessTokenRequestRefresh = (OauthAccessTokenRequestRefresh) o;
    return (this.grantType == null ? oauthAccessTokenRequestRefresh.grantType == null : this.grantType.equals(oauthAccessTokenRequestRefresh.grantType)) &&
        (this.refreshToken == null ? oauthAccessTokenRequestRefresh.refreshToken == null : this.refreshToken.equals(oauthAccessTokenRequestRefresh.refreshToken)) &&
        (this.scope == null ? oauthAccessTokenRequestRefresh.scope == null : this.scope.equals(oauthAccessTokenRequestRefresh.scope)) &&
        (this.refreshOn == null ? oauthAccessTokenRequestRefresh.refreshOn == null : this.refreshOn.equals(oauthAccessTokenRequestRefresh.refreshOn));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.grantType == null ? 0: this.grantType.hashCode());
    result = 31 * result + (this.refreshToken == null ? 0: this.refreshToken.hashCode());
    result = 31 * result + (this.scope == null ? 0: this.scope.hashCode());
    result = 31 * result + (this.refreshOn == null ? 0: this.refreshOn.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class OauthAccessTokenRequestRefresh {\n");
    
    sb.append("  grantType: ").append(grantType).append("\n");
    sb.append("  refreshToken: ").append(refreshToken).append("\n");
    sb.append("  scope: ").append(scope).append("\n");
    sb.append("  refreshOn: ").append(refreshOn).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
