/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.Board;
import org.openapitools.client.model.BoardSection;
import org.openapitools.client.model.BoardSectionsList200Response;
import org.openapitools.client.model.BoardUpdate;
import org.openapitools.client.model.BoardsList200Response;
import org.openapitools.client.model.BoardsListPins200Response;
import org.openapitools.client.model.Error;
import java.util.*;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class BoardsApi {
  String basePath = "https://api.pinterest.com/v5";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Create board section
  * Create a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   * @param boardId Unique identifier of a board.
   * @param boardSection Create a board section.
   * @param adAccountId Unique identifier of an ad account.
   * @return BoardSection
  */
  public BoardSection boardSectionsCreate (String boardId, BoardSection boardSection, String adAccountId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = boardSection;
    // verify the required parameter 'boardId' is set
    if (boardId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'boardId' when calling boardSectionsCreate",
        new ApiException(400, "Missing the required parameter 'boardId' when calling boardSectionsCreate"));
    }
    // verify the required parameter 'boardSection' is set
    if (boardSection == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'boardSection' when calling boardSectionsCreate",
        new ApiException(400, "Missing the required parameter 'boardSection' when calling boardSectionsCreate"));
    }

    // create path and map variables
    String path = "/boards/{board_id}/sections".replaceAll("\\{" + "board_id" + "\\}", apiInvoker.escapeString(boardId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ad_account_id", adAccountId));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (BoardSection) ApiInvoker.deserialize(localVarResponse, "", BoardSection.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create board section
   * Create a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   * @param boardId Unique identifier of a board.   * @param boardSection Create a board section.   * @param adAccountId Unique identifier of an ad account.
  */
  public void boardSectionsCreate (String boardId, BoardSection boardSection, String adAccountId, final Response.Listener<BoardSection> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = boardSection;

    // verify the required parameter 'boardId' is set
    if (boardId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'boardId' when calling boardSectionsCreate",
        new ApiException(400, "Missing the required parameter 'boardId' when calling boardSectionsCreate"));
    }
    // verify the required parameter 'boardSection' is set
    if (boardSection == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'boardSection' when calling boardSectionsCreate",
        new ApiException(400, "Missing the required parameter 'boardSection' when calling boardSectionsCreate"));
    }

    // create path and map variables
    String path = "/boards/{board_id}/sections".replaceAll("\\{format\\}","json").replaceAll("\\{" + "board_id" + "\\}", apiInvoker.escapeString(boardId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "ad_account_id", adAccountId));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BoardSection) ApiInvoker.deserialize(localVarResponse,  "", BoardSection.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete board section
  * Delete a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   * @param boardId Unique identifier of a board.
   * @param sectionId Unique identifier of a board section.
   * @param adAccountId Unique identifier of an ad account.
   * @return void
  */
  public void boardSectionsDelete (String boardId, String sectionId, String adAccountId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'boardId' is set
    if (boardId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'boardId' when calling boardSectionsDelete",
        new ApiException(400, "Missing the required parameter 'boardId' when calling boardSectionsDelete"));
    }
    // verify the required parameter 'sectionId' is set
    if (sectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sectionId' when calling boardSectionsDelete",
        new ApiException(400, "Missing the required parameter 'sectionId' when calling boardSectionsDelete"));
    }

    // create path and map variables
    String path = "/boards/{board_id}/sections/{section_id}".replaceAll("\\{" + "board_id" + "\\}", apiInvoker.escapeString(boardId.toString())).replaceAll("\\{" + "section_id" + "\\}", apiInvoker.escapeString(sectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ad_account_id", adAccountId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete board section
   * Delete a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   * @param boardId Unique identifier of a board.   * @param sectionId Unique identifier of a board section.   * @param adAccountId Unique identifier of an ad account.
  */
  public void boardSectionsDelete (String boardId, String sectionId, String adAccountId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'boardId' is set
    if (boardId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'boardId' when calling boardSectionsDelete",
        new ApiException(400, "Missing the required parameter 'boardId' when calling boardSectionsDelete"));
    }
    // verify the required parameter 'sectionId' is set
    if (sectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sectionId' when calling boardSectionsDelete",
        new ApiException(400, "Missing the required parameter 'sectionId' when calling boardSectionsDelete"));
    }

    // create path and map variables
    String path = "/boards/{board_id}/sections/{section_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "board_id" + "\\}", apiInvoker.escapeString(boardId.toString())).replaceAll("\\{" + "section_id" + "\\}", apiInvoker.escapeString(sectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "ad_account_id", adAccountId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List board sections
  * Get a list of all board sections from a board owned by the \&quot;operation user_account\&quot; - or a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   * @param boardId Unique identifier of a board.
   * @param adAccountId Unique identifier of an ad account.
   * @param bookmark Cursor used to fetch the next page of items
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @return BoardSectionsList200Response
  */
  public BoardSectionsList200Response boardSectionsList (String boardId, String adAccountId, String bookmark, Integer pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'boardId' is set
    if (boardId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'boardId' when calling boardSectionsList",
        new ApiException(400, "Missing the required parameter 'boardId' when calling boardSectionsList"));
    }

    // create path and map variables
    String path = "/boards/{board_id}/sections".replaceAll("\\{" + "board_id" + "\\}", apiInvoker.escapeString(boardId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ad_account_id", adAccountId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2", "client_credentials" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (BoardSectionsList200Response) ApiInvoker.deserialize(localVarResponse, "", BoardSectionsList200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List board sections
   * Get a list of all board sections from a board owned by the \&quot;operation user_account\&quot; - or a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   * @param boardId Unique identifier of a board.   * @param adAccountId Unique identifier of an ad account.   * @param bookmark Cursor used to fetch the next page of items   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
  */
  public void boardSectionsList (String boardId, String adAccountId, String bookmark, Integer pageSize, final Response.Listener<BoardSectionsList200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'boardId' is set
    if (boardId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'boardId' when calling boardSectionsList",
        new ApiException(400, "Missing the required parameter 'boardId' when calling boardSectionsList"));
    }

    // create path and map variables
    String path = "/boards/{board_id}/sections".replaceAll("\\{format\\}","json").replaceAll("\\{" + "board_id" + "\\}", apiInvoker.escapeString(boardId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "ad_account_id", adAccountId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2", "client_credentials" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BoardSectionsList200Response) ApiInvoker.deserialize(localVarResponse,  "", BoardSectionsList200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List Pins on board section
  * Get a list of the Pins on a board section of a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   * @param boardId Unique identifier of a board.
   * @param sectionId Unique identifier of a board section.
   * @param adAccountId Unique identifier of an ad account.
   * @param bookmark Cursor used to fetch the next page of items
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @return BoardsListPins200Response
  */
  public BoardsListPins200Response boardSectionsListPins (String boardId, String sectionId, String adAccountId, String bookmark, Integer pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'boardId' is set
    if (boardId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'boardId' when calling boardSectionsListPins",
        new ApiException(400, "Missing the required parameter 'boardId' when calling boardSectionsListPins"));
    }
    // verify the required parameter 'sectionId' is set
    if (sectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sectionId' when calling boardSectionsListPins",
        new ApiException(400, "Missing the required parameter 'sectionId' when calling boardSectionsListPins"));
    }

    // create path and map variables
    String path = "/boards/{board_id}/sections/{section_id}/pins".replaceAll("\\{" + "board_id" + "\\}", apiInvoker.escapeString(boardId.toString())).replaceAll("\\{" + "section_id" + "\\}", apiInvoker.escapeString(sectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ad_account_id", adAccountId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2", "client_credentials" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (BoardsListPins200Response) ApiInvoker.deserialize(localVarResponse, "", BoardsListPins200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List Pins on board section
   * Get a list of the Pins on a board section of a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   * @param boardId Unique identifier of a board.   * @param sectionId Unique identifier of a board section.   * @param adAccountId Unique identifier of an ad account.   * @param bookmark Cursor used to fetch the next page of items   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
  */
  public void boardSectionsListPins (String boardId, String sectionId, String adAccountId, String bookmark, Integer pageSize, final Response.Listener<BoardsListPins200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'boardId' is set
    if (boardId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'boardId' when calling boardSectionsListPins",
        new ApiException(400, "Missing the required parameter 'boardId' when calling boardSectionsListPins"));
    }
    // verify the required parameter 'sectionId' is set
    if (sectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sectionId' when calling boardSectionsListPins",
        new ApiException(400, "Missing the required parameter 'sectionId' when calling boardSectionsListPins"));
    }

    // create path and map variables
    String path = "/boards/{board_id}/sections/{section_id}/pins".replaceAll("\\{format\\}","json").replaceAll("\\{" + "board_id" + "\\}", apiInvoker.escapeString(boardId.toString())).replaceAll("\\{" + "section_id" + "\\}", apiInvoker.escapeString(sectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "ad_account_id", adAccountId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2", "client_credentials" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BoardsListPins200Response) ApiInvoker.deserialize(localVarResponse,  "", BoardsListPins200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update board section
  * Update a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   * @param boardId Unique identifier of a board.
   * @param sectionId Unique identifier of a board section.
   * @param boardSection Update a board section.
   * @param adAccountId Unique identifier of an ad account.
   * @return BoardSection
  */
  public BoardSection boardSectionsUpdate (String boardId, String sectionId, BoardSection boardSection, String adAccountId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = boardSection;
    // verify the required parameter 'boardId' is set
    if (boardId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'boardId' when calling boardSectionsUpdate",
        new ApiException(400, "Missing the required parameter 'boardId' when calling boardSectionsUpdate"));
    }
    // verify the required parameter 'sectionId' is set
    if (sectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sectionId' when calling boardSectionsUpdate",
        new ApiException(400, "Missing the required parameter 'sectionId' when calling boardSectionsUpdate"));
    }
    // verify the required parameter 'boardSection' is set
    if (boardSection == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'boardSection' when calling boardSectionsUpdate",
        new ApiException(400, "Missing the required parameter 'boardSection' when calling boardSectionsUpdate"));
    }

    // create path and map variables
    String path = "/boards/{board_id}/sections/{section_id}".replaceAll("\\{" + "board_id" + "\\}", apiInvoker.escapeString(boardId.toString())).replaceAll("\\{" + "section_id" + "\\}", apiInvoker.escapeString(sectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ad_account_id", adAccountId));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (BoardSection) ApiInvoker.deserialize(localVarResponse, "", BoardSection.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update board section
   * Update a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   * @param boardId Unique identifier of a board.   * @param sectionId Unique identifier of a board section.   * @param boardSection Update a board section.   * @param adAccountId Unique identifier of an ad account.
  */
  public void boardSectionsUpdate (String boardId, String sectionId, BoardSection boardSection, String adAccountId, final Response.Listener<BoardSection> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = boardSection;

    // verify the required parameter 'boardId' is set
    if (boardId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'boardId' when calling boardSectionsUpdate",
        new ApiException(400, "Missing the required parameter 'boardId' when calling boardSectionsUpdate"));
    }
    // verify the required parameter 'sectionId' is set
    if (sectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sectionId' when calling boardSectionsUpdate",
        new ApiException(400, "Missing the required parameter 'sectionId' when calling boardSectionsUpdate"));
    }
    // verify the required parameter 'boardSection' is set
    if (boardSection == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'boardSection' when calling boardSectionsUpdate",
        new ApiException(400, "Missing the required parameter 'boardSection' when calling boardSectionsUpdate"));
    }

    // create path and map variables
    String path = "/boards/{board_id}/sections/{section_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "board_id" + "\\}", apiInvoker.escapeString(boardId.toString())).replaceAll("\\{" + "section_id" + "\\}", apiInvoker.escapeString(sectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "ad_account_id", adAccountId));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BoardSection) ApiInvoker.deserialize(localVarResponse,  "", BoardSection.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create board
  * Create a board owned by the \&quot;operation user_account\&quot;. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   * @param board Create a board using a single board json object.
   * @param adAccountId Unique identifier of an ad account.
   * @return Board
  */
  public Board boardsCreate (Board board, String adAccountId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = board;
    // verify the required parameter 'board' is set
    if (board == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'board' when calling boardsCreate",
        new ApiException(400, "Missing the required parameter 'board' when calling boardsCreate"));
    }

    // create path and map variables
    String path = "/boards";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ad_account_id", adAccountId));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Board) ApiInvoker.deserialize(localVarResponse, "", Board.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create board
   * Create a board owned by the \&quot;operation user_account\&quot;. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   * @param board Create a board using a single board json object.   * @param adAccountId Unique identifier of an ad account.
  */
  public void boardsCreate (Board board, String adAccountId, final Response.Listener<Board> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = board;

    // verify the required parameter 'board' is set
    if (board == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'board' when calling boardsCreate",
        new ApiException(400, "Missing the required parameter 'board' when calling boardsCreate"));
    }

    // create path and map variables
    String path = "/boards".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "ad_account_id", adAccountId));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Board) ApiInvoker.deserialize(localVarResponse,  "", Board.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete board
  * Delete a board owned by the \&quot;operation user_account\&quot;. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   * @param boardId Unique identifier of a board.
   * @param adAccountId Unique identifier of an ad account.
   * @return void
  */
  public void boardsDelete (String boardId, String adAccountId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'boardId' is set
    if (boardId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'boardId' when calling boardsDelete",
        new ApiException(400, "Missing the required parameter 'boardId' when calling boardsDelete"));
    }

    // create path and map variables
    String path = "/boards/{board_id}".replaceAll("\\{" + "board_id" + "\\}", apiInvoker.escapeString(boardId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ad_account_id", adAccountId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete board
   * Delete a board owned by the \&quot;operation user_account\&quot;. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   * @param boardId Unique identifier of a board.   * @param adAccountId Unique identifier of an ad account.
  */
  public void boardsDelete (String boardId, String adAccountId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'boardId' is set
    if (boardId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'boardId' when calling boardsDelete",
        new ApiException(400, "Missing the required parameter 'boardId' when calling boardsDelete"));
    }

    // create path and map variables
    String path = "/boards/{board_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "board_id" + "\\}", apiInvoker.escapeString(boardId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "ad_account_id", adAccountId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get board
  * Get a board owned by the operation user_account - or a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   * @param boardId Unique identifier of a board.
   * @param adAccountId Unique identifier of an ad account.
   * @return Board
  */
  public Board boardsGet (String boardId, String adAccountId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'boardId' is set
    if (boardId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'boardId' when calling boardsGet",
        new ApiException(400, "Missing the required parameter 'boardId' when calling boardsGet"));
    }

    // create path and map variables
    String path = "/boards/{board_id}".replaceAll("\\{" + "board_id" + "\\}", apiInvoker.escapeString(boardId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ad_account_id", adAccountId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2", "client_credentials" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Board) ApiInvoker.deserialize(localVarResponse, "", Board.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get board
   * Get a board owned by the operation user_account - or a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   * @param boardId Unique identifier of a board.   * @param adAccountId Unique identifier of an ad account.
  */
  public void boardsGet (String boardId, String adAccountId, final Response.Listener<Board> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'boardId' is set
    if (boardId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'boardId' when calling boardsGet",
        new ApiException(400, "Missing the required parameter 'boardId' when calling boardsGet"));
    }

    // create path and map variables
    String path = "/boards/{board_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "board_id" + "\\}", apiInvoker.escapeString(boardId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "ad_account_id", adAccountId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2", "client_credentials" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Board) ApiInvoker.deserialize(localVarResponse,  "", Board.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List boards
  * Get a list of the boards owned by the \&quot;operation user_account\&quot; + group boards where this account is a collaborator Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
   * @param adAccountId Unique identifier of an ad account.
   * @param bookmark Cursor used to fetch the next page of items
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param privacy Privacy setting for a board.
   * @return BoardsList200Response
  */
  public BoardsList200Response boardsList (String adAccountId, String bookmark, Integer pageSize, String privacy) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/boards";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ad_account_id", adAccountId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "privacy", privacy));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2", "client_credentials" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (BoardsList200Response) ApiInvoker.deserialize(localVarResponse, "", BoardsList200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List boards
   * Get a list of the boards owned by the \&quot;operation user_account\&quot; + group boards where this account is a collaborator Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
   * @param adAccountId Unique identifier of an ad account.   * @param bookmark Cursor used to fetch the next page of items   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.   * @param privacy Privacy setting for a board.
  */
  public void boardsList (String adAccountId, String bookmark, Integer pageSize, String privacy, final Response.Listener<BoardsList200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/boards".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "ad_account_id", adAccountId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "privacy", privacy));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2", "client_credentials" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BoardsList200Response) ApiInvoker.deserialize(localVarResponse,  "", BoardsList200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List Pins on board
  * Get a list of the Pins on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   * @param boardId Unique identifier of a board.
   * @param bookmark Cursor used to fetch the next page of items
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param creativeTypes Pin creative types filter. &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; SHOP_THE_PIN has been deprecated. Please use COLLECTION instead.
   * @param adAccountId Unique identifier of an ad account.
   * @param pinMetrics Specify whether to return 90d and lifetime Pin metrics. Total comments and total reactions are only available with lifetime Pin metrics. If Pin was created before &lt;code&gt;2023-03-20&lt;/code&gt; lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then.
   * @return BoardsListPins200Response
  */
  public BoardsListPins200Response boardsListPins (String boardId, String bookmark, Integer pageSize, List<String> creativeTypes, String adAccountId, Boolean pinMetrics) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'boardId' is set
    if (boardId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'boardId' when calling boardsListPins",
        new ApiException(400, "Missing the required parameter 'boardId' when calling boardsListPins"));
    }

    // create path and map variables
    String path = "/boards/{board_id}/pins".replaceAll("\\{" + "board_id" + "\\}", apiInvoker.escapeString(boardId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "creative_types", creativeTypes));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ad_account_id", adAccountId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pin_metrics", pinMetrics));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2", "client_credentials" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (BoardsListPins200Response) ApiInvoker.deserialize(localVarResponse, "", BoardsListPins200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List Pins on board
   * Get a list of the Pins on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   * @param boardId Unique identifier of a board.   * @param bookmark Cursor used to fetch the next page of items   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.   * @param creativeTypes Pin creative types filter. &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; SHOP_THE_PIN has been deprecated. Please use COLLECTION instead.   * @param adAccountId Unique identifier of an ad account.   * @param pinMetrics Specify whether to return 90d and lifetime Pin metrics. Total comments and total reactions are only available with lifetime Pin metrics. If Pin was created before &lt;code&gt;2023-03-20&lt;/code&gt; lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then.
  */
  public void boardsListPins (String boardId, String bookmark, Integer pageSize, List<String> creativeTypes, String adAccountId, Boolean pinMetrics, final Response.Listener<BoardsListPins200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'boardId' is set
    if (boardId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'boardId' when calling boardsListPins",
        new ApiException(400, "Missing the required parameter 'boardId' when calling boardsListPins"));
    }

    // create path and map variables
    String path = "/boards/{board_id}/pins".replaceAll("\\{format\\}","json").replaceAll("\\{" + "board_id" + "\\}", apiInvoker.escapeString(boardId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "creative_types", creativeTypes));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ad_account_id", adAccountId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pin_metrics", pinMetrics));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2", "client_credentials" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BoardsListPins200Response) ApiInvoker.deserialize(localVarResponse,  "", BoardsListPins200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update board
  * Update a board owned by the \&quot;operating user_account\&quot;. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   * @param boardId Unique identifier of a board.
   * @param boardUpdate Update a board.
   * @param adAccountId Unique identifier of an ad account.
   * @return Board
  */
  public Board boardsUpdate (String boardId, BoardUpdate boardUpdate, String adAccountId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = boardUpdate;
    // verify the required parameter 'boardId' is set
    if (boardId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'boardId' when calling boardsUpdate",
        new ApiException(400, "Missing the required parameter 'boardId' when calling boardsUpdate"));
    }
    // verify the required parameter 'boardUpdate' is set
    if (boardUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'boardUpdate' when calling boardsUpdate",
        new ApiException(400, "Missing the required parameter 'boardUpdate' when calling boardsUpdate"));
    }

    // create path and map variables
    String path = "/boards/{board_id}".replaceAll("\\{" + "board_id" + "\\}", apiInvoker.escapeString(boardId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ad_account_id", adAccountId));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Board) ApiInvoker.deserialize(localVarResponse, "", Board.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update board
   * Update a board owned by the \&quot;operating user_account\&quot;. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   * @param boardId Unique identifier of a board.   * @param boardUpdate Update a board.   * @param adAccountId Unique identifier of an ad account.
  */
  public void boardsUpdate (String boardId, BoardUpdate boardUpdate, String adAccountId, final Response.Listener<Board> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = boardUpdate;

    // verify the required parameter 'boardId' is set
    if (boardId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'boardId' when calling boardsUpdate",
        new ApiException(400, "Missing the required parameter 'boardId' when calling boardsUpdate"));
    }
    // verify the required parameter 'boardUpdate' is set
    if (boardUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'boardUpdate' when calling boardsUpdate",
        new ApiException(400, "Missing the required parameter 'boardUpdate' when calling boardsUpdate"));
    }

    // create path and map variables
    String path = "/boards/{board_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "board_id" + "\\}", apiInvoker.escapeString(boardId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "ad_account_id", adAccountId));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Board) ApiInvoker.deserialize(localVarResponse,  "", Board.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
