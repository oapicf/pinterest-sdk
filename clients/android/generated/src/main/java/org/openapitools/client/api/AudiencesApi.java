/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.Audience;
import org.openapitools.client.model.AudienceCreateCustomRequest;
import org.openapitools.client.model.AudienceCreateRequest;
import org.openapitools.client.model.AudienceUpdateRequest;
import org.openapitools.client.model.AudiencesList200Response;
import org.openapitools.client.model.Error;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class AudiencesApi {
  String basePath = "https://api.pinterest.com/v5";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Create audience
  * Create an audience you can use in targeting for specific ad groups. Targeting combines customer information with the ways users interact with Pinterest to help you reach specific groups of users; you can include or exclude specific audience_ids when you create an ad group. &lt;p/&gt; For more, see &lt;a class&#x3D;\&quot;reference external\&quot; href&#x3D;\&quot;https://help.pinterest.com/en/business/article/audience-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Audience targeting&lt;/a&gt;.
   * @param adAccountId Unique identifier of an ad account.
   * @param audienceCreateRequest List of ads to create, size limit [1, 30]
   * @return Audience
  */
  public Audience audiencesCreate (String adAccountId, AudienceCreateRequest audienceCreateRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = audienceCreateRequest;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling audiencesCreate",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling audiencesCreate"));
    }
    // verify the required parameter 'audienceCreateRequest' is set
    if (audienceCreateRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'audienceCreateRequest' when calling audiencesCreate",
        new ApiException(400, "Missing the required parameter 'audienceCreateRequest' when calling audiencesCreate"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/audiences".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Audience) ApiInvoker.deserialize(localVarResponse, "", Audience.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create audience
   * Create an audience you can use in targeting for specific ad groups. Targeting combines customer information with the ways users interact with Pinterest to help you reach specific groups of users; you can include or exclude specific audience_ids when you create an ad group. &lt;p/&gt; For more, see &lt;a class&#x3D;\&quot;reference external\&quot; href&#x3D;\&quot;https://help.pinterest.com/en/business/article/audience-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Audience targeting&lt;/a&gt;.
   * @param adAccountId Unique identifier of an ad account.   * @param audienceCreateRequest List of ads to create, size limit [1, 30]
  */
  public void audiencesCreate (String adAccountId, AudienceCreateRequest audienceCreateRequest, final Response.Listener<Audience> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = audienceCreateRequest;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling audiencesCreate",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling audiencesCreate"));
    }
    // verify the required parameter 'audienceCreateRequest' is set
    if (audienceCreateRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'audienceCreateRequest' when calling audiencesCreate",
        new ApiException(400, "Missing the required parameter 'audienceCreateRequest' when calling audiencesCreate"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/audiences".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Audience) ApiInvoker.deserialize(localVarResponse,  "", Audience.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create custom audience
  * Create a custom audience and find the audiences you want your ads to reach.
   * @param adAccountId Unique identifier of an ad account.
   * @param audienceCreateCustomRequest Custom audience to create.
   * @return Audience
  */
  public Audience audiencesCreateCustom (String adAccountId, AudienceCreateCustomRequest audienceCreateCustomRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = audienceCreateCustomRequest;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling audiencesCreateCustom",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling audiencesCreateCustom"));
    }
    // verify the required parameter 'audienceCreateCustomRequest' is set
    if (audienceCreateCustomRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'audienceCreateCustomRequest' when calling audiencesCreateCustom",
        new ApiException(400, "Missing the required parameter 'audienceCreateCustomRequest' when calling audiencesCreateCustom"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/audiences/custom".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Audience) ApiInvoker.deserialize(localVarResponse, "", Audience.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create custom audience
   * Create a custom audience and find the audiences you want your ads to reach.
   * @param adAccountId Unique identifier of an ad account.   * @param audienceCreateCustomRequest Custom audience to create.
  */
  public void audiencesCreateCustom (String adAccountId, AudienceCreateCustomRequest audienceCreateCustomRequest, final Response.Listener<Audience> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = audienceCreateCustomRequest;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling audiencesCreateCustom",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling audiencesCreateCustom"));
    }
    // verify the required parameter 'audienceCreateCustomRequest' is set
    if (audienceCreateCustomRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'audienceCreateCustomRequest' when calling audiencesCreateCustom",
        new ApiException(400, "Missing the required parameter 'audienceCreateCustomRequest' when calling audiencesCreateCustom"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/audiences/custom".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Audience) ApiInvoker.deserialize(localVarResponse,  "", Audience.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get audience
  * Get a specific audience given the audience ID.
   * @param adAccountId Unique identifier of an ad account.
   * @param audienceId Unique identifier of an audience
   * @return Audience
  */
  public Audience audiencesGet (String adAccountId, String audienceId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling audiencesGet",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling audiencesGet"));
    }
    // verify the required parameter 'audienceId' is set
    if (audienceId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'audienceId' when calling audiencesGet",
        new ApiException(400, "Missing the required parameter 'audienceId' when calling audiencesGet"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/audiences/{audience_id}".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString())).replaceAll("\\{" + "audience_id" + "\\}", apiInvoker.escapeString(audienceId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Audience) ApiInvoker.deserialize(localVarResponse, "", Audience.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get audience
   * Get a specific audience given the audience ID.
   * @param adAccountId Unique identifier of an ad account.   * @param audienceId Unique identifier of an audience
  */
  public void audiencesGet (String adAccountId, String audienceId, final Response.Listener<Audience> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling audiencesGet",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling audiencesGet"));
    }
    // verify the required parameter 'audienceId' is set
    if (audienceId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'audienceId' when calling audiencesGet",
        new ApiException(400, "Missing the required parameter 'audienceId' when calling audiencesGet"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/audiences/{audience_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString())).replaceAll("\\{" + "audience_id" + "\\}", apiInvoker.escapeString(audienceId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Audience) ApiInvoker.deserialize(localVarResponse,  "", Audience.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List audiences
  * Get list of audiences for the ad account.
   * @param adAccountId Unique identifier of an ad account.
   * @param bookmark Cursor used to fetch the next page of items
   * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. For received audiences, it is sorted by sharing event time. Note that higher-value IDs are associated with more-recently added items.
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param ownershipType Filter audiences by ownership type.
   * @return AudiencesList200Response
  */
  public AudiencesList200Response audiencesList (String adAccountId, String bookmark, String order, Integer pageSize, String ownershipType) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling audiencesList",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling audiencesList"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/audiences".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ownership_type", ownershipType));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AudiencesList200Response) ApiInvoker.deserialize(localVarResponse, "", AudiencesList200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List audiences
   * Get list of audiences for the ad account.
   * @param adAccountId Unique identifier of an ad account.   * @param bookmark Cursor used to fetch the next page of items   * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. For received audiences, it is sorted by sharing event time. Note that higher-value IDs are associated with more-recently added items.   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.   * @param ownershipType Filter audiences by ownership type.
  */
  public void audiencesList (String adAccountId, String bookmark, String order, Integer pageSize, String ownershipType, final Response.Listener<AudiencesList200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling audiencesList",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling audiencesList"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/audiences".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ownership_type", ownershipType));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AudiencesList200Response) ApiInvoker.deserialize(localVarResponse,  "", AudiencesList200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update audience
  * Update (edit or remove) an existing targeting audience.
   * @param adAccountId Unique identifier of an ad account.
   * @param audienceId Unique identifier of an audience
   * @param audienceUpdateRequest The audience to be updated.
   * @return Audience
  */
  public Audience audiencesUpdate (String adAccountId, String audienceId, AudienceUpdateRequest audienceUpdateRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = audienceUpdateRequest;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling audiencesUpdate",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling audiencesUpdate"));
    }
    // verify the required parameter 'audienceId' is set
    if (audienceId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'audienceId' when calling audiencesUpdate",
        new ApiException(400, "Missing the required parameter 'audienceId' when calling audiencesUpdate"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/audiences/{audience_id}".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString())).replaceAll("\\{" + "audience_id" + "\\}", apiInvoker.escapeString(audienceId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Audience) ApiInvoker.deserialize(localVarResponse, "", Audience.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update audience
   * Update (edit or remove) an existing targeting audience.
   * @param adAccountId Unique identifier of an ad account.   * @param audienceId Unique identifier of an audience   * @param audienceUpdateRequest The audience to be updated.
  */
  public void audiencesUpdate (String adAccountId, String audienceId, AudienceUpdateRequest audienceUpdateRequest, final Response.Listener<Audience> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = audienceUpdateRequest;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling audiencesUpdate",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling audiencesUpdate"));
    }
    // verify the required parameter 'audienceId' is set
    if (audienceId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'audienceId' when calling audiencesUpdate",
        new ApiException(400, "Missing the required parameter 'audienceId' when calling audiencesUpdate"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/audiences/{audience_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString())).replaceAll("\\{" + "audience_id" + "\\}", apiInvoker.escapeString(audienceId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Audience) ApiInvoker.deserialize(localVarResponse,  "", Audience.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
