/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.BulkDownloadRequest;
import org.openapitools.client.model.BulkDownloadResponse;
import org.openapitools.client.model.BulkUpsertRequest;
import org.openapitools.client.model.BulkUpsertResponse;
import org.openapitools.client.model.BulkUpsertStatusResponse;
import org.openapitools.client.model.Error;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class BulkApi {
  String basePath = "https://api.pinterest.com/v5";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Get advertiser entities in bulk
  * Create an asynchronous report that may include information on campaigns, ad groups, product groups, ads, and/or keywords; can filter by campaigns. Though the entities may be active, archived, or paused, only active entities will return data.
   * @param adAccountId Unique identifier of an ad account.
   * @param bulkDownloadRequest Parameters to get ad entities in bulk
   * @return BulkDownloadResponse
  */
  public BulkDownloadResponse bulkDownloadCreate (String adAccountId, BulkDownloadRequest bulkDownloadRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = bulkDownloadRequest;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling bulkDownloadCreate",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling bulkDownloadCreate"));
    }
    // verify the required parameter 'bulkDownloadRequest' is set
    if (bulkDownloadRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'bulkDownloadRequest' when calling bulkDownloadCreate",
        new ApiException(400, "Missing the required parameter 'bulkDownloadRequest' when calling bulkDownloadCreate"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/bulk/download".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (BulkDownloadResponse) ApiInvoker.deserialize(localVarResponse, "", BulkDownloadResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get advertiser entities in bulk
   * Create an asynchronous report that may include information on campaigns, ad groups, product groups, ads, and/or keywords; can filter by campaigns. Though the entities may be active, archived, or paused, only active entities will return data.
   * @param adAccountId Unique identifier of an ad account.   * @param bulkDownloadRequest Parameters to get ad entities in bulk
  */
  public void bulkDownloadCreate (String adAccountId, BulkDownloadRequest bulkDownloadRequest, final Response.Listener<BulkDownloadResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = bulkDownloadRequest;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling bulkDownloadCreate",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling bulkDownloadCreate"));
    }
    // verify the required parameter 'bulkDownloadRequest' is set
    if (bulkDownloadRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'bulkDownloadRequest' when calling bulkDownloadCreate",
        new ApiException(400, "Missing the required parameter 'bulkDownloadRequest' when calling bulkDownloadCreate"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/bulk/download".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BulkDownloadResponse) ApiInvoker.deserialize(localVarResponse,  "", BulkDownloadResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Download advertiser entities in bulk
  * Get the status of a bulk request by &lt;code&gt;request_id&lt;/code&gt;, along with a download URL that will allow you to download the new or updated entity data (campaigns, ad groups, product groups, ads, or keywords).
   * @param adAccountId Unique identifier of an ad account.
   * @param bulkRequestId Unique identifier of a bulk upsert request.
   * @param includeDetails if set to True then attach the errors/details to all the requests
   * @return BulkUpsertStatusResponse
  */
  public BulkUpsertStatusResponse bulkRequestGet (String adAccountId, String bulkRequestId, Boolean includeDetails) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling bulkRequestGet",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling bulkRequestGet"));
    }
    // verify the required parameter 'bulkRequestId' is set
    if (bulkRequestId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'bulkRequestId' when calling bulkRequestGet",
        new ApiException(400, "Missing the required parameter 'bulkRequestId' when calling bulkRequestGet"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/bulk/{bulk_request_id}".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString())).replaceAll("\\{" + "bulk_request_id" + "\\}", apiInvoker.escapeString(bulkRequestId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "include_details", includeDetails));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (BulkUpsertStatusResponse) ApiInvoker.deserialize(localVarResponse, "", BulkUpsertStatusResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Download advertiser entities in bulk
   * Get the status of a bulk request by &lt;code&gt;request_id&lt;/code&gt;, along with a download URL that will allow you to download the new or updated entity data (campaigns, ad groups, product groups, ads, or keywords).
   * @param adAccountId Unique identifier of an ad account.   * @param bulkRequestId Unique identifier of a bulk upsert request.   * @param includeDetails if set to True then attach the errors/details to all the requests
  */
  public void bulkRequestGet (String adAccountId, String bulkRequestId, Boolean includeDetails, final Response.Listener<BulkUpsertStatusResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling bulkRequestGet",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling bulkRequestGet"));
    }
    // verify the required parameter 'bulkRequestId' is set
    if (bulkRequestId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'bulkRequestId' when calling bulkRequestGet",
        new ApiException(400, "Missing the required parameter 'bulkRequestId' when calling bulkRequestGet"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/bulk/{bulk_request_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString())).replaceAll("\\{" + "bulk_request_id" + "\\}", apiInvoker.escapeString(bulkRequestId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "include_details", includeDetails));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BulkUpsertStatusResponse) ApiInvoker.deserialize(localVarResponse,  "", BulkUpsertStatusResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create/update ad entities in bulk
  * Either create or update any combination of campaigns, ad groups, product groups, ads, or keywords. Note that this request will be processed asynchronously; the response will include a &lt;code&gt;request_id&lt;/code&gt; that can be used to obtain the status of the request.
   * @param adAccountId Unique identifier of an ad account.
   * @param bulkUpsertRequest Parameters to get create/update ad entities in bulk
   * @return BulkUpsertResponse
  */
  public BulkUpsertResponse bulkUpsertCreate (String adAccountId, BulkUpsertRequest bulkUpsertRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = bulkUpsertRequest;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling bulkUpsertCreate",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling bulkUpsertCreate"));
    }
    // verify the required parameter 'bulkUpsertRequest' is set
    if (bulkUpsertRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'bulkUpsertRequest' when calling bulkUpsertCreate",
        new ApiException(400, "Missing the required parameter 'bulkUpsertRequest' when calling bulkUpsertCreate"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/bulk/upsert".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (BulkUpsertResponse) ApiInvoker.deserialize(localVarResponse, "", BulkUpsertResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create/update ad entities in bulk
   * Either create or update any combination of campaigns, ad groups, product groups, ads, or keywords. Note that this request will be processed asynchronously; the response will include a &lt;code&gt;request_id&lt;/code&gt; that can be used to obtain the status of the request.
   * @param adAccountId Unique identifier of an ad account.   * @param bulkUpsertRequest Parameters to get create/update ad entities in bulk
  */
  public void bulkUpsertCreate (String adAccountId, BulkUpsertRequest bulkUpsertRequest, final Response.Listener<BulkUpsertResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = bulkUpsertRequest;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling bulkUpsertCreate",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling bulkUpsertCreate"));
    }
    // verify the required parameter 'bulkUpsertRequest' is set
    if (bulkUpsertRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'bulkUpsertRequest' when calling bulkUpsertCreate",
        new ApiException(400, "Missing the required parameter 'bulkUpsertRequest' when calling bulkUpsertCreate"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/bulk/upsert".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BulkUpsertResponse) ApiInvoker.deserialize(localVarResponse,  "", BulkUpsertResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
