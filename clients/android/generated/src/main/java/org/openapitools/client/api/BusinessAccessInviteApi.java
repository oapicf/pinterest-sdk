/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.AuthRespondInvitesBody;
import org.openapitools.client.model.CancelInvitesBody;
import org.openapitools.client.model.CreateAssetAccessRequestBody;
import org.openapitools.client.model.CreateAssetAccessRequestResponse;
import org.openapitools.client.model.CreateAssetInvitesRequest;
import org.openapitools.client.model.CreateInvitesResultsResponseArray;
import org.openapitools.client.model.CreateMembershipOrPartnershipInvitesBody;
import org.openapitools.client.model.DeleteInvitesResultsResponseArray;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.GetInvites200Response;
import org.openapitools.client.model.InviteType;
import java.util.*;
import org.openapitools.client.model.RespondToInvitesResponseArray;
import org.openapitools.client.model.UpdateInvitesResultsResponseArray;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class BusinessAccessInviteApi {
  String basePath = "https://api.pinterest.com/v5";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Create a request to access an existing partner&#39;s assets.
  * Create a request to access an existing partner&#39;s assets with the specified permissions. The request will be sent to the partner for approval. The assets that can be requested are ad accounts and profiles.
   * @param businessId Unique identifier of the requesting business.
   * @param createAssetAccessRequestBody 
   * @return CreateAssetAccessRequestResponse
  */
  public CreateAssetAccessRequestResponse assetAccessRequestsCreate (String businessId, CreateAssetAccessRequestBody createAssetAccessRequestBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createAssetAccessRequestBody;
    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling assetAccessRequestsCreate",
        new ApiException(400, "Missing the required parameter 'businessId' when calling assetAccessRequestsCreate"));
    }
    // verify the required parameter 'createAssetAccessRequestBody' is set
    if (createAssetAccessRequestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createAssetAccessRequestBody' when calling assetAccessRequestsCreate",
        new ApiException(400, "Missing the required parameter 'createAssetAccessRequestBody' when calling assetAccessRequestsCreate"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/requests/assets/access".replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CreateAssetAccessRequestResponse) ApiInvoker.deserialize(localVarResponse, "", CreateAssetAccessRequestResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a request to access an existing partner&#39;s assets.
   * Create a request to access an existing partner&#39;s assets with the specified permissions. The request will be sent to the partner for approval. The assets that can be requested are ad accounts and profiles.
   * @param businessId Unique identifier of the requesting business.   * @param createAssetAccessRequestBody 
  */
  public void assetAccessRequestsCreate (String businessId, CreateAssetAccessRequestBody createAssetAccessRequestBody, final Response.Listener<CreateAssetAccessRequestResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createAssetAccessRequestBody;

    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling assetAccessRequestsCreate",
        new ApiException(400, "Missing the required parameter 'businessId' when calling assetAccessRequestsCreate"));
    }
    // verify the required parameter 'createAssetAccessRequestBody' is set
    if (createAssetAccessRequestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createAssetAccessRequestBody' when calling assetAccessRequestsCreate",
        new ApiException(400, "Missing the required parameter 'createAssetAccessRequestBody' when calling assetAccessRequestsCreate"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/requests/assets/access".replaceAll("\\{format\\}","json").replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CreateAssetAccessRequestResponse) ApiInvoker.deserialize(localVarResponse,  "", CreateAssetAccessRequestResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Cancel invites/requests
  * Cancel membership/partnership invites and/or requests.
   * @param businessId Business id
   * @param cancelInvitesBody A list with invite ids
   * @return DeleteInvitesResultsResponseArray
  */
  public DeleteInvitesResultsResponseArray cancelInvitesOrRequests (String businessId, CancelInvitesBody cancelInvitesBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = cancelInvitesBody;
    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling cancelInvitesOrRequests",
        new ApiException(400, "Missing the required parameter 'businessId' when calling cancelInvitesOrRequests"));
    }
    // verify the required parameter 'cancelInvitesBody' is set
    if (cancelInvitesBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cancelInvitesBody' when calling cancelInvitesOrRequests",
        new ApiException(400, "Missing the required parameter 'cancelInvitesBody' when calling cancelInvitesOrRequests"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/invites".replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (DeleteInvitesResultsResponseArray) ApiInvoker.deserialize(localVarResponse, "", DeleteInvitesResultsResponseArray.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Cancel invites/requests
   * Cancel membership/partnership invites and/or requests.
   * @param businessId Business id   * @param cancelInvitesBody A list with invite ids
  */
  public void cancelInvitesOrRequests (String businessId, CancelInvitesBody cancelInvitesBody, final Response.Listener<DeleteInvitesResultsResponseArray> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = cancelInvitesBody;

    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling cancelInvitesOrRequests",
        new ApiException(400, "Missing the required parameter 'businessId' when calling cancelInvitesOrRequests"));
    }
    // verify the required parameter 'cancelInvitesBody' is set
    if (cancelInvitesBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cancelInvitesBody' when calling cancelInvitesOrRequests",
        new ApiException(400, "Missing the required parameter 'cancelInvitesBody' when calling cancelInvitesOrRequests"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/invites".replaceAll("\\{format\\}","json").replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DeleteInvitesResultsResponseArray) ApiInvoker.deserialize(localVarResponse,  "", DeleteInvitesResultsResponseArray.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update invite/request with an asset permission
  * Assign asset permissions information to an existing invite/request. Can be used to: - Request access to a partner&#39;s asset. Note: This is only for when no existing partnership exists. If an existing   partnership exists, use \&quot;Create a request to access an existing partner&#39;s assets\&quot; to request access to your   partner&#39;s assets.     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot; - Invite a partner to access your business assets. Note: This is only for when there is no existing partnership.   If there is an existing partnership, use \&quot;Assign/Update partner asset permissions\&quot; to assign a partner access to   new assets.     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot; - Invite a member to access your business assets. Note: This is only for when there is no existing membership.   If there is an existing membership, use \&quot;Assign/Update member asset permissions\&quot; to assign a member access to new   assets.     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;  To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview.
   * @param businessId Unique identifier of the requesting business.
   * @param createAssetInvitesRequest A list of invites/requests together with the asset permissions to be assigned to the invite/request. 
   * @return UpdateInvitesResultsResponseArray
  */
  public UpdateInvitesResultsResponseArray createAssetInvites (String businessId, CreateAssetInvitesRequest createAssetInvitesRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createAssetInvitesRequest;
    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling createAssetInvites",
        new ApiException(400, "Missing the required parameter 'businessId' when calling createAssetInvites"));
    }
    // verify the required parameter 'createAssetInvitesRequest' is set
    if (createAssetInvitesRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createAssetInvitesRequest' when calling createAssetInvites",
        new ApiException(400, "Missing the required parameter 'createAssetInvitesRequest' when calling createAssetInvites"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/invites/assets/access".replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UpdateInvitesResultsResponseArray) ApiInvoker.deserialize(localVarResponse, "", UpdateInvitesResultsResponseArray.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update invite/request with an asset permission
   * Assign asset permissions information to an existing invite/request. Can be used to: - Request access to a partner&#39;s asset. Note: This is only for when no existing partnership exists. If an existing   partnership exists, use \&quot;Create a request to access an existing partner&#39;s assets\&quot; to request access to your   partner&#39;s assets.     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot; - Invite a partner to access your business assets. Note: This is only for when there is no existing partnership.   If there is an existing partnership, use \&quot;Assign/Update partner asset permissions\&quot; to assign a partner access to   new assets.     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot; - Invite a member to access your business assets. Note: This is only for when there is no existing membership.   If there is an existing membership, use \&quot;Assign/Update member asset permissions\&quot; to assign a member access to new   assets.     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;  To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview.
   * @param businessId Unique identifier of the requesting business.   * @param createAssetInvitesRequest A list of invites/requests together with the asset permissions to be assigned to the invite/request. 
  */
  public void createAssetInvites (String businessId, CreateAssetInvitesRequest createAssetInvitesRequest, final Response.Listener<UpdateInvitesResultsResponseArray> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createAssetInvitesRequest;

    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling createAssetInvites",
        new ApiException(400, "Missing the required parameter 'businessId' when calling createAssetInvites"));
    }
    // verify the required parameter 'createAssetInvitesRequest' is set
    if (createAssetInvitesRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createAssetInvitesRequest' when calling createAssetInvites",
        new ApiException(400, "Missing the required parameter 'createAssetInvitesRequest' when calling createAssetInvites"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/invites/assets/access".replaceAll("\\{format\\}","json").replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UpdateInvitesResultsResponseArray) ApiInvoker.deserialize(localVarResponse,  "", UpdateInvitesResultsResponseArray.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create invites or requests
  * Create batch invites or requests. Can create batch invites or requests as described below. - Invite members to join the business. This would required specifying the following:     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;     - business_role&#x3D;\&quot;EMPLOYEE\&quot; OR business_role&#x3D;\&quot;BIZ_ADMIN\&quot; (To learn more about business roles, visit     https://help.pinterest.com/en/business/article/profile-permissions-in-business-access.)     - members - Invite partners to access your business assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners - Request to be a partner so you can access their assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners
   * @param businessId Business id
   * @param createMembershipOrPartnershipInvitesBody An object with the properties: invite_type, partners, members, business_role
   * @return CreateInvitesResultsResponseArray
  */
  public CreateInvitesResultsResponseArray createMembershipOrPartnershipInvites (String businessId, CreateMembershipOrPartnershipInvitesBody createMembershipOrPartnershipInvitesBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createMembershipOrPartnershipInvitesBody;
    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling createMembershipOrPartnershipInvites",
        new ApiException(400, "Missing the required parameter 'businessId' when calling createMembershipOrPartnershipInvites"));
    }
    // verify the required parameter 'createMembershipOrPartnershipInvitesBody' is set
    if (createMembershipOrPartnershipInvitesBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createMembershipOrPartnershipInvitesBody' when calling createMembershipOrPartnershipInvites",
        new ApiException(400, "Missing the required parameter 'createMembershipOrPartnershipInvitesBody' when calling createMembershipOrPartnershipInvites"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/invites".replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CreateInvitesResultsResponseArray) ApiInvoker.deserialize(localVarResponse, "", CreateInvitesResultsResponseArray.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create invites or requests
   * Create batch invites or requests. Can create batch invites or requests as described below. - Invite members to join the business. This would required specifying the following:     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;     - business_role&#x3D;\&quot;EMPLOYEE\&quot; OR business_role&#x3D;\&quot;BIZ_ADMIN\&quot; (To learn more about business roles, visit     https://help.pinterest.com/en/business/article/profile-permissions-in-business-access.)     - members - Invite partners to access your business assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners - Request to be a partner so you can access their assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners
   * @param businessId Business id   * @param createMembershipOrPartnershipInvitesBody An object with the properties: invite_type, partners, members, business_role
  */
  public void createMembershipOrPartnershipInvites (String businessId, CreateMembershipOrPartnershipInvitesBody createMembershipOrPartnershipInvitesBody, final Response.Listener<CreateInvitesResultsResponseArray> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createMembershipOrPartnershipInvitesBody;

    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling createMembershipOrPartnershipInvites",
        new ApiException(400, "Missing the required parameter 'businessId' when calling createMembershipOrPartnershipInvites"));
    }
    // verify the required parameter 'createMembershipOrPartnershipInvitesBody' is set
    if (createMembershipOrPartnershipInvitesBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createMembershipOrPartnershipInvitesBody' when calling createMembershipOrPartnershipInvites",
        new ApiException(400, "Missing the required parameter 'createMembershipOrPartnershipInvitesBody' when calling createMembershipOrPartnershipInvites"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/invites".replaceAll("\\{format\\}","json").replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CreateInvitesResultsResponseArray) ApiInvoker.deserialize(localVarResponse,  "", CreateInvitesResultsResponseArray.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get invites/requests
  * Get the membership/partnership invites and/or requests for the authorized user.
   * @param businessId Unique identifier of the requesting business.
   * @param isMember A boolean field to indicate whether the invite is to create a partnership or a membership.
   * @param inviteStatus A list of invite statuses to filter invites by. Only invites whose status is in the provided statuses will be returned.
   * @param inviteType Invite type to filter invites by. Only invites of the specified type will be returned.
   * @param bookmark Cursor used to fetch the next page of items
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @return GetInvites200Response
  */
  public GetInvites200Response getInvites (String businessId, Boolean isMember, List<String> inviteStatus, InviteType inviteType, String bookmark, Integer pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling getInvites",
        new ApiException(400, "Missing the required parameter 'businessId' when calling getInvites"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/invites".replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "is_member", isMember));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "invite_status", inviteStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "invite_type", inviteType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetInvites200Response) ApiInvoker.deserialize(localVarResponse, "", GetInvites200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get invites/requests
   * Get the membership/partnership invites and/or requests for the authorized user.
   * @param businessId Unique identifier of the requesting business.   * @param isMember A boolean field to indicate whether the invite is to create a partnership or a membership.   * @param inviteStatus A list of invite statuses to filter invites by. Only invites whose status is in the provided statuses will be returned.   * @param inviteType Invite type to filter invites by. Only invites of the specified type will be returned.   * @param bookmark Cursor used to fetch the next page of items   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
  */
  public void getInvites (String businessId, Boolean isMember, List<String> inviteStatus, InviteType inviteType, String bookmark, Integer pageSize, final Response.Listener<GetInvites200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling getInvites",
        new ApiException(400, "Missing the required parameter 'businessId' when calling getInvites"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/invites".replaceAll("\\{format\\}","json").replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "is_member", isMember));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "invite_status", inviteStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "invite_type", inviteType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetInvites200Response) ApiInvoker.deserialize(localVarResponse,  "", GetInvites200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Accept or decline an invite/request
  * Accept or decline invites or requests.
   * @param authRespondInvitesBody 
   * @return RespondToInvitesResponseArray
  */
  public RespondToInvitesResponseArray respondBusinessAccessInvites (AuthRespondInvitesBody authRespondInvitesBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = authRespondInvitesBody;
    // verify the required parameter 'authRespondInvitesBody' is set
    if (authRespondInvitesBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authRespondInvitesBody' when calling respondBusinessAccessInvites",
        new ApiException(400, "Missing the required parameter 'authRespondInvitesBody' when calling respondBusinessAccessInvites"));
    }

    // create path and map variables
    String path = "/businesses/invites";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (RespondToInvitesResponseArray) ApiInvoker.deserialize(localVarResponse, "", RespondToInvitesResponseArray.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Accept or decline an invite/request
   * Accept or decline invites or requests.
   * @param authRespondInvitesBody 
  */
  public void respondBusinessAccessInvites (AuthRespondInvitesBody authRespondInvitesBody, final Response.Listener<RespondToInvitesResponseArray> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = authRespondInvitesBody;

    // verify the required parameter 'authRespondInvitesBody' is set
    if (authRespondInvitesBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authRespondInvitesBody' when calling respondBusinessAccessInvites",
        new ApiException(400, "Missing the required parameter 'authRespondInvitesBody' when calling respondBusinessAccessInvites"));
    }

    // create path and map variables
    String path = "/businesses/invites".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((RespondToInvitesResponseArray) ApiInvoker.deserialize(localVarResponse,  "", RespondToInvitesResponseArray.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
