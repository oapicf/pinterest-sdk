/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.AdAccountsAudiencesSharedAccountsList200Response;
import org.openapitools.client.model.AudienceAccountType;
import org.openapitools.client.model.AudiencesList200Response;
import org.openapitools.client.model.BusinessSharedAudience;
import org.openapitools.client.model.BusinessSharedAudienceResponse;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.SharedAudience;
import org.openapitools.client.model.SharedAudienceResponse;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class AudienceSharingApi {
  String basePath = "https://api.pinterest.com/v5";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * List accounts with access to an audience owned by an ad account
  * List all ad accounts and/or businesses that have access to a specific audience. The audience must be owned by the requesting ad account.
   * @param adAccountId Unique identifier of an ad account.
   * @param audienceId Unique identifier of the audience to use to filter the results.
   * @param accountType Filter accounts by account type.
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param bookmark Cursor used to fetch the next page of items
   * @return AdAccountsAudiencesSharedAccountsList200Response
  */
  public AdAccountsAudiencesSharedAccountsList200Response adAccountsAudiencesSharedAccountsList (String adAccountId, String audienceId, AudienceAccountType accountType, Integer pageSize, String bookmark) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling adAccountsAudiencesSharedAccountsList",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling adAccountsAudiencesSharedAccountsList"));
    }
    // verify the required parameter 'audienceId' is set
    if (audienceId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'audienceId' when calling adAccountsAudiencesSharedAccountsList",
        new ApiException(400, "Missing the required parameter 'audienceId' when calling adAccountsAudiencesSharedAccountsList"));
    }
    // verify the required parameter 'accountType' is set
    if (accountType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountType' when calling adAccountsAudiencesSharedAccountsList",
        new ApiException(400, "Missing the required parameter 'accountType' when calling adAccountsAudiencesSharedAccountsList"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/audiences/shared/accounts".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "audience_id", audienceId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "account_type", accountType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AdAccountsAudiencesSharedAccountsList200Response) ApiInvoker.deserialize(localVarResponse, "", AdAccountsAudiencesSharedAccountsList200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List accounts with access to an audience owned by an ad account
   * List all ad accounts and/or businesses that have access to a specific audience. The audience must be owned by the requesting ad account.
   * @param adAccountId Unique identifier of an ad account.   * @param audienceId Unique identifier of the audience to use to filter the results.   * @param accountType Filter accounts by account type.   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.   * @param bookmark Cursor used to fetch the next page of items
  */
  public void adAccountsAudiencesSharedAccountsList (String adAccountId, String audienceId, AudienceAccountType accountType, Integer pageSize, String bookmark, final Response.Listener<AdAccountsAudiencesSharedAccountsList200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling adAccountsAudiencesSharedAccountsList",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling adAccountsAudiencesSharedAccountsList"));
    }
    // verify the required parameter 'audienceId' is set
    if (audienceId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'audienceId' when calling adAccountsAudiencesSharedAccountsList",
        new ApiException(400, "Missing the required parameter 'audienceId' when calling adAccountsAudiencesSharedAccountsList"));
    }
    // verify the required parameter 'accountType' is set
    if (accountType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountType' when calling adAccountsAudiencesSharedAccountsList",
        new ApiException(400, "Missing the required parameter 'accountType' when calling adAccountsAudiencesSharedAccountsList"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/audiences/shared/accounts".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "audience_id", audienceId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "account_type", accountType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AdAccountsAudiencesSharedAccountsList200Response) ApiInvoker.deserialize(localVarResponse,  "", AdAccountsAudiencesSharedAccountsList200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List accounts with access to an audience owned by a business
  * List all ad accounts and/or businesses that have access to a specific audience. The audience must either be owned by an ad account in the requesting business, or it must have been shared with the requesting business. If the requesting business is not the owner of the audience, only ad accounts owned by the requesting business will be returned.
   * @param businessId Unique identifier of the requesting business.
   * @param audienceId Unique identifier of the audience to use to filter the results.
   * @param accountType Filter accounts by account type.
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param bookmark Cursor used to fetch the next page of items
   * @return AdAccountsAudiencesSharedAccountsList200Response
  */
  public AdAccountsAudiencesSharedAccountsList200Response businessAccountAudiencesSharedAccountsList (String businessId, String audienceId, AudienceAccountType accountType, Integer pageSize, String bookmark) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling businessAccountAudiencesSharedAccountsList",
        new ApiException(400, "Missing the required parameter 'businessId' when calling businessAccountAudiencesSharedAccountsList"));
    }
    // verify the required parameter 'audienceId' is set
    if (audienceId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'audienceId' when calling businessAccountAudiencesSharedAccountsList",
        new ApiException(400, "Missing the required parameter 'audienceId' when calling businessAccountAudiencesSharedAccountsList"));
    }
    // verify the required parameter 'accountType' is set
    if (accountType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountType' when calling businessAccountAudiencesSharedAccountsList",
        new ApiException(400, "Missing the required parameter 'accountType' when calling businessAccountAudiencesSharedAccountsList"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/audiences/shared/accounts".replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "audience_id", audienceId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "account_type", accountType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AdAccountsAudiencesSharedAccountsList200Response) ApiInvoker.deserialize(localVarResponse, "", AdAccountsAudiencesSharedAccountsList200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List accounts with access to an audience owned by a business
   * List all ad accounts and/or businesses that have access to a specific audience. The audience must either be owned by an ad account in the requesting business, or it must have been shared with the requesting business. If the requesting business is not the owner of the audience, only ad accounts owned by the requesting business will be returned.
   * @param businessId Unique identifier of the requesting business.   * @param audienceId Unique identifier of the audience to use to filter the results.   * @param accountType Filter accounts by account type.   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.   * @param bookmark Cursor used to fetch the next page of items
  */
  public void businessAccountAudiencesSharedAccountsList (String businessId, String audienceId, AudienceAccountType accountType, Integer pageSize, String bookmark, final Response.Listener<AdAccountsAudiencesSharedAccountsList200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling businessAccountAudiencesSharedAccountsList",
        new ApiException(400, "Missing the required parameter 'businessId' when calling businessAccountAudiencesSharedAccountsList"));
    }
    // verify the required parameter 'audienceId' is set
    if (audienceId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'audienceId' when calling businessAccountAudiencesSharedAccountsList",
        new ApiException(400, "Missing the required parameter 'audienceId' when calling businessAccountAudiencesSharedAccountsList"));
    }
    // verify the required parameter 'accountType' is set
    if (accountType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountType' when calling businessAccountAudiencesSharedAccountsList",
        new ApiException(400, "Missing the required parameter 'accountType' when calling businessAccountAudiencesSharedAccountsList"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/audiences/shared/accounts".replaceAll("\\{format\\}","json").replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "audience_id", audienceId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "account_type", accountType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AdAccountsAudiencesSharedAccountsList200Response) ApiInvoker.deserialize(localVarResponse,  "", AdAccountsAudiencesSharedAccountsList200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List received audiences for a business
  * Get a list of received audiences for the given business.
   * @param businessId Unique identifier of the requesting business.
   * @param bookmark Cursor used to fetch the next page of items
   * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @return AudiencesList200Response
  */
  public AudiencesList200Response sharedAudiencesForBusinessList (String businessId, String bookmark, String order, Integer pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling sharedAudiencesForBusinessList",
        new ApiException(400, "Missing the required parameter 'businessId' when calling sharedAudiencesForBusinessList"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/audiences".replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AudiencesList200Response) ApiInvoker.deserialize(localVarResponse, "", AudiencesList200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List received audiences for a business
   * Get a list of received audiences for the given business.
   * @param businessId Unique identifier of the requesting business.   * @param bookmark Cursor used to fetch the next page of items   * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
  */
  public void sharedAudiencesForBusinessList (String businessId, String bookmark, String order, Integer pageSize, final Response.Listener<AudiencesList200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling sharedAudiencesForBusinessList",
        new ApiException(400, "Missing the required parameter 'businessId' when calling sharedAudiencesForBusinessList"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/audiences".replaceAll("\\{format\\}","json").replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AudiencesList200Response) ApiInvoker.deserialize(localVarResponse,  "", AudiencesList200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update audience sharing between ad accounts
  * From an ad account, share a specific audience with another ad account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient ad account(s) must be in the same &lt;a href&#x3D;&#39;https://help.pinterest.com/en/business/article/create-and-manage-accounts&#39;&gt;Pinterest Business Hierarchy&lt;/a&gt; as the business owner of the ad account.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
   * @param adAccountId Unique identifier of an ad account.
   * @param sharedAudience 
   * @return SharedAudienceResponse
  */
  public SharedAudienceResponse updateAdAccountToAdAccountSharedAudience (String adAccountId, SharedAudience sharedAudience) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = sharedAudience;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling updateAdAccountToAdAccountSharedAudience",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling updateAdAccountToAdAccountSharedAudience"));
    }
    // verify the required parameter 'sharedAudience' is set
    if (sharedAudience == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sharedAudience' when calling updateAdAccountToAdAccountSharedAudience",
        new ApiException(400, "Missing the required parameter 'sharedAudience' when calling updateAdAccountToAdAccountSharedAudience"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/audiences/ad_accounts/shared".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SharedAudienceResponse) ApiInvoker.deserialize(localVarResponse, "", SharedAudienceResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update audience sharing between ad accounts
   * From an ad account, share a specific audience with another ad account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient ad account(s) must be in the same &lt;a href&#x3D;&#39;https://help.pinterest.com/en/business/article/create-and-manage-accounts&#39;&gt;Pinterest Business Hierarchy&lt;/a&gt; as the business owner of the ad account.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
   * @param adAccountId Unique identifier of an ad account.   * @param sharedAudience 
  */
  public void updateAdAccountToAdAccountSharedAudience (String adAccountId, SharedAudience sharedAudience, final Response.Listener<SharedAudienceResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = sharedAudience;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling updateAdAccountToAdAccountSharedAudience",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling updateAdAccountToAdAccountSharedAudience"));
    }
    // verify the required parameter 'sharedAudience' is set
    if (sharedAudience == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sharedAudience' when calling updateAdAccountToAdAccountSharedAudience",
        new ApiException(400, "Missing the required parameter 'sharedAudience' when calling updateAdAccountToAdAccountSharedAudience"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/audiences/ad_accounts/shared".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SharedAudienceResponse) ApiInvoker.deserialize(localVarResponse,  "", SharedAudienceResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update audience sharing from an ad account to businesses
  * From an ad account, share a specific audience with a business account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient business account must be in the same business hierarchy as the business owner of the ad account.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
   * @param adAccountId Unique identifier of an ad account.
   * @param businessSharedAudience 
   * @return BusinessSharedAudienceResponse
  */
  public BusinessSharedAudienceResponse updateAdAccountToBusinessSharedAudience (String adAccountId, BusinessSharedAudience businessSharedAudience) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = businessSharedAudience;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling updateAdAccountToBusinessSharedAudience",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling updateAdAccountToBusinessSharedAudience"));
    }
    // verify the required parameter 'businessSharedAudience' is set
    if (businessSharedAudience == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessSharedAudience' when calling updateAdAccountToBusinessSharedAudience",
        new ApiException(400, "Missing the required parameter 'businessSharedAudience' when calling updateAdAccountToBusinessSharedAudience"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/audiences/businesses/shared".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (BusinessSharedAudienceResponse) ApiInvoker.deserialize(localVarResponse, "", BusinessSharedAudienceResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update audience sharing from an ad account to businesses
   * From an ad account, share a specific audience with a business account, or revoke access to a previously shared audience. Only the audience owner account can share the audience. The recipient business account must be in the same business hierarchy as the business owner of the ad account.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
   * @param adAccountId Unique identifier of an ad account.   * @param businessSharedAudience 
  */
  public void updateAdAccountToBusinessSharedAudience (String adAccountId, BusinessSharedAudience businessSharedAudience, final Response.Listener<BusinessSharedAudienceResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = businessSharedAudience;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling updateAdAccountToBusinessSharedAudience",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling updateAdAccountToBusinessSharedAudience"));
    }
    // verify the required parameter 'businessSharedAudience' is set
    if (businessSharedAudience == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessSharedAudience' when calling updateAdAccountToBusinessSharedAudience",
        new ApiException(400, "Missing the required parameter 'businessSharedAudience' when calling updateAdAccountToBusinessSharedAudience"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/audiences/businesses/shared".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BusinessSharedAudienceResponse) ApiInvoker.deserialize(localVarResponse,  "", BusinessSharedAudienceResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update audience sharing from a business to ad accounts
  * From a business, share a specific audience with other ad account(s), or revoke access to a previously shared audience. &lt;ul&gt; &lt;li&gt;If the business is the owner of the audience, it can share with any ad account within the same business hierarchy.&lt;/li&gt; &lt;li&gt;If the business is the recipient of the audience, it can share with any of its owned ad accounts.&lt;/li&gt; &lt;/ul&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
   * @param businessId Unique identifier of the requesting business.
   * @param sharedAudience 
   * @return SharedAudienceResponse
  */
  public SharedAudienceResponse updateBusinessToAdAccountSharedAudience (String businessId, SharedAudience sharedAudience) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = sharedAudience;
    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling updateBusinessToAdAccountSharedAudience",
        new ApiException(400, "Missing the required parameter 'businessId' when calling updateBusinessToAdAccountSharedAudience"));
    }
    // verify the required parameter 'sharedAudience' is set
    if (sharedAudience == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sharedAudience' when calling updateBusinessToAdAccountSharedAudience",
        new ApiException(400, "Missing the required parameter 'sharedAudience' when calling updateBusinessToAdAccountSharedAudience"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/audiences/ad_accounts/shared".replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SharedAudienceResponse) ApiInvoker.deserialize(localVarResponse, "", SharedAudienceResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update audience sharing from a business to ad accounts
   * From a business, share a specific audience with other ad account(s), or revoke access to a previously shared audience. &lt;ul&gt; &lt;li&gt;If the business is the owner of the audience, it can share with any ad account within the same business hierarchy.&lt;/li&gt; &lt;li&gt;If the business is the recipient of the audience, it can share with any of its owned ad accounts.&lt;/li&gt; &lt;/ul&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
   * @param businessId Unique identifier of the requesting business.   * @param sharedAudience 
  */
  public void updateBusinessToAdAccountSharedAudience (String businessId, SharedAudience sharedAudience, final Response.Listener<SharedAudienceResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = sharedAudience;

    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling updateBusinessToAdAccountSharedAudience",
        new ApiException(400, "Missing the required parameter 'businessId' when calling updateBusinessToAdAccountSharedAudience"));
    }
    // verify the required parameter 'sharedAudience' is set
    if (sharedAudience == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sharedAudience' when calling updateBusinessToAdAccountSharedAudience",
        new ApiException(400, "Missing the required parameter 'sharedAudience' when calling updateBusinessToAdAccountSharedAudience"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/audiences/ad_accounts/shared".replaceAll("\\{format\\}","json").replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SharedAudienceResponse) ApiInvoker.deserialize(localVarResponse,  "", SharedAudienceResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update audience sharing between businesses
  * From a business, share a specific audience with another business account, or revoke access to a previously shared audience. Only the audience owner can share the audience with other businesses, and the recipient business must be within the same business hierarchy.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
   * @param businessId Unique identifier of the requesting business.
   * @param businessSharedAudience 
   * @return BusinessSharedAudienceResponse
  */
  public BusinessSharedAudienceResponse updateBusinessToBusinessSharedAudience (String businessId, BusinessSharedAudience businessSharedAudience) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = businessSharedAudience;
    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling updateBusinessToBusinessSharedAudience",
        new ApiException(400, "Missing the required parameter 'businessId' when calling updateBusinessToBusinessSharedAudience"));
    }
    // verify the required parameter 'businessSharedAudience' is set
    if (businessSharedAudience == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessSharedAudience' when calling updateBusinessToBusinessSharedAudience",
        new ApiException(400, "Missing the required parameter 'businessSharedAudience' when calling updateBusinessToBusinessSharedAudience"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/audiences/businesses/shared".replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (BusinessSharedAudienceResponse) ApiInvoker.deserialize(localVarResponse, "", BusinessSharedAudienceResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update audience sharing between businesses
   * From a business, share a specific audience with another business account, or revoke access to a previously shared audience. Only the audience owner can share the audience with other businesses, and the recipient business must be within the same business hierarchy.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
   * @param businessId Unique identifier of the requesting business.   * @param businessSharedAudience 
  */
  public void updateBusinessToBusinessSharedAudience (String businessId, BusinessSharedAudience businessSharedAudience, final Response.Listener<BusinessSharedAudienceResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = businessSharedAudience;

    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling updateBusinessToBusinessSharedAudience",
        new ApiException(400, "Missing the required parameter 'businessId' when calling updateBusinessToBusinessSharedAudience"));
    }
    // verify the required parameter 'businessSharedAudience' is set
    if (businessSharedAudience == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessSharedAudience' when calling updateBusinessToBusinessSharedAudience",
        new ApiException(400, "Missing the required parameter 'businessSharedAudience' when calling updateBusinessToBusinessSharedAudience"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/audiences/businesses/shared".replaceAll("\\{format\\}","json").replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BusinessSharedAudienceResponse) ApiInvoker.deserialize(localVarResponse,  "", BusinessSharedAudienceResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
