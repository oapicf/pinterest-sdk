/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.AdsCreditRedeemRequest;
import org.openapitools.client.model.AdsCreditRedeemResponse;
import org.openapitools.client.model.AdsCreditsDiscountsGet200Response;
import org.openapitools.client.model.BillingProfilesGet200Response;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.SSIOAccountResponse;
import org.openapitools.client.model.SSIOCreateInsertionOrderRequest;
import org.openapitools.client.model.SSIOCreateInsertionOrderResponse;
import org.openapitools.client.model.SSIOEditInsertionOrderRequest;
import org.openapitools.client.model.SSIOEditInsertionOrderResponse;
import org.openapitools.client.model.SSIOInsertionOrderStatusResponse;
import org.openapitools.client.model.SsioInsertionOrdersStatusGetByAdAccount200Response;
import org.openapitools.client.model.SsioOrderLinesGetByAdAccount200Response;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class BillingApi {
  String basePath = "https://api.pinterest.com/v5";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Redeem ad credits
  * Redeem ads credit on behalf of the ad account id and apply it towards billing.  &lt;strong&gt;This endpoint might not be available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;
   * @param adAccountId Unique identifier of an ad account.
   * @param adsCreditRedeemRequest Redeem ad credits request.
   * @return AdsCreditRedeemResponse
  */
  public AdsCreditRedeemResponse adsCreditRedeem (String adAccountId, AdsCreditRedeemRequest adsCreditRedeemRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = adsCreditRedeemRequest;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling adsCreditRedeem",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling adsCreditRedeem"));
    }
    // verify the required parameter 'adsCreditRedeemRequest' is set
    if (adsCreditRedeemRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adsCreditRedeemRequest' when calling adsCreditRedeem",
        new ApiException(400, "Missing the required parameter 'adsCreditRedeemRequest' when calling adsCreditRedeem"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/ads_credit/redeem".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AdsCreditRedeemResponse) ApiInvoker.deserialize(localVarResponse, "", AdsCreditRedeemResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Redeem ad credits
   * Redeem ads credit on behalf of the ad account id and apply it towards billing.  &lt;strong&gt;This endpoint might not be available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;
   * @param adAccountId Unique identifier of an ad account.   * @param adsCreditRedeemRequest Redeem ad credits request.
  */
  public void adsCreditRedeem (String adAccountId, AdsCreditRedeemRequest adsCreditRedeemRequest, final Response.Listener<AdsCreditRedeemResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = adsCreditRedeemRequest;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling adsCreditRedeem",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling adsCreditRedeem"));
    }
    // verify the required parameter 'adsCreditRedeemRequest' is set
    if (adsCreditRedeemRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adsCreditRedeemRequest' when calling adsCreditRedeem",
        new ApiException(400, "Missing the required parameter 'adsCreditRedeemRequest' when calling adsCreditRedeem"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/ads_credit/redeem".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AdsCreditRedeemResponse) ApiInvoker.deserialize(localVarResponse,  "", AdsCreditRedeemResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get ads credit discounts
  * Returns the list of discounts applied to the account.  &lt;strong&gt;This endpoint might not be available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;
   * @param adAccountId Unique identifier of an ad account.
   * @param bookmark Cursor used to fetch the next page of items
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @return AdsCreditsDiscountsGet200Response
  */
  public AdsCreditsDiscountsGet200Response adsCreditsDiscountsGet (String adAccountId, String bookmark, Integer pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling adsCreditsDiscountsGet",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling adsCreditsDiscountsGet"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/ads_credit/discounts".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AdsCreditsDiscountsGet200Response) ApiInvoker.deserialize(localVarResponse, "", AdsCreditsDiscountsGet200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get ads credit discounts
   * Returns the list of discounts applied to the account.  &lt;strong&gt;This endpoint might not be available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;
   * @param adAccountId Unique identifier of an ad account.   * @param bookmark Cursor used to fetch the next page of items   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
  */
  public void adsCreditsDiscountsGet (String adAccountId, String bookmark, Integer pageSize, final Response.Listener<AdsCreditsDiscountsGet200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling adsCreditsDiscountsGet",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling adsCreditsDiscountsGet"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/ads_credit/discounts".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AdsCreditsDiscountsGet200Response) ApiInvoker.deserialize(localVarResponse,  "", AdsCreditsDiscountsGet200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get billing profiles
  * Get billing profiles in the advertiser account.  &lt;strong&gt;This endpoint might not be available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;
   * @param adAccountId Unique identifier of an ad account.
   * @param isActive Return active billing profiles, if false return all billing profiles.
   * @param bookmark Cursor used to fetch the next page of items
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @return BillingProfilesGet200Response
  */
  public BillingProfilesGet200Response billingProfilesGet (String adAccountId, Boolean isActive, String bookmark, Integer pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling billingProfilesGet",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling billingProfilesGet"));
    }
    // verify the required parameter 'isActive' is set
    if (isActive == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'isActive' when calling billingProfilesGet",
        new ApiException(400, "Missing the required parameter 'isActive' when calling billingProfilesGet"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/billing_profiles".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "is_active", isActive));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (BillingProfilesGet200Response) ApiInvoker.deserialize(localVarResponse, "", BillingProfilesGet200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get billing profiles
   * Get billing profiles in the advertiser account.  &lt;strong&gt;This endpoint might not be available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;
   * @param adAccountId Unique identifier of an ad account.   * @param isActive Return active billing profiles, if false return all billing profiles.   * @param bookmark Cursor used to fetch the next page of items   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
  */
  public void billingProfilesGet (String adAccountId, Boolean isActive, String bookmark, Integer pageSize, final Response.Listener<BillingProfilesGet200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling billingProfilesGet",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling billingProfilesGet"));
    }
    // verify the required parameter 'isActive' is set
    if (isActive == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'isActive' when calling billingProfilesGet",
        new ApiException(400, "Missing the required parameter 'isActive' when calling billingProfilesGet"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/billing_profiles".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "is_active", isActive));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BillingProfilesGet200Response) ApiInvoker.deserialize(localVarResponse,  "", BillingProfilesGet200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Salesforce account details including bill-to information.
  * Get Salesforce account details including bill-to information to be used in insertion orders process for &lt;code&gt;ad_account_id&lt;/code&gt;. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Finance, Campaign.
   * @param adAccountId Unique identifier of an ad account.
   * @return SSIOAccountResponse
  */
  public SSIOAccountResponse ssioAccountsGet (String adAccountId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling ssioAccountsGet",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling ssioAccountsGet"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/ssio/accounts".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SSIOAccountResponse) ApiInvoker.deserialize(localVarResponse, "", SSIOAccountResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Salesforce account details including bill-to information.
   * Get Salesforce account details including bill-to information to be used in insertion orders process for &lt;code&gt;ad_account_id&lt;/code&gt;. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Finance, Campaign.
   * @param adAccountId Unique identifier of an ad account.
  */
  public void ssioAccountsGet (String adAccountId, final Response.Listener<SSIOAccountResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling ssioAccountsGet",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling ssioAccountsGet"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/ssio/accounts".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SSIOAccountResponse) ApiInvoker.deserialize(localVarResponse,  "", SSIOAccountResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create insertion order through SSIO.
  * Create insertion order through SSIO for &lt;code&gt;ad_account_id&lt;/code&gt;. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Finance, Campaign.
   * @param adAccountId Unique identifier of an ad account.
   * @param sSIOCreateInsertionOrderRequest Order line to create.
   * @return SSIOCreateInsertionOrderResponse
  */
  public SSIOCreateInsertionOrderResponse ssioInsertionOrderCreate (String adAccountId, SSIOCreateInsertionOrderRequest sSIOCreateInsertionOrderRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = sSIOCreateInsertionOrderRequest;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling ssioInsertionOrderCreate",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling ssioInsertionOrderCreate"));
    }
    // verify the required parameter 'sSIOCreateInsertionOrderRequest' is set
    if (sSIOCreateInsertionOrderRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sSIOCreateInsertionOrderRequest' when calling ssioInsertionOrderCreate",
        new ApiException(400, "Missing the required parameter 'sSIOCreateInsertionOrderRequest' when calling ssioInsertionOrderCreate"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/ssio/insertion_orders".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SSIOCreateInsertionOrderResponse) ApiInvoker.deserialize(localVarResponse, "", SSIOCreateInsertionOrderResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create insertion order through SSIO.
   * Create insertion order through SSIO for &lt;code&gt;ad_account_id&lt;/code&gt;. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Finance, Campaign.
   * @param adAccountId Unique identifier of an ad account.   * @param sSIOCreateInsertionOrderRequest Order line to create.
  */
  public void ssioInsertionOrderCreate (String adAccountId, SSIOCreateInsertionOrderRequest sSIOCreateInsertionOrderRequest, final Response.Listener<SSIOCreateInsertionOrderResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = sSIOCreateInsertionOrderRequest;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling ssioInsertionOrderCreate",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling ssioInsertionOrderCreate"));
    }
    // verify the required parameter 'sSIOCreateInsertionOrderRequest' is set
    if (sSIOCreateInsertionOrderRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sSIOCreateInsertionOrderRequest' when calling ssioInsertionOrderCreate",
        new ApiException(400, "Missing the required parameter 'sSIOCreateInsertionOrderRequest' when calling ssioInsertionOrderCreate"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/ssio/insertion_orders".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SSIOCreateInsertionOrderResponse) ApiInvoker.deserialize(localVarResponse,  "", SSIOCreateInsertionOrderResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Edit insertion order through SSIO.
  * Edit insertion order through SSIO for &lt;code&gt;ad_account_id&lt;/code&gt;. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Finance, Campaign.
   * @param adAccountId Unique identifier of an ad account.
   * @param sSIOEditInsertionOrderRequest Order line to create.
   * @return SSIOEditInsertionOrderResponse
  */
  public SSIOEditInsertionOrderResponse ssioInsertionOrderEdit (String adAccountId, SSIOEditInsertionOrderRequest sSIOEditInsertionOrderRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = sSIOEditInsertionOrderRequest;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling ssioInsertionOrderEdit",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling ssioInsertionOrderEdit"));
    }
    // verify the required parameter 'sSIOEditInsertionOrderRequest' is set
    if (sSIOEditInsertionOrderRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sSIOEditInsertionOrderRequest' when calling ssioInsertionOrderEdit",
        new ApiException(400, "Missing the required parameter 'sSIOEditInsertionOrderRequest' when calling ssioInsertionOrderEdit"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/ssio/insertion_orders".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SSIOEditInsertionOrderResponse) ApiInvoker.deserialize(localVarResponse, "", SSIOEditInsertionOrderResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Edit insertion order through SSIO.
   * Edit insertion order through SSIO for &lt;code&gt;ad_account_id&lt;/code&gt;. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Finance, Campaign.
   * @param adAccountId Unique identifier of an ad account.   * @param sSIOEditInsertionOrderRequest Order line to create.
  */
  public void ssioInsertionOrderEdit (String adAccountId, SSIOEditInsertionOrderRequest sSIOEditInsertionOrderRequest, final Response.Listener<SSIOEditInsertionOrderResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = sSIOEditInsertionOrderRequest;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling ssioInsertionOrderEdit",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling ssioInsertionOrderEdit"));
    }
    // verify the required parameter 'sSIOEditInsertionOrderRequest' is set
    if (sSIOEditInsertionOrderRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sSIOEditInsertionOrderRequest' when calling ssioInsertionOrderEdit",
        new ApiException(400, "Missing the required parameter 'sSIOEditInsertionOrderRequest' when calling ssioInsertionOrderEdit"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/ssio/insertion_orders".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SSIOEditInsertionOrderResponse) ApiInvoker.deserialize(localVarResponse,  "", SSIOEditInsertionOrderResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get insertion order status by ad account id.
  * Get insertion order status for account id &lt;code&gt;ad_account_id&lt;/code&gt;. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Finance, Campaign.
   * @param adAccountId Unique identifier of an ad account.
   * @param bookmark Cursor used to fetch the next page of items
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @return SsioInsertionOrdersStatusGetByAdAccount200Response
  */
  public SsioInsertionOrdersStatusGetByAdAccount200Response ssioInsertionOrdersStatusGetByAdAccount (String adAccountId, String bookmark, Integer pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling ssioInsertionOrdersStatusGetByAdAccount",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling ssioInsertionOrdersStatusGetByAdAccount"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/ssio/insertion_orders/status".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SsioInsertionOrdersStatusGetByAdAccount200Response) ApiInvoker.deserialize(localVarResponse, "", SsioInsertionOrdersStatusGetByAdAccount200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get insertion order status by ad account id.
   * Get insertion order status for account id &lt;code&gt;ad_account_id&lt;/code&gt;. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Finance, Campaign.
   * @param adAccountId Unique identifier of an ad account.   * @param bookmark Cursor used to fetch the next page of items   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
  */
  public void ssioInsertionOrdersStatusGetByAdAccount (String adAccountId, String bookmark, Integer pageSize, final Response.Listener<SsioInsertionOrdersStatusGetByAdAccount200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling ssioInsertionOrdersStatusGetByAdAccount",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling ssioInsertionOrdersStatusGetByAdAccount"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/ssio/insertion_orders/status".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SsioInsertionOrdersStatusGetByAdAccount200Response) ApiInvoker.deserialize(localVarResponse,  "", SsioInsertionOrdersStatusGetByAdAccount200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get insertion order status by pin order id.
  * Get insertion order status for pin order id &lt;code&gt;pin_order_id&lt;/code&gt;. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Finance, Campaign.
   * @param adAccountId Unique identifier of an ad account.
   * @param pinOrderId The pin order id associated with the ssio insertion order
   * @return SSIOInsertionOrderStatusResponse
  */
  public SSIOInsertionOrderStatusResponse ssioInsertionOrdersStatusGetByPinOrderId (String adAccountId, String pinOrderId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling ssioInsertionOrdersStatusGetByPinOrderId",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling ssioInsertionOrdersStatusGetByPinOrderId"));
    }
    // verify the required parameter 'pinOrderId' is set
    if (pinOrderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pinOrderId' when calling ssioInsertionOrdersStatusGetByPinOrderId",
        new ApiException(400, "Missing the required parameter 'pinOrderId' when calling ssioInsertionOrdersStatusGetByPinOrderId"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/ssio/insertion_orders/{pin_order_id}/status".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString())).replaceAll("\\{" + "pin_order_id" + "\\}", apiInvoker.escapeString(pinOrderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SSIOInsertionOrderStatusResponse) ApiInvoker.deserialize(localVarResponse, "", SSIOInsertionOrderStatusResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get insertion order status by pin order id.
   * Get insertion order status for pin order id &lt;code&gt;pin_order_id&lt;/code&gt;. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Finance, Campaign.
   * @param adAccountId Unique identifier of an ad account.   * @param pinOrderId The pin order id associated with the ssio insertion order
  */
  public void ssioInsertionOrdersStatusGetByPinOrderId (String adAccountId, String pinOrderId, final Response.Listener<SSIOInsertionOrderStatusResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling ssioInsertionOrdersStatusGetByPinOrderId",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling ssioInsertionOrdersStatusGetByPinOrderId"));
    }
    // verify the required parameter 'pinOrderId' is set
    if (pinOrderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pinOrderId' when calling ssioInsertionOrdersStatusGetByPinOrderId",
        new ApiException(400, "Missing the required parameter 'pinOrderId' when calling ssioInsertionOrdersStatusGetByPinOrderId"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/ssio/insertion_orders/{pin_order_id}/status".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString())).replaceAll("\\{" + "pin_order_id" + "\\}", apiInvoker.escapeString(pinOrderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SSIOInsertionOrderStatusResponse) ApiInvoker.deserialize(localVarResponse,  "", SSIOInsertionOrderStatusResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Salesforce order lines by ad account id.
  * Get Salesforce order lines for account id &lt;code&gt;ad_account_id&lt;/code&gt;. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Finance, Campaign.
   * @param adAccountId Unique identifier of an ad account.
   * @param bookmark Cursor used to fetch the next page of items
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param pinOrderId The pin order id associated with the ssio insertino order
   * @return SsioOrderLinesGetByAdAccount200Response
  */
  public SsioOrderLinesGetByAdAccount200Response ssioOrderLinesGetByAdAccount (String adAccountId, String bookmark, Integer pageSize, String pinOrderId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling ssioOrderLinesGetByAdAccount",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling ssioOrderLinesGetByAdAccount"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/ssio/order_lines".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pin_order_id", pinOrderId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SsioOrderLinesGetByAdAccount200Response) ApiInvoker.deserialize(localVarResponse, "", SsioOrderLinesGetByAdAccount200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Salesforce order lines by ad account id.
   * Get Salesforce order lines for account id &lt;code&gt;ad_account_id&lt;/code&gt;. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Finance, Campaign.
   * @param adAccountId Unique identifier of an ad account.   * @param bookmark Cursor used to fetch the next page of items   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.   * @param pinOrderId The pin order id associated with the ssio insertino order
  */
  public void ssioOrderLinesGetByAdAccount (String adAccountId, String bookmark, Integer pageSize, String pinOrderId, final Response.Listener<SsioOrderLinesGetByAdAccount200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling ssioOrderLinesGetByAdAccount",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling ssioOrderLinesGetByAdAccount"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/ssio/order_lines".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pin_order_id", pinOrderId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SsioOrderLinesGetByAdAccount200Response) ApiInvoker.deserialize(localVarResponse,  "", SsioOrderLinesGetByAdAccount200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
