/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import java.util.Date;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Granularity;
import java.util.*;
import org.openapitools.client.model.ProductGroupAnalyticsResponseInner;
import org.openapitools.client.model.ProductGroupPromotionCreateRequest;
import org.openapitools.client.model.ProductGroupPromotionResponse;
import org.openapitools.client.model.ProductGroupPromotionUpdateRequest;
import org.openapitools.client.model.ProductGroupPromotionsList200Response;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ProductGroupPromotionsApi {
  String basePath = "https://api.pinterest.com/v5";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Create product group promotions
  * Add one or more product groups from your catalog to an existing ad group. (Product groups added to an ad group are a &#39;product group promotion.&#39;)
   * @param adAccountId Unique identifier of an ad account.
   * @param productGroupPromotionCreateRequest List of Product Group Promotions to create, size limit [1, 30].
   * @return ProductGroupPromotionResponse
  */
  public ProductGroupPromotionResponse productGroupPromotionsCreate (String adAccountId, ProductGroupPromotionCreateRequest productGroupPromotionCreateRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productGroupPromotionCreateRequest;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling productGroupPromotionsCreate",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling productGroupPromotionsCreate"));
    }
    // verify the required parameter 'productGroupPromotionCreateRequest' is set
    if (productGroupPromotionCreateRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productGroupPromotionCreateRequest' when calling productGroupPromotionsCreate",
        new ApiException(400, "Missing the required parameter 'productGroupPromotionCreateRequest' when calling productGroupPromotionsCreate"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/product_group_promotions".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductGroupPromotionResponse) ApiInvoker.deserialize(localVarResponse, "", ProductGroupPromotionResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create product group promotions
   * Add one or more product groups from your catalog to an existing ad group. (Product groups added to an ad group are a &#39;product group promotion.&#39;)
   * @param adAccountId Unique identifier of an ad account.   * @param productGroupPromotionCreateRequest List of Product Group Promotions to create, size limit [1, 30].
  */
  public void productGroupPromotionsCreate (String adAccountId, ProductGroupPromotionCreateRequest productGroupPromotionCreateRequest, final Response.Listener<ProductGroupPromotionResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productGroupPromotionCreateRequest;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling productGroupPromotionsCreate",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling productGroupPromotionsCreate"));
    }
    // verify the required parameter 'productGroupPromotionCreateRequest' is set
    if (productGroupPromotionCreateRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productGroupPromotionCreateRequest' when calling productGroupPromotionsCreate",
        new ApiException(400, "Missing the required parameter 'productGroupPromotionCreateRequest' when calling productGroupPromotionsCreate"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/product_group_promotions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductGroupPromotionResponse) ApiInvoker.deserialize(localVarResponse,  "", ProductGroupPromotionResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get a product group promotion by id
  * Get a product group promotion by id
   * @param adAccountId Unique identifier of an ad account.
   * @param productGroupPromotionId Unique identifier of a product group promotion
   * @return ProductGroupPromotionResponse
  */
  public ProductGroupPromotionResponse productGroupPromotionsGet (String adAccountId, String productGroupPromotionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling productGroupPromotionsGet",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling productGroupPromotionsGet"));
    }
    // verify the required parameter 'productGroupPromotionId' is set
    if (productGroupPromotionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productGroupPromotionId' when calling productGroupPromotionsGet",
        new ApiException(400, "Missing the required parameter 'productGroupPromotionId' when calling productGroupPromotionsGet"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/product_group_promotions/{product_group_promotion_id}".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString())).replaceAll("\\{" + "product_group_promotion_id" + "\\}", apiInvoker.escapeString(productGroupPromotionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductGroupPromotionResponse) ApiInvoker.deserialize(localVarResponse, "", ProductGroupPromotionResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get a product group promotion by id
   * Get a product group promotion by id
   * @param adAccountId Unique identifier of an ad account.   * @param productGroupPromotionId Unique identifier of a product group promotion
  */
  public void productGroupPromotionsGet (String adAccountId, String productGroupPromotionId, final Response.Listener<ProductGroupPromotionResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling productGroupPromotionsGet",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling productGroupPromotionsGet"));
    }
    // verify the required parameter 'productGroupPromotionId' is set
    if (productGroupPromotionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productGroupPromotionId' when calling productGroupPromotionsGet",
        new ApiException(400, "Missing the required parameter 'productGroupPromotionId' when calling productGroupPromotionsGet"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/product_group_promotions/{product_group_promotion_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString())).replaceAll("\\{" + "product_group_promotion_id" + "\\}", apiInvoker.escapeString(productGroupPromotionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductGroupPromotionResponse) ApiInvoker.deserialize(localVarResponse,  "", ProductGroupPromotionResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get product group promotions
  * List existing product group promotions associated with an ad account.  Include either ad_group_id or product_group_promotion_ids in your request.  &lt;b&gt;Note:&lt;/b&gt; ad_group_ids and product_group_promotion_ids are mutually exclusive parameters. Only provide one. If multiple options are provided, product_group_promotion_ids takes precedence over ad_group_ids. If none are provided, the endpoint returns an error.
   * @param adAccountId Unique identifier of an ad account.
   * @param productGroupPromotionIds List of Product group promotion Ids.
   * @param entityStatuses Entity status
   * @param adGroupId Ad group Id.
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
   * @param bookmark Cursor used to fetch the next page of items
   * @return ProductGroupPromotionsList200Response
  */
  public ProductGroupPromotionsList200Response productGroupPromotionsList (String adAccountId, List<String> productGroupPromotionIds, List<String> entityStatuses, String adGroupId, Integer pageSize, String order, String bookmark) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling productGroupPromotionsList",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling productGroupPromotionsList"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/product_group_promotions".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "product_group_promotion_ids", productGroupPromotionIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "entity_statuses", entityStatuses));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ad_group_id", adGroupId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductGroupPromotionsList200Response) ApiInvoker.deserialize(localVarResponse, "", ProductGroupPromotionsList200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get product group promotions
   * List existing product group promotions associated with an ad account.  Include either ad_group_id or product_group_promotion_ids in your request.  &lt;b&gt;Note:&lt;/b&gt; ad_group_ids and product_group_promotion_ids are mutually exclusive parameters. Only provide one. If multiple options are provided, product_group_promotion_ids takes precedence over ad_group_ids. If none are provided, the endpoint returns an error.
   * @param adAccountId Unique identifier of an ad account.   * @param productGroupPromotionIds List of Product group promotion Ids.   * @param entityStatuses Entity status   * @param adGroupId Ad group Id.   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.   * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.   * @param bookmark Cursor used to fetch the next page of items
  */
  public void productGroupPromotionsList (String adAccountId, List<String> productGroupPromotionIds, List<String> entityStatuses, String adGroupId, Integer pageSize, String order, String bookmark, final Response.Listener<ProductGroupPromotionsList200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling productGroupPromotionsList",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling productGroupPromotionsList"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/product_group_promotions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "product_group_promotion_ids", productGroupPromotionIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "entity_statuses", entityStatuses));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ad_group_id", adGroupId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductGroupPromotionsList200Response) ApiInvoker.deserialize(localVarResponse,  "", ProductGroupPromotionsList200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update product group promotions
  * Update multiple existing Product Group Promotions (by product_group_id)
   * @param adAccountId Unique identifier of an ad account.
   * @param productGroupPromotionUpdateRequest Parameters to update Product group promotions
   * @return ProductGroupPromotionResponse
  */
  public ProductGroupPromotionResponse productGroupPromotionsUpdate (String adAccountId, ProductGroupPromotionUpdateRequest productGroupPromotionUpdateRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productGroupPromotionUpdateRequest;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling productGroupPromotionsUpdate",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling productGroupPromotionsUpdate"));
    }
    // verify the required parameter 'productGroupPromotionUpdateRequest' is set
    if (productGroupPromotionUpdateRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productGroupPromotionUpdateRequest' when calling productGroupPromotionsUpdate",
        new ApiException(400, "Missing the required parameter 'productGroupPromotionUpdateRequest' when calling productGroupPromotionsUpdate"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/product_group_promotions".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductGroupPromotionResponse) ApiInvoker.deserialize(localVarResponse, "", ProductGroupPromotionResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update product group promotions
   * Update multiple existing Product Group Promotions (by product_group_id)
   * @param adAccountId Unique identifier of an ad account.   * @param productGroupPromotionUpdateRequest Parameters to update Product group promotions
  */
  public void productGroupPromotionsUpdate (String adAccountId, ProductGroupPromotionUpdateRequest productGroupPromotionUpdateRequest, final Response.Listener<ProductGroupPromotionResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productGroupPromotionUpdateRequest;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling productGroupPromotionsUpdate",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling productGroupPromotionsUpdate"));
    }
    // verify the required parameter 'productGroupPromotionUpdateRequest' is set
    if (productGroupPromotionUpdateRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productGroupPromotionUpdateRequest' when calling productGroupPromotionsUpdate",
        new ApiException(400, "Missing the required parameter 'productGroupPromotionUpdateRequest' when calling productGroupPromotionsUpdate"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/product_group_promotions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductGroupPromotionResponse) ApiInvoker.deserialize(localVarResponse,  "", ProductGroupPromotionResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get product group analytics
  * Get analytics for the specified product groups in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
   * @param adAccountId Unique identifier of an ad account.
   * @param startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
   * @param endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
   * @param productGroupIds List of Product group Ids to use to filter the results.
   * @param columns Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
   * @param granularity TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
   * @param clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
   * @param engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
   * @param viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
   * @param conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
   * @return List<ProductGroupAnalyticsResponseInner>
  */
  public List<ProductGroupAnalyticsResponseInner> productGroupsAnalytics (String adAccountId, Date startDate, Date endDate, List<String> productGroupIds, List<String> columns, Granularity granularity, Integer clickWindowDays, Integer engagementWindowDays, Integer viewWindowDays, String conversionReportTime) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling productGroupsAnalytics",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling productGroupsAnalytics"));
    }
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling productGroupsAnalytics",
        new ApiException(400, "Missing the required parameter 'startDate' when calling productGroupsAnalytics"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling productGroupsAnalytics",
        new ApiException(400, "Missing the required parameter 'endDate' when calling productGroupsAnalytics"));
    }
    // verify the required parameter 'productGroupIds' is set
    if (productGroupIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productGroupIds' when calling productGroupsAnalytics",
        new ApiException(400, "Missing the required parameter 'productGroupIds' when calling productGroupsAnalytics"));
    }
    // verify the required parameter 'columns' is set
    if (columns == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'columns' when calling productGroupsAnalytics",
        new ApiException(400, "Missing the required parameter 'columns' when calling productGroupsAnalytics"));
    }
    // verify the required parameter 'granularity' is set
    if (granularity == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'granularity' when calling productGroupsAnalytics",
        new ApiException(400, "Missing the required parameter 'granularity' when calling productGroupsAnalytics"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/product_groups/analytics".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "product_group_ids", productGroupIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "columns", columns));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "granularity", granularity));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "click_window_days", clickWindowDays));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "engagement_window_days", engagementWindowDays));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "view_window_days", viewWindowDays));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "conversion_report_time", conversionReportTime));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<ProductGroupAnalyticsResponseInner>) ApiInvoker.deserialize(localVarResponse, "array", ProductGroupAnalyticsResponseInner.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get product group analytics
   * Get analytics for the specified product groups in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
   * @param adAccountId Unique identifier of an ad account.   * @param startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.   * @param endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.   * @param productGroupIds List of Product group Ids to use to filter the results.   * @param columns Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned   * @param granularity TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly   * @param clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.   * @param engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.   * @param viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.   * @param conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
  */
  public void productGroupsAnalytics (String adAccountId, Date startDate, Date endDate, List<String> productGroupIds, List<String> columns, Granularity granularity, Integer clickWindowDays, Integer engagementWindowDays, Integer viewWindowDays, String conversionReportTime, final Response.Listener<List<ProductGroupAnalyticsResponseInner>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling productGroupsAnalytics",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling productGroupsAnalytics"));
    }
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling productGroupsAnalytics",
        new ApiException(400, "Missing the required parameter 'startDate' when calling productGroupsAnalytics"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling productGroupsAnalytics",
        new ApiException(400, "Missing the required parameter 'endDate' when calling productGroupsAnalytics"));
    }
    // verify the required parameter 'productGroupIds' is set
    if (productGroupIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productGroupIds' when calling productGroupsAnalytics",
        new ApiException(400, "Missing the required parameter 'productGroupIds' when calling productGroupsAnalytics"));
    }
    // verify the required parameter 'columns' is set
    if (columns == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'columns' when calling productGroupsAnalytics",
        new ApiException(400, "Missing the required parameter 'columns' when calling productGroupsAnalytics"));
    }
    // verify the required parameter 'granularity' is set
    if (granularity == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'granularity' when calling productGroupsAnalytics",
        new ApiException(400, "Missing the required parameter 'granularity' when calling productGroupsAnalytics"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/product_groups/analytics".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "product_group_ids", productGroupIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "columns", columns));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "granularity", granularity));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "click_window_days", clickWindowDays));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "engagement_window_days", engagementWindowDays));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "view_window_days", viewWindowDays));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "conversion_report_time", conversionReportTime));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<ProductGroupAnalyticsResponseInner>) ApiInvoker.deserialize(localVarResponse,  "array", ProductGroupAnalyticsResponseInner.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
