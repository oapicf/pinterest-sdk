/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.AdGroupArrayResponse;
import org.openapitools.client.model.AdGroupAudienceSizingRequest;
import org.openapitools.client.model.AdGroupAudienceSizingResponse;
import org.openapitools.client.model.AdGroupCreateRequest;
import org.openapitools.client.model.AdGroupResponse;
import org.openapitools.client.model.AdGroupUpdateRequest;
import org.openapitools.client.model.AdGroupsAnalyticsResponseInner;
import org.openapitools.client.model.AdGroupsList200Response;
import org.openapitools.client.model.AdsAnalyticsTargetingType;
import org.openapitools.client.model.BidFloor;
import org.openapitools.client.model.BidFloorRequest;
import org.openapitools.client.model.ConversionReportAttributionType;
import java.util.Date;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Granularity;
import java.util.*;
import org.openapitools.client.model.MetricsResponse;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class AdGroupsApi {
  String basePath = "https://api.pinterest.com/v5";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Get ad group analytics
  * Get analytics for the specified ad groups in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
   * @param adAccountId Unique identifier of an ad account.
   * @param startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
   * @param endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
   * @param adGroupIds List of Ad group Ids to use to filter the results.
   * @param columns Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
   * @param granularity TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
   * @param clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
   * @param engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
   * @param viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
   * @param conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
   * @return List<AdGroupsAnalyticsResponseInner>
  */
  public List<AdGroupsAnalyticsResponseInner> adGroupsAnalytics (String adAccountId, Date startDate, Date endDate, List<String> adGroupIds, List<String> columns, Granularity granularity, Integer clickWindowDays, Integer engagementWindowDays, Integer viewWindowDays, String conversionReportTime) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling adGroupsAnalytics",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling adGroupsAnalytics"));
    }
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling adGroupsAnalytics",
        new ApiException(400, "Missing the required parameter 'startDate' when calling adGroupsAnalytics"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling adGroupsAnalytics",
        new ApiException(400, "Missing the required parameter 'endDate' when calling adGroupsAnalytics"));
    }
    // verify the required parameter 'adGroupIds' is set
    if (adGroupIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adGroupIds' when calling adGroupsAnalytics",
        new ApiException(400, "Missing the required parameter 'adGroupIds' when calling adGroupsAnalytics"));
    }
    // verify the required parameter 'columns' is set
    if (columns == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'columns' when calling adGroupsAnalytics",
        new ApiException(400, "Missing the required parameter 'columns' when calling adGroupsAnalytics"));
    }
    // verify the required parameter 'granularity' is set
    if (granularity == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'granularity' when calling adGroupsAnalytics",
        new ApiException(400, "Missing the required parameter 'granularity' when calling adGroupsAnalytics"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/ad_groups/analytics".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "ad_group_ids", adGroupIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "columns", columns));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "granularity", granularity));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "click_window_days", clickWindowDays));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "engagement_window_days", engagementWindowDays));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "view_window_days", viewWindowDays));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "conversion_report_time", conversionReportTime));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<AdGroupsAnalyticsResponseInner>) ApiInvoker.deserialize(localVarResponse, "array", AdGroupsAnalyticsResponseInner.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get ad group analytics
   * Get analytics for the specified ad groups in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
   * @param adAccountId Unique identifier of an ad account.   * @param startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.   * @param endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.   * @param adGroupIds List of Ad group Ids to use to filter the results.   * @param columns Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned   * @param granularity TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly   * @param clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.   * @param engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.   * @param viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.   * @param conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
  */
  public void adGroupsAnalytics (String adAccountId, Date startDate, Date endDate, List<String> adGroupIds, List<String> columns, Granularity granularity, Integer clickWindowDays, Integer engagementWindowDays, Integer viewWindowDays, String conversionReportTime, final Response.Listener<List<AdGroupsAnalyticsResponseInner>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling adGroupsAnalytics",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling adGroupsAnalytics"));
    }
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling adGroupsAnalytics",
        new ApiException(400, "Missing the required parameter 'startDate' when calling adGroupsAnalytics"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling adGroupsAnalytics",
        new ApiException(400, "Missing the required parameter 'endDate' when calling adGroupsAnalytics"));
    }
    // verify the required parameter 'adGroupIds' is set
    if (adGroupIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adGroupIds' when calling adGroupsAnalytics",
        new ApiException(400, "Missing the required parameter 'adGroupIds' when calling adGroupsAnalytics"));
    }
    // verify the required parameter 'columns' is set
    if (columns == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'columns' when calling adGroupsAnalytics",
        new ApiException(400, "Missing the required parameter 'columns' when calling adGroupsAnalytics"));
    }
    // verify the required parameter 'granularity' is set
    if (granularity == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'granularity' when calling adGroupsAnalytics",
        new ApiException(400, "Missing the required parameter 'granularity' when calling adGroupsAnalytics"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/ad_groups/analytics".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "ad_group_ids", adGroupIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "columns", columns));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "granularity", granularity));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "click_window_days", clickWindowDays));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "engagement_window_days", engagementWindowDays));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "view_window_days", viewWindowDays));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "conversion_report_time", conversionReportTime));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<AdGroupsAnalyticsResponseInner>) ApiInvoker.deserialize(localVarResponse,  "array", AdGroupsAnalyticsResponseInner.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get audience sizing
  * Get potential audience size for an ad group with given targeting criteria.  Potential audience size estimates the number of people you may be able to reach per month with your campaign.  It is based on historical advertising data and the targeting criteria you select. It does not guarantee results or take into account factors such as bid, budget, schedule, seasonality or product experiments.
   * @param adAccountId Unique identifier of an ad account.
   * @param adGroupAudienceSizingRequest 
   * @return AdGroupAudienceSizingResponse
  */
  public AdGroupAudienceSizingResponse adGroupsAudienceSizing (String adAccountId, AdGroupAudienceSizingRequest adGroupAudienceSizingRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = adGroupAudienceSizingRequest;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling adGroupsAudienceSizing",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling adGroupsAudienceSizing"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/ad_groups/audience_sizing".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AdGroupAudienceSizingResponse) ApiInvoker.deserialize(localVarResponse, "", AdGroupAudienceSizingResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get audience sizing
   * Get potential audience size for an ad group with given targeting criteria.  Potential audience size estimates the number of people you may be able to reach per month with your campaign.  It is based on historical advertising data and the targeting criteria you select. It does not guarantee results or take into account factors such as bid, budget, schedule, seasonality or product experiments.
   * @param adAccountId Unique identifier of an ad account.   * @param adGroupAudienceSizingRequest 
  */
  public void adGroupsAudienceSizing (String adAccountId, AdGroupAudienceSizingRequest adGroupAudienceSizingRequest, final Response.Listener<AdGroupAudienceSizingResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = adGroupAudienceSizingRequest;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling adGroupsAudienceSizing",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling adGroupsAudienceSizing"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/ad_groups/audience_sizing".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AdGroupAudienceSizingResponse) ApiInvoker.deserialize(localVarResponse,  "", AdGroupAudienceSizingResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get bid floors
  * List bid floors for your campaign configuration. Bid floors are given in microcurrency values based on the currency in the bid floor specification. &lt;p/&gt; &lt;p&gt;Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.&lt;/p&gt; &lt;p&gt;A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’ s profile.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Equivalency equations&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;$1 &#x3D; 1,000,000 microdollars&lt;/li&gt;   &lt;li&gt;1 microdollar &#x3D; $0.000001 &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;To convert between currency and microcurrency&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;To convert dollars to microdollars, mutiply dollars by 1,000,000&lt;/li&gt;   &lt;li&gt;To convert microdollars to dollars, divide microdollars by 1,000,000&lt;/li&gt;  &lt;/ul&gt; For more on bid floors see &lt;a class&#x3D;\&quot;reference external\&quot; href&#x3D;\&quot;https://help.pinterest.com/en/business/article/set-your-bid\&quot;&gt; Set your bid&lt;/a&gt;.
   * @param adAccountId Unique identifier of an ad account.
   * @param bidFloorRequest Parameters to get bid_floor info
   * @return BidFloor
  */
  public BidFloor adGroupsBidFloorGet (String adAccountId, BidFloorRequest bidFloorRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = bidFloorRequest;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling adGroupsBidFloorGet",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling adGroupsBidFloorGet"));
    }
    // verify the required parameter 'bidFloorRequest' is set
    if (bidFloorRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'bidFloorRequest' when calling adGroupsBidFloorGet",
        new ApiException(400, "Missing the required parameter 'bidFloorRequest' when calling adGroupsBidFloorGet"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/bid_floor".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (BidFloor) ApiInvoker.deserialize(localVarResponse, "", BidFloor.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get bid floors
   * List bid floors for your campaign configuration. Bid floors are given in microcurrency values based on the currency in the bid floor specification. &lt;p/&gt; &lt;p&gt;Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.&lt;/p&gt; &lt;p&gt;A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’ s profile.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Equivalency equations&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;$1 &#x3D; 1,000,000 microdollars&lt;/li&gt;   &lt;li&gt;1 microdollar &#x3D; $0.000001 &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;To convert between currency and microcurrency&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;To convert dollars to microdollars, mutiply dollars by 1,000,000&lt;/li&gt;   &lt;li&gt;To convert microdollars to dollars, divide microdollars by 1,000,000&lt;/li&gt;  &lt;/ul&gt; For more on bid floors see &lt;a class&#x3D;\&quot;reference external\&quot; href&#x3D;\&quot;https://help.pinterest.com/en/business/article/set-your-bid\&quot;&gt; Set your bid&lt;/a&gt;.
   * @param adAccountId Unique identifier of an ad account.   * @param bidFloorRequest Parameters to get bid_floor info
  */
  public void adGroupsBidFloorGet (String adAccountId, BidFloorRequest bidFloorRequest, final Response.Listener<BidFloor> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = bidFloorRequest;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling adGroupsBidFloorGet",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling adGroupsBidFloorGet"));
    }
    // verify the required parameter 'bidFloorRequest' is set
    if (bidFloorRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'bidFloorRequest' when calling adGroupsBidFloorGet",
        new ApiException(400, "Missing the required parameter 'bidFloorRequest' when calling adGroupsBidFloorGet"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/bid_floor".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BidFloor) ApiInvoker.deserialize(localVarResponse,  "", BidFloor.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create ad groups
  * Create multiple new ad groups. All ads in a given ad group will have the same budget, bid, run dates, targeting, and placement (search, browse, other). For more information, &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/campaign-structure\&quot; target&#x3D;\&quot;_blank\&quot;&gt; click here&lt;/a&gt;.&lt;/p&gt; &lt;strong&gt;Note:&lt;/strong&gt; - &#39;bid_in_micro_currency&#39; and &#39;budget_in_micro_currency&#39; should be expressed in microcurrency amounts based on the currency field set in the advertiser&#39;s profile.&lt;p/&gt; &lt;p&gt;Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.&lt;/p&gt; &lt;p&gt;A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’s profile.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Equivalency equations&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;$1 &#x3D; 1,000,000 microdollars&lt;/li&gt;   &lt;li&gt;1 microdollar &#x3D; $0.000001 &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;To convert between currency and microcurrency&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;To convert dollars to microdollars, mutiply dollars by 1,000,000&lt;/li&gt;   &lt;li&gt;To convert microdollars to dollars, divide microdollars by 1,000,000&lt;/li&gt; &lt;/ul&gt; - Ad groups belong to ad campaigns. Some types of campaigns (e.g. budget optimization) have limits on the number of ad groups they can hold. If you exceed those limits, you will get an error message. - Start and end time cannot be set for ad groups that belong to CBO campaigns. Currently, campaigns with the following objective types: TRAFFIC, AWARENESS, WEB_CONVERSIONS, and CATALOG_SALES will default to CBO.
   * @param adAccountId Unique identifier of an ad account.
   * @param adGroupCreateRequest List of ad groups to create, size limit [1, 30].
   * @return AdGroupArrayResponse
  */
  public AdGroupArrayResponse adGroupsCreate (String adAccountId, List<AdGroupCreateRequest> adGroupCreateRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = adGroupCreateRequest;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling adGroupsCreate",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling adGroupsCreate"));
    }
    // verify the required parameter 'adGroupCreateRequest' is set
    if (adGroupCreateRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adGroupCreateRequest' when calling adGroupsCreate",
        new ApiException(400, "Missing the required parameter 'adGroupCreateRequest' when calling adGroupsCreate"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/ad_groups".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AdGroupArrayResponse) ApiInvoker.deserialize(localVarResponse, "", AdGroupArrayResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create ad groups
   * Create multiple new ad groups. All ads in a given ad group will have the same budget, bid, run dates, targeting, and placement (search, browse, other). For more information, &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/campaign-structure\&quot; target&#x3D;\&quot;_blank\&quot;&gt; click here&lt;/a&gt;.&lt;/p&gt; &lt;strong&gt;Note:&lt;/strong&gt; - &#39;bid_in_micro_currency&#39; and &#39;budget_in_micro_currency&#39; should be expressed in microcurrency amounts based on the currency field set in the advertiser&#39;s profile.&lt;p/&gt; &lt;p&gt;Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.&lt;/p&gt; &lt;p&gt;A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’s profile.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Equivalency equations&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;$1 &#x3D; 1,000,000 microdollars&lt;/li&gt;   &lt;li&gt;1 microdollar &#x3D; $0.000001 &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;To convert between currency and microcurrency&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;To convert dollars to microdollars, mutiply dollars by 1,000,000&lt;/li&gt;   &lt;li&gt;To convert microdollars to dollars, divide microdollars by 1,000,000&lt;/li&gt; &lt;/ul&gt; - Ad groups belong to ad campaigns. Some types of campaigns (e.g. budget optimization) have limits on the number of ad groups they can hold. If you exceed those limits, you will get an error message. - Start and end time cannot be set for ad groups that belong to CBO campaigns. Currently, campaigns with the following objective types: TRAFFIC, AWARENESS, WEB_CONVERSIONS, and CATALOG_SALES will default to CBO.
   * @param adAccountId Unique identifier of an ad account.   * @param adGroupCreateRequest List of ad groups to create, size limit [1, 30].
  */
  public void adGroupsCreate (String adAccountId, List<AdGroupCreateRequest> adGroupCreateRequest, final Response.Listener<AdGroupArrayResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = adGroupCreateRequest;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling adGroupsCreate",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling adGroupsCreate"));
    }
    // verify the required parameter 'adGroupCreateRequest' is set
    if (adGroupCreateRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adGroupCreateRequest' when calling adGroupsCreate",
        new ApiException(400, "Missing the required parameter 'adGroupCreateRequest' when calling adGroupsCreate"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/ad_groups".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AdGroupArrayResponse) ApiInvoker.deserialize(localVarResponse,  "", AdGroupArrayResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get ad group
  * Get a specific ad given the ad ID. If your pin is rejected, rejected_reasons will contain additional information from the Ad Review process. For more information about our policies and rejection reasons see the &lt;a href&#x3D;\&quot;https://www.pinterest.com/_/_/policy/advertising-guidelines/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Pinterest advertising standards&lt;/a&gt;.
   * @param adAccountId Unique identifier of an ad account.
   * @param adGroupId Unique identifier of an ad group.
   * @return AdGroupResponse
  */
  public AdGroupResponse adGroupsGet (String adAccountId, String adGroupId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling adGroupsGet",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling adGroupsGet"));
    }
    // verify the required parameter 'adGroupId' is set
    if (adGroupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adGroupId' when calling adGroupsGet",
        new ApiException(400, "Missing the required parameter 'adGroupId' when calling adGroupsGet"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/ad_groups/{ad_group_id}".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString())).replaceAll("\\{" + "ad_group_id" + "\\}", apiInvoker.escapeString(adGroupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AdGroupResponse) ApiInvoker.deserialize(localVarResponse, "", AdGroupResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get ad group
   * Get a specific ad given the ad ID. If your pin is rejected, rejected_reasons will contain additional information from the Ad Review process. For more information about our policies and rejection reasons see the &lt;a href&#x3D;\&quot;https://www.pinterest.com/_/_/policy/advertising-guidelines/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Pinterest advertising standards&lt;/a&gt;.
   * @param adAccountId Unique identifier of an ad account.   * @param adGroupId Unique identifier of an ad group.
  */
  public void adGroupsGet (String adAccountId, String adGroupId, final Response.Listener<AdGroupResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling adGroupsGet",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling adGroupsGet"));
    }
    // verify the required parameter 'adGroupId' is set
    if (adGroupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adGroupId' when calling adGroupsGet",
        new ApiException(400, "Missing the required parameter 'adGroupId' when calling adGroupsGet"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/ad_groups/{ad_group_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString())).replaceAll("\\{" + "ad_group_id" + "\\}", apiInvoker.escapeString(adGroupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AdGroupResponse) ApiInvoker.deserialize(localVarResponse,  "", AdGroupResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List ad groups
  * List ad groups based on provided campaign IDs or ad group IDs.(campaign_ids or ad_group_ids). &lt;p/&gt; &lt;strong&gt;Note:&lt;/strong&gt;&lt;p/&gt; Provide only campaign_id or ad_group_id. Do not provide both.
   * @param adAccountId Unique identifier of an ad account.
   * @param campaignIds List of Campaign Ids to use to filter the results.
   * @param adGroupIds List of Ad group Ids to use to filter the results.
   * @param entityStatuses Entity status
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
   * @param bookmark Cursor used to fetch the next page of items
   * @param translateInterestsToNames Return interests as text names (if value is true) rather than topic IDs.
   * @return AdGroupsList200Response
  */
  public AdGroupsList200Response adGroupsList (String adAccountId, List<String> campaignIds, List<String> adGroupIds, List<String> entityStatuses, Integer pageSize, String order, String bookmark, Boolean translateInterestsToNames) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling adGroupsList",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling adGroupsList"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/ad_groups".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "campaign_ids", campaignIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "ad_group_ids", adGroupIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "entity_statuses", entityStatuses));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "translate_interests_to_names", translateInterestsToNames));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AdGroupsList200Response) ApiInvoker.deserialize(localVarResponse, "", AdGroupsList200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List ad groups
   * List ad groups based on provided campaign IDs or ad group IDs.(campaign_ids or ad_group_ids). &lt;p/&gt; &lt;strong&gt;Note:&lt;/strong&gt;&lt;p/&gt; Provide only campaign_id or ad_group_id. Do not provide both.
   * @param adAccountId Unique identifier of an ad account.   * @param campaignIds List of Campaign Ids to use to filter the results.   * @param adGroupIds List of Ad group Ids to use to filter the results.   * @param entityStatuses Entity status   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.   * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.   * @param bookmark Cursor used to fetch the next page of items   * @param translateInterestsToNames Return interests as text names (if value is true) rather than topic IDs.
  */
  public void adGroupsList (String adAccountId, List<String> campaignIds, List<String> adGroupIds, List<String> entityStatuses, Integer pageSize, String order, String bookmark, Boolean translateInterestsToNames, final Response.Listener<AdGroupsList200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling adGroupsList",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling adGroupsList"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/ad_groups".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "campaign_ids", campaignIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "ad_group_ids", adGroupIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "entity_statuses", entityStatuses));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "translate_interests_to_names", translateInterestsToNames));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AdGroupsList200Response) ApiInvoker.deserialize(localVarResponse,  "", AdGroupsList200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get targeting analytics for ad groups
  * Get targeting analytics for one or more ad groups. For the requested ad group(s) and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \&quot;age_bucket\&quot;) for applicable values (e.g. \&quot;45-49\&quot;). &lt;p/&gt; - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
   * @param adAccountId Unique identifier of an ad account.
   * @param adGroupIds List of Ad group Ids to use to filter the results.
   * @param startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
   * @param endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
   * @param targetingTypes Targeting type breakdowns for the report. The reporting per targeting type &lt;br&gt; is independent from each other. [\&quot;AGE_BUCKET_AND_GENDER\&quot;] is in BETA and not yet available to all users.
   * @param columns Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
   * @param granularity TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
   * @param clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
   * @param engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
   * @param viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
   * @param conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
   * @param attributionTypes List of types of attribution for the conversion report
   * @return MetricsResponse
  */
  public MetricsResponse adGroupsTargetingAnalyticsGet (String adAccountId, List<String> adGroupIds, Date startDate, Date endDate, List<AdsAnalyticsTargetingType> targetingTypes, List<String> columns, Granularity granularity, Integer clickWindowDays, Integer engagementWindowDays, Integer viewWindowDays, String conversionReportTime, ConversionReportAttributionType attributionTypes) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling adGroupsTargetingAnalyticsGet",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling adGroupsTargetingAnalyticsGet"));
    }
    // verify the required parameter 'adGroupIds' is set
    if (adGroupIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adGroupIds' when calling adGroupsTargetingAnalyticsGet",
        new ApiException(400, "Missing the required parameter 'adGroupIds' when calling adGroupsTargetingAnalyticsGet"));
    }
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling adGroupsTargetingAnalyticsGet",
        new ApiException(400, "Missing the required parameter 'startDate' when calling adGroupsTargetingAnalyticsGet"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling adGroupsTargetingAnalyticsGet",
        new ApiException(400, "Missing the required parameter 'endDate' when calling adGroupsTargetingAnalyticsGet"));
    }
    // verify the required parameter 'targetingTypes' is set
    if (targetingTypes == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'targetingTypes' when calling adGroupsTargetingAnalyticsGet",
        new ApiException(400, "Missing the required parameter 'targetingTypes' when calling adGroupsTargetingAnalyticsGet"));
    }
    // verify the required parameter 'columns' is set
    if (columns == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'columns' when calling adGroupsTargetingAnalyticsGet",
        new ApiException(400, "Missing the required parameter 'columns' when calling adGroupsTargetingAnalyticsGet"));
    }
    // verify the required parameter 'granularity' is set
    if (granularity == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'granularity' when calling adGroupsTargetingAnalyticsGet",
        new ApiException(400, "Missing the required parameter 'granularity' when calling adGroupsTargetingAnalyticsGet"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/ad_groups/targeting_analytics".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "ad_group_ids", adGroupIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "targeting_types", targetingTypes));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "columns", columns));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "granularity", granularity));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "click_window_days", clickWindowDays));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "engagement_window_days", engagementWindowDays));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "view_window_days", viewWindowDays));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "conversion_report_time", conversionReportTime));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribution_types", attributionTypes));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (MetricsResponse) ApiInvoker.deserialize(localVarResponse, "", MetricsResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get targeting analytics for ad groups
   * Get targeting analytics for one or more ad groups. For the requested ad group(s) and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \&quot;age_bucket\&quot;) for applicable values (e.g. \&quot;45-49\&quot;). &lt;p/&gt; - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
   * @param adAccountId Unique identifier of an ad account.   * @param adGroupIds List of Ad group Ids to use to filter the results.   * @param startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.   * @param endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.   * @param targetingTypes Targeting type breakdowns for the report. The reporting per targeting type &lt;br&gt; is independent from each other. [\&quot;AGE_BUCKET_AND_GENDER\&quot;] is in BETA and not yet available to all users.   * @param columns Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned   * @param granularity TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly   * @param clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.   * @param engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.   * @param viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.   * @param conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.   * @param attributionTypes List of types of attribution for the conversion report
  */
  public void adGroupsTargetingAnalyticsGet (String adAccountId, List<String> adGroupIds, Date startDate, Date endDate, List<AdsAnalyticsTargetingType> targetingTypes, List<String> columns, Granularity granularity, Integer clickWindowDays, Integer engagementWindowDays, Integer viewWindowDays, String conversionReportTime, ConversionReportAttributionType attributionTypes, final Response.Listener<MetricsResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling adGroupsTargetingAnalyticsGet",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling adGroupsTargetingAnalyticsGet"));
    }
    // verify the required parameter 'adGroupIds' is set
    if (adGroupIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adGroupIds' when calling adGroupsTargetingAnalyticsGet",
        new ApiException(400, "Missing the required parameter 'adGroupIds' when calling adGroupsTargetingAnalyticsGet"));
    }
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling adGroupsTargetingAnalyticsGet",
        new ApiException(400, "Missing the required parameter 'startDate' when calling adGroupsTargetingAnalyticsGet"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling adGroupsTargetingAnalyticsGet",
        new ApiException(400, "Missing the required parameter 'endDate' when calling adGroupsTargetingAnalyticsGet"));
    }
    // verify the required parameter 'targetingTypes' is set
    if (targetingTypes == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'targetingTypes' when calling adGroupsTargetingAnalyticsGet",
        new ApiException(400, "Missing the required parameter 'targetingTypes' when calling adGroupsTargetingAnalyticsGet"));
    }
    // verify the required parameter 'columns' is set
    if (columns == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'columns' when calling adGroupsTargetingAnalyticsGet",
        new ApiException(400, "Missing the required parameter 'columns' when calling adGroupsTargetingAnalyticsGet"));
    }
    // verify the required parameter 'granularity' is set
    if (granularity == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'granularity' when calling adGroupsTargetingAnalyticsGet",
        new ApiException(400, "Missing the required parameter 'granularity' when calling adGroupsTargetingAnalyticsGet"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/ad_groups/targeting_analytics".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "ad_group_ids", adGroupIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "targeting_types", targetingTypes));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "columns", columns));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "granularity", granularity));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "click_window_days", clickWindowDays));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "engagement_window_days", engagementWindowDays));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "view_window_days", viewWindowDays));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "conversion_report_time", conversionReportTime));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribution_types", attributionTypes));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MetricsResponse) ApiInvoker.deserialize(localVarResponse,  "", MetricsResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update ad groups
  * Update multiple existing ad groups.
   * @param adAccountId Unique identifier of an ad account.
   * @param adGroupUpdateRequest List of ad groups to update, size limit [1, 30].
   * @return AdGroupArrayResponse
  */
  public AdGroupArrayResponse adGroupsUpdate (String adAccountId, List<AdGroupUpdateRequest> adGroupUpdateRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = adGroupUpdateRequest;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling adGroupsUpdate",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling adGroupsUpdate"));
    }
    // verify the required parameter 'adGroupUpdateRequest' is set
    if (adGroupUpdateRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adGroupUpdateRequest' when calling adGroupsUpdate",
        new ApiException(400, "Missing the required parameter 'adGroupUpdateRequest' when calling adGroupsUpdate"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/ad_groups".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AdGroupArrayResponse) ApiInvoker.deserialize(localVarResponse, "", AdGroupArrayResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update ad groups
   * Update multiple existing ad groups.
   * @param adAccountId Unique identifier of an ad account.   * @param adGroupUpdateRequest List of ad groups to update, size limit [1, 30].
  */
  public void adGroupsUpdate (String adAccountId, List<AdGroupUpdateRequest> adGroupUpdateRequest, final Response.Listener<AdGroupArrayResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = adGroupUpdateRequest;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling adGroupsUpdate",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling adGroupsUpdate"));
    }
    // verify the required parameter 'adGroupUpdateRequest' is set
    if (adGroupUpdateRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adGroupUpdateRequest' when calling adGroupsUpdate",
        new ApiException(400, "Missing the required parameter 'adGroupUpdateRequest' when calling adGroupsUpdate"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/ad_groups".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AdGroupArrayResponse) ApiInvoker.deserialize(localVarResponse,  "", AdGroupArrayResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
