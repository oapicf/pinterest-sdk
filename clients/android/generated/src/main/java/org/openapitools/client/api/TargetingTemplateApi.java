/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.Error;
import org.openapitools.client.model.TargetingTemplateCreate;
import org.openapitools.client.model.TargetingTemplateGetResponseData;
import org.openapitools.client.model.TargetingTemplateList200Response;
import org.openapitools.client.model.TargetingTemplateUpdateRequest;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class TargetingTemplateApi {
  String basePath = "https://api.pinterest.com/v5";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Create targeting templates
  * &lt;p&gt;Targeting templates allow advertisers to save a set of targeting details including audience lists,  keywords &amp; interest, demographics, and placements to use more than once during the campaign creation process.&lt;/p&gt;  &lt;p&gt;Templates can be used to build out basic targeting criteria that you plan to use across campaigns and to reuse   performance targeting from prior campaigns for new campaigns.&lt;/p&gt;
   * @param adAccountId Unique identifier of an ad account.
   * @param targetingTemplateCreate targeting template creation entity
   * @return TargetingTemplateGetResponseData
  */
  public TargetingTemplateGetResponseData targetingTemplateCreate (String adAccountId, TargetingTemplateCreate targetingTemplateCreate) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = targetingTemplateCreate;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling targetingTemplateCreate",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling targetingTemplateCreate"));
    }
    // verify the required parameter 'targetingTemplateCreate' is set
    if (targetingTemplateCreate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'targetingTemplateCreate' when calling targetingTemplateCreate",
        new ApiException(400, "Missing the required parameter 'targetingTemplateCreate' when calling targetingTemplateCreate"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/targeting_templates".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TargetingTemplateGetResponseData) ApiInvoker.deserialize(localVarResponse, "", TargetingTemplateGetResponseData.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create targeting templates
   * &lt;p&gt;Targeting templates allow advertisers to save a set of targeting details including audience lists,  keywords &amp; interest, demographics, and placements to use more than once during the campaign creation process.&lt;/p&gt;  &lt;p&gt;Templates can be used to build out basic targeting criteria that you plan to use across campaigns and to reuse   performance targeting from prior campaigns for new campaigns.&lt;/p&gt;
   * @param adAccountId Unique identifier of an ad account.   * @param targetingTemplateCreate targeting template creation entity
  */
  public void targetingTemplateCreate (String adAccountId, TargetingTemplateCreate targetingTemplateCreate, final Response.Listener<TargetingTemplateGetResponseData> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = targetingTemplateCreate;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling targetingTemplateCreate",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling targetingTemplateCreate"));
    }
    // verify the required parameter 'targetingTemplateCreate' is set
    if (targetingTemplateCreate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'targetingTemplateCreate' when calling targetingTemplateCreate",
        new ApiException(400, "Missing the required parameter 'targetingTemplateCreate' when calling targetingTemplateCreate"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/targeting_templates".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TargetingTemplateGetResponseData) ApiInvoker.deserialize(localVarResponse,  "", TargetingTemplateGetResponseData.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List targeting templates
  * Get a list of the targeting templates in the specified &lt;code&gt;ad_account_id&lt;/code&gt;
   * @param adAccountId Unique identifier of an ad account.
   * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
   * @param includeSizing Include audience sizing in result or not
   * @param searchQuery Search keyword for targeting templates
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param bookmark Cursor used to fetch the next page of items
   * @return TargetingTemplateList200Response
  */
  public TargetingTemplateList200Response targetingTemplateList (String adAccountId, String order, Boolean includeSizing, String searchQuery, Integer pageSize, String bookmark) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling targetingTemplateList",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling targetingTemplateList"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/targeting_templates".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "include_sizing", includeSizing));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "search_query", searchQuery));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TargetingTemplateList200Response) ApiInvoker.deserialize(localVarResponse, "", TargetingTemplateList200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List targeting templates
   * Get a list of the targeting templates in the specified &lt;code&gt;ad_account_id&lt;/code&gt;
   * @param adAccountId Unique identifier of an ad account.   * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.   * @param includeSizing Include audience sizing in result or not   * @param searchQuery Search keyword for targeting templates   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.   * @param bookmark Cursor used to fetch the next page of items
  */
  public void targetingTemplateList (String adAccountId, String order, Boolean includeSizing, String searchQuery, Integer pageSize, String bookmark, final Response.Listener<TargetingTemplateList200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling targetingTemplateList",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling targetingTemplateList"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/targeting_templates".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "include_sizing", includeSizing));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "search_query", searchQuery));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TargetingTemplateList200Response) ApiInvoker.deserialize(localVarResponse,  "", TargetingTemplateList200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update targeting templates
  * &lt;p&gt;Update the targeting template given advertiser ID and targeting template ID&lt;/p&gt;
   * @param adAccountId Unique identifier of an ad account.
   * @param targetingTemplateUpdateRequest Operation type and targeting template ID
   * @return void
  */
  public void targetingTemplateUpdate (String adAccountId, TargetingTemplateUpdateRequest targetingTemplateUpdateRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = targetingTemplateUpdateRequest;
    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling targetingTemplateUpdate",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling targetingTemplateUpdate"));
    }
    // verify the required parameter 'targetingTemplateUpdateRequest' is set
    if (targetingTemplateUpdateRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'targetingTemplateUpdateRequest' when calling targetingTemplateUpdate",
        new ApiException(400, "Missing the required parameter 'targetingTemplateUpdateRequest' when calling targetingTemplateUpdate"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/targeting_templates".replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update targeting templates
   * &lt;p&gt;Update the targeting template given advertiser ID and targeting template ID&lt;/p&gt;
   * @param adAccountId Unique identifier of an ad account.   * @param targetingTemplateUpdateRequest Operation type and targeting template ID
  */
  public void targetingTemplateUpdate (String adAccountId, TargetingTemplateUpdateRequest targetingTemplateUpdateRequest, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = targetingTemplateUpdateRequest;

    // verify the required parameter 'adAccountId' is set
    if (adAccountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'adAccountId' when calling targetingTemplateUpdate",
        new ApiException(400, "Missing the required parameter 'adAccountId' when calling targetingTemplateUpdate"));
    }
    // verify the required parameter 'targetingTemplateUpdateRequest' is set
    if (targetingTemplateUpdateRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'targetingTemplateUpdateRequest' when calling targetingTemplateUpdate",
        new ApiException(400, "Missing the required parameter 'targetingTemplateUpdateRequest' when calling targetingTemplateUpdate"));
    }

    // create path and map variables
    String path = "/ad_accounts/{ad_account_id}/targeting_templates".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ad_account_id" + "\\}", apiInvoker.escapeString(adAccountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
