/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.BusinessAssetMembersGet200Response;
import org.openapitools.client.model.BusinessAssetPartnersGet200Response;
import org.openapitools.client.model.BusinessAssetsGet200Response;
import org.openapitools.client.model.BusinessMemberAssetsGet200Response;
import org.openapitools.client.model.BusinessMembersAssetAccessDeleteRequest;
import org.openapitools.client.model.BusinessPartnerAssetAccessGet200Response;
import org.openapitools.client.model.CreateAssetGroupBody;
import org.openapitools.client.model.CreateAssetGroupResponse;
import org.openapitools.client.model.DeleteAssetGroupBody;
import org.openapitools.client.model.DeleteAssetGroupResponse;
import org.openapitools.client.model.DeleteMemberAccessResultsResponseArray;
import org.openapitools.client.model.DeletePartnerAssetAccessBody;
import org.openapitools.client.model.DeletePartnerAssetsResultsResponseArray;
import org.openapitools.client.model.Error;
import java.util.*;
import org.openapitools.client.model.PartnerType;
import org.openapitools.client.model.PermissionsWithOwner;
import org.openapitools.client.model.UpdateAssetGroupBody;
import org.openapitools.client.model.UpdateAssetGroupResponse;
import org.openapitools.client.model.UpdateMemberAssetAccessBody;
import org.openapitools.client.model.UpdateMemberAssetsResultsResponseArray;
import org.openapitools.client.model.UpdatePartnerAssetAccessBody;
import org.openapitools.client.model.UpdatePartnerAssetsResultsResponseArray;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class BusinessAccessAssetsApi {
  String basePath = "https://api.pinterest.com/v5";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Create a new asset group.
  * Create a new asset group with the specified parameters. - An &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/asset-groups\&quot;&gt;asset group&lt;/a&gt; is a custom group of assets based on how you’d like to manage your accounts.
   * @param businessId Unique identifier of the requesting business.
   * @param createAssetGroupBody 
   * @return CreateAssetGroupResponse
  */
  public CreateAssetGroupResponse assetGroupCreate (String businessId, CreateAssetGroupBody createAssetGroupBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = createAssetGroupBody;
    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling assetGroupCreate",
        new ApiException(400, "Missing the required parameter 'businessId' when calling assetGroupCreate"));
    }
    // verify the required parameter 'createAssetGroupBody' is set
    if (createAssetGroupBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createAssetGroupBody' when calling assetGroupCreate",
        new ApiException(400, "Missing the required parameter 'createAssetGroupBody' when calling assetGroupCreate"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/asset_groups".replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CreateAssetGroupResponse) ApiInvoker.deserialize(localVarResponse, "", CreateAssetGroupResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a new asset group.
   * Create a new asset group with the specified parameters. - An &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/asset-groups\&quot;&gt;asset group&lt;/a&gt; is a custom group of assets based on how you’d like to manage your accounts.
   * @param businessId Unique identifier of the requesting business.   * @param createAssetGroupBody 
  */
  public void assetGroupCreate (String businessId, CreateAssetGroupBody createAssetGroupBody, final Response.Listener<CreateAssetGroupResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createAssetGroupBody;

    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling assetGroupCreate",
        new ApiException(400, "Missing the required parameter 'businessId' when calling assetGroupCreate"));
    }
    // verify the required parameter 'createAssetGroupBody' is set
    if (createAssetGroupBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createAssetGroupBody' when calling assetGroupCreate",
        new ApiException(400, "Missing the required parameter 'createAssetGroupBody' when calling assetGroupCreate"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/asset_groups".replaceAll("\\{format\\}","json").replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CreateAssetGroupResponse) ApiInvoker.deserialize(localVarResponse,  "", CreateAssetGroupResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete asset groups.
  * Delete a batch of asset groups.
   * @param businessId Unique identifier of the requesting business.
   * @param deleteAssetGroupBody 
   * @return DeleteAssetGroupResponse
  */
  public DeleteAssetGroupResponse assetGroupDelete (String businessId, DeleteAssetGroupBody deleteAssetGroupBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = deleteAssetGroupBody;
    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling assetGroupDelete",
        new ApiException(400, "Missing the required parameter 'businessId' when calling assetGroupDelete"));
    }
    // verify the required parameter 'deleteAssetGroupBody' is set
    if (deleteAssetGroupBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deleteAssetGroupBody' when calling assetGroupDelete",
        new ApiException(400, "Missing the required parameter 'deleteAssetGroupBody' when calling assetGroupDelete"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/asset_groups".replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (DeleteAssetGroupResponse) ApiInvoker.deserialize(localVarResponse, "", DeleteAssetGroupResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete asset groups.
   * Delete a batch of asset groups.
   * @param businessId Unique identifier of the requesting business.   * @param deleteAssetGroupBody 
  */
  public void assetGroupDelete (String businessId, DeleteAssetGroupBody deleteAssetGroupBody, final Response.Listener<DeleteAssetGroupResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = deleteAssetGroupBody;

    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling assetGroupDelete",
        new ApiException(400, "Missing the required parameter 'businessId' when calling assetGroupDelete"));
    }
    // verify the required parameter 'deleteAssetGroupBody' is set
    if (deleteAssetGroupBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deleteAssetGroupBody' when calling assetGroupDelete",
        new ApiException(400, "Missing the required parameter 'deleteAssetGroupBody' when calling assetGroupDelete"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/asset_groups".replaceAll("\\{format\\}","json").replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DeleteAssetGroupResponse) ApiInvoker.deserialize(localVarResponse,  "", DeleteAssetGroupResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update asset groups.
  * Update a batch of asset groups with the specified parameters.
   * @param businessId Unique identifier of the requesting business.
   * @param updateAssetGroupBody 
   * @return UpdateAssetGroupResponse
  */
  public UpdateAssetGroupResponse assetGroupUpdate (String businessId, UpdateAssetGroupBody updateAssetGroupBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = updateAssetGroupBody;
    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling assetGroupUpdate",
        new ApiException(400, "Missing the required parameter 'businessId' when calling assetGroupUpdate"));
    }
    // verify the required parameter 'updateAssetGroupBody' is set
    if (updateAssetGroupBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'updateAssetGroupBody' when calling assetGroupUpdate",
        new ApiException(400, "Missing the required parameter 'updateAssetGroupBody' when calling assetGroupUpdate"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/asset_groups".replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UpdateAssetGroupResponse) ApiInvoker.deserialize(localVarResponse, "", UpdateAssetGroupResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update asset groups.
   * Update a batch of asset groups with the specified parameters.
   * @param businessId Unique identifier of the requesting business.   * @param updateAssetGroupBody 
  */
  public void assetGroupUpdate (String businessId, UpdateAssetGroupBody updateAssetGroupBody, final Response.Listener<UpdateAssetGroupResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = updateAssetGroupBody;

    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling assetGroupUpdate",
        new ApiException(400, "Missing the required parameter 'businessId' when calling assetGroupUpdate"));
    }
    // verify the required parameter 'updateAssetGroupBody' is set
    if (updateAssetGroupBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'updateAssetGroupBody' when calling assetGroupUpdate",
        new ApiException(400, "Missing the required parameter 'updateAssetGroupBody' when calling assetGroupUpdate"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/asset_groups".replaceAll("\\{format\\}","json").replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UpdateAssetGroupResponse) ApiInvoker.deserialize(localVarResponse,  "", UpdateAssetGroupResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get members with access to asset
  * Get all the members the requesting business has granted access to on the given asset.
   * @param businessId Unique identifier of the requesting business.
   * @param assetId Unique identifier of a business asset.
   * @param bookmark Cursor used to fetch the next page of items
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned.
   * @return BusinessAssetMembersGet200Response
  */
  public BusinessAssetMembersGet200Response businessAssetMembersGet (String businessId, String assetId, String bookmark, Integer pageSize, Integer startIndex) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling businessAssetMembersGet",
        new ApiException(400, "Missing the required parameter 'businessId' when calling businessAssetMembersGet"));
    }
    // verify the required parameter 'assetId' is set
    if (assetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'assetId' when calling businessAssetMembersGet",
        new ApiException(400, "Missing the required parameter 'assetId' when calling businessAssetMembersGet"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/assets/{asset_id}/members".replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString())).replaceAll("\\{" + "asset_id" + "\\}", apiInvoker.escapeString(assetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_index", startIndex));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (BusinessAssetMembersGet200Response) ApiInvoker.deserialize(localVarResponse, "", BusinessAssetMembersGet200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get members with access to asset
   * Get all the members the requesting business has granted access to on the given asset.
   * @param businessId Unique identifier of the requesting business.   * @param assetId Unique identifier of a business asset.   * @param bookmark Cursor used to fetch the next page of items   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.   * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned.
  */
  public void businessAssetMembersGet (String businessId, String assetId, String bookmark, Integer pageSize, Integer startIndex, final Response.Listener<BusinessAssetMembersGet200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling businessAssetMembersGet",
        new ApiException(400, "Missing the required parameter 'businessId' when calling businessAssetMembersGet"));
    }
    // verify the required parameter 'assetId' is set
    if (assetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'assetId' when calling businessAssetMembersGet",
        new ApiException(400, "Missing the required parameter 'assetId' when calling businessAssetMembersGet"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/assets/{asset_id}/members".replaceAll("\\{format\\}","json").replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString())).replaceAll("\\{" + "asset_id" + "\\}", apiInvoker.escapeString(assetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_index", startIndex));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BusinessAssetMembersGet200Response) ApiInvoker.deserialize(localVarResponse,  "", BusinessAssetMembersGet200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get partners with access to asset
  * Get all the partners the requesting business has granted access to on the given asset. Note: If the asset has been shared with you, an empty array will be returned. This is because an asset shared with you cannot be shared with a different partner.
   * @param businessId Unique identifier of the requesting business.
   * @param assetId Unique identifier of a business asset.
   * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned.
   * @param bookmark Cursor used to fetch the next page of items
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @return BusinessAssetPartnersGet200Response
  */
  public BusinessAssetPartnersGet200Response businessAssetPartnersGet (String businessId, String assetId, Integer startIndex, String bookmark, Integer pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling businessAssetPartnersGet",
        new ApiException(400, "Missing the required parameter 'businessId' when calling businessAssetPartnersGet"));
    }
    // verify the required parameter 'assetId' is set
    if (assetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'assetId' when calling businessAssetPartnersGet",
        new ApiException(400, "Missing the required parameter 'assetId' when calling businessAssetPartnersGet"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/assets/{asset_id}/partners".replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString())).replaceAll("\\{" + "asset_id" + "\\}", apiInvoker.escapeString(assetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_index", startIndex));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (BusinessAssetPartnersGet200Response) ApiInvoker.deserialize(localVarResponse, "", BusinessAssetPartnersGet200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get partners with access to asset
   * Get all the partners the requesting business has granted access to on the given asset. Note: If the asset has been shared with you, an empty array will be returned. This is because an asset shared with you cannot be shared with a different partner.
   * @param businessId Unique identifier of the requesting business.   * @param assetId Unique identifier of a business asset.   * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned.   * @param bookmark Cursor used to fetch the next page of items   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
  */
  public void businessAssetPartnersGet (String businessId, String assetId, Integer startIndex, String bookmark, Integer pageSize, final Response.Listener<BusinessAssetPartnersGet200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling businessAssetPartnersGet",
        new ApiException(400, "Missing the required parameter 'businessId' when calling businessAssetPartnersGet"));
    }
    // verify the required parameter 'assetId' is set
    if (assetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'assetId' when calling businessAssetPartnersGet",
        new ApiException(400, "Missing the required parameter 'assetId' when calling businessAssetPartnersGet"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/assets/{asset_id}/partners".replaceAll("\\{format\\}","json").replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString())).replaceAll("\\{" + "asset_id" + "\\}", apiInvoker.escapeString(assetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_index", startIndex));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BusinessAssetPartnersGet200Response) ApiInvoker.deserialize(localVarResponse,  "", BusinessAssetPartnersGet200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List business assets
  * Get all the assets the requesting business has access to. This includes assets the business owns and assets the business has access to through partnerships.
   * @param businessId Unique identifier of the requesting business.
   * @param permissions A list of asset permissions used to filter the assets. Only assets where the requesting business has at least one of the specified permissions will be returned.
   * @param childAssetId A child asset unique identifier. Used to fetch asset groups that contain the asset id as a child.
   * @param assetGroupId An asset group unique identifier. Used to fetch assets contained within the specified asset group.
   * @param assetType A resource type to filter the assets by. Only assets of the specified type will be returned.
   * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned.
   * @param bookmark Cursor used to fetch the next page of items
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @return BusinessAssetsGet200Response
  */
  public BusinessAssetsGet200Response businessAssetsGet (String businessId, List<PermissionsWithOwner> permissions, String childAssetId, String assetGroupId, String assetType, Integer startIndex, String bookmark, Integer pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling businessAssetsGet",
        new ApiException(400, "Missing the required parameter 'businessId' when calling businessAssetsGet"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/assets".replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "permissions", permissions));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "child_asset_id", childAssetId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "asset_group_id", assetGroupId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "asset_type", assetType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_index", startIndex));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (BusinessAssetsGet200Response) ApiInvoker.deserialize(localVarResponse, "", BusinessAssetsGet200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List business assets
   * Get all the assets the requesting business has access to. This includes assets the business owns and assets the business has access to through partnerships.
   * @param businessId Unique identifier of the requesting business.   * @param permissions A list of asset permissions used to filter the assets. Only assets where the requesting business has at least one of the specified permissions will be returned.   * @param childAssetId A child asset unique identifier. Used to fetch asset groups that contain the asset id as a child.   * @param assetGroupId An asset group unique identifier. Used to fetch assets contained within the specified asset group.   * @param assetType A resource type to filter the assets by. Only assets of the specified type will be returned.   * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned.   * @param bookmark Cursor used to fetch the next page of items   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
  */
  public void businessAssetsGet (String businessId, List<PermissionsWithOwner> permissions, String childAssetId, String assetGroupId, String assetType, Integer startIndex, String bookmark, Integer pageSize, final Response.Listener<BusinessAssetsGet200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling businessAssetsGet",
        new ApiException(400, "Missing the required parameter 'businessId' when calling businessAssetsGet"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/assets".replaceAll("\\{format\\}","json").replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "permissions", permissions));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "child_asset_id", childAssetId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "asset_group_id", assetGroupId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "asset_type", assetType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_index", startIndex));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BusinessAssetsGet200Response) ApiInvoker.deserialize(localVarResponse,  "", BusinessAssetsGet200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get assets assigned to a member
  * Get assets on which you assigned asset permissions to the given member. Can be used to: - get all assets, regardless of asset type or - get assets of one asset type by using the asset_type query. The return response will include the permissions the member has to that asset and the asset type.
   * @param businessId Unique identifier of the requesting business.
   * @param memberId The member id to fetch assets for.
   * @param assetType A resource type to filter the assets by. Only assets of the specified type will be returned.
   * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned.
   * @param bookmark Cursor used to fetch the next page of items
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @return BusinessMemberAssetsGet200Response
  */
  public BusinessMemberAssetsGet200Response businessMemberAssetsGet (String businessId, String memberId, String assetType, Integer startIndex, String bookmark, Integer pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling businessMemberAssetsGet",
        new ApiException(400, "Missing the required parameter 'businessId' when calling businessMemberAssetsGet"));
    }
    // verify the required parameter 'memberId' is set
    if (memberId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'memberId' when calling businessMemberAssetsGet",
        new ApiException(400, "Missing the required parameter 'memberId' when calling businessMemberAssetsGet"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/members/{member_id}/assets".replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString())).replaceAll("\\{" + "member_id" + "\\}", apiInvoker.escapeString(memberId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "asset_type", assetType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_index", startIndex));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (BusinessMemberAssetsGet200Response) ApiInvoker.deserialize(localVarResponse, "", BusinessMemberAssetsGet200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get assets assigned to a member
   * Get assets on which you assigned asset permissions to the given member. Can be used to: - get all assets, regardless of asset type or - get assets of one asset type by using the asset_type query. The return response will include the permissions the member has to that asset and the asset type.
   * @param businessId Unique identifier of the requesting business.   * @param memberId The member id to fetch assets for.   * @param assetType A resource type to filter the assets by. Only assets of the specified type will be returned.   * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned.   * @param bookmark Cursor used to fetch the next page of items   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
  */
  public void businessMemberAssetsGet (String businessId, String memberId, String assetType, Integer startIndex, String bookmark, Integer pageSize, final Response.Listener<BusinessMemberAssetsGet200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling businessMemberAssetsGet",
        new ApiException(400, "Missing the required parameter 'businessId' when calling businessMemberAssetsGet"));
    }
    // verify the required parameter 'memberId' is set
    if (memberId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'memberId' when calling businessMemberAssetsGet",
        new ApiException(400, "Missing the required parameter 'memberId' when calling businessMemberAssetsGet"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/members/{member_id}/assets".replaceAll("\\{format\\}","json").replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString())).replaceAll("\\{" + "member_id" + "\\}", apiInvoker.escapeString(memberId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "asset_type", assetType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_index", startIndex));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BusinessMemberAssetsGet200Response) ApiInvoker.deserialize(localVarResponse,  "", BusinessMemberAssetsGet200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete member access to asset
  * Terminate multiple members&#39; access to an asset.
   * @param businessId Unique identifier of the requesting business.
   * @param businessMembersAssetAccessDeleteRequest List member assset permissions to delete.
   * @return DeleteMemberAccessResultsResponseArray
  */
  public DeleteMemberAccessResultsResponseArray businessMembersAssetAccessDelete (String businessId, BusinessMembersAssetAccessDeleteRequest businessMembersAssetAccessDeleteRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = businessMembersAssetAccessDeleteRequest;
    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling businessMembersAssetAccessDelete",
        new ApiException(400, "Missing the required parameter 'businessId' when calling businessMembersAssetAccessDelete"));
    }
    // verify the required parameter 'businessMembersAssetAccessDeleteRequest' is set
    if (businessMembersAssetAccessDeleteRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessMembersAssetAccessDeleteRequest' when calling businessMembersAssetAccessDelete",
        new ApiException(400, "Missing the required parameter 'businessMembersAssetAccessDeleteRequest' when calling businessMembersAssetAccessDelete"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/members/assets/access".replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (DeleteMemberAccessResultsResponseArray) ApiInvoker.deserialize(localVarResponse, "", DeleteMemberAccessResultsResponseArray.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete member access to asset
   * Terminate multiple members&#39; access to an asset.
   * @param businessId Unique identifier of the requesting business.   * @param businessMembersAssetAccessDeleteRequest List member assset permissions to delete.
  */
  public void businessMembersAssetAccessDelete (String businessId, BusinessMembersAssetAccessDeleteRequest businessMembersAssetAccessDeleteRequest, final Response.Listener<DeleteMemberAccessResultsResponseArray> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = businessMembersAssetAccessDeleteRequest;

    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling businessMembersAssetAccessDelete",
        new ApiException(400, "Missing the required parameter 'businessId' when calling businessMembersAssetAccessDelete"));
    }
    // verify the required parameter 'businessMembersAssetAccessDeleteRequest' is set
    if (businessMembersAssetAccessDeleteRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessMembersAssetAccessDeleteRequest' when calling businessMembersAssetAccessDelete",
        new ApiException(400, "Missing the required parameter 'businessMembersAssetAccessDeleteRequest' when calling businessMembersAssetAccessDelete"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/members/assets/access".replaceAll("\\{format\\}","json").replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DeleteMemberAccessResultsResponseArray) ApiInvoker.deserialize(localVarResponse,  "", DeleteMemberAccessResultsResponseArray.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Assign/Update member asset permissions
  * Grant multiple members access to assets and/or update multiple member&#39;s exisiting permissions to an asset. Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE. 
   * @param businessId Unique identifier of the requesting business.
   * @param updateMemberAssetAccessBody List of member asset permissions to create or update.
   * @return UpdateMemberAssetsResultsResponseArray
  */
  public UpdateMemberAssetsResultsResponseArray businessMembersAssetAccessUpdate (String businessId, UpdateMemberAssetAccessBody updateMemberAssetAccessBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = updateMemberAssetAccessBody;
    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling businessMembersAssetAccessUpdate",
        new ApiException(400, "Missing the required parameter 'businessId' when calling businessMembersAssetAccessUpdate"));
    }
    // verify the required parameter 'updateMemberAssetAccessBody' is set
    if (updateMemberAssetAccessBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'updateMemberAssetAccessBody' when calling businessMembersAssetAccessUpdate",
        new ApiException(400, "Missing the required parameter 'updateMemberAssetAccessBody' when calling businessMembersAssetAccessUpdate"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/members/assets/access".replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UpdateMemberAssetsResultsResponseArray) ApiInvoker.deserialize(localVarResponse, "", UpdateMemberAssetsResultsResponseArray.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Assign/Update member asset permissions
   * Grant multiple members access to assets and/or update multiple member&#39;s exisiting permissions to an asset. Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE. 
   * @param businessId Unique identifier of the requesting business.   * @param updateMemberAssetAccessBody List of member asset permissions to create or update.
  */
  public void businessMembersAssetAccessUpdate (String businessId, UpdateMemberAssetAccessBody updateMemberAssetAccessBody, final Response.Listener<UpdateMemberAssetsResultsResponseArray> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = updateMemberAssetAccessBody;

    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling businessMembersAssetAccessUpdate",
        new ApiException(400, "Missing the required parameter 'businessId' when calling businessMembersAssetAccessUpdate"));
    }
    // verify the required parameter 'updateMemberAssetAccessBody' is set
    if (updateMemberAssetAccessBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'updateMemberAssetAccessBody' when calling businessMembersAssetAccessUpdate",
        new ApiException(400, "Missing the required parameter 'updateMemberAssetAccessBody' when calling businessMembersAssetAccessUpdate"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/members/assets/access".replaceAll("\\{format\\}","json").replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UpdateMemberAssetsResultsResponseArray) ApiInvoker.deserialize(localVarResponse,  "", UpdateMemberAssetsResultsResponseArray.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get assets assigned to a partner or assets assigned by a partner
  * Can be used to get the business assets your partner has granted you access to or the business assets you have granted your partner access to. If you specify: - partner_type&#x3D;INTERNAL, you will retrieve your business assets that the partner has access to. - partner_type&#x3D;EXTERNAL, you will retrieve the partner&#39;s business assets that the partner has granted you access to.
   * @param businessId Unique identifier of the requesting business.
   * @param partnerId The partner id to be bound to the Business
   * @param partnerType Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset.
   * @param assetType A resource type to filter the assets by. Only assets of the specified type will be returned.
   * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned.
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param bookmark Cursor used to fetch the next page of items
   * @return BusinessPartnerAssetAccessGet200Response
  */
  public BusinessPartnerAssetAccessGet200Response businessPartnerAssetAccessGet (String businessId, String partnerId, PartnerType partnerType, String assetType, Integer startIndex, Integer pageSize, String bookmark) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling businessPartnerAssetAccessGet",
        new ApiException(400, "Missing the required parameter 'businessId' when calling businessPartnerAssetAccessGet"));
    }
    // verify the required parameter 'partnerId' is set
    if (partnerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'partnerId' when calling businessPartnerAssetAccessGet",
        new ApiException(400, "Missing the required parameter 'partnerId' when calling businessPartnerAssetAccessGet"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/partners/{partner_id}/assets".replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString())).replaceAll("\\{" + "partner_id" + "\\}", apiInvoker.escapeString(partnerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "partner_type", partnerType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "asset_type", assetType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_index", startIndex));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (BusinessPartnerAssetAccessGet200Response) ApiInvoker.deserialize(localVarResponse, "", BusinessPartnerAssetAccessGet200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get assets assigned to a partner or assets assigned by a partner
   * Can be used to get the business assets your partner has granted you access to or the business assets you have granted your partner access to. If you specify: - partner_type&#x3D;INTERNAL, you will retrieve your business assets that the partner has access to. - partner_type&#x3D;EXTERNAL, you will retrieve the partner&#39;s business assets that the partner has granted you access to.
   * @param businessId Unique identifier of the requesting business.   * @param partnerId The partner id to be bound to the Business   * @param partnerType Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset.   * @param assetType A resource type to filter the assets by. Only assets of the specified type will be returned.   * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned.   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.   * @param bookmark Cursor used to fetch the next page of items
  */
  public void businessPartnerAssetAccessGet (String businessId, String partnerId, PartnerType partnerType, String assetType, Integer startIndex, Integer pageSize, String bookmark, final Response.Listener<BusinessPartnerAssetAccessGet200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling businessPartnerAssetAccessGet",
        new ApiException(400, "Missing the required parameter 'businessId' when calling businessPartnerAssetAccessGet"));
    }
    // verify the required parameter 'partnerId' is set
    if (partnerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'partnerId' when calling businessPartnerAssetAccessGet",
        new ApiException(400, "Missing the required parameter 'partnerId' when calling businessPartnerAssetAccessGet"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/partners/{partner_id}/assets".replaceAll("\\{format\\}","json").replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString())).replaceAll("\\{" + "partner_id" + "\\}", apiInvoker.escapeString(partnerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "partner_type", partnerType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "asset_type", assetType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_index", startIndex));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bookmark", bookmark));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BusinessPartnerAssetAccessGet200Response) ApiInvoker.deserialize(localVarResponse,  "", BusinessPartnerAssetAccessGet200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete partner access to asset
  * Terminate multiple partners&#39; access to an asset. If - partner_type&#x3D;INTERNAL: You will terminate a partner&#39;s asset access to your business assets. - partner_type&#x3D;EXTERNAL: You will terminate your own access to your partner&#39;s business assets.
   * @param businessId Unique identifier of the requesting business.
   * @param deletePartnerAssetAccessBody 
   * @return DeletePartnerAssetsResultsResponseArray
  */
  public DeletePartnerAssetsResultsResponseArray deletePartnerAssetAccessHandlerImpl (String businessId, DeletePartnerAssetAccessBody deletePartnerAssetAccessBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = deletePartnerAssetAccessBody;
    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling deletePartnerAssetAccessHandlerImpl",
        new ApiException(400, "Missing the required parameter 'businessId' when calling deletePartnerAssetAccessHandlerImpl"));
    }
    // verify the required parameter 'deletePartnerAssetAccessBody' is set
    if (deletePartnerAssetAccessBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deletePartnerAssetAccessBody' when calling deletePartnerAssetAccessHandlerImpl",
        new ApiException(400, "Missing the required parameter 'deletePartnerAssetAccessBody' when calling deletePartnerAssetAccessHandlerImpl"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/partners/assets".replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (DeletePartnerAssetsResultsResponseArray) ApiInvoker.deserialize(localVarResponse, "", DeletePartnerAssetsResultsResponseArray.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete partner access to asset
   * Terminate multiple partners&#39; access to an asset. If - partner_type&#x3D;INTERNAL: You will terminate a partner&#39;s asset access to your business assets. - partner_type&#x3D;EXTERNAL: You will terminate your own access to your partner&#39;s business assets.
   * @param businessId Unique identifier of the requesting business.   * @param deletePartnerAssetAccessBody 
  */
  public void deletePartnerAssetAccessHandlerImpl (String businessId, DeletePartnerAssetAccessBody deletePartnerAssetAccessBody, final Response.Listener<DeletePartnerAssetsResultsResponseArray> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = deletePartnerAssetAccessBody;

    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling deletePartnerAssetAccessHandlerImpl",
        new ApiException(400, "Missing the required parameter 'businessId' when calling deletePartnerAssetAccessHandlerImpl"));
    }
    // verify the required parameter 'deletePartnerAssetAccessBody' is set
    if (deletePartnerAssetAccessBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deletePartnerAssetAccessBody' when calling deletePartnerAssetAccessHandlerImpl",
        new ApiException(400, "Missing the required parameter 'deletePartnerAssetAccessBody' when calling deletePartnerAssetAccessHandlerImpl"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/partners/assets".replaceAll("\\{format\\}","json").replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DeletePartnerAssetsResultsResponseArray) ApiInvoker.deserialize(localVarResponse,  "", DeletePartnerAssetsResultsResponseArray.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Assign/Update partner asset permissions
  * Grant multiple partners access to assets and/or update multiple partner&#39;s exisiting permissions to an asset. If your partner already had permissions on the asset, they will be overriden with the new permissions you assign to them. To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview  Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE.
   * @param businessId Unique identifier of the requesting business.
   * @param updatePartnerAssetAccessBody A list of assets and permissions to assign to your partners.
   * @return UpdatePartnerAssetsResultsResponseArray
  */
  public UpdatePartnerAssetsResultsResponseArray updatePartnerAssetAccessHandlerImpl (String businessId, UpdatePartnerAssetAccessBody updatePartnerAssetAccessBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = updatePartnerAssetAccessBody;
    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling updatePartnerAssetAccessHandlerImpl",
        new ApiException(400, "Missing the required parameter 'businessId' when calling updatePartnerAssetAccessHandlerImpl"));
    }
    // verify the required parameter 'updatePartnerAssetAccessBody' is set
    if (updatePartnerAssetAccessBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'updatePartnerAssetAccessBody' when calling updatePartnerAssetAccessHandlerImpl",
        new ApiException(400, "Missing the required parameter 'updatePartnerAssetAccessBody' when calling updatePartnerAssetAccessHandlerImpl"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/partners/assets".replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UpdatePartnerAssetsResultsResponseArray) ApiInvoker.deserialize(localVarResponse, "", UpdatePartnerAssetsResultsResponseArray.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Assign/Update partner asset permissions
   * Grant multiple partners access to assets and/or update multiple partner&#39;s exisiting permissions to an asset. If your partner already had permissions on the asset, they will be overriden with the new permissions you assign to them. To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview  Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE.
   * @param businessId Unique identifier of the requesting business.   * @param updatePartnerAssetAccessBody A list of assets and permissions to assign to your partners.
  */
  public void updatePartnerAssetAccessHandlerImpl (String businessId, UpdatePartnerAssetAccessBody updatePartnerAssetAccessBody, final Response.Listener<UpdatePartnerAssetsResultsResponseArray> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = updatePartnerAssetAccessBody;

    // verify the required parameter 'businessId' is set
    if (businessId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'businessId' when calling updatePartnerAssetAccessHandlerImpl",
        new ApiException(400, "Missing the required parameter 'businessId' when calling updatePartnerAssetAccessHandlerImpl"));
    }
    // verify the required parameter 'updatePartnerAssetAccessBody' is set
    if (updatePartnerAssetAccessBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'updatePartnerAssetAccessBody' when calling updatePartnerAssetAccessHandlerImpl",
        new ApiException(400, "Missing the required parameter 'updatePartnerAssetAccessBody' when calling updatePartnerAssetAccessHandlerImpl"));
    }

    // create path and map variables
    String path = "/businesses/{business_id}/partners/assets".replaceAll("\\{format\\}","json").replaceAll("\\{" + "business_id" + "\\}", apiInvoker.escapeString(businessId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "pinterest_oauth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UpdatePartnerAssetsResultsResponseArray) ApiInvoker.deserialize(localVarResponse,  "", UpdatePartnerAssetsResultsResponseArray.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
