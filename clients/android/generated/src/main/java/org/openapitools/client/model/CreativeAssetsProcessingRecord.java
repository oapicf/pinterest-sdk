/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.util.*;
import org.openapitools.client.model.ItemProcessingStatus;
import org.openapitools.client.model.ItemValidationEvent;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Object describing an item processing record
 **/
@ApiModel(description = "Object describing an item processing record")
public class CreativeAssetsProcessingRecord {
  
  @SerializedName("creative_assets_id")
  private String creativeAssetsId = null;
  @SerializedName("errors")
  private List<ItemValidationEvent> errors = null;
  @SerializedName("warnings")
  private List<ItemValidationEvent> warnings = null;
  @SerializedName("status")
  private ItemProcessingStatus status = null;

  /**
   * The catalog creative assets id in the merchant namespace
   **/
  @ApiModelProperty(value = "The catalog creative assets id in the merchant namespace")
  public String getCreativeAssetsId() {
    return creativeAssetsId;
  }
  public void setCreativeAssetsId(String creativeAssetsId) {
    this.creativeAssetsId = creativeAssetsId;
  }

  /**
   * Array with the validation errors for the item processing record. A non empty errors list causes the item processing to fail.
   **/
  @ApiModelProperty(value = "Array with the validation errors for the item processing record. A non empty errors list causes the item processing to fail.")
  public List<ItemValidationEvent> getErrors() {
    return errors;
  }
  public void setErrors(List<ItemValidationEvent> errors) {
    this.errors = errors;
  }

  /**
   * Array with the validation warnings for the item processing record
   **/
  @ApiModelProperty(value = "Array with the validation warnings for the item processing record")
  public List<ItemValidationEvent> getWarnings() {
    return warnings;
  }
  public void setWarnings(List<ItemValidationEvent> warnings) {
    this.warnings = warnings;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ItemProcessingStatus getStatus() {
    return status;
  }
  public void setStatus(ItemProcessingStatus status) {
    this.status = status;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreativeAssetsProcessingRecord creativeAssetsProcessingRecord = (CreativeAssetsProcessingRecord) o;
    return (this.creativeAssetsId == null ? creativeAssetsProcessingRecord.creativeAssetsId == null : this.creativeAssetsId.equals(creativeAssetsProcessingRecord.creativeAssetsId)) &&
        (this.errors == null ? creativeAssetsProcessingRecord.errors == null : this.errors.equals(creativeAssetsProcessingRecord.errors)) &&
        (this.warnings == null ? creativeAssetsProcessingRecord.warnings == null : this.warnings.equals(creativeAssetsProcessingRecord.warnings)) &&
        (this.status == null ? creativeAssetsProcessingRecord.status == null : this.status.equals(creativeAssetsProcessingRecord.status));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.creativeAssetsId == null ? 0: this.creativeAssetsId.hashCode());
    result = 31 * result + (this.errors == null ? 0: this.errors.hashCode());
    result = 31 * result + (this.warnings == null ? 0: this.warnings.hashCode());
    result = 31 * result + (this.status == null ? 0: this.status.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreativeAssetsProcessingRecord {\n");
    
    sb.append("  creativeAssetsId: ").append(creativeAssetsId).append("\n");
    sb.append("  errors: ").append(errors).append("\n");
    sb.append("  warnings: ").append(warnings).append("\n");
    sb.append("  status: ").append(status).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
