/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIBusinessAccessAssetsApi
{
public:
	OpenAPIBusinessAccessAssetsApi();
	~OpenAPIBusinessAccessAssetsApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class AssetGroupCreateRequest;
	class AssetGroupCreateResponse;
	class AssetGroupDeleteRequest;
	class AssetGroupDeleteResponse;
	class AssetGroupUpdateRequest;
	class AssetGroupUpdateResponse;
	class BusinessAssetMembersGetRequest;
	class BusinessAssetMembersGetResponse;
	class BusinessAssetPartnersGetRequest;
	class BusinessAssetPartnersGetResponse;
	class BusinessAssetsGetRequest;
	class BusinessAssetsGetResponse;
	class BusinessMemberAssetsGetRequest;
	class BusinessMemberAssetsGetResponse;
	class BusinessMembersAssetAccessDeleteRequest;
	class BusinessMembersAssetAccessDeleteResponse;
	class BusinessMembersAssetAccessUpdateRequest;
	class BusinessMembersAssetAccessUpdateResponse;
	class BusinessPartnerAssetAccessGetRequest;
	class BusinessPartnerAssetAccessGetResponse;
	class DeletePartnerAssetAccessHandlerImplRequest;
	class DeletePartnerAssetAccessHandlerImplResponse;
	class UpdatePartnerAssetAccessHandlerImplRequest;
	class UpdatePartnerAssetAccessHandlerImplResponse;
	
    DECLARE_DELEGATE_OneParam(FAssetGroupCreateDelegate, const AssetGroupCreateResponse&);
    DECLARE_DELEGATE_OneParam(FAssetGroupDeleteDelegate, const AssetGroupDeleteResponse&);
    DECLARE_DELEGATE_OneParam(FAssetGroupUpdateDelegate, const AssetGroupUpdateResponse&);
    DECLARE_DELEGATE_OneParam(FBusinessAssetMembersGetDelegate, const BusinessAssetMembersGetResponse&);
    DECLARE_DELEGATE_OneParam(FBusinessAssetPartnersGetDelegate, const BusinessAssetPartnersGetResponse&);
    DECLARE_DELEGATE_OneParam(FBusinessAssetsGetDelegate, const BusinessAssetsGetResponse&);
    DECLARE_DELEGATE_OneParam(FBusinessMemberAssetsGetDelegate, const BusinessMemberAssetsGetResponse&);
    DECLARE_DELEGATE_OneParam(FBusinessMembersAssetAccessDeleteDelegate, const BusinessMembersAssetAccessDeleteResponse&);
    DECLARE_DELEGATE_OneParam(FBusinessMembersAssetAccessUpdateDelegate, const BusinessMembersAssetAccessUpdateResponse&);
    DECLARE_DELEGATE_OneParam(FBusinessPartnerAssetAccessGetDelegate, const BusinessPartnerAssetAccessGetResponse&);
    DECLARE_DELEGATE_OneParam(FDeletePartnerAssetAccessHandlerImplDelegate, const DeletePartnerAssetAccessHandlerImplResponse&);
    DECLARE_DELEGATE_OneParam(FUpdatePartnerAssetAccessHandlerImplDelegate, const UpdatePartnerAssetAccessHandlerImplResponse&);
    
    FHttpRequestPtr AssetGroupCreate(const AssetGroupCreateRequest& Request, const FAssetGroupCreateDelegate& Delegate = FAssetGroupCreateDelegate()) const;
    FHttpRequestPtr AssetGroupDelete(const AssetGroupDeleteRequest& Request, const FAssetGroupDeleteDelegate& Delegate = FAssetGroupDeleteDelegate()) const;
    FHttpRequestPtr AssetGroupUpdate(const AssetGroupUpdateRequest& Request, const FAssetGroupUpdateDelegate& Delegate = FAssetGroupUpdateDelegate()) const;
    FHttpRequestPtr BusinessAssetMembersGet(const BusinessAssetMembersGetRequest& Request, const FBusinessAssetMembersGetDelegate& Delegate = FBusinessAssetMembersGetDelegate()) const;
    FHttpRequestPtr BusinessAssetPartnersGet(const BusinessAssetPartnersGetRequest& Request, const FBusinessAssetPartnersGetDelegate& Delegate = FBusinessAssetPartnersGetDelegate()) const;
    FHttpRequestPtr BusinessAssetsGet(const BusinessAssetsGetRequest& Request, const FBusinessAssetsGetDelegate& Delegate = FBusinessAssetsGetDelegate()) const;
    FHttpRequestPtr BusinessMemberAssetsGet(const BusinessMemberAssetsGetRequest& Request, const FBusinessMemberAssetsGetDelegate& Delegate = FBusinessMemberAssetsGetDelegate()) const;
    FHttpRequestPtr BusinessMembersAssetAccessDelete(const BusinessMembersAssetAccessDeleteRequest& Request, const FBusinessMembersAssetAccessDeleteDelegate& Delegate = FBusinessMembersAssetAccessDeleteDelegate()) const;
    FHttpRequestPtr BusinessMembersAssetAccessUpdate(const BusinessMembersAssetAccessUpdateRequest& Request, const FBusinessMembersAssetAccessUpdateDelegate& Delegate = FBusinessMembersAssetAccessUpdateDelegate()) const;
    FHttpRequestPtr BusinessPartnerAssetAccessGet(const BusinessPartnerAssetAccessGetRequest& Request, const FBusinessPartnerAssetAccessGetDelegate& Delegate = FBusinessPartnerAssetAccessGetDelegate()) const;
    FHttpRequestPtr DeletePartnerAssetAccessHandlerImpl(const DeletePartnerAssetAccessHandlerImplRequest& Request, const FDeletePartnerAssetAccessHandlerImplDelegate& Delegate = FDeletePartnerAssetAccessHandlerImplDelegate()) const;
    FHttpRequestPtr UpdatePartnerAssetAccessHandlerImpl(const UpdatePartnerAssetAccessHandlerImplRequest& Request, const FUpdatePartnerAssetAccessHandlerImplDelegate& Delegate = FUpdatePartnerAssetAccessHandlerImplDelegate()) const;
    
private:
    void OnAssetGroupCreateResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAssetGroupCreateDelegate Delegate) const;
    void OnAssetGroupDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAssetGroupDeleteDelegate Delegate) const;
    void OnAssetGroupUpdateResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAssetGroupUpdateDelegate Delegate) const;
    void OnBusinessAssetMembersGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FBusinessAssetMembersGetDelegate Delegate) const;
    void OnBusinessAssetPartnersGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FBusinessAssetPartnersGetDelegate Delegate) const;
    void OnBusinessAssetsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FBusinessAssetsGetDelegate Delegate) const;
    void OnBusinessMemberAssetsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FBusinessMemberAssetsGetDelegate Delegate) const;
    void OnBusinessMembersAssetAccessDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FBusinessMembersAssetAccessDeleteDelegate Delegate) const;
    void OnBusinessMembersAssetAccessUpdateResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FBusinessMembersAssetAccessUpdateDelegate Delegate) const;
    void OnBusinessPartnerAssetAccessGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FBusinessPartnerAssetAccessGetDelegate Delegate) const;
    void OnDeletePartnerAssetAccessHandlerImplResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeletePartnerAssetAccessHandlerImplDelegate Delegate) const;
    void OnUpdatePartnerAssetAccessHandlerImplResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdatePartnerAssetAccessHandlerImplDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
