/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIBusinessAccessInviteApi
{
public:
	OpenAPIBusinessAccessInviteApi();
	~OpenAPIBusinessAccessInviteApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class AssetAccessRequestsCreateRequest;
	class AssetAccessRequestsCreateResponse;
	class CancelInvitesOrRequestsRequest;
	class CancelInvitesOrRequestsResponse;
	class CreateAssetInvitesRequest;
	class CreateAssetInvitesResponse;
	class CreateMembershipOrPartnershipInvitesRequest;
	class CreateMembershipOrPartnershipInvitesResponse;
	class GetInvitesRequest;
	class GetInvitesResponse;
	class RespondBusinessAccessInvitesRequest;
	class RespondBusinessAccessInvitesResponse;
	
    DECLARE_DELEGATE_OneParam(FAssetAccessRequestsCreateDelegate, const AssetAccessRequestsCreateResponse&);
    DECLARE_DELEGATE_OneParam(FCancelInvitesOrRequestsDelegate, const CancelInvitesOrRequestsResponse&);
    DECLARE_DELEGATE_OneParam(FCreateAssetInvitesDelegate, const CreateAssetInvitesResponse&);
    DECLARE_DELEGATE_OneParam(FCreateMembershipOrPartnershipInvitesDelegate, const CreateMembershipOrPartnershipInvitesResponse&);
    DECLARE_DELEGATE_OneParam(FGetInvitesDelegate, const GetInvitesResponse&);
    DECLARE_DELEGATE_OneParam(FRespondBusinessAccessInvitesDelegate, const RespondBusinessAccessInvitesResponse&);
    
    FHttpRequestPtr AssetAccessRequestsCreate(const AssetAccessRequestsCreateRequest& Request, const FAssetAccessRequestsCreateDelegate& Delegate = FAssetAccessRequestsCreateDelegate()) const;
    FHttpRequestPtr CancelInvitesOrRequests(const CancelInvitesOrRequestsRequest& Request, const FCancelInvitesOrRequestsDelegate& Delegate = FCancelInvitesOrRequestsDelegate()) const;
    FHttpRequestPtr CreateAssetInvites(const CreateAssetInvitesRequest& Request, const FCreateAssetInvitesDelegate& Delegate = FCreateAssetInvitesDelegate()) const;
    FHttpRequestPtr CreateMembershipOrPartnershipInvites(const CreateMembershipOrPartnershipInvitesRequest& Request, const FCreateMembershipOrPartnershipInvitesDelegate& Delegate = FCreateMembershipOrPartnershipInvitesDelegate()) const;
    FHttpRequestPtr GetInvites(const GetInvitesRequest& Request, const FGetInvitesDelegate& Delegate = FGetInvitesDelegate()) const;
    FHttpRequestPtr RespondBusinessAccessInvites(const RespondBusinessAccessInvitesRequest& Request, const FRespondBusinessAccessInvitesDelegate& Delegate = FRespondBusinessAccessInvitesDelegate()) const;
    
private:
    void OnAssetAccessRequestsCreateResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAssetAccessRequestsCreateDelegate Delegate) const;
    void OnCancelInvitesOrRequestsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCancelInvitesOrRequestsDelegate Delegate) const;
    void OnCreateAssetInvitesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateAssetInvitesDelegate Delegate) const;
    void OnCreateMembershipOrPartnershipInvitesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateMembershipOrPartnershipInvitesDelegate Delegate) const;
    void OnGetInvitesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetInvitesDelegate Delegate) const;
    void OnRespondBusinessAccessInvitesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRespondBusinessAccessInvitesDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
