/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIAudienceSharingApi
{
public:
	OpenAPIAudienceSharingApi();
	~OpenAPIAudienceSharingApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class AdAccountsAudiencesSharedAccountsListRequest;
	class AdAccountsAudiencesSharedAccountsListResponse;
	class BusinessAccountAudiencesSharedAccountsListRequest;
	class BusinessAccountAudiencesSharedAccountsListResponse;
	class SharedAudiencesForBusinessListRequest;
	class SharedAudiencesForBusinessListResponse;
	class UpdateAdAccountToAdAccountSharedAudienceRequest;
	class UpdateAdAccountToAdAccountSharedAudienceResponse;
	class UpdateAdAccountToBusinessSharedAudienceRequest;
	class UpdateAdAccountToBusinessSharedAudienceResponse;
	class UpdateBusinessToAdAccountSharedAudienceRequest;
	class UpdateBusinessToAdAccountSharedAudienceResponse;
	class UpdateBusinessToBusinessSharedAudienceRequest;
	class UpdateBusinessToBusinessSharedAudienceResponse;
	
    DECLARE_DELEGATE_OneParam(FAdAccountsAudiencesSharedAccountsListDelegate, const AdAccountsAudiencesSharedAccountsListResponse&);
    DECLARE_DELEGATE_OneParam(FBusinessAccountAudiencesSharedAccountsListDelegate, const BusinessAccountAudiencesSharedAccountsListResponse&);
    DECLARE_DELEGATE_OneParam(FSharedAudiencesForBusinessListDelegate, const SharedAudiencesForBusinessListResponse&);
    DECLARE_DELEGATE_OneParam(FUpdateAdAccountToAdAccountSharedAudienceDelegate, const UpdateAdAccountToAdAccountSharedAudienceResponse&);
    DECLARE_DELEGATE_OneParam(FUpdateAdAccountToBusinessSharedAudienceDelegate, const UpdateAdAccountToBusinessSharedAudienceResponse&);
    DECLARE_DELEGATE_OneParam(FUpdateBusinessToAdAccountSharedAudienceDelegate, const UpdateBusinessToAdAccountSharedAudienceResponse&);
    DECLARE_DELEGATE_OneParam(FUpdateBusinessToBusinessSharedAudienceDelegate, const UpdateBusinessToBusinessSharedAudienceResponse&);
    
    FHttpRequestPtr AdAccountsAudiencesSharedAccountsList(const AdAccountsAudiencesSharedAccountsListRequest& Request, const FAdAccountsAudiencesSharedAccountsListDelegate& Delegate = FAdAccountsAudiencesSharedAccountsListDelegate()) const;
    FHttpRequestPtr BusinessAccountAudiencesSharedAccountsList(const BusinessAccountAudiencesSharedAccountsListRequest& Request, const FBusinessAccountAudiencesSharedAccountsListDelegate& Delegate = FBusinessAccountAudiencesSharedAccountsListDelegate()) const;
    FHttpRequestPtr SharedAudiencesForBusinessList(const SharedAudiencesForBusinessListRequest& Request, const FSharedAudiencesForBusinessListDelegate& Delegate = FSharedAudiencesForBusinessListDelegate()) const;
    FHttpRequestPtr UpdateAdAccountToAdAccountSharedAudience(const UpdateAdAccountToAdAccountSharedAudienceRequest& Request, const FUpdateAdAccountToAdAccountSharedAudienceDelegate& Delegate = FUpdateAdAccountToAdAccountSharedAudienceDelegate()) const;
    FHttpRequestPtr UpdateAdAccountToBusinessSharedAudience(const UpdateAdAccountToBusinessSharedAudienceRequest& Request, const FUpdateAdAccountToBusinessSharedAudienceDelegate& Delegate = FUpdateAdAccountToBusinessSharedAudienceDelegate()) const;
    FHttpRequestPtr UpdateBusinessToAdAccountSharedAudience(const UpdateBusinessToAdAccountSharedAudienceRequest& Request, const FUpdateBusinessToAdAccountSharedAudienceDelegate& Delegate = FUpdateBusinessToAdAccountSharedAudienceDelegate()) const;
    FHttpRequestPtr UpdateBusinessToBusinessSharedAudience(const UpdateBusinessToBusinessSharedAudienceRequest& Request, const FUpdateBusinessToBusinessSharedAudienceDelegate& Delegate = FUpdateBusinessToBusinessSharedAudienceDelegate()) const;
    
private:
    void OnAdAccountsAudiencesSharedAccountsListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAdAccountsAudiencesSharedAccountsListDelegate Delegate) const;
    void OnBusinessAccountAudiencesSharedAccountsListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FBusinessAccountAudiencesSharedAccountsListDelegate Delegate) const;
    void OnSharedAudiencesForBusinessListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSharedAudiencesForBusinessListDelegate Delegate) const;
    void OnUpdateAdAccountToAdAccountSharedAudienceResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateAdAccountToAdAccountSharedAudienceDelegate Delegate) const;
    void OnUpdateAdAccountToBusinessSharedAudienceResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateAdAccountToBusinessSharedAudienceDelegate Delegate) const;
    void OnUpdateBusinessToAdAccountSharedAudienceResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateBusinessToAdAccountSharedAudienceDelegate Delegate) const;
    void OnUpdateBusinessToBusinessSharedAudienceResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateBusinessToBusinessSharedAudienceDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
