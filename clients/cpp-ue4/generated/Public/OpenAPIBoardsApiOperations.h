/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPIBoardsApi.h"

#include "OpenAPIBoard.h"
#include "OpenAPIBoardSection.h"
#include "OpenAPIBoardSectionsList200Response.h"
#include "OpenAPIBoardUpdate.h"
#include "OpenAPIBoardsList200Response.h"
#include "OpenAPIBoardsListPins200Response.h"
#include "OpenAPIError.h"

namespace OpenAPI
{

/* Create board section
 *
 * Create a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
*/
class OPENAPI_API OpenAPIBoardsApi::BoardSectionsCreateRequest : public Request
{
public:
    virtual ~BoardSectionsCreateRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Unique identifier of a board. */
	FString BoardId;
	/* Create a board section. */
	OpenAPIBoardSection OpenAPIBoardSection;
	/* Unique identifier of an ad account. */
	TOptional<FString> AdAccountId;
};

class OPENAPI_API OpenAPIBoardsApi::BoardSectionsCreateResponse : public Response
{
public:
    virtual ~BoardSectionsCreateResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIBoardSection Content;
};

/* Delete board section
 *
 * Delete a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
*/
class OPENAPI_API OpenAPIBoardsApi::BoardSectionsDeleteRequest : public Request
{
public:
    virtual ~BoardSectionsDeleteRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Unique identifier of a board. */
	FString BoardId;
	/* Unique identifier of a board section. */
	FString SectionId;
	/* Unique identifier of an ad account. */
	TOptional<FString> AdAccountId;
};

class OPENAPI_API OpenAPIBoardsApi::BoardSectionsDeleteResponse : public Response
{
public:
    virtual ~BoardSectionsDeleteResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* List board sections
 *
 * Get a list of all board sections from a board owned by the \&quot;operation user_account\&quot; - or a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
*/
class OPENAPI_API OpenAPIBoardsApi::BoardSectionsListRequest : public Request
{
public:
    virtual ~BoardSectionsListRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Unique identifier of a board. */
	FString BoardId;
	/* Unique identifier of an ad account. */
	TOptional<FString> AdAccountId;
	/* Cursor used to fetch the next page of items */
	TOptional<FString> Bookmark;
	/* Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information. */
	TOptional<int32> PageSize;
};

class OPENAPI_API OpenAPIBoardsApi::BoardSectionsListResponse : public Response
{
public:
    virtual ~BoardSectionsListResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIBoardSectionsList200Response Content;
};

/* List Pins on board section
 *
 * Get a list of the Pins on a board section of a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
*/
class OPENAPI_API OpenAPIBoardsApi::BoardSectionsListPinsRequest : public Request
{
public:
    virtual ~BoardSectionsListPinsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Unique identifier of a board. */
	FString BoardId;
	/* Unique identifier of a board section. */
	FString SectionId;
	/* Unique identifier of an ad account. */
	TOptional<FString> AdAccountId;
	/* Cursor used to fetch the next page of items */
	TOptional<FString> Bookmark;
	/* Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information. */
	TOptional<int32> PageSize;
};

class OPENAPI_API OpenAPIBoardsApi::BoardSectionsListPinsResponse : public Response
{
public:
    virtual ~BoardSectionsListPinsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIBoardsListPins200Response Content;
};

/* Update board section
 *
 * Update a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
*/
class OPENAPI_API OpenAPIBoardsApi::BoardSectionsUpdateRequest : public Request
{
public:
    virtual ~BoardSectionsUpdateRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Unique identifier of a board. */
	FString BoardId;
	/* Unique identifier of a board section. */
	FString SectionId;
	/* Update a board section. */
	OpenAPIBoardSection OpenAPIBoardSection;
	/* Unique identifier of an ad account. */
	TOptional<FString> AdAccountId;
};

class OPENAPI_API OpenAPIBoardsApi::BoardSectionsUpdateResponse : public Response
{
public:
    virtual ~BoardSectionsUpdateResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIBoardSection Content;
};

/* Create board
 *
 * Create a board owned by the \&quot;operation user_account\&quot;. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
*/
class OPENAPI_API OpenAPIBoardsApi::BoardsCreateRequest : public Request
{
public:
    virtual ~BoardsCreateRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Create a board using a single board json object. */
	OpenAPIBoard OpenAPIBoard;
	/* Unique identifier of an ad account. */
	TOptional<FString> AdAccountId;
};

class OPENAPI_API OpenAPIBoardsApi::BoardsCreateResponse : public Response
{
public:
    virtual ~BoardsCreateResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIBoard Content;
};

/* Delete board
 *
 * Delete a board owned by the \&quot;operation user_account\&quot;. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
*/
class OPENAPI_API OpenAPIBoardsApi::BoardsDeleteRequest : public Request
{
public:
    virtual ~BoardsDeleteRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Unique identifier of a board. */
	FString BoardId;
	/* Unique identifier of an ad account. */
	TOptional<FString> AdAccountId;
};

class OPENAPI_API OpenAPIBoardsApi::BoardsDeleteResponse : public Response
{
public:
    virtual ~BoardsDeleteResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Get board
 *
 * Get a board owned by the operation user_account - or a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
*/
class OPENAPI_API OpenAPIBoardsApi::BoardsGetRequest : public Request
{
public:
    virtual ~BoardsGetRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Unique identifier of a board. */
	FString BoardId;
	/* Unique identifier of an ad account. */
	TOptional<FString> AdAccountId;
};

class OPENAPI_API OpenAPIBoardsApi::BoardsGetResponse : public Response
{
public:
    virtual ~BoardsGetResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIBoard Content;
};

/* List boards
 *
 * Get a list of the boards owned by the \&quot;operation user_account\&quot; + group boards where this account is a collaborator Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
*/
class OPENAPI_API OpenAPIBoardsApi::BoardsListRequest : public Request
{
public:
    virtual ~BoardsListRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Unique identifier of an ad account. */
	TOptional<FString> AdAccountId;
	/* Cursor used to fetch the next page of items */
	TOptional<FString> Bookmark;
	/* Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information. */
	TOptional<int32> PageSize;
	enum class PrivacyEnum
	{
		All,
		_Protected,
		_Public,
		Secret,
		PublicAndSecret,
  	};

	static FString EnumToString(const PrivacyEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, PrivacyEnum& EnumValue);
	/* Privacy setting for a board. */
	TOptional<PrivacyEnum> Privacy;
};

class OPENAPI_API OpenAPIBoardsApi::BoardsListResponse : public Response
{
public:
    virtual ~BoardsListResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIBoardsList200Response Content;
};

/* List Pins on board
 *
 * Get a list of the Pins on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
*/
class OPENAPI_API OpenAPIBoardsApi::BoardsListPinsRequest : public Request
{
public:
    virtual ~BoardsListPinsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Unique identifier of a board. */
	FString BoardId;
	/* Cursor used to fetch the next page of items */
	TOptional<FString> Bookmark;
	/* Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information. */
	TOptional<int32> PageSize;
	enum class CreativeTypesEnum
	{
		Regular,
		Video,
		Shopping,
		Carousel,
		MaxVideo,
		ShopThePin,
		Collection,
		Idea,
  	};

	static FString EnumToString(const CreativeTypesEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, CreativeTypesEnum& EnumValue);
	/* Pin creative types filter. </p><strong>Note:</strong> SHOP_THE_PIN has been deprecated. Please use COLLECTION instead. */
	TOptional<TArray<CreativeTypesEnum>> CreativeTypes;
	/* Unique identifier of an ad account. */
	TOptional<FString> AdAccountId;
	/* Specify whether to return 90d and lifetime Pin metrics. Total comments and total reactions are only available with lifetime Pin metrics. If Pin was created before <code>2023-03-20</code> lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then. */
	TOptional<bool> PinMetrics;
};

class OPENAPI_API OpenAPIBoardsApi::BoardsListPinsResponse : public Response
{
public:
    virtual ~BoardsListPinsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIBoardsListPins200Response Content;
};

/* Update board
 *
 * Update a board owned by the \&quot;operating user_account\&quot;. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
*/
class OPENAPI_API OpenAPIBoardsApi::BoardsUpdateRequest : public Request
{
public:
    virtual ~BoardsUpdateRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Unique identifier of a board. */
	FString BoardId;
	/* Update a board. */
	OpenAPIBoardUpdate OpenAPIBoardUpdate;
	/* Unique identifier of an ad account. */
	TOptional<FString> AdAccountId;
};

class OPENAPI_API OpenAPIBoardsApi::BoardsUpdateResponse : public Response
{
public:
    virtual ~BoardsUpdateResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIBoard Content;
};

}
