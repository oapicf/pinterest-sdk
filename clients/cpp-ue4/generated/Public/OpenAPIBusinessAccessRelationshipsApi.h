/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIBusinessAccessRelationshipsApi
{
public:
	OpenAPIBusinessAccessRelationshipsApi();
	~OpenAPIBusinessAccessRelationshipsApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class DeleteBusinessMembershipRequest;
	class DeleteBusinessMembershipResponse;
	class DeleteBusinessPartnersRequest;
	class DeleteBusinessPartnersResponse;
	class GetBusinessEmployersRequest;
	class GetBusinessEmployersResponse;
	class GetBusinessMembersRequest;
	class GetBusinessMembersResponse;
	class GetBusinessPartnersRequest;
	class GetBusinessPartnersResponse;
	class UpdateBusinessMembershipsRequest;
	class UpdateBusinessMembershipsResponse;
	
    DECLARE_DELEGATE_OneParam(FDeleteBusinessMembershipDelegate, const DeleteBusinessMembershipResponse&);
    DECLARE_DELEGATE_OneParam(FDeleteBusinessPartnersDelegate, const DeleteBusinessPartnersResponse&);
    DECLARE_DELEGATE_OneParam(FGetBusinessEmployersDelegate, const GetBusinessEmployersResponse&);
    DECLARE_DELEGATE_OneParam(FGetBusinessMembersDelegate, const GetBusinessMembersResponse&);
    DECLARE_DELEGATE_OneParam(FGetBusinessPartnersDelegate, const GetBusinessPartnersResponse&);
    DECLARE_DELEGATE_OneParam(FUpdateBusinessMembershipsDelegate, const UpdateBusinessMembershipsResponse&);
    
    FHttpRequestPtr DeleteBusinessMembership(const DeleteBusinessMembershipRequest& Request, const FDeleteBusinessMembershipDelegate& Delegate = FDeleteBusinessMembershipDelegate()) const;
    FHttpRequestPtr DeleteBusinessPartners(const DeleteBusinessPartnersRequest& Request, const FDeleteBusinessPartnersDelegate& Delegate = FDeleteBusinessPartnersDelegate()) const;
    FHttpRequestPtr GetBusinessEmployers(const GetBusinessEmployersRequest& Request, const FGetBusinessEmployersDelegate& Delegate = FGetBusinessEmployersDelegate()) const;
    FHttpRequestPtr GetBusinessMembers(const GetBusinessMembersRequest& Request, const FGetBusinessMembersDelegate& Delegate = FGetBusinessMembersDelegate()) const;
    FHttpRequestPtr GetBusinessPartners(const GetBusinessPartnersRequest& Request, const FGetBusinessPartnersDelegate& Delegate = FGetBusinessPartnersDelegate()) const;
    FHttpRequestPtr UpdateBusinessMemberships(const UpdateBusinessMembershipsRequest& Request, const FUpdateBusinessMembershipsDelegate& Delegate = FUpdateBusinessMembershipsDelegate()) const;
    
private:
    void OnDeleteBusinessMembershipResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeleteBusinessMembershipDelegate Delegate) const;
    void OnDeleteBusinessPartnersResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeleteBusinessPartnersDelegate Delegate) const;
    void OnGetBusinessEmployersResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetBusinessEmployersDelegate Delegate) const;
    void OnGetBusinessMembersResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetBusinessMembersDelegate Delegate) const;
    void OnGetBusinessPartnersResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetBusinessPartnersDelegate Delegate) const;
    void OnUpdateBusinessMembershipsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateBusinessMembershipsDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
