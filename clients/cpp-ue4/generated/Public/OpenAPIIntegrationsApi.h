/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIIntegrationsApi
{
public:
	OpenAPIIntegrationsApi();
	~OpenAPIIntegrationsApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class IntegrationsCommerceDelRequest;
	class IntegrationsCommerceDelResponse;
	class IntegrationsCommerceGetRequest;
	class IntegrationsCommerceGetResponse;
	class IntegrationsCommercePatchRequest;
	class IntegrationsCommercePatchResponse;
	class IntegrationsCommercePostRequest;
	class IntegrationsCommercePostResponse;
	class IntegrationsLogsPostRequest;
	class IntegrationsLogsPostResponse;
	class IntegrationsGetByIdRequest;
	class IntegrationsGetByIdResponse;
	class IntegrationsGetListRequest;
	class IntegrationsGetListResponse;
	
    DECLARE_DELEGATE_OneParam(FIntegrationsCommerceDelDelegate, const IntegrationsCommerceDelResponse&);
    DECLARE_DELEGATE_OneParam(FIntegrationsCommerceGetDelegate, const IntegrationsCommerceGetResponse&);
    DECLARE_DELEGATE_OneParam(FIntegrationsCommercePatchDelegate, const IntegrationsCommercePatchResponse&);
    DECLARE_DELEGATE_OneParam(FIntegrationsCommercePostDelegate, const IntegrationsCommercePostResponse&);
    DECLARE_DELEGATE_OneParam(FIntegrationsLogsPostDelegate, const IntegrationsLogsPostResponse&);
    DECLARE_DELEGATE_OneParam(FIntegrationsGetByIdDelegate, const IntegrationsGetByIdResponse&);
    DECLARE_DELEGATE_OneParam(FIntegrationsGetListDelegate, const IntegrationsGetListResponse&);
    
    FHttpRequestPtr IntegrationsCommerceDel(const IntegrationsCommerceDelRequest& Request, const FIntegrationsCommerceDelDelegate& Delegate = FIntegrationsCommerceDelDelegate()) const;
    FHttpRequestPtr IntegrationsCommerceGet(const IntegrationsCommerceGetRequest& Request, const FIntegrationsCommerceGetDelegate& Delegate = FIntegrationsCommerceGetDelegate()) const;
    FHttpRequestPtr IntegrationsCommercePatch(const IntegrationsCommercePatchRequest& Request, const FIntegrationsCommercePatchDelegate& Delegate = FIntegrationsCommercePatchDelegate()) const;
    FHttpRequestPtr IntegrationsCommercePost(const IntegrationsCommercePostRequest& Request, const FIntegrationsCommercePostDelegate& Delegate = FIntegrationsCommercePostDelegate()) const;
    FHttpRequestPtr IntegrationsLogsPost(const IntegrationsLogsPostRequest& Request, const FIntegrationsLogsPostDelegate& Delegate = FIntegrationsLogsPostDelegate()) const;
    FHttpRequestPtr IntegrationsGetById(const IntegrationsGetByIdRequest& Request, const FIntegrationsGetByIdDelegate& Delegate = FIntegrationsGetByIdDelegate()) const;
    FHttpRequestPtr IntegrationsGetList(const IntegrationsGetListRequest& Request, const FIntegrationsGetListDelegate& Delegate = FIntegrationsGetListDelegate()) const;
    
private:
    void OnIntegrationsCommerceDelResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FIntegrationsCommerceDelDelegate Delegate) const;
    void OnIntegrationsCommerceGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FIntegrationsCommerceGetDelegate Delegate) const;
    void OnIntegrationsCommercePatchResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FIntegrationsCommercePatchDelegate Delegate) const;
    void OnIntegrationsCommercePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FIntegrationsCommercePostDelegate Delegate) const;
    void OnIntegrationsLogsPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FIntegrationsLogsPostDelegate Delegate) const;
    void OnIntegrationsGetByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FIntegrationsGetByIdDelegate Delegate) const;
    void OnIntegrationsGetListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FIntegrationsGetListDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
