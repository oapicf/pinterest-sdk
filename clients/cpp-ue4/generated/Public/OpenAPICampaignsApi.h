/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPICampaignsApi
{
public:
	OpenAPICampaignsApi();
	~OpenAPICampaignsApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class CampaignTargetingAnalyticsGetRequest;
	class CampaignTargetingAnalyticsGetResponse;
	class CampaignsAnalyticsRequest;
	class CampaignsAnalyticsResponse;
	class CampaignsCreateRequest;
	class CampaignsCreateResponse;
	class CampaignsGetRequest;
	class CampaignsGetResponse;
	class CampaignsListRequest;
	class CampaignsListResponse;
	class CampaignsUpdateRequest;
	class CampaignsUpdateResponse;
	
    DECLARE_DELEGATE_OneParam(FCampaignTargetingAnalyticsGetDelegate, const CampaignTargetingAnalyticsGetResponse&);
    DECLARE_DELEGATE_OneParam(FCampaignsAnalyticsDelegate, const CampaignsAnalyticsResponse&);
    DECLARE_DELEGATE_OneParam(FCampaignsCreateDelegate, const CampaignsCreateResponse&);
    DECLARE_DELEGATE_OneParam(FCampaignsGetDelegate, const CampaignsGetResponse&);
    DECLARE_DELEGATE_OneParam(FCampaignsListDelegate, const CampaignsListResponse&);
    DECLARE_DELEGATE_OneParam(FCampaignsUpdateDelegate, const CampaignsUpdateResponse&);
    
    FHttpRequestPtr CampaignTargetingAnalyticsGet(const CampaignTargetingAnalyticsGetRequest& Request, const FCampaignTargetingAnalyticsGetDelegate& Delegate = FCampaignTargetingAnalyticsGetDelegate()) const;
    FHttpRequestPtr CampaignsAnalytics(const CampaignsAnalyticsRequest& Request, const FCampaignsAnalyticsDelegate& Delegate = FCampaignsAnalyticsDelegate()) const;
    FHttpRequestPtr CampaignsCreate(const CampaignsCreateRequest& Request, const FCampaignsCreateDelegate& Delegate = FCampaignsCreateDelegate()) const;
    FHttpRequestPtr CampaignsGet(const CampaignsGetRequest& Request, const FCampaignsGetDelegate& Delegate = FCampaignsGetDelegate()) const;
    FHttpRequestPtr CampaignsList(const CampaignsListRequest& Request, const FCampaignsListDelegate& Delegate = FCampaignsListDelegate()) const;
    FHttpRequestPtr CampaignsUpdate(const CampaignsUpdateRequest& Request, const FCampaignsUpdateDelegate& Delegate = FCampaignsUpdateDelegate()) const;
    
private:
    void OnCampaignTargetingAnalyticsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCampaignTargetingAnalyticsGetDelegate Delegate) const;
    void OnCampaignsAnalyticsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCampaignsAnalyticsDelegate Delegate) const;
    void OnCampaignsCreateResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCampaignsCreateDelegate Delegate) const;
    void OnCampaignsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCampaignsGetDelegate Delegate) const;
    void OnCampaignsListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCampaignsListDelegate Delegate) const;
    void OnCampaignsUpdateResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCampaignsUpdateDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
