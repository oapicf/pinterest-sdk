/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIProductGroupPromotionsApi
{
public:
	OpenAPIProductGroupPromotionsApi();
	~OpenAPIProductGroupPromotionsApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class ProductGroupPromotionsCreateRequest;
	class ProductGroupPromotionsCreateResponse;
	class ProductGroupPromotionsGetRequest;
	class ProductGroupPromotionsGetResponse;
	class ProductGroupPromotionsListRequest;
	class ProductGroupPromotionsListResponse;
	class ProductGroupPromotionsUpdateRequest;
	class ProductGroupPromotionsUpdateResponse;
	class ProductGroupsAnalyticsRequest;
	class ProductGroupsAnalyticsResponse;
	
    DECLARE_DELEGATE_OneParam(FProductGroupPromotionsCreateDelegate, const ProductGroupPromotionsCreateResponse&);
    DECLARE_DELEGATE_OneParam(FProductGroupPromotionsGetDelegate, const ProductGroupPromotionsGetResponse&);
    DECLARE_DELEGATE_OneParam(FProductGroupPromotionsListDelegate, const ProductGroupPromotionsListResponse&);
    DECLARE_DELEGATE_OneParam(FProductGroupPromotionsUpdateDelegate, const ProductGroupPromotionsUpdateResponse&);
    DECLARE_DELEGATE_OneParam(FProductGroupsAnalyticsDelegate, const ProductGroupsAnalyticsResponse&);
    
    FHttpRequestPtr ProductGroupPromotionsCreate(const ProductGroupPromotionsCreateRequest& Request, const FProductGroupPromotionsCreateDelegate& Delegate = FProductGroupPromotionsCreateDelegate()) const;
    FHttpRequestPtr ProductGroupPromotionsGet(const ProductGroupPromotionsGetRequest& Request, const FProductGroupPromotionsGetDelegate& Delegate = FProductGroupPromotionsGetDelegate()) const;
    FHttpRequestPtr ProductGroupPromotionsList(const ProductGroupPromotionsListRequest& Request, const FProductGroupPromotionsListDelegate& Delegate = FProductGroupPromotionsListDelegate()) const;
    FHttpRequestPtr ProductGroupPromotionsUpdate(const ProductGroupPromotionsUpdateRequest& Request, const FProductGroupPromotionsUpdateDelegate& Delegate = FProductGroupPromotionsUpdateDelegate()) const;
    FHttpRequestPtr ProductGroupsAnalytics(const ProductGroupsAnalyticsRequest& Request, const FProductGroupsAnalyticsDelegate& Delegate = FProductGroupsAnalyticsDelegate()) const;
    
private:
    void OnProductGroupPromotionsCreateResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FProductGroupPromotionsCreateDelegate Delegate) const;
    void OnProductGroupPromotionsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FProductGroupPromotionsGetDelegate Delegate) const;
    void OnProductGroupPromotionsListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FProductGroupPromotionsListDelegate Delegate) const;
    void OnProductGroupPromotionsUpdateResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FProductGroupPromotionsUpdateDelegate Delegate) const;
    void OnProductGroupsAnalyticsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FProductGroupsAnalyticsDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
