/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIDeletePartnerAssetAccessBodyAccessesInner.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIDeletePartnerAssetAccessBodyAccessesInner::PartnerTypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIDeletePartnerAssetAccessBodyAccessesInner::PartnerTypeEnum::Internal:
		return TEXT("INTERNAL");
	case OpenAPIDeletePartnerAssetAccessBodyAccessesInner::PartnerTypeEnum::External:
		return TEXT("EXTERNAL");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIDeletePartnerAssetAccessBodyAccessesInner::PartnerTypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIDeletePartnerAssetAccessBodyAccessesInner::EnumToString(const OpenAPIDeletePartnerAssetAccessBodyAccessesInner::PartnerTypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIDeletePartnerAssetAccessBodyAccessesInner::PartnerTypeEnum& Value)
{
	static TMap<FString, OpenAPIDeletePartnerAssetAccessBodyAccessesInner::PartnerTypeEnum> StringToEnum = { 
		{ TEXT("INTERNAL"), OpenAPIDeletePartnerAssetAccessBodyAccessesInner::PartnerTypeEnum::Internal },
		{ TEXT("EXTERNAL"), OpenAPIDeletePartnerAssetAccessBodyAccessesInner::PartnerTypeEnum::External }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIDeletePartnerAssetAccessBodyAccessesInner::EnumFromString(const FString& EnumAsString, OpenAPIDeletePartnerAssetAccessBodyAccessesInner::PartnerTypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIDeletePartnerAssetAccessBodyAccessesInner::PartnerTypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIDeletePartnerAssetAccessBodyAccessesInner::PartnerTypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIDeletePartnerAssetAccessBodyAccessesInner::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("partner_id")); WriteJsonValue(Writer, PartnerId);
	Writer->WriteIdentifierPrefix(TEXT("asset_id")); WriteJsonValue(Writer, AssetId);
	if (PartnerType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("partner_type")); WriteJsonValue(Writer, PartnerType.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIDeletePartnerAssetAccessBodyAccessesInner::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("partner_id"), PartnerId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("asset_id"), AssetId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("partner_type"), PartnerType);

	return ParseSuccess;
}

}
