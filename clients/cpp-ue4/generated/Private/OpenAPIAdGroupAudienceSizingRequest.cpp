/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIAdGroupAudienceSizingRequest.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIAdGroupAudienceSizingRequest::CreativeTypesEnum& Value)
{
	switch (Value)
	{
	case OpenAPIAdGroupAudienceSizingRequest::CreativeTypesEnum::Regular:
		return TEXT("REGULAR");
	case OpenAPIAdGroupAudienceSizingRequest::CreativeTypesEnum::Video:
		return TEXT("VIDEO");
	case OpenAPIAdGroupAudienceSizingRequest::CreativeTypesEnum::Shopping:
		return TEXT("SHOPPING");
	case OpenAPIAdGroupAudienceSizingRequest::CreativeTypesEnum::Carousel:
		return TEXT("CAROUSEL");
	case OpenAPIAdGroupAudienceSizingRequest::CreativeTypesEnum::MaxVideo:
		return TEXT("MAX_VIDEO");
	case OpenAPIAdGroupAudienceSizingRequest::CreativeTypesEnum::ShopThePin:
		return TEXT("SHOP_THE_PIN");
	case OpenAPIAdGroupAudienceSizingRequest::CreativeTypesEnum::Collection:
		return TEXT("COLLECTION");
	case OpenAPIAdGroupAudienceSizingRequest::CreativeTypesEnum::Idea:
		return TEXT("IDEA");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIAdGroupAudienceSizingRequest::CreativeTypesEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIAdGroupAudienceSizingRequest::EnumToString(const OpenAPIAdGroupAudienceSizingRequest::CreativeTypesEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIAdGroupAudienceSizingRequest::CreativeTypesEnum& Value)
{
	static TMap<FString, OpenAPIAdGroupAudienceSizingRequest::CreativeTypesEnum> StringToEnum = { 
		{ TEXT("REGULAR"), OpenAPIAdGroupAudienceSizingRequest::CreativeTypesEnum::Regular },
		{ TEXT("VIDEO"), OpenAPIAdGroupAudienceSizingRequest::CreativeTypesEnum::Video },
		{ TEXT("SHOPPING"), OpenAPIAdGroupAudienceSizingRequest::CreativeTypesEnum::Shopping },
		{ TEXT("CAROUSEL"), OpenAPIAdGroupAudienceSizingRequest::CreativeTypesEnum::Carousel },
		{ TEXT("MAX_VIDEO"), OpenAPIAdGroupAudienceSizingRequest::CreativeTypesEnum::MaxVideo },
		{ TEXT("SHOP_THE_PIN"), OpenAPIAdGroupAudienceSizingRequest::CreativeTypesEnum::ShopThePin },
		{ TEXT("COLLECTION"), OpenAPIAdGroupAudienceSizingRequest::CreativeTypesEnum::Collection },
		{ TEXT("IDEA"), OpenAPIAdGroupAudienceSizingRequest::CreativeTypesEnum::Idea }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIAdGroupAudienceSizingRequest::EnumFromString(const FString& EnumAsString, OpenAPIAdGroupAudienceSizingRequest::CreativeTypesEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIAdGroupAudienceSizingRequest::CreativeTypesEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIAdGroupAudienceSizingRequest::CreativeTypesEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIAdGroupAudienceSizingRequest::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (AutoTargetingEnabled.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("auto_targeting_enabled")); WriteJsonValue(Writer, AutoTargetingEnabled.GetValue());
	}
	if (PlacementGroup.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("placement_group")); WriteJsonValue(Writer, PlacementGroup.GetValue());
	}
	if (CreativeTypes.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("creative_types")); WriteJsonValue(Writer, CreativeTypes.GetValue());
	}
	if (TargetingSpec.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("targeting_spec")); WriteJsonValue(Writer, TargetingSpec.GetValue());
	}
	if (ProductGroupIds.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("product_group_ids")); WriteJsonValue(Writer, ProductGroupIds.GetValue());
	}
	if (Keywords.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("keywords")); WriteJsonValue(Writer, Keywords.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIAdGroupAudienceSizingRequest::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("auto_targeting_enabled"), AutoTargetingEnabled);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("placement_group"), PlacementGroup);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("creative_types"), CreativeTypes);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("targeting_spec"), TargetingSpec);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("product_group_ids"), ProductGroupIds);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("keywords"), Keywords);

	return ParseSuccess;
}

}
