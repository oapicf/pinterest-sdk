/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIAccount.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIAccount::AccountTypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIAccount::AccountTypeEnum::Pinner:
		return TEXT("PINNER");
	case OpenAPIAccount::AccountTypeEnum::Business:
		return TEXT("BUSINESS");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIAccount::AccountTypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIAccount::EnumToString(const OpenAPIAccount::AccountTypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIAccount::AccountTypeEnum& Value)
{
	static TMap<FString, OpenAPIAccount::AccountTypeEnum> StringToEnum = { 
		{ TEXT("PINNER"), OpenAPIAccount::AccountTypeEnum::Pinner },
		{ TEXT("BUSINESS"), OpenAPIAccount::AccountTypeEnum::Business }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIAccount::EnumFromString(const FString& EnumAsString, OpenAPIAccount::AccountTypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIAccount::AccountTypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIAccount::AccountTypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIAccount::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (AccountType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("account_type")); WriteJsonValue(Writer, AccountType.GetValue());
	}
	if (Id.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id.GetValue());
	}
	if (ProfileImage.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("profile_image")); WriteJsonValue(Writer, ProfileImage.GetValue());
	}
	if (WebsiteUrl.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("website_url")); WriteJsonValue(Writer, WebsiteUrl.GetValue());
	}
	if (Username.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("username")); WriteJsonValue(Writer, Username.GetValue());
	}
	if (About.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("about")); WriteJsonValue(Writer, About.GetValue());
	}
	if (BusinessName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("business_name")); WriteJsonValue(Writer, BusinessName.GetValue());
	}
	if (BoardCount.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("board_count")); WriteJsonValue(Writer, BoardCount.GetValue());
	}
	if (PinCount.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("pin_count")); WriteJsonValue(Writer, PinCount.GetValue());
	}
	if (FollowerCount.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("follower_count")); WriteJsonValue(Writer, FollowerCount.GetValue());
	}
	if (FollowingCount.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("following_count")); WriteJsonValue(Writer, FollowingCount.GetValue());
	}
	if (MonthlyViews.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("monthly_views")); WriteJsonValue(Writer, MonthlyViews.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIAccount::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("account_type"), AccountType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("profile_image"), ProfileImage);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("website_url"), WebsiteUrl);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("username"), Username);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("about"), About);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("business_name"), BusinessName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("board_count"), BoardCount);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("pin_count"), PinCount);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("follower_count"), FollowerCount);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("following_count"), FollowingCount);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("monthly_views"), MonthlyViews);

	return ParseSuccess;
}

}
