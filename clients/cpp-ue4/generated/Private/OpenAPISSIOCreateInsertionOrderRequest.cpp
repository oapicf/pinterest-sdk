/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPISSIOCreateInsertionOrderRequest.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPISSIOCreateInsertionOrderRequest::OrderLineTypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPISSIOCreateInsertionOrderRequest::OrderLineTypeEnum::Budget:
		return TEXT("BUDGET");
	case OpenAPISSIOCreateInsertionOrderRequest::OrderLineTypeEnum::Perpetuals:
		return TEXT("PERPETUALS");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPISSIOCreateInsertionOrderRequest::OrderLineTypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPISSIOCreateInsertionOrderRequest::EnumToString(const OpenAPISSIOCreateInsertionOrderRequest::OrderLineTypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPISSIOCreateInsertionOrderRequest::OrderLineTypeEnum& Value)
{
	static TMap<FString, OpenAPISSIOCreateInsertionOrderRequest::OrderLineTypeEnum> StringToEnum = { 
		{ TEXT("BUDGET"), OpenAPISSIOCreateInsertionOrderRequest::OrderLineTypeEnum::Budget },
		{ TEXT("PERPETUALS"), OpenAPISSIOCreateInsertionOrderRequest::OrderLineTypeEnum::Perpetuals }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPISSIOCreateInsertionOrderRequest::EnumFromString(const FString& EnumAsString, OpenAPISSIOCreateInsertionOrderRequest::OrderLineTypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPISSIOCreateInsertionOrderRequest::OrderLineTypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPISSIOCreateInsertionOrderRequest::OrderLineTypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPISSIOCreateInsertionOrderRequest::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("start_date")); WriteJsonValue(Writer, StartDate);
	if (EndDate.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("end_date")); WriteJsonValue(Writer, EndDate.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("po_number")); WriteJsonValue(Writer, PoNumber);
	if (BudgetAmount.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("budget_amount")); WriteJsonValue(Writer, BudgetAmount.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("billing_contact_firstname")); WriteJsonValue(Writer, BillingContactFirstname);
	Writer->WriteIdentifierPrefix(TEXT("billing_contact_lastname")); WriteJsonValue(Writer, BillingContactLastname);
	Writer->WriteIdentifierPrefix(TEXT("billing_contact_email")); WriteJsonValue(Writer, BillingContactEmail);
	Writer->WriteIdentifierPrefix(TEXT("media_contact_firstname")); WriteJsonValue(Writer, MediaContactFirstname);
	Writer->WriteIdentifierPrefix(TEXT("media_contact_lastname")); WriteJsonValue(Writer, MediaContactLastname);
	Writer->WriteIdentifierPrefix(TEXT("media_contact_email")); WriteJsonValue(Writer, MediaContactEmail);
	if (AgencyLink.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("agency_link")); WriteJsonValue(Writer, AgencyLink.GetValue());
	}
	if (UserEmail.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("user_email")); WriteJsonValue(Writer, UserEmail.GetValue());
	}
	if (AcceptedTermsTime.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("accepted_terms_time")); WriteJsonValue(Writer, AcceptedTermsTime.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("pmp_id")); WriteJsonValue(Writer, PmpId);
	Writer->WriteIdentifierPrefix(TEXT("order_name")); WriteJsonValue(Writer, OrderName);
	Writer->WriteIdentifierPrefix(TEXT("order_line_type")); WriteJsonValue(Writer, OrderLineType);
	Writer->WriteIdentifierPrefix(TEXT("accepted_terms_id")); WriteJsonValue(Writer, AcceptedTermsId);
	Writer->WriteIdentifierPrefix(TEXT("billto_company_id")); WriteJsonValue(Writer, BilltoCompanyId);
	Writer->WriteIdentifierPrefix(TEXT("billto_business_address_id")); WriteJsonValue(Writer, BilltoBusinessAddressId);
	Writer->WriteIdentifierPrefix(TEXT("billto_billing_address_id")); WriteJsonValue(Writer, BilltoBillingAddressId);
	if (EstimatedMonthlySpend.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("estimated_monthly_spend")); WriteJsonValue(Writer, EstimatedMonthlySpend.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("currency_info")); WriteJsonValue(Writer, CurrencyInfo);
	Writer->WriteObjectEnd();
}

bool OpenAPISSIOCreateInsertionOrderRequest::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("start_date"), StartDate);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("end_date"), EndDate);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("po_number"), PoNumber);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("budget_amount"), BudgetAmount);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("billing_contact_firstname"), BillingContactFirstname);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("billing_contact_lastname"), BillingContactLastname);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("billing_contact_email"), BillingContactEmail);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("media_contact_firstname"), MediaContactFirstname);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("media_contact_lastname"), MediaContactLastname);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("media_contact_email"), MediaContactEmail);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("agency_link"), AgencyLink);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("user_email"), UserEmail);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("accepted_terms_time"), AcceptedTermsTime);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("pmp_id"), PmpId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("order_name"), OrderName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("order_line_type"), OrderLineType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("accepted_terms_id"), AcceptedTermsId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("billto_company_id"), BilltoCompanyId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("billto_business_address_id"), BilltoBusinessAddressId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("billto_billing_address_id"), BilltoBillingAddressId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("estimated_monthly_spend"), EstimatedMonthlySpend);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("currency_info"), CurrencyInfo);

	return ParseSuccess;
}

}
