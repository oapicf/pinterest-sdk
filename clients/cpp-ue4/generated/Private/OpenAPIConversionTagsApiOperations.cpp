/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIConversionTagsApiOperations.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace OpenAPI
{

FString OpenAPIConversionTagsApi::ConversionTagsCreateRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("ad_account_id"), FStringFormatArg(ToUrlString(AdAccountId)) } };

	FString Path = FString::Format(TEXT("/ad_accounts/{ad_account_id}/conversion_tags"), PathParams);

	return Path;
}

void OpenAPIConversionTagsApi::ConversionTagsCreateRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, OpenAPIConversionTagCreate);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPIConversionTagCreate) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPIConversionTagCreate) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIConversionTagsApi::ConversionTagsCreateResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIConversionTagsApi::ConversionTagsCreateResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIConversionTagsApi::ConversionTagsGetRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("ad_account_id"), FStringFormatArg(ToUrlString(AdAccountId)) },
	{ TEXT("conversion_tag_id"), FStringFormatArg(ToUrlString(ConversionTagId)) } };

	FString Path = FString::Format(TEXT("/ad_accounts/{ad_account_id}/conversion_tags/{conversion_tag_id}"), PathParams);

	return Path;
}

void OpenAPIConversionTagsApi::ConversionTagsGetRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIConversionTagsApi::ConversionTagsGetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIConversionTagsApi::ConversionTagsGetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIConversionTagsApi::ConversionTagsListRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("ad_account_id"), FStringFormatArg(ToUrlString(AdAccountId)) } };

	FString Path = FString::Format(TEXT("/ad_accounts/{ad_account_id}/conversion_tags"), PathParams);

	TArray<FString> QueryParams;
	if(FilterDeleted.IsSet())
	{
		QueryParams.Add(FString(TEXT("filter_deleted=")) + ToUrlString(FilterDeleted.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIConversionTagsApi::ConversionTagsListRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIConversionTagsApi::ConversionTagsListResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIConversionTagsApi::ConversionTagsListResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIConversionTagsApi::OcpmEligibleConversionTagsGetRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("ad_account_id"), FStringFormatArg(ToUrlString(AdAccountId)) } };

	FString Path = FString::Format(TEXT("/ad_accounts/{ad_account_id}/conversion_tags/ocpm_eligible"), PathParams);

	return Path;
}

void OpenAPIConversionTagsApi::OcpmEligibleConversionTagsGetRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIConversionTagsApi::OcpmEligibleConversionTagsGetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected errors"));
		break;
	}
}

bool OpenAPIConversionTagsApi::OcpmEligibleConversionTagsGetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const OpenAPIConversionTagsApi::PageVisitConversionTagsGetRequest::OrderEnum& Value)
{
	switch (Value)
	{
	case OpenAPIConversionTagsApi::PageVisitConversionTagsGetRequest::OrderEnum::Ascending:
		return TEXT("ASCENDING");
	case OpenAPIConversionTagsApi::PageVisitConversionTagsGetRequest::OrderEnum::Descending:
		return TEXT("DESCENDING");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIConversionTagsApi::PageVisitConversionTagsGetRequest::OrderEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIConversionTagsApi::PageVisitConversionTagsGetRequest::EnumToString(const OpenAPIConversionTagsApi::PageVisitConversionTagsGetRequest::OrderEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIConversionTagsApi::PageVisitConversionTagsGetRequest::OrderEnum& Value)
{
	static TMap<FString, OpenAPIConversionTagsApi::PageVisitConversionTagsGetRequest::OrderEnum> StringToEnum = { 
		{ TEXT("ASCENDING"), OpenAPIConversionTagsApi::PageVisitConversionTagsGetRequest::OrderEnum::Ascending },
		{ TEXT("DESCENDING"), OpenAPIConversionTagsApi::PageVisitConversionTagsGetRequest::OrderEnum::Descending }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIConversionTagsApi::PageVisitConversionTagsGetRequest::EnumFromString(const FString& EnumAsString, OpenAPIConversionTagsApi::PageVisitConversionTagsGetRequest::OrderEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIConversionTagsApi::PageVisitConversionTagsGetRequest::OrderEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIConversionTagsApi::PageVisitConversionTagsGetRequest::OrderEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIConversionTagsApi::PageVisitConversionTagsGetRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("ad_account_id"), FStringFormatArg(ToUrlString(AdAccountId)) } };

	FString Path = FString::Format(TEXT("/ad_accounts/{ad_account_id}/conversion_tags/page_visit"), PathParams);

	TArray<FString> QueryParams;
	if(PageSize.IsSet())
	{
		QueryParams.Add(FString(TEXT("page_size=")) + ToUrlString(PageSize.GetValue()));
	}
	if(Order.IsSet())
	{
		QueryParams.Add(FString(TEXT("order=")) + ToUrlString(Order.GetValue()));
	}
	if(Bookmark.IsSet())
	{
		QueryParams.Add(FString(TEXT("bookmark=")) + ToUrlString(Bookmark.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIConversionTagsApi::PageVisitConversionTagsGetRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIConversionTagsApi::PageVisitConversionTagsGetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIConversionTagsApi::PageVisitConversionTagsGetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}
