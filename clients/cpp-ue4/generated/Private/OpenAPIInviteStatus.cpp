/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIInviteStatus.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIInviteStatus::Values& Value)
{
	switch (Value)
	{
	case OpenAPIInviteStatus::Values::Pending:
		return TEXT("PENDING");
	case OpenAPIInviteStatus::Values::Accepted:
		return TEXT("ACCEPTED");
	case OpenAPIInviteStatus::Values::Declined:
		return TEXT("DECLINED");
	case OpenAPIInviteStatus::Values::Cancelled:
		return TEXT("CANCELLED");
	case OpenAPIInviteStatus::Values::Expired:
		return TEXT("EXPIRED");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIInviteStatus::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIInviteStatus::EnumToString(const OpenAPIInviteStatus::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIInviteStatus::Values& Value)
{
	static TMap<FString, OpenAPIInviteStatus::Values> StringToEnum = { 
		{ TEXT("PENDING"), OpenAPIInviteStatus::Values::Pending },
		{ TEXT("ACCEPTED"), OpenAPIInviteStatus::Values::Accepted },
		{ TEXT("DECLINED"), OpenAPIInviteStatus::Values::Declined },
		{ TEXT("CANCELLED"), OpenAPIInviteStatus::Values::Cancelled },
		{ TEXT("EXPIRED"), OpenAPIInviteStatus::Values::Expired }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIInviteStatus::EnumFromString(const FString& EnumAsString, OpenAPIInviteStatus::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIInviteStatus::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIInviteStatus::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIInviteStatus::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPIInviteStatus::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
