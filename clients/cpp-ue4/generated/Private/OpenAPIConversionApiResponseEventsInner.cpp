/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIConversionApiResponseEventsInner.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIConversionApiResponseEventsInner::StatusEnum& Value)
{
	switch (Value)
	{
	case OpenAPIConversionApiResponseEventsInner::StatusEnum::Failed:
		return TEXT("failed");
	case OpenAPIConversionApiResponseEventsInner::StatusEnum::Processed:
		return TEXT("processed");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIConversionApiResponseEventsInner::StatusEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIConversionApiResponseEventsInner::EnumToString(const OpenAPIConversionApiResponseEventsInner::StatusEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIConversionApiResponseEventsInner::StatusEnum& Value)
{
	static TMap<FString, OpenAPIConversionApiResponseEventsInner::StatusEnum> StringToEnum = { 
		{ TEXT("failed"), OpenAPIConversionApiResponseEventsInner::StatusEnum::Failed },
		{ TEXT("processed"), OpenAPIConversionApiResponseEventsInner::StatusEnum::Processed }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIConversionApiResponseEventsInner::EnumFromString(const FString& EnumAsString, OpenAPIConversionApiResponseEventsInner::StatusEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIConversionApiResponseEventsInner::StatusEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIConversionApiResponseEventsInner::StatusEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIConversionApiResponseEventsInner::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("status")); WriteJsonValue(Writer, Status);
	if (ErrorMessage.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("error_message")); WriteJsonValue(Writer, ErrorMessage.GetValue());
	}
	if (WarningMessage.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("warning_message")); WriteJsonValue(Writer, WarningMessage.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIConversionApiResponseEventsInner::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("status"), Status);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("error_message"), ErrorMessage);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("warning_message"), WarningMessage);

	return ParseSuccess;
}

}
