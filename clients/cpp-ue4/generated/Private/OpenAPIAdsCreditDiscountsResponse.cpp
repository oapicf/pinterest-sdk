/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIAdsCreditDiscountsResponse.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::Coupon:
		return TEXT("COUPON");
	case OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::Credit:
		return TEXT("CREDIT");
	case OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::CouponApplied:
		return TEXT("COUPON_APPLIED");
	case OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::CreditApplied:
		return TEXT("CREDIT_APPLIED");
	case OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::MarketingOfferCredit:
		return TEXT("MARKETING_OFFER_CREDIT");
	case OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::MarketingOfferCreditApplied:
		return TEXT("MARKETING_OFFER_CREDIT_APPLIED");
	case OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::GoodwillCredit:
		return TEXT("GOODWILL_CREDIT");
	case OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::GoodwillCreditApplied:
		return TEXT("GOODWILL_CREDIT_APPLIED");
	case OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::InternalCredit:
		return TEXT("INTERNAL_CREDIT");
	case OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::InternalCreditApplied:
		return TEXT("INTERNAL_CREDIT_APPLIED");
	case OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::PrepaidCredit:
		return TEXT("PREPAID_CREDIT");
	case OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::PrepaidCreditApplied:
		return TEXT("PREPAID_CREDIT_APPLIED");
	case OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::SalesIncentiveCredit:
		return TEXT("SALES_INCENTIVE_CREDIT");
	case OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::SalesIncentiveCreditApplied:
		return TEXT("SALES_INCENTIVE_CREDIT_APPLIED");
	case OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::CreditExpired:
		return TEXT("CREDIT_EXPIRED");
	case OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::FutureCredit:
		return TEXT("FUTURE_CREDIT");
	case OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::ReferralCredit:
		return TEXT("REFERRAL_CREDIT");
	case OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::InvoiceSalesIncentiveCredit:
		return TEXT("INVOICE_SALES_INCENTIVE_CREDIT");
	case OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::InvoiceSalesIncentiveCreditApplied:
		return TEXT("INVOICE_SALES_INCENTIVE_CREDIT_APPLIED");
	case OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::PrepaidCreditRefund:
		return TEXT("PREPAID_CREDIT_REFUND");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIAdsCreditDiscountsResponse::EnumToString(const OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum& Value)
{
	static TMap<FString, OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum> StringToEnum = { 
		{ TEXT("COUPON"), OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::Coupon },
		{ TEXT("CREDIT"), OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::Credit },
		{ TEXT("COUPON_APPLIED"), OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::CouponApplied },
		{ TEXT("CREDIT_APPLIED"), OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::CreditApplied },
		{ TEXT("MARKETING_OFFER_CREDIT"), OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::MarketingOfferCredit },
		{ TEXT("MARKETING_OFFER_CREDIT_APPLIED"), OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::MarketingOfferCreditApplied },
		{ TEXT("GOODWILL_CREDIT"), OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::GoodwillCredit },
		{ TEXT("GOODWILL_CREDIT_APPLIED"), OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::GoodwillCreditApplied },
		{ TEXT("INTERNAL_CREDIT"), OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::InternalCredit },
		{ TEXT("INTERNAL_CREDIT_APPLIED"), OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::InternalCreditApplied },
		{ TEXT("PREPAID_CREDIT"), OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::PrepaidCredit },
		{ TEXT("PREPAID_CREDIT_APPLIED"), OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::PrepaidCreditApplied },
		{ TEXT("SALES_INCENTIVE_CREDIT"), OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::SalesIncentiveCredit },
		{ TEXT("SALES_INCENTIVE_CREDIT_APPLIED"), OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::SalesIncentiveCreditApplied },
		{ TEXT("CREDIT_EXPIRED"), OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::CreditExpired },
		{ TEXT("FUTURE_CREDIT"), OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::FutureCredit },
		{ TEXT("REFERRAL_CREDIT"), OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::ReferralCredit },
		{ TEXT("INVOICE_SALES_INCENTIVE_CREDIT"), OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::InvoiceSalesIncentiveCredit },
		{ TEXT("INVOICE_SALES_INCENTIVE_CREDIT_APPLIED"), OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::InvoiceSalesIncentiveCreditApplied },
		{ TEXT("PREPAID_CREDIT_REFUND"), OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum::PrepaidCreditRefund }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIAdsCreditDiscountsResponse::EnumFromString(const FString& EnumAsString, OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIAdsCreditDiscountsResponse::DiscountTypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIAdsCreditDiscountsResponse::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Active.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("active")); WriteJsonValue(Writer, Active.GetValue());
	}
	if (AdvertiserId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("advertiser_id")); WriteJsonValue(Writer, AdvertiserId.GetValue());
	}
	if (DiscountType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("discountType")); WriteJsonValue(Writer, DiscountType.GetValue());
	}
	if (DiscountInMicroCurrency.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("discountInMicroCurrency")); WriteJsonValue(Writer, DiscountInMicroCurrency.GetValue());
	}
	if (DiscountCurrency.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("discountCurrency")); WriteJsonValue(Writer, DiscountCurrency.GetValue());
	}
	if (Title.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("title")); WriteJsonValue(Writer, Title.GetValue());
	}
	if (RemainingDiscountInMicroCurrency.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("remainingDiscountInMicroCurrency")); WriteJsonValue(Writer, RemainingDiscountInMicroCurrency.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIAdsCreditDiscountsResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("active"), Active);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("advertiser_id"), AdvertiserId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("discountType"), DiscountType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("discountInMicroCurrency"), DiscountInMicroCurrency);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("discountCurrency"), DiscountCurrency);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("title"), Title);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("remainingDiscountInMicroCurrency"), RemainingDiscountInMicroCurrency);

	return ParseSuccess;
}

}
