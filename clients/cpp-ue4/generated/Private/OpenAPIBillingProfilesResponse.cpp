/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIBillingProfilesResponse.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIBillingProfilesResponse::CardTypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIBillingProfilesResponse::CardTypeEnum::Unknown:
		return TEXT("UNKNOWN");
	case OpenAPIBillingProfilesResponse::CardTypeEnum::Visa:
		return TEXT("VISA");
	case OpenAPIBillingProfilesResponse::CardTypeEnum::Mastercard:
		return TEXT("MASTERCARD");
	case OpenAPIBillingProfilesResponse::CardTypeEnum::AmericanExpress:
		return TEXT("AMERICAN_EXPRESS");
	case OpenAPIBillingProfilesResponse::CardTypeEnum::Discover:
		return TEXT("DISCOVER");
	case OpenAPIBillingProfilesResponse::CardTypeEnum::Elo:
		return TEXT("ELO");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIBillingProfilesResponse::CardTypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIBillingProfilesResponse::EnumToString(const OpenAPIBillingProfilesResponse::CardTypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIBillingProfilesResponse::CardTypeEnum& Value)
{
	static TMap<FString, OpenAPIBillingProfilesResponse::CardTypeEnum> StringToEnum = { 
		{ TEXT("UNKNOWN"), OpenAPIBillingProfilesResponse::CardTypeEnum::Unknown },
		{ TEXT("VISA"), OpenAPIBillingProfilesResponse::CardTypeEnum::Visa },
		{ TEXT("MASTERCARD"), OpenAPIBillingProfilesResponse::CardTypeEnum::Mastercard },
		{ TEXT("AMERICAN_EXPRESS"), OpenAPIBillingProfilesResponse::CardTypeEnum::AmericanExpress },
		{ TEXT("DISCOVER"), OpenAPIBillingProfilesResponse::CardTypeEnum::Discover },
		{ TEXT("ELO"), OpenAPIBillingProfilesResponse::CardTypeEnum::Elo }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIBillingProfilesResponse::EnumFromString(const FString& EnumAsString, OpenAPIBillingProfilesResponse::CardTypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIBillingProfilesResponse::CardTypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIBillingProfilesResponse::CardTypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIBillingProfilesResponse::StatusEnum& Value)
{
	switch (Value)
	{
	case OpenAPIBillingProfilesResponse::StatusEnum::Unspecified:
		return TEXT("UNSPECIFIED");
	case OpenAPIBillingProfilesResponse::StatusEnum::Valid:
		return TEXT("VALID");
	case OpenAPIBillingProfilesResponse::StatusEnum::Invalid:
		return TEXT("INVALID");
	case OpenAPIBillingProfilesResponse::StatusEnum::Pending:
		return TEXT("PENDING");
	case OpenAPIBillingProfilesResponse::StatusEnum::Deleted:
		return TEXT("DELETED");
	case OpenAPIBillingProfilesResponse::StatusEnum::Secondary:
		return TEXT("SECONDARY");
	case OpenAPIBillingProfilesResponse::StatusEnum::PendingSecondary:
		return TEXT("PENDING_SECONDARY");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIBillingProfilesResponse::StatusEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIBillingProfilesResponse::EnumToString(const OpenAPIBillingProfilesResponse::StatusEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIBillingProfilesResponse::StatusEnum& Value)
{
	static TMap<FString, OpenAPIBillingProfilesResponse::StatusEnum> StringToEnum = { 
		{ TEXT("UNSPECIFIED"), OpenAPIBillingProfilesResponse::StatusEnum::Unspecified },
		{ TEXT("VALID"), OpenAPIBillingProfilesResponse::StatusEnum::Valid },
		{ TEXT("INVALID"), OpenAPIBillingProfilesResponse::StatusEnum::Invalid },
		{ TEXT("PENDING"), OpenAPIBillingProfilesResponse::StatusEnum::Pending },
		{ TEXT("DELETED"), OpenAPIBillingProfilesResponse::StatusEnum::Deleted },
		{ TEXT("SECONDARY"), OpenAPIBillingProfilesResponse::StatusEnum::Secondary },
		{ TEXT("PENDING_SECONDARY"), OpenAPIBillingProfilesResponse::StatusEnum::PendingSecondary }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIBillingProfilesResponse::EnumFromString(const FString& EnumAsString, OpenAPIBillingProfilesResponse::StatusEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIBillingProfilesResponse::StatusEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIBillingProfilesResponse::StatusEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIBillingProfilesResponse::PaymentMethodBrandEnum& Value)
{
	switch (Value)
	{
	case OpenAPIBillingProfilesResponse::PaymentMethodBrandEnum::Unknown:
		return TEXT("UNKNOWN");
	case OpenAPIBillingProfilesResponse::PaymentMethodBrandEnum::Visa:
		return TEXT("VISA");
	case OpenAPIBillingProfilesResponse::PaymentMethodBrandEnum::Mastercard:
		return TEXT("MASTERCARD");
	case OpenAPIBillingProfilesResponse::PaymentMethodBrandEnum::AmericanExpress:
		return TEXT("AMERICAN_EXPRESS");
	case OpenAPIBillingProfilesResponse::PaymentMethodBrandEnum::Discover:
		return TEXT("DISCOVER");
	case OpenAPIBillingProfilesResponse::PaymentMethodBrandEnum::Sofort:
		return TEXT("SOFORT");
	case OpenAPIBillingProfilesResponse::PaymentMethodBrandEnum::DinersClub:
		return TEXT("DINERS_CLUB");
	case OpenAPIBillingProfilesResponse::PaymentMethodBrandEnum::Elo:
		return TEXT("ELO");
	case OpenAPIBillingProfilesResponse::PaymentMethodBrandEnum::CarteBancaire:
		return TEXT("CARTE_BANCAIRE");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIBillingProfilesResponse::PaymentMethodBrandEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIBillingProfilesResponse::EnumToString(const OpenAPIBillingProfilesResponse::PaymentMethodBrandEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIBillingProfilesResponse::PaymentMethodBrandEnum& Value)
{
	static TMap<FString, OpenAPIBillingProfilesResponse::PaymentMethodBrandEnum> StringToEnum = { 
		{ TEXT("UNKNOWN"), OpenAPIBillingProfilesResponse::PaymentMethodBrandEnum::Unknown },
		{ TEXT("VISA"), OpenAPIBillingProfilesResponse::PaymentMethodBrandEnum::Visa },
		{ TEXT("MASTERCARD"), OpenAPIBillingProfilesResponse::PaymentMethodBrandEnum::Mastercard },
		{ TEXT("AMERICAN_EXPRESS"), OpenAPIBillingProfilesResponse::PaymentMethodBrandEnum::AmericanExpress },
		{ TEXT("DISCOVER"), OpenAPIBillingProfilesResponse::PaymentMethodBrandEnum::Discover },
		{ TEXT("SOFORT"), OpenAPIBillingProfilesResponse::PaymentMethodBrandEnum::Sofort },
		{ TEXT("DINERS_CLUB"), OpenAPIBillingProfilesResponse::PaymentMethodBrandEnum::DinersClub },
		{ TEXT("ELO"), OpenAPIBillingProfilesResponse::PaymentMethodBrandEnum::Elo },
		{ TEXT("CARTE_BANCAIRE"), OpenAPIBillingProfilesResponse::PaymentMethodBrandEnum::CarteBancaire }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIBillingProfilesResponse::EnumFromString(const FString& EnumAsString, OpenAPIBillingProfilesResponse::PaymentMethodBrandEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIBillingProfilesResponse::PaymentMethodBrandEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIBillingProfilesResponse::PaymentMethodBrandEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIBillingProfilesResponse::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Id.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id.GetValue());
	}
	if (CardType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("card_type")); WriteJsonValue(Writer, CardType.GetValue());
	}
	if (Status.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("status")); WriteJsonValue(Writer, Status.GetValue());
	}
	if (AdvertiserId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("advertiser_id")); WriteJsonValue(Writer, AdvertiserId.GetValue());
	}
	if (PaymentMethodBrand.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("payment_method_brand")); WriteJsonValue(Writer, PaymentMethodBrand.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIBillingProfilesResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("card_type"), CardType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("status"), Status);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("advertiser_id"), AdvertiserId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("payment_method_brand"), PaymentMethodBrand);

	return ParseSuccess;
}

}
