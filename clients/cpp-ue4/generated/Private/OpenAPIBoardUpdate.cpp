/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIBoardUpdate.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIBoardUpdate::PrivacyEnum& Value)
{
	switch (Value)
	{
	case OpenAPIBoardUpdate::PrivacyEnum::_Public:
		return TEXT("PUBLIC");
	case OpenAPIBoardUpdate::PrivacyEnum::Secret:
		return TEXT("SECRET");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIBoardUpdate::PrivacyEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIBoardUpdate::EnumToString(const OpenAPIBoardUpdate::PrivacyEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIBoardUpdate::PrivacyEnum& Value)
{
	static TMap<FString, OpenAPIBoardUpdate::PrivacyEnum> StringToEnum = { 
		{ TEXT("PUBLIC"), OpenAPIBoardUpdate::PrivacyEnum::_Public },
		{ TEXT("SECRET"), OpenAPIBoardUpdate::PrivacyEnum::Secret }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIBoardUpdate::EnumFromString(const FString& EnumAsString, OpenAPIBoardUpdate::PrivacyEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIBoardUpdate::PrivacyEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIBoardUpdate::PrivacyEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIBoardUpdate::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Name.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name.GetValue());
	}
	if (Description.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("description")); WriteJsonValue(Writer, Description.GetValue());
	}
	if (Privacy.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("privacy")); WriteJsonValue(Writer, Privacy.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIBoardUpdate::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("description"), Description);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("privacy"), Privacy);

	return ParseSuccess;
}

}
