/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIMatchTypeResponse.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIMatchTypeResponse::Values& Value)
{
	switch (Value)
	{
	case OpenAPIMatchTypeResponse::Values::Broad:
		return TEXT("BROAD");
	case OpenAPIMatchTypeResponse::Values::Phrase:
		return TEXT("PHRASE");
	case OpenAPIMatchTypeResponse::Values::Exact:
		return TEXT("EXACT");
	case OpenAPIMatchTypeResponse::Values::ExactNegative:
		return TEXT("EXACT_NEGATIVE");
	case OpenAPIMatchTypeResponse::Values::PhraseNegative:
		return TEXT("PHRASE_NEGATIVE");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIMatchTypeResponse::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIMatchTypeResponse::EnumToString(const OpenAPIMatchTypeResponse::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIMatchTypeResponse::Values& Value)
{
	static TMap<FString, OpenAPIMatchTypeResponse::Values> StringToEnum = { 
		{ TEXT("BROAD"), OpenAPIMatchTypeResponse::Values::Broad },
		{ TEXT("PHRASE"), OpenAPIMatchTypeResponse::Values::Phrase },
		{ TEXT("EXACT"), OpenAPIMatchTypeResponse::Values::Exact },
		{ TEXT("EXACT_NEGATIVE"), OpenAPIMatchTypeResponse::Values::ExactNegative },
		{ TEXT("PHRASE_NEGATIVE"), OpenAPIMatchTypeResponse::Values::PhraseNegative }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIMatchTypeResponse::EnumFromString(const FString& EnumAsString, OpenAPIMatchTypeResponse::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIMatchTypeResponse::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIMatchTypeResponse::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIMatchTypeResponse::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPIMatchTypeResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
