/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIUserFollowingFeedType.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIUserFollowingFeedType::Values& Value)
{
	switch (Value)
	{
	case OpenAPIUserFollowingFeedType::Values::All:
		return TEXT("ALL");
	case OpenAPIUserFollowingFeedType::Values::Ranked:
		return TEXT("RANKED");
	case OpenAPIUserFollowingFeedType::Values::CreatorOnly:
		return TEXT("CREATOR_ONLY");
	case OpenAPIUserFollowingFeedType::Values::RankedCreatorOnly:
		return TEXT("RANKED_CREATOR_ONLY");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIUserFollowingFeedType::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIUserFollowingFeedType::EnumToString(const OpenAPIUserFollowingFeedType::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIUserFollowingFeedType::Values& Value)
{
	static TMap<FString, OpenAPIUserFollowingFeedType::Values> StringToEnum = { 
		{ TEXT("ALL"), OpenAPIUserFollowingFeedType::Values::All },
		{ TEXT("RANKED"), OpenAPIUserFollowingFeedType::Values::Ranked },
		{ TEXT("CREATOR_ONLY"), OpenAPIUserFollowingFeedType::Values::CreatorOnly },
		{ TEXT("RANKED_CREATOR_ONLY"), OpenAPIUserFollowingFeedType::Values::RankedCreatorOnly }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIUserFollowingFeedType::EnumFromString(const FString& EnumAsString, OpenAPIUserFollowingFeedType::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIUserFollowingFeedType::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIUserFollowingFeedType::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIUserFollowingFeedType::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPIUserFollowingFeedType::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
