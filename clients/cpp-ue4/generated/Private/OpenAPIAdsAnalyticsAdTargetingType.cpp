/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIAdsAnalyticsAdTargetingType.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIAdsAnalyticsAdTargetingType::Values& Value)
{
	switch (Value)
	{
	case OpenAPIAdsAnalyticsAdTargetingType::Values::Keyword:
		return TEXT("KEYWORD");
	case OpenAPIAdsAnalyticsAdTargetingType::Values::Apptype:
		return TEXT("APPTYPE");
	case OpenAPIAdsAnalyticsAdTargetingType::Values::Gender:
		return TEXT("GENDER");
	case OpenAPIAdsAnalyticsAdTargetingType::Values::Location:
		return TEXT("LOCATION");
	case OpenAPIAdsAnalyticsAdTargetingType::Values::Placement:
		return TEXT("PLACEMENT");
	case OpenAPIAdsAnalyticsAdTargetingType::Values::Country:
		return TEXT("COUNTRY");
	case OpenAPIAdsAnalyticsAdTargetingType::Values::TargetedInterest:
		return TEXT("TARGETED_INTEREST");
	case OpenAPIAdsAnalyticsAdTargetingType::Values::PinnerInterest:
		return TEXT("PINNER_INTEREST");
	case OpenAPIAdsAnalyticsAdTargetingType::Values::AudienceInclude:
		return TEXT("AUDIENCE_INCLUDE");
	case OpenAPIAdsAnalyticsAdTargetingType::Values::Geo:
		return TEXT("GEO");
	case OpenAPIAdsAnalyticsAdTargetingType::Values::AgeBucket:
		return TEXT("AGE_BUCKET");
	case OpenAPIAdsAnalyticsAdTargetingType::Values::Region:
		return TEXT("REGION");
	case OpenAPIAdsAnalyticsAdTargetingType::Values::QuizResult:
		return TEXT("QUIZ_RESULT");
	case OpenAPIAdsAnalyticsAdTargetingType::Values::AgeBucketAndGender:
		return TEXT("AGE_BUCKET_AND_GENDER");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIAdsAnalyticsAdTargetingType::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIAdsAnalyticsAdTargetingType::EnumToString(const OpenAPIAdsAnalyticsAdTargetingType::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIAdsAnalyticsAdTargetingType::Values& Value)
{
	static TMap<FString, OpenAPIAdsAnalyticsAdTargetingType::Values> StringToEnum = { 
		{ TEXT("KEYWORD"), OpenAPIAdsAnalyticsAdTargetingType::Values::Keyword },
		{ TEXT("APPTYPE"), OpenAPIAdsAnalyticsAdTargetingType::Values::Apptype },
		{ TEXT("GENDER"), OpenAPIAdsAnalyticsAdTargetingType::Values::Gender },
		{ TEXT("LOCATION"), OpenAPIAdsAnalyticsAdTargetingType::Values::Location },
		{ TEXT("PLACEMENT"), OpenAPIAdsAnalyticsAdTargetingType::Values::Placement },
		{ TEXT("COUNTRY"), OpenAPIAdsAnalyticsAdTargetingType::Values::Country },
		{ TEXT("TARGETED_INTEREST"), OpenAPIAdsAnalyticsAdTargetingType::Values::TargetedInterest },
		{ TEXT("PINNER_INTEREST"), OpenAPIAdsAnalyticsAdTargetingType::Values::PinnerInterest },
		{ TEXT("AUDIENCE_INCLUDE"), OpenAPIAdsAnalyticsAdTargetingType::Values::AudienceInclude },
		{ TEXT("GEO"), OpenAPIAdsAnalyticsAdTargetingType::Values::Geo },
		{ TEXT("AGE_BUCKET"), OpenAPIAdsAnalyticsAdTargetingType::Values::AgeBucket },
		{ TEXT("REGION"), OpenAPIAdsAnalyticsAdTargetingType::Values::Region },
		{ TEXT("QUIZ_RESULT"), OpenAPIAdsAnalyticsAdTargetingType::Values::QuizResult },
		{ TEXT("AGE_BUCKET_AND_GENDER"), OpenAPIAdsAnalyticsAdTargetingType::Values::AgeBucketAndGender }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIAdsAnalyticsAdTargetingType::EnumFromString(const FString& EnumAsString, OpenAPIAdsAnalyticsAdTargetingType::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIAdsAnalyticsAdTargetingType::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIAdsAnalyticsAdTargetingType::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIAdsAnalyticsAdTargetingType::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPIAdsAnalyticsAdTargetingType::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
