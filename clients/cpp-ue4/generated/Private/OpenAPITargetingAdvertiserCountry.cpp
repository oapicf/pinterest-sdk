/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPITargetingAdvertiserCountry.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPITargetingAdvertiserCountry::Values& Value)
{
	switch (Value)
	{
	case OpenAPITargetingAdvertiserCountry::Values::Us:
		return TEXT("US");
	case OpenAPITargetingAdvertiserCountry::Values::Gb:
		return TEXT("GB");
	case OpenAPITargetingAdvertiserCountry::Values::Ca:
		return TEXT("CA");
	case OpenAPITargetingAdvertiserCountry::Values::Ie:
		return TEXT("IE");
	case OpenAPITargetingAdvertiserCountry::Values::Au:
		return TEXT("AU");
	case OpenAPITargetingAdvertiserCountry::Values::Nz:
		return TEXT("NZ");
	case OpenAPITargetingAdvertiserCountry::Values::Fr:
		return TEXT("FR");
	case OpenAPITargetingAdvertiserCountry::Values::Se:
		return TEXT("SE");
	case OpenAPITargetingAdvertiserCountry::Values::Il:
		return TEXT("IL");
	case OpenAPITargetingAdvertiserCountry::Values::De:
		return TEXT("DE");
	case OpenAPITargetingAdvertiserCountry::Values::At:
		return TEXT("AT");
	case OpenAPITargetingAdvertiserCountry::Values::It:
		return TEXT("IT");
	case OpenAPITargetingAdvertiserCountry::Values::Es:
		return TEXT("ES");
	case OpenAPITargetingAdvertiserCountry::Values::Nl:
		return TEXT("NL");
	case OpenAPITargetingAdvertiserCountry::Values::Be:
		return TEXT("BE");
	case OpenAPITargetingAdvertiserCountry::Values::Pt:
		return TEXT("PT");
	case OpenAPITargetingAdvertiserCountry::Values::Ch:
		return TEXT("CH");
	case OpenAPITargetingAdvertiserCountry::Values::Hk:
		return TEXT("HK");
	case OpenAPITargetingAdvertiserCountry::Values::Jp:
		return TEXT("JP");
	case OpenAPITargetingAdvertiserCountry::Values::Kr:
		return TEXT("KR");
	case OpenAPITargetingAdvertiserCountry::Values::Sg:
		return TEXT("SG");
	case OpenAPITargetingAdvertiserCountry::Values::No:
		return TEXT("NO");
	case OpenAPITargetingAdvertiserCountry::Values::Dk:
		return TEXT("DK");
	case OpenAPITargetingAdvertiserCountry::Values::Fi:
		return TEXT("FI");
	case OpenAPITargetingAdvertiserCountry::Values::Cy:
		return TEXT("CY");
	case OpenAPITargetingAdvertiserCountry::Values::Lu:
		return TEXT("LU");
	case OpenAPITargetingAdvertiserCountry::Values::Mt:
		return TEXT("MT");
	case OpenAPITargetingAdvertiserCountry::Values::Pl:
		return TEXT("PL");
	case OpenAPITargetingAdvertiserCountry::Values::Ro:
		return TEXT("RO");
	case OpenAPITargetingAdvertiserCountry::Values::Hu:
		return TEXT("HU");
	case OpenAPITargetingAdvertiserCountry::Values::Cz:
		return TEXT("CZ");
	case OpenAPITargetingAdvertiserCountry::Values::Gr:
		return TEXT("GR");
	case OpenAPITargetingAdvertiserCountry::Values::Sk:
		return TEXT("SK");
	case OpenAPITargetingAdvertiserCountry::Values::Br:
		return TEXT("BR");
	case OpenAPITargetingAdvertiserCountry::Values::Mx:
		return TEXT("MX");
	case OpenAPITargetingAdvertiserCountry::Values::Ar:
		return TEXT("AR");
	case OpenAPITargetingAdvertiserCountry::Values::Cl:
		return TEXT("CL");
	case OpenAPITargetingAdvertiserCountry::Values::Co:
		return TEXT("CO");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPITargetingAdvertiserCountry::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPITargetingAdvertiserCountry::EnumToString(const OpenAPITargetingAdvertiserCountry::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPITargetingAdvertiserCountry::Values& Value)
{
	static TMap<FString, OpenAPITargetingAdvertiserCountry::Values> StringToEnum = { 
		{ TEXT("US"), OpenAPITargetingAdvertiserCountry::Values::Us },
		{ TEXT("GB"), OpenAPITargetingAdvertiserCountry::Values::Gb },
		{ TEXT("CA"), OpenAPITargetingAdvertiserCountry::Values::Ca },
		{ TEXT("IE"), OpenAPITargetingAdvertiserCountry::Values::Ie },
		{ TEXT("AU"), OpenAPITargetingAdvertiserCountry::Values::Au },
		{ TEXT("NZ"), OpenAPITargetingAdvertiserCountry::Values::Nz },
		{ TEXT("FR"), OpenAPITargetingAdvertiserCountry::Values::Fr },
		{ TEXT("SE"), OpenAPITargetingAdvertiserCountry::Values::Se },
		{ TEXT("IL"), OpenAPITargetingAdvertiserCountry::Values::Il },
		{ TEXT("DE"), OpenAPITargetingAdvertiserCountry::Values::De },
		{ TEXT("AT"), OpenAPITargetingAdvertiserCountry::Values::At },
		{ TEXT("IT"), OpenAPITargetingAdvertiserCountry::Values::It },
		{ TEXT("ES"), OpenAPITargetingAdvertiserCountry::Values::Es },
		{ TEXT("NL"), OpenAPITargetingAdvertiserCountry::Values::Nl },
		{ TEXT("BE"), OpenAPITargetingAdvertiserCountry::Values::Be },
		{ TEXT("PT"), OpenAPITargetingAdvertiserCountry::Values::Pt },
		{ TEXT("CH"), OpenAPITargetingAdvertiserCountry::Values::Ch },
		{ TEXT("HK"), OpenAPITargetingAdvertiserCountry::Values::Hk },
		{ TEXT("JP"), OpenAPITargetingAdvertiserCountry::Values::Jp },
		{ TEXT("KR"), OpenAPITargetingAdvertiserCountry::Values::Kr },
		{ TEXT("SG"), OpenAPITargetingAdvertiserCountry::Values::Sg },
		{ TEXT("NO"), OpenAPITargetingAdvertiserCountry::Values::No },
		{ TEXT("DK"), OpenAPITargetingAdvertiserCountry::Values::Dk },
		{ TEXT("FI"), OpenAPITargetingAdvertiserCountry::Values::Fi },
		{ TEXT("CY"), OpenAPITargetingAdvertiserCountry::Values::Cy },
		{ TEXT("LU"), OpenAPITargetingAdvertiserCountry::Values::Lu },
		{ TEXT("MT"), OpenAPITargetingAdvertiserCountry::Values::Mt },
		{ TEXT("PL"), OpenAPITargetingAdvertiserCountry::Values::Pl },
		{ TEXT("RO"), OpenAPITargetingAdvertiserCountry::Values::Ro },
		{ TEXT("HU"), OpenAPITargetingAdvertiserCountry::Values::Hu },
		{ TEXT("CZ"), OpenAPITargetingAdvertiserCountry::Values::Cz },
		{ TEXT("GR"), OpenAPITargetingAdvertiserCountry::Values::Gr },
		{ TEXT("SK"), OpenAPITargetingAdvertiserCountry::Values::Sk },
		{ TEXT("BR"), OpenAPITargetingAdvertiserCountry::Values::Br },
		{ TEXT("MX"), OpenAPITargetingAdvertiserCountry::Values::Mx },
		{ TEXT("AR"), OpenAPITargetingAdvertiserCountry::Values::Ar },
		{ TEXT("CL"), OpenAPITargetingAdvertiserCountry::Values::Cl },
		{ TEXT("CO"), OpenAPITargetingAdvertiserCountry::Values::Co }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPITargetingAdvertiserCountry::EnumFromString(const FString& EnumAsString, OpenAPITargetingAdvertiserCountry::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPITargetingAdvertiserCountry::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPITargetingAdvertiserCountry::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPITargetingAdvertiserCountry::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPITargetingAdvertiserCountry::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
