/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIAdGroupResponse.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIAdGroupResponse::BidStrategyTypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIAdGroupResponse::BidStrategyTypeEnum::AutomaticBid:
		return TEXT("AUTOMATIC_BID");
	case OpenAPIAdGroupResponse::BidStrategyTypeEnum::MaxBid:
		return TEXT("MAX_BID");
	case OpenAPIAdGroupResponse::BidStrategyTypeEnum::TargetAvg:
		return TEXT("TARGET_AVG");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIAdGroupResponse::BidStrategyTypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIAdGroupResponse::EnumToString(const OpenAPIAdGroupResponse::BidStrategyTypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIAdGroupResponse::BidStrategyTypeEnum& Value)
{
	static TMap<FString, OpenAPIAdGroupResponse::BidStrategyTypeEnum> StringToEnum = { 
		{ TEXT("AUTOMATIC_BID"), OpenAPIAdGroupResponse::BidStrategyTypeEnum::AutomaticBid },
		{ TEXT("MAX_BID"), OpenAPIAdGroupResponse::BidStrategyTypeEnum::MaxBid },
		{ TEXT("TARGET_AVG"), OpenAPIAdGroupResponse::BidStrategyTypeEnum::TargetAvg }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIAdGroupResponse::EnumFromString(const FString& EnumAsString, OpenAPIAdGroupResponse::BidStrategyTypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIAdGroupResponse::BidStrategyTypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIAdGroupResponse::BidStrategyTypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIAdGroupResponse::ConversionLearningModeTypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIAdGroupResponse::ConversionLearningModeTypeEnum::NotActive:
		return TEXT("NOT_ACTIVE");
	case OpenAPIAdGroupResponse::ConversionLearningModeTypeEnum::Active:
		return TEXT("ACTIVE");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIAdGroupResponse::ConversionLearningModeTypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIAdGroupResponse::EnumToString(const OpenAPIAdGroupResponse::ConversionLearningModeTypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIAdGroupResponse::ConversionLearningModeTypeEnum& Value)
{
	static TMap<FString, OpenAPIAdGroupResponse::ConversionLearningModeTypeEnum> StringToEnum = { 
		{ TEXT("NOT_ACTIVE"), OpenAPIAdGroupResponse::ConversionLearningModeTypeEnum::NotActive },
		{ TEXT("ACTIVE"), OpenAPIAdGroupResponse::ConversionLearningModeTypeEnum::Active }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIAdGroupResponse::EnumFromString(const FString& EnumAsString, OpenAPIAdGroupResponse::ConversionLearningModeTypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIAdGroupResponse::ConversionLearningModeTypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIAdGroupResponse::ConversionLearningModeTypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIAdGroupResponse::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Name.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name.GetValue());
	}
	if (Status.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("status")); WriteJsonValue(Writer, Status.GetValue());
	}
	if (BudgetInMicroCurrency.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("budget_in_micro_currency")); WriteJsonValue(Writer, BudgetInMicroCurrency.GetValue());
	}
	if (BidInMicroCurrency.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("bid_in_micro_currency")); WriteJsonValue(Writer, BidInMicroCurrency.GetValue());
	}
	if (OptimizationGoalMetadata.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("optimization_goal_metadata")); WriteJsonValue(Writer, OptimizationGoalMetadata.GetValue());
	}
	if (BudgetType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("budget_type")); WriteJsonValue(Writer, BudgetType.GetValue());
	}
	if (StartTime.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("start_time")); WriteJsonValue(Writer, StartTime.GetValue());
	}
	if (EndTime.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("end_time")); WriteJsonValue(Writer, EndTime.GetValue());
	}
	if (TargetingSpec.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("targeting_spec")); WriteJsonValue(Writer, TargetingSpec.GetValue());
	}
	if (LifetimeFrequencyCap.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("lifetime_frequency_cap")); WriteJsonValue(Writer, LifetimeFrequencyCap.GetValue());
	}
	if (TrackingUrls.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("tracking_urls")); WriteJsonValue(Writer, TrackingUrls.GetValue());
	}
	if (AutoTargetingEnabled.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("auto_targeting_enabled")); WriteJsonValue(Writer, AutoTargetingEnabled.GetValue());
	}
	if (PlacementGroup.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("placement_group")); WriteJsonValue(Writer, PlacementGroup.GetValue());
	}
	if (PacingDeliveryType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("pacing_delivery_type")); WriteJsonValue(Writer, PacingDeliveryType.GetValue());
	}
	if (CampaignId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("campaign_id")); WriteJsonValue(Writer, CampaignId.GetValue());
	}
	if (BillableEvent.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("billable_event")); WriteJsonValue(Writer, BillableEvent.GetValue());
	}
	if (BidStrategyType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("bid_strategy_type")); WriteJsonValue(Writer, BidStrategyType.GetValue());
	}
	if (TargetingTemplateIds.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("targeting_template_ids")); WriteJsonValue(Writer, TargetingTemplateIds.GetValue());
	}
	if (Id.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id.GetValue());
	}
	if (AdAccountId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("ad_account_id")); WriteJsonValue(Writer, AdAccountId.GetValue());
	}
	if (CreatedTime.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("created_time")); WriteJsonValue(Writer, CreatedTime.GetValue());
	}
	if (UpdatedTime.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("updated_time")); WriteJsonValue(Writer, UpdatedTime.GetValue());
	}
	if (Type.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("type")); WriteJsonValue(Writer, Type.GetValue());
	}
	if (ConversionLearningModeType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("conversion_learning_mode_type")); WriteJsonValue(Writer, ConversionLearningModeType.GetValue());
	}
	if (SummaryStatus.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("summary_status")); WriteJsonValue(Writer, SummaryStatus.GetValue());
	}
	if (FeedProfileId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("feed_profile_id")); WriteJsonValue(Writer, FeedProfileId.GetValue());
	}
	if (DcaAssets.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("dca_assets")); WriteJsonValue(Writer, DcaAssets.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIAdGroupResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("status"), Status);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("budget_in_micro_currency"), BudgetInMicroCurrency);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("bid_in_micro_currency"), BidInMicroCurrency);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("optimization_goal_metadata"), OptimizationGoalMetadata);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("budget_type"), BudgetType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("start_time"), StartTime);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("end_time"), EndTime);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("targeting_spec"), TargetingSpec);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("lifetime_frequency_cap"), LifetimeFrequencyCap);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("tracking_urls"), TrackingUrls);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("auto_targeting_enabled"), AutoTargetingEnabled);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("placement_group"), PlacementGroup);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("pacing_delivery_type"), PacingDeliveryType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("campaign_id"), CampaignId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("billable_event"), BillableEvent);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("bid_strategy_type"), BidStrategyType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("targeting_template_ids"), TargetingTemplateIds);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("ad_account_id"), AdAccountId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("created_time"), CreatedTime);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("updated_time"), UpdatedTime);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("type"), Type);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("conversion_learning_mode_type"), ConversionLearningModeType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("summary_status"), SummaryStatus);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("feed_profile_id"), FeedProfileId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dca_assets"), DcaAssets);

	return ParseSuccess;
}

}
