/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPITargetingSpec.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPITargetingSpec::AgeBucketEnum& Value)
{
	switch (Value)
	{
	case OpenAPITargetingSpec::AgeBucketEnum::_1824:
		return TEXT("18-24");
	case OpenAPITargetingSpec::AgeBucketEnum::_21:
		return TEXT("21+");
	case OpenAPITargetingSpec::AgeBucketEnum::_2534:
		return TEXT("25-34");
	case OpenAPITargetingSpec::AgeBucketEnum::_3544:
		return TEXT("35-44");
	case OpenAPITargetingSpec::AgeBucketEnum::_4549:
		return TEXT("45-49");
	case OpenAPITargetingSpec::AgeBucketEnum::_5054:
		return TEXT("50-54");
	case OpenAPITargetingSpec::AgeBucketEnum::_5564:
		return TEXT("55-64");
	case OpenAPITargetingSpec::AgeBucketEnum::_65:
		return TEXT("65+");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPITargetingSpec::AgeBucketEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPITargetingSpec::EnumToString(const OpenAPITargetingSpec::AgeBucketEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPITargetingSpec::AgeBucketEnum& Value)
{
	static TMap<FString, OpenAPITargetingSpec::AgeBucketEnum> StringToEnum = { 
		{ TEXT("18-24"), OpenAPITargetingSpec::AgeBucketEnum::_1824 },
		{ TEXT("21+"), OpenAPITargetingSpec::AgeBucketEnum::_21 },
		{ TEXT("25-34"), OpenAPITargetingSpec::AgeBucketEnum::_2534 },
		{ TEXT("35-44"), OpenAPITargetingSpec::AgeBucketEnum::_3544 },
		{ TEXT("45-49"), OpenAPITargetingSpec::AgeBucketEnum::_4549 },
		{ TEXT("50-54"), OpenAPITargetingSpec::AgeBucketEnum::_5054 },
		{ TEXT("55-64"), OpenAPITargetingSpec::AgeBucketEnum::_5564 },
		{ TEXT("65+"), OpenAPITargetingSpec::AgeBucketEnum::_65 }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPITargetingSpec::EnumFromString(const FString& EnumAsString, OpenAPITargetingSpec::AgeBucketEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPITargetingSpec::AgeBucketEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPITargetingSpec::AgeBucketEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPITargetingSpec::ApptypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPITargetingSpec::ApptypeEnum::AndroidMobile:
		return TEXT("android_mobile");
	case OpenAPITargetingSpec::ApptypeEnum::AndroidTablet:
		return TEXT("android_tablet");
	case OpenAPITargetingSpec::ApptypeEnum::Ipad:
		return TEXT("ipad");
	case OpenAPITargetingSpec::ApptypeEnum::Iphone:
		return TEXT("iphone");
	case OpenAPITargetingSpec::ApptypeEnum::Web:
		return TEXT("web");
	case OpenAPITargetingSpec::ApptypeEnum::WebMobile:
		return TEXT("web_mobile");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPITargetingSpec::ApptypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPITargetingSpec::EnumToString(const OpenAPITargetingSpec::ApptypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPITargetingSpec::ApptypeEnum& Value)
{
	static TMap<FString, OpenAPITargetingSpec::ApptypeEnum> StringToEnum = { 
		{ TEXT("android_mobile"), OpenAPITargetingSpec::ApptypeEnum::AndroidMobile },
		{ TEXT("android_tablet"), OpenAPITargetingSpec::ApptypeEnum::AndroidTablet },
		{ TEXT("ipad"), OpenAPITargetingSpec::ApptypeEnum::Ipad },
		{ TEXT("iphone"), OpenAPITargetingSpec::ApptypeEnum::Iphone },
		{ TEXT("web"), OpenAPITargetingSpec::ApptypeEnum::Web },
		{ TEXT("web_mobile"), OpenAPITargetingSpec::ApptypeEnum::WebMobile }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPITargetingSpec::EnumFromString(const FString& EnumAsString, OpenAPITargetingSpec::ApptypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPITargetingSpec::ApptypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPITargetingSpec::ApptypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPITargetingSpec::GenderEnum& Value)
{
	switch (Value)
	{
	case OpenAPITargetingSpec::GenderEnum::Unknown:
		return TEXT("unknown");
	case OpenAPITargetingSpec::GenderEnum::Male:
		return TEXT("male");
	case OpenAPITargetingSpec::GenderEnum::Female:
		return TEXT("female");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPITargetingSpec::GenderEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPITargetingSpec::EnumToString(const OpenAPITargetingSpec::GenderEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPITargetingSpec::GenderEnum& Value)
{
	static TMap<FString, OpenAPITargetingSpec::GenderEnum> StringToEnum = { 
		{ TEXT("unknown"), OpenAPITargetingSpec::GenderEnum::Unknown },
		{ TEXT("male"), OpenAPITargetingSpec::GenderEnum::Male },
		{ TEXT("female"), OpenAPITargetingSpec::GenderEnum::Female }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPITargetingSpec::EnumFromString(const FString& EnumAsString, OpenAPITargetingSpec::GenderEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPITargetingSpec::GenderEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPITargetingSpec::GenderEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPITargetingSpec::TargetingStrategyEnum& Value)
{
	switch (Value)
	{
	case OpenAPITargetingSpec::TargetingStrategyEnum::ChooseYourOwn:
		return TEXT("CHOOSE_YOUR_OWN");
	case OpenAPITargetingSpec::TargetingStrategyEnum::FindNewCustomers:
		return TEXT("FIND_NEW_CUSTOMERS");
	case OpenAPITargetingSpec::TargetingStrategyEnum::ReconnectWithUsers:
		return TEXT("RECONNECT_WITH_USERS");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPITargetingSpec::TargetingStrategyEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPITargetingSpec::EnumToString(const OpenAPITargetingSpec::TargetingStrategyEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPITargetingSpec::TargetingStrategyEnum& Value)
{
	static TMap<FString, OpenAPITargetingSpec::TargetingStrategyEnum> StringToEnum = { 
		{ TEXT("CHOOSE_YOUR_OWN"), OpenAPITargetingSpec::TargetingStrategyEnum::ChooseYourOwn },
		{ TEXT("FIND_NEW_CUSTOMERS"), OpenAPITargetingSpec::TargetingStrategyEnum::FindNewCustomers },
		{ TEXT("RECONNECT_WITH_USERS"), OpenAPITargetingSpec::TargetingStrategyEnum::ReconnectWithUsers }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPITargetingSpec::EnumFromString(const FString& EnumAsString, OpenAPITargetingSpec::TargetingStrategyEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPITargetingSpec::TargetingStrategyEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPITargetingSpec::TargetingStrategyEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPITargetingSpec::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (AgeBucket.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("AGE_BUCKET")); WriteJsonValue(Writer, AgeBucket.GetValue());
	}
	if (Apptype.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("APPTYPE")); WriteJsonValue(Writer, Apptype.GetValue());
	}
	if (AudienceExclude.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("AUDIENCE_EXCLUDE")); WriteJsonValue(Writer, AudienceExclude.GetValue());
	}
	if (AudienceInclude.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("AUDIENCE_INCLUDE")); WriteJsonValue(Writer, AudienceInclude.GetValue());
	}
	if (Gender.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("GENDER")); WriteJsonValue(Writer, Gender.GetValue());
	}
	if (Geo.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("GEO")); WriteJsonValue(Writer, Geo.GetValue());
	}
	if (Interest.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("INTEREST")); WriteJsonValue(Writer, Interest.GetValue());
	}
	if (Locale.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("LOCALE")); WriteJsonValue(Writer, Locale.GetValue());
	}
	if (Location.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("LOCATION")); WriteJsonValue(Writer, Location.GetValue());
	}
	if (ShoppingRetargeting.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("SHOPPING_RETARGETING")); WriteJsonValue(Writer, ShoppingRetargeting.GetValue());
	}
	if (TargetingStrategy.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("TARGETING_STRATEGY")); WriteJsonValue(Writer, TargetingStrategy.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPITargetingSpec::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("AGE_BUCKET"), AgeBucket);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("APPTYPE"), Apptype);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("AUDIENCE_EXCLUDE"), AudienceExclude);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("AUDIENCE_INCLUDE"), AudienceInclude);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("GENDER"), Gender);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("GEO"), Geo);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("INTEREST"), Interest);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("LOCALE"), Locale);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("LOCATION"), Location);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("SHOPPING_RETARGETING"), ShoppingRetargeting);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("TARGETING_STRATEGY"), TargetingStrategy);

	return ParseSuccess;
}

}
