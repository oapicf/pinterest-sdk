/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIKeywordsApiOperations.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace OpenAPI
{

FString OpenAPIKeywordsApi::CountryKeywordsMetricsGetRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("ad_account_id"), FStringFormatArg(ToUrlString(AdAccountId)) } };

	FString Path = FString::Format(TEXT("/ad_accounts/{ad_account_id}/keywords/metrics"), PathParams);

	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("country_code=")) + ToUrlString(CountryCode));
	QueryParams.Add(FString(TEXT("keywords=")) + CollectionToUrlString_csv(Keywords, TEXT("keywords")));
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIKeywordsApi::CountryKeywordsMetricsGetRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIKeywordsApi::CountryKeywordsMetricsGetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIKeywordsApi::CountryKeywordsMetricsGetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIKeywordsApi::KeywordsCreateRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("ad_account_id"), FStringFormatArg(ToUrlString(AdAccountId)) } };

	FString Path = FString::Format(TEXT("/ad_accounts/{ad_account_id}/keywords"), PathParams);

	return Path;
}

void OpenAPIKeywordsApi::KeywordsCreateRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, OpenAPIKeywordsRequest);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPIKeywordsRequest) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPIKeywordsRequest) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIKeywordsApi::KeywordsCreateResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIKeywordsApi::KeywordsCreateResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIKeywordsApi::KeywordsGetRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("ad_account_id"), FStringFormatArg(ToUrlString(AdAccountId)) } };

	FString Path = FString::Format(TEXT("/ad_accounts/{ad_account_id}/keywords"), PathParams);

	TArray<FString> QueryParams;
	if(CampaignId.IsSet())
	{
		QueryParams.Add(FString(TEXT("campaign_id=")) + ToUrlString(CampaignId.GetValue()));
	}
	if(AdGroupId.IsSet())
	{
		QueryParams.Add(FString(TEXT("ad_group_id=")) + ToUrlString(AdGroupId.GetValue()));
	}
	if(MatchTypes.IsSet())
	{
		QueryParams.Add(CollectionToUrlString_multi(MatchTypes.GetValue(), TEXT("match_types")));
	}
	if(PageSize.IsSet())
	{
		QueryParams.Add(FString(TEXT("page_size=")) + ToUrlString(PageSize.GetValue()));
	}
	if(Bookmark.IsSet())
	{
		QueryParams.Add(FString(TEXT("bookmark=")) + ToUrlString(Bookmark.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIKeywordsApi::KeywordsGetRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIKeywordsApi::KeywordsGetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIKeywordsApi::KeywordsGetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIKeywordsApi::KeywordsUpdateRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("ad_account_id"), FStringFormatArg(ToUrlString(AdAccountId)) } };

	FString Path = FString::Format(TEXT("/ad_accounts/{ad_account_id}/keywords"), PathParams);

	return Path;
}

void OpenAPIKeywordsApi::KeywordsUpdateRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("PATCH"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, OpenAPIKeywordUpdateBody);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPIKeywordUpdateBody) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPIKeywordUpdateBody) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIKeywordsApi::KeywordsUpdateResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIKeywordsApi::KeywordsUpdateResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum& Value)
{
	switch (Value)
	{
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Animals:
		return TEXT("animals");
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Architecture:
		return TEXT("architecture");
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Art:
		return TEXT("art");
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Beauty:
		return TEXT("beauty");
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::ChildrensFashion:
		return TEXT("childrens_fashion");
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Design:
		return TEXT("design");
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::DiyAndCrafts:
		return TEXT("diy_and_crafts");
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Education:
		return TEXT("education");
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Electronics:
		return TEXT("electronics");
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Entertainment:
		return TEXT("entertainment");
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::EventPlanning:
		return TEXT("event_planning");
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Finance:
		return TEXT("finance");
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::FoodAndDrinks:
		return TEXT("food_and_drinks");
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Gardening:
		return TEXT("gardening");
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Health:
		return TEXT("health");
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::HomeDecor:
		return TEXT("home_decor");
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::MensFashion:
		return TEXT("mens_fashion");
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Parenting:
		return TEXT("parenting");
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Quotes:
		return TEXT("quotes");
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Sport:
		return TEXT("sport");
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Travel:
		return TEXT("travel");
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Vehicles:
		return TEXT("vehicles");
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Wedding:
		return TEXT("wedding");
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::WomensFashion:
		return TEXT("womens_fashion");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIKeywordsApi::TrendingKeywordsListRequest::EnumToString(const OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum& Value)
{
	static TMap<FString, OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum> StringToEnum = { 
		{ TEXT("animals"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Animals },
		{ TEXT("architecture"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Architecture },
		{ TEXT("art"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Art },
		{ TEXT("beauty"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Beauty },
		{ TEXT("childrens_fashion"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::ChildrensFashion },
		{ TEXT("design"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Design },
		{ TEXT("diy_and_crafts"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::DiyAndCrafts },
		{ TEXT("education"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Education },
		{ TEXT("electronics"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Electronics },
		{ TEXT("entertainment"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Entertainment },
		{ TEXT("event_planning"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::EventPlanning },
		{ TEXT("finance"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Finance },
		{ TEXT("food_and_drinks"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::FoodAndDrinks },
		{ TEXT("gardening"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Gardening },
		{ TEXT("health"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Health },
		{ TEXT("home_decor"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::HomeDecor },
		{ TEXT("mens_fashion"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::MensFashion },
		{ TEXT("parenting"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Parenting },
		{ TEXT("quotes"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Quotes },
		{ TEXT("sport"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Sport },
		{ TEXT("travel"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Travel },
		{ TEXT("vehicles"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Vehicles },
		{ TEXT("wedding"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::Wedding },
		{ TEXT("womens_fashion"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum::WomensFashion }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIKeywordsApi::TrendingKeywordsListRequest::EnumFromString(const FString& EnumAsString, OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIKeywordsApi::TrendingKeywordsListRequest::InterestsEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIKeywordsApi::TrendingKeywordsListRequest::GendersEnum& Value)
{
	switch (Value)
	{
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::GendersEnum::Female:
		return TEXT("female");
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::GendersEnum::Male:
		return TEXT("male");
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::GendersEnum::Unknown:
		return TEXT("unknown");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIKeywordsApi::TrendingKeywordsListRequest::GendersEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIKeywordsApi::TrendingKeywordsListRequest::EnumToString(const OpenAPIKeywordsApi::TrendingKeywordsListRequest::GendersEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIKeywordsApi::TrendingKeywordsListRequest::GendersEnum& Value)
{
	static TMap<FString, OpenAPIKeywordsApi::TrendingKeywordsListRequest::GendersEnum> StringToEnum = { 
		{ TEXT("female"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::GendersEnum::Female },
		{ TEXT("male"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::GendersEnum::Male },
		{ TEXT("unknown"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::GendersEnum::Unknown }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIKeywordsApi::TrendingKeywordsListRequest::EnumFromString(const FString& EnumAsString, OpenAPIKeywordsApi::TrendingKeywordsListRequest::GendersEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIKeywordsApi::TrendingKeywordsListRequest::GendersEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIKeywordsApi::TrendingKeywordsListRequest::GendersEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIKeywordsApi::TrendingKeywordsListRequest::AgesEnum& Value)
{
	switch (Value)
	{
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::AgesEnum::_1824:
		return TEXT("18-24");
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::AgesEnum::_2534:
		return TEXT("25-34");
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::AgesEnum::_3544:
		return TEXT("35-44");
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::AgesEnum::_4549:
		return TEXT("45-49");
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::AgesEnum::_5054:
		return TEXT("50-54");
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::AgesEnum::_5564:
		return TEXT("55-64");
	case OpenAPIKeywordsApi::TrendingKeywordsListRequest::AgesEnum::_65:
		return TEXT("65+");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIKeywordsApi::TrendingKeywordsListRequest::AgesEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIKeywordsApi::TrendingKeywordsListRequest::EnumToString(const OpenAPIKeywordsApi::TrendingKeywordsListRequest::AgesEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIKeywordsApi::TrendingKeywordsListRequest::AgesEnum& Value)
{
	static TMap<FString, OpenAPIKeywordsApi::TrendingKeywordsListRequest::AgesEnum> StringToEnum = { 
		{ TEXT("18-24"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::AgesEnum::_1824 },
		{ TEXT("25-34"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::AgesEnum::_2534 },
		{ TEXT("35-44"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::AgesEnum::_3544 },
		{ TEXT("45-49"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::AgesEnum::_4549 },
		{ TEXT("50-54"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::AgesEnum::_5054 },
		{ TEXT("55-64"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::AgesEnum::_5564 },
		{ TEXT("65+"), OpenAPIKeywordsApi::TrendingKeywordsListRequest::AgesEnum::_65 }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIKeywordsApi::TrendingKeywordsListRequest::EnumFromString(const FString& EnumAsString, OpenAPIKeywordsApi::TrendingKeywordsListRequest::AgesEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIKeywordsApi::TrendingKeywordsListRequest::AgesEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIKeywordsApi::TrendingKeywordsListRequest::AgesEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIKeywordsApi::TrendingKeywordsListRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("region"), FStringFormatArg(ToUrlString(Region)) },
	{ TEXT("trend_type"), FStringFormatArg(ToUrlString(TrendType)) } };

	FString Path = FString::Format(TEXT("/trends/keywords/{region}/top/{trend_type}"), PathParams);

	TArray<FString> QueryParams;
	if(Interests.IsSet())
	{
		QueryParams.Add(CollectionToUrlString_multi(Interests.GetValue(), TEXT("interests")));
	}
	if(Genders.IsSet())
	{
		QueryParams.Add(CollectionToUrlString_multi(Genders.GetValue(), TEXT("genders")));
	}
	if(Ages.IsSet())
	{
		QueryParams.Add(CollectionToUrlString_multi(Ages.GetValue(), TEXT("ages")));
	}
	if(IncludeKeywords.IsSet())
	{
		QueryParams.Add(CollectionToUrlString_multi(IncludeKeywords.GetValue(), TEXT("include_keywords")));
	}
	if(NormalizeAgainstGroup.IsSet())
	{
		QueryParams.Add(FString(TEXT("normalize_against_group=")) + ToUrlString(NormalizeAgainstGroup.GetValue()));
	}
	if(Limit.IsSet())
	{
		QueryParams.Add(FString(TEXT("limit=")) + ToUrlString(Limit.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIKeywordsApi::TrendingKeywordsListRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIKeywordsApi::TrendingKeywordsListResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 400:
		SetResponseString(TEXT("Invalid trending keywords request parameters"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIKeywordsApi::TrendingKeywordsListResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}
