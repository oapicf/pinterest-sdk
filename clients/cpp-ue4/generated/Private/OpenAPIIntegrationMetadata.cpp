/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIIntegrationMetadata.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIIntegrationMetadata::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Id.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id.GetValue());
	}
	if (ExternalBusinessId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("external_business_id")); WriteJsonValue(Writer, ExternalBusinessId.GetValue());
	}
	if (ConnectedMerchantId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("connected_merchant_id")); WriteJsonValue(Writer, ConnectedMerchantId.GetValue());
	}
	if (ConnectedUserId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("connected_user_id")); WriteJsonValue(Writer, ConnectedUserId.GetValue());
	}
	if (ConnectedAdvertiserId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("connected_advertiser_id")); WriteJsonValue(Writer, ConnectedAdvertiserId.GetValue());
	}
	if (ConnectedLbaId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("connected_lba_id")); WriteJsonValue(Writer, ConnectedLbaId.GetValue());
	}
	if (ConnectedTagId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("connected_tag_id")); WriteJsonValue(Writer, ConnectedTagId.GetValue());
	}
	if (PartnerAccessTokenExpiry.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("partner_access_token_expiry")); WriteJsonValue(Writer, PartnerAccessTokenExpiry.GetValue());
	}
	if (PartnerRefreshTokenExpiry.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("partner_refresh_token_expiry")); WriteJsonValue(Writer, PartnerRefreshTokenExpiry.GetValue());
	}
	if (Scopes.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("scopes")); WriteJsonValue(Writer, Scopes.GetValue());
	}
	if (CreatedTimestamp.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("created_timestamp")); WriteJsonValue(Writer, CreatedTimestamp.GetValue());
	}
	if (UpdatedTimestamp.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("updated_timestamp")); WriteJsonValue(Writer, UpdatedTimestamp.GetValue());
	}
	if (AdditionalId1.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("additional_id_1")); WriteJsonValue(Writer, AdditionalId1.GetValue());
	}
	if (PartnerMetadata.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("partner_metadata")); WriteJsonValue(Writer, PartnerMetadata.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIIntegrationMetadata::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("external_business_id"), ExternalBusinessId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("connected_merchant_id"), ConnectedMerchantId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("connected_user_id"), ConnectedUserId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("connected_advertiser_id"), ConnectedAdvertiserId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("connected_lba_id"), ConnectedLbaId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("connected_tag_id"), ConnectedTagId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("partner_access_token_expiry"), PartnerAccessTokenExpiry);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("partner_refresh_token_expiry"), PartnerRefreshTokenExpiry);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("scopes"), Scopes);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("created_timestamp"), CreatedTimestamp);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("updated_timestamp"), UpdatedTimestamp);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("additional_id_1"), AdditionalId1);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("partner_metadata"), PartnerMetadata);

	return ParseSuccess;
}

}
