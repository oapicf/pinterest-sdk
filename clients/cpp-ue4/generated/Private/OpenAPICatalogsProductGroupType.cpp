/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPICatalogsProductGroupType.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPICatalogsProductGroupType::Values& Value)
{
	switch (Value)
	{
	case OpenAPICatalogsProductGroupType::Values::MerchantCreated:
		return TEXT("MERCHANT_CREATED");
	case OpenAPICatalogsProductGroupType::Values::AllProducts:
		return TEXT("ALL_PRODUCTS");
	case OpenAPICatalogsProductGroupType::Values::BestDeals:
		return TEXT("BEST_DEALS");
	case OpenAPICatalogsProductGroupType::Values::PinnerFavorites:
		return TEXT("PINNER_FAVORITES");
	case OpenAPICatalogsProductGroupType::Values::TopSellers:
		return TEXT("TOP_SELLERS");
	case OpenAPICatalogsProductGroupType::Values::BackInStock:
		return TEXT("BACK_IN_STOCK");
	case OpenAPICatalogsProductGroupType::Values::NewArrivals:
		return TEXT("NEW_ARRIVALS");
	case OpenAPICatalogsProductGroupType::Values::ShopifyCollections:
		return TEXT("SHOPIFY_COLLECTIONS");
	case OpenAPICatalogsProductGroupType::Values::I2PC:
		return TEXT("I2PC");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPICatalogsProductGroupType::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPICatalogsProductGroupType::EnumToString(const OpenAPICatalogsProductGroupType::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPICatalogsProductGroupType::Values& Value)
{
	static TMap<FString, OpenAPICatalogsProductGroupType::Values> StringToEnum = { 
		{ TEXT("MERCHANT_CREATED"), OpenAPICatalogsProductGroupType::Values::MerchantCreated },
		{ TEXT("ALL_PRODUCTS"), OpenAPICatalogsProductGroupType::Values::AllProducts },
		{ TEXT("BEST_DEALS"), OpenAPICatalogsProductGroupType::Values::BestDeals },
		{ TEXT("PINNER_FAVORITES"), OpenAPICatalogsProductGroupType::Values::PinnerFavorites },
		{ TEXT("TOP_SELLERS"), OpenAPICatalogsProductGroupType::Values::TopSellers },
		{ TEXT("BACK_IN_STOCK"), OpenAPICatalogsProductGroupType::Values::BackInStock },
		{ TEXT("NEW_ARRIVALS"), OpenAPICatalogsProductGroupType::Values::NewArrivals },
		{ TEXT("SHOPIFY_COLLECTIONS"), OpenAPICatalogsProductGroupType::Values::ShopifyCollections },
		{ TEXT("I2PC"), OpenAPICatalogsProductGroupType::Values::I2PC }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPICatalogsProductGroupType::EnumFromString(const FString& EnumAsString, OpenAPICatalogsProductGroupType::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPICatalogsProductGroupType::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPICatalogsProductGroupType::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPICatalogsProductGroupType::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPICatalogsProductGroupType::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
