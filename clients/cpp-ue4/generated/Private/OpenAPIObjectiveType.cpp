/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIObjectiveType.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIObjectiveType::Values& Value)
{
	switch (Value)
	{
	case OpenAPIObjectiveType::Values::Awareness:
		return TEXT("AWARENESS");
	case OpenAPIObjectiveType::Values::Consideration:
		return TEXT("CONSIDERATION");
	case OpenAPIObjectiveType::Values::VideoView:
		return TEXT("VIDEO_VIEW");
	case OpenAPIObjectiveType::Values::WebConversion:
		return TEXT("WEB_CONVERSION");
	case OpenAPIObjectiveType::Values::CatalogSales:
		return TEXT("CATALOG_SALES");
	case OpenAPIObjectiveType::Values::WebSessions:
		return TEXT("WEB_SESSIONS");
	case OpenAPIObjectiveType::Values::VideoCompletion:
		return TEXT("VIDEO_COMPLETION");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIObjectiveType::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIObjectiveType::EnumToString(const OpenAPIObjectiveType::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIObjectiveType::Values& Value)
{
	static TMap<FString, OpenAPIObjectiveType::Values> StringToEnum = { 
		{ TEXT("AWARENESS"), OpenAPIObjectiveType::Values::Awareness },
		{ TEXT("CONSIDERATION"), OpenAPIObjectiveType::Values::Consideration },
		{ TEXT("VIDEO_VIEW"), OpenAPIObjectiveType::Values::VideoView },
		{ TEXT("WEB_CONVERSION"), OpenAPIObjectiveType::Values::WebConversion },
		{ TEXT("CATALOG_SALES"), OpenAPIObjectiveType::Values::CatalogSales },
		{ TEXT("WEB_SESSIONS"), OpenAPIObjectiveType::Values::WebSessions },
		{ TEXT("VIDEO_COMPLETION"), OpenAPIObjectiveType::Values::VideoCompletion }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIObjectiveType::EnumFromString(const FString& EnumAsString, OpenAPIObjectiveType::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIObjectiveType::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIObjectiveType::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIObjectiveType::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPIObjectiveType::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
