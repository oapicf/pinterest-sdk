/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPICreativeType.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPICreativeType::Values& Value)
{
	switch (Value)
	{
	case OpenAPICreativeType::Values::Regular:
		return TEXT("REGULAR");
	case OpenAPICreativeType::Values::Video:
		return TEXT("VIDEO");
	case OpenAPICreativeType::Values::Shopping:
		return TEXT("SHOPPING");
	case OpenAPICreativeType::Values::Carousel:
		return TEXT("CAROUSEL");
	case OpenAPICreativeType::Values::MaxVideo:
		return TEXT("MAX_VIDEO");
	case OpenAPICreativeType::Values::ShopThePin:
		return TEXT("SHOP_THE_PIN");
	case OpenAPICreativeType::Values::Collection:
		return TEXT("COLLECTION");
	case OpenAPICreativeType::Values::Idea:
		return TEXT("IDEA");
	case OpenAPICreativeType::Values::Showcase:
		return TEXT("SHOWCASE");
	case OpenAPICreativeType::Values::Quiz:
		return TEXT("QUIZ");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPICreativeType::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPICreativeType::EnumToString(const OpenAPICreativeType::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPICreativeType::Values& Value)
{
	static TMap<FString, OpenAPICreativeType::Values> StringToEnum = { 
		{ TEXT("REGULAR"), OpenAPICreativeType::Values::Regular },
		{ TEXT("VIDEO"), OpenAPICreativeType::Values::Video },
		{ TEXT("SHOPPING"), OpenAPICreativeType::Values::Shopping },
		{ TEXT("CAROUSEL"), OpenAPICreativeType::Values::Carousel },
		{ TEXT("MAX_VIDEO"), OpenAPICreativeType::Values::MaxVideo },
		{ TEXT("SHOP_THE_PIN"), OpenAPICreativeType::Values::ShopThePin },
		{ TEXT("COLLECTION"), OpenAPICreativeType::Values::Collection },
		{ TEXT("IDEA"), OpenAPICreativeType::Values::Idea },
		{ TEXT("SHOWCASE"), OpenAPICreativeType::Values::Showcase },
		{ TEXT("QUIZ"), OpenAPICreativeType::Values::Quiz }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPICreativeType::EnumFromString(const FString& EnumAsString, OpenAPICreativeType::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPICreativeType::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPICreativeType::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPICreativeType::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPICreativeType::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
