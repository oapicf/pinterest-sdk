/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPICatalogsLocale.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPICatalogsLocale::Values& Value)
{
	switch (Value)
	{
	case OpenAPICatalogsLocale::Values::AfZA:
		return TEXT("af-ZA");
	case OpenAPICatalogsLocale::Values::ArSA:
		return TEXT("ar-SA");
	case OpenAPICatalogsLocale::Values::BgBG:
		return TEXT("bg-BG");
	case OpenAPICatalogsLocale::Values::BnIN:
		return TEXT("bn-IN");
	case OpenAPICatalogsLocale::Values::CsCZ:
		return TEXT("cs-CZ");
	case OpenAPICatalogsLocale::Values::DaDK:
		return TEXT("da-DK");
	case OpenAPICatalogsLocale::Values::De:
		return TEXT("de");
	case OpenAPICatalogsLocale::Values::ElGR:
		return TEXT("el-GR");
	case OpenAPICatalogsLocale::Values::EnAU:
		return TEXT("en-AU");
	case OpenAPICatalogsLocale::Values::EnCA:
		return TEXT("en-CA");
	case OpenAPICatalogsLocale::Values::EnGB:
		return TEXT("en-GB");
	case OpenAPICatalogsLocale::Values::EnIN:
		return TEXT("en-IN");
	case OpenAPICatalogsLocale::Values::EnUS:
		return TEXT("en-US");
	case OpenAPICatalogsLocale::Values::Es419:
		return TEXT("es-419");
	case OpenAPICatalogsLocale::Values::EsAR:
		return TEXT("es-AR");
	case OpenAPICatalogsLocale::Values::EsES:
		return TEXT("es-ES");
	case OpenAPICatalogsLocale::Values::EsMX:
		return TEXT("es-MX");
	case OpenAPICatalogsLocale::Values::FiFI:
		return TEXT("fi-FI");
	case OpenAPICatalogsLocale::Values::Fr:
		return TEXT("fr");
	case OpenAPICatalogsLocale::Values::FrCA:
		return TEXT("fr-CA");
	case OpenAPICatalogsLocale::Values::HeIL:
		return TEXT("he-IL");
	case OpenAPICatalogsLocale::Values::HiIN:
		return TEXT("hi-IN");
	case OpenAPICatalogsLocale::Values::HrHR:
		return TEXT("hr-HR");
	case OpenAPICatalogsLocale::Values::HuHU:
		return TEXT("hu-HU");
	case OpenAPICatalogsLocale::Values::IdID:
		return TEXT("id-ID");
	case OpenAPICatalogsLocale::Values::It:
		return TEXT("it");
	case OpenAPICatalogsLocale::Values::Ja:
		return TEXT("ja");
	case OpenAPICatalogsLocale::Values::KoKR:
		return TEXT("ko-KR");
	case OpenAPICatalogsLocale::Values::MsMY:
		return TEXT("ms-MY");
	case OpenAPICatalogsLocale::Values::NbNO:
		return TEXT("nb-NO");
	case OpenAPICatalogsLocale::Values::Nl:
		return TEXT("nl");
	case OpenAPICatalogsLocale::Values::PlPL:
		return TEXT("pl-PL");
	case OpenAPICatalogsLocale::Values::PtBR:
		return TEXT("pt-BR");
	case OpenAPICatalogsLocale::Values::PtPT:
		return TEXT("pt-PT");
	case OpenAPICatalogsLocale::Values::RoRO:
		return TEXT("ro-RO");
	case OpenAPICatalogsLocale::Values::RuRU:
		return TEXT("ru-RU");
	case OpenAPICatalogsLocale::Values::SkSK:
		return TEXT("sk-SK");
	case OpenAPICatalogsLocale::Values::SvSE:
		return TEXT("sv-SE");
	case OpenAPICatalogsLocale::Values::TeIN:
		return TEXT("te-IN");
	case OpenAPICatalogsLocale::Values::ThTH:
		return TEXT("th-TH");
	case OpenAPICatalogsLocale::Values::TlPH:
		return TEXT("tl-PH");
	case OpenAPICatalogsLocale::Values::Tr:
		return TEXT("tr");
	case OpenAPICatalogsLocale::Values::UkUA:
		return TEXT("uk-UA");
	case OpenAPICatalogsLocale::Values::ViVN:
		return TEXT("vi-VN");
	case OpenAPICatalogsLocale::Values::ZhCN:
		return TEXT("zh-CN");
	case OpenAPICatalogsLocale::Values::ZhTW:
		return TEXT("zh-TW");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPICatalogsLocale::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPICatalogsLocale::EnumToString(const OpenAPICatalogsLocale::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPICatalogsLocale::Values& Value)
{
	static TMap<FString, OpenAPICatalogsLocale::Values> StringToEnum = { 
		{ TEXT("af-ZA"), OpenAPICatalogsLocale::Values::AfZA },
		{ TEXT("ar-SA"), OpenAPICatalogsLocale::Values::ArSA },
		{ TEXT("bg-BG"), OpenAPICatalogsLocale::Values::BgBG },
		{ TEXT("bn-IN"), OpenAPICatalogsLocale::Values::BnIN },
		{ TEXT("cs-CZ"), OpenAPICatalogsLocale::Values::CsCZ },
		{ TEXT("da-DK"), OpenAPICatalogsLocale::Values::DaDK },
		{ TEXT("de"), OpenAPICatalogsLocale::Values::De },
		{ TEXT("el-GR"), OpenAPICatalogsLocale::Values::ElGR },
		{ TEXT("en-AU"), OpenAPICatalogsLocale::Values::EnAU },
		{ TEXT("en-CA"), OpenAPICatalogsLocale::Values::EnCA },
		{ TEXT("en-GB"), OpenAPICatalogsLocale::Values::EnGB },
		{ TEXT("en-IN"), OpenAPICatalogsLocale::Values::EnIN },
		{ TEXT("en-US"), OpenAPICatalogsLocale::Values::EnUS },
		{ TEXT("es-419"), OpenAPICatalogsLocale::Values::Es419 },
		{ TEXT("es-AR"), OpenAPICatalogsLocale::Values::EsAR },
		{ TEXT("es-ES"), OpenAPICatalogsLocale::Values::EsES },
		{ TEXT("es-MX"), OpenAPICatalogsLocale::Values::EsMX },
		{ TEXT("fi-FI"), OpenAPICatalogsLocale::Values::FiFI },
		{ TEXT("fr"), OpenAPICatalogsLocale::Values::Fr },
		{ TEXT("fr-CA"), OpenAPICatalogsLocale::Values::FrCA },
		{ TEXT("he-IL"), OpenAPICatalogsLocale::Values::HeIL },
		{ TEXT("hi-IN"), OpenAPICatalogsLocale::Values::HiIN },
		{ TEXT("hr-HR"), OpenAPICatalogsLocale::Values::HrHR },
		{ TEXT("hu-HU"), OpenAPICatalogsLocale::Values::HuHU },
		{ TEXT("id-ID"), OpenAPICatalogsLocale::Values::IdID },
		{ TEXT("it"), OpenAPICatalogsLocale::Values::It },
		{ TEXT("ja"), OpenAPICatalogsLocale::Values::Ja },
		{ TEXT("ko-KR"), OpenAPICatalogsLocale::Values::KoKR },
		{ TEXT("ms-MY"), OpenAPICatalogsLocale::Values::MsMY },
		{ TEXT("nb-NO"), OpenAPICatalogsLocale::Values::NbNO },
		{ TEXT("nl"), OpenAPICatalogsLocale::Values::Nl },
		{ TEXT("pl-PL"), OpenAPICatalogsLocale::Values::PlPL },
		{ TEXT("pt-BR"), OpenAPICatalogsLocale::Values::PtBR },
		{ TEXT("pt-PT"), OpenAPICatalogsLocale::Values::PtPT },
		{ TEXT("ro-RO"), OpenAPICatalogsLocale::Values::RoRO },
		{ TEXT("ru-RU"), OpenAPICatalogsLocale::Values::RuRU },
		{ TEXT("sk-SK"), OpenAPICatalogsLocale::Values::SkSK },
		{ TEXT("sv-SE"), OpenAPICatalogsLocale::Values::SvSE },
		{ TEXT("te-IN"), OpenAPICatalogsLocale::Values::TeIN },
		{ TEXT("th-TH"), OpenAPICatalogsLocale::Values::ThTH },
		{ TEXT("tl-PH"), OpenAPICatalogsLocale::Values::TlPH },
		{ TEXT("tr"), OpenAPICatalogsLocale::Values::Tr },
		{ TEXT("uk-UA"), OpenAPICatalogsLocale::Values::UkUA },
		{ TEXT("vi-VN"), OpenAPICatalogsLocale::Values::ViVN },
		{ TEXT("zh-CN"), OpenAPICatalogsLocale::Values::ZhCN },
		{ TEXT("zh-TW"), OpenAPICatalogsLocale::Values::ZhTW }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPICatalogsLocale::EnumFromString(const FString& EnumAsString, OpenAPICatalogsLocale::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPICatalogsLocale::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPICatalogsLocale::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPICatalogsLocale::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPICatalogsLocale::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
