/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPICreateMembershipOrPartnershipInvitesBody.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPICreateMembershipOrPartnershipInvitesBody::BusinessRoleEnum& Value)
{
	switch (Value)
	{
	case OpenAPICreateMembershipOrPartnershipInvitesBody::BusinessRoleEnum::Employee:
		return TEXT("EMPLOYEE");
	case OpenAPICreateMembershipOrPartnershipInvitesBody::BusinessRoleEnum::BizAdmin:
		return TEXT("BIZ_ADMIN");
	case OpenAPICreateMembershipOrPartnershipInvitesBody::BusinessRoleEnum::Partner:
		return TEXT("PARTNER");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPICreateMembershipOrPartnershipInvitesBody::BusinessRoleEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPICreateMembershipOrPartnershipInvitesBody::EnumToString(const OpenAPICreateMembershipOrPartnershipInvitesBody::BusinessRoleEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPICreateMembershipOrPartnershipInvitesBody::BusinessRoleEnum& Value)
{
	static TMap<FString, OpenAPICreateMembershipOrPartnershipInvitesBody::BusinessRoleEnum> StringToEnum = { 
		{ TEXT("EMPLOYEE"), OpenAPICreateMembershipOrPartnershipInvitesBody::BusinessRoleEnum::Employee },
		{ TEXT("BIZ_ADMIN"), OpenAPICreateMembershipOrPartnershipInvitesBody::BusinessRoleEnum::BizAdmin },
		{ TEXT("PARTNER"), OpenAPICreateMembershipOrPartnershipInvitesBody::BusinessRoleEnum::Partner }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPICreateMembershipOrPartnershipInvitesBody::EnumFromString(const FString& EnumAsString, OpenAPICreateMembershipOrPartnershipInvitesBody::BusinessRoleEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPICreateMembershipOrPartnershipInvitesBody::BusinessRoleEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPICreateMembershipOrPartnershipInvitesBody::BusinessRoleEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPICreateMembershipOrPartnershipInvitesBody::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("business_role")); WriteJsonValue(Writer, BusinessRole);
	Writer->WriteIdentifierPrefix(TEXT("invite_type")); WriteJsonValue(Writer, InviteType);
	if (Members.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("members")); WriteJsonValue(Writer, Members.GetValue());
	}
	if (Partners.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("partners")); WriteJsonValue(Writer, Partners.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPICreateMembershipOrPartnershipInvitesBody::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("business_role"), BusinessRole);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("invite_type"), InviteType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("members"), Members);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("partners"), Partners);

	return ParseSuccess;
}

}
