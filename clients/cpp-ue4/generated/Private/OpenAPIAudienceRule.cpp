/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIAudienceRule.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIAudienceRule::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Country.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("country")); WriteJsonValue(Writer, Country.GetValue());
	}
	if (CustomerListId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("customer_list_id")); WriteJsonValue(Writer, CustomerListId.GetValue());
	}
	if (EngagementDomain.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("engagement_domain")); WriteJsonValue(Writer, EngagementDomain.GetValue());
	}
	if (EngagementType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("engagement_type")); WriteJsonValue(Writer, EngagementType.GetValue());
	}
	if (Event.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("event")); WriteJsonValue(Writer, Event.GetValue());
	}
	if (EventData.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("event_data")); WriteJsonValue(Writer, EventData.GetValue());
	}
	if (Percentage.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("percentage")); WriteJsonValue(Writer, Percentage.GetValue());
	}
	if (PinId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("pin_id")); WriteJsonValue(Writer, PinId.GetValue());
	}
	if (Prefill.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("prefill")); WriteJsonValue(Writer, Prefill.GetValue());
	}
	if (RetentionDays.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("retention_days")); WriteJsonValue(Writer, RetentionDays.GetValue());
	}
	if (SeedId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("seed_id")); WriteJsonValue(Writer, SeedId.GetValue());
	}
	if (Url.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("url")); WriteJsonValue(Writer, Url.GetValue());
	}
	if (VisitorSourceId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("visitor_source_id")); WriteJsonValue(Writer, VisitorSourceId.GetValue());
	}
	if (EventSource.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("event_source")); WriteJsonValue(Writer, EventSource.GetValue());
	}
	if (IngestionSource.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("ingestion_source")); WriteJsonValue(Writer, IngestionSource.GetValue());
	}
	if (EngagerType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("engager_type")); WriteJsonValue(Writer, EngagerType.GetValue());
	}
	if (CampaignId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("campaign_id")); WriteJsonValue(Writer, CampaignId.GetValue());
	}
	if (AdId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("ad_id")); WriteJsonValue(Writer, AdId.GetValue());
	}
	if (ObjectiveType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("objective_type")); WriteJsonValue(Writer, ObjectiveType.GetValue());
	}
	if (AdAccountId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("ad_account_id")); WriteJsonValue(Writer, AdAccountId.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIAudienceRule::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("country"), Country);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("customer_list_id"), CustomerListId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("engagement_domain"), EngagementDomain);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("engagement_type"), EngagementType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("event"), Event);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("event_data"), EventData);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("percentage"), Percentage);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("pin_id"), PinId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("prefill"), Prefill);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("retention_days"), RetentionDays);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("seed_id"), SeedId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("url"), Url);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("visitor_source_id"), VisitorSourceId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("event_source"), EventSource);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("ingestion_source"), IngestionSource);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("engager_type"), EngagerType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("campaign_id"), CampaignId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("ad_id"), AdId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("objective_type"), ObjectiveType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("ad_account_id"), AdAccountId);

	return ParseSuccess;
}

}
