/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIPinsApiOperations.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIPinsApi::MultiPinsAnalyticsRequest::AppTypesEnum& Value)
{
	switch (Value)
	{
	case OpenAPIPinsApi::MultiPinsAnalyticsRequest::AppTypesEnum::All:
		return TEXT("ALL");
	case OpenAPIPinsApi::MultiPinsAnalyticsRequest::AppTypesEnum::Mobile:
		return TEXT("MOBILE");
	case OpenAPIPinsApi::MultiPinsAnalyticsRequest::AppTypesEnum::Tablet:
		return TEXT("TABLET");
	case OpenAPIPinsApi::MultiPinsAnalyticsRequest::AppTypesEnum::Web:
		return TEXT("WEB");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIPinsApi::MultiPinsAnalyticsRequest::AppTypesEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIPinsApi::MultiPinsAnalyticsRequest::EnumToString(const OpenAPIPinsApi::MultiPinsAnalyticsRequest::AppTypesEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIPinsApi::MultiPinsAnalyticsRequest::AppTypesEnum& Value)
{
	static TMap<FString, OpenAPIPinsApi::MultiPinsAnalyticsRequest::AppTypesEnum> StringToEnum = { 
		{ TEXT("ALL"), OpenAPIPinsApi::MultiPinsAnalyticsRequest::AppTypesEnum::All },
		{ TEXT("MOBILE"), OpenAPIPinsApi::MultiPinsAnalyticsRequest::AppTypesEnum::Mobile },
		{ TEXT("TABLET"), OpenAPIPinsApi::MultiPinsAnalyticsRequest::AppTypesEnum::Tablet },
		{ TEXT("WEB"), OpenAPIPinsApi::MultiPinsAnalyticsRequest::AppTypesEnum::Web }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIPinsApi::MultiPinsAnalyticsRequest::EnumFromString(const FString& EnumAsString, OpenAPIPinsApi::MultiPinsAnalyticsRequest::AppTypesEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIPinsApi::MultiPinsAnalyticsRequest::AppTypesEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIPinsApi::MultiPinsAnalyticsRequest::AppTypesEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIPinsApi::MultiPinsAnalyticsRequest::ComputePath() const
{
	FString Path(TEXT("/pins/analytics"));
	TArray<FString> QueryParams;
	QueryParams.Add(CollectionToUrlString_multi(PinIds, TEXT("pin_ids")));
	QueryParams.Add(FString(TEXT("start_date=")) + ToUrlString(StartDate));
	QueryParams.Add(FString(TEXT("end_date=")) + ToUrlString(EndDate));
	if(AppTypes.IsSet())
	{
		QueryParams.Add(FString(TEXT("app_types=")) + ToUrlString(AppTypes.GetValue()));
	}
	QueryParams.Add(FString(TEXT("metric_types=")) + CollectionToUrlString_csv(MetricTypes, TEXT("metric_types")));
	if(AdAccountId.IsSet())
	{
		QueryParams.Add(FString(TEXT("ad_account_id=")) + ToUrlString(AdAccountId.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIPinsApi::MultiPinsAnalyticsRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIPinsApi::MultiPinsAnalyticsResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("response"));
		break;
	case 400:
		SetResponseString(TEXT("Invalid pins analytics parameters."));
		break;
	case 401:
		SetResponseString(TEXT("Not authorized to access board or Pin."));
		break;
	case 404:
		SetResponseString(TEXT("Pin not found."));
		break;
	case 429:
		SetResponseString(TEXT("This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window."));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIPinsApi::MultiPinsAnalyticsResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const OpenAPIPinsApi::PinsAnalyticsRequest::AppTypesEnum& Value)
{
	switch (Value)
	{
	case OpenAPIPinsApi::PinsAnalyticsRequest::AppTypesEnum::All:
		return TEXT("ALL");
	case OpenAPIPinsApi::PinsAnalyticsRequest::AppTypesEnum::Mobile:
		return TEXT("MOBILE");
	case OpenAPIPinsApi::PinsAnalyticsRequest::AppTypesEnum::Tablet:
		return TEXT("TABLET");
	case OpenAPIPinsApi::PinsAnalyticsRequest::AppTypesEnum::Web:
		return TEXT("WEB");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIPinsApi::PinsAnalyticsRequest::AppTypesEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIPinsApi::PinsAnalyticsRequest::EnumToString(const OpenAPIPinsApi::PinsAnalyticsRequest::AppTypesEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIPinsApi::PinsAnalyticsRequest::AppTypesEnum& Value)
{
	static TMap<FString, OpenAPIPinsApi::PinsAnalyticsRequest::AppTypesEnum> StringToEnum = { 
		{ TEXT("ALL"), OpenAPIPinsApi::PinsAnalyticsRequest::AppTypesEnum::All },
		{ TEXT("MOBILE"), OpenAPIPinsApi::PinsAnalyticsRequest::AppTypesEnum::Mobile },
		{ TEXT("TABLET"), OpenAPIPinsApi::PinsAnalyticsRequest::AppTypesEnum::Tablet },
		{ TEXT("WEB"), OpenAPIPinsApi::PinsAnalyticsRequest::AppTypesEnum::Web }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIPinsApi::PinsAnalyticsRequest::EnumFromString(const FString& EnumAsString, OpenAPIPinsApi::PinsAnalyticsRequest::AppTypesEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIPinsApi::PinsAnalyticsRequest::AppTypesEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIPinsApi::PinsAnalyticsRequest::AppTypesEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIPinsApi::PinsAnalyticsRequest::SplitFieldEnum& Value)
{
	switch (Value)
	{
	case OpenAPIPinsApi::PinsAnalyticsRequest::SplitFieldEnum::NoSplit:
		return TEXT("NO_SPLIT");
	case OpenAPIPinsApi::PinsAnalyticsRequest::SplitFieldEnum::AppType:
		return TEXT("APP_TYPE");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIPinsApi::PinsAnalyticsRequest::SplitFieldEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIPinsApi::PinsAnalyticsRequest::EnumToString(const OpenAPIPinsApi::PinsAnalyticsRequest::SplitFieldEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIPinsApi::PinsAnalyticsRequest::SplitFieldEnum& Value)
{
	static TMap<FString, OpenAPIPinsApi::PinsAnalyticsRequest::SplitFieldEnum> StringToEnum = { 
		{ TEXT("NO_SPLIT"), OpenAPIPinsApi::PinsAnalyticsRequest::SplitFieldEnum::NoSplit },
		{ TEXT("APP_TYPE"), OpenAPIPinsApi::PinsAnalyticsRequest::SplitFieldEnum::AppType }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIPinsApi::PinsAnalyticsRequest::EnumFromString(const FString& EnumAsString, OpenAPIPinsApi::PinsAnalyticsRequest::SplitFieldEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIPinsApi::PinsAnalyticsRequest::SplitFieldEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIPinsApi::PinsAnalyticsRequest::SplitFieldEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIPinsApi::PinsAnalyticsRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("pin_id"), FStringFormatArg(ToUrlString(PinId)) } };

	FString Path = FString::Format(TEXT("/pins/{pin_id}/analytics"), PathParams);

	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("start_date=")) + ToUrlString(StartDate));
	QueryParams.Add(FString(TEXT("end_date=")) + ToUrlString(EndDate));
	if(AppTypes.IsSet())
	{
		QueryParams.Add(FString(TEXT("app_types=")) + ToUrlString(AppTypes.GetValue()));
	}
	QueryParams.Add(FString(TEXT("metric_types=")) + CollectionToUrlString_csv(MetricTypes, TEXT("metric_types")));
	if(SplitField.IsSet())
	{
		QueryParams.Add(FString(TEXT("split_field=")) + ToUrlString(SplitField.GetValue()));
	}
	if(AdAccountId.IsSet())
	{
		QueryParams.Add(FString(TEXT("ad_account_id=")) + ToUrlString(AdAccountId.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIPinsApi::PinsAnalyticsRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIPinsApi::PinsAnalyticsResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("response"));
		break;
	case 400:
		SetResponseString(TEXT("Invalid pins analytics parameters."));
		break;
	case 403:
		SetResponseString(TEXT("Not authorized to access board or Pin."));
		break;
	case 404:
		SetResponseString(TEXT("Pin not found."));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIPinsApi::PinsAnalyticsResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIPinsApi::PinsCreateRequest::ComputePath() const
{
	FString Path(TEXT("/pins"));
	TArray<FString> QueryParams;
	if(AdAccountId.IsSet())
	{
		QueryParams.Add(FString(TEXT("ad_account_id=")) + ToUrlString(AdAccountId.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIPinsApi::PinsCreateRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		if (OpenAPIPinCreate.IsSet())
		{
			WriteJsonValue(Writer, OpenAPIPinCreate.GetValue());
		}
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPIPinCreate) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPIPinCreate) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIPinsApi::PinsCreateResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 201:
		SetResponseString(TEXT("Successful pin creation."));
		break;
	case 400:
		SetResponseString(TEXT("Invalid Pin parameters response"));
		break;
	case 403:
		SetResponseString(TEXT("The Pin&#39;s image is too small, too large or is broken"));
		break;
	case 404:
		SetResponseString(TEXT("Board or section not found"));
		break;
	case 429:
		SetResponseString(TEXT("This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window."));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIPinsApi::PinsCreateResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIPinsApi::PinsDeleteRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("pin_id"), FStringFormatArg(ToUrlString(PinId)) } };

	FString Path = FString::Format(TEXT("/pins/{pin_id}"), PathParams);

	TArray<FString> QueryParams;
	if(AdAccountId.IsSet())
	{
		QueryParams.Add(FString(TEXT("ad_account_id=")) + ToUrlString(AdAccountId.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIPinsApi::PinsDeleteRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("DELETE"));

}

void OpenAPIPinsApi::PinsDeleteResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 204:
		SetResponseString(TEXT("Successfully deleted Pin"));
		break;
	case 403:
		SetResponseString(TEXT("Not authorized to access board or Pin."));
		break;
	case 404:
		SetResponseString(TEXT("Pin not found."));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIPinsApi::PinsDeleteResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

FString OpenAPIPinsApi::PinsGetRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("pin_id"), FStringFormatArg(ToUrlString(PinId)) } };

	FString Path = FString::Format(TEXT("/pins/{pin_id}"), PathParams);

	TArray<FString> QueryParams;
	if(PinMetrics.IsSet())
	{
		QueryParams.Add(FString(TEXT("pin_metrics=")) + ToUrlString(PinMetrics.GetValue()));
	}
	if(AdAccountId.IsSet())
	{
		QueryParams.Add(FString(TEXT("ad_account_id=")) + ToUrlString(AdAccountId.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIPinsApi::PinsGetRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIPinsApi::PinsGetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("response"));
		break;
	case 403:
		SetResponseString(TEXT("Not authorized to access board or Pin."));
		break;
	case 404:
		SetResponseString(TEXT("Pin not found."));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIPinsApi::PinsGetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const OpenAPIPinsApi::PinsListRequest::PinFilterEnum& Value)
{
	switch (Value)
	{
	case OpenAPIPinsApi::PinsListRequest::PinFilterEnum::ExcludeNative:
		return TEXT("exclude_native");
	case OpenAPIPinsApi::PinsListRequest::PinFilterEnum::ExcludeRepins:
		return TEXT("exclude_repins");
	case OpenAPIPinsApi::PinsListRequest::PinFilterEnum::HasBeenPromoted:
		return TEXT("has_been_promoted");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIPinsApi::PinsListRequest::PinFilterEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIPinsApi::PinsListRequest::EnumToString(const OpenAPIPinsApi::PinsListRequest::PinFilterEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIPinsApi::PinsListRequest::PinFilterEnum& Value)
{
	static TMap<FString, OpenAPIPinsApi::PinsListRequest::PinFilterEnum> StringToEnum = { 
		{ TEXT("exclude_native"), OpenAPIPinsApi::PinsListRequest::PinFilterEnum::ExcludeNative },
		{ TEXT("exclude_repins"), OpenAPIPinsApi::PinsListRequest::PinFilterEnum::ExcludeRepins },
		{ TEXT("has_been_promoted"), OpenAPIPinsApi::PinsListRequest::PinFilterEnum::HasBeenPromoted }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIPinsApi::PinsListRequest::EnumFromString(const FString& EnumAsString, OpenAPIPinsApi::PinsListRequest::PinFilterEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIPinsApi::PinsListRequest::PinFilterEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIPinsApi::PinsListRequest::PinFilterEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIPinsApi::PinsListRequest::PinTypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIPinsApi::PinsListRequest::PinTypeEnum::_Private:
		return TEXT("PRIVATE");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIPinsApi::PinsListRequest::PinTypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIPinsApi::PinsListRequest::EnumToString(const OpenAPIPinsApi::PinsListRequest::PinTypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIPinsApi::PinsListRequest::PinTypeEnum& Value)
{
	static TMap<FString, OpenAPIPinsApi::PinsListRequest::PinTypeEnum> StringToEnum = { 
		{ TEXT("PRIVATE"), OpenAPIPinsApi::PinsListRequest::PinTypeEnum::_Private }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIPinsApi::PinsListRequest::EnumFromString(const FString& EnumAsString, OpenAPIPinsApi::PinsListRequest::PinTypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIPinsApi::PinsListRequest::PinTypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIPinsApi::PinsListRequest::PinTypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIPinsApi::PinsListRequest::CreativeTypesEnum& Value)
{
	switch (Value)
	{
	case OpenAPIPinsApi::PinsListRequest::CreativeTypesEnum::Regular:
		return TEXT("REGULAR");
	case OpenAPIPinsApi::PinsListRequest::CreativeTypesEnum::Video:
		return TEXT("VIDEO");
	case OpenAPIPinsApi::PinsListRequest::CreativeTypesEnum::Shopping:
		return TEXT("SHOPPING");
	case OpenAPIPinsApi::PinsListRequest::CreativeTypesEnum::Carousel:
		return TEXT("CAROUSEL");
	case OpenAPIPinsApi::PinsListRequest::CreativeTypesEnum::MaxVideo:
		return TEXT("MAX_VIDEO");
	case OpenAPIPinsApi::PinsListRequest::CreativeTypesEnum::ShopThePin:
		return TEXT("SHOP_THE_PIN");
	case OpenAPIPinsApi::PinsListRequest::CreativeTypesEnum::Collection:
		return TEXT("COLLECTION");
	case OpenAPIPinsApi::PinsListRequest::CreativeTypesEnum::Idea:
		return TEXT("IDEA");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIPinsApi::PinsListRequest::CreativeTypesEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIPinsApi::PinsListRequest::EnumToString(const OpenAPIPinsApi::PinsListRequest::CreativeTypesEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIPinsApi::PinsListRequest::CreativeTypesEnum& Value)
{
	static TMap<FString, OpenAPIPinsApi::PinsListRequest::CreativeTypesEnum> StringToEnum = { 
		{ TEXT("REGULAR"), OpenAPIPinsApi::PinsListRequest::CreativeTypesEnum::Regular },
		{ TEXT("VIDEO"), OpenAPIPinsApi::PinsListRequest::CreativeTypesEnum::Video },
		{ TEXT("SHOPPING"), OpenAPIPinsApi::PinsListRequest::CreativeTypesEnum::Shopping },
		{ TEXT("CAROUSEL"), OpenAPIPinsApi::PinsListRequest::CreativeTypesEnum::Carousel },
		{ TEXT("MAX_VIDEO"), OpenAPIPinsApi::PinsListRequest::CreativeTypesEnum::MaxVideo },
		{ TEXT("SHOP_THE_PIN"), OpenAPIPinsApi::PinsListRequest::CreativeTypesEnum::ShopThePin },
		{ TEXT("COLLECTION"), OpenAPIPinsApi::PinsListRequest::CreativeTypesEnum::Collection },
		{ TEXT("IDEA"), OpenAPIPinsApi::PinsListRequest::CreativeTypesEnum::Idea }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIPinsApi::PinsListRequest::EnumFromString(const FString& EnumAsString, OpenAPIPinsApi::PinsListRequest::CreativeTypesEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIPinsApi::PinsListRequest::CreativeTypesEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIPinsApi::PinsListRequest::CreativeTypesEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIPinsApi::PinsListRequest::ComputePath() const
{
	FString Path(TEXT("/pins"));
	TArray<FString> QueryParams;
	if(Bookmark.IsSet())
	{
		QueryParams.Add(FString(TEXT("bookmark=")) + ToUrlString(Bookmark.GetValue()));
	}
	if(PageSize.IsSet())
	{
		QueryParams.Add(FString(TEXT("page_size=")) + ToUrlString(PageSize.GetValue()));
	}
	if(PinFilter.IsSet())
	{
		QueryParams.Add(FString(TEXT("pin_filter=")) + ToUrlString(PinFilter.GetValue()));
	}
	if(IncludeProtectedPins.IsSet())
	{
		QueryParams.Add(FString(TEXT("include_protected_pins=")) + ToUrlString(IncludeProtectedPins.GetValue()));
	}
	if(PinType.IsSet())
	{
		QueryParams.Add(FString(TEXT("pin_type=")) + ToUrlString(PinType.GetValue()));
	}
	if(CreativeTypes.IsSet())
	{
		QueryParams.Add(CollectionToUrlString_multi(CreativeTypes.GetValue(), TEXT("creative_types")));
	}
	if(AdAccountId.IsSet())
	{
		QueryParams.Add(FString(TEXT("ad_account_id=")) + ToUrlString(AdAccountId.GetValue()));
	}
	if(PinMetrics.IsSet())
	{
		QueryParams.Add(FString(TEXT("pin_metrics=")) + ToUrlString(PinMetrics.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIPinsApi::PinsListRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIPinsApi::PinsListResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 400:
		SetResponseString(TEXT("Invalid pin filter value"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIPinsApi::PinsListResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIPinsApi::PinsSaveRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("pin_id"), FStringFormatArg(ToUrlString(PinId)) } };

	FString Path = FString::Format(TEXT("/pins/{pin_id}/save"), PathParams);

	TArray<FString> QueryParams;
	if(AdAccountId.IsSet())
	{
		QueryParams.Add(FString(TEXT("ad_account_id=")) + ToUrlString(AdAccountId.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIPinsApi::PinsSaveRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, OpenAPIPinsSaveRequest);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPIPinsSaveRequest) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPIPinsSaveRequest) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIPinsApi::PinsSaveResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 201:
		SetResponseString(TEXT("Successfully saved pin."));
		break;
	case 403:
		SetResponseString(TEXT("Not authorized to access Board or Pin."));
		break;
	case 404:
		SetResponseString(TEXT("Board or Pin not found."));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIPinsApi::PinsSaveResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIPinsApi::PinsUpdateRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("pin_id"), FStringFormatArg(ToUrlString(PinId)) } };

	FString Path = FString::Format(TEXT("/pins/{pin_id}"), PathParams);

	TArray<FString> QueryParams;
	if(AdAccountId.IsSet())
	{
		QueryParams.Add(FString(TEXT("ad_account_id=")) + ToUrlString(AdAccountId.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIPinsApi::PinsUpdateRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("PATCH"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		if (OpenAPIPinUpdate.IsSet())
		{
			WriteJsonValue(Writer, OpenAPIPinUpdate.GetValue());
		}
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPIPinUpdate) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPIPinUpdate) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIPinsApi::PinsUpdateResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("response"));
		break;
	case 403:
		SetResponseString(TEXT("Not authorized to update Pin."));
		break;
	case 404:
		SetResponseString(TEXT("Pin not found."));
		break;
	case 429:
		SetResponseString(TEXT("This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window."));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIPinsApi::PinsUpdateResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}
