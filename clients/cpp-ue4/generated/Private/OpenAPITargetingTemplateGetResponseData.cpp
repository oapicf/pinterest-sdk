/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPITargetingTemplateGetResponseData.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPITargetingTemplateGetResponseData::StatusEnum& Value)
{
	switch (Value)
	{
	case OpenAPITargetingTemplateGetResponseData::StatusEnum::Active:
		return TEXT("ACTIVE");
	case OpenAPITargetingTemplateGetResponseData::StatusEnum::Deleted:
		return TEXT("DELETED");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPITargetingTemplateGetResponseData::StatusEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPITargetingTemplateGetResponseData::EnumToString(const OpenAPITargetingTemplateGetResponseData::StatusEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPITargetingTemplateGetResponseData::StatusEnum& Value)
{
	static TMap<FString, OpenAPITargetingTemplateGetResponseData::StatusEnum> StringToEnum = { 
		{ TEXT("ACTIVE"), OpenAPITargetingTemplateGetResponseData::StatusEnum::Active },
		{ TEXT("DELETED"), OpenAPITargetingTemplateGetResponseData::StatusEnum::Deleted }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPITargetingTemplateGetResponseData::EnumFromString(const FString& EnumAsString, OpenAPITargetingTemplateGetResponseData::StatusEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPITargetingTemplateGetResponseData::StatusEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPITargetingTemplateGetResponseData::StatusEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPITargetingTemplateGetResponseData::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Name.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name.GetValue());
	}
	if (AutoTargetingEnabled.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("auto_targeting_enabled")); WriteJsonValue(Writer, AutoTargetingEnabled.GetValue());
	}
	if (TargetingAttributes.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("targeting_attributes")); WriteJsonValue(Writer, TargetingAttributes.GetValue());
	}
	if (PlacementGroup.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("placement_group")); WriteJsonValue(Writer, PlacementGroup.GetValue());
	}
	if (Keywords.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("keywords")); WriteJsonValue(Writer, Keywords.GetValue());
	}
	if (TrackingUrls.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("tracking_urls")); WriteJsonValue(Writer, TrackingUrls.GetValue());
	}
	if (Id.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id.GetValue());
	}
	if (CreatedTime.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("created_time")); WriteJsonValue(Writer, CreatedTime.GetValue());
	}
	if (UpdatedTime.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("updated_time")); WriteJsonValue(Writer, UpdatedTime.GetValue());
	}
	if (AdAccountId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("ad_account_id")); WriteJsonValue(Writer, AdAccountId.GetValue());
	}
	if (Status.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("status")); WriteJsonValue(Writer, Status.GetValue());
	}
	if (Sizing.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("sizing")); WriteJsonValue(Writer, Sizing.GetValue());
	}
	if (Valid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("valid")); WriteJsonValue(Writer, Valid.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPITargetingTemplateGetResponseData::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("auto_targeting_enabled"), AutoTargetingEnabled);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("targeting_attributes"), TargetingAttributes);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("placement_group"), PlacementGroup);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("keywords"), Keywords);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("tracking_urls"), TrackingUrls);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("created_time"), CreatedTime);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("updated_time"), UpdatedTime);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("ad_account_id"), AdAccountId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("status"), Status);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("sizing"), Sizing);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("valid"), Valid);

	return ParseSuccess;
}

}
