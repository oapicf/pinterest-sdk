/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIBusinessAccessRelationshipsApiOperations.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace OpenAPI
{

FString OpenAPIBusinessAccessRelationshipsApi::DeleteBusinessMembershipRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("business_id"), FStringFormatArg(ToUrlString(BusinessId)) } };

	FString Path = FString::Format(TEXT("/businesses/{business_id}/members"), PathParams);

	return Path;
}

void OpenAPIBusinessAccessRelationshipsApi::DeleteBusinessMembershipRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("DELETE"));

}

void OpenAPIBusinessAccessRelationshipsApi::DeleteBusinessMembershipResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIBusinessAccessRelationshipsApi::DeleteBusinessMembershipResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIBusinessAccessRelationshipsApi::DeleteBusinessPartnersRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("business_id"), FStringFormatArg(ToUrlString(BusinessId)) } };

	FString Path = FString::Format(TEXT("/businesses/{business_id}/partners"), PathParams);

	return Path;
}

void OpenAPIBusinessAccessRelationshipsApi::DeleteBusinessPartnersRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("DELETE"));

}

void OpenAPIBusinessAccessRelationshipsApi::DeleteBusinessPartnersResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 404:
		SetResponseString(TEXT("A supplied partner id doesn&#39;t exist"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIBusinessAccessRelationshipsApi::DeleteBusinessPartnersResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIBusinessAccessRelationshipsApi::GetBusinessEmployersRequest::ComputePath() const
{
	FString Path(TEXT("/businesses/employers"));
	TArray<FString> QueryParams;
	if(PageSize.IsSet())
	{
		QueryParams.Add(FString(TEXT("page_size=")) + ToUrlString(PageSize.GetValue()));
	}
	if(Bookmark.IsSet())
	{
		QueryParams.Add(FString(TEXT("bookmark=")) + ToUrlString(Bookmark.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIBusinessAccessRelationshipsApi::GetBusinessEmployersRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIBusinessAccessRelationshipsApi::GetBusinessEmployersResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIBusinessAccessRelationshipsApi::GetBusinessEmployersResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIBusinessAccessRelationshipsApi::GetBusinessMembersRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("business_id"), FStringFormatArg(ToUrlString(BusinessId)) } };

	FString Path = FString::Format(TEXT("/businesses/{business_id}/members"), PathParams);

	TArray<FString> QueryParams;
	if(AssetsSummary.IsSet())
	{
		QueryParams.Add(FString(TEXT("assets_summary=")) + ToUrlString(AssetsSummary.GetValue()));
	}
	if(BusinessRoles.IsSet())
	{
		QueryParams.Add(CollectionToUrlString_multi(BusinessRoles.GetValue(), TEXT("business_roles")));
	}
	if(MemberIds.IsSet())
	{
		QueryParams.Add(FString(TEXT("member_ids=")) + ToUrlString(MemberIds.GetValue()));
	}
	if(StartIndex.IsSet())
	{
		QueryParams.Add(FString(TEXT("start_index=")) + ToUrlString(StartIndex.GetValue()));
	}
	if(Bookmark.IsSet())
	{
		QueryParams.Add(FString(TEXT("bookmark=")) + ToUrlString(Bookmark.GetValue()));
	}
	if(PageSize.IsSet())
	{
		QueryParams.Add(FString(TEXT("page_size=")) + ToUrlString(PageSize.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIBusinessAccessRelationshipsApi::GetBusinessMembersRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIBusinessAccessRelationshipsApi::GetBusinessMembersResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIBusinessAccessRelationshipsApi::GetBusinessMembersResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIBusinessAccessRelationshipsApi::GetBusinessPartnersRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("business_id"), FStringFormatArg(ToUrlString(BusinessId)) } };

	FString Path = FString::Format(TEXT("/businesses/{business_id}/partners"), PathParams);

	TArray<FString> QueryParams;
	if(AssetsSummary.IsSet())
	{
		QueryParams.Add(FString(TEXT("assets_summary=")) + ToUrlString(AssetsSummary.GetValue()));
	}
	if(PartnerType.IsSet())
	{
		QueryParams.Add(FString(TEXT("partner_type=")) + ToUrlString(PartnerType.GetValue()));
	}
	if(PartnerIds.IsSet())
	{
		QueryParams.Add(FString(TEXT("partner_ids=")) + ToUrlString(PartnerIds.GetValue()));
	}
	if(StartIndex.IsSet())
	{
		QueryParams.Add(FString(TEXT("start_index=")) + ToUrlString(StartIndex.GetValue()));
	}
	if(PageSize.IsSet())
	{
		QueryParams.Add(FString(TEXT("page_size=")) + ToUrlString(PageSize.GetValue()));
	}
	if(Bookmark.IsSet())
	{
		QueryParams.Add(FString(TEXT("bookmark=")) + ToUrlString(Bookmark.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIBusinessAccessRelationshipsApi::GetBusinessPartnersRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIBusinessAccessRelationshipsApi::GetBusinessPartnersResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIBusinessAccessRelationshipsApi::GetBusinessPartnersResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIBusinessAccessRelationshipsApi::UpdateBusinessMembershipsRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("business_id"), FStringFormatArg(ToUrlString(BusinessId)) } };

	FString Path = FString::Format(TEXT("/businesses/{business_id}/members"), PathParams);

	return Path;
}

void OpenAPIBusinessAccessRelationshipsApi::UpdateBusinessMembershipsRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("PATCH"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, OpenAPIUpdateMemberBusinessRoleBody);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPIUpdateMemberBusinessRoleBody) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPIUpdateMemberBusinessRoleBody) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIBusinessAccessRelationshipsApi::UpdateBusinessMembershipsResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("response"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIBusinessAccessRelationshipsApi::UpdateBusinessMembershipsResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}
