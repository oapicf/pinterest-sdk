/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPICatalogsReportFeedIngestionStats.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPICatalogsReportFeedIngestionStats::ReportTypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPICatalogsReportFeedIngestionStats::ReportTypeEnum::FeedIngestionIssues:
		return TEXT("FEED_INGESTION_ISSUES");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPICatalogsReportFeedIngestionStats::ReportTypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPICatalogsReportFeedIngestionStats::EnumToString(const OpenAPICatalogsReportFeedIngestionStats::ReportTypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPICatalogsReportFeedIngestionStats::ReportTypeEnum& Value)
{
	static TMap<FString, OpenAPICatalogsReportFeedIngestionStats::ReportTypeEnum> StringToEnum = { 
		{ TEXT("FEED_INGESTION_ISSUES"), OpenAPICatalogsReportFeedIngestionStats::ReportTypeEnum::FeedIngestionIssues }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPICatalogsReportFeedIngestionStats::EnumFromString(const FString& EnumAsString, OpenAPICatalogsReportFeedIngestionStats::ReportTypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPICatalogsReportFeedIngestionStats::ReportTypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPICatalogsReportFeedIngestionStats::ReportTypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPICatalogsReportFeedIngestionStats::SeverityEnum& Value)
{
	switch (Value)
	{
	case OpenAPICatalogsReportFeedIngestionStats::SeverityEnum::Warn:
		return TEXT("WARN");
	case OpenAPICatalogsReportFeedIngestionStats::SeverityEnum::Error:
		return TEXT("ERROR");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPICatalogsReportFeedIngestionStats::SeverityEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPICatalogsReportFeedIngestionStats::EnumToString(const OpenAPICatalogsReportFeedIngestionStats::SeverityEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPICatalogsReportFeedIngestionStats::SeverityEnum& Value)
{
	static TMap<FString, OpenAPICatalogsReportFeedIngestionStats::SeverityEnum> StringToEnum = { 
		{ TEXT("WARN"), OpenAPICatalogsReportFeedIngestionStats::SeverityEnum::Warn },
		{ TEXT("ERROR"), OpenAPICatalogsReportFeedIngestionStats::SeverityEnum::Error }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPICatalogsReportFeedIngestionStats::EnumFromString(const FString& EnumAsString, OpenAPICatalogsReportFeedIngestionStats::SeverityEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPICatalogsReportFeedIngestionStats::SeverityEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPICatalogsReportFeedIngestionStats::SeverityEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPICatalogsReportFeedIngestionStats::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (ReportType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("report_type")); WriteJsonValue(Writer, ReportType.GetValue());
	}
	if (CatalogId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("catalog_id")); WriteJsonValue(Writer, CatalogId.GetValue());
	}
	if (Code.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("code")); WriteJsonValue(Writer, Code.GetValue());
	}
	if (CodeLabel.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("code_label")); WriteJsonValue(Writer, CodeLabel.GetValue());
	}
	if (Message.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("message")); WriteJsonValue(Writer, Message.GetValue());
	}
	if (Occurrences.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("occurrences")); WriteJsonValue(Writer, Occurrences.GetValue());
	}
	if (Severity.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("severity")); WriteJsonValue(Writer, Severity.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPICatalogsReportFeedIngestionStats::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("report_type"), ReportType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("catalog_id"), CatalogId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("code"), Code);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("code_label"), CodeLabel);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("message"), Message);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("occurrences"), Occurrences);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("severity"), Severity);

	return ParseSuccess;
}

}
