/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIOauthApiOperations.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIOauthApi::OauthTokenRequest::GrantTypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIOauthApi::OauthTokenRequest::GrantTypeEnum::AuthorizationCode:
		return TEXT("authorization_code");
	case OpenAPIOauthApi::OauthTokenRequest::GrantTypeEnum::RefreshToken:
		return TEXT("refresh_token");
	case OpenAPIOauthApi::OauthTokenRequest::GrantTypeEnum::ClientCredentials:
		return TEXT("client_credentials");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIOauthApi::OauthTokenRequest::GrantTypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIOauthApi::OauthTokenRequest::EnumToString(const OpenAPIOauthApi::OauthTokenRequest::GrantTypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIOauthApi::OauthTokenRequest::GrantTypeEnum& Value)
{
	static TMap<FString, OpenAPIOauthApi::OauthTokenRequest::GrantTypeEnum> StringToEnum = { 
		{ TEXT("authorization_code"), OpenAPIOauthApi::OauthTokenRequest::GrantTypeEnum::AuthorizationCode },
		{ TEXT("refresh_token"), OpenAPIOauthApi::OauthTokenRequest::GrantTypeEnum::RefreshToken },
		{ TEXT("client_credentials"), OpenAPIOauthApi::OauthTokenRequest::GrantTypeEnum::ClientCredentials }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIOauthApi::OauthTokenRequest::EnumFromString(const FString& EnumAsString, OpenAPIOauthApi::OauthTokenRequest::GrantTypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIOauthApi::OauthTokenRequest::GrantTypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIOauthApi::OauthTokenRequest::GrantTypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIOauthApi::OauthTokenRequest::ComputePath() const
{
	FString Path(TEXT("/oauth/token"));
	return Path;
}

void OpenAPIOauthApi::OauthTokenRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/x-www-form-urlencoded") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Form parameters added to try to generate a json body when no body parameters are specified.
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);
		Writer->WriteObjectStart();
		Writer->WriteIdentifierPrefix(TEXT("grant_type"));
		WriteJsonValue(Writer, GrantType);
		Writer->WriteObjectEnd();
		Writer->Close();
		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		HttpMultipartFormData FormData;
		FormData.AddStringPart(TEXT("grant_type"), *ToUrlString(GrantType));

		FormData.SetupHttpRequest(HttpRequest);
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		TArray<FString> FormParams;
		FormParams.Add(FString(TEXT("grant_type=")) + ToUrlString(GrantType));

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/x-www-form-urlencoded; charset=utf-8"));
		HttpRequest->SetContentAsString(FString::Join(FormParams, TEXT("&")));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIOauthApi::OauthTokenResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("response"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIOauthApi::OauthTokenResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}
