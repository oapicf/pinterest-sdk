/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIConversionEventsUserData.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIConversionEventsUserData::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Ph.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("ph")); WriteJsonValue(Writer, Ph.GetValue());
	}
	if (Ge.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("ge")); WriteJsonValue(Writer, Ge.GetValue());
	}
	if (Db.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("db")); WriteJsonValue(Writer, Db.GetValue());
	}
	if (Ln.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("ln")); WriteJsonValue(Writer, Ln.GetValue());
	}
	if (Fn.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("fn")); WriteJsonValue(Writer, Fn.GetValue());
	}
	if (Ct.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("ct")); WriteJsonValue(Writer, Ct.GetValue());
	}
	if (St.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("st")); WriteJsonValue(Writer, St.GetValue());
	}
	if (Zp.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("zp")); WriteJsonValue(Writer, Zp.GetValue());
	}
	if (Country.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("country")); WriteJsonValue(Writer, Country.GetValue());
	}
	if (ExternalId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("external_id")); WriteJsonValue(Writer, ExternalId.GetValue());
	}
	if (ClickId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("click_id")); WriteJsonValue(Writer, ClickId.GetValue());
	}
	if (PartnerId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("partner_id")); WriteJsonValue(Writer, PartnerId.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("em")); WriteJsonValue(Writer, Em);
	Writer->WriteIdentifierPrefix(TEXT("hashed_maids")); WriteJsonValue(Writer, HashedMaids);
	Writer->WriteIdentifierPrefix(TEXT("client_ip_address")); WriteJsonValue(Writer, ClientIpAddress);
	Writer->WriteIdentifierPrefix(TEXT("client_user_agent")); WriteJsonValue(Writer, ClientUserAgent);
	Writer->WriteObjectEnd();
}

bool OpenAPIConversionEventsUserData::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("ph"), Ph);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("ge"), Ge);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("db"), Db);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("ln"), Ln);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("fn"), Fn);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("ct"), Ct);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("st"), St);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("zp"), Zp);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("country"), Country);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("external_id"), ExternalId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("click_id"), ClickId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("partner_id"), PartnerId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("em"), Em);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("hashed_maids"), HashedMaids);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("client_ip_address"), ClientIpAddress);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("client_user_agent"), ClientUserAgent);

	return ParseSuccess;
}

}
