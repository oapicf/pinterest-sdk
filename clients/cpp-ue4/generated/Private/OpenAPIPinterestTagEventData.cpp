/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIPinterestTagEventData.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIPinterestTagEventData::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Currency.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("currency")); WriteJsonValue(Writer, Currency.GetValue());
	}
	if (LeadType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("lead_type")); WriteJsonValue(Writer, LeadType.GetValue());
	}
	if (LineItems.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("line_items")); WriteJsonValue(Writer, LineItems.GetValue());
	}
	if (OrderId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("order_id")); WriteJsonValue(Writer, OrderId.GetValue());
	}
	if (OrderQuantity.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("order_quantity")); WriteJsonValue(Writer, OrderQuantity.GetValue());
	}
	if (PageName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("page_name")); WriteJsonValue(Writer, PageName.GetValue());
	}
	if (PromoCode.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("promo_code")); WriteJsonValue(Writer, PromoCode.GetValue());
	}
	if (Property.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("property")); WriteJsonValue(Writer, Property.GetValue());
	}
	if (SearchQuery.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("search_query")); WriteJsonValue(Writer, SearchQuery.GetValue());
	}
	if (Value.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("value")); WriteJsonValue(Writer, Value.GetValue());
	}
	if (VideoTitle.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("video_title")); WriteJsonValue(Writer, VideoTitle.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIPinterestTagEventData::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("currency"), Currency);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("lead_type"), LeadType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("line_items"), LineItems);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("order_id"), OrderId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("order_quantity"), OrderQuantity);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("page_name"), PageName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("promo_code"), PromoCode);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("property"), Property);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("search_query"), SearchQuery);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("value"), Value);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("video_title"), VideoTitle);

	return ParseSuccess;
}

}
