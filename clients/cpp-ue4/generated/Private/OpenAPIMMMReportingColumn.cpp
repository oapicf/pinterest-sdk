/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIMMMReportingColumn.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIMMMReportingColumn::Values& Value)
{
	switch (Value)
	{
	case OpenAPIMMMReportingColumn::Values::SpendInDollar:
		return TEXT("SPEND_IN_DOLLAR");
	case OpenAPIMMMReportingColumn::Values::SpendInMicroDollar:
		return TEXT("SPEND_IN_MICRO_DOLLAR");
	case OpenAPIMMMReportingColumn::Values::EcpcInDollar:
		return TEXT("ECPC_IN_DOLLAR");
	case OpenAPIMMMReportingColumn::Values::Ectr:
		return TEXT("ECTR");
	case OpenAPIMMMReportingColumn::Values::CampaignName:
		return TEXT("CAMPAIGN_NAME");
	case OpenAPIMMMReportingColumn::Values::TotalEngagement:
		return TEXT("TOTAL_ENGAGEMENT");
	case OpenAPIMMMReportingColumn::Values::EengagementRate:
		return TEXT("EENGAGEMENT_RATE");
	case OpenAPIMMMReportingColumn::Values::EcpmInDollar:
		return TEXT("ECPM_IN_DOLLAR");
	case OpenAPIMMMReportingColumn::Values::CampaignId:
		return TEXT("CAMPAIGN_ID");
	case OpenAPIMMMReportingColumn::Values::AdvertiserId:
		return TEXT("ADVERTISER_ID");
	case OpenAPIMMMReportingColumn::Values::AdGroupId:
		return TEXT("AD_GROUP_ID");
	case OpenAPIMMMReportingColumn::Values::AdGroupName:
		return TEXT("AD_GROUP_NAME");
	case OpenAPIMMMReportingColumn::Values::CLICKTHROUGH1:
		return TEXT("CLICKTHROUGH_1");
	case OpenAPIMMMReportingColumn::Values::IMPRESSION1:
		return TEXT("IMPRESSION_1");
	case OpenAPIMMMReportingColumn::Values::CLICKTHROUGH2:
		return TEXT("CLICKTHROUGH_2");
	case OpenAPIMMMReportingColumn::Values::IMPRESSION2:
		return TEXT("IMPRESSION_2");
	case OpenAPIMMMReportingColumn::Values::TotalClickthrough:
		return TEXT("TOTAL_CLICKTHROUGH");
	case OpenAPIMMMReportingColumn::Values::TotalImpression:
		return TEXT("TOTAL_IMPRESSION");
	case OpenAPIMMMReportingColumn::Values::AdvertiserName:
		return TEXT("ADVERTISER_NAME");
	case OpenAPIMMMReportingColumn::Values::SpendOrderLinePaidType:
		return TEXT("SPEND_ORDER_LINE_PAID_TYPE");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIMMMReportingColumn::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIMMMReportingColumn::EnumToString(const OpenAPIMMMReportingColumn::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIMMMReportingColumn::Values& Value)
{
	static TMap<FString, OpenAPIMMMReportingColumn::Values> StringToEnum = { 
		{ TEXT("SPEND_IN_DOLLAR"), OpenAPIMMMReportingColumn::Values::SpendInDollar },
		{ TEXT("SPEND_IN_MICRO_DOLLAR"), OpenAPIMMMReportingColumn::Values::SpendInMicroDollar },
		{ TEXT("ECPC_IN_DOLLAR"), OpenAPIMMMReportingColumn::Values::EcpcInDollar },
		{ TEXT("ECTR"), OpenAPIMMMReportingColumn::Values::Ectr },
		{ TEXT("CAMPAIGN_NAME"), OpenAPIMMMReportingColumn::Values::CampaignName },
		{ TEXT("TOTAL_ENGAGEMENT"), OpenAPIMMMReportingColumn::Values::TotalEngagement },
		{ TEXT("EENGAGEMENT_RATE"), OpenAPIMMMReportingColumn::Values::EengagementRate },
		{ TEXT("ECPM_IN_DOLLAR"), OpenAPIMMMReportingColumn::Values::EcpmInDollar },
		{ TEXT("CAMPAIGN_ID"), OpenAPIMMMReportingColumn::Values::CampaignId },
		{ TEXT("ADVERTISER_ID"), OpenAPIMMMReportingColumn::Values::AdvertiserId },
		{ TEXT("AD_GROUP_ID"), OpenAPIMMMReportingColumn::Values::AdGroupId },
		{ TEXT("AD_GROUP_NAME"), OpenAPIMMMReportingColumn::Values::AdGroupName },
		{ TEXT("CLICKTHROUGH_1"), OpenAPIMMMReportingColumn::Values::CLICKTHROUGH1 },
		{ TEXT("IMPRESSION_1"), OpenAPIMMMReportingColumn::Values::IMPRESSION1 },
		{ TEXT("CLICKTHROUGH_2"), OpenAPIMMMReportingColumn::Values::CLICKTHROUGH2 },
		{ TEXT("IMPRESSION_2"), OpenAPIMMMReportingColumn::Values::IMPRESSION2 },
		{ TEXT("TOTAL_CLICKTHROUGH"), OpenAPIMMMReportingColumn::Values::TotalClickthrough },
		{ TEXT("TOTAL_IMPRESSION"), OpenAPIMMMReportingColumn::Values::TotalImpression },
		{ TEXT("ADVERTISER_NAME"), OpenAPIMMMReportingColumn::Values::AdvertiserName },
		{ TEXT("SPEND_ORDER_LINE_PAID_TYPE"), OpenAPIMMMReportingColumn::Values::SpendOrderLinePaidType }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIMMMReportingColumn::EnumFromString(const FString& EnumAsString, OpenAPIMMMReportingColumn::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIMMMReportingColumn::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIMMMReportingColumn::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIMMMReportingColumn::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPIMMMReportingColumn::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
