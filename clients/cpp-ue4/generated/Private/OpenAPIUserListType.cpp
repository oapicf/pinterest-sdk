/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIUserListType.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIUserListType::Values& Value)
{
	switch (Value)
	{
	case OpenAPIUserListType::Values::Email:
		return TEXT("EMAIL");
	case OpenAPIUserListType::Values::Idfa:
		return TEXT("IDFA");
	case OpenAPIUserListType::Values::Maid:
		return TEXT("MAID");
	case OpenAPIUserListType::Values::LrId:
		return TEXT("LR_ID");
	case OpenAPIUserListType::Values::DlxId:
		return TEXT("DLX_ID");
	case OpenAPIUserListType::Values::HashedPinnerId:
		return TEXT("HASHED_PINNER_ID");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIUserListType::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIUserListType::EnumToString(const OpenAPIUserListType::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIUserListType::Values& Value)
{
	static TMap<FString, OpenAPIUserListType::Values> StringToEnum = { 
		{ TEXT("EMAIL"), OpenAPIUserListType::Values::Email },
		{ TEXT("IDFA"), OpenAPIUserListType::Values::Idfa },
		{ TEXT("MAID"), OpenAPIUserListType::Values::Maid },
		{ TEXT("LR_ID"), OpenAPIUserListType::Values::LrId },
		{ TEXT("DLX_ID"), OpenAPIUserListType::Values::DlxId },
		{ TEXT("HASHED_PINNER_ID"), OpenAPIUserListType::Values::HashedPinnerId }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIUserListType::EnumFromString(const FString& EnumAsString, OpenAPIUserListType::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIUserListType::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIUserListType::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIUserListType::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPIUserListType::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
