/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::ConversionEventEnum& Value)
{
	switch (Value)
	{
	case OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::ConversionEventEnum::PageVisit:
		return TEXT("PAGE_VISIT");
	case OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::ConversionEventEnum::Signup:
		return TEXT("SIGNUP");
	case OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::ConversionEventEnum::Checkout:
		return TEXT("CHECKOUT");
	case OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::ConversionEventEnum::Custom:
		return TEXT("CUSTOM");
	case OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::ConversionEventEnum::ViewCategory:
		return TEXT("VIEW_CATEGORY");
	case OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::ConversionEventEnum::Search:
		return TEXT("SEARCH");
	case OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::ConversionEventEnum::AddToCart:
		return TEXT("ADD_TO_CART");
	case OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::ConversionEventEnum::WatchVideo:
		return TEXT("WATCH_VIDEO");
	case OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::ConversionEventEnum::Lead:
		return TEXT("LEAD");
	case OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::ConversionEventEnum::AppInstall:
		return TEXT("APP_INSTALL");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::ConversionEventEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::EnumToString(const OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::ConversionEventEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::ConversionEventEnum& Value)
{
	static TMap<FString, OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::ConversionEventEnum> StringToEnum = { 
		{ TEXT("PAGE_VISIT"), OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::ConversionEventEnum::PageVisit },
		{ TEXT("SIGNUP"), OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::ConversionEventEnum::Signup },
		{ TEXT("CHECKOUT"), OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::ConversionEventEnum::Checkout },
		{ TEXT("CUSTOM"), OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::ConversionEventEnum::Custom },
		{ TEXT("VIEW_CATEGORY"), OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::ConversionEventEnum::ViewCategory },
		{ TEXT("SEARCH"), OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::ConversionEventEnum::Search },
		{ TEXT("ADD_TO_CART"), OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::ConversionEventEnum::AddToCart },
		{ TEXT("WATCH_VIDEO"), OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::ConversionEventEnum::WatchVideo },
		{ TEXT("LEAD"), OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::ConversionEventEnum::Lead },
		{ TEXT("APP_INSTALL"), OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::ConversionEventEnum::AppInstall }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::EnumFromString(const FString& EnumAsString, OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::ConversionEventEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::ConversionEventEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::ConversionEventEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::LearningModeTypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::LearningModeTypeEnum::NotActive:
		return TEXT("NOT_ACTIVE");
	case OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::LearningModeTypeEnum::Active:
		return TEXT("ACTIVE");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::LearningModeTypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::EnumToString(const OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::LearningModeTypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::LearningModeTypeEnum& Value)
{
	static TMap<FString, OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::LearningModeTypeEnum> StringToEnum = { 
		{ TEXT("NOT_ACTIVE"), OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::LearningModeTypeEnum::NotActive },
		{ TEXT("ACTIVE"), OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::LearningModeTypeEnum::Active }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::EnumFromString(const FString& EnumAsString, OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::LearningModeTypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::LearningModeTypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::LearningModeTypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (AttributionWindows.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("attribution_windows")); WriteJsonValue(Writer, AttributionWindows.GetValue());
	}
	if (ConversionEvent.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("conversion_event")); WriteJsonValue(Writer, ConversionEvent.GetValue());
	}
	if (ConversionTagId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("conversion_tag_id")); WriteJsonValue(Writer, ConversionTagId.GetValue());
	}
	if (CpaGoalValueInMicroCurrency.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("cpa_goal_value_in_micro_currency")); WriteJsonValue(Writer, CpaGoalValueInMicroCurrency.GetValue());
	}
	if (IsRoasOptimized.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("is_roas_optimized")); WriteJsonValue(Writer, IsRoasOptimized.GetValue());
	}
	if (LearningModeType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("learning_mode_type")); WriteJsonValue(Writer, LearningModeType.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIOptimizationGoalMetadataConversionTagV3GoalMetadata::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("attribution_windows"), AttributionWindows);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("conversion_event"), ConversionEvent);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("conversion_tag_id"), ConversionTagId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("cpa_goal_value_in_micro_currency"), CpaGoalValueInMicroCurrency);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("is_roas_optimized"), IsRoasOptimized);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("learning_mode_type"), LearningModeType);

	return ParseSuccess;
}

}
