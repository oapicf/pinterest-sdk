/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPILanguage.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPILanguage::Values& Value)
{
	switch (Value)
	{
	case OpenAPILanguage::Values::Am:
		return TEXT("AM");
	case OpenAPILanguage::Values::Ar:
		return TEXT("AR");
	case OpenAPILanguage::Values::Az:
		return TEXT("AZ");
	case OpenAPILanguage::Values::Bg:
		return TEXT("BG");
	case OpenAPILanguage::Values::Bn:
		return TEXT("BN");
	case OpenAPILanguage::Values::Bs:
		return TEXT("BS");
	case OpenAPILanguage::Values::Ca:
		return TEXT("CA");
	case OpenAPILanguage::Values::Cs:
		return TEXT("CS");
	case OpenAPILanguage::Values::Da:
		return TEXT("DA");
	case OpenAPILanguage::Values::Dv:
		return TEXT("DV");
	case OpenAPILanguage::Values::Dz:
		return TEXT("DZ");
	case OpenAPILanguage::Values::De:
		return TEXT("DE");
	case OpenAPILanguage::Values::El:
		return TEXT("EL");
	case OpenAPILanguage::Values::En:
		return TEXT("EN");
	case OpenAPILanguage::Values::Es:
		return TEXT("ES");
	case OpenAPILanguage::Values::Et:
		return TEXT("ET");
	case OpenAPILanguage::Values::Fa:
		return TEXT("FA");
	case OpenAPILanguage::Values::Fi:
		return TEXT("FI");
	case OpenAPILanguage::Values::Fr:
		return TEXT("FR");
	case OpenAPILanguage::Values::He:
		return TEXT("HE");
	case OpenAPILanguage::Values::Hi:
		return TEXT("HI");
	case OpenAPILanguage::Values::Hr:
		return TEXT("HR");
	case OpenAPILanguage::Values::Hu:
		return TEXT("HU");
	case OpenAPILanguage::Values::Hy:
		return TEXT("HY");
	case OpenAPILanguage::Values::Id:
		return TEXT("ID");
	case OpenAPILanguage::Values::In:
		return TEXT("IN");
	case OpenAPILanguage::Values::Is:
		return TEXT("IS");
	case OpenAPILanguage::Values::It:
		return TEXT("IT");
	case OpenAPILanguage::Values::Iw:
		return TEXT("IW");
	case OpenAPILanguage::Values::Ja:
		return TEXT("JA");
	case OpenAPILanguage::Values::Ka:
		return TEXT("KA");
	case OpenAPILanguage::Values::Km:
		return TEXT("KM");
	case OpenAPILanguage::Values::Ko:
		return TEXT("KO");
	case OpenAPILanguage::Values::Lo:
		return TEXT("LO");
	case OpenAPILanguage::Values::Lt:
		return TEXT("LT");
	case OpenAPILanguage::Values::Lv:
		return TEXT("LV");
	case OpenAPILanguage::Values::Mk:
		return TEXT("MK");
	case OpenAPILanguage::Values::Mn:
		return TEXT("MN");
	case OpenAPILanguage::Values::Ms:
		return TEXT("MS");
	case OpenAPILanguage::Values::My:
		return TEXT("MY");
	case OpenAPILanguage::Values::Nb:
		return TEXT("NB");
	case OpenAPILanguage::Values::Ne:
		return TEXT("NE");
	case OpenAPILanguage::Values::Nl:
		return TEXT("NL");
	case OpenAPILanguage::Values::No:
		return TEXT("NO");
	case OpenAPILanguage::Values::Pl:
		return TEXT("PL");
	case OpenAPILanguage::Values::Pt:
		return TEXT("PT");
	case OpenAPILanguage::Values::Ro:
		return TEXT("RO");
	case OpenAPILanguage::Values::Ru:
		return TEXT("RU");
	case OpenAPILanguage::Values::Sk:
		return TEXT("SK");
	case OpenAPILanguage::Values::Sl:
		return TEXT("SL");
	case OpenAPILanguage::Values::Sq:
		return TEXT("SQ");
	case OpenAPILanguage::Values::Sr:
		return TEXT("SR");
	case OpenAPILanguage::Values::Sv:
		return TEXT("SV");
	case OpenAPILanguage::Values::Tl:
		return TEXT("TL");
	case OpenAPILanguage::Values::Uk:
		return TEXT("UK");
	case OpenAPILanguage::Values::Vi:
		return TEXT("VI");
	case OpenAPILanguage::Values::Te:
		return TEXT("TE");
	case OpenAPILanguage::Values::Th:
		return TEXT("TH");
	case OpenAPILanguage::Values::Tr:
		return TEXT("TR");
	case OpenAPILanguage::Values::Xx:
		return TEXT("XX");
	case OpenAPILanguage::Values::Zh:
		return TEXT("ZH");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPILanguage::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPILanguage::EnumToString(const OpenAPILanguage::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPILanguage::Values& Value)
{
	static TMap<FString, OpenAPILanguage::Values> StringToEnum = { 
		{ TEXT("AM"), OpenAPILanguage::Values::Am },
		{ TEXT("AR"), OpenAPILanguage::Values::Ar },
		{ TEXT("AZ"), OpenAPILanguage::Values::Az },
		{ TEXT("BG"), OpenAPILanguage::Values::Bg },
		{ TEXT("BN"), OpenAPILanguage::Values::Bn },
		{ TEXT("BS"), OpenAPILanguage::Values::Bs },
		{ TEXT("CA"), OpenAPILanguage::Values::Ca },
		{ TEXT("CS"), OpenAPILanguage::Values::Cs },
		{ TEXT("DA"), OpenAPILanguage::Values::Da },
		{ TEXT("DV"), OpenAPILanguage::Values::Dv },
		{ TEXT("DZ"), OpenAPILanguage::Values::Dz },
		{ TEXT("DE"), OpenAPILanguage::Values::De },
		{ TEXT("EL"), OpenAPILanguage::Values::El },
		{ TEXT("EN"), OpenAPILanguage::Values::En },
		{ TEXT("ES"), OpenAPILanguage::Values::Es },
		{ TEXT("ET"), OpenAPILanguage::Values::Et },
		{ TEXT("FA"), OpenAPILanguage::Values::Fa },
		{ TEXT("FI"), OpenAPILanguage::Values::Fi },
		{ TEXT("FR"), OpenAPILanguage::Values::Fr },
		{ TEXT("HE"), OpenAPILanguage::Values::He },
		{ TEXT("HI"), OpenAPILanguage::Values::Hi },
		{ TEXT("HR"), OpenAPILanguage::Values::Hr },
		{ TEXT("HU"), OpenAPILanguage::Values::Hu },
		{ TEXT("HY"), OpenAPILanguage::Values::Hy },
		{ TEXT("ID"), OpenAPILanguage::Values::Id },
		{ TEXT("IN"), OpenAPILanguage::Values::In },
		{ TEXT("IS"), OpenAPILanguage::Values::Is },
		{ TEXT("IT"), OpenAPILanguage::Values::It },
		{ TEXT("IW"), OpenAPILanguage::Values::Iw },
		{ TEXT("JA"), OpenAPILanguage::Values::Ja },
		{ TEXT("KA"), OpenAPILanguage::Values::Ka },
		{ TEXT("KM"), OpenAPILanguage::Values::Km },
		{ TEXT("KO"), OpenAPILanguage::Values::Ko },
		{ TEXT("LO"), OpenAPILanguage::Values::Lo },
		{ TEXT("LT"), OpenAPILanguage::Values::Lt },
		{ TEXT("LV"), OpenAPILanguage::Values::Lv },
		{ TEXT("MK"), OpenAPILanguage::Values::Mk },
		{ TEXT("MN"), OpenAPILanguage::Values::Mn },
		{ TEXT("MS"), OpenAPILanguage::Values::Ms },
		{ TEXT("MY"), OpenAPILanguage::Values::My },
		{ TEXT("NB"), OpenAPILanguage::Values::Nb },
		{ TEXT("NE"), OpenAPILanguage::Values::Ne },
		{ TEXT("NL"), OpenAPILanguage::Values::Nl },
		{ TEXT("NO"), OpenAPILanguage::Values::No },
		{ TEXT("PL"), OpenAPILanguage::Values::Pl },
		{ TEXT("PT"), OpenAPILanguage::Values::Pt },
		{ TEXT("RO"), OpenAPILanguage::Values::Ro },
		{ TEXT("RU"), OpenAPILanguage::Values::Ru },
		{ TEXT("SK"), OpenAPILanguage::Values::Sk },
		{ TEXT("SL"), OpenAPILanguage::Values::Sl },
		{ TEXT("SQ"), OpenAPILanguage::Values::Sq },
		{ TEXT("SR"), OpenAPILanguage::Values::Sr },
		{ TEXT("SV"), OpenAPILanguage::Values::Sv },
		{ TEXT("TL"), OpenAPILanguage::Values::Tl },
		{ TEXT("UK"), OpenAPILanguage::Values::Uk },
		{ TEXT("VI"), OpenAPILanguage::Values::Vi },
		{ TEXT("TE"), OpenAPILanguage::Values::Te },
		{ TEXT("TH"), OpenAPILanguage::Values::Th },
		{ TEXT("TR"), OpenAPILanguage::Values::Tr },
		{ TEXT("XX"), OpenAPILanguage::Values::Xx },
		{ TEXT("ZH"), OpenAPILanguage::Values::Zh }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPILanguage::EnumFromString(const FString& EnumAsString, OpenAPILanguage::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPILanguage::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPILanguage::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPILanguage::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPILanguage::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
