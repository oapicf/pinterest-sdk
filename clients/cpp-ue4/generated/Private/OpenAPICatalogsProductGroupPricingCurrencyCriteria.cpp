/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPICatalogsProductGroupPricingCurrencyCriteria.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPICatalogsProductGroupPricingCurrencyCriteria::_OperatorEnum& Value)
{
	switch (Value)
	{
	case OpenAPICatalogsProductGroupPricingCurrencyCriteria::_OperatorEnum::GreaterThan:
		return TEXT("GREATER_THAN");
	case OpenAPICatalogsProductGroupPricingCurrencyCriteria::_OperatorEnum::GreaterThanOrEquals:
		return TEXT("GREATER_THAN_OR_EQUALS");
	case OpenAPICatalogsProductGroupPricingCurrencyCriteria::_OperatorEnum::LessThan:
		return TEXT("LESS_THAN");
	case OpenAPICatalogsProductGroupPricingCurrencyCriteria::_OperatorEnum::LessThanOrEquals:
		return TEXT("LESS_THAN_OR_EQUALS");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPICatalogsProductGroupPricingCurrencyCriteria::_OperatorEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPICatalogsProductGroupPricingCurrencyCriteria::EnumToString(const OpenAPICatalogsProductGroupPricingCurrencyCriteria::_OperatorEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPICatalogsProductGroupPricingCurrencyCriteria::_OperatorEnum& Value)
{
	static TMap<FString, OpenAPICatalogsProductGroupPricingCurrencyCriteria::_OperatorEnum> StringToEnum = { 
		{ TEXT("GREATER_THAN"), OpenAPICatalogsProductGroupPricingCurrencyCriteria::_OperatorEnum::GreaterThan },
		{ TEXT("GREATER_THAN_OR_EQUALS"), OpenAPICatalogsProductGroupPricingCurrencyCriteria::_OperatorEnum::GreaterThanOrEquals },
		{ TEXT("LESS_THAN"), OpenAPICatalogsProductGroupPricingCurrencyCriteria::_OperatorEnum::LessThan },
		{ TEXT("LESS_THAN_OR_EQUALS"), OpenAPICatalogsProductGroupPricingCurrencyCriteria::_OperatorEnum::LessThanOrEquals }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPICatalogsProductGroupPricingCurrencyCriteria::EnumFromString(const FString& EnumAsString, OpenAPICatalogsProductGroupPricingCurrencyCriteria::_OperatorEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPICatalogsProductGroupPricingCurrencyCriteria::_OperatorEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPICatalogsProductGroupPricingCurrencyCriteria::_OperatorEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPICatalogsProductGroupPricingCurrencyCriteria::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("operator")); WriteJsonValue(Writer, _Operator);
	Writer->WriteIdentifierPrefix(TEXT("value")); WriteJsonValue(Writer, Value);
	Writer->WriteIdentifierPrefix(TEXT("currency")); WriteJsonValue(Writer, Currency);
	if (Negated.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("negated")); WriteJsonValue(Writer, Negated.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPICatalogsProductGroupPricingCurrencyCriteria::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("operator"), _Operator);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("value"), Value);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("currency"), Currency);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("negated"), Negated);

	return ParseSuccess;
}

}
