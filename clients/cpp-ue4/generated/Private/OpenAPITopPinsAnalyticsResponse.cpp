/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPITopPinsAnalyticsResponse.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPITopPinsAnalyticsResponse::SortByEnum& Value)
{
	switch (Value)
	{
	case OpenAPITopPinsAnalyticsResponse::SortByEnum::Engagement:
		return TEXT("ENGAGEMENT");
	case OpenAPITopPinsAnalyticsResponse::SortByEnum::Save:
		return TEXT("SAVE");
	case OpenAPITopPinsAnalyticsResponse::SortByEnum::Impression:
		return TEXT("IMPRESSION");
	case OpenAPITopPinsAnalyticsResponse::SortByEnum::OutboundClick:
		return TEXT("OUTBOUND_CLICK");
	case OpenAPITopPinsAnalyticsResponse::SortByEnum::PinClick:
		return TEXT("PIN_CLICK");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPITopPinsAnalyticsResponse::SortByEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPITopPinsAnalyticsResponse::EnumToString(const OpenAPITopPinsAnalyticsResponse::SortByEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPITopPinsAnalyticsResponse::SortByEnum& Value)
{
	static TMap<FString, OpenAPITopPinsAnalyticsResponse::SortByEnum> StringToEnum = { 
		{ TEXT("ENGAGEMENT"), OpenAPITopPinsAnalyticsResponse::SortByEnum::Engagement },
		{ TEXT("SAVE"), OpenAPITopPinsAnalyticsResponse::SortByEnum::Save },
		{ TEXT("IMPRESSION"), OpenAPITopPinsAnalyticsResponse::SortByEnum::Impression },
		{ TEXT("OUTBOUND_CLICK"), OpenAPITopPinsAnalyticsResponse::SortByEnum::OutboundClick },
		{ TEXT("PIN_CLICK"), OpenAPITopPinsAnalyticsResponse::SortByEnum::PinClick }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPITopPinsAnalyticsResponse::EnumFromString(const FString& EnumAsString, OpenAPITopPinsAnalyticsResponse::SortByEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPITopPinsAnalyticsResponse::SortByEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPITopPinsAnalyticsResponse::SortByEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPITopPinsAnalyticsResponse::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (DateAvailability.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("date_availability")); WriteJsonValue(Writer, DateAvailability.GetValue());
	}
	if (Pins.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("pins")); WriteJsonValue(Writer, Pins.GetValue());
	}
	if (SortBy.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("sort_by")); WriteJsonValue(Writer, SortBy.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPITopPinsAnalyticsResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("date_availability"), DateAvailability);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("pins"), Pins);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("sort_by"), SortBy);

	return ParseSuccess;
}

}
