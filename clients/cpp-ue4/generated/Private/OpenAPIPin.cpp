/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIPin.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIPin::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Id.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id.GetValue());
	}
	if (CreatedAt.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("created_at")); WriteJsonValue(Writer, CreatedAt.GetValue());
	}
	if (Link.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("link")); WriteJsonValue(Writer, Link.GetValue());
	}
	if (Title.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("title")); WriteJsonValue(Writer, Title.GetValue());
	}
	if (Description.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("description")); WriteJsonValue(Writer, Description.GetValue());
	}
	if (DominantColor.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("dominant_color")); WriteJsonValue(Writer, DominantColor.GetValue());
	}
	if (AltText.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("alt_text")); WriteJsonValue(Writer, AltText.GetValue());
	}
	if (CreativeType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("creative_type")); WriteJsonValue(Writer, CreativeType.GetValue());
	}
	if (BoardId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("board_id")); WriteJsonValue(Writer, BoardId.GetValue());
	}
	if (BoardSectionId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("board_section_id")); WriteJsonValue(Writer, BoardSectionId.GetValue());
	}
	if (BoardOwner.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("board_owner")); WriteJsonValue(Writer, BoardOwner.GetValue());
	}
	if (IsOwner.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("is_owner")); WriteJsonValue(Writer, IsOwner.GetValue());
	}
	if (Media.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("media")); WriteJsonValue(Writer, Media.GetValue());
	}
	if (MediaSource.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("media_source")); WriteJsonValue(Writer, MediaSource.GetValue());
	}
	if (ParentPinId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("parent_pin_id")); WriteJsonValue(Writer, ParentPinId.GetValue());
	}
	if (IsStandard.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("is_standard")); WriteJsonValue(Writer, IsStandard.GetValue());
	}
	if (HasBeenPromoted.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("has_been_promoted")); WriteJsonValue(Writer, HasBeenPromoted.GetValue());
	}
	if (Note.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("note")); WriteJsonValue(Writer, Note.GetValue());
	}
	if (PinMetrics.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("pin_metrics")); WriteJsonValue(Writer, PinMetrics.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIPin::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("created_at"), CreatedAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("link"), Link);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("title"), Title);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("description"), Description);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dominant_color"), DominantColor);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("alt_text"), AltText);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("creative_type"), CreativeType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("board_id"), BoardId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("board_section_id"), BoardSectionId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("board_owner"), BoardOwner);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("is_owner"), IsOwner);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("media"), Media);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("media_source"), MediaSource);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("parent_pin_id"), ParentPinId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("is_standard"), IsStandard);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("has_been_promoted"), HasBeenPromoted);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("note"), Note);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("pin_metrics"), PinMetrics);

	return ParseSuccess;
}

}
