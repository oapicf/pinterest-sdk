/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPICatalogsFeedValidationWarnings.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPICatalogsFeedValidationWarnings::FetchSameSignatureEnum& Value)
{
	switch (Value)
	{
	case OpenAPICatalogsFeedValidationWarnings::FetchSameSignatureEnum::_1:
		return TEXT("1");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPICatalogsFeedValidationWarnings::FetchSameSignatureEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPICatalogsFeedValidationWarnings::EnumToString(const OpenAPICatalogsFeedValidationWarnings::FetchSameSignatureEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPICatalogsFeedValidationWarnings::FetchSameSignatureEnum& Value)
{
	static TMap<FString, OpenAPICatalogsFeedValidationWarnings::FetchSameSignatureEnum> StringToEnum = { 
		{ TEXT("1"), OpenAPICatalogsFeedValidationWarnings::FetchSameSignatureEnum::_1 }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPICatalogsFeedValidationWarnings::EnumFromString(const FString& EnumAsString, OpenAPICatalogsFeedValidationWarnings::FetchSameSignatureEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPICatalogsFeedValidationWarnings::FetchSameSignatureEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPICatalogsFeedValidationWarnings::FetchSameSignatureEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPICatalogsFeedValidationWarnings::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (AdLinkFormatWarning.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("AD_LINK_FORMAT_WARNING")); WriteJsonValue(Writer, AdLinkFormatWarning.GetValue());
	}
	if (AdLinkSameAsLink.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("AD_LINK_SAME_AS_LINK")); WriteJsonValue(Writer, AdLinkSameAsLink.GetValue());
	}
	if (TitleLengthTooLong.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("TITLE_LENGTH_TOO_LONG")); WriteJsonValue(Writer, TitleLengthTooLong.GetValue());
	}
	if (DescriptionLengthTooLong.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("DESCRIPTION_LENGTH_TOO_LONG")); WriteJsonValue(Writer, DescriptionLengthTooLong.GetValue());
	}
	if (GenderInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("GENDER_INVALID")); WriteJsonValue(Writer, GenderInvalid.GetValue());
	}
	if (AgeGroupInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("AGE_GROUP_INVALID")); WriteJsonValue(Writer, AgeGroupInvalid.GetValue());
	}
	if (SizeTypeInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("SIZE_TYPE_INVALID")); WriteJsonValue(Writer, SizeTypeInvalid.GetValue());
	}
	if (SizeSystemInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("SIZE_SYSTEM_INVALID")); WriteJsonValue(Writer, SizeSystemInvalid.GetValue());
	}
	if (LinkFormatWarning.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("LINK_FORMAT_WARNING")); WriteJsonValue(Writer, LinkFormatWarning.GetValue());
	}
	if (SalesPriceInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("SALES_PRICE_INVALID")); WriteJsonValue(Writer, SalesPriceInvalid.GetValue());
	}
	if (ProductCategoryDepthWarning.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("PRODUCT_CATEGORY_DEPTH_WARNING")); WriteJsonValue(Writer, ProductCategoryDepthWarning.GetValue());
	}
	if (AdwordsFormatWarning.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("ADWORDS_FORMAT_WARNING")); WriteJsonValue(Writer, AdwordsFormatWarning.GetValue());
	}
	if (AdwordsSameAsLink.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("ADWORDS_SAME_AS_LINK")); WriteJsonValue(Writer, AdwordsSameAsLink.GetValue());
	}
	if (DuplicateHeaders.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("DUPLICATE_HEADERS")); WriteJsonValue(Writer, DuplicateHeaders.GetValue());
	}
	if (FetchSameSignature.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("FETCH_SAME_SIGNATURE")); WriteJsonValue(Writer, FetchSameSignature.GetValue());
	}
	if (AdditionalImageLinkLengthTooLong.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG")); WriteJsonValue(Writer, AdditionalImageLinkLengthTooLong.GetValue());
	}
	if (AdditionalImageLinkWarning.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("ADDITIONAL_IMAGE_LINK_WARNING")); WriteJsonValue(Writer, AdditionalImageLinkWarning.GetValue());
	}
	if (ImageLinkWarning.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("IMAGE_LINK_WARNING")); WriteJsonValue(Writer, ImageLinkWarning.GetValue());
	}
	if (ShippingInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("SHIPPING_INVALID")); WriteJsonValue(Writer, ShippingInvalid.GetValue());
	}
	if (TaxInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("TAX_INVALID")); WriteJsonValue(Writer, TaxInvalid.GetValue());
	}
	if (ShippingWeightInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("SHIPPING_WEIGHT_INVALID")); WriteJsonValue(Writer, ShippingWeightInvalid.GetValue());
	}
	if (ExpirationDateInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("EXPIRATION_DATE_INVALID")); WriteJsonValue(Writer, ExpirationDateInvalid.GetValue());
	}
	if (AvailabilityDateInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("AVAILABILITY_DATE_INVALID")); WriteJsonValue(Writer, AvailabilityDateInvalid.GetValue());
	}
	if (SaleDateInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("SALE_DATE_INVALID")); WriteJsonValue(Writer, SaleDateInvalid.GetValue());
	}
	if (WeightUnitInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("WEIGHT_UNIT_INVALID")); WriteJsonValue(Writer, WeightUnitInvalid.GetValue());
	}
	if (IsBundleInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("IS_BUNDLE_INVALID")); WriteJsonValue(Writer, IsBundleInvalid.GetValue());
	}
	if (UpdatedTimeInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("UPDATED_TIME_INVALID")); WriteJsonValue(Writer, UpdatedTimeInvalid.GetValue());
	}
	if (CustomLabelLengthTooLong.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("CUSTOM_LABEL_LENGTH_TOO_LONG")); WriteJsonValue(Writer, CustomLabelLengthTooLong.GetValue());
	}
	if (ProductTypeLengthTooLong.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("PRODUCT_TYPE_LENGTH_TOO_LONG")); WriteJsonValue(Writer, ProductTypeLengthTooLong.GetValue());
	}
	if (TooManyAdditionalImageLinks.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("TOO_MANY_ADDITIONAL_IMAGE_LINKS")); WriteJsonValue(Writer, TooManyAdditionalImageLinks.GetValue());
	}
	if (MultipackInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("MULTIPACK_INVALID")); WriteJsonValue(Writer, MultipackInvalid.GetValue());
	}
	if (IndexedProductCountLargeDelta.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("INDEXED_PRODUCT_COUNT_LARGE_DELTA")); WriteJsonValue(Writer, IndexedProductCountLargeDelta.GetValue());
	}
	if (ItemAdditionalImageDownloadFailure.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE")); WriteJsonValue(Writer, ItemAdditionalImageDownloadFailure.GetValue());
	}
	if (OptionalProductCategoryMissing.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("OPTIONAL_PRODUCT_CATEGORY_MISSING")); WriteJsonValue(Writer, OptionalProductCategoryMissing.GetValue());
	}
	if (OptionalProductCategoryInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("OPTIONAL_PRODUCT_CATEGORY_INVALID")); WriteJsonValue(Writer, OptionalProductCategoryInvalid.GetValue());
	}
	if (OptionalConditionMissing.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("OPTIONAL_CONDITION_MISSING")); WriteJsonValue(Writer, OptionalConditionMissing.GetValue());
	}
	if (OptionalConditionInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("OPTIONAL_CONDITION_INVALID")); WriteJsonValue(Writer, OptionalConditionInvalid.GetValue());
	}
	if (IosDeepLinkInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("IOS_DEEP_LINK_INVALID")); WriteJsonValue(Writer, IosDeepLinkInvalid.GetValue());
	}
	if (AndroidDeepLinkInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("ANDROID_DEEP_LINK_INVALID")); WriteJsonValue(Writer, AndroidDeepLinkInvalid.GetValue());
	}
	if (UtmSourceAutoCorrected.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("UTM_SOURCE_AUTO_CORRECTED")); WriteJsonValue(Writer, UtmSourceAutoCorrected.GetValue());
	}
	if (CountryDoesNotMapToCurrency.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("COUNTRY_DOES_NOT_MAP_TO_CURRENCY")); WriteJsonValue(Writer, CountryDoesNotMapToCurrency.GetValue());
	}
	if (MinAdPriceInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("MIN_AD_PRICE_INVALID")); WriteJsonValue(Writer, MinAdPriceInvalid.GetValue());
	}
	if (GtinInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("GTIN_INVALID")); WriteJsonValue(Writer, GtinInvalid.GetValue());
	}
	if (InconsistentCurrencyValues.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("INCONSISTENT_CURRENCY_VALUES")); WriteJsonValue(Writer, InconsistentCurrencyValues.GetValue());
	}
	if (SalesPriceTooLow.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("SALES_PRICE_TOO_LOW")); WriteJsonValue(Writer, SalesPriceTooLow.GetValue());
	}
	if (ShippingWidthInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("SHIPPING_WIDTH_INVALID")); WriteJsonValue(Writer, ShippingWidthInvalid.GetValue());
	}
	if (ShippingHeightInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("SHIPPING_HEIGHT_INVALID")); WriteJsonValue(Writer, ShippingHeightInvalid.GetValue());
	}
	if (SalesPriceTooHigh.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("SALES_PRICE_TOO_HIGH")); WriteJsonValue(Writer, SalesPriceTooHigh.GetValue());
	}
	if (MpnInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("MPN_INVALID")); WriteJsonValue(Writer, MpnInvalid.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPICatalogsFeedValidationWarnings::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("AD_LINK_FORMAT_WARNING"), AdLinkFormatWarning);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("AD_LINK_SAME_AS_LINK"), AdLinkSameAsLink);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("TITLE_LENGTH_TOO_LONG"), TitleLengthTooLong);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("DESCRIPTION_LENGTH_TOO_LONG"), DescriptionLengthTooLong);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("GENDER_INVALID"), GenderInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("AGE_GROUP_INVALID"), AgeGroupInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("SIZE_TYPE_INVALID"), SizeTypeInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("SIZE_SYSTEM_INVALID"), SizeSystemInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("LINK_FORMAT_WARNING"), LinkFormatWarning);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("SALES_PRICE_INVALID"), SalesPriceInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("PRODUCT_CATEGORY_DEPTH_WARNING"), ProductCategoryDepthWarning);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("ADWORDS_FORMAT_WARNING"), AdwordsFormatWarning);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("ADWORDS_SAME_AS_LINK"), AdwordsSameAsLink);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("DUPLICATE_HEADERS"), DuplicateHeaders);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("FETCH_SAME_SIGNATURE"), FetchSameSignature);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG"), AdditionalImageLinkLengthTooLong);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("ADDITIONAL_IMAGE_LINK_WARNING"), AdditionalImageLinkWarning);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("IMAGE_LINK_WARNING"), ImageLinkWarning);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("SHIPPING_INVALID"), ShippingInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("TAX_INVALID"), TaxInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("SHIPPING_WEIGHT_INVALID"), ShippingWeightInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("EXPIRATION_DATE_INVALID"), ExpirationDateInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("AVAILABILITY_DATE_INVALID"), AvailabilityDateInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("SALE_DATE_INVALID"), SaleDateInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("WEIGHT_UNIT_INVALID"), WeightUnitInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("IS_BUNDLE_INVALID"), IsBundleInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("UPDATED_TIME_INVALID"), UpdatedTimeInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("CUSTOM_LABEL_LENGTH_TOO_LONG"), CustomLabelLengthTooLong);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("PRODUCT_TYPE_LENGTH_TOO_LONG"), ProductTypeLengthTooLong);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("TOO_MANY_ADDITIONAL_IMAGE_LINKS"), TooManyAdditionalImageLinks);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("MULTIPACK_INVALID"), MultipackInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("INDEXED_PRODUCT_COUNT_LARGE_DELTA"), IndexedProductCountLargeDelta);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE"), ItemAdditionalImageDownloadFailure);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("OPTIONAL_PRODUCT_CATEGORY_MISSING"), OptionalProductCategoryMissing);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("OPTIONAL_PRODUCT_CATEGORY_INVALID"), OptionalProductCategoryInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("OPTIONAL_CONDITION_MISSING"), OptionalConditionMissing);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("OPTIONAL_CONDITION_INVALID"), OptionalConditionInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("IOS_DEEP_LINK_INVALID"), IosDeepLinkInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("ANDROID_DEEP_LINK_INVALID"), AndroidDeepLinkInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("UTM_SOURCE_AUTO_CORRECTED"), UtmSourceAutoCorrected);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("COUNTRY_DOES_NOT_MAP_TO_CURRENCY"), CountryDoesNotMapToCurrency);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("MIN_AD_PRICE_INVALID"), MinAdPriceInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("GTIN_INVALID"), GtinInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("INCONSISTENT_CURRENCY_VALUES"), InconsistentCurrencyValues);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("SALES_PRICE_TOO_LOW"), SalesPriceTooLow);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("SHIPPING_WIDTH_INVALID"), ShippingWidthInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("SHIPPING_HEIGHT_INVALID"), ShippingHeightInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("SALES_PRICE_TOO_HIGH"), SalesPriceTooHigh);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("MPN_INVALID"), MpnInvalid);

	return ParseSuccess;
}

}
