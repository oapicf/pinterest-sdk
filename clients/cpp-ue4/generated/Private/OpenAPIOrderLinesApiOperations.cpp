/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIOrderLinesApiOperations.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace OpenAPI
{

FString OpenAPIOrderLinesApi::OrderLinesGetRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("ad_account_id"), FStringFormatArg(ToUrlString(AdAccountId)) },
	{ TEXT("order_line_id"), FStringFormatArg(ToUrlString(OrderLineId)) } };

	FString Path = FString::Format(TEXT("/ad_accounts/{ad_account_id}/order_lines/{order_line_id}"), PathParams);

	return Path;
}

void OpenAPIOrderLinesApi::OrderLinesGetRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIOrderLinesApi::OrderLinesGetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIOrderLinesApi::OrderLinesGetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const OpenAPIOrderLinesApi::OrderLinesListRequest::OrderEnum& Value)
{
	switch (Value)
	{
	case OpenAPIOrderLinesApi::OrderLinesListRequest::OrderEnum::Ascending:
		return TEXT("ASCENDING");
	case OpenAPIOrderLinesApi::OrderLinesListRequest::OrderEnum::Descending:
		return TEXT("DESCENDING");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIOrderLinesApi::OrderLinesListRequest::OrderEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIOrderLinesApi::OrderLinesListRequest::EnumToString(const OpenAPIOrderLinesApi::OrderLinesListRequest::OrderEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIOrderLinesApi::OrderLinesListRequest::OrderEnum& Value)
{
	static TMap<FString, OpenAPIOrderLinesApi::OrderLinesListRequest::OrderEnum> StringToEnum = { 
		{ TEXT("ASCENDING"), OpenAPIOrderLinesApi::OrderLinesListRequest::OrderEnum::Ascending },
		{ TEXT("DESCENDING"), OpenAPIOrderLinesApi::OrderLinesListRequest::OrderEnum::Descending }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIOrderLinesApi::OrderLinesListRequest::EnumFromString(const FString& EnumAsString, OpenAPIOrderLinesApi::OrderLinesListRequest::OrderEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIOrderLinesApi::OrderLinesListRequest::OrderEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIOrderLinesApi::OrderLinesListRequest::OrderEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIOrderLinesApi::OrderLinesListRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("ad_account_id"), FStringFormatArg(ToUrlString(AdAccountId)) } };

	FString Path = FString::Format(TEXT("/ad_accounts/{ad_account_id}/order_lines"), PathParams);

	TArray<FString> QueryParams;
	if(PageSize.IsSet())
	{
		QueryParams.Add(FString(TEXT("page_size=")) + ToUrlString(PageSize.GetValue()));
	}
	if(Order.IsSet())
	{
		QueryParams.Add(FString(TEXT("order=")) + ToUrlString(Order.GetValue()));
	}
	if(Bookmark.IsSet())
	{
		QueryParams.Add(FString(TEXT("bookmark=")) + ToUrlString(Bookmark.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIOrderLinesApi::OrderLinesListRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIOrderLinesApi::OrderLinesListResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIOrderLinesApi::OrderLinesListResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}
