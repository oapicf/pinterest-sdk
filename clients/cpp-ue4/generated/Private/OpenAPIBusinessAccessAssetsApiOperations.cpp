/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIBusinessAccessAssetsApiOperations.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace OpenAPI
{

FString OpenAPIBusinessAccessAssetsApi::AssetGroupCreateRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("business_id"), FStringFormatArg(ToUrlString(BusinessId)) } };

	FString Path = FString::Format(TEXT("/businesses/{business_id}/asset_groups"), PathParams);

	return Path;
}

void OpenAPIBusinessAccessAssetsApi::AssetGroupCreateRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, OpenAPICreateAssetGroupBody);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPICreateAssetGroupBody) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPICreateAssetGroupBody) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIBusinessAccessAssetsApi::AssetGroupCreateResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 400:
		SetResponseString(TEXT("Invalid parameters."));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIBusinessAccessAssetsApi::AssetGroupCreateResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIBusinessAccessAssetsApi::AssetGroupDeleteRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("business_id"), FStringFormatArg(ToUrlString(BusinessId)) } };

	FString Path = FString::Format(TEXT("/businesses/{business_id}/asset_groups"), PathParams);

	return Path;
}

void OpenAPIBusinessAccessAssetsApi::AssetGroupDeleteRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("DELETE"));

}

void OpenAPIBusinessAccessAssetsApi::AssetGroupDeleteResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 400:
		SetResponseString(TEXT("Invalid parameters."));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIBusinessAccessAssetsApi::AssetGroupDeleteResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIBusinessAccessAssetsApi::AssetGroupUpdateRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("business_id"), FStringFormatArg(ToUrlString(BusinessId)) } };

	FString Path = FString::Format(TEXT("/businesses/{business_id}/asset_groups"), PathParams);

	return Path;
}

void OpenAPIBusinessAccessAssetsApi::AssetGroupUpdateRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("PATCH"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, OpenAPIUpdateAssetGroupBody);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPIUpdateAssetGroupBody) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPIUpdateAssetGroupBody) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIBusinessAccessAssetsApi::AssetGroupUpdateResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 400:
		SetResponseString(TEXT("Invalid parameters."));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIBusinessAccessAssetsApi::AssetGroupUpdateResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIBusinessAccessAssetsApi::BusinessAssetMembersGetRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("business_id"), FStringFormatArg(ToUrlString(BusinessId)) },
	{ TEXT("asset_id"), FStringFormatArg(ToUrlString(AssetId)) } };

	FString Path = FString::Format(TEXT("/businesses/{business_id}/assets/{asset_id}/members"), PathParams);

	TArray<FString> QueryParams;
	if(Bookmark.IsSet())
	{
		QueryParams.Add(FString(TEXT("bookmark=")) + ToUrlString(Bookmark.GetValue()));
	}
	if(PageSize.IsSet())
	{
		QueryParams.Add(FString(TEXT("page_size=")) + ToUrlString(PageSize.GetValue()));
	}
	if(StartIndex.IsSet())
	{
		QueryParams.Add(FString(TEXT("start_index=")) + ToUrlString(StartIndex.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIBusinessAccessAssetsApi::BusinessAssetMembersGetRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIBusinessAccessAssetsApi::BusinessAssetMembersGetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Sucess"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIBusinessAccessAssetsApi::BusinessAssetMembersGetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIBusinessAccessAssetsApi::BusinessAssetPartnersGetRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("business_id"), FStringFormatArg(ToUrlString(BusinessId)) },
	{ TEXT("asset_id"), FStringFormatArg(ToUrlString(AssetId)) } };

	FString Path = FString::Format(TEXT("/businesses/{business_id}/assets/{asset_id}/partners"), PathParams);

	TArray<FString> QueryParams;
	if(StartIndex.IsSet())
	{
		QueryParams.Add(FString(TEXT("start_index=")) + ToUrlString(StartIndex.GetValue()));
	}
	if(Bookmark.IsSet())
	{
		QueryParams.Add(FString(TEXT("bookmark=")) + ToUrlString(Bookmark.GetValue()));
	}
	if(PageSize.IsSet())
	{
		QueryParams.Add(FString(TEXT("page_size=")) + ToUrlString(PageSize.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIBusinessAccessAssetsApi::BusinessAssetPartnersGetRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIBusinessAccessAssetsApi::BusinessAssetPartnersGetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Sucess"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIBusinessAccessAssetsApi::BusinessAssetPartnersGetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const OpenAPIBusinessAccessAssetsApi::BusinessAssetsGetRequest::AssetTypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIBusinessAccessAssetsApi::BusinessAssetsGetRequest::AssetTypeEnum::AdAccount:
		return TEXT("AD_ACCOUNT");
	case OpenAPIBusinessAccessAssetsApi::BusinessAssetsGetRequest::AssetTypeEnum::Profile:
		return TEXT("PROFILE");
	case OpenAPIBusinessAccessAssetsApi::BusinessAssetsGetRequest::AssetTypeEnum::AssetGroup:
		return TEXT("ASSET_GROUP");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIBusinessAccessAssetsApi::BusinessAssetsGetRequest::AssetTypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIBusinessAccessAssetsApi::BusinessAssetsGetRequest::EnumToString(const OpenAPIBusinessAccessAssetsApi::BusinessAssetsGetRequest::AssetTypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIBusinessAccessAssetsApi::BusinessAssetsGetRequest::AssetTypeEnum& Value)
{
	static TMap<FString, OpenAPIBusinessAccessAssetsApi::BusinessAssetsGetRequest::AssetTypeEnum> StringToEnum = { 
		{ TEXT("AD_ACCOUNT"), OpenAPIBusinessAccessAssetsApi::BusinessAssetsGetRequest::AssetTypeEnum::AdAccount },
		{ TEXT("PROFILE"), OpenAPIBusinessAccessAssetsApi::BusinessAssetsGetRequest::AssetTypeEnum::Profile },
		{ TEXT("ASSET_GROUP"), OpenAPIBusinessAccessAssetsApi::BusinessAssetsGetRequest::AssetTypeEnum::AssetGroup }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIBusinessAccessAssetsApi::BusinessAssetsGetRequest::EnumFromString(const FString& EnumAsString, OpenAPIBusinessAccessAssetsApi::BusinessAssetsGetRequest::AssetTypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIBusinessAccessAssetsApi::BusinessAssetsGetRequest::AssetTypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIBusinessAccessAssetsApi::BusinessAssetsGetRequest::AssetTypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIBusinessAccessAssetsApi::BusinessAssetsGetRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("business_id"), FStringFormatArg(ToUrlString(BusinessId)) } };

	FString Path = FString::Format(TEXT("/businesses/{business_id}/assets"), PathParams);

	TArray<FString> QueryParams;
	if(Permissions.IsSet())
	{
		QueryParams.Add(CollectionToUrlString_multi(Permissions.GetValue(), TEXT("permissions")));
	}
	if(ChildAssetId.IsSet())
	{
		QueryParams.Add(FString(TEXT("child_asset_id=")) + ToUrlString(ChildAssetId.GetValue()));
	}
	if(AssetGroupId.IsSet())
	{
		QueryParams.Add(FString(TEXT("asset_group_id=")) + ToUrlString(AssetGroupId.GetValue()));
	}
	if(AssetType.IsSet())
	{
		QueryParams.Add(FString(TEXT("asset_type=")) + ToUrlString(AssetType.GetValue()));
	}
	if(StartIndex.IsSet())
	{
		QueryParams.Add(FString(TEXT("start_index=")) + ToUrlString(StartIndex.GetValue()));
	}
	if(Bookmark.IsSet())
	{
		QueryParams.Add(FString(TEXT("bookmark=")) + ToUrlString(Bookmark.GetValue()));
	}
	if(PageSize.IsSet())
	{
		QueryParams.Add(FString(TEXT("page_size=")) + ToUrlString(PageSize.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIBusinessAccessAssetsApi::BusinessAssetsGetRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIBusinessAccessAssetsApi::BusinessAssetsGetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIBusinessAccessAssetsApi::BusinessAssetsGetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const OpenAPIBusinessAccessAssetsApi::BusinessMemberAssetsGetRequest::AssetTypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIBusinessAccessAssetsApi::BusinessMemberAssetsGetRequest::AssetTypeEnum::AdAccount:
		return TEXT("AD_ACCOUNT");
	case OpenAPIBusinessAccessAssetsApi::BusinessMemberAssetsGetRequest::AssetTypeEnum::Profile:
		return TEXT("PROFILE");
	case OpenAPIBusinessAccessAssetsApi::BusinessMemberAssetsGetRequest::AssetTypeEnum::AssetGroup:
		return TEXT("ASSET_GROUP");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIBusinessAccessAssetsApi::BusinessMemberAssetsGetRequest::AssetTypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIBusinessAccessAssetsApi::BusinessMemberAssetsGetRequest::EnumToString(const OpenAPIBusinessAccessAssetsApi::BusinessMemberAssetsGetRequest::AssetTypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIBusinessAccessAssetsApi::BusinessMemberAssetsGetRequest::AssetTypeEnum& Value)
{
	static TMap<FString, OpenAPIBusinessAccessAssetsApi::BusinessMemberAssetsGetRequest::AssetTypeEnum> StringToEnum = { 
		{ TEXT("AD_ACCOUNT"), OpenAPIBusinessAccessAssetsApi::BusinessMemberAssetsGetRequest::AssetTypeEnum::AdAccount },
		{ TEXT("PROFILE"), OpenAPIBusinessAccessAssetsApi::BusinessMemberAssetsGetRequest::AssetTypeEnum::Profile },
		{ TEXT("ASSET_GROUP"), OpenAPIBusinessAccessAssetsApi::BusinessMemberAssetsGetRequest::AssetTypeEnum::AssetGroup }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIBusinessAccessAssetsApi::BusinessMemberAssetsGetRequest::EnumFromString(const FString& EnumAsString, OpenAPIBusinessAccessAssetsApi::BusinessMemberAssetsGetRequest::AssetTypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIBusinessAccessAssetsApi::BusinessMemberAssetsGetRequest::AssetTypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIBusinessAccessAssetsApi::BusinessMemberAssetsGetRequest::AssetTypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIBusinessAccessAssetsApi::BusinessMemberAssetsGetRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("business_id"), FStringFormatArg(ToUrlString(BusinessId)) },
	{ TEXT("member_id"), FStringFormatArg(ToUrlString(MemberId)) } };

	FString Path = FString::Format(TEXT("/businesses/{business_id}/members/{member_id}/assets"), PathParams);

	TArray<FString> QueryParams;
	if(AssetType.IsSet())
	{
		QueryParams.Add(FString(TEXT("asset_type=")) + ToUrlString(AssetType.GetValue()));
	}
	if(StartIndex.IsSet())
	{
		QueryParams.Add(FString(TEXT("start_index=")) + ToUrlString(StartIndex.GetValue()));
	}
	if(Bookmark.IsSet())
	{
		QueryParams.Add(FString(TEXT("bookmark=")) + ToUrlString(Bookmark.GetValue()));
	}
	if(PageSize.IsSet())
	{
		QueryParams.Add(FString(TEXT("page_size=")) + ToUrlString(PageSize.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIBusinessAccessAssetsApi::BusinessMemberAssetsGetRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIBusinessAccessAssetsApi::BusinessMemberAssetsGetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIBusinessAccessAssetsApi::BusinessMemberAssetsGetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIBusinessAccessAssetsApi::BusinessMembersAssetAccessDeleteRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("business_id"), FStringFormatArg(ToUrlString(BusinessId)) } };

	FString Path = FString::Format(TEXT("/businesses/{business_id}/members/assets/access"), PathParams);

	return Path;
}

void OpenAPIBusinessAccessAssetsApi::BusinessMembersAssetAccessDeleteRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("DELETE"));

}

void OpenAPIBusinessAccessAssetsApi::BusinessMembersAssetAccessDeleteResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("response"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIBusinessAccessAssetsApi::BusinessMembersAssetAccessDeleteResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIBusinessAccessAssetsApi::BusinessMembersAssetAccessUpdateRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("business_id"), FStringFormatArg(ToUrlString(BusinessId)) } };

	FString Path = FString::Format(TEXT("/businesses/{business_id}/members/assets/access"), PathParams);

	return Path;
}

void OpenAPIBusinessAccessAssetsApi::BusinessMembersAssetAccessUpdateRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("PATCH"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, OpenAPIUpdateMemberAssetAccessBody);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPIUpdateMemberAssetAccessBody) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPIUpdateMemberAssetAccessBody) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIBusinessAccessAssetsApi::BusinessMembersAssetAccessUpdateResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("response"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIBusinessAccessAssetsApi::BusinessMembersAssetAccessUpdateResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const OpenAPIBusinessAccessAssetsApi::BusinessPartnerAssetAccessGetRequest::AssetTypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIBusinessAccessAssetsApi::BusinessPartnerAssetAccessGetRequest::AssetTypeEnum::AdAccount:
		return TEXT("AD_ACCOUNT");
	case OpenAPIBusinessAccessAssetsApi::BusinessPartnerAssetAccessGetRequest::AssetTypeEnum::Profile:
		return TEXT("PROFILE");
	case OpenAPIBusinessAccessAssetsApi::BusinessPartnerAssetAccessGetRequest::AssetTypeEnum::AssetGroup:
		return TEXT("ASSET_GROUP");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIBusinessAccessAssetsApi::BusinessPartnerAssetAccessGetRequest::AssetTypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIBusinessAccessAssetsApi::BusinessPartnerAssetAccessGetRequest::EnumToString(const OpenAPIBusinessAccessAssetsApi::BusinessPartnerAssetAccessGetRequest::AssetTypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIBusinessAccessAssetsApi::BusinessPartnerAssetAccessGetRequest::AssetTypeEnum& Value)
{
	static TMap<FString, OpenAPIBusinessAccessAssetsApi::BusinessPartnerAssetAccessGetRequest::AssetTypeEnum> StringToEnum = { 
		{ TEXT("AD_ACCOUNT"), OpenAPIBusinessAccessAssetsApi::BusinessPartnerAssetAccessGetRequest::AssetTypeEnum::AdAccount },
		{ TEXT("PROFILE"), OpenAPIBusinessAccessAssetsApi::BusinessPartnerAssetAccessGetRequest::AssetTypeEnum::Profile },
		{ TEXT("ASSET_GROUP"), OpenAPIBusinessAccessAssetsApi::BusinessPartnerAssetAccessGetRequest::AssetTypeEnum::AssetGroup }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIBusinessAccessAssetsApi::BusinessPartnerAssetAccessGetRequest::EnumFromString(const FString& EnumAsString, OpenAPIBusinessAccessAssetsApi::BusinessPartnerAssetAccessGetRequest::AssetTypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIBusinessAccessAssetsApi::BusinessPartnerAssetAccessGetRequest::AssetTypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIBusinessAccessAssetsApi::BusinessPartnerAssetAccessGetRequest::AssetTypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIBusinessAccessAssetsApi::BusinessPartnerAssetAccessGetRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("business_id"), FStringFormatArg(ToUrlString(BusinessId)) },
	{ TEXT("partner_id"), FStringFormatArg(ToUrlString(PartnerId)) } };

	FString Path = FString::Format(TEXT("/businesses/{business_id}/partners/{partner_id}/assets"), PathParams);

	TArray<FString> QueryParams;
	if(PartnerType.IsSet())
	{
		QueryParams.Add(FString(TEXT("partner_type=")) + ToUrlString(PartnerType.GetValue()));
	}
	if(AssetType.IsSet())
	{
		QueryParams.Add(FString(TEXT("asset_type=")) + ToUrlString(AssetType.GetValue()));
	}
	if(StartIndex.IsSet())
	{
		QueryParams.Add(FString(TEXT("start_index=")) + ToUrlString(StartIndex.GetValue()));
	}
	if(PageSize.IsSet())
	{
		QueryParams.Add(FString(TEXT("page_size=")) + ToUrlString(PageSize.GetValue()));
	}
	if(Bookmark.IsSet())
	{
		QueryParams.Add(FString(TEXT("bookmark=")) + ToUrlString(Bookmark.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIBusinessAccessAssetsApi::BusinessPartnerAssetAccessGetRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIBusinessAccessAssetsApi::BusinessPartnerAssetAccessGetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIBusinessAccessAssetsApi::BusinessPartnerAssetAccessGetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIBusinessAccessAssetsApi::DeletePartnerAssetAccessHandlerImplRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("business_id"), FStringFormatArg(ToUrlString(BusinessId)) } };

	FString Path = FString::Format(TEXT("/businesses/{business_id}/partners/assets"), PathParams);

	return Path;
}

void OpenAPIBusinessAccessAssetsApi::DeletePartnerAssetAccessHandlerImplRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("DELETE"));

}

void OpenAPIBusinessAccessAssetsApi::DeletePartnerAssetAccessHandlerImplResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIBusinessAccessAssetsApi::DeletePartnerAssetAccessHandlerImplResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIBusinessAccessAssetsApi::UpdatePartnerAssetAccessHandlerImplRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("business_id"), FStringFormatArg(ToUrlString(BusinessId)) } };

	FString Path = FString::Format(TEXT("/businesses/{business_id}/partners/assets"), PathParams);

	return Path;
}

void OpenAPIBusinessAccessAssetsApi::UpdatePartnerAssetAccessHandlerImplRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("PATCH"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, OpenAPIUpdatePartnerAssetAccessBody);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPIUpdatePartnerAssetAccessBody) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPIUpdatePartnerAssetAccessBody) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIBusinessAccessAssetsApi::UpdatePartnerAssetAccessHandlerImplResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIBusinessAccessAssetsApi::UpdatePartnerAssetAccessHandlerImplResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}
