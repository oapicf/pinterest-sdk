/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIMultipleProductGroupsInner.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIMultipleProductGroupsInner::CatalogTypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIMultipleProductGroupsInner::CatalogTypeEnum::CreativeAssets:
		return TEXT("CREATIVE_ASSETS");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIMultipleProductGroupsInner::CatalogTypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIMultipleProductGroupsInner::EnumToString(const OpenAPIMultipleProductGroupsInner::CatalogTypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIMultipleProductGroupsInner::CatalogTypeEnum& Value)
{
	static TMap<FString, OpenAPIMultipleProductGroupsInner::CatalogTypeEnum> StringToEnum = { 
		{ TEXT("CREATIVE_ASSETS"), OpenAPIMultipleProductGroupsInner::CatalogTypeEnum::CreativeAssets }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIMultipleProductGroupsInner::EnumFromString(const FString& EnumAsString, OpenAPIMultipleProductGroupsInner::CatalogTypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIMultipleProductGroupsInner::CatalogTypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIMultipleProductGroupsInner::CatalogTypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIMultipleProductGroupsInner::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name);
	if (Description.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("description")); WriteJsonValue(Writer, Description.GetValue());
	}
	if (IsFeatured.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("is_featured")); WriteJsonValue(Writer, IsFeatured.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("filters")); WriteJsonValue(Writer, Filters);
	Writer->WriteIdentifierPrefix(TEXT("feed_id")); WriteJsonValue(Writer, FeedId);
	Writer->WriteIdentifierPrefix(TEXT("catalog_type")); WriteJsonValue(Writer, CatalogType);
	Writer->WriteIdentifierPrefix(TEXT("catalog_id")); WriteJsonValue(Writer, CatalogId);
	Writer->WriteIdentifierPrefix(TEXT("country")); WriteJsonValue(Writer, Country);
	Writer->WriteIdentifierPrefix(TEXT("locale")); WriteJsonValue(Writer, Locale);
	Writer->WriteObjectEnd();
}

bool OpenAPIMultipleProductGroupsInner::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("description"), Description);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("is_featured"), IsFeatured);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("filters"), Filters);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("feed_id"), FeedId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("catalog_type"), CatalogType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("catalog_id"), CatalogId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("country"), Country);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("locale"), Locale);

	return ParseSuccess;
}

}
