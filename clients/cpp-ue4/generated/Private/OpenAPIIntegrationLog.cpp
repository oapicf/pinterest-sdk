/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIIntegrationLog.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIIntegrationLog::EventTypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIIntegrationLog::EventTypeEnum::App:
		return TEXT("APP");
	case OpenAPIIntegrationLog::EventTypeEnum::Api:
		return TEXT("API");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIIntegrationLog::EventTypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIIntegrationLog::EnumToString(const OpenAPIIntegrationLog::EventTypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIIntegrationLog::EventTypeEnum& Value)
{
	static TMap<FString, OpenAPIIntegrationLog::EventTypeEnum> StringToEnum = { 
		{ TEXT("APP"), OpenAPIIntegrationLog::EventTypeEnum::App },
		{ TEXT("API"), OpenAPIIntegrationLog::EventTypeEnum::Api }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIIntegrationLog::EnumFromString(const FString& EnumAsString, OpenAPIIntegrationLog::EventTypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIIntegrationLog::EventTypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIIntegrationLog::EventTypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIIntegrationLog::LogLevelEnum& Value)
{
	switch (Value)
	{
	case OpenAPIIntegrationLog::LogLevelEnum::Info:
		return TEXT("INFO");
	case OpenAPIIntegrationLog::LogLevelEnum::Warn:
		return TEXT("WARN");
	case OpenAPIIntegrationLog::LogLevelEnum::Error:
		return TEXT("ERROR");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIIntegrationLog::LogLevelEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIIntegrationLog::EnumToString(const OpenAPIIntegrationLog::LogLevelEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIIntegrationLog::LogLevelEnum& Value)
{
	static TMap<FString, OpenAPIIntegrationLog::LogLevelEnum> StringToEnum = { 
		{ TEXT("INFO"), OpenAPIIntegrationLog::LogLevelEnum::Info },
		{ TEXT("WARN"), OpenAPIIntegrationLog::LogLevelEnum::Warn },
		{ TEXT("ERROR"), OpenAPIIntegrationLog::LogLevelEnum::Error }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIIntegrationLog::EnumFromString(const FString& EnumAsString, OpenAPIIntegrationLog::LogLevelEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIIntegrationLog::LogLevelEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIIntegrationLog::LogLevelEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIIntegrationLog::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("client_timestamp")); WriteJsonValue(Writer, ClientTimestamp);
	Writer->WriteIdentifierPrefix(TEXT("event_type")); WriteJsonValue(Writer, EventType);
	Writer->WriteIdentifierPrefix(TEXT("log_level")); WriteJsonValue(Writer, LogLevel);
	if (ExternalBusinessId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("external_business_id")); WriteJsonValue(Writer, ExternalBusinessId.GetValue());
	}
	if (AdvertiserId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("advertiser_id")); WriteJsonValue(Writer, AdvertiserId.GetValue());
	}
	if (MerchantId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("merchant_id")); WriteJsonValue(Writer, MerchantId.GetValue());
	}
	if (TagId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("tag_id")); WriteJsonValue(Writer, TagId.GetValue());
	}
	if (FeedProfileId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("feed_profile_id")); WriteJsonValue(Writer, FeedProfileId.GetValue());
	}
	if (Message.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("message")); WriteJsonValue(Writer, Message.GetValue());
	}
	if (AppVersionNumber.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("app_version_number")); WriteJsonValue(Writer, AppVersionNumber.GetValue());
	}
	if (PlatformVersionNumber.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("platform_version_number")); WriteJsonValue(Writer, PlatformVersionNumber.GetValue());
	}
	if (Error.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("error")); WriteJsonValue(Writer, Error.GetValue());
	}
	if (Request.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("request")); WriteJsonValue(Writer, Request.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIIntegrationLog::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("client_timestamp"), ClientTimestamp);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("event_type"), EventType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("log_level"), LogLevel);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("external_business_id"), ExternalBusinessId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("advertiser_id"), AdvertiserId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("merchant_id"), MerchantId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("tag_id"), TagId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("feed_profile_id"), FeedProfileId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("message"), Message);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("app_version_number"), AppVersionNumber);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("platform_version_number"), PlatformVersionNumber);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("error"), Error);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("request"), Request);

	return ParseSuccess;
}

}
