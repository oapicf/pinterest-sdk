/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPISSIOAccountItem.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPISSIOAccountItem::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Id.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id.GetValue());
	}
	if (IoTermsId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("io_terms_id")); WriteJsonValue(Writer, IoTermsId.GetValue());
	}
	if (IoTerms.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("io_terms")); WriteJsonValue(Writer, IoTerms.GetValue());
	}
	if (UsTermsId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("us_terms_id")); WriteJsonValue(Writer, UsTermsId.GetValue());
	}
	if (UsTerms.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("us_terms")); WriteJsonValue(Writer, UsTerms.GetValue());
	}
	if (RowTermsId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("row_terms_id")); WriteJsonValue(Writer, RowTermsId.GetValue());
	}
	if (RowTerms.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("row_terms")); WriteJsonValue(Writer, RowTerms.GetValue());
	}
	if (IoType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("io_type")); WriteJsonValue(Writer, IoType.GetValue());
	}
	if (Addresses.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("addresses")); WriteJsonValue(Writer, Addresses.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPISSIOAccountItem::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("io_terms_id"), IoTermsId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("io_terms"), IoTerms);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("us_terms_id"), UsTermsId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("us_terms"), UsTerms);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("row_terms_id"), RowTermsId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("row_terms"), RowTerms);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("io_type"), IoType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("addresses"), Addresses);

	return ParseSuccess;
}

}
