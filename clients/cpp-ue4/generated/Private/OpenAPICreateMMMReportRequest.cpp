/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPICreateMMMReportRequest.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPICreateMMMReportRequest::GranularityEnum& Value)
{
	switch (Value)
	{
	case OpenAPICreateMMMReportRequest::GranularityEnum::Day:
		return TEXT("DAY");
	case OpenAPICreateMMMReportRequest::GranularityEnum::Week:
		return TEXT("WEEK");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPICreateMMMReportRequest::GranularityEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPICreateMMMReportRequest::EnumToString(const OpenAPICreateMMMReportRequest::GranularityEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPICreateMMMReportRequest::GranularityEnum& Value)
{
	static TMap<FString, OpenAPICreateMMMReportRequest::GranularityEnum> StringToEnum = { 
		{ TEXT("DAY"), OpenAPICreateMMMReportRequest::GranularityEnum::Day },
		{ TEXT("WEEK"), OpenAPICreateMMMReportRequest::GranularityEnum::Week }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPICreateMMMReportRequest::EnumFromString(const FString& EnumAsString, OpenAPICreateMMMReportRequest::GranularityEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPICreateMMMReportRequest::GranularityEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPICreateMMMReportRequest::GranularityEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPICreateMMMReportRequest::LevelEnum& Value)
{
	switch (Value)
	{
	case OpenAPICreateMMMReportRequest::LevelEnum::CampaignTargeting:
		return TEXT("CAMPAIGN_TARGETING");
	case OpenAPICreateMMMReportRequest::LevelEnum::AdGroupTargeting:
		return TEXT("AD_GROUP_TARGETING");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPICreateMMMReportRequest::LevelEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPICreateMMMReportRequest::EnumToString(const OpenAPICreateMMMReportRequest::LevelEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPICreateMMMReportRequest::LevelEnum& Value)
{
	static TMap<FString, OpenAPICreateMMMReportRequest::LevelEnum> StringToEnum = { 
		{ TEXT("CAMPAIGN_TARGETING"), OpenAPICreateMMMReportRequest::LevelEnum::CampaignTargeting },
		{ TEXT("AD_GROUP_TARGETING"), OpenAPICreateMMMReportRequest::LevelEnum::AdGroupTargeting }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPICreateMMMReportRequest::EnumFromString(const FString& EnumAsString, OpenAPICreateMMMReportRequest::LevelEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPICreateMMMReportRequest::LevelEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPICreateMMMReportRequest::LevelEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPICreateMMMReportRequest::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("report_name")); WriteJsonValue(Writer, ReportName);
	Writer->WriteIdentifierPrefix(TEXT("start_date")); WriteJsonValue(Writer, StartDate);
	Writer->WriteIdentifierPrefix(TEXT("end_date")); WriteJsonValue(Writer, EndDate);
	Writer->WriteIdentifierPrefix(TEXT("granularity")); WriteJsonValue(Writer, Granularity);
	Writer->WriteIdentifierPrefix(TEXT("level")); WriteJsonValue(Writer, Level);
	Writer->WriteIdentifierPrefix(TEXT("targeting_types")); WriteJsonValue(Writer, TargetingTypes);
	Writer->WriteIdentifierPrefix(TEXT("columns")); WriteJsonValue(Writer, Columns);
	if (Countries.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("countries")); WriteJsonValue(Writer, Countries.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPICreateMMMReportRequest::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("report_name"), ReportName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("start_date"), StartDate);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("end_date"), EndDate);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("granularity"), Granularity);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("level"), Level);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("targeting_types"), TargetingTypes);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("columns"), Columns);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("countries"), Countries);

	return ParseSuccess;
}

}
