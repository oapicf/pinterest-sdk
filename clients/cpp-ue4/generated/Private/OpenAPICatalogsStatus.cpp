/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPICatalogsStatus.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPICatalogsStatus::Values& Value)
{
	switch (Value)
	{
	case OpenAPICatalogsStatus::Values::Active:
		return TEXT("ACTIVE");
	case OpenAPICatalogsStatus::Values::Inactive:
		return TEXT("INACTIVE");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPICatalogsStatus::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPICatalogsStatus::EnumToString(const OpenAPICatalogsStatus::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPICatalogsStatus::Values& Value)
{
	static TMap<FString, OpenAPICatalogsStatus::Values> StringToEnum = { 
		{ TEXT("ACTIVE"), OpenAPICatalogsStatus::Values::Active },
		{ TEXT("INACTIVE"), OpenAPICatalogsStatus::Values::Inactive }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPICatalogsStatus::EnumFromString(const FString& EnumAsString, OpenAPICatalogsStatus::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPICatalogsStatus::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPICatalogsStatus::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPICatalogsStatus::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPICatalogsStatus::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
