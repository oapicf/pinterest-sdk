/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIResourcesApiOperations.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace OpenAPI
{

FString OpenAPIResourcesApi::AdAccountCountriesGetRequest::ComputePath() const
{
	FString Path(TEXT("/resources/ad_account_countries"));
	return Path;
}

void OpenAPIResourcesApi::AdAccountCountriesGetRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIResourcesApi::AdAccountCountriesGetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIResourcesApi::AdAccountCountriesGetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const OpenAPIResourcesApi::DeliveryMetricsGetRequest::ReportTypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIResourcesApi::DeliveryMetricsGetRequest::ReportTypeEnum::Sync:
		return TEXT("SYNC");
	case OpenAPIResourcesApi::DeliveryMetricsGetRequest::ReportTypeEnum::Async:
		return TEXT("ASYNC");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIResourcesApi::DeliveryMetricsGetRequest::ReportTypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIResourcesApi::DeliveryMetricsGetRequest::EnumToString(const OpenAPIResourcesApi::DeliveryMetricsGetRequest::ReportTypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIResourcesApi::DeliveryMetricsGetRequest::ReportTypeEnum& Value)
{
	static TMap<FString, OpenAPIResourcesApi::DeliveryMetricsGetRequest::ReportTypeEnum> StringToEnum = { 
		{ TEXT("SYNC"), OpenAPIResourcesApi::DeliveryMetricsGetRequest::ReportTypeEnum::Sync },
		{ TEXT("ASYNC"), OpenAPIResourcesApi::DeliveryMetricsGetRequest::ReportTypeEnum::Async }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIResourcesApi::DeliveryMetricsGetRequest::EnumFromString(const FString& EnumAsString, OpenAPIResourcesApi::DeliveryMetricsGetRequest::ReportTypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIResourcesApi::DeliveryMetricsGetRequest::ReportTypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIResourcesApi::DeliveryMetricsGetRequest::ReportTypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIResourcesApi::DeliveryMetricsGetRequest::ComputePath() const
{
	FString Path(TEXT("/resources/delivery_metrics"));
	TArray<FString> QueryParams;
	if(ReportType.IsSet())
	{
		QueryParams.Add(FString(TEXT("report_type=")) + ToUrlString(ReportType.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIResourcesApi::DeliveryMetricsGetRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIResourcesApi::DeliveryMetricsGetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIResourcesApi::DeliveryMetricsGetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIResourcesApi::InterestTargetingOptionsGetRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("interest_id"), FStringFormatArg(ToUrlString(InterestId)) } };

	FString Path = FString::Format(TEXT("/resources/targeting/interests/{interest_id}"), PathParams);

	return Path;
}

void OpenAPIResourcesApi::InterestTargetingOptionsGetRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIResourcesApi::InterestTargetingOptionsGetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIResourcesApi::InterestTargetingOptionsGetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIResourcesApi::LeadFormQuestionsGetRequest::ComputePath() const
{
	FString Path(TEXT("/resources/lead_form_questions"));
	return Path;
}

void OpenAPIResourcesApi::LeadFormQuestionsGetRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIResourcesApi::LeadFormQuestionsGetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIResourcesApi::LeadFormQuestionsGetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

FString OpenAPIResourcesApi::MetricsReadyStateGetRequest::ComputePath() const
{
	FString Path(TEXT("/resources/metrics_ready_state"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("date=")) + ToUrlString(Date));
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIResourcesApi::MetricsReadyStateGetRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIResourcesApi::MetricsReadyStateGetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIResourcesApi::MetricsReadyStateGetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const OpenAPIResourcesApi::TargetingOptionsGetRequest::TargetingTypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIResourcesApi::TargetingOptionsGetRequest::TargetingTypeEnum::Apptype:
		return TEXT("APPTYPE");
	case OpenAPIResourcesApi::TargetingOptionsGetRequest::TargetingTypeEnum::Gender:
		return TEXT("GENDER");
	case OpenAPIResourcesApi::TargetingOptionsGetRequest::TargetingTypeEnum::Locale:
		return TEXT("LOCALE");
	case OpenAPIResourcesApi::TargetingOptionsGetRequest::TargetingTypeEnum::AgeBucket:
		return TEXT("AGE_BUCKET");
	case OpenAPIResourcesApi::TargetingOptionsGetRequest::TargetingTypeEnum::Location:
		return TEXT("LOCATION");
	case OpenAPIResourcesApi::TargetingOptionsGetRequest::TargetingTypeEnum::Geo:
		return TEXT("GEO");
	case OpenAPIResourcesApi::TargetingOptionsGetRequest::TargetingTypeEnum::Interest:
		return TEXT("INTEREST");
	case OpenAPIResourcesApi::TargetingOptionsGetRequest::TargetingTypeEnum::Keyword:
		return TEXT("KEYWORD");
	case OpenAPIResourcesApi::TargetingOptionsGetRequest::TargetingTypeEnum::AudienceInclude:
		return TEXT("AUDIENCE_INCLUDE");
	case OpenAPIResourcesApi::TargetingOptionsGetRequest::TargetingTypeEnum::AudienceExclude:
		return TEXT("AUDIENCE_EXCLUDE");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIResourcesApi::TargetingOptionsGetRequest::TargetingTypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIResourcesApi::TargetingOptionsGetRequest::EnumToString(const OpenAPIResourcesApi::TargetingOptionsGetRequest::TargetingTypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIResourcesApi::TargetingOptionsGetRequest::TargetingTypeEnum& Value)
{
	static TMap<FString, OpenAPIResourcesApi::TargetingOptionsGetRequest::TargetingTypeEnum> StringToEnum = { 
		{ TEXT("APPTYPE"), OpenAPIResourcesApi::TargetingOptionsGetRequest::TargetingTypeEnum::Apptype },
		{ TEXT("GENDER"), OpenAPIResourcesApi::TargetingOptionsGetRequest::TargetingTypeEnum::Gender },
		{ TEXT("LOCALE"), OpenAPIResourcesApi::TargetingOptionsGetRequest::TargetingTypeEnum::Locale },
		{ TEXT("AGE_BUCKET"), OpenAPIResourcesApi::TargetingOptionsGetRequest::TargetingTypeEnum::AgeBucket },
		{ TEXT("LOCATION"), OpenAPIResourcesApi::TargetingOptionsGetRequest::TargetingTypeEnum::Location },
		{ TEXT("GEO"), OpenAPIResourcesApi::TargetingOptionsGetRequest::TargetingTypeEnum::Geo },
		{ TEXT("INTEREST"), OpenAPIResourcesApi::TargetingOptionsGetRequest::TargetingTypeEnum::Interest },
		{ TEXT("KEYWORD"), OpenAPIResourcesApi::TargetingOptionsGetRequest::TargetingTypeEnum::Keyword },
		{ TEXT("AUDIENCE_INCLUDE"), OpenAPIResourcesApi::TargetingOptionsGetRequest::TargetingTypeEnum::AudienceInclude },
		{ TEXT("AUDIENCE_EXCLUDE"), OpenAPIResourcesApi::TargetingOptionsGetRequest::TargetingTypeEnum::AudienceExclude }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIResourcesApi::TargetingOptionsGetRequest::EnumFromString(const FString& EnumAsString, OpenAPIResourcesApi::TargetingOptionsGetRequest::TargetingTypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIResourcesApi::TargetingOptionsGetRequest::TargetingTypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIResourcesApi::TargetingOptionsGetRequest::TargetingTypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIResourcesApi::TargetingOptionsGetRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("targeting_type"), FStringFormatArg(ToUrlString(TargetingType)) } };

	FString Path = FString::Format(TEXT("/resources/targeting/{targeting_type}"), PathParams);

	TArray<FString> QueryParams;
	if(ClientId.IsSet())
	{
		QueryParams.Add(FString(TEXT("client_id=")) + ToUrlString(ClientId.GetValue()));
	}
	if(OauthSignature.IsSet())
	{
		QueryParams.Add(FString(TEXT("oauth_signature=")) + ToUrlString(OauthSignature.GetValue()));
	}
	if(Timestamp.IsSet())
	{
		QueryParams.Add(FString(TEXT("timestamp=")) + ToUrlString(Timestamp.GetValue()));
	}
	if(AdAccountId.IsSet())
	{
		QueryParams.Add(FString(TEXT("ad_account_id=")) + ToUrlString(AdAccountId.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIResourcesApi::TargetingOptionsGetRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIResourcesApi::TargetingOptionsGetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIResourcesApi::TargetingOptionsGetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}
