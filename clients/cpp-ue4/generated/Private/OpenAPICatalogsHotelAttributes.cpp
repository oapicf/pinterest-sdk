/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPICatalogsHotelAttributes.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPICatalogsHotelAttributes::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Name.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name.GetValue());
	}
	if (Link.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("link")); WriteJsonValue(Writer, Link.GetValue());
	}
	if (Description.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("description")); WriteJsonValue(Writer, Description.GetValue());
	}
	if (Brand.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("brand")); WriteJsonValue(Writer, Brand.GetValue());
	}
	if (Latitude.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("latitude")); WriteJsonValue(Writer, Latitude.GetValue());
	}
	if (Longitude.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("longitude")); WriteJsonValue(Writer, Longitude.GetValue());
	}
	if (Neighborhood.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("neighborhood")); WriteJsonValue(Writer, Neighborhood.GetValue());
	}
	if (Address.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("address")); WriteJsonValue(Writer, Address.GetValue());
	}
	if (CustomLabel0.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("custom_label_0")); WriteJsonValue(Writer, CustomLabel0.GetValue());
	}
	if (CustomLabel1.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("custom_label_1")); WriteJsonValue(Writer, CustomLabel1.GetValue());
	}
	if (CustomLabel2.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("custom_label_2")); WriteJsonValue(Writer, CustomLabel2.GetValue());
	}
	if (CustomLabel3.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("custom_label_3")); WriteJsonValue(Writer, CustomLabel3.GetValue());
	}
	if (CustomLabel4.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("custom_label_4")); WriteJsonValue(Writer, CustomLabel4.GetValue());
	}
	if (Category.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("category")); WriteJsonValue(Writer, Category.GetValue());
	}
	if (BasePrice.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("base_price")); WriteJsonValue(Writer, BasePrice.GetValue());
	}
	if (SalePrice.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("sale_price")); WriteJsonValue(Writer, SalePrice.GetValue());
	}
	if (GuestRatings.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("guest_ratings")); WriteJsonValue(Writer, GuestRatings.GetValue());
	}
	if (MainImage.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("main_image")); WriteJsonValue(Writer, MainImage.GetValue());
	}
	if (AdditionalImageLink.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("additional_image_link")); WriteJsonValue(Writer, AdditionalImageLink.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPICatalogsHotelAttributes::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("link"), Link);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("description"), Description);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("brand"), Brand);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("latitude"), Latitude);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("longitude"), Longitude);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("neighborhood"), Neighborhood);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("address"), Address);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("custom_label_0"), CustomLabel0);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("custom_label_1"), CustomLabel1);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("custom_label_2"), CustomLabel2);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("custom_label_3"), CustomLabel3);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("custom_label_4"), CustomLabel4);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("category"), Category);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("base_price"), BasePrice);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("sale_price"), SalePrice);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("guest_ratings"), GuestRatings);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("main_image"), MainImage);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("additional_image_link"), AdditionalImageLink);

	return ParseSuccess;
}

}
