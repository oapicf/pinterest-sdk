/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIQuizPinData.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIQuizPinData::TieBreakerTypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIQuizPinData::TieBreakerTypeEnum::Random:
		return TEXT("RANDOM");
	case OpenAPIQuizPinData::TieBreakerTypeEnum::Custom:
		return TEXT("CUSTOM");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIQuizPinData::TieBreakerTypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIQuizPinData::EnumToString(const OpenAPIQuizPinData::TieBreakerTypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIQuizPinData::TieBreakerTypeEnum& Value)
{
	static TMap<FString, OpenAPIQuizPinData::TieBreakerTypeEnum> StringToEnum = { 
		{ TEXT("RANDOM"), OpenAPIQuizPinData::TieBreakerTypeEnum::Random },
		{ TEXT("CUSTOM"), OpenAPIQuizPinData::TieBreakerTypeEnum::Custom }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIQuizPinData::EnumFromString(const FString& EnumAsString, OpenAPIQuizPinData::TieBreakerTypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIQuizPinData::TieBreakerTypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIQuizPinData::TieBreakerTypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIQuizPinData::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Questions.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("questions")); WriteJsonValue(Writer, Questions.GetValue());
	}
	if (Results.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("results")); WriteJsonValue(Writer, Results.GetValue());
	}
	if (TieBreakerType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("tie_breaker_type")); WriteJsonValue(Writer, TieBreakerType.GetValue());
	}
	if (TieBreakerCustomResult.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("tie_breaker_custom_result")); WriteJsonValue(Writer, TieBreakerCustomResult.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIQuizPinData::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("questions"), Questions);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("results"), Results);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("tie_breaker_type"), TieBreakerType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("tie_breaker_custom_result"), TieBreakerCustomResult);

	return ParseSuccess;
}

}
