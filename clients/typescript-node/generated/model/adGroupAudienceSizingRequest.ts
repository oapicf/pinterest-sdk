/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { AdGroupAudienceSizingRequestKeywordsInner } from './adGroupAudienceSizingRequestKeywordsInner';
import { PlacementGroupType } from './placementGroupType';
import { TargetingSpec } from './targetingSpec';

export class AdGroupAudienceSizingRequest {
    /**
    * Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>.
    */
    'autoTargetingEnabled'?: boolean = true;
    /**
    * <a href=\"/docs/redoc/#section/Placement-group\">Placement group</a>.
    */
    'placementGroup'?: PlacementGroupType = PlacementGroupType.All;
    /**
    * Pin creative types filter. </p><strong>Note:</strong> SHOP_THE_PIN has been deprecated. Please use COLLECTION instead.
    */
    'creativeTypes'?: Array<AdGroupAudienceSizingRequest.CreativeTypesEnum>;
    'targetingSpec'?: TargetingSpec;
    /**
    * Targeted product group IDs. </p><strong>Note:</strong> This can only be combined with shopping/catalog sales campaigns. For more information, <a href=\"https://help.pinterest.com/en/business/article/shopping-ads#section-14571\" target=\"_blank\">click here</a>. SHOPPING_RETARGETING must be included in targeting_spec object or this field will be ignored.
    */
    'productGroupIds'?: Array<string> | null;
    /**
    * Array of keyword objects. If the keywords field is missing, all keywords will be targeted.
    */
    'keywords'?: Array<AdGroupAudienceSizingRequestKeywordsInner> | null;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "autoTargetingEnabled",
            "baseName": "auto_targeting_enabled",
            "type": "boolean"
        },
        {
            "name": "placementGroup",
            "baseName": "placement_group",
            "type": "PlacementGroupType"
        },
        {
            "name": "creativeTypes",
            "baseName": "creative_types",
            "type": "Array<AdGroupAudienceSizingRequest.CreativeTypesEnum>"
        },
        {
            "name": "targetingSpec",
            "baseName": "targeting_spec",
            "type": "TargetingSpec"
        },
        {
            "name": "productGroupIds",
            "baseName": "product_group_ids",
            "type": "Array<string>"
        },
        {
            "name": "keywords",
            "baseName": "keywords",
            "type": "Array<AdGroupAudienceSizingRequestKeywordsInner>"
        }    ];

    static getAttributeTypeMap() {
        return AdGroupAudienceSizingRequest.attributeTypeMap;
    }
}

export namespace AdGroupAudienceSizingRequest {
    export enum CreativeTypesEnum {
        Regular = <any> 'REGULAR',
        Video = <any> 'VIDEO',
        Shopping = <any> 'SHOPPING',
        Carousel = <any> 'CAROUSEL',
        MaxVideo = <any> 'MAX_VIDEO',
        ShopThePin = <any> 'SHOP_THE_PIN',
        Collection = <any> 'COLLECTION',
        Idea = <any> 'IDEA'
    }
}
