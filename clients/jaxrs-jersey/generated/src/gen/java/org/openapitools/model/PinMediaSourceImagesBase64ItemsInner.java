/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * PinMediaSourceImagesBase64ItemsInner
 */
@JsonPropertyOrder({
  PinMediaSourceImagesBase64ItemsInner.JSON_PROPERTY_TITLE,
  PinMediaSourceImagesBase64ItemsInner.JSON_PROPERTY_DESCRIPTION,
  PinMediaSourceImagesBase64ItemsInner.JSON_PROPERTY_LINK,
  PinMediaSourceImagesBase64ItemsInner.JSON_PROPERTY_CONTENT_TYPE,
  PinMediaSourceImagesBase64ItemsInner.JSON_PROPERTY_DATA
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2024-11-05T02:20:07.425136412Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class PinMediaSourceImagesBase64ItemsInner   {
  public static final String JSON_PROPERTY_TITLE = "title";
  @JsonProperty(JSON_PROPERTY_TITLE)
  private String title;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  private String description;

  public static final String JSON_PROPERTY_LINK = "link";
  @JsonProperty(JSON_PROPERTY_LINK)
  private String link;

  /**
   * Gets or Sets contentType
   */
  public enum ContentTypeEnum {
    JPEG("image/jpeg"),
    
    PNG("image/png");

    private String value;

    ContentTypeEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ContentTypeEnum fromValue(String value) {
      for (ContentTypeEnum b : ContentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CONTENT_TYPE = "content_type";
  @JsonProperty(JSON_PROPERTY_CONTENT_TYPE)
  private ContentTypeEnum contentType;

  public static final String JSON_PROPERTY_DATA = "data";
  @JsonProperty(JSON_PROPERTY_DATA)
  private String data;

  public PinMediaSourceImagesBase64ItemsInner title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   **/
  @JsonProperty(value = "title")
  @ApiModelProperty(value = "")
  
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public PinMediaSourceImagesBase64ItemsInner description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   **/
  @JsonProperty(value = "description")
  @ApiModelProperty(value = "")
  
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public PinMediaSourceImagesBase64ItemsInner link(String link) {
    this.link = link;
    return this;
  }

  /**
   * Destination link for the image.
   * @return link
   **/
  @JsonProperty(value = "link")
  @ApiModelProperty(value = "Destination link for the image.")
  
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }

  public PinMediaSourceImagesBase64ItemsInner contentType(ContentTypeEnum contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Get contentType
   * @return contentType
   **/
  @JsonProperty(value = "content_type")
  @ApiModelProperty(required = true, value = "")
  @NotNull 
  public ContentTypeEnum getContentType() {
    return contentType;
  }

  public void setContentType(ContentTypeEnum contentType) {
    this.contentType = contentType;
  }

  public PinMediaSourceImagesBase64ItemsInner data(String data) {
    this.data = data;
    return this;
  }

  /**
   * Image to upload as base64 string.
   * @return data
   **/
  @JsonProperty(value = "data")
  @ApiModelProperty(required = true, value = "Image to upload as base64 string.")
  @NotNull  @Pattern(regexp="[a-zA-Z0-9+/=]+")
  public String getData() {
    return data;
  }

  public void setData(String data) {
    this.data = data;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PinMediaSourceImagesBase64ItemsInner pinMediaSourceImagesBase64ItemsInner = (PinMediaSourceImagesBase64ItemsInner) o;
    return Objects.equals(this.title, pinMediaSourceImagesBase64ItemsInner.title) &&
        Objects.equals(this.description, pinMediaSourceImagesBase64ItemsInner.description) &&
        Objects.equals(this.link, pinMediaSourceImagesBase64ItemsInner.link) &&
        Objects.equals(this.contentType, pinMediaSourceImagesBase64ItemsInner.contentType) &&
        Objects.equals(this.data, pinMediaSourceImagesBase64ItemsInner.data);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, link, contentType, data);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PinMediaSourceImagesBase64ItemsInner {\n");
    
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

