/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ConversionEventsUserData.h
 *
 * Object containing customer information data. Note, It is required at least one of 1) em, 2) hashed_maids or 3) pair client_ip_address + client_user_agent.
 */

#ifndef ConversionEventsUserData_H_
#define ConversionEventsUserData_H_



#include "ConversionEventsUserData_anyOf_2.h"
#include <string>
#include "ConversionEventsUserData_anyOf_1.h"
#include <vector>
#include "ConversionEventsUserData_anyOf.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "ConversionEventsUserData_anyOf.h"
#include "ConversionEventsUserData_anyOf_1.h"
#include "ConversionEventsUserData_anyOf_2.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Object containing customer information data. Note, It is required at least one of 1) em, 2) hashed_maids or 3) pair client_ip_address + client_user_agent.
/// </summary>
class  ConversionEventsUserData : public ConversionEventsUserData_anyOf, public ConversionEventsUserData_anyOf_1, public ConversionEventsUserData_anyOf_2
{
public:
    ConversionEventsUserData() = default;
    explicit ConversionEventsUserData(boost::property_tree::ptree const& pt);
    virtual ~ConversionEventsUserData() = default;

    ConversionEventsUserData(const ConversionEventsUserData& other) = default; // copy constructor
    ConversionEventsUserData(ConversionEventsUserData&& other) noexcept = default; // move constructor

    ConversionEventsUserData& operator=(const ConversionEventsUserData& other) = default; // copy assignment
    ConversionEventsUserData& operator=(ConversionEventsUserData&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ConversionEventsUserData members

    /// <summary>
    /// Sha256 hashes of user&#39;s phone numbers, only digits with country code, area code, and number. Remove any symbols, letters, spaces and leading zeros. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
    /// </summary>
    std::vector<std::string> getPh() const;
    void setPh(std::vector<std::string> value);

    /// <summary>
    /// Sha256 hashes of user&#39;s gender, in lowercase. Either \&quot;f\&quot; or \&quot;m\&quot; or \&quot;n\&quot; for non-binary gender. The string should be in the UTF-8 format.
    /// </summary>
    std::vector<std::string> getGe() const;
    void setGe(std::vector<std::string> value);

    /// <summary>
    /// Sha256 hashes of user&#39;s date of birthday, given as year, month, and day. The string should be in the UTF-8 format.
    /// </summary>
    std::vector<std::string> getDb() const;
    void setDb(std::vector<std::string> value);

    /// <summary>
    /// Sha256 hashes of user&#39;s last name, in lowercase. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
    /// </summary>
    std::vector<std::string> getLn() const;
    void setLn(std::vector<std::string> value);

    /// <summary>
    /// Sha256 hashes of user&#39;s first name, in lowercase. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
    /// </summary>
    std::vector<std::string> getFn() const;
    void setFn(std::vector<std::string> value);

    /// <summary>
    /// Sha256 hashes of user&#39;s city, in lowercase, and without spaces or punctuation. User residency city (mostly billing). The string should be in the UTF-8 format.
    /// </summary>
    std::vector<std::string> getCt() const;
    void setCt(std::vector<std::string> value);

    /// <summary>
    /// Sha256 hashes of user&#39;s state, given as a two-letter code in lowercase. User residency state (mostly billing). The string should be in the UTF-8 format.
    /// </summary>
    std::vector<std::string> getSt() const;
    void setSt(std::vector<std::string> value);

    /// <summary>
    /// Sha256 hashes of user&#39;s zipcode, only digits. User residency zipcode (mostly billing). The string should be in the UTF-8 format.
    /// </summary>
    std::vector<std::string> getZp() const;
    void setZp(std::vector<std::string> value);

    /// <summary>
    /// Sha256 hashes of two-character ISO-3166 country code indicating the user&#39;s country, in lowercase. The string should be in the UTF-8 format.
    /// </summary>
    std::vector<std::string> getCountry() const;
    void setCountry(std::vector<std::string> value);

    /// <summary>
    /// Sha256 hashes of the unique id from the advertiser that identifies a user in their space, e.g. user id, loyalty id, etc. We highly recommend this on all events. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
    /// </summary>
    std::vector<std::string> getExternalId() const;
    void setExternalId(std::vector<std::string> value);

    /// <summary>
    /// The unique identifier stored in _epik cookie on your domain or &amp;epik&#x3D; query parameter in the URL. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA.
    /// </summary>
    std::string getClickId() const;
    void setClickId(std::string value);

    /// <summary>
    /// A unique identifier of visitors&#39; information defined by third party partners. e.g RampID
    /// </summary>
    std::string getPartnerId() const;
    void setPartnerId(std::string value);

    /// <summary>
    /// Sha256 hashes of lowercase version of user&#39;s email addresses. Used for matching. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
    /// </summary>
    std::vector<std::string> getEm() const;
    void setEm(std::vector<std::string> value);

    /// <summary>
    /// Sha256 hashes of user&#39;s \&quot;Google Advertising IDs\&quot; (GAIDs) or \&quot;Apple&#39;s Identifier for Advertisers\&quot; (IDFAs). Used for matching. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
    /// </summary>
    std::vector<std::string> getHashedMaids() const;
    void setHashedMaids(std::vector<std::string> value);

    /// <summary>
    /// The user&#39;s IP address, which can be either in IPv4 or IPv6 format. Used for matching. We highly recommend this for all events. It may improve reporting performance such as ROAS/CPA.
    /// </summary>
    std::string getClientIpAddress() const;
    void setClientIpAddress(std::string value);

    /// <summary>
    /// The user agent string of the user&#39;s web browser. We highly recommend this for all events. It may improve reporting performance such as ROAS/CPA.
    /// </summary>
    std::string getClientUserAgent() const;
    void setClientUserAgent(std::string value);

protected:
    std::vector<std::string> m_Ph;
    std::vector<std::string> m_Ge;
    std::vector<std::string> m_Db;
    std::vector<std::string> m_Ln;
    std::vector<std::string> m_Fn;
    std::vector<std::string> m_Ct;
    std::vector<std::string> m_St;
    std::vector<std::string> m_Zp;
    std::vector<std::string> m_Country;
    std::vector<std::string> m_External_id;
    std::string m_Click_id = "";
    std::string m_Partner_id = "";
    std::vector<std::string> m_Em;
    std::vector<std::string> m_Hashed_maids;
    std::string m_Client_ip_address = "";
    std::string m_Client_user_agent = "";
};

std::vector<ConversionEventsUserData> createConversionEventsUserDataVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ConversionEventsUserData>(const ConversionEventsUserData& val) {
    return val.toPropertyTree();
}

template<>
inline ConversionEventsUserData fromPt<ConversionEventsUserData>(const boost::property_tree::ptree& pt) {
    ConversionEventsUserData ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ConversionEventsUserData_H_ */
