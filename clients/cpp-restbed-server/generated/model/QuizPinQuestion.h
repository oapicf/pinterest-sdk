/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * QuizPinQuestion.h
 *
 * A specific quiz inquiry.
 */

#ifndef QuizPinQuestion_H_
#define QuizPinQuestion_H_



#include <string>
#include "QuizPinOption.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// A specific quiz inquiry.
/// </summary>
class  QuizPinQuestion 
{
public:
    QuizPinQuestion() = default;
    explicit QuizPinQuestion(boost::property_tree::ptree const& pt);
    virtual ~QuizPinQuestion() = default;

    QuizPinQuestion(const QuizPinQuestion& other) = default; // copy constructor
    QuizPinQuestion(QuizPinQuestion&& other) noexcept = default; // move constructor

    QuizPinQuestion& operator=(const QuizPinQuestion& other) = default; // copy assignment
    QuizPinQuestion& operator=(QuizPinQuestion&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// QuizPinQuestion members

    /// <summary>
    /// 
    /// </summary>
    double getQuestionId() const;
    void setQuestionId(double value);

    /// <summary>
    /// 
    /// </summary>
    std::string getQuestionText() const;
    void setQuestionText(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<QuizPinOption> getOptions() const;
    void setOptions(std::vector<QuizPinOption> value);

protected:
    double m_Question_id = 0.0;
    std::string m_Question_text = "";
    std::vector<QuizPinOption> m_Options;
};

std::vector<QuizPinQuestion> createQuizPinQuestionVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<QuizPinQuestion>(const QuizPinQuestion& val) {
    return val.toPropertyTree();
}

template<>
inline QuizPinQuestion fromPt<QuizPinQuestion>(const boost::property_tree::ptree& pt) {
    QuizPinQuestion ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* QuizPinQuestion_H_ */
