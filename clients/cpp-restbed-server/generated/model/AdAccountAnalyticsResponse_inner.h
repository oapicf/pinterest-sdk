/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdAccountAnalyticsResponse_inner.h
 *
 * 
 */

#ifndef AdAccountAnalyticsResponse_inner_H_
#define AdAccountAnalyticsResponse_inner_H_



#include <string>
#include <map>
#include "AnyType.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  AdAccountAnalyticsResponse_inner 
{
public:
    AdAccountAnalyticsResponse_inner() = default;
    explicit AdAccountAnalyticsResponse_inner(boost::property_tree::ptree const& pt);
    virtual ~AdAccountAnalyticsResponse_inner() = default;

    AdAccountAnalyticsResponse_inner(const AdAccountAnalyticsResponse_inner& other) = default; // copy constructor
    AdAccountAnalyticsResponse_inner(AdAccountAnalyticsResponse_inner&& other) noexcept = default; // move constructor

    AdAccountAnalyticsResponse_inner& operator=(const AdAccountAnalyticsResponse_inner& other) = default; // copy assignment
    AdAccountAnalyticsResponse_inner& operator=(AdAccountAnalyticsResponse_inner&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AdAccountAnalyticsResponse_inner members

    /// <summary>
    /// The ID of the advertiser that this metrics belongs to.
    /// </summary>
    std::string getADACCOUNTID() const;
    void setADACCOUNTID(std::string value);

    /// <summary>
    /// Current metrics date. Only returned when granularity is a time-based value (&#x60;DAY&#x60;, &#x60;HOUR&#x60;, &#x60;WEEK&#x60;, &#x60;MONTH&#x60;)
    /// </summary>
    std::string getDATE() const;
    void setDATE(std::string value);

protected:
    std::string m_AD_ACCOUNT_ID = "";
    std::string m_DATE = "";
};

std::vector<AdAccountAnalyticsResponse_inner> createAdAccountAnalyticsResponse_innerVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AdAccountAnalyticsResponse_inner>(const AdAccountAnalyticsResponse_inner& val) {
    return val.toPropertyTree();
}

template<>
inline AdAccountAnalyticsResponse_inner fromPt<AdAccountAnalyticsResponse_inner>(const boost::property_tree::ptree& pt) {
    AdAccountAnalyticsResponse_inner ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AdAccountAnalyticsResponse_inner_H_ */
