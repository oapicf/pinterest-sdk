/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ConversionEvents_data_inner.h
 *
 * 
 */

#ifndef ConversionEvents_data_inner_H_
#define ConversionEvents_data_inner_H_



#include "ConversionEvents_data_inner_custom_data.h"
#include "ConversionEventsUserData.h"
#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ConversionEvents_data_inner 
{
public:
    ConversionEvents_data_inner() = default;
    explicit ConversionEvents_data_inner(boost::property_tree::ptree const& pt);
    virtual ~ConversionEvents_data_inner() = default;

    ConversionEvents_data_inner(const ConversionEvents_data_inner& other) = default; // copy constructor
    ConversionEvents_data_inner(ConversionEvents_data_inner&& other) noexcept = default; // move constructor

    ConversionEvents_data_inner& operator=(const ConversionEvents_data_inner& other) = default; // copy assignment
    ConversionEvents_data_inner& operator=(ConversionEvents_data_inner&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ConversionEvents_data_inner members

    /// <summary>
    /// &lt;p&gt;The type of the user event. Please use the right event_name otherwise the event won&#39;t be accepted and show up correctly in reports.   &lt;ul&gt;   &lt;li&gt;&lt;code&gt;add_to_cart&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;checkout&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;custom&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;lead&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;page_visit&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;search&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;signup&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;view_category&lt;/code&gt;&lt;/li&gt;   &lt;li&gt;&lt;code&gt;watch_video&lt;/code&gt;&lt;/li&gt;   &lt;/ul&gt; &lt;/p&gt; 
    /// </summary>
    std::string getEventName() const;
    void setEventName(std::string value);

    /// <summary>
    /// &lt;p&gt;   The source indicating where the conversion event occurred.   &lt;ul&gt;     &lt;li&gt;&lt;code&gt;app_android&lt;/code&gt;&lt;/li&gt;     &lt;li&gt;&lt;code&gt;app_ios&lt;/code&gt;&lt;/li&gt;     &lt;li&gt;&lt;code&gt;web&lt;/code&gt;&lt;/li&gt;     &lt;li&gt;&lt;code&gt;offline&lt;/code&gt;&lt;/li&gt;   &lt;/ul&gt; &lt;/p&gt; 
    /// </summary>
    std::string getActionSource() const;
    void setActionSource(std::string value);

    /// <summary>
    /// The time when the event happened. Unix timestamp in seconds.
    /// </summary>
    int64_t getEventTime() const;
    void setEventTime(int64_t value);

    /// <summary>
    /// A unique id string that identifies this event and can be used for deduping between events ingested via both the conversion API and Pinterest tracking. Without this, event&#39;s data is likely to be double counted and will cause report metric inflation. Third-party vendors make sure this field is updated on both Pinterest tag and Conversions API side before rolling out template for Conversions API.
    /// </summary>
    std::string getEventId() const;
    void setEventId(std::string value);

    /// <summary>
    /// URL of the web conversion event.
    /// </summary>
    std::string getEventSourceUrl() const;
    void setEventSourceUrl(std::string value);

    /// <summary>
    /// When action_source is web or offline, it defines whether the user has opted out of tracking for web conversion events. While when action_source is app_android or app_ios, it defines whether the user has enabled Limit Ad Tracking on their iOS device, or opted out of Ads Personalization on their Android device.
    /// </summary>
    bool isOptOut() const;
    void setOptOut(bool value);

    /// <summary>
    /// The third party partner name responsible to send the event to Conversions API on behalf of the advertiser. The naming convention is \&quot;ss-partnername\&quot; lowercase. E.g ‘ss-shopify’
    /// </summary>
    std::string getPartnerName() const;
    void setPartnerName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    ConversionEventsUserData getUserData() const;
    void setUserData(ConversionEventsUserData value);

    /// <summary>
    /// 
    /// </summary>
    ConversionEvents_data_inner_custom_data getCustomData() const;
    void setCustomData(ConversionEvents_data_inner_custom_data value);

    /// <summary>
    /// The app store app ID.
    /// </summary>
    std::string getAppId() const;
    void setAppId(std::string value);

    /// <summary>
    /// Name of the app.
    /// </summary>
    std::string getAppName() const;
    void setAppName(std::string value);

    /// <summary>
    /// Version of the app.
    /// </summary>
    std::string getAppVersion() const;
    void setAppVersion(std::string value);

    /// <summary>
    /// Brand of the user device.
    /// </summary>
    std::string getDeviceBrand() const;
    void setDeviceBrand(std::string value);

    /// <summary>
    /// User device&#39;s mobile carrier.
    /// </summary>
    std::string getDeviceCarrier() const;
    void setDeviceCarrier(std::string value);

    /// <summary>
    /// Model of the user device.
    /// </summary>
    std::string getDeviceModel() const;
    void setDeviceModel(std::string value);

    /// <summary>
    /// Type of the user device.
    /// </summary>
    std::string getDeviceType() const;
    void setDeviceType(std::string value);

    /// <summary>
    /// Version of the device operating system.
    /// </summary>
    std::string getOsVersion() const;
    void setOsVersion(std::string value);

    /// <summary>
    /// Whether the event occurred when the user device was connected to wifi.
    /// </summary>
    bool isWifi() const;
    void setWifi(bool value);

    /// <summary>
    /// Two-character ISO-639-1 language code indicating the user&#39;s language.
    /// </summary>
    std::string getLanguage() const;
    void setLanguage(std::string value);

protected:
    std::string m_Event_name = "";
    std::string m_Action_source = "";
    int64_t m_Event_time = 0L;
    std::string m_Event_id = "";
    std::string m_Event_source_url = "";
    bool m_Opt_out = false;
    std::string m_Partner_name = "";
    ConversionEventsUserData m_User_data;
    ConversionEvents_data_inner_custom_data m_Custom_data;
    std::string m_App_id = "";
    std::string m_App_name = "";
    std::string m_App_version = "";
    std::string m_Device_brand = "";
    std::string m_Device_carrier = "";
    std::string m_Device_model = "";
    std::string m_Device_type = "";
    std::string m_Os_version = "";
    bool m_Wifi = false;
    std::string m_Language = "";
};

std::vector<ConversionEvents_data_inner> createConversionEvents_data_innerVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ConversionEvents_data_inner>(const ConversionEvents_data_inner& val) {
    return val.toPropertyTree();
}

template<>
inline ConversionEvents_data_inner fromPt<ConversionEvents_data_inner>(const boost::property_tree::ptree& pt) {
    ConversionEvents_data_inner ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ConversionEvents_data_inner_H_ */
