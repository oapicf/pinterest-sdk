/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PinMediaSourceImageBase64.h
 *
 * Base64-encoded image media source
 */

#ifndef PinMediaSourceImageBase64_H_
#define PinMediaSourceImageBase64_H_



#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Base64-encoded image media source
/// </summary>
class  PinMediaSourceImageBase64 
{
public:
    PinMediaSourceImageBase64() = default;
    explicit PinMediaSourceImageBase64(boost::property_tree::ptree const& pt);
    virtual ~PinMediaSourceImageBase64() = default;

    PinMediaSourceImageBase64(const PinMediaSourceImageBase64& other) = default; // copy constructor
    PinMediaSourceImageBase64(PinMediaSourceImageBase64&& other) noexcept = default; // move constructor

    PinMediaSourceImageBase64& operator=(const PinMediaSourceImageBase64& other) = default; // copy assignment
    PinMediaSourceImageBase64& operator=(PinMediaSourceImageBase64&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// PinMediaSourceImageBase64 members

    /// <summary>
    /// 
    /// </summary>
    std::string getSourceType() const;
    void setSourceType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getContentType() const;
    void setContentType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getData() const;
    void setData(std::string value);

    /// <summary>
    /// Set the parameter to false to create the new simplified Pin instead of the standard pin. Currently the field is only available to a list of beta users.
    /// </summary>
    bool isIsStandard() const;
    void setIsStandard(bool value);

protected:
    std::string m_Source_type = "";
    std::string m_Content_type = "";
    std::string m_Data = "";
    bool m_Is_standard = true;
};

std::vector<PinMediaSourceImageBase64> createPinMediaSourceImageBase64VectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<PinMediaSourceImageBase64>(const PinMediaSourceImageBase64& val) {
    return val.toPropertyTree();
}

template<>
inline PinMediaSourceImageBase64 fromPt<PinMediaSourceImageBase64>(const boost::property_tree::ptree& pt) {
    PinMediaSourceImageBase64 ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* PinMediaSourceImageBase64_H_ */
