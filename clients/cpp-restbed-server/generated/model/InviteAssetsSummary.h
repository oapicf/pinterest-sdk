/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * InviteAssetsSummary.h
 *
 * Ad accounts and profiles the member/partner will be granted access to with this invite/request.
 */

#ifndef InviteAssetsSummary_H_
#define InviteAssetsSummary_H_



#include "InviteAssetsSummary_profiles_inner.h"
#include "InviteAssetsSummary_ad_accounts_inner.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Ad accounts and profiles the member/partner will be granted access to with this invite/request.
/// </summary>
class  InviteAssetsSummary 
{
public:
    InviteAssetsSummary() = default;
    explicit InviteAssetsSummary(boost::property_tree::ptree const& pt);
    virtual ~InviteAssetsSummary() = default;

    InviteAssetsSummary(const InviteAssetsSummary& other) = default; // copy constructor
    InviteAssetsSummary(InviteAssetsSummary&& other) noexcept = default; // move constructor

    InviteAssetsSummary& operator=(const InviteAssetsSummary& other) = default; // copy assignment
    InviteAssetsSummary& operator=(InviteAssetsSummary&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// InviteAssetsSummary members

    /// <summary>
    /// List of ad account IDs and respective permission levels that will be assigned.
    /// </summary>
    std::vector<InviteAssetsSummary_ad_accounts_inner> getAdAccounts() const;
    void setAdAccounts(std::vector<InviteAssetsSummary_ad_accounts_inner> value);

    /// <summary>
    /// List of profile IDs and respective permission levels that will be assigned.
    /// </summary>
    std::vector<InviteAssetsSummary_profiles_inner> getProfiles() const;
    void setProfiles(std::vector<InviteAssetsSummary_profiles_inner> value);

protected:
    std::vector<InviteAssetsSummary_ad_accounts_inner> m_Ad_accounts;
    std::vector<InviteAssetsSummary_profiles_inner> m_Profiles;
};

std::vector<InviteAssetsSummary> createInviteAssetsSummaryVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<InviteAssetsSummary>(const InviteAssetsSummary& val) {
    return val.toPropertyTree();
}

template<>
inline InviteAssetsSummary fromPt<InviteAssetsSummary>(const boost::property_tree::ptree& pt) {
    InviteAssetsSummary ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* InviteAssetsSummary_H_ */
