/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdvancedAuctionItemsGetRecord.h
 *
 * Object uniquely identifying a retail catalog item
 */

#ifndef AdvancedAuctionItemsGetRecord_H_
#define AdvancedAuctionItemsGetRecord_H_



#include "Country.h"
#include <string>
#include "Language.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "AdvancedAuctionKey.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Object uniquely identifying a retail catalog item
/// </summary>
class  AdvancedAuctionItemsGetRecord : public AdvancedAuctionKey
{
public:
    AdvancedAuctionItemsGetRecord() = default;
    explicit AdvancedAuctionItemsGetRecord(boost::property_tree::ptree const& pt);
    virtual ~AdvancedAuctionItemsGetRecord() = default;

    AdvancedAuctionItemsGetRecord(const AdvancedAuctionItemsGetRecord& other) = default; // copy constructor
    AdvancedAuctionItemsGetRecord(AdvancedAuctionItemsGetRecord&& other) noexcept = default; // move constructor

    AdvancedAuctionItemsGetRecord& operator=(const AdvancedAuctionItemsGetRecord& other) = default; // copy assignment
    AdvancedAuctionItemsGetRecord& operator=(AdvancedAuctionItemsGetRecord&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AdvancedAuctionItemsGetRecord members

    /// <summary>
    /// The catalog retail item id in the merchant namespace
    /// </summary>
    std::string getItemId() const;
    void setItemId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    Country getCountry() const;
    void setCountry(Country value);

    /// <summary>
    /// 
    /// </summary>
    Language getLanguage() const;
    void setLanguage(Language value);

protected:
    std::string m_Item_id = "";
    Country m_Country = Country{};
    Language m_Language = Language{};
};

std::vector<AdvancedAuctionItemsGetRecord> createAdvancedAuctionItemsGetRecordVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AdvancedAuctionItemsGetRecord>(const AdvancedAuctionItemsGetRecord& val) {
    return val.toPropertyTree();
}

template<>
inline AdvancedAuctionItemsGetRecord fromPt<AdvancedAuctionItemsGetRecord>(const boost::property_tree::ptree& pt) {
    AdvancedAuctionItemsGetRecord ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AdvancedAuctionItemsGetRecord_H_ */
