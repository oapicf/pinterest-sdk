/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdsAnalyticsCreateAsyncRequest.h
 *
 * 
 */

#ifndef AdsAnalyticsCreateAsyncRequest_H_
#define AdsAnalyticsCreateAsyncRequest_H_



#include "ConversionReportTimeType.h"
#include "ConversionReportAttributionType.h"
#include <string>
#include "PinPromotionSummaryStatus.h"
#include "ReportingColumnAsync.h"
#include "MetricsReportingLevel.h"
#include <vector>
#include "AdsAnalyticsMetricsFilter.h"
#include "Granularity.h"
#include "AdsAnalyticsTargetingType.h"
#include "ProductGroupSummaryStatus.h"
#include "CampaignSummaryStatus.h"
#include "DataOutputFormat.h"
#include "ObjectiveType.h"
#include "AdGroupSummaryStatus.h"
#include "ConversionAttributionWindowDays.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  AdsAnalyticsCreateAsyncRequest 
{
public:
    AdsAnalyticsCreateAsyncRequest() = default;
    explicit AdsAnalyticsCreateAsyncRequest(boost::property_tree::ptree const& pt);
    virtual ~AdsAnalyticsCreateAsyncRequest() = default;

    AdsAnalyticsCreateAsyncRequest(const AdsAnalyticsCreateAsyncRequest& other) = default; // copy constructor
    AdsAnalyticsCreateAsyncRequest(AdsAnalyticsCreateAsyncRequest&& other) noexcept = default; // move constructor

    AdsAnalyticsCreateAsyncRequest& operator=(const AdsAnalyticsCreateAsyncRequest& other) = default; // copy assignment
    AdsAnalyticsCreateAsyncRequest& operator=(AdsAnalyticsCreateAsyncRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AdsAnalyticsCreateAsyncRequest members

    /// <summary>
    /// Metric report start date (UTC). Format: YYYY-MM-DD
    /// </summary>
    std::string getStartDate() const;
    void setStartDate(std::string value);

    /// <summary>
    /// Metric report end date (UTC). Format: YYYY-MM-DD
    /// </summary>
    std::string getEndDate() const;
    void setEndDate(std::string value);

    /// <summary>
    /// TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
    /// </summary>
    Granularity getGranularity() const;
    void setGranularity(Granularity value);

    /// <summary>
    /// Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
    /// </summary>
    ConversionAttributionWindowDays getClickWindowDays() const;
    void setClickWindowDays(ConversionAttributionWindowDays value);

    /// <summary>
    /// Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
    /// </summary>
    ConversionAttributionWindowDays getEngagementWindowDays() const;
    void setEngagementWindowDays(ConversionAttributionWindowDays value);

    /// <summary>
    /// Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
    /// </summary>
    ConversionAttributionWindowDays getViewWindowDays() const;
    void setViewWindowDays(ConversionAttributionWindowDays value);

    /// <summary>
    /// The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
    /// </summary>
    ConversionReportTimeType getConversionReportTime() const;
    void setConversionReportTime(ConversionReportTimeType value);

    /// <summary>
    /// List of types of attribution for the conversion report
    /// </summary>
    std::vector<ConversionReportAttributionType> getAttributionTypes() const;
    void setAttributionTypes(std::vector<ConversionReportAttributionType> value);

    /// <summary>
    /// List of campaign ids
    /// </summary>
    std::vector<std::string> getCampaignIds() const;
    void setCampaignIds(std::vector<std::string> value);

    /// <summary>
    /// List of status values for filtering
    /// </summary>
    std::vector<CampaignSummaryStatus> getCampaignStatuses() const;
    void setCampaignStatuses(std::vector<CampaignSummaryStatus> value);

    /// <summary>
    /// List of values for filtering. [\&quot;WEB_SESSIONS\&quot;] in BETA.
    /// </summary>
    std::vector<ObjectiveType> getCampaignObjectiveTypes() const;
    void setCampaignObjectiveTypes(std::vector<ObjectiveType> value);

    /// <summary>
    /// List of ad group ids
    /// </summary>
    std::vector<std::string> getAdGroupIds() const;
    void setAdGroupIds(std::vector<std::string> value);

    /// <summary>
    /// List of values for filtering
    /// </summary>
    std::vector<AdGroupSummaryStatus> getAdGroupStatuses() const;
    void setAdGroupStatuses(std::vector<AdGroupSummaryStatus> value);

    /// <summary>
    /// List of ad ids [This parameter is no supported for Product Item Level Reports]
    /// </summary>
    std::vector<std::string> getAdIds() const;
    void setAdIds(std::vector<std::string> value);

    /// <summary>
    /// List of values for filtering [This parameter is not supported for Product Item Level Reports]
    /// </summary>
    std::vector<PinPromotionSummaryStatus> getAdStatuses() const;
    void setAdStatuses(std::vector<PinPromotionSummaryStatus> value);

    /// <summary>
    /// List of product group ids
    /// </summary>
    std::vector<std::string> getProductGroupIds() const;
    void setProductGroupIds(std::vector<std::string> value);

    /// <summary>
    /// List of values for filtering
    /// </summary>
    std::vector<ProductGroupSummaryStatus> getProductGroupStatuses() const;
    void setProductGroupStatuses(std::vector<ProductGroupSummaryStatus> value);

    /// <summary>
    /// List of product item ids
    /// </summary>
    std::vector<std::string> getProductItemIds() const;
    void setProductItemIds(std::vector<std::string> value);

    /// <summary>
    /// List of targeting types. Requires &#x60;level&#x60; to be a value ending in &#x60;_TARGETING&#x60;. [\&quot;AGE_BUCKET_AND_GENDER\&quot;] is in BETA and not yet available to all users.
    /// </summary>
    std::vector<AdsAnalyticsTargetingType> getTargetingTypes() const;
    void setTargetingTypes(std::vector<AdsAnalyticsTargetingType> value);

    /// <summary>
    /// List of metrics filters
    /// </summary>
    std::vector<AdsAnalyticsMetricsFilter> getMetricsFilters() const;
    void setMetricsFilters(std::vector<AdsAnalyticsMetricsFilter> value);

    /// <summary>
    /// Metric and entity columns. Pin promotion and ad related columns are not supported for the Product Item level reports.
    /// </summary>
    std::vector<ReportingColumnAsync> getColumns() const;
    void setColumns(std::vector<ReportingColumnAsync> value);

    /// <summary>
    /// Level of the report
    /// </summary>
    MetricsReportingLevel getLevel() const;
    void setLevel(MetricsReportingLevel value);

    /// <summary>
    /// Specification for formatting the report data. Reports in JSON will not zero-fill metrics, whereas reports in CSV will. Both report formats will omit rows where all the columns are equal to 0.
    /// </summary>
    DataOutputFormat getReportFormat() const;
    void setReportFormat(DataOutputFormat value);

    /// <summary>
    /// Whether to first sort the report by date or by entity ID of the reporting entity level. Date will be used as the first level key for JSON reports that use BY_DATE. BY_DATE is recommended for large requests.
    /// </summary>
    std::string getPrimarySort() const;
    void setPrimarySort(std::string value);

    /// <summary>
    /// Which hour of the start date to begin the report. The entire day will be included if no start hour is provided. Only allowed for hourly reports.
    /// </summary>
    int32_t getStartHour() const;
    void setStartHour(int32_t value);

    /// <summary>
    /// Which hour of the end date to stop the report (inclusive). For example, with an end_date of &#39;2020-01-01&#39; and end_hour of &#39;15&#39;, the report will contain metrics up to &#39;2020-01-01 14:59:59&#39;. The entire day will be included if no end hour is provided. Only allowed for hourly reports.
    /// </summary>
    int32_t getEndHour() const;
    void setEndHour(int32_t value);

protected:
    std::string m_Start_date = "";
    std::string m_End_date = "";
    Granularity m_Granularity = "";
    ConversionAttributionWindowDays m_Click_window_days = 30;
    ConversionAttributionWindowDays m_Engagement_window_days = 30;
    ConversionAttributionWindowDays m_View_window_days = 1;
    ConversionReportTimeType m_Conversion_report_time = "TIME_OF_AD_ACTION";
    std::vector<ConversionReportAttributionType> m_Attribution_types;
    std::vector<std::string> m_Campaign_ids;
    std::vector<CampaignSummaryStatus> m_Campaign_statuses;
    std::vector<ObjectiveType> m_Campaign_objective_types;
    std::vector<std::string> m_Ad_group_ids;
    std::vector<AdGroupSummaryStatus> m_Ad_group_statuses;
    std::vector<std::string> m_Ad_ids;
    std::vector<PinPromotionSummaryStatus> m_Ad_statuses;
    std::vector<std::string> m_Product_group_ids;
    std::vector<ProductGroupSummaryStatus> m_Product_group_statuses;
    std::vector<std::string> m_Product_item_ids;
    std::vector<AdsAnalyticsTargetingType> m_Targeting_types;
    std::vector<AdsAnalyticsMetricsFilter> m_Metrics_filters;
    std::vector<ReportingColumnAsync> m_Columns;
    MetricsReportingLevel m_Level = "";
    DataOutputFormat m_Report_format = "JSON";
    std::string m_Primary_sort = "";
    int32_t m_Start_hour = 0;
    int32_t m_End_hour = 0;
};

std::vector<AdsAnalyticsCreateAsyncRequest> createAdsAnalyticsCreateAsyncRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AdsAnalyticsCreateAsyncRequest>(const AdsAnalyticsCreateAsyncRequest& val) {
    return val.toPropertyTree();
}

template<>
inline AdsAnalyticsCreateAsyncRequest fromPt<AdsAnalyticsCreateAsyncRequest>(const boost::property_tree::ptree& pt) {
    AdsAnalyticsCreateAsyncRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AdsAnalyticsCreateAsyncRequest_H_ */
