/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BulkDownloadRequest.h
 *
 * Ad entities to get in bulk request.
 */

#ifndef BulkDownloadRequest_H_
#define BulkDownloadRequest_H_



#include "BulkEntityType.h"
#include <string>
#include "BulkOutputFormat.h"
#include "BulkDownloadRequest_campaign_filter.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Ad entities to get in bulk request.
/// </summary>
class  BulkDownloadRequest 
{
public:
    BulkDownloadRequest() = default;
    explicit BulkDownloadRequest(boost::property_tree::ptree const& pt);
    virtual ~BulkDownloadRequest() = default;

    BulkDownloadRequest(const BulkDownloadRequest& other) = default; // copy constructor
    BulkDownloadRequest(BulkDownloadRequest&& other) noexcept = default; // move constructor

    BulkDownloadRequest& operator=(const BulkDownloadRequest& other) = default; // copy assignment
    BulkDownloadRequest& operator=(BulkDownloadRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// BulkDownloadRequest members

    /// <summary>
    /// All entity types specified will be downloaded. Fewer types result in faster downloads.
    /// </summary>
    std::vector<BulkEntityType> getEntityTypes() const;
    void setEntityTypes(std::vector<BulkEntityType> value);

    /// <summary>
    /// All entities specified by these IDs as well as their children and grandchildren will be downloaded if the entity type is one of the types requested to be downloaded.
    /// </summary>
    std::vector<std::string> getEntityIds() const;
    void setEntityIds(std::vector<std::string> value);

    /// <summary>
    /// Unix UTC timestamp to retrieve all entities that have changed since this time.
    /// </summary>
    std::string getUpdatedSince() const;
    void setUpdatedSince(std::string value);

    /// <summary>
    /// 
    /// </summary>
    BulkDownloadRequest_campaign_filter getCampaignFilter() const;
    void setCampaignFilter(BulkDownloadRequest_campaign_filter value);

    /// <summary>
    /// 
    /// </summary>
    BulkOutputFormat getOutputFormat() const;
    void setOutputFormat(BulkOutputFormat value);

protected:
    std::vector<BulkEntityType> m_Entity_types;
    std::vector<std::string> m_Entity_ids;
    std::string m_Updated_since = "";
    BulkDownloadRequest_campaign_filter m_Campaign_filter;
    BulkOutputFormat m_Output_format = "JSON";
};

std::vector<BulkDownloadRequest> createBulkDownloadRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<BulkDownloadRequest>(const BulkDownloadRequest& val) {
    return val.toPropertyTree();
}

template<>
inline BulkDownloadRequest fromPt<BulkDownloadRequest>(const boost::property_tree::ptree& pt) {
    BulkDownloadRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* BulkDownloadRequest_H_ */
