/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ItemResponse_anyOf.h
 *
 * 
 */

#ifndef ItemResponse_anyOf_H_
#define ItemResponse_anyOf_H_



#include "CatalogsCreativeAssetsItemResponse.h"
#include "CatalogsCreativeAssetsAttributes.h"
#include <string>
#include "CatalogsHotelItemResponse.h"
#include "CatalogsRetailItemResponse.h"
#include "Pin.h"
#include <vector>
#include "CatalogsType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "CatalogsRetailItemResponse.h"
#include "CatalogsHotelItemResponse.h"
#include "CatalogsCreativeAssetsItemResponse.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ItemResponse_anyOf : public CatalogsRetailItemResponse, public CatalogsHotelItemResponse, public CatalogsCreativeAssetsItemResponse
{
public:
    ItemResponse_anyOf() = default;
    explicit ItemResponse_anyOf(boost::property_tree::ptree const& pt);
    virtual ~ItemResponse_anyOf() = default;

    ItemResponse_anyOf(const ItemResponse_anyOf& other) = default; // copy constructor
    ItemResponse_anyOf(ItemResponse_anyOf&& other) noexcept = default; // move constructor

    ItemResponse_anyOf& operator=(const ItemResponse_anyOf& other) = default; // copy assignment
    ItemResponse_anyOf& operator=(ItemResponse_anyOf&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ItemResponse_anyOf members

    /// <summary>
    /// 
    /// </summary>
    CatalogsType getCatalogType() const;
    void setCatalogType(CatalogsType value);

    /// <summary>
    /// The catalog retail item id in the merchant namespace
    /// </summary>
    std::string getItemId() const;
    void setItemId(std::string value);

    /// <summary>
    /// The pins mapped to the item
    /// </summary>
    std::vector<Pin> getPins() const;
    void setPins(std::vector<Pin> value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsCreativeAssetsAttributes getAttributes() const;
    void setAttributes(CatalogsCreativeAssetsAttributes value);

    /// <summary>
    /// The catalog hotel id in the merchant namespace
    /// </summary>
    std::string getHotelId() const;
    void setHotelId(std::string value);

    /// <summary>
    /// The catalog creative assets id in the merchant namespace
    /// </summary>
    std::string getCreativeAssetsId() const;
    void setCreativeAssetsId(std::string value);

protected:
    CatalogsType m_Catalog_type = CatalogsType{};
    std::string m_Item_id = "";
    std::vector<Pin> m_Pins;
    CatalogsCreativeAssetsAttributes m_Attributes;
    std::string m_Hotel_id = "";
    std::string m_Creative_assets_id = "";
};

std::vector<ItemResponse_anyOf> createItemResponse_anyOfVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ItemResponse_anyOf>(const ItemResponse_anyOf& val) {
    return val.toPropertyTree();
}

template<>
inline ItemResponse_anyOf fromPt<ItemResponse_anyOf>(const boost::property_tree::ptree& pt) {
    ItemResponse_anyOf ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ItemResponse_anyOf_H_ */
