/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * InviteExceptionResponse.h
 *
 * An exception object if there is an error performing the action. Will only be provided if there is an error.
 */

#ifndef InviteExceptionResponse_H_
#define InviteExceptionResponse_H_



#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// An exception object if there is an error performing the action. Will only be provided if there is an error.
/// </summary>
class  InviteExceptionResponse 
{
public:
    InviteExceptionResponse() = default;
    explicit InviteExceptionResponse(boost::property_tree::ptree const& pt);
    virtual ~InviteExceptionResponse() = default;

    InviteExceptionResponse(const InviteExceptionResponse& other) = default; // copy constructor
    InviteExceptionResponse(InviteExceptionResponse&& other) noexcept = default; // move constructor

    InviteExceptionResponse& operator=(const InviteExceptionResponse& other) = default; // copy assignment
    InviteExceptionResponse& operator=(InviteExceptionResponse&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// InviteExceptionResponse members

    /// <summary>
    /// Unique identifier of the invite/request.
    /// </summary>
    std::string getInviteOrRequestId() const;
    void setInviteOrRequestId(std::string value);

    /// <summary>
    /// Error code associated with the error in performing the action on the invite/request.
    /// </summary>
    int32_t getCode() const;
    void setCode(int32_t value);

    /// <summary>
    /// Error message associated with the error in performing the action on the invite/request.
    /// </summary>
    std::string getMessage() const;
    void setMessage(std::string value);

    /// <summary>
    /// A list of users&#39; usernames or emails OR a list of partner ids that caused the error.
    /// </summary>
    std::vector<std::string> getUsersOrPartnerIds() const;
    void setUsersOrPartnerIds(std::vector<std::string> value);

protected:
    std::string m_Invite_or_request_id = "";
    int32_t m_Code = 0;
    std::string m_Message = "";
    std::vector<std::string> m_Users_or_partner_ids;
};

std::vector<InviteExceptionResponse> createInviteExceptionResponseVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<InviteExceptionResponse>(const InviteExceptionResponse& val) {
    return val.toPropertyTree();
}

template<>
inline InviteExceptionResponse fromPt<InviteExceptionResponse>(const boost::property_tree::ptree& pt) {
    InviteExceptionResponse ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* InviteExceptionResponse_H_ */
