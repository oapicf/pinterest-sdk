/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ConversionTagResponse.h
 *
 * 
 */

#ifndef ConversionTagResponse_H_
#define ConversionTagResponse_H_



#include "ConversionTagConfigs.h"
#include "EnhancedMatchStatusType.h"
#include "EntityStatus.h"
#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "ConversionTagCommon.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ConversionTagResponse : public ConversionTagCommon
{
public:
    ConversionTagResponse() = default;
    explicit ConversionTagResponse(boost::property_tree::ptree const& pt);
    virtual ~ConversionTagResponse() = default;

    ConversionTagResponse(const ConversionTagResponse& other) = default; // copy constructor
    ConversionTagResponse(ConversionTagResponse&& other) noexcept = default; // move constructor

    ConversionTagResponse& operator=(const ConversionTagResponse& other) = default; // copy assignment
    ConversionTagResponse& operator=(ConversionTagResponse&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ConversionTagResponse members

    /// <summary>
    /// Ad account ID.
    /// </summary>
    std::string getAdAccountId() const;
    void setAdAccountId(std::string value);

    /// <summary>
    /// Tag code snippet.
    /// </summary>
    std::string getCodeSnippet() const;
    void setCodeSnippet(std::string value);

    /// <summary>
    /// 
    /// </summary>
    EnhancedMatchStatusType getEnhancedMatchStatus() const;
    void setEnhancedMatchStatus(EnhancedMatchStatusType value);

    /// <summary>
    /// Tag ID.
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// Time for the last event fired.
    /// </summary>
    double getLastFiredTimeMs() const;
    void setLastFiredTimeMs(double value);

    /// <summary>
    /// Conversion tag name.
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    EntityStatus getStatus() const;
    void setStatus(EntityStatus value);

    /// <summary>
    /// Version number.
    /// </summary>
    std::string getVersion() const;
    void setVersion(std::string value);

    /// <summary>
    /// 
    /// </summary>
    ConversionTagConfigs getConfigs() const;
    void setConfigs(ConversionTagConfigs value);

protected:
    std::string m_Ad_account_id = "";
    std::string m_Code_snippet = "";
    EnhancedMatchStatusType m_Enhanced_match_status = EnhancedMatchStatusType{};
    std::string m_Id = "";
    double m_Last_fired_time_ms = 0.0;
    std::string m_Name = "";
    EntityStatus m_Status = EntityStatus{};
    std::string m_Version = "";
    ConversionTagConfigs m_Configs;
};

std::vector<ConversionTagResponse> createConversionTagResponseVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ConversionTagResponse>(const ConversionTagResponse& val) {
    return val.toPropertyTree();
}

template<>
inline ConversionTagResponse fromPt<ConversionTagResponse>(const boost::property_tree::ptree& pt) {
    ConversionTagResponse ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ConversionTagResponse_H_ */
