/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AnalyticsDailyMetrics.h
 *
 * 
 */

#ifndef AnalyticsDailyMetrics_H_
#define AnalyticsDailyMetrics_H_



#include "DataStatus.h"
#include <string>
#include <map>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  AnalyticsDailyMetrics 
{
public:
    AnalyticsDailyMetrics() = default;
    explicit AnalyticsDailyMetrics(boost::property_tree::ptree const& pt);
    virtual ~AnalyticsDailyMetrics() = default;

    AnalyticsDailyMetrics(const AnalyticsDailyMetrics& other) = default; // copy constructor
    AnalyticsDailyMetrics(AnalyticsDailyMetrics&& other) noexcept = default; // move constructor

    AnalyticsDailyMetrics& operator=(const AnalyticsDailyMetrics& other) = default; // copy assignment
    AnalyticsDailyMetrics& operator=(AnalyticsDailyMetrics&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AnalyticsDailyMetrics members

    /// <summary>
    /// 
    /// </summary>
    DataStatus getDataStatus() const;
    void setDataStatus(DataStatus value);

    /// <summary>
    /// Metrics date (UTC): YYYY-MM-DD.
    /// </summary>
    std::string getDate() const;
    void setDate(std::string value);

    /// <summary>
    /// The metric name and daily value for each requested metric
    /// </summary>
    std::map<std::string, double> getMetrics() const;
    void setMetrics(std::map<std::string, double> value);

protected:
    DataStatus m_Data_status = DataStatus{};
    std::string m_date = "";
    std::map<std::string, double> m_Metrics;
};

std::vector<AnalyticsDailyMetrics> createAnalyticsDailyMetricsVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AnalyticsDailyMetrics>(const AnalyticsDailyMetrics& val) {
    return val.toPropertyTree();
}

template<>
inline AnalyticsDailyMetrics fromPt<AnalyticsDailyMetrics>(const boost::property_tree::ptree& pt) {
    AnalyticsDailyMetrics ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AnalyticsDailyMetrics_H_ */
