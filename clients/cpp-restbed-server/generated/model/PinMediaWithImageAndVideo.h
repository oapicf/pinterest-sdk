/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PinMediaWithImageAndVideo.h
 *
 * Pin with a mix of images and videos.
 */

#ifndef PinMediaWithImageAndVideo_H_
#define PinMediaWithImageAndVideo_H_



#include "PinMedia.h"
#include <string>
#include <vector>
#include "PinMediaMetadata.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "PinMedia.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Pin with a mix of images and videos.
/// </summary>
class  PinMediaWithImageAndVideo : public PinMedia
{
public:
    PinMediaWithImageAndVideo() = default;
    explicit PinMediaWithImageAndVideo(boost::property_tree::ptree const& pt);
    virtual ~PinMediaWithImageAndVideo() = default;

    PinMediaWithImageAndVideo(const PinMediaWithImageAndVideo& other) = default; // copy constructor
    PinMediaWithImageAndVideo(PinMediaWithImageAndVideo&& other) noexcept = default; // move constructor

    PinMediaWithImageAndVideo& operator=(const PinMediaWithImageAndVideo& other) = default; // copy assignment
    PinMediaWithImageAndVideo& operator=(PinMediaWithImageAndVideo&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// PinMediaWithImageAndVideo members

    /// <summary>
    /// 
    /// </summary>
    std::string getMediaType() const;
    void setMediaType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<PinMediaMetadata> getItems() const;
    void setItems(std::vector<PinMediaMetadata> value);

protected:
    std::string m_Media_type = "";
    std::vector<PinMediaMetadata> m_Items;
};

std::vector<PinMediaWithImageAndVideo> createPinMediaWithImageAndVideoVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<PinMediaWithImageAndVideo>(const PinMediaWithImageAndVideo& val) {
    return val.toPropertyTree();
}

template<>
inline PinMediaWithImageAndVideo fromPt<PinMediaWithImageAndVideo>(const boost::property_tree::ptree& pt) {
    PinMediaWithImageAndVideo ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* PinMediaWithImageAndVideo_H_ */
