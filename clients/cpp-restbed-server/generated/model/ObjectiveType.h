/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ObjectiveType.h
 *
 * Campaign objective type. If set as one of [\&quot;AWARENESS\&quot;, \&quot;CONSIDERATION\&quot;, \&quot;WEB_CONVERSION\&quot;, \&quot;CATALOG_SALES\&quot;, \&quot;VIDEO_COMPLETION\&quot;] the campaign is considered as a Campaign Budget Optimization (CBO) campaign, meaning budget needs to be set at the campaign level rather than at the ad group level. [\&quot;WEB_SESSIONS\&quot;] is DEPRECATED. For update, only draft campaigns may update objective type.
 */

#ifndef ObjectiveType_H_
#define ObjectiveType_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Campaign objective type. If set as one of [\&quot;AWARENESS\&quot;, \&quot;CONSIDERATION\&quot;, \&quot;WEB_CONVERSION\&quot;, \&quot;CATALOG_SALES\&quot;, \&quot;VIDEO_COMPLETION\&quot;] the campaign is considered as a Campaign Budget Optimization (CBO) campaign, meaning budget needs to be set at the campaign level rather than at the ad group level. [\&quot;WEB_SESSIONS\&quot;] is DEPRECATED. For update, only draft campaigns may update objective type.
/// </summary>
class  ObjectiveType 
{
public:
    ObjectiveType() = default;
    explicit ObjectiveType(boost::property_tree::ptree const& pt);
    virtual ~ObjectiveType() = default;

    ObjectiveType(const ObjectiveType& other) = default; // copy constructor
    ObjectiveType(ObjectiveType&& other) noexcept = default; // move constructor

    ObjectiveType& operator=(const ObjectiveType& other) = default; // copy assignment
    ObjectiveType& operator=(ObjectiveType&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    std::string toString() const;
    void fromString(const std::string& str);

    /////////////////////////////////////////////
    /// ObjectiveType members
    std::string getEnumValue() const;
    void setEnumValue(const std::string& val);

protected:
    std::string m_ObjectiveTypeEnumValue;
};

std::vector<ObjectiveType> createObjectiveTypeVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ObjectiveType>(const ObjectiveType& val) {
    return val.toPropertyTree();
}

template<>
inline ObjectiveType fromPt<ObjectiveType>(const boost::property_tree::ptree& pt) {
    ObjectiveType ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ObjectiveType_H_ */
