/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * LineItem.h
 *
 * 
 */

#ifndef LineItem_H_
#define LineItem_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  LineItem 
{
public:
    LineItem() = default;
    explicit LineItem(boost::property_tree::ptree const& pt);
    virtual ~LineItem() = default;

    LineItem(const LineItem& other) = default; // copy constructor
    LineItem(LineItem&& other) noexcept = default; // move constructor

    LineItem& operator=(const LineItem& other) = default; // copy assignment
    LineItem& operator=(LineItem&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// LineItem members

    /// <summary>
    /// Product brand. For example, \&quot;Parker\&quot;.
    /// </summary>
    std::string getProductBrand() const;
    void setProductBrand(std::string value);

    /// <summary>
    /// Product category. For example, \&quot;Shoes\&quot;.
    /// </summary>
    std::string getProductCategory() const;
    void setProductCategory(std::string value);

    /// <summary>
    /// Product ID. For example, 1414.
    /// </summary>
    int32_t getProductId() const;
    void setProductId(int32_t value);

    /// <summary>
    /// Product name. For example, \&quot;Parker Boots\&quot;.
    /// </summary>
    std::string getProductName() const;
    void setProductName(std::string value);

    /// <summary>
    /// Product price. For example, \&quot;99.99\&quot;.
    /// </summary>
    std::string getProductPrice() const;
    void setProductPrice(std::string value);

    /// <summary>
    /// Product quantity. For example, 2.
    /// </summary>
    int32_t getProductQuantity() const;
    void setProductQuantity(int32_t value);

    /// <summary>
    /// Product variant. For example, \&quot;Red\&quot;.
    /// </summary>
    std::string getProductVariant() const;
    void setProductVariant(std::string value);

    /// <summary>
    /// Product variant ID. For example, \&quot;1414-34832\&quot;.
    /// </summary>
    std::string getProductVariantId() const;
    void setProductVariantId(std::string value);

protected:
    std::string m_Product_brand = "";
    std::string m_Product_category = "";
    int32_t m_Product_id = 0;
    std::string m_Product_name = "";
    std::string m_Product_price = "";
    int32_t m_Product_quantity = 0;
    std::string m_Product_variant = "";
    std::string m_Product_variant_id = "";
};

std::vector<LineItem> createLineItemVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<LineItem>(const LineItem& val) {
    return val.toPropertyTree();
}

template<>
inline LineItem fromPt<LineItem>(const boost::property_tree::ptree& pt) {
    LineItem ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* LineItem_H_ */
