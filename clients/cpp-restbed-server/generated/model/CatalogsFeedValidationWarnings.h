/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsFeedValidationWarnings.h
 *
 * 
 */

#ifndef CatalogsFeedValidationWarnings_H_
#define CatalogsFeedValidationWarnings_H_



#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CatalogsFeedValidationWarnings 
{
public:
    CatalogsFeedValidationWarnings() = default;
    explicit CatalogsFeedValidationWarnings(boost::property_tree::ptree const& pt);
    virtual ~CatalogsFeedValidationWarnings() = default;

    CatalogsFeedValidationWarnings(const CatalogsFeedValidationWarnings& other) = default; // copy constructor
    CatalogsFeedValidationWarnings(CatalogsFeedValidationWarnings&& other) noexcept = default; // move constructor

    CatalogsFeedValidationWarnings& operator=(const CatalogsFeedValidationWarnings& other) = default; // copy assignment
    CatalogsFeedValidationWarnings& operator=(CatalogsFeedValidationWarnings&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsFeedValidationWarnings members

    /// <summary>
    /// Some items have ad links that are formatted incorrectly.
    /// </summary>
    int32_t getADLINKFORMATWARNING() const;
    void setADLINKFORMATWARNING(int32_t value);

    /// <summary>
    /// Some items have ad link URLs that are duplicates of the link URLs for those items.
    /// </summary>
    int32_t getADLINKSAMEASLINK() const;
    void setADLINKSAMEASLINK(int32_t value);

    /// <summary>
    /// The title for some items were truncated because they contain too many characters.
    /// </summary>
    int32_t getTITLELENGTHTOOLONG() const;
    void setTITLELENGTHTOOLONG(int32_t value);

    /// <summary>
    /// The description for some items were truncated because they contain too many characters.
    /// </summary>
    int32_t getDESCRIPTIONLENGTHTOOLONG() const;
    void setDESCRIPTIONLENGTHTOOLONG(int32_t value);

    /// <summary>
    /// Some items have gender values that are formatted incorrectly, which may limit visibility in recommendations, search results and shopping experiences.
    /// </summary>
    int32_t getGENDERINVALID() const;
    void setGENDERINVALID(int32_t value);

    /// <summary>
    /// Some items have age group values that are formatted incorrectly, which may limit visibility in recommendations, search results and shopping experiences.
    /// </summary>
    int32_t getAGEGROUPINVALID() const;
    void setAGEGROUPINVALID(int32_t value);

    /// <summary>
    /// Some items have size type values that are formatted incorrectly, which may limit visibility in recommendations, search results and shopping experiences.
    /// </summary>
    int32_t getSIZETYPEINVALID() const;
    void setSIZETYPEINVALID(int32_t value);

    /// <summary>
    /// Some items have size system values which are not one of the supported size systems.
    /// </summary>
    int32_t getSIZESYSTEMINVALID() const;
    void setSIZESYSTEMINVALID(int32_t value);

    /// <summary>
    /// Some items have an invalid product link which contains invalid UTM tracking paramaters.
    /// </summary>
    int32_t getLINKFORMATWARNING() const;
    void setLINKFORMATWARNING(int32_t value);

    /// <summary>
    /// Some items have sale price values that are higher than the original price of the item.
    /// </summary>
    int32_t getSALESPRICEINVALID() const;
    void setSALESPRICEINVALID(int32_t value);

    /// <summary>
    /// Some items only have 1 or 2 levels of google_product_category values, which may limit visibility in recommendations, search results and shopping experiences.
    /// </summary>
    int32_t getPRODUCTCATEGORYDEPTHWARNING() const;
    void setPRODUCTCATEGORYDEPTHWARNING(int32_t value);

    /// <summary>
    /// Some items have adwords_redirect links that are formatted incorrectly.
    /// </summary>
    int32_t getADWORDSFORMATWARNING() const;
    void setADWORDSFORMATWARNING(int32_t value);

    /// <summary>
    /// Some items have adwords_redirect URLs that are duplicates of the link URLs for those items.
    /// </summary>
    int32_t getADWORDSSAMEASLINK() const;
    void setADWORDSSAMEASLINK(int32_t value);

    /// <summary>
    /// Your feed contains duplicate headers.
    /// </summary>
    int32_t getDUPLICATEHEADERS() const;
    void setDUPLICATEHEADERS(int32_t value);

    /// <summary>
    /// Ingestion completed early because there are no changes to your feed since the last successful update.
    /// </summary>
    int32_t getFETCHSAMESIGNATURE() const;
    void setFETCHSAMESIGNATURE(int32_t value);

    /// <summary>
    /// Some items have additional_image_link URLs that contain too many characters, so those items will not be published.
    /// </summary>
    int32_t getADDITIONALIMAGELINKLENGTHTOOLONG() const;
    void setADDITIONALIMAGELINKLENGTHTOOLONG(int32_t value);

    /// <summary>
    /// Some items have additional_image_link URLs that are formatted incorrectly and will not be published with your items.
    /// </summary>
    int32_t getADDITIONALIMAGELINKWARNING() const;
    void setADDITIONALIMAGELINKWARNING(int32_t value);

    /// <summary>
    /// Some items have image_link URLs that are formatted incorrectly and will not be published with those items.
    /// </summary>
    int32_t getIMAGELINKWARNING() const;
    void setIMAGELINKWARNING(int32_t value);

    /// <summary>
    /// Some items have shipping values that are formatted incorrectly.
    /// </summary>
    int32_t getSHIPPINGINVALID() const;
    void setSHIPPINGINVALID(int32_t value);

    /// <summary>
    /// Some items have tax values that are formatted incorrectly.
    /// </summary>
    int32_t getTAXINVALID() const;
    void setTAXINVALID(int32_t value);

    /// <summary>
    /// Some items have invalid shipping_weight values.
    /// </summary>
    int32_t getSHIPPINGWEIGHTINVALID() const;
    void setSHIPPINGWEIGHTINVALID(int32_t value);

    /// <summary>
    /// Some items have expiration_date values that are formatted incorrectly, those items will be published without an expiration date.
    /// </summary>
    int32_t getEXPIRATIONDATEINVALID() const;
    void setEXPIRATIONDATEINVALID(int32_t value);

    /// <summary>
    /// Some items have availability_date values that are formatted incorrectly, those items will be published without an availability date.
    /// </summary>
    int32_t getAVAILABILITYDATEINVALID() const;
    void setAVAILABILITYDATEINVALID(int32_t value);

    /// <summary>
    /// Some items have sale_price_effective_date values that are formatted incorrectly, those items will be published without a sale date.
    /// </summary>
    int32_t getSALEDATEINVALID() const;
    void setSALEDATEINVALID(int32_t value);

    /// <summary>
    /// Some items have weight_unit values that are formatted incorrectly, those items will be published without a weight unit.
    /// </summary>
    int32_t getWEIGHTUNITINVALID() const;
    void setWEIGHTUNITINVALID(int32_t value);

    /// <summary>
    /// Some items have is_bundle values that are formatted incorrectly, those items will be published without being bundled with other products.
    /// </summary>
    int32_t getISBUNDLEINVALID() const;
    void setISBUNDLEINVALID(int32_t value);

    /// <summary>
    /// Some items have updated_time values thate are formatted incorrectly, those items will be published without an updated time.
    /// </summary>
    int32_t getUPDATEDTIMEINVALID() const;
    void setUPDATEDTIMEINVALID(int32_t value);

    /// <summary>
    /// Some items have custom_label values that are too long, those items will be published without that custom label.
    /// </summary>
    int32_t getCUSTOMLABELLENGTHTOOLONG() const;
    void setCUSTOMLABELLENGTHTOOLONG(int32_t value);

    /// <summary>
    /// Some items have product_type values that are too long, those items will be published without that product type.
    /// </summary>
    int32_t getPRODUCTTYPELENGTHTOOLONG() const;
    void setPRODUCTTYPELENGTHTOOLONG(int32_t value);

    /// <summary>
    /// Some items have additional_image_link values that exceed the limit for additional images, those items will be published without some of your images.
    /// </summary>
    int32_t getTOOMANYADDITIONALIMAGELINKS() const;
    void setTOOMANYADDITIONALIMAGELINKS(int32_t value);

    /// <summary>
    /// Some items have invalid multipack values.
    /// </summary>
    int32_t getMULTIPACKINVALID() const;
    void setMULTIPACKINVALID(int32_t value);

    /// <summary>
    /// The product count has increased or decreased significantly compared to the last successful ingestion.
    /// </summary>
    int32_t getINDEXEDPRODUCTCOUNTLARGEDELTA() const;
    void setINDEXEDPRODUCTCOUNTLARGEDELTA(int32_t value);

    /// <summary>
    /// Some items include additional_image_links that can&#39;t be found.
    /// </summary>
    int32_t getITEMADDITIONALIMAGEDOWNLOADFAILURE() const;
    void setITEMADDITIONALIMAGEDOWNLOADFAILURE(int32_t value);

    /// <summary>
    /// Some items are missing a google_product_category.
    /// </summary>
    int32_t getOPTIONALPRODUCTCATEGORYMISSING() const;
    void setOPTIONALPRODUCTCATEGORYMISSING(int32_t value);

    /// <summary>
    /// Some items include google_product_category values that are not formatted correctly according to the GPC taxonomy.
    /// </summary>
    int32_t getOPTIONALPRODUCTCATEGORYINVALID() const;
    void setOPTIONALPRODUCTCATEGORYINVALID(int32_t value);

    /// <summary>
    /// Some items are missing a condition value, which may limit visibility in recommendations, search results and shopping experiences.
    /// </summary>
    int32_t getOPTIONALCONDITIONMISSING() const;
    void setOPTIONALCONDITIONMISSING(int32_t value);

    /// <summary>
    /// Some items include condition values that are formatted incorrectly, which may limit visibility in recommendations, search results and shopping experiences.
    /// </summary>
    int32_t getOPTIONALCONDITIONINVALID() const;
    void setOPTIONALCONDITIONINVALID(int32_t value);

    /// <summary>
    /// Some items include invalid ios_deep_link values.
    /// </summary>
    int32_t getIOSDEEPLINKINVALID() const;
    void setIOSDEEPLINKINVALID(int32_t value);

    /// <summary>
    /// Some items include invalid android_deep_link.
    /// </summary>
    int32_t getANDROIDDEEPLINKINVALID() const;
    void setANDROIDDEEPLINKINVALID(int32_t value);

    /// <summary>
    /// Some items include utm_source values that are formatted incorrectly and have been automatically corrected.
    /// </summary>
    int32_t getUTMSOURCEAUTOCORRECTED() const;
    void setUTMSOURCEAUTOCORRECTED(int32_t value);

    /// <summary>
    /// Some items include a currency that doesn&#39;t match the usual currency for the location where that product is sold or shipped.
    /// </summary>
    int32_t getCOUNTRYDOESNOTMAPTOCURRENCY() const;
    void setCOUNTRYDOESNOTMAPTOCURRENCY(int32_t value);

    /// <summary>
    /// Some items include min_ad_price values that are formatted incorrectly.
    /// </summary>
    int32_t getMINADPRICEINVALID() const;
    void setMINADPRICEINVALID(int32_t value);

    /// <summary>
    /// Some items include incorrectly formatted GTINs.
    /// </summary>
    int32_t getGTININVALID() const;
    void setGTININVALID(int32_t value);

    /// <summary>
    /// Some items include inconsistent currencies in price fields.
    /// </summary>
    int32_t getINCONSISTENTCURRENCYVALUES() const;
    void setINCONSISTENTCURRENCYVALUES(int32_t value);

    /// <summary>
    /// Some items include sales price that is much lower than the list price.
    /// </summary>
    int32_t getSALESPRICETOOLOW() const;
    void setSALESPRICETOOLOW(int32_t value);

    /// <summary>
    /// Some items include incorrectly formatted shipping_width.
    /// </summary>
    int32_t getSHIPPINGWIDTHINVALID() const;
    void setSHIPPINGWIDTHINVALID(int32_t value);

    /// <summary>
    /// Some items include incorrectly formatted shipping_height.
    /// </summary>
    int32_t getSHIPPINGHEIGHTINVALID() const;
    void setSHIPPINGHEIGHTINVALID(int32_t value);

    /// <summary>
    /// Some items include a sales price that is higher than the list price. The sales price has been defaulted to the list price.
    /// </summary>
    int32_t getSALESPRICETOOHIGH() const;
    void setSALESPRICETOOHIGH(int32_t value);

    /// <summary>
    /// Some items include incorrectly formatted MPNs.
    /// </summary>
    int32_t getMPNINVALID() const;
    void setMPNINVALID(int32_t value);

protected:
    int32_t m_AD_LINK_FORMAT_WARNING = 0;
    int32_t m_AD_LINK_SAME_AS_LINK = 0;
    int32_t m_TITLE_LENGTH_TOO_LONG = 0;
    int32_t m_DESCRIPTION_LENGTH_TOO_LONG = 0;
    int32_t m_GENDER_INVALID = 0;
    int32_t m_AGE_GROUP_INVALID = 0;
    int32_t m_SIZE_TYPE_INVALID = 0;
    int32_t m_SIZE_SYSTEM_INVALID = 0;
    int32_t m_LINK_FORMAT_WARNING = 0;
    int32_t m_SALES_PRICE_INVALID = 0;
    int32_t m_PRODUCT_CATEGORY_DEPTH_WARNING = 0;
    int32_t m_ADWORDS_FORMAT_WARNING = 0;
    int32_t m_ADWORDS_SAME_AS_LINK = 0;
    int32_t m_DUPLICATE_HEADERS = 0;
    int32_t m_FETCH_SAME_SIGNATURE = 0;
    int32_t m_ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG = 0;
    int32_t m_ADDITIONAL_IMAGE_LINK_WARNING = 0;
    int32_t m_IMAGE_LINK_WARNING = 0;
    int32_t m_SHIPPING_INVALID = 0;
    int32_t m_TAX_INVALID = 0;
    int32_t m_SHIPPING_WEIGHT_INVALID = 0;
    int32_t m_EXPIRATION_DATE_INVALID = 0;
    int32_t m_AVAILABILITY_DATE_INVALID = 0;
    int32_t m_SALE_DATE_INVALID = 0;
    int32_t m_WEIGHT_UNIT_INVALID = 0;
    int32_t m_IS_BUNDLE_INVALID = 0;
    int32_t m_UPDATED_TIME_INVALID = 0;
    int32_t m_CUSTOM_LABEL_LENGTH_TOO_LONG = 0;
    int32_t m_PRODUCT_TYPE_LENGTH_TOO_LONG = 0;
    int32_t m_TOO_MANY_ADDITIONAL_IMAGE_LINKS = 0;
    int32_t m_MULTIPACK_INVALID = 0;
    int32_t m_INDEXED_PRODUCT_COUNT_LARGE_DELTA = 0;
    int32_t m_ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE = 0;
    int32_t m_OPTIONAL_PRODUCT_CATEGORY_MISSING = 0;
    int32_t m_OPTIONAL_PRODUCT_CATEGORY_INVALID = 0;
    int32_t m_OPTIONAL_CONDITION_MISSING = 0;
    int32_t m_OPTIONAL_CONDITION_INVALID = 0;
    int32_t m_IOS_DEEP_LINK_INVALID = 0;
    int32_t m_ANDROID_DEEP_LINK_INVALID = 0;
    int32_t m_UTM_SOURCE_AUTO_CORRECTED = 0;
    int32_t m_COUNTRY_DOES_NOT_MAP_TO_CURRENCY = 0;
    int32_t m_MIN_AD_PRICE_INVALID = 0;
    int32_t m_GTIN_INVALID = 0;
    int32_t m_INCONSISTENT_CURRENCY_VALUES = 0;
    int32_t m_SALES_PRICE_TOO_LOW = 0;
    int32_t m_SHIPPING_WIDTH_INVALID = 0;
    int32_t m_SHIPPING_HEIGHT_INVALID = 0;
    int32_t m_SALES_PRICE_TOO_HIGH = 0;
    int32_t m_MPN_INVALID = 0;
};

std::vector<CatalogsFeedValidationWarnings> createCatalogsFeedValidationWarningsVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsFeedValidationWarnings>(const CatalogsFeedValidationWarnings& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsFeedValidationWarnings fromPt<CatalogsFeedValidationWarnings>(const boost::property_tree::ptree& pt) {
    CatalogsFeedValidationWarnings ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsFeedValidationWarnings_H_ */
