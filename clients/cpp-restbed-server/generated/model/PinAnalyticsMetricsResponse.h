/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PinAnalyticsMetricsResponse.h
 *
 * 
 */

#ifndef PinAnalyticsMetricsResponse_H_
#define PinAnalyticsMetricsResponse_H_



#include "PinAnalyticsMetricsResponse_daily_metrics_inner.h"
#include <map>
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  PinAnalyticsMetricsResponse 
{
public:
    PinAnalyticsMetricsResponse() = default;
    explicit PinAnalyticsMetricsResponse(boost::property_tree::ptree const& pt);
    virtual ~PinAnalyticsMetricsResponse() = default;

    PinAnalyticsMetricsResponse(const PinAnalyticsMetricsResponse& other) = default; // copy constructor
    PinAnalyticsMetricsResponse(PinAnalyticsMetricsResponse&& other) noexcept = default; // move constructor

    PinAnalyticsMetricsResponse& operator=(const PinAnalyticsMetricsResponse& other) = default; // copy assignment
    PinAnalyticsMetricsResponse& operator=(PinAnalyticsMetricsResponse&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// PinAnalyticsMetricsResponse members

    /// <summary>
    /// The lifetime metric name and value.
    /// </summary>
    std::map<std::string, int32_t> getLifetimeMetrics() const;
    void setLifetimeMetrics(std::map<std::string, int32_t> value);

    /// <summary>
    /// Array with the requested daily metric records
    /// </summary>
    std::vector<PinAnalyticsMetricsResponse_daily_metrics_inner> getDailyMetrics() const;
    void setDailyMetrics(std::vector<PinAnalyticsMetricsResponse_daily_metrics_inner> value);

    /// <summary>
    /// The metric name and value over the requested period for each requested metric
    /// </summary>
    std::map<std::string, double> getSummaryMetrics() const;
    void setSummaryMetrics(std::map<std::string, double> value);

protected:
    std::map<std::string, int32_t> m_Lifetime_metrics;
    std::vector<PinAnalyticsMetricsResponse_daily_metrics_inner> m_Daily_metrics;
    std::map<std::string, double> m_Summary_metrics;
};

std::vector<PinAnalyticsMetricsResponse> createPinAnalyticsMetricsResponseVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<PinAnalyticsMetricsResponse>(const PinAnalyticsMetricsResponse& val) {
    return val.toPropertyTree();
}

template<>
inline PinAnalyticsMetricsResponse fromPt<PinAnalyticsMetricsResponse>(const boost::property_tree::ptree& pt) {
    PinAnalyticsMetricsResponse ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* PinAnalyticsMetricsResponse_H_ */
