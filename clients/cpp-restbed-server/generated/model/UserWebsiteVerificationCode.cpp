/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UserWebsiteVerificationCode.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

UserWebsiteVerificationCode::UserWebsiteVerificationCode(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string UserWebsiteVerificationCode::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void UserWebsiteVerificationCode::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree UserWebsiteVerificationCode::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("verification_code", m_Verification_code);
	pt.put("dns_txt_record", m_Dns_txt_record);
	pt.put("metatag", m_Metatag);
	pt.put("filename", m_Filename);
	pt.put("file_content", m_File_content);
	return pt;
}

void UserWebsiteVerificationCode::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Verification_code = pt.get("verification_code", "");
	m_Dns_txt_record = pt.get("dns_txt_record", "");
	m_Metatag = pt.get("metatag", "");
	m_Filename = pt.get("filename", "");
	m_File_content = pt.get("file_content", "");
}

std::string UserWebsiteVerificationCode::getVerificationCode() const
{
    return m_Verification_code;
}

void UserWebsiteVerificationCode::setVerificationCode(std::string value)
{
    m_Verification_code = value;
}


std::string UserWebsiteVerificationCode::getDnsTxtRecord() const
{
    return m_Dns_txt_record;
}

void UserWebsiteVerificationCode::setDnsTxtRecord(std::string value)
{
    m_Dns_txt_record = value;
}


std::string UserWebsiteVerificationCode::getMetatag() const
{
    return m_Metatag;
}

void UserWebsiteVerificationCode::setMetatag(std::string value)
{
    m_Metatag = value;
}


std::string UserWebsiteVerificationCode::getFilename() const
{
    return m_Filename;
}

void UserWebsiteVerificationCode::setFilename(std::string value)
{
    m_Filename = value;
}


std::string UserWebsiteVerificationCode::getFileContent() const
{
    return m_File_content;
}

void UserWebsiteVerificationCode::setFileContent(std::string value)
{
    m_File_content = value;
}



std::vector<UserWebsiteVerificationCode> createUserWebsiteVerificationCodeVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<UserWebsiteVerificationCode>();
    for (const auto& child: pt) {
        vec.emplace_back(UserWebsiteVerificationCode(child.second));
    }

    return vec;
}

}
}
}
}

