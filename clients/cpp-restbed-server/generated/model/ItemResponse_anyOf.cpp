/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ItemResponse_anyOf.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ItemResponse_anyOf::ItemResponse_anyOf(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string ItemResponse_anyOf::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void ItemResponse_anyOf::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree ItemResponse_anyOf::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("item_id", m_Item_id);
	// generate tree for Pins
    tmp_node.clear();
	if (!m_Pins.empty()) {
        tmp_node = toPt(m_Pins);
		pt.add_child("pins", tmp_node);
		tmp_node.clear();
	}
	pt.add_child("attributes", m_Attributes.toPropertyTree());
	pt.put("hotel_id", m_Hotel_id);
	pt.put("creative_assets_id", m_Creative_assets_id);
	return pt;
}

void ItemResponse_anyOf::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Item_id = pt.get("item_id", "");
	// push all items of Pins into member
	if (pt.get_child_optional("pins")) {
        m_Pins = fromPt<std::vector<Pin>>(pt.get_child("pins"));
	}
	if (pt.get_child_optional("attributes")) {
        m_Attributes = fromPt<CatalogsCreativeAssetsAttributes>(pt.get_child("attributes"));
	}
	m_Hotel_id = pt.get("hotel_id", "");
	m_Creative_assets_id = pt.get("creative_assets_id", "");
}

CatalogsType ItemResponse_anyOf::getCatalogType() const
{
    return m_Catalog_type;
}

void ItemResponse_anyOf::setCatalogType(CatalogsType value)
{
    m_Catalog_type = value;
}


std::string ItemResponse_anyOf::getItemId() const
{
    return m_Item_id;
}

void ItemResponse_anyOf::setItemId(std::string value)
{
    m_Item_id = value;
}


std::vector<Pin> ItemResponse_anyOf::getPins() const
{
    return m_Pins;
}

void ItemResponse_anyOf::setPins(std::vector<Pin> value)
{
    m_Pins = value;
}


CatalogsCreativeAssetsAttributes ItemResponse_anyOf::getAttributes() const
{
    return m_Attributes;
}

void ItemResponse_anyOf::setAttributes(CatalogsCreativeAssetsAttributes value)
{
    m_Attributes = value;
}


std::string ItemResponse_anyOf::getHotelId() const
{
    return m_Hotel_id;
}

void ItemResponse_anyOf::setHotelId(std::string value)
{
    m_Hotel_id = value;
}


std::string ItemResponse_anyOf::getCreativeAssetsId() const
{
    return m_Creative_assets_id;
}

void ItemResponse_anyOf::setCreativeAssetsId(std::string value)
{
    m_Creative_assets_id = value;
}



std::vector<ItemResponse_anyOf> createItemResponse_anyOfVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<ItemResponse_anyOf>();
    for (const auto& child: pt) {
        vec.emplace_back(ItemResponse_anyOf(child.second));
    }

    return vec;
}

}
}
}
}

