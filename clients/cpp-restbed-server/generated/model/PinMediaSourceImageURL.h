/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PinMediaSourceImageURL.h
 *
 * Image URL-based media source
 */

#ifndef PinMediaSourceImageURL_H_
#define PinMediaSourceImageURL_H_



#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Image URL-based media source
/// </summary>
class  PinMediaSourceImageURL 
{
public:
    PinMediaSourceImageURL() = default;
    explicit PinMediaSourceImageURL(boost::property_tree::ptree const& pt);
    virtual ~PinMediaSourceImageURL() = default;

    PinMediaSourceImageURL(const PinMediaSourceImageURL& other) = default; // copy constructor
    PinMediaSourceImageURL(PinMediaSourceImageURL&& other) noexcept = default; // move constructor

    PinMediaSourceImageURL& operator=(const PinMediaSourceImageURL& other) = default; // copy assignment
    PinMediaSourceImageURL& operator=(PinMediaSourceImageURL&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// PinMediaSourceImageURL members

    /// <summary>
    /// 
    /// </summary>
    std::string getSourceType() const;
    void setSourceType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getUrl() const;
    void setUrl(std::string value);

    /// <summary>
    /// Set the parameter to false to create the new simplified Pin instead of the standard pin. Currently the field is only available to a list of beta users.
    /// </summary>
    bool isIsStandard() const;
    void setIsStandard(bool value);

protected:
    std::string m_Source_type = "";
    std::string m_Url = "";
    bool m_Is_standard = true;
};

std::vector<PinMediaSourceImageURL> createPinMediaSourceImageURLVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<PinMediaSourceImageURL>(const PinMediaSourceImageURL& val) {
    return val.toPropertyTree();
}

template<>
inline PinMediaSourceImageURL fromPt<PinMediaSourceImageURL>(const boost::property_tree::ptree& pt) {
    PinMediaSourceImageURL ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* PinMediaSourceImageURL_H_ */
