/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CatalogsHotelProductGroupCreateRequest.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CatalogsHotelProductGroupCreateRequest::CatalogsHotelProductGroupCreateRequest(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string CatalogsHotelProductGroupCreateRequest::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void CatalogsHotelProductGroupCreateRequest::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CatalogsHotelProductGroupCreateRequest::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("catalog_type", m_Catalog_type);
	pt.put("name", m_Name);
	pt.put("description", m_Description);
	pt.add_child("filters", m_Filters.toPropertyTree());
	pt.put("catalog_id", m_Catalog_id);
	return pt;
}

void CatalogsHotelProductGroupCreateRequest::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	setCatalogType(pt.get("catalog_type", ""));
	m_Name = pt.get("name", "");
	m_Description = pt.get("description", "");
	if (pt.get_child_optional("filters")) {
        m_Filters = fromPt<CatalogsHotelProductGroupFilters>(pt.get_child("filters"));
	}
	m_Catalog_id = pt.get("catalog_id", "");
}

std::string CatalogsHotelProductGroupCreateRequest::getCatalogType() const
{
    return m_Catalog_type;
}

void CatalogsHotelProductGroupCreateRequest::setCatalogType(std::string value)
{
    static const std::array<std::string, 1> allowedValues = {
        "HOTEL"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Catalog_type = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


std::string CatalogsHotelProductGroupCreateRequest::getName() const
{
    return m_Name;
}

void CatalogsHotelProductGroupCreateRequest::setName(std::string value)
{
    m_Name = value;
}


std::string CatalogsHotelProductGroupCreateRequest::getDescription() const
{
    return m_Description;
}

void CatalogsHotelProductGroupCreateRequest::setDescription(std::string value)
{
    m_Description = value;
}


CatalogsHotelProductGroupFilters CatalogsHotelProductGroupCreateRequest::getFilters() const
{
    return m_Filters;
}

void CatalogsHotelProductGroupCreateRequest::setFilters(CatalogsHotelProductGroupFilters value)
{
    m_Filters = value;
}


std::string CatalogsHotelProductGroupCreateRequest::getCatalogId() const
{
    return m_Catalog_id;
}

void CatalogsHotelProductGroupCreateRequest::setCatalogId(std::string value)
{
    m_Catalog_id = value;
}



std::vector<CatalogsHotelProductGroupCreateRequest> createCatalogsHotelProductGroupCreateRequestVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CatalogsHotelProductGroupCreateRequest>();
    for (const auto& child: pt) {
        vec.emplace_back(CatalogsHotelProductGroupCreateRequest(child.second));
    }

    return vec;
}

}
}
}
}

