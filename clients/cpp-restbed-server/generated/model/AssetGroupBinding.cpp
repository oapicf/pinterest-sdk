/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AssetGroupBinding.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

AssetGroupBinding::AssetGroupBinding(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string AssetGroupBinding::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void AssetGroupBinding::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree AssetGroupBinding::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("id", m_Id);
	pt.put("asset_group_name", m_Asset_group_name);
	pt.put("asset_group_description", m_Asset_group_description);
	// generate tree for Asset_group_types
    tmp_node.clear();
	if (!m_Asset_group_types.empty()) {
        tmp_node = toPt(m_Asset_group_types);
		pt.add_child("asset_group_types", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Ad_accounts_ids
    tmp_node.clear();
	if (!m_Ad_accounts_ids.empty()) {
        tmp_node = toPt(m_Ad_accounts_ids);
		pt.add_child("ad_accounts_ids", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Profiles_ids
    tmp_node.clear();
	if (!m_Profiles_ids.empty()) {
        tmp_node = toPt(m_Profiles_ids);
		pt.add_child("profiles_ids", tmp_node);
		tmp_node.clear();
	}
	pt.put("created_time", m_Created_time);
	pt.put("updated_time", m_Updated_time);
	pt.add_child("owner", m_Owner.toPropertyTree());
	pt.add_child("created_by", m_Created_by.toPropertyTree());
	return pt;
}

void AssetGroupBinding::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Id = pt.get("id", "");
	m_Asset_group_name = pt.get("asset_group_name", "");
	m_Asset_group_description = pt.get("asset_group_description", "");
	// push all items of Asset_group_types into member
	if (pt.get_child_optional("asset_group_types")) {
        m_Asset_group_types = fromPt<std::vector<std::string>>(pt.get_child("asset_group_types"));
	}
	// push all items of Ad_accounts_ids into member
	if (pt.get_child_optional("ad_accounts_ids")) {
        m_Ad_accounts_ids = fromPt<std::vector<std::string>>(pt.get_child("ad_accounts_ids"));
	}
	// push all items of Profiles_ids into member
	if (pt.get_child_optional("profiles_ids")) {
        m_Profiles_ids = fromPt<std::vector<std::string>>(pt.get_child("profiles_ids"));
	}
	m_Created_time = pt.get("created_time", 0);
	m_Updated_time = pt.get("updated_time", 0);
	if (pt.get_child_optional("owner")) {
        m_Owner = fromPt<BusinessAccessUserSummary>(pt.get_child("owner"));
	}
	if (pt.get_child_optional("created_by")) {
        m_Created_by = fromPt<BusinessAccessUserSummary>(pt.get_child("created_by"));
	}
}

std::string AssetGroupBinding::getId() const
{
    return m_Id;
}

void AssetGroupBinding::setId(std::string value)
{
    m_Id = value;
}


std::string AssetGroupBinding::getAssetGroupName() const
{
    return m_Asset_group_name;
}

void AssetGroupBinding::setAssetGroupName(std::string value)
{
    m_Asset_group_name = value;
}


std::string AssetGroupBinding::getAssetGroupDescription() const
{
    return m_Asset_group_description;
}

void AssetGroupBinding::setAssetGroupDescription(std::string value)
{
    m_Asset_group_description = value;
}


std::vector<std::string> AssetGroupBinding::getAssetGroupTypes() const
{
    return m_Asset_group_types;
}

void AssetGroupBinding::setAssetGroupTypes(std::vector<std::string> value)
{
    m_Asset_group_types = value;
}


std::vector<std::string> AssetGroupBinding::getAdAccountsIds() const
{
    return m_Ad_accounts_ids;
}

void AssetGroupBinding::setAdAccountsIds(std::vector<std::string> value)
{
    m_Ad_accounts_ids = value;
}


std::vector<std::string> AssetGroupBinding::getProfilesIds() const
{
    return m_Profiles_ids;
}

void AssetGroupBinding::setProfilesIds(std::vector<std::string> value)
{
    m_Profiles_ids = value;
}


int32_t AssetGroupBinding::getCreatedTime() const
{
    return m_Created_time;
}

void AssetGroupBinding::setCreatedTime(int32_t value)
{
    m_Created_time = value;
}


int32_t AssetGroupBinding::getUpdatedTime() const
{
    return m_Updated_time;
}

void AssetGroupBinding::setUpdatedTime(int32_t value)
{
    m_Updated_time = value;
}


BusinessAccessUserSummary AssetGroupBinding::getOwner() const
{
    return m_Owner;
}

void AssetGroupBinding::setOwner(BusinessAccessUserSummary value)
{
    m_Owner = value;
}


BusinessAccessUserSummary AssetGroupBinding::getCreatedBy() const
{
    return m_Created_by;
}

void AssetGroupBinding::setCreatedBy(BusinessAccessUserSummary value)
{
    m_Created_by = value;
}



std::vector<AssetGroupBinding> createAssetGroupBindingVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<AssetGroupBinding>();
    for (const auto& child: pt) {
        vec.emplace_back(AssetGroupBinding(child.second));
    }

    return vec;
}

}
}
}
}

