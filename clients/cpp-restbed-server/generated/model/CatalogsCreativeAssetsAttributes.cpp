/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CatalogsCreativeAssetsAttributes.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CatalogsCreativeAssetsAttributes::CatalogsCreativeAssetsAttributes(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string CatalogsCreativeAssetsAttributes::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void CatalogsCreativeAssetsAttributes::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CatalogsCreativeAssetsAttributes::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("title", m_Title);
	pt.put("description", m_Description);
	pt.put("link", m_Link);
	pt.put("ios_deep_link", m_Ios_deep_link);
	pt.put("android_deep_link", m_Android_deep_link);
	pt.put("google_product_category", m_Google_product_category);
	pt.put("custom_label_0", m_Custom_label_0);
	pt.put("custom_label_1", m_Custom_label_1);
	pt.put("custom_label_2", m_Custom_label_2);
	pt.put("custom_label_3", m_Custom_label_3);
	pt.put("custom_label_4", m_Custom_label_4);
	pt.put("visibility", m_Visibility);
	pt.put("image_link", m_Image_link);
	pt.put("video_link", m_Video_link);
	return pt;
}

void CatalogsCreativeAssetsAttributes::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Title = pt.get("title", "");
	m_Description = pt.get("description", "");
	m_Link = pt.get("link", "");
	m_Ios_deep_link = pt.get("ios_deep_link", "");
	m_Android_deep_link = pt.get("android_deep_link", "");
	m_Google_product_category = pt.get("google_product_category", "");
	m_Custom_label_0 = pt.get("custom_label_0", "");
	m_Custom_label_1 = pt.get("custom_label_1", "");
	m_Custom_label_2 = pt.get("custom_label_2", "");
	m_Custom_label_3 = pt.get("custom_label_3", "");
	m_Custom_label_4 = pt.get("custom_label_4", "");
	m_Visibility = pt.get("visibility", "");
	m_Image_link = pt.get("image_link", "");
	m_Video_link = pt.get("video_link", "");
}

std::string CatalogsCreativeAssetsAttributes::getTitle() const
{
    return m_Title;
}

void CatalogsCreativeAssetsAttributes::setTitle(std::string value)
{
    m_Title = value;
}


std::string CatalogsCreativeAssetsAttributes::getDescription() const
{
    return m_Description;
}

void CatalogsCreativeAssetsAttributes::setDescription(std::string value)
{
    m_Description = value;
}


std::string CatalogsCreativeAssetsAttributes::getLink() const
{
    return m_Link;
}

void CatalogsCreativeAssetsAttributes::setLink(std::string value)
{
    m_Link = value;
}


std::string CatalogsCreativeAssetsAttributes::getIosDeepLink() const
{
    return m_Ios_deep_link;
}

void CatalogsCreativeAssetsAttributes::setIosDeepLink(std::string value)
{
    m_Ios_deep_link = value;
}


std::string CatalogsCreativeAssetsAttributes::getAndroidDeepLink() const
{
    return m_Android_deep_link;
}

void CatalogsCreativeAssetsAttributes::setAndroidDeepLink(std::string value)
{
    m_Android_deep_link = value;
}


std::string CatalogsCreativeAssetsAttributes::getGoogleProductCategory() const
{
    return m_Google_product_category;
}

void CatalogsCreativeAssetsAttributes::setGoogleProductCategory(std::string value)
{
    m_Google_product_category = value;
}


std::string CatalogsCreativeAssetsAttributes::getCustomLabel0() const
{
    return m_Custom_label_0;
}

void CatalogsCreativeAssetsAttributes::setCustomLabel0(std::string value)
{
    m_Custom_label_0 = value;
}


std::string CatalogsCreativeAssetsAttributes::getCustomLabel1() const
{
    return m_Custom_label_1;
}

void CatalogsCreativeAssetsAttributes::setCustomLabel1(std::string value)
{
    m_Custom_label_1 = value;
}


std::string CatalogsCreativeAssetsAttributes::getCustomLabel2() const
{
    return m_Custom_label_2;
}

void CatalogsCreativeAssetsAttributes::setCustomLabel2(std::string value)
{
    m_Custom_label_2 = value;
}


std::string CatalogsCreativeAssetsAttributes::getCustomLabel3() const
{
    return m_Custom_label_3;
}

void CatalogsCreativeAssetsAttributes::setCustomLabel3(std::string value)
{
    m_Custom_label_3 = value;
}


std::string CatalogsCreativeAssetsAttributes::getCustomLabel4() const
{
    return m_Custom_label_4;
}

void CatalogsCreativeAssetsAttributes::setCustomLabel4(std::string value)
{
    m_Custom_label_4 = value;
}


std::string CatalogsCreativeAssetsAttributes::getVisibility() const
{
    return m_Visibility;
}

void CatalogsCreativeAssetsAttributes::setVisibility(std::string value)
{
    m_Visibility = value;
}


std::string CatalogsCreativeAssetsAttributes::getImageLink() const
{
    return m_Image_link;
}

void CatalogsCreativeAssetsAttributes::setImageLink(std::string value)
{
    m_Image_link = value;
}


std::string CatalogsCreativeAssetsAttributes::getVideoLink() const
{
    return m_Video_link;
}

void CatalogsCreativeAssetsAttributes::setVideoLink(std::string value)
{
    m_Video_link = value;
}



std::vector<CatalogsCreativeAssetsAttributes> createCatalogsCreativeAssetsAttributesVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CatalogsCreativeAssetsAttributes>();
    for (const auto& child: pt) {
        vec.emplace_back(CatalogsCreativeAssetsAttributes(child.second));
    }

    return vec;
}

}
}
}
}

