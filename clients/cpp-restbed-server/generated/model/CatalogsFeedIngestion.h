/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsFeedIngestion.h
 *
 * 
 */

#ifndef CatalogsFeedIngestion_H_
#define CatalogsFeedIngestion_H_



#include "CatalogsFeedProcessingStatus.h"
#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CatalogsFeedIngestion 
{
public:
    CatalogsFeedIngestion() = default;
    explicit CatalogsFeedIngestion(boost::property_tree::ptree const& pt);
    virtual ~CatalogsFeedIngestion() = default;

    CatalogsFeedIngestion(const CatalogsFeedIngestion& other) = default; // copy constructor
    CatalogsFeedIngestion(CatalogsFeedIngestion&& other) noexcept = default; // move constructor

    CatalogsFeedIngestion& operator=(const CatalogsFeedIngestion& other) = default; // copy assignment
    CatalogsFeedIngestion& operator=(CatalogsFeedIngestion&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsFeedIngestion members

    /// <summary>
    /// 
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getFeedId() const;
    void setFeedId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getCreatedAt() const;
    void setCreatedAt(std::string value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsFeedProcessingStatus getStatus() const;
    void setStatus(CatalogsFeedProcessingStatus value);

protected:
    std::string m_Id = "";
    std::string m_Feed_id = "";
    std::string m_Created_at = "";
    CatalogsFeedProcessingStatus m_Status = CatalogsFeedProcessingStatus{};
};

std::vector<CatalogsFeedIngestion> createCatalogsFeedIngestionVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsFeedIngestion>(const CatalogsFeedIngestion& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsFeedIngestion fromPt<CatalogsFeedIngestion>(const boost::property_tree::ptree& pt) {
    CatalogsFeedIngestion ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsFeedIngestion_H_ */
