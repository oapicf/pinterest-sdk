/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UpdateAssetGroupBody_asset_groups_to_update_inner.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

UpdateAssetGroupBody_asset_groups_to_update_inner::UpdateAssetGroupBody_asset_groups_to_update_inner(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string UpdateAssetGroupBody_asset_groups_to_update_inner::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void UpdateAssetGroupBody_asset_groups_to_update_inner::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree UpdateAssetGroupBody_asset_groups_to_update_inner::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("asset_group_id", m_Asset_group_id);
	pt.put("name", m_Name);
	pt.put("description", m_Description);
	// generate tree for Asset_group_types
    tmp_node.clear();
	if (!m_Asset_group_types.empty()) {
        tmp_node = toPt(m_Asset_group_types);
		pt.add_child("asset_group_types", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Assets_to_add
    tmp_node.clear();
	if (!m_Assets_to_add.empty()) {
        tmp_node = toPt(m_Assets_to_add);
		pt.add_child("assets_to_add", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Assets_to_remove
    tmp_node.clear();
	if (!m_Assets_to_remove.empty()) {
        tmp_node = toPt(m_Assets_to_remove);
		pt.add_child("assets_to_remove", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void UpdateAssetGroupBody_asset_groups_to_update_inner::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Asset_group_id = pt.get("asset_group_id", "");
	m_Name = pt.get("name", "");
	m_Description = pt.get("description", "");
	// push all items of Asset_group_types into member
	if (pt.get_child_optional("asset_group_types")) {
        m_Asset_group_types = fromPt<std::vector<AssetGroupType>>(pt.get_child("asset_group_types"));
	}
	// push all items of Assets_to_add into member
	if (pt.get_child_optional("assets_to_add")) {
        m_Assets_to_add = fromPt<std::vector<std::string>>(pt.get_child("assets_to_add"));
	}
	// push all items of Assets_to_remove into member
	if (pt.get_child_optional("assets_to_remove")) {
        m_Assets_to_remove = fromPt<std::vector<std::string>>(pt.get_child("assets_to_remove"));
	}
}

std::string UpdateAssetGroupBody_asset_groups_to_update_inner::getAssetGroupId() const
{
    return m_Asset_group_id;
}

void UpdateAssetGroupBody_asset_groups_to_update_inner::setAssetGroupId(std::string value)
{
    m_Asset_group_id = value;
}


std::string UpdateAssetGroupBody_asset_groups_to_update_inner::getName() const
{
    return m_Name;
}

void UpdateAssetGroupBody_asset_groups_to_update_inner::setName(std::string value)
{
    m_Name = value;
}


std::string UpdateAssetGroupBody_asset_groups_to_update_inner::getDescription() const
{
    return m_Description;
}

void UpdateAssetGroupBody_asset_groups_to_update_inner::setDescription(std::string value)
{
    m_Description = value;
}


std::vector<AssetGroupType> UpdateAssetGroupBody_asset_groups_to_update_inner::getAssetGroupTypes() const
{
    return m_Asset_group_types;
}

void UpdateAssetGroupBody_asset_groups_to_update_inner::setAssetGroupTypes(std::vector<AssetGroupType> value)
{
    m_Asset_group_types = value;
}


std::vector<std::string> UpdateAssetGroupBody_asset_groups_to_update_inner::getAssetsToAdd() const
{
    return m_Assets_to_add;
}

void UpdateAssetGroupBody_asset_groups_to_update_inner::setAssetsToAdd(std::vector<std::string> value)
{
    m_Assets_to_add = value;
}


std::vector<std::string> UpdateAssetGroupBody_asset_groups_to_update_inner::getAssetsToRemove() const
{
    return m_Assets_to_remove;
}

void UpdateAssetGroupBody_asset_groups_to_update_inner::setAssetsToRemove(std::vector<std::string> value)
{
    m_Assets_to_remove = value;
}



std::vector<UpdateAssetGroupBody_asset_groups_to_update_inner> createUpdateAssetGroupBody_asset_groups_to_update_innerVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<UpdateAssetGroupBody_asset_groups_to_update_inner>();
    for (const auto& child: pt) {
        vec.emplace_back(UpdateAssetGroupBody_asset_groups_to_update_inner(child.second));
    }

    return vec;
}

}
}
}
}

