/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CreativeAssetsProcessingRecord.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CreativeAssetsProcessingRecord::CreativeAssetsProcessingRecord(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string CreativeAssetsProcessingRecord::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void CreativeAssetsProcessingRecord::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CreativeAssetsProcessingRecord::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("creative_assets_id", m_Creative_assets_id);
	// generate tree for Errors
    tmp_node.clear();
	if (!m_Errors.empty()) {
        tmp_node = toPt(m_Errors);
		pt.add_child("errors", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Warnings
    tmp_node.clear();
	if (!m_Warnings.empty()) {
        tmp_node = toPt(m_Warnings);
		pt.add_child("warnings", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void CreativeAssetsProcessingRecord::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Creative_assets_id = pt.get("creative_assets_id", "");
	// push all items of Errors into member
	if (pt.get_child_optional("errors")) {
        m_Errors = fromPt<std::vector<ItemValidationEvent>>(pt.get_child("errors"));
	}
	// push all items of Warnings into member
	if (pt.get_child_optional("warnings")) {
        m_Warnings = fromPt<std::vector<ItemValidationEvent>>(pt.get_child("warnings"));
	}
}

std::string CreativeAssetsProcessingRecord::getCreativeAssetsId() const
{
    return m_Creative_assets_id;
}

void CreativeAssetsProcessingRecord::setCreativeAssetsId(std::string value)
{
    m_Creative_assets_id = value;
}


std::vector<ItemValidationEvent> CreativeAssetsProcessingRecord::getErrors() const
{
    return m_Errors;
}

void CreativeAssetsProcessingRecord::setErrors(std::vector<ItemValidationEvent> value)
{
    m_Errors = value;
}


std::vector<ItemValidationEvent> CreativeAssetsProcessingRecord::getWarnings() const
{
    return m_Warnings;
}

void CreativeAssetsProcessingRecord::setWarnings(std::vector<ItemValidationEvent> value)
{
    m_Warnings = value;
}


ItemProcessingStatus CreativeAssetsProcessingRecord::getStatus() const
{
    return m_Status;
}

void CreativeAssetsProcessingRecord::setStatus(ItemProcessingStatus value)
{
    m_Status = value;
}



std::vector<CreativeAssetsProcessingRecord> createCreativeAssetsProcessingRecordVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CreativeAssetsProcessingRecord>();
    for (const auto& child: pt) {
        vec.emplace_back(CreativeAssetsProcessingRecord(child.second));
    }

    return vec;
}

}
}
}
}

