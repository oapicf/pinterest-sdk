/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsFeedIngestionErrors.h
 *
 * 
 */

#ifndef CatalogsFeedIngestionErrors_H_
#define CatalogsFeedIngestionErrors_H_



#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CatalogsFeedIngestionErrors 
{
public:
    CatalogsFeedIngestionErrors() = default;
    explicit CatalogsFeedIngestionErrors(boost::property_tree::ptree const& pt);
    virtual ~CatalogsFeedIngestionErrors() = default;

    CatalogsFeedIngestionErrors(const CatalogsFeedIngestionErrors& other) = default; // copy constructor
    CatalogsFeedIngestionErrors(CatalogsFeedIngestionErrors&& other) noexcept = default; // move constructor

    CatalogsFeedIngestionErrors& operator=(const CatalogsFeedIngestionErrors& other) = default; // copy assignment
    CatalogsFeedIngestionErrors& operator=(CatalogsFeedIngestionErrors&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsFeedIngestionErrors members

    /// <summary>
    /// We experienced a technical difficulty and were unable to ingest this some items. The next ingestion will happen in 24 hours.
    /// </summary>
    int32_t getLINELEVELINTERNALERROR() const;
    void setLINELEVELINTERNALERROR(int32_t value);

    /// <summary>
    /// The product count has decreased by more than 99% compared to the last successful ingestion.
    /// </summary>
    int32_t getLARGEPRODUCTCOUNTDECREASE() const;
    void setLARGEPRODUCTCOUNTDECREASE(int32_t value);

    /// <summary>
    /// We detected an issue with your account and are not currently ingesting your items. Please review our policies at policy.pinterest.com/community-guidelines#section-spam or contact us at help.pinterest.com/contact for more information.
    /// </summary>
    int32_t getACCOUNTFLAGGED() const;
    void setACCOUNTFLAGGED(int32_t value);

    /// <summary>
    /// We experienced a technical difficulty and were unable to download some images. The next download attempt will happen in 24 hours.
    /// </summary>
    int32_t getIMAGELEVELINTERNALERROR() const;
    void setIMAGELEVELINTERNALERROR(int32_t value);

    /// <summary>
    /// Image files are unreadable. Please upload new files to continue.
    /// </summary>
    int32_t getIMAGEFILENOTACCESSIBLE() const;
    void setIMAGEFILENOTACCESSIBLE(int32_t value);

    /// <summary>
    /// Image files are unreadable. Please check your link and upload new files to continue.
    /// </summary>
    int32_t getIMAGEMALFORMEDURL() const;
    void setIMAGEMALFORMEDURL(int32_t value);

    /// <summary>
    /// Image files are unreadable. Please upload new files to continue.
    /// </summary>
    int32_t getIMAGEFILENOTFOUND() const;
    void setIMAGEFILENOTFOUND(int32_t value);

    /// <summary>
    /// Image files are unreadable. Please upload new files to continue.
    /// </summary>
    int32_t getIMAGEINVALIDFILE() const;
    void setIMAGEINVALIDFILE(int32_t value);

protected:
    int32_t m_LINE_LEVEL_INTERNAL_ERROR = 0;
    int32_t m_LARGE_PRODUCT_COUNT_DECREASE = 0;
    int32_t m_ACCOUNT_FLAGGED = 0;
    int32_t m_IMAGE_LEVEL_INTERNAL_ERROR = 0;
    int32_t m_IMAGE_FILE_NOT_ACCESSIBLE = 0;
    int32_t m_IMAGE_MALFORMED_URL = 0;
    int32_t m_IMAGE_FILE_NOT_FOUND = 0;
    int32_t m_IMAGE_INVALID_FILE = 0;
};

std::vector<CatalogsFeedIngestionErrors> createCatalogsFeedIngestionErrorsVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsFeedIngestionErrors>(const CatalogsFeedIngestionErrors& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsFeedIngestionErrors fromPt<CatalogsFeedIngestionErrors>(const boost::property_tree::ptree& pt) {
    CatalogsFeedIngestionErrors ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsFeedIngestionErrors_H_ */
