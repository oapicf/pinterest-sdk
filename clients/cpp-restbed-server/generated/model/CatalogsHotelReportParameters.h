/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsHotelReportParameters.h
 *
 * Parameters for hotel report
 */

#ifndef CatalogsHotelReportParameters_H_
#define CatalogsHotelReportParameters_H_



#include "CatalogsHotelReportParameters_report.h"
#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Parameters for hotel report
/// </summary>
class  CatalogsHotelReportParameters 
{
public:
    CatalogsHotelReportParameters() = default;
    explicit CatalogsHotelReportParameters(boost::property_tree::ptree const& pt);
    virtual ~CatalogsHotelReportParameters() = default;

    CatalogsHotelReportParameters(const CatalogsHotelReportParameters& other) = default; // copy constructor
    CatalogsHotelReportParameters(CatalogsHotelReportParameters&& other) noexcept = default; // move constructor

    CatalogsHotelReportParameters& operator=(const CatalogsHotelReportParameters& other) = default; // copy assignment
    CatalogsHotelReportParameters& operator=(CatalogsHotelReportParameters&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsHotelReportParameters members

    /// <summary>
    /// 
    /// </summary>
    std::string getCatalogType() const;
    void setCatalogType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsHotelReportParameters_report getReport() const;
    void setReport(CatalogsHotelReportParameters_report value);

protected:
    std::string m_Catalog_type = "";
    CatalogsHotelReportParameters_report m_Report;
};

std::vector<CatalogsHotelReportParameters> createCatalogsHotelReportParametersVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsHotelReportParameters>(const CatalogsHotelReportParameters& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsHotelReportParameters fromPt<CatalogsHotelReportParameters>(const boost::property_tree::ptree& pt) {
    CatalogsHotelReportParameters ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsHotelReportParameters_H_ */
