/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PinCreate.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

PinCreate::PinCreate(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string PinCreate::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void PinCreate::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree PinCreate::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("id", m_Id);
	pt.put("created_at", m_Created_at);
	pt.put("link", m_Link);
	pt.put("title", m_Title);
	pt.put("description", m_Description);
	pt.put("dominant_color", m_Dominant_color);
	pt.put("alt_text", m_Alt_text);
	pt.put("board_id", m_Board_id);
	pt.put("board_section_id", m_Board_section_id);
	pt.add_child("board_owner", m_Board_owner.toPropertyTree());
	pt.add_child("media", m_Media.toPropertyTree());
	pt.add_child("media_source", m_Media_source.toPropertyTree());
	pt.put("parent_pin_id", m_Parent_pin_id);
	pt.put("note", m_Note);
	return pt;
}

void PinCreate::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Id = pt.get("id", "");
	m_Created_at = pt.get("created_at", "");
	m_Link = pt.get("link", "");
	m_Title = pt.get("title", "");
	m_Description = pt.get("description", "");
	m_Dominant_color = pt.get("dominant_color", "");
	m_Alt_text = pt.get("alt_text", "");
	m_Board_id = pt.get("board_id", "");
	m_Board_section_id = pt.get("board_section_id", "");
	if (pt.get_child_optional("board_owner")) {
        m_Board_owner = fromPt<BoardOwner>(pt.get_child("board_owner"));
	}
	if (pt.get_child_optional("media")) {
        m_Media = fromPt<PinMedia>(pt.get_child("media"));
	}
	if (pt.get_child_optional("media_source")) {
        m_Media_source = fromPt<PinMediaSource>(pt.get_child("media_source"));
	}
	m_Parent_pin_id = pt.get("parent_pin_id", "");
	m_Note = pt.get("note", "");
}

std::string PinCreate::getId() const
{
    return m_Id;
}

void PinCreate::setId(std::string value)
{
    m_Id = value;
}


std::string PinCreate::getCreatedAt() const
{
    return m_Created_at;
}

void PinCreate::setCreatedAt(std::string value)
{
    m_Created_at = value;
}


std::string PinCreate::getLink() const
{
    return m_Link;
}

void PinCreate::setLink(std::string value)
{
    m_Link = value;
}


std::string PinCreate::getTitle() const
{
    return m_Title;
}

void PinCreate::setTitle(std::string value)
{
    m_Title = value;
}


std::string PinCreate::getDescription() const
{
    return m_Description;
}

void PinCreate::setDescription(std::string value)
{
    m_Description = value;
}


std::string PinCreate::getDominantColor() const
{
    return m_Dominant_color;
}

void PinCreate::setDominantColor(std::string value)
{
    m_Dominant_color = value;
}


std::string PinCreate::getAltText() const
{
    return m_Alt_text;
}

void PinCreate::setAltText(std::string value)
{
    m_Alt_text = value;
}


std::string PinCreate::getBoardId() const
{
    return m_Board_id;
}

void PinCreate::setBoardId(std::string value)
{
    m_Board_id = value;
}


std::string PinCreate::getBoardSectionId() const
{
    return m_Board_section_id;
}

void PinCreate::setBoardSectionId(std::string value)
{
    m_Board_section_id = value;
}


BoardOwner PinCreate::getBoardOwner() const
{
    return m_Board_owner;
}

void PinCreate::setBoardOwner(BoardOwner value)
{
    m_Board_owner = value;
}


PinMedia PinCreate::getMedia() const
{
    return m_Media;
}

void PinCreate::setMedia(PinMedia value)
{
    m_Media = value;
}


PinMediaSource PinCreate::getMediaSource() const
{
    return m_Media_source;
}

void PinCreate::setMediaSource(PinMediaSource value)
{
    m_Media_source = value;
}


std::string PinCreate::getParentPinId() const
{
    return m_Parent_pin_id;
}

void PinCreate::setParentPinId(std::string value)
{
    m_Parent_pin_id = value;
}


std::string PinCreate::getNote() const
{
    return m_Note;
}

void PinCreate::setNote(std::string value)
{
    m_Note = value;
}



std::vector<PinCreate> createPinCreateVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<PinCreate>();
    for (const auto& child: pt) {
        vec.emplace_back(PinCreate(child.second));
    }

    return vec;
}

}
}
}
}

