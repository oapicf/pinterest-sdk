/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdvancedAuctionItemsSubmitRequest.h
 *
 * Request containing operations to perform on bid prices and bid multipliers for a batch of retail catalog items
 */

#ifndef AdvancedAuctionItemsSubmitRequest_H_
#define AdvancedAuctionItemsSubmitRequest_H_



#include <string>
#include "AdvancedAuctionItemsSubmitRecord.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Request containing operations to perform on bid prices and bid multipliers for a batch of retail catalog items
/// </summary>
class  AdvancedAuctionItemsSubmitRequest 
{
public:
    AdvancedAuctionItemsSubmitRequest() = default;
    explicit AdvancedAuctionItemsSubmitRequest(boost::property_tree::ptree const& pt);
    virtual ~AdvancedAuctionItemsSubmitRequest() = default;

    AdvancedAuctionItemsSubmitRequest(const AdvancedAuctionItemsSubmitRequest& other) = default; // copy constructor
    AdvancedAuctionItemsSubmitRequest(AdvancedAuctionItemsSubmitRequest&& other) noexcept = default; // move constructor

    AdvancedAuctionItemsSubmitRequest& operator=(const AdvancedAuctionItemsSubmitRequest& other) = default; // copy assignment
    AdvancedAuctionItemsSubmitRequest& operator=(AdvancedAuctionItemsSubmitRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AdvancedAuctionItemsSubmitRequest members

    /// <summary>
    /// Catalog id pertaining to all items
    /// </summary>
    std::string getCatalogId() const;
    void setCatalogId(std::string value);

    /// <summary>
    /// Array of item bid option operations
    /// </summary>
    std::vector<AdvancedAuctionItemsSubmitRecord> getItems() const;
    void setItems(std::vector<AdvancedAuctionItemsSubmitRecord> value);

protected:
    std::string m_Catalog_id = "";
    std::vector<AdvancedAuctionItemsSubmitRecord> m_Items;
};

std::vector<AdvancedAuctionItemsSubmitRequest> createAdvancedAuctionItemsSubmitRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AdvancedAuctionItemsSubmitRequest>(const AdvancedAuctionItemsSubmitRequest& val) {
    return val.toPropertyTree();
}

template<>
inline AdvancedAuctionItemsSubmitRequest fromPt<AdvancedAuctionItemsSubmitRequest>(const boost::property_tree::ptree& pt) {
    AdvancedAuctionItemsSubmitRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AdvancedAuctionItemsSubmitRequest_H_ */
