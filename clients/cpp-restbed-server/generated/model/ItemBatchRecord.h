/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ItemBatchRecord.h
 *
 * Object describing an item batch record
 */

#ifndef ItemBatchRecord_H_
#define ItemBatchRecord_H_



#include "ItemAttributesRequest.h"
#include "ItemUpdateBatchRecord.h"
#include <string>
#include "ItemUpsertBatchRecord.h"
#include "ItemDeleteBatchRecord.h"
#include "ItemDeleteDiscontinuedBatchRecord.h"
#include "ItemCreateBatchRecord.h"
#include <vector>
#include "UpdateMaskFieldType.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "ItemCreateBatchRecord.h"
#include "ItemDeleteDiscontinuedBatchRecord.h"
#include "ItemUpdateBatchRecord.h"
#include "ItemUpsertBatchRecord.h"
#include "ItemDeleteBatchRecord.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Object describing an item batch record
/// </summary>
class  ItemBatchRecord : public ItemCreateBatchRecord, public ItemDeleteDiscontinuedBatchRecord, public ItemUpdateBatchRecord, public ItemUpsertBatchRecord, public ItemDeleteBatchRecord
{
public:
    ItemBatchRecord() = default;
    explicit ItemBatchRecord(boost::property_tree::ptree const& pt);
    virtual ~ItemBatchRecord() = default;

    ItemBatchRecord(const ItemBatchRecord& other) = default; // copy constructor
    ItemBatchRecord(ItemBatchRecord&& other) noexcept = default; // move constructor

    ItemBatchRecord& operator=(const ItemBatchRecord& other) = default; // copy assignment
    ItemBatchRecord& operator=(ItemBatchRecord&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ItemBatchRecord members

    /// <summary>
    /// The catalog item id in the merchant namespace
    /// </summary>
    std::string getItemId() const;
    void setItemId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    ItemAttributesRequest getAttributes() const;
    void setAttributes(ItemAttributesRequest value);

    /// <summary>
    /// The list of product attributes to be updated. Attributes specified in the update mask without a value specified in the body will be deleted from the product item.
    /// </summary>
    std::vector<UpdateMaskFieldType> getUpdateMask() const;
    void setUpdateMask(std::vector<UpdateMaskFieldType> value);

protected:
    std::string m_Item_id = "";
    ItemAttributesRequest m_Attributes;
    std::vector<UpdateMaskFieldType> m_Update_mask;
};

std::vector<ItemBatchRecord> createItemBatchRecordVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ItemBatchRecord>(const ItemBatchRecord& val) {
    return val.toPropertyTree();
}

template<>
inline ItemBatchRecord fromPt<ItemBatchRecord>(const boost::property_tree::ptree& pt) {
    ItemBatchRecord ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ItemBatchRecord_H_ */
