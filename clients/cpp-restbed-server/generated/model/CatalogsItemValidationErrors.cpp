/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CatalogsItemValidationErrors.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CatalogsItemValidationErrors::CatalogsItemValidationErrors(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string CatalogsItemValidationErrors::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void CatalogsItemValidationErrors::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CatalogsItemValidationErrors::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.add_child("ADULT_INVALID", m_ADULT_INVALID.toPropertyTree());
	pt.add_child("ADWORDS_FORMAT_INVALID", m_ADWORDS_FORMAT_INVALID.toPropertyTree());
	pt.add_child("AVAILABILITY_INVALID", m_AVAILABILITY_INVALID.toPropertyTree());
	pt.add_child("BLOCKLISTED_IMAGE_SIGNATURE", m_BLOCKLISTED_IMAGE_SIGNATURE.toPropertyTree());
	pt.add_child("DESCRIPTION_MISSING", m_DESCRIPTION_MISSING.toPropertyTree());
	pt.add_child("DUPLICATE_PRODUCTS", m_DUPLICATE_PRODUCTS.toPropertyTree());
	pt.add_child("IMAGE_LINK_INVALID", m_IMAGE_LINK_INVALID.toPropertyTree());
	pt.add_child("IMAGE_LINK_LENGTH_TOO_LONG", m_IMAGE_LINK_LENGTH_TOO_LONG.toPropertyTree());
	pt.add_child("IMAGE_LINK_MISSING", m_IMAGE_LINK_MISSING.toPropertyTree());
	pt.add_child("INVALID_DOMAIN", m_INVALID_DOMAIN.toPropertyTree());
	pt.add_child("ITEMID_MISSING", m_ITEMID_MISSING.toPropertyTree());
	pt.add_child("ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE", m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE.toPropertyTree());
	pt.add_child("LINK_FORMAT_INVALID", m_LINK_FORMAT_INVALID.toPropertyTree());
	pt.add_child("LINK_LENGTH_TOO_LONG", m_LINK_LENGTH_TOO_LONG.toPropertyTree());
	pt.add_child("LIST_PRICE_INVALID", m_LIST_PRICE_INVALID.toPropertyTree());
	pt.add_child("MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED", m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED.toPropertyTree());
	pt.add_child("PARSE_LINE_ERROR", m_PARSE_LINE_ERROR.toPropertyTree());
	pt.add_child("PINJOIN_CONTENT_UNSAFE", m_PINJOIN_CONTENT_UNSAFE.toPropertyTree());
	pt.add_child("PRICE_CANNOT_BE_DETERMINED", m_PRICE_CANNOT_BE_DETERMINED.toPropertyTree());
	pt.add_child("PRICE_MISSING", m_PRICE_MISSING.toPropertyTree());
	pt.add_child("PRODUCT_LINK_MISSING", m_PRODUCT_LINK_MISSING.toPropertyTree());
	pt.add_child("PRODUCT_PRICE_INVALID", m_PRODUCT_PRICE_INVALID.toPropertyTree());
	pt.add_child("TITLE_MISSING", m_TITLE_MISSING.toPropertyTree());
	return pt;
}

void CatalogsItemValidationErrors::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	if (pt.get_child_optional("ADULT_INVALID")) {
        m_ADULT_INVALID = fromPt<CatalogsItemValidationDetails>(pt.get_child("ADULT_INVALID"));
	}
	if (pt.get_child_optional("ADWORDS_FORMAT_INVALID")) {
        m_ADWORDS_FORMAT_INVALID = fromPt<CatalogsItemValidationDetails>(pt.get_child("ADWORDS_FORMAT_INVALID"));
	}
	if (pt.get_child_optional("AVAILABILITY_INVALID")) {
        m_AVAILABILITY_INVALID = fromPt<CatalogsItemValidationDetails>(pt.get_child("AVAILABILITY_INVALID"));
	}
	if (pt.get_child_optional("BLOCKLISTED_IMAGE_SIGNATURE")) {
        m_BLOCKLISTED_IMAGE_SIGNATURE = fromPt<CatalogsItemValidationDetails>(pt.get_child("BLOCKLISTED_IMAGE_SIGNATURE"));
	}
	if (pt.get_child_optional("DESCRIPTION_MISSING")) {
        m_DESCRIPTION_MISSING = fromPt<CatalogsItemValidationDetails>(pt.get_child("DESCRIPTION_MISSING"));
	}
	if (pt.get_child_optional("DUPLICATE_PRODUCTS")) {
        m_DUPLICATE_PRODUCTS = fromPt<CatalogsItemValidationDetails>(pt.get_child("DUPLICATE_PRODUCTS"));
	}
	if (pt.get_child_optional("IMAGE_LINK_INVALID")) {
        m_IMAGE_LINK_INVALID = fromPt<CatalogsItemValidationDetails>(pt.get_child("IMAGE_LINK_INVALID"));
	}
	if (pt.get_child_optional("IMAGE_LINK_LENGTH_TOO_LONG")) {
        m_IMAGE_LINK_LENGTH_TOO_LONG = fromPt<CatalogsItemValidationDetails>(pt.get_child("IMAGE_LINK_LENGTH_TOO_LONG"));
	}
	if (pt.get_child_optional("IMAGE_LINK_MISSING")) {
        m_IMAGE_LINK_MISSING = fromPt<CatalogsItemValidationDetails>(pt.get_child("IMAGE_LINK_MISSING"));
	}
	if (pt.get_child_optional("INVALID_DOMAIN")) {
        m_INVALID_DOMAIN = fromPt<CatalogsItemValidationDetails>(pt.get_child("INVALID_DOMAIN"));
	}
	if (pt.get_child_optional("ITEMID_MISSING")) {
        m_ITEMID_MISSING = fromPt<CatalogsItemValidationDetails>(pt.get_child("ITEMID_MISSING"));
	}
	if (pt.get_child_optional("ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE")) {
        m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE = fromPt<CatalogsItemValidationDetails>(pt.get_child("ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE"));
	}
	if (pt.get_child_optional("LINK_FORMAT_INVALID")) {
        m_LINK_FORMAT_INVALID = fromPt<CatalogsItemValidationDetails>(pt.get_child("LINK_FORMAT_INVALID"));
	}
	if (pt.get_child_optional("LINK_LENGTH_TOO_LONG")) {
        m_LINK_LENGTH_TOO_LONG = fromPt<CatalogsItemValidationDetails>(pt.get_child("LINK_LENGTH_TOO_LONG"));
	}
	if (pt.get_child_optional("LIST_PRICE_INVALID")) {
        m_LIST_PRICE_INVALID = fromPt<CatalogsItemValidationDetails>(pt.get_child("LIST_PRICE_INVALID"));
	}
	if (pt.get_child_optional("MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED")) {
        m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED = fromPt<CatalogsItemValidationDetails>(pt.get_child("MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED"));
	}
	if (pt.get_child_optional("PARSE_LINE_ERROR")) {
        m_PARSE_LINE_ERROR = fromPt<CatalogsItemValidationDetails>(pt.get_child("PARSE_LINE_ERROR"));
	}
	if (pt.get_child_optional("PINJOIN_CONTENT_UNSAFE")) {
        m_PINJOIN_CONTENT_UNSAFE = fromPt<CatalogsItemValidationDetails>(pt.get_child("PINJOIN_CONTENT_UNSAFE"));
	}
	if (pt.get_child_optional("PRICE_CANNOT_BE_DETERMINED")) {
        m_PRICE_CANNOT_BE_DETERMINED = fromPt<CatalogsItemValidationDetails>(pt.get_child("PRICE_CANNOT_BE_DETERMINED"));
	}
	if (pt.get_child_optional("PRICE_MISSING")) {
        m_PRICE_MISSING = fromPt<CatalogsItemValidationDetails>(pt.get_child("PRICE_MISSING"));
	}
	if (pt.get_child_optional("PRODUCT_LINK_MISSING")) {
        m_PRODUCT_LINK_MISSING = fromPt<CatalogsItemValidationDetails>(pt.get_child("PRODUCT_LINK_MISSING"));
	}
	if (pt.get_child_optional("PRODUCT_PRICE_INVALID")) {
        m_PRODUCT_PRICE_INVALID = fromPt<CatalogsItemValidationDetails>(pt.get_child("PRODUCT_PRICE_INVALID"));
	}
	if (pt.get_child_optional("TITLE_MISSING")) {
        m_TITLE_MISSING = fromPt<CatalogsItemValidationDetails>(pt.get_child("TITLE_MISSING"));
	}
}

CatalogsItemValidationDetails CatalogsItemValidationErrors::getADULTINVALID() const
{
    return m_ADULT_INVALID;
}

void CatalogsItemValidationErrors::setADULTINVALID(CatalogsItemValidationDetails value)
{
    m_ADULT_INVALID = value;
}


CatalogsItemValidationDetails CatalogsItemValidationErrors::getADWORDSFORMATINVALID() const
{
    return m_ADWORDS_FORMAT_INVALID;
}

void CatalogsItemValidationErrors::setADWORDSFORMATINVALID(CatalogsItemValidationDetails value)
{
    m_ADWORDS_FORMAT_INVALID = value;
}


CatalogsItemValidationDetails CatalogsItemValidationErrors::getAVAILABILITYINVALID() const
{
    return m_AVAILABILITY_INVALID;
}

void CatalogsItemValidationErrors::setAVAILABILITYINVALID(CatalogsItemValidationDetails value)
{
    m_AVAILABILITY_INVALID = value;
}


CatalogsItemValidationDetails CatalogsItemValidationErrors::getBLOCKLISTEDIMAGESIGNATURE() const
{
    return m_BLOCKLISTED_IMAGE_SIGNATURE;
}

void CatalogsItemValidationErrors::setBLOCKLISTEDIMAGESIGNATURE(CatalogsItemValidationDetails value)
{
    m_BLOCKLISTED_IMAGE_SIGNATURE = value;
}


CatalogsItemValidationDetails CatalogsItemValidationErrors::getDESCRIPTIONMISSING() const
{
    return m_DESCRIPTION_MISSING;
}

void CatalogsItemValidationErrors::setDESCRIPTIONMISSING(CatalogsItemValidationDetails value)
{
    m_DESCRIPTION_MISSING = value;
}


CatalogsItemValidationDetails CatalogsItemValidationErrors::getDUPLICATEPRODUCTS() const
{
    return m_DUPLICATE_PRODUCTS;
}

void CatalogsItemValidationErrors::setDUPLICATEPRODUCTS(CatalogsItemValidationDetails value)
{
    m_DUPLICATE_PRODUCTS = value;
}


CatalogsItemValidationDetails CatalogsItemValidationErrors::getIMAGELINKINVALID() const
{
    return m_IMAGE_LINK_INVALID;
}

void CatalogsItemValidationErrors::setIMAGELINKINVALID(CatalogsItemValidationDetails value)
{
    m_IMAGE_LINK_INVALID = value;
}


CatalogsItemValidationDetails CatalogsItemValidationErrors::getIMAGELINKLENGTHTOOLONG() const
{
    return m_IMAGE_LINK_LENGTH_TOO_LONG;
}

void CatalogsItemValidationErrors::setIMAGELINKLENGTHTOOLONG(CatalogsItemValidationDetails value)
{
    m_IMAGE_LINK_LENGTH_TOO_LONG = value;
}


CatalogsItemValidationDetails CatalogsItemValidationErrors::getIMAGELINKMISSING() const
{
    return m_IMAGE_LINK_MISSING;
}

void CatalogsItemValidationErrors::setIMAGELINKMISSING(CatalogsItemValidationDetails value)
{
    m_IMAGE_LINK_MISSING = value;
}


CatalogsItemValidationDetails CatalogsItemValidationErrors::getINVALIDDOMAIN() const
{
    return m_INVALID_DOMAIN;
}

void CatalogsItemValidationErrors::setINVALIDDOMAIN(CatalogsItemValidationDetails value)
{
    m_INVALID_DOMAIN = value;
}


CatalogsItemValidationDetails CatalogsItemValidationErrors::getITEMIDMISSING() const
{
    return m_ITEMID_MISSING;
}

void CatalogsItemValidationErrors::setITEMIDMISSING(CatalogsItemValidationDetails value)
{
    m_ITEMID_MISSING = value;
}


CatalogsItemValidationDetails CatalogsItemValidationErrors::getITEMMAINIMAGEDOWNLOADFAILURE() const
{
    return m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE;
}

void CatalogsItemValidationErrors::setITEMMAINIMAGEDOWNLOADFAILURE(CatalogsItemValidationDetails value)
{
    m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE = value;
}


CatalogsItemValidationDetails CatalogsItemValidationErrors::getLINKFORMATINVALID() const
{
    return m_LINK_FORMAT_INVALID;
}

void CatalogsItemValidationErrors::setLINKFORMATINVALID(CatalogsItemValidationDetails value)
{
    m_LINK_FORMAT_INVALID = value;
}


CatalogsItemValidationDetails CatalogsItemValidationErrors::getLINKLENGTHTOOLONG() const
{
    return m_LINK_LENGTH_TOO_LONG;
}

void CatalogsItemValidationErrors::setLINKLENGTHTOOLONG(CatalogsItemValidationDetails value)
{
    m_LINK_LENGTH_TOO_LONG = value;
}


CatalogsItemValidationDetails CatalogsItemValidationErrors::getLISTPRICEINVALID() const
{
    return m_LIST_PRICE_INVALID;
}

void CatalogsItemValidationErrors::setLISTPRICEINVALID(CatalogsItemValidationDetails value)
{
    m_LIST_PRICE_INVALID = value;
}


CatalogsItemValidationDetails CatalogsItemValidationErrors::getMAXITEMSPERITEMGROUPEXCEEDED() const
{
    return m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED;
}

void CatalogsItemValidationErrors::setMAXITEMSPERITEMGROUPEXCEEDED(CatalogsItemValidationDetails value)
{
    m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED = value;
}


CatalogsItemValidationDetails CatalogsItemValidationErrors::getPARSELINEERROR() const
{
    return m_PARSE_LINE_ERROR;
}

void CatalogsItemValidationErrors::setPARSELINEERROR(CatalogsItemValidationDetails value)
{
    m_PARSE_LINE_ERROR = value;
}


CatalogsItemValidationDetails CatalogsItemValidationErrors::getPINJOINCONTENTUNSAFE() const
{
    return m_PINJOIN_CONTENT_UNSAFE;
}

void CatalogsItemValidationErrors::setPINJOINCONTENTUNSAFE(CatalogsItemValidationDetails value)
{
    m_PINJOIN_CONTENT_UNSAFE = value;
}


CatalogsItemValidationDetails CatalogsItemValidationErrors::getPRICECANNOTBEDETERMINED() const
{
    return m_PRICE_CANNOT_BE_DETERMINED;
}

void CatalogsItemValidationErrors::setPRICECANNOTBEDETERMINED(CatalogsItemValidationDetails value)
{
    m_PRICE_CANNOT_BE_DETERMINED = value;
}


CatalogsItemValidationDetails CatalogsItemValidationErrors::getPRICEMISSING() const
{
    return m_PRICE_MISSING;
}

void CatalogsItemValidationErrors::setPRICEMISSING(CatalogsItemValidationDetails value)
{
    m_PRICE_MISSING = value;
}


CatalogsItemValidationDetails CatalogsItemValidationErrors::getPRODUCTLINKMISSING() const
{
    return m_PRODUCT_LINK_MISSING;
}

void CatalogsItemValidationErrors::setPRODUCTLINKMISSING(CatalogsItemValidationDetails value)
{
    m_PRODUCT_LINK_MISSING = value;
}


CatalogsItemValidationDetails CatalogsItemValidationErrors::getPRODUCTPRICEINVALID() const
{
    return m_PRODUCT_PRICE_INVALID;
}

void CatalogsItemValidationErrors::setPRODUCTPRICEINVALID(CatalogsItemValidationDetails value)
{
    m_PRODUCT_PRICE_INVALID = value;
}


CatalogsItemValidationDetails CatalogsItemValidationErrors::getTITLEMISSING() const
{
    return m_TITLE_MISSING;
}

void CatalogsItemValidationErrors::setTITLEMISSING(CatalogsItemValidationDetails value)
{
    m_TITLE_MISSING = value;
}



std::vector<CatalogsItemValidationErrors> createCatalogsItemValidationErrorsVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CatalogsItemValidationErrors>();
    for (const auto& child: pt) {
        vec.emplace_back(CatalogsItemValidationErrors(child.second));
    }

    return vec;
}

}
}
}
}

