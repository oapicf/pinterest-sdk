/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Language.h
 *
 * Language code, which is among the offical ISO 639-1 language list.
 */

#ifndef Language_H_
#define Language_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Language code, which is among the offical ISO 639-1 language list.
/// </summary>
class  Language 
{
public:
    Language() = default;
    explicit Language(boost::property_tree::ptree const& pt);
    virtual ~Language() = default;

    Language(const Language& other) = default; // copy constructor
    Language(Language&& other) noexcept = default; // move constructor

    Language& operator=(const Language& other) = default; // copy assignment
    Language& operator=(Language&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    std::string toString() const;
    void fromString(const std::string& str);

    /////////////////////////////////////////////
    /// Language members
    std::string getEnumValue() const;
    void setEnumValue(const std::string& val);

protected:
    std::string m_LanguageEnumValue;
};

std::vector<Language> createLanguageVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<Language>(const Language& val) {
    return val.toPropertyTree();
}

template<>
inline Language fromPt<Language>(const boost::property_tree::ptree& pt) {
    Language ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* Language_H_ */
