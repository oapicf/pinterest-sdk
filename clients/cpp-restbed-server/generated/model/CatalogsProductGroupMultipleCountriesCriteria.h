/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsProductGroupMultipleCountriesCriteria.h
 *
 * 
 */

#ifndef CatalogsProductGroupMultipleCountriesCriteria_H_
#define CatalogsProductGroupMultipleCountriesCriteria_H_



#include "Country.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CatalogsProductGroupMultipleCountriesCriteria 
{
public:
    CatalogsProductGroupMultipleCountriesCriteria() = default;
    explicit CatalogsProductGroupMultipleCountriesCriteria(boost::property_tree::ptree const& pt);
    virtual ~CatalogsProductGroupMultipleCountriesCriteria() = default;

    CatalogsProductGroupMultipleCountriesCriteria(const CatalogsProductGroupMultipleCountriesCriteria& other) = default; // copy constructor
    CatalogsProductGroupMultipleCountriesCriteria(CatalogsProductGroupMultipleCountriesCriteria&& other) noexcept = default; // move constructor

    CatalogsProductGroupMultipleCountriesCriteria& operator=(const CatalogsProductGroupMultipleCountriesCriteria& other) = default; // copy assignment
    CatalogsProductGroupMultipleCountriesCriteria& operator=(CatalogsProductGroupMultipleCountriesCriteria&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsProductGroupMultipleCountriesCriteria members

    /// <summary>
    /// 
    /// </summary>
    std::vector<Country> getValues() const;
    void setValues(std::vector<Country> value);

    /// <summary>
    /// 
    /// </summary>
    bool isNegated() const;
    void setNegated(bool value);

protected:
    std::vector<Country> m_Values;
    bool m_Negated = false;
};

std::vector<CatalogsProductGroupMultipleCountriesCriteria> createCatalogsProductGroupMultipleCountriesCriteriaVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsProductGroupMultipleCountriesCriteria>(const CatalogsProductGroupMultipleCountriesCriteria& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsProductGroupMultipleCountriesCriteria fromPt<CatalogsProductGroupMultipleCountriesCriteria>(const boost::property_tree::ptree& pt) {
    CatalogsProductGroupMultipleCountriesCriteria ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsProductGroupMultipleCountriesCriteria_H_ */
