/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsCreativeAssetsProductGroupFiltersAllOf.h
 *
 * 
 */

#ifndef CatalogsCreativeAssetsProductGroupFiltersAllOf_H_
#define CatalogsCreativeAssetsProductGroupFiltersAllOf_H_



#include "CatalogsCreativeAssetsProductGroupFilterKeys.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CatalogsCreativeAssetsProductGroupFiltersAllOf 
{
public:
    CatalogsCreativeAssetsProductGroupFiltersAllOf() = default;
    explicit CatalogsCreativeAssetsProductGroupFiltersAllOf(boost::property_tree::ptree const& pt);
    virtual ~CatalogsCreativeAssetsProductGroupFiltersAllOf() = default;

    CatalogsCreativeAssetsProductGroupFiltersAllOf(const CatalogsCreativeAssetsProductGroupFiltersAllOf& other) = default; // copy constructor
    CatalogsCreativeAssetsProductGroupFiltersAllOf(CatalogsCreativeAssetsProductGroupFiltersAllOf&& other) noexcept = default; // move constructor

    CatalogsCreativeAssetsProductGroupFiltersAllOf& operator=(const CatalogsCreativeAssetsProductGroupFiltersAllOf& other) = default; // copy assignment
    CatalogsCreativeAssetsProductGroupFiltersAllOf& operator=(CatalogsCreativeAssetsProductGroupFiltersAllOf&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsCreativeAssetsProductGroupFiltersAllOf members

    /// <summary>
    /// 
    /// </summary>
    std::vector<CatalogsCreativeAssetsProductGroupFilterKeys> getAllOf() const;
    void setAllOf(std::vector<CatalogsCreativeAssetsProductGroupFilterKeys> value);

protected:
    std::vector<CatalogsCreativeAssetsProductGroupFilterKeys> m_All_of;
};

std::vector<CatalogsCreativeAssetsProductGroupFiltersAllOf> createCatalogsCreativeAssetsProductGroupFiltersAllOfVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsCreativeAssetsProductGroupFiltersAllOf>(const CatalogsCreativeAssetsProductGroupFiltersAllOf& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsCreativeAssetsProductGroupFiltersAllOf fromPt<CatalogsCreativeAssetsProductGroupFiltersAllOf>(const boost::property_tree::ptree& pt) {
    CatalogsCreativeAssetsProductGroupFiltersAllOf ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsCreativeAssetsProductGroupFiltersAllOf_H_ */
