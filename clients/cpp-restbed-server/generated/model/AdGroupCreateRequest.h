/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdGroupCreateRequest.h
 *
 * 
 */

#ifndef AdGroupCreateRequest_H_
#define AdGroupCreateRequest_H_



#include "TargetingSpec.h"
#include "PlacementGroupType.h"
#include "EntityStatus.h"
#include "PacingDeliveryType.h"
#include <string>
#include "TrackingUrls.h"
#include "ActionType.h"
#include "BudgetType.h"
#include "OptimizationGoalMetadata.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "AdGroupCommon.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  AdGroupCreateRequest : public AdGroupCommon
{
public:
    AdGroupCreateRequest() = default;
    explicit AdGroupCreateRequest(boost::property_tree::ptree const& pt);
    virtual ~AdGroupCreateRequest() = default;

    AdGroupCreateRequest(const AdGroupCreateRequest& other) = default; // copy constructor
    AdGroupCreateRequest(AdGroupCreateRequest&& other) noexcept = default; // move constructor

    AdGroupCreateRequest& operator=(const AdGroupCreateRequest& other) = default; // copy assignment
    AdGroupCreateRequest& operator=(AdGroupCreateRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AdGroupCreateRequest members

    /// <summary>
    /// Ad group name.
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// Ad group/entity status.
    /// </summary>
    EntityStatus getStatus() const;
    void setStatus(EntityStatus value);

    /// <summary>
    /// Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
    /// </summary>
    int32_t getBudgetInMicroCurrency() const;
    void setBudgetInMicroCurrency(int32_t value);

    /// <summary>
    /// Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
    /// </summary>
    int32_t getBidInMicroCurrency() const;
    void setBidInMicroCurrency(int32_t value);

    /// <summary>
    /// Optimization goals for objective-based performance campaigns. **REQUIRED** when campaign&#39;s &#x60;objective_type&#x60; is set to &#x60;\&quot;WEB_CONVERSION\&quot;&#x60;.
    /// </summary>
    OptimizationGoalMetadata getOptimizationGoalMetadata() const;
    void setOptimizationGoalMetadata(OptimizationGoalMetadata value);

    /// <summary>
    /// 
    /// </summary>
    BudgetType getBudgetType() const;
    void setBudgetType(BudgetType value);

    /// <summary>
    /// Ad group start time. Unix timestamp in seconds. Defaults to current time.
    /// </summary>
    int32_t getStartTime() const;
    void setStartTime(int32_t value);

    /// <summary>
    /// Ad group end time. Unix timestamp in seconds.
    /// </summary>
    int32_t getEndTime() const;
    void setEndTime(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    TargetingSpec getTargetingSpec() const;
    void setTargetingSpec(TargetingSpec value);

    /// <summary>
    /// Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION &lt;a href&#x3D;\&quot;/docs/redoc/#section/Billable-event\&quot;&gt;billable_event&lt;/a&gt; value. This field **REQUIRES** the &#x60;end_time&#x60; field.
    /// </summary>
    int32_t getLifetimeFrequencyCap() const;
    void setLifetimeFrequencyCap(int32_t value);

    /// <summary>
    /// Third-party tracking URLs.&lt;br&gt; JSON object with the format: {\&quot;&lt;a href&#x3D;\&quot;/docs/redoc/#section/Tracking-URL-event\&quot;&gt;Tracking event enum&lt;/a&gt;\&quot;:[URL string array],...}&lt;br&gt; For example: {\&quot;impression\&quot;: [\&quot;URL1\&quot;, \&quot;URL2\&quot;], \&quot;click\&quot;: [\&quot;URL1\&quot;, \&quot;URL2\&quot;, \&quot;URL3\&quot;]}.&lt;br&gt;Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.&lt;br&gt;&lt;br&gt; For more information, see &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Third-party and dynamic tracking&lt;/a&gt;.
    /// </summary>
    TrackingUrls getTrackingUrls() const;
    void setTrackingUrls(TrackingUrls value);

    /// <summary>
    /// Enable auto-targeting for ad group.Default value is True. Also known as &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/expanded-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;\&quot;expanded targeting\&quot;&lt;/a&gt;.
    /// </summary>
    bool isAutoTargetingEnabled() const;
    void setAutoTargetingEnabled(bool value);

    /// <summary>
    /// &lt;a href&#x3D;\&quot;/docs/redoc/#section/Placement-group\&quot;&gt;Placement group&lt;/a&gt;.
    /// </summary>
    PlacementGroupType getPlacementGroup() const;
    void setPlacementGroup(PlacementGroupType value);

    /// <summary>
    /// 
    /// </summary>
    PacingDeliveryType getPacingDeliveryType() const;
    void setPacingDeliveryType(PacingDeliveryType value);

    /// <summary>
    /// Campaign ID of the ad group.
    /// </summary>
    std::string getCampaignId() const;
    void setCampaignId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    ActionType getBillableEvent() const;
    void setBillableEvent(ActionType value);

    /// <summary>
    /// Bid strategy type. For Campaigns with Video Completion objectives, the only supported bid strategy type is AUTOMATIC_BID.
    /// </summary>
    std::string getBidStrategyType() const;
    void setBidStrategyType(std::string value);

    /// <summary>
    /// Targeting template IDs applied to the ad group. We currently only support 1 targeting template per ad group. To use targeting templates, do not set any other targeting fields: targeting_spec, tracking_urls, auto_targeting_enabled, placement_group. To clear all targeting template IDs, set this field to [&#39;0&#39;].
    /// </summary>
    std::vector<std::string> getTargetingTemplateIds() const;
    void setTargetingTemplateIds(std::vector<std::string> value);

protected:
    std::string m_Name = "";
    EntityStatus m_Status = "";
    int32_t m_Budget_in_micro_currency = 0;
    int32_t m_Bid_in_micro_currency = 0;
    OptimizationGoalMetadata m_Optimization_goal_metadata;
    BudgetType m_Budget_type = "DAILY";
    int32_t m_Start_time = 0;
    int32_t m_End_time = 0;
    TargetingSpec m_Targeting_spec;
    int32_t m_Lifetime_frequency_cap = 0;
    TrackingUrls m_Tracking_urls;
    bool m_Auto_targeting_enabled = false;
    PlacementGroupType m_Placement_group = "";
    PacingDeliveryType m_Pacing_delivery_type = "STANDARD";
    std::string m_Campaign_id = "";
    ActionType m_Billable_event = ActionType{};
    std::string m_Bid_strategy_type = "";
    std::vector<std::string> m_Targeting_template_ids;
};

std::vector<AdGroupCreateRequest> createAdGroupCreateRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AdGroupCreateRequest>(const AdGroupCreateRequest& val) {
    return val.toPropertyTree();
}

template<>
inline AdGroupCreateRequest fromPt<AdGroupCreateRequest>(const boost::property_tree::ptree& pt) {
    AdGroupCreateRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AdGroupCreateRequest_H_ */
