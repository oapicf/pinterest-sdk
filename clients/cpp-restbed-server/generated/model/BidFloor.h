/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BidFloor.h
 *
 * 
 */

#ifndef BidFloor_H_
#define BidFloor_H_



#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  BidFloor 
{
public:
    BidFloor() = default;
    explicit BidFloor(boost::property_tree::ptree const& pt);
    virtual ~BidFloor() = default;

    BidFloor(const BidFloor& other) = default; // copy constructor
    BidFloor(BidFloor&& other) noexcept = default; // move constructor

    BidFloor& operator=(const BidFloor& other) = default; // copy assignment
    BidFloor& operator=(BidFloor&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// BidFloor members

    /// <summary>
    /// A list of bid floors in micro currency. For example, [100000, 200000]
    /// </summary>
    std::vector<int32_t> getBidFloors() const;
    void setBidFloors(std::vector<int32_t> value);

    /// <summary>
    /// Always the string &#39;bidfloor&#39;
    /// </summary>
    std::string getType() const;
    void setType(std::string value);

protected:
    std::vector<int32_t> m_Bid_floors;
    std::string m_Type = "bidfloor";
};

std::vector<BidFloor> createBidFloorVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<BidFloor>(const BidFloor& val) {
    return val.toPropertyTree();
}

template<>
inline BidFloor fromPt<BidFloor>(const boost::property_tree::ptree& pt) {
    BidFloor ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* BidFloor_H_ */
