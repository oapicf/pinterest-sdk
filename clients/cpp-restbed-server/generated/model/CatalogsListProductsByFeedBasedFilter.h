/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsListProductsByFeedBasedFilter.h
 *
 * Request object to list products for a given feed_id and product group filter.
 */

#ifndef CatalogsListProductsByFeedBasedFilter_H_
#define CatalogsListProductsByFeedBasedFilter_H_



#include <string>
#include "CatalogsProductGroupFilters.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Request object to list products for a given feed_id and product group filter.
/// </summary>
class  CatalogsListProductsByFeedBasedFilter 
{
public:
    CatalogsListProductsByFeedBasedFilter() = default;
    explicit CatalogsListProductsByFeedBasedFilter(boost::property_tree::ptree const& pt);
    virtual ~CatalogsListProductsByFeedBasedFilter() = default;

    CatalogsListProductsByFeedBasedFilter(const CatalogsListProductsByFeedBasedFilter& other) = default; // copy constructor
    CatalogsListProductsByFeedBasedFilter(CatalogsListProductsByFeedBasedFilter&& other) noexcept = default; // move constructor

    CatalogsListProductsByFeedBasedFilter& operator=(const CatalogsListProductsByFeedBasedFilter& other) = default; // copy assignment
    CatalogsListProductsByFeedBasedFilter& operator=(CatalogsListProductsByFeedBasedFilter&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsListProductsByFeedBasedFilter members

    /// <summary>
    /// Catalog Feed id pertaining to the catalog product group filter.
    /// </summary>
    std::string getFeedId() const;
    void setFeedId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsProductGroupFilters getFilters() const;
    void setFilters(CatalogsProductGroupFilters value);

protected:
    std::string m_Feed_id = "";
    CatalogsProductGroupFilters m_Filters;
};

std::vector<CatalogsListProductsByFeedBasedFilter> createCatalogsListProductsByFeedBasedFilterVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsListProductsByFeedBasedFilter>(const CatalogsListProductsByFeedBasedFilter& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsListProductsByFeedBasedFilter fromPt<CatalogsListProductsByFeedBasedFilter>(const boost::property_tree::ptree& pt) {
    CatalogsListProductsByFeedBasedFilter ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsListProductsByFeedBasedFilter_H_ */
