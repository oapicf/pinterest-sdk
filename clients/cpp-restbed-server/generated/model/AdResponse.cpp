/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AdResponse.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

AdResponse::AdResponse(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string AdResponse::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void AdResponse::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree AdResponse::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("ad_group_id", m_Ad_group_id);
	pt.put("android_deep_link", m_Android_deep_link);
	// generate tree for Carousel_android_deep_links
    tmp_node.clear();
	if (!m_Carousel_android_deep_links.empty()) {
        tmp_node = toPt(m_Carousel_android_deep_links);
		pt.add_child("carousel_android_deep_links", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Carousel_destination_urls
    tmp_node.clear();
	if (!m_Carousel_destination_urls.empty()) {
        tmp_node = toPt(m_Carousel_destination_urls);
		pt.add_child("carousel_destination_urls", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Carousel_ios_deep_links
    tmp_node.clear();
	if (!m_Carousel_ios_deep_links.empty()) {
        tmp_node = toPt(m_Carousel_ios_deep_links);
		pt.add_child("carousel_ios_deep_links", tmp_node);
		tmp_node.clear();
	}
	pt.put("click_tracking_url", m_Click_tracking_url);
	pt.put("destination_url", m_Destination_url);
	pt.put("ios_deep_link", m_Ios_deep_link);
	pt.put("is_pin_deleted", m_Is_pin_deleted);
	pt.put("is_removable", m_Is_removable);
	pt.put("name", m_Name);
	pt.add_child("tracking_urls", m_Tracking_urls.toPropertyTree());
	pt.put("view_tracking_url", m_View_tracking_url);
	pt.put("lead_form_id", m_Lead_form_id);
	pt.put("customizable_cta_type", m_Customizable_cta_type);
	pt.add_child("quiz_pin_data", m_Quiz_pin_data.toPropertyTree());
	pt.put("pin_id", m_Pin_id);
	pt.put("ad_account_id", m_Ad_account_id);
	pt.put("campaign_id", m_Campaign_id);
	pt.put("collection_items_destination_url_template", m_Collection_items_destination_url_template);
	pt.put("created_time", m_Created_time);
	pt.put("id", m_Id);
	// generate tree for Rejected_reasons
    tmp_node.clear();
	if (!m_Rejected_reasons.empty()) {
        tmp_node = toPt(m_Rejected_reasons);
		pt.add_child("rejected_reasons", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Rejection_labels
    tmp_node.clear();
	if (!m_Rejection_labels.empty()) {
        tmp_node = toPt(m_Rejection_labels);
		pt.add_child("rejection_labels", tmp_node);
		tmp_node.clear();
	}
	pt.put("review_status", m_Review_status);
	pt.put("type", m_Type);
	pt.put("updated_time", m_Updated_time);
	return pt;
}

void AdResponse::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Ad_group_id = pt.get("ad_group_id", "");
	m_Android_deep_link = pt.get("android_deep_link", "");
	// push all items of Carousel_android_deep_links into member
	if (pt.get_child_optional("carousel_android_deep_links")) {
        m_Carousel_android_deep_links = fromPt<std::vector<std::string>>(pt.get_child("carousel_android_deep_links"));
	}
	// push all items of Carousel_destination_urls into member
	if (pt.get_child_optional("carousel_destination_urls")) {
        m_Carousel_destination_urls = fromPt<std::vector<std::string>>(pt.get_child("carousel_destination_urls"));
	}
	// push all items of Carousel_ios_deep_links into member
	if (pt.get_child_optional("carousel_ios_deep_links")) {
        m_Carousel_ios_deep_links = fromPt<std::vector<std::string>>(pt.get_child("carousel_ios_deep_links"));
	}
	m_Click_tracking_url = pt.get("click_tracking_url", "");
	m_Destination_url = pt.get("destination_url", "");
	m_Ios_deep_link = pt.get("ios_deep_link", "");
	m_Is_pin_deleted = pt.get("is_pin_deleted", false);
	m_Is_removable = pt.get("is_removable", false);
	m_Name = pt.get("name", "");
	if (pt.get_child_optional("tracking_urls")) {
        m_Tracking_urls = fromPt<TrackingUrls>(pt.get_child("tracking_urls"));
	}
	m_View_tracking_url = pt.get("view_tracking_url", "");
	m_Lead_form_id = pt.get("lead_form_id", "");
	setCustomizableCtaType(pt.get("customizable_cta_type", ""));
	if (pt.get_child_optional("quiz_pin_data")) {
        m_Quiz_pin_data = fromPt<QuizPinData>(pt.get_child("quiz_pin_data"));
	}
	m_Pin_id = pt.get("pin_id", "");
	m_Ad_account_id = pt.get("ad_account_id", "");
	m_Campaign_id = pt.get("campaign_id", "");
	m_Collection_items_destination_url_template = pt.get("collection_items_destination_url_template", "");
	m_Created_time = pt.get("created_time", 0);
	m_Id = pt.get("id", "");
	// push all items of Rejected_reasons into member
	if (pt.get_child_optional("rejected_reasons")) {
        m_Rejected_reasons = fromPt<std::vector<std::string>>(pt.get_child("rejected_reasons"));
	}
	// push all items of Rejection_labels into member
	if (pt.get_child_optional("rejection_labels")) {
        m_Rejection_labels = fromPt<std::vector<std::string>>(pt.get_child("rejection_labels"));
	}
	setReviewStatus(pt.get("review_status", ""));
	m_Type = pt.get("type", "");
	m_Updated_time = pt.get("updated_time", 0);
}

std::string AdResponse::getAdGroupId() const
{
    return m_Ad_group_id;
}

void AdResponse::setAdGroupId(std::string value)
{
    m_Ad_group_id = value;
}


std::string AdResponse::getAndroidDeepLink() const
{
    return m_Android_deep_link;
}

void AdResponse::setAndroidDeepLink(std::string value)
{
    m_Android_deep_link = value;
}


std::vector<std::string> AdResponse::getCarouselAndroidDeepLinks() const
{
    return m_Carousel_android_deep_links;
}

void AdResponse::setCarouselAndroidDeepLinks(std::vector<std::string> value)
{
    m_Carousel_android_deep_links = value;
}


std::vector<std::string> AdResponse::getCarouselDestinationUrls() const
{
    return m_Carousel_destination_urls;
}

void AdResponse::setCarouselDestinationUrls(std::vector<std::string> value)
{
    m_Carousel_destination_urls = value;
}


std::vector<std::string> AdResponse::getCarouselIosDeepLinks() const
{
    return m_Carousel_ios_deep_links;
}

void AdResponse::setCarouselIosDeepLinks(std::vector<std::string> value)
{
    m_Carousel_ios_deep_links = value;
}


std::string AdResponse::getClickTrackingUrl() const
{
    return m_Click_tracking_url;
}

void AdResponse::setClickTrackingUrl(std::string value)
{
    m_Click_tracking_url = value;
}


CreativeType AdResponse::getCreativeType() const
{
    return m_Creative_type;
}

void AdResponse::setCreativeType(CreativeType value)
{
    m_Creative_type = value;
}


std::string AdResponse::getDestinationUrl() const
{
    return m_Destination_url;
}

void AdResponse::setDestinationUrl(std::string value)
{
    m_Destination_url = value;
}


std::string AdResponse::getIosDeepLink() const
{
    return m_Ios_deep_link;
}

void AdResponse::setIosDeepLink(std::string value)
{
    m_Ios_deep_link = value;
}


bool AdResponse::isIsPinDeleted() const
{
    return m_Is_pin_deleted;
}

void AdResponse::setIsPinDeleted(bool value)
{
    m_Is_pin_deleted = value;
}


bool AdResponse::isIsRemovable() const
{
    return m_Is_removable;
}

void AdResponse::setIsRemovable(bool value)
{
    m_Is_removable = value;
}


std::string AdResponse::getName() const
{
    return m_Name;
}

void AdResponse::setName(std::string value)
{
    m_Name = value;
}


EntityStatus AdResponse::getStatus() const
{
    return m_Status;
}

void AdResponse::setStatus(EntityStatus value)
{
    m_Status = value;
}


TrackingUrls AdResponse::getTrackingUrls() const
{
    return m_Tracking_urls;
}

void AdResponse::setTrackingUrls(TrackingUrls value)
{
    m_Tracking_urls = value;
}


std::string AdResponse::getViewTrackingUrl() const
{
    return m_View_tracking_url;
}

void AdResponse::setViewTrackingUrl(std::string value)
{
    m_View_tracking_url = value;
}


std::string AdResponse::getLeadFormId() const
{
    return m_Lead_form_id;
}

void AdResponse::setLeadFormId(std::string value)
{
    m_Lead_form_id = value;
}


GridClickType AdResponse::getGridClickType() const
{
    return m_Grid_click_type;
}

void AdResponse::setGridClickType(GridClickType value)
{
    m_Grid_click_type = value;
}


std::string AdResponse::getCustomizableCtaType() const
{
    return m_Customizable_cta_type;
}

void AdResponse::setCustomizableCtaType(std::string value)
{
    static const std::array<std::string, 18> allowedValues = {
        "GET_OFFER", "LEARN_MORE", "ORDER_NOW", "SHOP_NOW", "SIGN_UP", "SUBSCRIBE", "BUY_NOW", "CONTACT_US", "GET_QUOTE", "VISIT_SITE", "APPLY_NOW", "BOOK_NOW", "REQUEST_DEMO", "REGISTER_NOW", "FIND_A_DEALER", "ADD_TO_CART", "WATCH_NOW", "READ_MORE"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Customizable_cta_type = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


QuizPinData AdResponse::getQuizPinData() const
{
    return m_Quiz_pin_data;
}

void AdResponse::setQuizPinData(QuizPinData value)
{
    m_Quiz_pin_data = value;
}


std::string AdResponse::getPinId() const
{
    return m_Pin_id;
}

void AdResponse::setPinId(std::string value)
{
    m_Pin_id = value;
}


std::string AdResponse::getAdAccountId() const
{
    return m_Ad_account_id;
}

void AdResponse::setAdAccountId(std::string value)
{
    m_Ad_account_id = value;
}


std::string AdResponse::getCampaignId() const
{
    return m_Campaign_id;
}

void AdResponse::setCampaignId(std::string value)
{
    m_Campaign_id = value;
}


std::string AdResponse::getCollectionItemsDestinationUrlTemplate() const
{
    return m_Collection_items_destination_url_template;
}

void AdResponse::setCollectionItemsDestinationUrlTemplate(std::string value)
{
    m_Collection_items_destination_url_template = value;
}


int32_t AdResponse::getCreatedTime() const
{
    return m_Created_time;
}

void AdResponse::setCreatedTime(int32_t value)
{
    m_Created_time = value;
}


std::string AdResponse::getId() const
{
    return m_Id;
}

void AdResponse::setId(std::string value)
{
    m_Id = value;
}


std::vector<std::string> AdResponse::getRejectedReasons() const
{
    return m_Rejected_reasons;
}

void AdResponse::setRejectedReasons(std::vector<std::string> value)
{
    static const std::array<std::string, 48> allowedValues = {
        "HASHTAGS", "PROMOTIONS_AND_PRICES", "TARGETING", "LANDING_PAGE", "CAPS_AND_SYMBOLS", "SHOCKING", "WEIGHT_LOSS", "PROHIBITED_PRODUCT", "AUTHENTICITY", "NUDITY", "CONFUSING_DESIGN", "URGENCY", "RATINGS", "APP", "ALCOHOL", "CONTESTS", "POLITICAL", "OTHER", "IMAGE", "NAR", "INCONSISTENT", "CLICKBAIT", "NO_DESCRIPTION", "LOW_QUALITY", "EXAGGERATED_CLAIMS", "PINTEREST_BRAND", "ALCOHOL_NO_SALE", "LANDING_PAGE_SPEED", "LANDING_PAGE_HARDWALL", "LANDING_PAGE_BROKEN", "LANDING_PAGE_QUALITY", "OUT_OF_STOCK", "IMAGE_LOW_QUALITY", "IMAGE_BUSY", "IMAGE_POORLY_EDITED", "IMAGE_BEFORE_AFTER", "UGC", "FAKE_BUTTONS", "WEAPONS", "SENSITIVE", "UNACCEPTABLE_BUSINESS", "SUSPICIOUS_CLAIMS", "PHARMA", "SUSPICIOUS_SUPPLEMENTS", "ILLEGAL_RECREATIONAL_DRUG", "LOW_QUALITY_LANDING_PAGE", "RESTRICTED_HEALTHCARE", "INCONSISTENT_LANG_FR"
    };

    for (const auto &v: value) {
        if (std::find(allowedValues.begin(), allowedValues.end(), v) == allowedValues.end()) {
            throw std::runtime_error("Value " + boost::lexical_cast<std::string>(v) + " not allowed");
        }
    }
}


std::vector<std::string> AdResponse::getRejectionLabels() const
{
    return m_Rejection_labels;
}

void AdResponse::setRejectionLabels(std::vector<std::string> value)
{
    m_Rejection_labels = value;
}


std::string AdResponse::getReviewStatus() const
{
    return m_Review_status;
}

void AdResponse::setReviewStatus(std::string value)
{
    static const std::array<std::string, 4> allowedValues = {
        "OTHER", "PENDING", "REJECTED", "APPROVED"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Review_status = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


std::string AdResponse::getType() const
{
    return m_Type;
}

void AdResponse::setType(std::string value)
{
    m_Type = value;
}


int32_t AdResponse::getUpdatedTime() const
{
    return m_Updated_time;
}

void AdResponse::setUpdatedTime(int32_t value)
{
    m_Updated_time = value;
}


PinPromotionSummaryStatus AdResponse::getSummaryStatus() const
{
    return m_Summary_status;
}

void AdResponse::setSummaryStatus(PinPromotionSummaryStatus value)
{
    m_Summary_status = value;
}



std::vector<AdResponse> createAdResponseVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<AdResponse>();
    for (const auto& child: pt) {
        vec.emplace_back(AdResponse(child.second));
    }

    return vec;
}

}
}
}
}

