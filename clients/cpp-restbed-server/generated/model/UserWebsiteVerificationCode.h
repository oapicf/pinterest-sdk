/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UserWebsiteVerificationCode.h
 *
 * 
 */

#ifndef UserWebsiteVerificationCode_H_
#define UserWebsiteVerificationCode_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  UserWebsiteVerificationCode 
{
public:
    UserWebsiteVerificationCode() = default;
    explicit UserWebsiteVerificationCode(boost::property_tree::ptree const& pt);
    virtual ~UserWebsiteVerificationCode() = default;

    UserWebsiteVerificationCode(const UserWebsiteVerificationCode& other) = default; // copy constructor
    UserWebsiteVerificationCode(UserWebsiteVerificationCode&& other) noexcept = default; // move constructor

    UserWebsiteVerificationCode& operator=(const UserWebsiteVerificationCode& other) = default; // copy assignment
    UserWebsiteVerificationCode& operator=(UserWebsiteVerificationCode&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// UserWebsiteVerificationCode members

    /// <summary>
    /// Code to check against the user claiming the website
    /// </summary>
    std::string getVerificationCode() const;
    void setVerificationCode(std::string value);

    /// <summary>
    /// DNS TXT record to check against for the website to be claimed
    /// </summary>
    std::string getDnsTxtRecord() const;
    void setDnsTxtRecord(std::string value);

    /// <summary>
    /// Metatag the verification process searchs for the website to be claimed
    /// </summary>
    std::string getMetatag() const;
    void setMetatag(std::string value);

    /// <summary>
    /// File expected to find on the website being claimed
    /// </summary>
    std::string getFilename() const;
    void setFilename(std::string value);

    /// <summary>
    /// A full html file to upload to the website in order for it to be claimed
    /// </summary>
    std::string getFileContent() const;
    void setFileContent(std::string value);

protected:
    std::string m_Verification_code = "";
    std::string m_Dns_txt_record = "";
    std::string m_Metatag = "";
    std::string m_Filename = "";
    std::string m_File_content = "";
};

std::vector<UserWebsiteVerificationCode> createUserWebsiteVerificationCodeVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<UserWebsiteVerificationCode>(const UserWebsiteVerificationCode& val) {
    return val.toPropertyTree();
}

template<>
inline UserWebsiteVerificationCode fromPt<UserWebsiteVerificationCode>(const boost::property_tree::ptree& pt) {
    UserWebsiteVerificationCode ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* UserWebsiteVerificationCode_H_ */
