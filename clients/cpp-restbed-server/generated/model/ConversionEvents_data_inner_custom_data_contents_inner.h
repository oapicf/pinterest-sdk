/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ConversionEvents_data_inner_custom_data_contents_inner.h
 *
 * 
 */

#ifndef ConversionEvents_data_inner_custom_data_contents_inner_H_
#define ConversionEvents_data_inner_custom_data_contents_inner_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ConversionEvents_data_inner_custom_data_contents_inner 
{
public:
    ConversionEvents_data_inner_custom_data_contents_inner() = default;
    explicit ConversionEvents_data_inner_custom_data_contents_inner(boost::property_tree::ptree const& pt);
    virtual ~ConversionEvents_data_inner_custom_data_contents_inner() = default;

    ConversionEvents_data_inner_custom_data_contents_inner(const ConversionEvents_data_inner_custom_data_contents_inner& other) = default; // copy constructor
    ConversionEvents_data_inner_custom_data_contents_inner(ConversionEvents_data_inner_custom_data_contents_inner&& other) noexcept = default; // move constructor

    ConversionEvents_data_inner_custom_data_contents_inner& operator=(const ConversionEvents_data_inner_custom_data_contents_inner& other) = default; // copy assignment
    ConversionEvents_data_inner_custom_data_contents_inner& operator=(ConversionEvents_data_inner_custom_data_contents_inner&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ConversionEvents_data_inner_custom_data_contents_inner members

    /// <summary>
    /// The id of a product. We recommend using this if you are a merchant for AddToCart and Checkouts. For detail, please check &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt; (Install the Pinterest tag section).
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// The price of a product. Accepted as a string in the request; it will be parsed into a double. This is the original item value before any discount. We recommend using this if you are a merchant for PageVisit, AddToCart and Checkouts. For detail, please check &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt; (Install the Pinterest tag section).
    /// </summary>
    std::string getItemPrice() const;
    void setItemPrice(std::string value);

    /// <summary>
    /// The amount of a product. We recommend using this if you are a merchant for AddToCart and Checkouts. For detail, please check &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt; (Install the Pinterest tag section).
    /// </summary>
    int64_t getQuantity() const;
    void setQuantity(int64_t value);

    /// <summary>
    /// The name of a product.
    /// </summary>
    std::string getItemName() const;
    void setItemName(std::string value);

    /// <summary>
    /// The category of a product.
    /// </summary>
    std::string getItemCategory() const;
    void setItemCategory(std::string value);

    /// <summary>
    /// The brand of a product.
    /// </summary>
    std::string getItemBrand() const;
    void setItemBrand(std::string value);

protected:
    std::string m_Id = "";
    std::string m_Item_price = "";
    int64_t m_Quantity = 0L;
    std::string m_Item_name = "";
    std::string m_Item_category = "";
    std::string m_Item_brand = "";
};

std::vector<ConversionEvents_data_inner_custom_data_contents_inner> createConversionEvents_data_inner_custom_data_contents_innerVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ConversionEvents_data_inner_custom_data_contents_inner>(const ConversionEvents_data_inner_custom_data_contents_inner& val) {
    return val.toPropertyTree();
}

template<>
inline ConversionEvents_data_inner_custom_data_contents_inner fromPt<ConversionEvents_data_inner_custom_data_contents_inner>(const boost::property_tree::ptree& pt) {
    ConversionEvents_data_inner_custom_data_contents_inner ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ConversionEvents_data_inner_custom_data_contents_inner_H_ */
