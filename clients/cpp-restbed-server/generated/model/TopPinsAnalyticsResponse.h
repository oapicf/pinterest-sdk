/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TopPinsAnalyticsResponse.h
 *
 * 
 */

#ifndef TopPinsAnalyticsResponse_H_
#define TopPinsAnalyticsResponse_H_



#include "TopPinsAnalyticsResponse_date_availability.h"
#include <string>
#include "TopPinsAnalyticsResponse_pins_inner.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  TopPinsAnalyticsResponse 
{
public:
    TopPinsAnalyticsResponse() = default;
    explicit TopPinsAnalyticsResponse(boost::property_tree::ptree const& pt);
    virtual ~TopPinsAnalyticsResponse() = default;

    TopPinsAnalyticsResponse(const TopPinsAnalyticsResponse& other) = default; // copy constructor
    TopPinsAnalyticsResponse(TopPinsAnalyticsResponse&& other) noexcept = default; // move constructor

    TopPinsAnalyticsResponse& operator=(const TopPinsAnalyticsResponse& other) = default; // copy assignment
    TopPinsAnalyticsResponse& operator=(TopPinsAnalyticsResponse&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// TopPinsAnalyticsResponse members

    /// <summary>
    /// 
    /// </summary>
    TopPinsAnalyticsResponse_date_availability getDateAvailability() const;
    void setDateAvailability(TopPinsAnalyticsResponse_date_availability value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<TopPinsAnalyticsResponse_pins_inner> getPins() const;
    void setPins(std::vector<TopPinsAnalyticsResponse_pins_inner> value);

    /// <summary>
    /// 
    /// </summary>
    std::string getSortBy() const;
    void setSortBy(std::string value);

protected:
    TopPinsAnalyticsResponse_date_availability m_Date_availability;
    std::vector<TopPinsAnalyticsResponse_pins_inner> m_Pins;
    std::string m_Sort_by = "";
};

std::vector<TopPinsAnalyticsResponse> createTopPinsAnalyticsResponseVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<TopPinsAnalyticsResponse>(const TopPinsAnalyticsResponse& val) {
    return val.toPropertyTree();
}

template<>
inline TopPinsAnalyticsResponse fromPt<TopPinsAnalyticsResponse>(const boost::property_tree::ptree& pt) {
    TopPinsAnalyticsResponse ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* TopPinsAnalyticsResponse_H_ */
