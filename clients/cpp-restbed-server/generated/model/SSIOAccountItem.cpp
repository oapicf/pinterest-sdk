/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SSIOAccountItem.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

SSIOAccountItem::SSIOAccountItem(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string SSIOAccountItem::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void SSIOAccountItem::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree SSIOAccountItem::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("id", m_Id);
	pt.put("io_terms_id", m_Io_terms_id);
	pt.put("io_terms", m_Io_terms);
	pt.put("us_terms_id", m_Us_terms_id);
	pt.put("us_terms", m_Us_terms);
	pt.put("row_terms_id", m_Row_terms_id);
	pt.put("row_terms", m_Row_terms);
	pt.put("io_type", m_Io_type);
	// generate tree for Addresses
    tmp_node.clear();
	if (!m_Addresses.empty()) {
        tmp_node = toPt(m_Addresses);
		pt.add_child("addresses", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void SSIOAccountItem::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Id = pt.get("id", "");
	m_Io_terms_id = pt.get("io_terms_id", "");
	m_Io_terms = pt.get("io_terms", "");
	m_Us_terms_id = pt.get("us_terms_id", "");
	m_Us_terms = pt.get("us_terms", "");
	m_Row_terms_id = pt.get("row_terms_id", "");
	m_Row_terms = pt.get("row_terms", "");
	m_Io_type = pt.get("io_type", "");
	// push all items of Addresses into member
	if (pt.get_child_optional("addresses")) {
        m_Addresses = fromPt<std::vector<SSIOAccountAddress>>(pt.get_child("addresses"));
	}
}

std::string SSIOAccountItem::getId() const
{
    return m_Id;
}

void SSIOAccountItem::setId(std::string value)
{
    m_Id = value;
}


std::string SSIOAccountItem::getIoTermsId() const
{
    return m_Io_terms_id;
}

void SSIOAccountItem::setIoTermsId(std::string value)
{
    m_Io_terms_id = value;
}


std::string SSIOAccountItem::getIoTerms() const
{
    return m_Io_terms;
}

void SSIOAccountItem::setIoTerms(std::string value)
{
    m_Io_terms = value;
}


std::string SSIOAccountItem::getUsTermsId() const
{
    return m_Us_terms_id;
}

void SSIOAccountItem::setUsTermsId(std::string value)
{
    m_Us_terms_id = value;
}


std::string SSIOAccountItem::getUsTerms() const
{
    return m_Us_terms;
}

void SSIOAccountItem::setUsTerms(std::string value)
{
    m_Us_terms = value;
}


std::string SSIOAccountItem::getRowTermsId() const
{
    return m_Row_terms_id;
}

void SSIOAccountItem::setRowTermsId(std::string value)
{
    m_Row_terms_id = value;
}


std::string SSIOAccountItem::getRowTerms() const
{
    return m_Row_terms;
}

void SSIOAccountItem::setRowTerms(std::string value)
{
    m_Row_terms = value;
}


std::string SSIOAccountItem::getIoType() const
{
    return m_Io_type;
}

void SSIOAccountItem::setIoType(std::string value)
{
    m_Io_type = value;
}


std::vector<SSIOAccountAddress> SSIOAccountItem::getAddresses() const
{
    return m_Addresses;
}

void SSIOAccountItem::setAddresses(std::vector<SSIOAccountAddress> value)
{
    m_Addresses = value;
}



std::vector<SSIOAccountItem> createSSIOAccountItemVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<SSIOAccountItem>();
    for (const auto& child: pt) {
        vec.emplace_back(SSIOAccountItem(child.second));
    }

    return vec;
}

}
}
}
}

