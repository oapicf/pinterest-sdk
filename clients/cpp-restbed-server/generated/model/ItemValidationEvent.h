/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ItemValidationEvent.h
 *
 * Object describing an item validation event
 */

#ifndef ItemValidationEvent_H_
#define ItemValidationEvent_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Object describing an item validation event
/// </summary>
class  ItemValidationEvent 
{
public:
    ItemValidationEvent() = default;
    explicit ItemValidationEvent(boost::property_tree::ptree const& pt);
    virtual ~ItemValidationEvent() = default;

    ItemValidationEvent(const ItemValidationEvent& other) = default; // copy constructor
    ItemValidationEvent(ItemValidationEvent&& other) noexcept = default; // move constructor

    ItemValidationEvent& operator=(const ItemValidationEvent& other) = default; // copy assignment
    ItemValidationEvent& operator=(ItemValidationEvent&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ItemValidationEvent members

    /// <summary>
    /// The attribute that the item validation event references
    /// </summary>
    std::string getAttribute() const;
    void setAttribute(std::string value);

    /// <summary>
    /// The event code that the item validation event references
    /// </summary>
    int32_t getCode() const;
    void setCode(int32_t value);

    /// <summary>
    /// Title message describing the item validation event
    /// </summary>
    std::string getMessage() const;
    void setMessage(std::string value);

protected:
    std::string m_Attribute = "";
    int32_t m_Code = 0;
    std::string m_Message = "";
};

std::vector<ItemValidationEvent> createItemValidationEventVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ItemValidationEvent>(const ItemValidationEvent& val) {
    return val.toPropertyTree();
}

template<>
inline ItemValidationEvent fromPt<ItemValidationEvent>(const boost::property_tree::ptree& pt) {
    ItemValidationEvent ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ItemValidationEvent_H_ */
