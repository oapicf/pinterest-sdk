/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MediaUpload.h
 *
 * Media upload that has been registered but not uploaded/processed yet.
 */

#ifndef MediaUpload_H_
#define MediaUpload_H_



#include "MediaUpload_allOf_upload_parameters.h"
#include <string>
#include "MediaUploadType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Media upload that has been registered but not uploaded/processed yet.
/// </summary>
class  MediaUpload 
{
public:
    MediaUpload() = default;
    explicit MediaUpload(boost::property_tree::ptree const& pt);
    virtual ~MediaUpload() = default;

    MediaUpload(const MediaUpload& other) = default; // copy constructor
    MediaUpload(MediaUpload&& other) noexcept = default; // move constructor

    MediaUpload& operator=(const MediaUpload& other) = default; // copy assignment
    MediaUpload& operator=(MediaUpload&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// MediaUpload members

    /// <summary>
    /// Unique identifier for this media upload. Used to track status and for attaching during Pin creation.
    /// </summary>
    std::string getMediaId() const;
    void setMediaId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    MediaUploadType getMediaType() const;
    void setMediaType(MediaUploadType value);

    /// <summary>
    /// The URL where you will POST your media file.
    /// </summary>
    std::string getUploadUrl() const;
    void setUploadUrl(std::string value);

    /// <summary>
    /// 
    /// </summary>
    MediaUpload_allOf_upload_parameters getUploadParameters() const;
    void setUploadParameters(MediaUpload_allOf_upload_parameters value);

protected:
    std::string m_Media_id = "";
    MediaUploadType m_Media_type = "";
    std::string m_Upload_url = "";
    MediaUpload_allOf_upload_parameters m_Upload_parameters;
};

std::vector<MediaUpload> createMediaUploadVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<MediaUpload>(const MediaUpload& val) {
    return val.toPropertyTree();
}

template<>
inline MediaUpload fromPt<MediaUpload>(const boost::property_tree::ptree& pt) {
    MediaUpload ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* MediaUpload_H_ */
