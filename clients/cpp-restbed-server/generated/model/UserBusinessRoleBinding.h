/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UserBusinessRoleBinding.h
 *
 * 
 */

#ifndef UserBusinessRoleBinding_H_
#define UserBusinessRoleBinding_H_



#include "BusinessMemberAssetsSummary.h"
#include <string>
#include <vector>
#include "BusinessAccessUserSummary.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  UserBusinessRoleBinding 
{
public:
    UserBusinessRoleBinding() = default;
    explicit UserBusinessRoleBinding(boost::property_tree::ptree const& pt);
    virtual ~UserBusinessRoleBinding() = default;

    UserBusinessRoleBinding(const UserBusinessRoleBinding& other) = default; // copy constructor
    UserBusinessRoleBinding(UserBusinessRoleBinding&& other) noexcept = default; // move constructor

    UserBusinessRoleBinding& operator=(const UserBusinessRoleBinding& other) = default; // copy assignment
    UserBusinessRoleBinding& operator=(UserBusinessRoleBinding&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// UserBusinessRoleBinding members

    /// <summary>
    /// 
    /// </summary>
    BusinessMemberAssetsSummary getAssetsSummary() const;
    void setAssetsSummary(BusinessMemberAssetsSummary value);

    /// <summary>
    /// The access level a user has on the business. This can be EMPLOYEE, BIZ_ADMIN, or PARTNER.
    /// </summary>
    std::vector<std::string> getBusinessRoles() const;
    void setBusinessRoles(std::vector<std::string> value);

    /// <summary>
    /// Metadata for the business that created the business relationship.
    /// </summary>
    BusinessAccessUserSummary getCreatedByBusiness() const;
    void setCreatedByBusiness(BusinessAccessUserSummary value);

    /// <summary>
    /// Metadata for the user that created the business relationship.
    /// </summary>
    BusinessAccessUserSummary getCreatedByUser() const;
    void setCreatedByUser(BusinessAccessUserSummary value);

    /// <summary>
    /// The time the business relationship was created. Returned in milliseconds.
    /// </summary>
    int32_t getCreatedTime() const;
    void setCreatedTime(int32_t value);

    /// <summary>
    /// Unique identifier of the business member/business partner/employer.
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// This field is only relevant when business_role&#x3D;\&quot;PARTNER\&quot;. &lt;br&gt;If is_shared_partner&#x3D;FALSE, the partner can access your business assets. If assets_summary is not empty, the assets listed are your business assets the partner has access to. &lt;br&gt;If is_shared_partner&#x3D;TRUE, you can access the partner&#39;s business asset. If assets_summary is not empty, the assets listed are the partner&#39;s business assets you have access to.
    /// </summary>
    bool isIsSharedPartner() const;
    void setIsSharedPartner(bool value);

    /// <summary>
    /// Metadata for the business member/business partner/employer.
    /// </summary>
    BusinessAccessUserSummary getUser() const;
    void setUser(BusinessAccessUserSummary value);

protected:
    BusinessMemberAssetsSummary m_Assets_summary;
    std::vector<std::string> m_Business_roles;
    BusinessAccessUserSummary m_Created_by_business;
    BusinessAccessUserSummary m_Created_by_user;
    int32_t m_Created_time = 0;
    std::string m_Id = "";
    bool m_Is_shared_partner = false;
    BusinessAccessUserSummary m_User;
};

std::vector<UserBusinessRoleBinding> createUserBusinessRoleBindingVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<UserBusinessRoleBinding>(const UserBusinessRoleBinding& val) {
    return val.toPropertyTree();
}

template<>
inline UserBusinessRoleBinding fromPt<UserBusinessRoleBinding>(const boost::property_tree::ptree& pt) {
    UserBusinessRoleBinding ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* UserBusinessRoleBinding_H_ */
