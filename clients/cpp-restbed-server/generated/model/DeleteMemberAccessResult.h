/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DeleteMemberAccessResult.h
 *
 * The terminated asset access.
 */

#ifndef DeleteMemberAccessResult_H_
#define DeleteMemberAccessResult_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// The terminated asset access.
/// </summary>
class  DeleteMemberAccessResult 
{
public:
    DeleteMemberAccessResult() = default;
    explicit DeleteMemberAccessResult(boost::property_tree::ptree const& pt);
    virtual ~DeleteMemberAccessResult() = default;

    DeleteMemberAccessResult(const DeleteMemberAccessResult& other) = default; // copy constructor
    DeleteMemberAccessResult(DeleteMemberAccessResult&& other) noexcept = default; // move constructor

    DeleteMemberAccessResult& operator=(const DeleteMemberAccessResult& other) = default; // copy assignment
    DeleteMemberAccessResult& operator=(DeleteMemberAccessResult&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// DeleteMemberAccessResult members

    /// <summary>
    /// Unique identifier of the business asset.
    /// </summary>
    std::string getAssetId() const;
    void setAssetId(std::string value);

    /// <summary>
    /// Unique identifier of the business member.
    /// </summary>
    std::string getMemberId() const;
    void setMemberId(std::string value);

protected:
    std::string m_Asset_id = "";
    std::string m_Member_id = "";
};

std::vector<DeleteMemberAccessResult> createDeleteMemberAccessResultVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<DeleteMemberAccessResult>(const DeleteMemberAccessResult& val) {
    return val.toPropertyTree();
}

template<>
inline DeleteMemberAccessResult fromPt<DeleteMemberAccessResult>(const boost::property_tree::ptree& pt) {
    DeleteMemberAccessResult ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* DeleteMemberAccessResult_H_ */
