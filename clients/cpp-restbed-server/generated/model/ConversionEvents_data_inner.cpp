/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ConversionEvents_data_inner.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ConversionEvents_data_inner::ConversionEvents_data_inner(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string ConversionEvents_data_inner::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void ConversionEvents_data_inner::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree ConversionEvents_data_inner::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("event_name", m_Event_name);
	pt.put("action_source", m_Action_source);
	pt.put("event_time", m_Event_time);
	pt.put("event_id", m_Event_id);
	pt.put("event_source_url", m_Event_source_url);
	pt.put("opt_out", m_Opt_out);
	pt.put("partner_name", m_Partner_name);
	pt.add_child("user_data", m_User_data.toPropertyTree());
	pt.add_child("custom_data", m_Custom_data.toPropertyTree());
	pt.put("app_id", m_App_id);
	pt.put("app_name", m_App_name);
	pt.put("app_version", m_App_version);
	pt.put("device_brand", m_Device_brand);
	pt.put("device_carrier", m_Device_carrier);
	pt.put("device_model", m_Device_model);
	pt.put("device_type", m_Device_type);
	pt.put("os_version", m_Os_version);
	pt.put("wifi", m_Wifi);
	pt.put("language", m_Language);
	return pt;
}

void ConversionEvents_data_inner::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Event_name = pt.get("event_name", "");
	m_Action_source = pt.get("action_source", "");
	m_Event_time = pt.get("event_time", 0L);
	m_Event_id = pt.get("event_id", "");
	m_Event_source_url = pt.get("event_source_url", "");
	m_Opt_out = pt.get("opt_out", false);
	m_Partner_name = pt.get("partner_name", "");
	if (pt.get_child_optional("user_data")) {
        m_User_data = fromPt<ConversionEventsUserData>(pt.get_child("user_data"));
	}
	if (pt.get_child_optional("custom_data")) {
        m_Custom_data = fromPt<ConversionEvents_data_inner_custom_data>(pt.get_child("custom_data"));
	}
	m_App_id = pt.get("app_id", "");
	m_App_name = pt.get("app_name", "");
	m_App_version = pt.get("app_version", "");
	m_Device_brand = pt.get("device_brand", "");
	m_Device_carrier = pt.get("device_carrier", "");
	m_Device_model = pt.get("device_model", "");
	m_Device_type = pt.get("device_type", "");
	m_Os_version = pt.get("os_version", "");
	m_Wifi = pt.get("wifi", false);
	m_Language = pt.get("language", "");
}

std::string ConversionEvents_data_inner::getEventName() const
{
    return m_Event_name;
}

void ConversionEvents_data_inner::setEventName(std::string value)
{
    m_Event_name = value;
}


std::string ConversionEvents_data_inner::getActionSource() const
{
    return m_Action_source;
}

void ConversionEvents_data_inner::setActionSource(std::string value)
{
    m_Action_source = value;
}


int64_t ConversionEvents_data_inner::getEventTime() const
{
    return m_Event_time;
}

void ConversionEvents_data_inner::setEventTime(int64_t value)
{
    m_Event_time = value;
}


std::string ConversionEvents_data_inner::getEventId() const
{
    return m_Event_id;
}

void ConversionEvents_data_inner::setEventId(std::string value)
{
    m_Event_id = value;
}


std::string ConversionEvents_data_inner::getEventSourceUrl() const
{
    return m_Event_source_url;
}

void ConversionEvents_data_inner::setEventSourceUrl(std::string value)
{
    m_Event_source_url = value;
}


bool ConversionEvents_data_inner::isOptOut() const
{
    return m_Opt_out;
}

void ConversionEvents_data_inner::setOptOut(bool value)
{
    m_Opt_out = value;
}


std::string ConversionEvents_data_inner::getPartnerName() const
{
    return m_Partner_name;
}

void ConversionEvents_data_inner::setPartnerName(std::string value)
{
    m_Partner_name = value;
}


ConversionEventsUserData ConversionEvents_data_inner::getUserData() const
{
    return m_User_data;
}

void ConversionEvents_data_inner::setUserData(ConversionEventsUserData value)
{
    m_User_data = value;
}


ConversionEvents_data_inner_custom_data ConversionEvents_data_inner::getCustomData() const
{
    return m_Custom_data;
}

void ConversionEvents_data_inner::setCustomData(ConversionEvents_data_inner_custom_data value)
{
    m_Custom_data = value;
}


std::string ConversionEvents_data_inner::getAppId() const
{
    return m_App_id;
}

void ConversionEvents_data_inner::setAppId(std::string value)
{
    m_App_id = value;
}


std::string ConversionEvents_data_inner::getAppName() const
{
    return m_App_name;
}

void ConversionEvents_data_inner::setAppName(std::string value)
{
    m_App_name = value;
}


std::string ConversionEvents_data_inner::getAppVersion() const
{
    return m_App_version;
}

void ConversionEvents_data_inner::setAppVersion(std::string value)
{
    m_App_version = value;
}


std::string ConversionEvents_data_inner::getDeviceBrand() const
{
    return m_Device_brand;
}

void ConversionEvents_data_inner::setDeviceBrand(std::string value)
{
    m_Device_brand = value;
}


std::string ConversionEvents_data_inner::getDeviceCarrier() const
{
    return m_Device_carrier;
}

void ConversionEvents_data_inner::setDeviceCarrier(std::string value)
{
    m_Device_carrier = value;
}


std::string ConversionEvents_data_inner::getDeviceModel() const
{
    return m_Device_model;
}

void ConversionEvents_data_inner::setDeviceModel(std::string value)
{
    m_Device_model = value;
}


std::string ConversionEvents_data_inner::getDeviceType() const
{
    return m_Device_type;
}

void ConversionEvents_data_inner::setDeviceType(std::string value)
{
    m_Device_type = value;
}


std::string ConversionEvents_data_inner::getOsVersion() const
{
    return m_Os_version;
}

void ConversionEvents_data_inner::setOsVersion(std::string value)
{
    m_Os_version = value;
}


bool ConversionEvents_data_inner::isWifi() const
{
    return m_Wifi;
}

void ConversionEvents_data_inner::setWifi(bool value)
{
    m_Wifi = value;
}


std::string ConversionEvents_data_inner::getLanguage() const
{
    return m_Language;
}

void ConversionEvents_data_inner::setLanguage(std::string value)
{
    m_Language = value;
}



std::vector<ConversionEvents_data_inner> createConversionEvents_data_innerVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<ConversionEvents_data_inner>();
    for (const auto& child: pt) {
        vec.emplace_back(ConversionEvents_data_inner(child.second));
    }

    return vec;
}

}
}
}
}

