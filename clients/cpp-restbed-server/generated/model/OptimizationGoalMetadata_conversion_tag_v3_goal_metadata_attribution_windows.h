/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows.h
 *
 * 
 */

#ifndef OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows_H_
#define OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows 
{
public:
    OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows() = default;
    explicit OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows(boost::property_tree::ptree const& pt);
    virtual ~OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows() = default;

    OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows(const OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows& other) = default; // copy constructor
    OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows(OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows&& other) noexcept = default; // move constructor

    OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows& operator=(const OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows& other) = default; // copy assignment
    OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows& operator=(OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows members

    /// <summary>
    /// 
    /// </summary>
    int32_t getClickWindowDays() const;
    void setClickWindowDays(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getEngagementWindowDays() const;
    void setEngagementWindowDays(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getViewWindowDays() const;
    void setViewWindowDays(int32_t value);

protected:
    int32_t m_Click_window_days = 0;
    int32_t m_Engagement_window_days = 0;
    int32_t m_View_window_days = 0;
};

std::vector<OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows> createOptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windowsVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows>(const OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows& val) {
    return val.toPropertyTree();
}

template<>
inline OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows fromPt<OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows>(const boost::property_tree::ptree& pt) {
    OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OptimizationGoalMetadata_conversion_tag_v3_goal_metadata_attribution_windows_H_ */
