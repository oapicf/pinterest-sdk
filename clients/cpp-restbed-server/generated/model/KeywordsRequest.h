/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * KeywordsRequest.h
 *
 * 
 */

#ifndef KeywordsRequest_H_
#define KeywordsRequest_H_



#include <string>
#include <vector>
#include "KeywordsCommon.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  KeywordsRequest 
{
public:
    KeywordsRequest() = default;
    explicit KeywordsRequest(boost::property_tree::ptree const& pt);
    virtual ~KeywordsRequest() = default;

    KeywordsRequest(const KeywordsRequest& other) = default; // copy constructor
    KeywordsRequest(KeywordsRequest&& other) noexcept = default; // move constructor

    KeywordsRequest& operator=(const KeywordsRequest& other) = default; // copy assignment
    KeywordsRequest& operator=(KeywordsRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// KeywordsRequest members

    /// <summary>
    /// Keyword JSON array. Each array element has 3 fields
    /// </summary>
    std::vector<KeywordsCommon> getKeywords() const;
    void setKeywords(std::vector<KeywordsCommon> value);

    /// <summary>
    /// Keyword parent entity ID (advertiser, campaign, ad group).
    /// </summary>
    std::string getParentId() const;
    void setParentId(std::string value);

protected:
    std::vector<KeywordsCommon> m_Keywords;
    std::string m_Parent_id = "";
};

std::vector<KeywordsRequest> createKeywordsRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<KeywordsRequest>(const KeywordsRequest& val) {
    return val.toPropertyTree();
}

template<>
inline KeywordsRequest fromPt<KeywordsRequest>(const boost::property_tree::ptree& pt) {
    KeywordsRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* KeywordsRequest_H_ */
