/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdsAnalyticsMetricsFilter.h
 *
 * 
 */

#ifndef AdsAnalyticsMetricsFilter_H_
#define AdsAnalyticsMetricsFilter_H_



#include "AdsAnalyticsFilterColumn.h"
#include "AdsAnalyticsFilterOperator.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  AdsAnalyticsMetricsFilter 
{
public:
    AdsAnalyticsMetricsFilter() = default;
    explicit AdsAnalyticsMetricsFilter(boost::property_tree::ptree const& pt);
    virtual ~AdsAnalyticsMetricsFilter() = default;

    AdsAnalyticsMetricsFilter(const AdsAnalyticsMetricsFilter& other) = default; // copy constructor
    AdsAnalyticsMetricsFilter(AdsAnalyticsMetricsFilter&& other) noexcept = default; // move constructor

    AdsAnalyticsMetricsFilter& operator=(const AdsAnalyticsMetricsFilter& other) = default; // copy assignment
    AdsAnalyticsMetricsFilter& operator=(AdsAnalyticsMetricsFilter&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AdsAnalyticsMetricsFilter members

    /// <summary>
    /// 
    /// </summary>
    AdsAnalyticsFilterColumn getField() const;
    void setField(AdsAnalyticsFilterColumn value);

    /// <summary>
    /// 
    /// </summary>
    AdsAnalyticsFilterOperator getROperator() const;
    void setROperator(AdsAnalyticsFilterOperator value);

    /// <summary>
    /// List of values for filtering
    /// </summary>
    std::vector<double> getValues() const;
    void setValues(std::vector<double> value);

protected:
    AdsAnalyticsFilterColumn m_Field = AdsAnalyticsFilterColumn{};
    AdsAnalyticsFilterOperator m_r_operator = AdsAnalyticsFilterOperator{};
    std::vector<double> m_Values;
};

std::vector<AdsAnalyticsMetricsFilter> createAdsAnalyticsMetricsFilterVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AdsAnalyticsMetricsFilter>(const AdsAnalyticsMetricsFilter& val) {
    return val.toPropertyTree();
}

template<>
inline AdsAnalyticsMetricsFilter fromPt<AdsAnalyticsMetricsFilter>(const boost::property_tree::ptree& pt) {
    AdsAnalyticsMetricsFilter ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AdsAnalyticsMetricsFilter_H_ */
