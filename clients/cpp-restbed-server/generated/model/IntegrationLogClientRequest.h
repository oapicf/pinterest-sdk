/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * IntegrationLogClientRequest.h
 *
 * HTTP request details included in the log sent by the client.
 */

#ifndef IntegrationLogClientRequest_H_
#define IntegrationLogClientRequest_H_



#include <string>
#include <map>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// HTTP request details included in the log sent by the client.
/// </summary>
class  IntegrationLogClientRequest 
{
public:
    IntegrationLogClientRequest() = default;
    explicit IntegrationLogClientRequest(boost::property_tree::ptree const& pt);
    virtual ~IntegrationLogClientRequest() = default;

    IntegrationLogClientRequest(const IntegrationLogClientRequest& other) = default; // copy constructor
    IntegrationLogClientRequest(IntegrationLogClientRequest&& other) noexcept = default; // move constructor

    IntegrationLogClientRequest& operator=(const IntegrationLogClientRequest& other) = default; // copy assignment
    IntegrationLogClientRequest& operator=(IntegrationLogClientRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// IntegrationLogClientRequest members

    /// <summary>
    /// 
    /// </summary>
    std::string getMethod() const;
    void setMethod(std::string value);

    /// <summary>
    /// HTTP request host from host header.
    /// </summary>
    std::string getHost() const;
    void setHost(std::string value);

    /// <summary>
    /// HTTP request path.
    /// </summary>
    std::string getPath() const;
    void setPath(std::string value);

    /// <summary>
    /// HTTP request headers as key-value pairs.
    /// </summary>
    std::map<std::string, std::string> getRequestHeaders() const;
    void setRequestHeaders(std::map<std::string, std::string> value);

    /// <summary>
    /// HTTP response headers as key-value pairs.
    /// </summary>
    std::map<std::string, std::string> getResponseHeaders() const;
    void setResponseHeaders(std::map<std::string, std::string> value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getResponseStatusCode() const;
    void setResponseStatusCode(int32_t value);

protected:
    std::string m_Method = "";
    std::string m_Host = "";
    std::string m_Path = "";
    std::map<std::string, std::string> m_Request_headers;
    std::map<std::string, std::string> m_Response_headers;
    int32_t m_Response_status_code = 0;
};

std::vector<IntegrationLogClientRequest> createIntegrationLogClientRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<IntegrationLogClientRequest>(const IntegrationLogClientRequest& val) {
    return val.toPropertyTree();
}

template<>
inline IntegrationLogClientRequest fromPt<IntegrationLogClientRequest>(const boost::property_tree::ptree& pt) {
    IntegrationLogClientRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* IntegrationLogClientRequest_H_ */
