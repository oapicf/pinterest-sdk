/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsFeedProductCounts.h
 *
 * The counts can be null early in the process.
 */

#ifndef CatalogsFeedProductCounts_H_
#define CatalogsFeedProductCounts_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// The counts can be null early in the process.
/// </summary>
class  CatalogsFeedProductCounts 
{
public:
    CatalogsFeedProductCounts() = default;
    explicit CatalogsFeedProductCounts(boost::property_tree::ptree const& pt);
    virtual ~CatalogsFeedProductCounts() = default;

    CatalogsFeedProductCounts(const CatalogsFeedProductCounts& other) = default; // copy constructor
    CatalogsFeedProductCounts(CatalogsFeedProductCounts&& other) noexcept = default; // move constructor

    CatalogsFeedProductCounts& operator=(const CatalogsFeedProductCounts& other) = default; // copy assignment
    CatalogsFeedProductCounts& operator=(CatalogsFeedProductCounts&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsFeedProductCounts members

    /// <summary>
    /// The number of products in the feed file.
    /// </summary>
    int32_t getOriginal() const;
    void setOriginal(int32_t value);

    /// <summary>
    /// The number of products successfully ingested from the feed file.
    /// </summary>
    int32_t getIngested() const;
    void setIngested(int32_t value);

protected:
    int32_t m_Original = 0;
    int32_t m_Ingested = 0;
};

std::vector<CatalogsFeedProductCounts> createCatalogsFeedProductCountsVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsFeedProductCounts>(const CatalogsFeedProductCounts& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsFeedProductCounts fromPt<CatalogsFeedProductCounts>(const boost::property_tree::ptree& pt) {
    CatalogsFeedProductCounts ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsFeedProductCounts_H_ */
