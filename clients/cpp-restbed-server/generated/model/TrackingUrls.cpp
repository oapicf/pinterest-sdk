/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TrackingUrls.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

TrackingUrls::TrackingUrls(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string TrackingUrls::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void TrackingUrls::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree TrackingUrls::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	// generate tree for Impression
    tmp_node.clear();
	if (!m_Impression.empty()) {
        tmp_node = toPt(m_Impression);
		pt.add_child("impression", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Click
    tmp_node.clear();
	if (!m_Click.empty()) {
        tmp_node = toPt(m_Click);
		pt.add_child("click", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Engagement
    tmp_node.clear();
	if (!m_Engagement.empty()) {
        tmp_node = toPt(m_Engagement);
		pt.add_child("engagement", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Buyable_button
    tmp_node.clear();
	if (!m_Buyable_button.empty()) {
        tmp_node = toPt(m_Buyable_button);
		pt.add_child("buyable_button", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Audience_verification
    tmp_node.clear();
	if (!m_Audience_verification.empty()) {
        tmp_node = toPt(m_Audience_verification);
		pt.add_child("audience_verification", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void TrackingUrls::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	// push all items of Impression into member
	if (pt.get_child_optional("impression")) {
        m_Impression = fromPt<std::vector<std::string>>(pt.get_child("impression"));
	}
	// push all items of Click into member
	if (pt.get_child_optional("click")) {
        m_Click = fromPt<std::vector<std::string>>(pt.get_child("click"));
	}
	// push all items of Engagement into member
	if (pt.get_child_optional("engagement")) {
        m_Engagement = fromPt<std::vector<std::string>>(pt.get_child("engagement"));
	}
	// push all items of Buyable_button into member
	if (pt.get_child_optional("buyable_button")) {
        m_Buyable_button = fromPt<std::vector<std::string>>(pt.get_child("buyable_button"));
	}
	// push all items of Audience_verification into member
	if (pt.get_child_optional("audience_verification")) {
        m_Audience_verification = fromPt<std::vector<std::string>>(pt.get_child("audience_verification"));
	}
}

std::vector<std::string> TrackingUrls::getImpression() const
{
    return m_Impression;
}

void TrackingUrls::setImpression(std::vector<std::string> value)
{
    m_Impression = value;
}


std::vector<std::string> TrackingUrls::getClick() const
{
    return m_Click;
}

void TrackingUrls::setClick(std::vector<std::string> value)
{
    m_Click = value;
}


std::vector<std::string> TrackingUrls::getEngagement() const
{
    return m_Engagement;
}

void TrackingUrls::setEngagement(std::vector<std::string> value)
{
    m_Engagement = value;
}


std::vector<std::string> TrackingUrls::getBuyableButton() const
{
    return m_Buyable_button;
}

void TrackingUrls::setBuyableButton(std::vector<std::string> value)
{
    m_Buyable_button = value;
}


std::vector<std::string> TrackingUrls::getAudienceVerification() const
{
    return m_Audience_verification;
}

void TrackingUrls::setAudienceVerification(std::vector<std::string> value)
{
    m_Audience_verification = value;
}



std::vector<TrackingUrls> createTrackingUrlsVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<TrackingUrls>();
    for (const auto& child: pt) {
        vec.emplace_back(TrackingUrls(child.second));
    }

    return vec;
}

}
}
}
}

