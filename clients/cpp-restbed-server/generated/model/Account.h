/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Account.h
 *
 * 
 */

#ifndef Account_H_
#define Account_H_



#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  Account 
{
public:
    Account() = default;
    explicit Account(boost::property_tree::ptree const& pt);
    virtual ~Account() = default;

    Account(const Account& other) = default; // copy constructor
    Account(Account&& other) noexcept = default; // move constructor

    Account& operator=(const Account& other) = default; // copy assignment
    Account& operator=(Account&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// Account members

    /// <summary>
    /// Type of account
    /// </summary>
    std::string getAccountType() const;
    void setAccountType(std::string value);

    /// <summary>
    /// User account ID.
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getProfileImage() const;
    void setProfileImage(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getWebsiteUrl() const;
    void setWebsiteUrl(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getUsername() const;
    void setUsername(std::string value);

    /// <summary>
    /// Profile about description.
    /// </summary>
    std::string getAbout() const;
    void setAbout(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getBusinessName() const;
    void setBusinessName(std::string value);

    /// <summary>
    /// User account board count.&lt;br/&gt;**Note**: Board count on user account level may differ from counts found elsewhere due to attribution of collaborative Boards.
    /// </summary>
    int32_t getBoardCount() const;
    void setBoardCount(int32_t value);

    /// <summary>
    /// User account pin count. This includes both created and saved pins.
    /// </summary>
    int32_t getPinCount() const;
    void setPinCount(int32_t value);

    /// <summary>
    /// User account follower count.
    /// </summary>
    int32_t getFollowerCount() const;
    void setFollowerCount(int32_t value);

    /// <summary>
    /// User account following count.
    /// </summary>
    int32_t getFollowingCount() const;
    void setFollowingCount(int32_t value);

    /// <summary>
    /// User account monthly views.
    /// </summary>
    int32_t getMonthlyViews() const;
    void setMonthlyViews(int32_t value);

protected:
    std::string m_Account_type = "";
    std::string m_Id = "";
    std::string m_Profile_image = "";
    std::string m_Website_url = "";
    std::string m_Username = "";
    std::string m_About = "";
    std::string m_Business_name = "";
    int32_t m_Board_count = 0;
    int32_t m_Pin_count = 0;
    int32_t m_Follower_count = 0;
    int32_t m_Following_count = 0;
    int32_t m_Monthly_views = 0;
};

std::vector<Account> createAccountVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<Account>(const Account& val) {
    return val.toPropertyTree();
}

template<>
inline Account fromPt<Account>(const boost::property_tree::ptree& pt) {
    Account ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* Account_H_ */
