/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Feeds_create_request.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

Feeds_create_request::Feeds_create_request(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string Feeds_create_request::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void Feeds_create_request::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree Feeds_create_request::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("name", m_Name);
	pt.add_child("default_locale", m_Default_locale.toPropertyTree());
	pt.add_child("credentials", m_Credentials.toPropertyTree());
	pt.put("location", m_Location);
	pt.add_child("preferred_processing_schedule", m_Preferred_processing_schedule.toPropertyTree());
	pt.put("status", m_Status);
	pt.add_child("status", m_Status.toPropertyTree());
	pt.put("catalog_id", m_Catalog_id);
	return pt;
}

void Feeds_create_request::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Name = pt.get("name", "");
	if (pt.get_child_optional("default_locale")) {
        m_Default_locale = fromPt<CatalogsFeedsCreateRequest_default_locale>(pt.get_child("default_locale"));
	}
	if (pt.get_child_optional("credentials")) {
        m_Credentials = fromPt<CatalogsFeedCredentials>(pt.get_child("credentials"));
	}
	m_Location = pt.get("location", "");
	if (pt.get_child_optional("preferred_processing_schedule")) {
        m_Preferred_processing_schedule = fromPt<CatalogsFeedProcessingSchedule>(pt.get_child("preferred_processing_schedule"));
	}
	m_Status = pt.get("status", "");
	if (pt.get_child_optional("status")) {
        m_Status = fromPt<CatalogsStatus>(pt.get_child("status"));
	}
	m_Catalog_id = pt.get("catalog_id", "");
}

NullableCurrency Feeds_create_request::getDefaultCurrency() const
{
    return m_Default_currency;
}

void Feeds_create_request::setDefaultCurrency(NullableCurrency value)
{
    m_Default_currency = value;
}


std::string Feeds_create_request::getName() const
{
    return m_Name;
}

void Feeds_create_request::setName(std::string value)
{
    m_Name = value;
}


CatalogsFormat Feeds_create_request::getFormat() const
{
    return m_Format;
}

void Feeds_create_request::setFormat(CatalogsFormat value)
{
    m_Format = value;
}


CatalogsFeedsCreateRequest_default_locale Feeds_create_request::getDefaultLocale() const
{
    return m_Default_locale;
}

void Feeds_create_request::setDefaultLocale(CatalogsFeedsCreateRequest_default_locale value)
{
    m_Default_locale = value;
}


CatalogsFeedCredentials Feeds_create_request::getCredentials() const
{
    return m_Credentials;
}

void Feeds_create_request::setCredentials(CatalogsFeedCredentials value)
{
    m_Credentials = value;
}


std::string Feeds_create_request::getLocation() const
{
    return m_Location;
}

void Feeds_create_request::setLocation(std::string value)
{
    m_Location = value;
}


CatalogsFeedProcessingSchedule Feeds_create_request::getPreferredProcessingSchedule() const
{
    return m_Preferred_processing_schedule;
}

void Feeds_create_request::setPreferredProcessingSchedule(CatalogsFeedProcessingSchedule value)
{
    m_Preferred_processing_schedule = value;
}


CatalogsType Feeds_create_request::getCatalogType() const
{
    return m_Catalog_type;
}

void Feeds_create_request::setCatalogType(CatalogsType value)
{
    m_Catalog_type = value;
}


Country Feeds_create_request::getDefaultCountry() const
{
    return m_Default_country;
}

void Feeds_create_request::setDefaultCountry(Country value)
{
    m_Default_country = value;
}


ProductAvailabilityType Feeds_create_request::getDefaultAvailability() const
{
    return m_Default_availability;
}

void Feeds_create_request::setDefaultAvailability(ProductAvailabilityType value)
{
    m_Default_availability = value;
}


CatalogsStatus Feeds_create_request::getStatus() const
{
    return m_Status;
}

void Feeds_create_request::setStatus(CatalogsStatus value)
{
    m_Status = value;
}


std::string Feeds_create_request::getCatalogId() const
{
    return m_Catalog_id;
}

void Feeds_create_request::setCatalogId(std::string value)
{
    m_Catalog_id = value;
}



std::vector<Feeds_create_request> createFeeds_create_requestVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<Feeds_create_request>();
    for (const auto& child: pt) {
        vec.emplace_back(Feeds_create_request(child.second));
    }

    return vec;
}

}
}
}
}

