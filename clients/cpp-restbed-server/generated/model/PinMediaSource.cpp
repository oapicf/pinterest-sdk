/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PinMediaSource.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

PinMediaSource::PinMediaSource(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string PinMediaSource::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void PinMediaSource::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree PinMediaSource::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("source_type", m_Source_type);
	pt.put("content_type", m_Content_type);
	pt.put("data", m_Data);
	pt.put("is_standard", m_Is_standard);
	pt.put("url", m_Url);
	pt.put("cover_image_url", m_Cover_image_url);
	pt.put("cover_image_content_type", m_Cover_image_content_type);
	pt.put("cover_image_data", m_Cover_image_data);
	pt.put("media_id", m_Media_id);
	// generate tree for Items
    tmp_node.clear();
	if (!m_Items.empty()) {
        tmp_node = toPt(m_Items);
		pt.add_child("items", tmp_node);
		tmp_node.clear();
	}
	pt.put("index", m_Index);
	pt.put("is_affiliate_link", m_Is_affiliate_link);
	return pt;
}

void PinMediaSource::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	setSourceType(pt.get("source_type", ""));
	setContentType(pt.get("content_type", ""));
	m_Data = pt.get("data", "");
	m_Is_standard = pt.get("is_standard", true);
	m_Url = pt.get("url", "");
	m_Cover_image_url = pt.get("cover_image_url", "");
	setCoverImageContentType(pt.get("cover_image_content_type", ""));
	m_Cover_image_data = pt.get("cover_image_data", "");
	m_Media_id = pt.get("media_id", "");
	// push all items of Items into member
	if (pt.get_child_optional("items")) {
        m_Items = fromPt<std::vector<PinMediaSourceImagesURL_items_inner>>(pt.get_child("items"));
	}
	m_Index = pt.get("index", 0);
	m_Is_affiliate_link = pt.get("is_affiliate_link", false);
}

std::string PinMediaSource::getSourceType() const
{
    return m_Source_type;
}

void PinMediaSource::setSourceType(std::string value)
{
    static const std::array<std::string, 1> allowedValues = {
        "pin_url"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Source_type = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


std::string PinMediaSource::getContentType() const
{
    return m_Content_type;
}

void PinMediaSource::setContentType(std::string value)
{
    static const std::array<std::string, 2> allowedValues = {
        "image/jpeg", "image/png"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Content_type = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


std::string PinMediaSource::getData() const
{
    return m_Data;
}

void PinMediaSource::setData(std::string value)
{
    m_Data = value;
}


bool PinMediaSource::isIsStandard() const
{
    return m_Is_standard;
}

void PinMediaSource::setIsStandard(bool value)
{
    m_Is_standard = value;
}


std::string PinMediaSource::getUrl() const
{
    return m_Url;
}

void PinMediaSource::setUrl(std::string value)
{
    m_Url = value;
}


std::string PinMediaSource::getCoverImageUrl() const
{
    return m_Cover_image_url;
}

void PinMediaSource::setCoverImageUrl(std::string value)
{
    m_Cover_image_url = value;
}


std::string PinMediaSource::getCoverImageContentType() const
{
    return m_Cover_image_content_type;
}

void PinMediaSource::setCoverImageContentType(std::string value)
{
    static const std::array<std::string, 2> allowedValues = {
        "image/jpeg", "image/png"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Cover_image_content_type = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


std::string PinMediaSource::getCoverImageData() const
{
    return m_Cover_image_data;
}

void PinMediaSource::setCoverImageData(std::string value)
{
    m_Cover_image_data = value;
}


std::string PinMediaSource::getMediaId() const
{
    return m_Media_id;
}

void PinMediaSource::setMediaId(std::string value)
{
    m_Media_id = value;
}


std::vector<PinMediaSourceImagesURL_items_inner> PinMediaSource::getItems() const
{
    return m_Items;
}

void PinMediaSource::setItems(std::vector<PinMediaSourceImagesURL_items_inner> value)
{
    m_Items = value;
}


int32_t PinMediaSource::getIndex() const
{
    return m_Index;
}

void PinMediaSource::setIndex(int32_t value)
{
    m_Index = value;
}


bool PinMediaSource::isIsAffiliateLink() const
{
    return m_Is_affiliate_link;
}

void PinMediaSource::setIsAffiliateLink(bool value)
{
    m_Is_affiliate_link = value;
}



std::vector<PinMediaSource> createPinMediaSourceVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<PinMediaSource>();
    for (const auto& child: pt) {
        vec.emplace_back(PinMediaSource(child.second));
    }

    return vec;
}

}
}
}
}

