/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ConversionEvents_data_inner_custom_data.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ConversionEvents_data_inner_custom_data::ConversionEvents_data_inner_custom_data(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string ConversionEvents_data_inner_custom_data::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void ConversionEvents_data_inner_custom_data::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree ConversionEvents_data_inner_custom_data::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("currency", m_Currency);
	pt.put("value", m_Value);
	// generate tree for Content_ids
    tmp_node.clear();
	if (!m_Content_ids.empty()) {
        tmp_node = toPt(m_Content_ids);
		pt.add_child("content_ids", tmp_node);
		tmp_node.clear();
	}
	pt.put("content_name", m_Content_name);
	pt.put("content_category", m_Content_category);
	pt.put("content_brand", m_Content_brand);
	// generate tree for Contents
    tmp_node.clear();
	if (!m_Contents.empty()) {
        tmp_node = toPt(m_Contents);
		pt.add_child("contents", tmp_node);
		tmp_node.clear();
	}
	pt.put("num_items", m_Num_items);
	pt.put("order_id", m_Order_id);
	pt.put("search_string", m_Search_string);
	pt.put("opt_out_type", m_Opt_out_type);
	pt.put("np", m_Np);
	return pt;
}

void ConversionEvents_data_inner_custom_data::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Currency = pt.get("currency", "");
	m_Value = pt.get("value", "");
	// push all items of Content_ids into member
	if (pt.get_child_optional("content_ids")) {
        m_Content_ids = fromPt<std::vector<std::string>>(pt.get_child("content_ids"));
	}
	m_Content_name = pt.get("content_name", "");
	m_Content_category = pt.get("content_category", "");
	m_Content_brand = pt.get("content_brand", "");
	// push all items of Contents into member
	if (pt.get_child_optional("contents")) {
        m_Contents = fromPt<std::vector<ConversionEvents_data_inner_custom_data_contents_inner>>(pt.get_child("contents"));
	}
	m_Num_items = pt.get("num_items", 0L);
	m_Order_id = pt.get("order_id", "");
	m_Search_string = pt.get("search_string", "");
	m_Opt_out_type = pt.get("opt_out_type", "");
	m_Np = pt.get("np", "");
}

std::string ConversionEvents_data_inner_custom_data::getCurrency() const
{
    return m_Currency;
}

void ConversionEvents_data_inner_custom_data::setCurrency(std::string value)
{
    m_Currency = value;
}


std::string ConversionEvents_data_inner_custom_data::getValue() const
{
    return m_Value;
}

void ConversionEvents_data_inner_custom_data::setValue(std::string value)
{
    m_Value = value;
}


std::vector<std::string> ConversionEvents_data_inner_custom_data::getContentIds() const
{
    return m_Content_ids;
}

void ConversionEvents_data_inner_custom_data::setContentIds(std::vector<std::string> value)
{
    m_Content_ids = value;
}


std::string ConversionEvents_data_inner_custom_data::getContentName() const
{
    return m_Content_name;
}

void ConversionEvents_data_inner_custom_data::setContentName(std::string value)
{
    m_Content_name = value;
}


std::string ConversionEvents_data_inner_custom_data::getContentCategory() const
{
    return m_Content_category;
}

void ConversionEvents_data_inner_custom_data::setContentCategory(std::string value)
{
    m_Content_category = value;
}


std::string ConversionEvents_data_inner_custom_data::getContentBrand() const
{
    return m_Content_brand;
}

void ConversionEvents_data_inner_custom_data::setContentBrand(std::string value)
{
    m_Content_brand = value;
}


std::vector<ConversionEvents_data_inner_custom_data_contents_inner> ConversionEvents_data_inner_custom_data::getContents() const
{
    return m_Contents;
}

void ConversionEvents_data_inner_custom_data::setContents(std::vector<ConversionEvents_data_inner_custom_data_contents_inner> value)
{
    m_Contents = value;
}


int64_t ConversionEvents_data_inner_custom_data::getNumItems() const
{
    return m_Num_items;
}

void ConversionEvents_data_inner_custom_data::setNumItems(int64_t value)
{
    m_Num_items = value;
}


std::string ConversionEvents_data_inner_custom_data::getOrderId() const
{
    return m_Order_id;
}

void ConversionEvents_data_inner_custom_data::setOrderId(std::string value)
{
    m_Order_id = value;
}


std::string ConversionEvents_data_inner_custom_data::getSearchString() const
{
    return m_Search_string;
}

void ConversionEvents_data_inner_custom_data::setSearchString(std::string value)
{
    m_Search_string = value;
}


std::string ConversionEvents_data_inner_custom_data::getOptOutType() const
{
    return m_Opt_out_type;
}

void ConversionEvents_data_inner_custom_data::setOptOutType(std::string value)
{
    m_Opt_out_type = value;
}


std::string ConversionEvents_data_inner_custom_data::getNp() const
{
    return m_Np;
}

void ConversionEvents_data_inner_custom_data::setNp(std::string value)
{
    m_Np = value;
}



std::vector<ConversionEvents_data_inner_custom_data> createConversionEvents_data_inner_custom_dataVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<ConversionEvents_data_inner_custom_data>();
    for (const auto& child: pt) {
        vec.emplace_back(ConversionEvents_data_inner_custom_data(child.second));
    }

    return vec;
}

}
}
}
}

