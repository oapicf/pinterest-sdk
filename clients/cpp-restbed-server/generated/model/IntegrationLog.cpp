/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "IntegrationLog.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

IntegrationLog::IntegrationLog(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string IntegrationLog::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void IntegrationLog::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree IntegrationLog::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("client_timestamp", m_Client_timestamp);
	pt.put("event_type", m_Event_type);
	pt.put("log_level", m_Log_level);
	pt.put("external_business_id", m_External_business_id);
	pt.put("advertiser_id", m_Advertiser_id);
	pt.put("merchant_id", m_Merchant_id);
	pt.put("tag_id", m_Tag_id);
	pt.put("feed_profile_id", m_Feed_profile_id);
	pt.put("message", m_Message);
	pt.put("app_version_number", m_App_version_number);
	pt.put("platform_version_number", m_Platform_version_number);
	pt.add_child("error", m_Error.toPropertyTree());
	pt.add_child("request", m_Request.toPropertyTree());
	return pt;
}

void IntegrationLog::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Client_timestamp = pt.get("client_timestamp", 0);
	setEventType(pt.get("event_type", ""));
	setLogLevel(pt.get("log_level", ""));
	m_External_business_id = pt.get("external_business_id", "");
	m_Advertiser_id = pt.get("advertiser_id", "");
	m_Merchant_id = pt.get("merchant_id", "");
	m_Tag_id = pt.get("tag_id", "");
	m_Feed_profile_id = pt.get("feed_profile_id", "");
	m_Message = pt.get("message", "");
	m_App_version_number = pt.get("app_version_number", "");
	m_Platform_version_number = pt.get("platform_version_number", "");
	if (pt.get_child_optional("error")) {
        m_Error = fromPt<IntegrationLogClientError>(pt.get_child("error"));
	}
	if (pt.get_child_optional("request")) {
        m_Request = fromPt<IntegrationLogClientRequest>(pt.get_child("request"));
	}
}

int32_t IntegrationLog::getClientTimestamp() const
{
    return m_Client_timestamp;
}

void IntegrationLog::setClientTimestamp(int32_t value)
{
    m_Client_timestamp = value;
}


std::string IntegrationLog::getEventType() const
{
    return m_Event_type;
}

void IntegrationLog::setEventType(std::string value)
{
    static const std::array<std::string, 2> allowedValues = {
        "APP", "API"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Event_type = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


std::string IntegrationLog::getLogLevel() const
{
    return m_Log_level;
}

void IntegrationLog::setLogLevel(std::string value)
{
    static const std::array<std::string, 3> allowedValues = {
        "INFO", "WARN", "ERROR"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Log_level = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


std::string IntegrationLog::getExternalBusinessId() const
{
    return m_External_business_id;
}

void IntegrationLog::setExternalBusinessId(std::string value)
{
    m_External_business_id = value;
}


std::string IntegrationLog::getAdvertiserId() const
{
    return m_Advertiser_id;
}

void IntegrationLog::setAdvertiserId(std::string value)
{
    m_Advertiser_id = value;
}


std::string IntegrationLog::getMerchantId() const
{
    return m_Merchant_id;
}

void IntegrationLog::setMerchantId(std::string value)
{
    m_Merchant_id = value;
}


std::string IntegrationLog::getTagId() const
{
    return m_Tag_id;
}

void IntegrationLog::setTagId(std::string value)
{
    m_Tag_id = value;
}


std::string IntegrationLog::getFeedProfileId() const
{
    return m_Feed_profile_id;
}

void IntegrationLog::setFeedProfileId(std::string value)
{
    m_Feed_profile_id = value;
}


std::string IntegrationLog::getMessage() const
{
    return m_Message;
}

void IntegrationLog::setMessage(std::string value)
{
    m_Message = value;
}


std::string IntegrationLog::getAppVersionNumber() const
{
    return m_App_version_number;
}

void IntegrationLog::setAppVersionNumber(std::string value)
{
    m_App_version_number = value;
}


std::string IntegrationLog::getPlatformVersionNumber() const
{
    return m_Platform_version_number;
}

void IntegrationLog::setPlatformVersionNumber(std::string value)
{
    m_Platform_version_number = value;
}


IntegrationLogClientError IntegrationLog::getError() const
{
    return m_Error;
}

void IntegrationLog::setError(IntegrationLogClientError value)
{
    m_Error = value;
}


IntegrationLogClientRequest IntegrationLog::getRequest() const
{
    return m_Request;
}

void IntegrationLog::setRequest(IntegrationLogClientRequest value)
{
    m_Request = value;
}



std::vector<IntegrationLog> createIntegrationLogVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<IntegrationLog>();
    for (const auto& child: pt) {
        vec.emplace_back(IntegrationLog(child.second));
    }

    return vec;
}

}
}
}
}

