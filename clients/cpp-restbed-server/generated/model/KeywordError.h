/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * KeywordError.h
 *
 * 
 */

#ifndef KeywordError_H_
#define KeywordError_H_



#include "Keyword.h"
#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  KeywordError 
{
public:
    KeywordError() = default;
    explicit KeywordError(boost::property_tree::ptree const& pt);
    virtual ~KeywordError() = default;

    KeywordError(const KeywordError& other) = default; // copy constructor
    KeywordError(KeywordError&& other) noexcept = default; // move constructor

    KeywordError& operator=(const KeywordError& other) = default; // copy assignment
    KeywordError& operator=(KeywordError&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// KeywordError members

    /// <summary>
    /// 
    /// </summary>
    Keyword getData() const;
    void setData(Keyword value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::string> getErrorMessages() const;
    void setErrorMessages(std::vector<std::string> value);

protected:
    Keyword m_Data;
    std::vector<std::string> m_Error_messages;
};

std::vector<KeywordError> createKeywordErrorVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<KeywordError>(const KeywordError& val) {
    return val.toPropertyTree();
}

template<>
inline KeywordError fromPt<KeywordError>(const boost::property_tree::ptree& pt) {
    KeywordError ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* KeywordError_H_ */
