/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsHotelProduct.h
 *
 * 
 */

#ifndef CatalogsHotelProduct_H_
#define CatalogsHotelProduct_H_



#include "CatalogsHotelProductMetadata.h"
#include <string>
#include "Pin.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CatalogsHotelProduct 
{
public:
    CatalogsHotelProduct() = default;
    explicit CatalogsHotelProduct(boost::property_tree::ptree const& pt);
    virtual ~CatalogsHotelProduct() = default;

    CatalogsHotelProduct(const CatalogsHotelProduct& other) = default; // copy constructor
    CatalogsHotelProduct(CatalogsHotelProduct&& other) noexcept = default; // move constructor

    CatalogsHotelProduct& operator=(const CatalogsHotelProduct& other) = default; // copy assignment
    CatalogsHotelProduct& operator=(CatalogsHotelProduct&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsHotelProduct members

    /// <summary>
    /// 
    /// </summary>
    std::string getCatalogType() const;
    void setCatalogType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsHotelProductMetadata getMetadata() const;
    void setMetadata(CatalogsHotelProductMetadata value);

    /// <summary>
    /// 
    /// </summary>
    Pin getPin() const;
    void setPin(Pin value);

protected:
    std::string m_Catalog_type = "";
    CatalogsHotelProductMetadata m_Metadata;
    Pin m_Pin;
};

std::vector<CatalogsHotelProduct> createCatalogsHotelProductVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsHotelProduct>(const CatalogsHotelProduct& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsHotelProduct fromPt<CatalogsHotelProduct>(const boost::property_tree::ptree& pt) {
    CatalogsHotelProduct ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsHotelProduct_H_ */
