/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsUpsertCreativeAssetsItem.h
 *
 * A creative assets item to be upserted.
 */

#ifndef CatalogsUpsertCreativeAssetsItem_H_
#define CatalogsUpsertCreativeAssetsItem_H_



#include "CatalogsCreativeAssetsAttributes.h"
#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// A creative assets item to be upserted.
/// </summary>
class  CatalogsUpsertCreativeAssetsItem 
{
public:
    CatalogsUpsertCreativeAssetsItem() = default;
    explicit CatalogsUpsertCreativeAssetsItem(boost::property_tree::ptree const& pt);
    virtual ~CatalogsUpsertCreativeAssetsItem() = default;

    CatalogsUpsertCreativeAssetsItem(const CatalogsUpsertCreativeAssetsItem& other) = default; // copy constructor
    CatalogsUpsertCreativeAssetsItem(CatalogsUpsertCreativeAssetsItem&& other) noexcept = default; // move constructor

    CatalogsUpsertCreativeAssetsItem& operator=(const CatalogsUpsertCreativeAssetsItem& other) = default; // copy assignment
    CatalogsUpsertCreativeAssetsItem& operator=(CatalogsUpsertCreativeAssetsItem&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsUpsertCreativeAssetsItem members

    /// <summary>
    /// The catalog creative assets id in the merchant namespace
    /// </summary>
    std::string getCreativeAssetsId() const;
    void setCreativeAssetsId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getOperation() const;
    void setOperation(std::string value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsCreativeAssetsAttributes getAttributes() const;
    void setAttributes(CatalogsCreativeAssetsAttributes value);

protected:
    std::string m_Creative_assets_id = "";
    std::string m_Operation = "";
    CatalogsCreativeAssetsAttributes m_Attributes;
};

std::vector<CatalogsUpsertCreativeAssetsItem> createCatalogsUpsertCreativeAssetsItemVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsUpsertCreativeAssetsItem>(const CatalogsUpsertCreativeAssetsItem& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsUpsertCreativeAssetsItem fromPt<CatalogsUpsertCreativeAssetsItem>(const boost::property_tree::ptree& pt) {
    CatalogsUpsertCreativeAssetsItem ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsUpsertCreativeAssetsItem_H_ */
