/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ProductType1Filter.h
 *
 * 
 */

#ifndef ProductType1Filter_H_
#define ProductType1Filter_H_



#include "CatalogsProductGroupMultipleStringListCriteria.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ProductType1Filter 
{
public:
    ProductType1Filter() = default;
    explicit ProductType1Filter(boost::property_tree::ptree const& pt);
    virtual ~ProductType1Filter() = default;

    ProductType1Filter(const ProductType1Filter& other) = default; // copy constructor
    ProductType1Filter(ProductType1Filter&& other) noexcept = default; // move constructor

    ProductType1Filter& operator=(const ProductType1Filter& other) = default; // copy assignment
    ProductType1Filter& operator=(ProductType1Filter&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ProductType1Filter members

    /// <summary>
    /// 
    /// </summary>
    CatalogsProductGroupMultipleStringListCriteria getPRODUCTTYPE1() const;
    void setPRODUCTTYPE1(CatalogsProductGroupMultipleStringListCriteria value);

protected:
    CatalogsProductGroupMultipleStringListCriteria m_PRODUCT_TYPE_1 = CatalogsProductGroupMultipleStringListCriteria{};
};

std::vector<ProductType1Filter> createProductType1FilterVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ProductType1Filter>(const ProductType1Filter& val) {
    return val.toPropertyTree();
}

template<>
inline ProductType1Filter fromPt<ProductType1Filter>(const boost::property_tree::ptree& pt) {
    ProductType1Filter ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ProductType1Filter_H_ */
