/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * InviteBusinessRoleBinding.h
 *
 * An invite object if the invite/request was successfully updated. Will only be provided if the an invite/request is successfully updated.
 */

#ifndef InviteBusinessRoleBinding_H_
#define InviteBusinessRoleBinding_H_



#include <string>
#include "BaseInviteDataResponse_invite_data.h"
#include "BusinessAccessUserSummary.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "BaseInviteDataResponse.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// An invite object if the invite/request was successfully updated. Will only be provided if the an invite/request is successfully updated.
/// </summary>
class  InviteBusinessRoleBinding : public BaseInviteDataResponse
{
public:
    InviteBusinessRoleBinding() = default;
    explicit InviteBusinessRoleBinding(boost::property_tree::ptree const& pt);
    virtual ~InviteBusinessRoleBinding() = default;

    InviteBusinessRoleBinding(const InviteBusinessRoleBinding& other) = default; // copy constructor
    InviteBusinessRoleBinding(InviteBusinessRoleBinding&& other) noexcept = default; // move constructor

    InviteBusinessRoleBinding& operator=(const InviteBusinessRoleBinding& other) = default; // copy assignment
    InviteBusinessRoleBinding& operator=(InviteBusinessRoleBinding&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// InviteBusinessRoleBinding members

    /// <summary>
    /// Unique identifier for the business that created the invite/request.
    /// </summary>
    std::string getCreatedByBusinessId() const;
    void setCreatedByBusinessId(std::string value);

    /// <summary>
    /// Unique identifier for the user that created the invite/request.
    /// </summary>
    std::string getCreatedByUserId() const;
    void setCreatedByUserId(std::string value);

    /// <summary>
    /// Metadata for the user that updated the invite/request.
    /// </summary>
    BusinessAccessUserSummary getUser() const;
    void setUser(BusinessAccessUserSummary value);

    /// <summary>
    /// Unique identifier of the invite/request.
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    BaseInviteDataResponse_invite_data getInviteData() const;
    void setInviteData(BaseInviteDataResponse_invite_data value);

    /// <summary>
    /// Indicates whether the invite/request was received.
    /// </summary>
    bool isIsReceivedInvite() const;
    void setIsReceivedInvite(bool value);

protected:
    std::string m_Created_by_business_id = "";
    std::string m_Created_by_user_id = "";
    BusinessAccessUserSummary m_User;
    std::string m_Id = "";
    BaseInviteDataResponse_invite_data m_Invite_data;
    bool m_Is_received_invite = false;
};

std::vector<InviteBusinessRoleBinding> createInviteBusinessRoleBindingVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<InviteBusinessRoleBinding>(const InviteBusinessRoleBinding& val) {
    return val.toPropertyTree();
}

template<>
inline InviteBusinessRoleBinding fromPt<InviteBusinessRoleBinding>(const boost::property_tree::ptree& pt) {
    InviteBusinessRoleBinding ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* InviteBusinessRoleBinding_H_ */
