/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsCreativeAssetsAttributes.h
 *
 * 
 */

#ifndef CatalogsCreativeAssetsAttributes_H_
#define CatalogsCreativeAssetsAttributes_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "CatalogsUpdatableCreativeAssetsAttributes.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CatalogsCreativeAssetsAttributes : public CatalogsUpdatableCreativeAssetsAttributes
{
public:
    CatalogsCreativeAssetsAttributes() = default;
    explicit CatalogsCreativeAssetsAttributes(boost::property_tree::ptree const& pt);
    virtual ~CatalogsCreativeAssetsAttributes() = default;

    CatalogsCreativeAssetsAttributes(const CatalogsCreativeAssetsAttributes& other) = default; // copy constructor
    CatalogsCreativeAssetsAttributes(CatalogsCreativeAssetsAttributes&& other) noexcept = default; // move constructor

    CatalogsCreativeAssetsAttributes& operator=(const CatalogsCreativeAssetsAttributes& other) = default; // copy assignment
    CatalogsCreativeAssetsAttributes& operator=(CatalogsCreativeAssetsAttributes&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsCreativeAssetsAttributes members

    /// <summary>
    /// The name of the creative assets.
    /// </summary>
    std::string getTitle() const;
    void setTitle(std::string value);

    /// <summary>
    /// Brief description of the creative assets.
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string value);

    /// <summary>
    /// Link to the creative assets page.
    /// </summary>
    std::string getLink() const;
    void setLink(std::string value);

    /// <summary>
    /// IOS deep link to the creative assets page.
    /// </summary>
    std::string getIosDeepLink() const;
    void setIosDeepLink(std::string value);

    /// <summary>
    /// Link to the creative assets page.
    /// </summary>
    std::string getAndroidDeepLink() const;
    void setAndroidDeepLink(std::string value);

    /// <summary>
    /// The categorization of the product based on the standardized Google Product Taxonomy. This is a set taxonomy. Both the text values and numeric codes are accepted.
    /// </summary>
    std::string getGoogleProductCategory() const;
    void setGoogleProductCategory(std::string value);

    /// <summary>
    /// Custom grouping of creative assets.
    /// </summary>
    std::string getCustomLabel0() const;
    void setCustomLabel0(std::string value);

    /// <summary>
    /// Custom grouping of creative assets.
    /// </summary>
    std::string getCustomLabel1() const;
    void setCustomLabel1(std::string value);

    /// <summary>
    /// Custom grouping of creative assets.
    /// </summary>
    std::string getCustomLabel2() const;
    void setCustomLabel2(std::string value);

    /// <summary>
    /// Custom grouping of creative assets.
    /// </summary>
    std::string getCustomLabel3() const;
    void setCustomLabel3(std::string value);

    /// <summary>
    /// Custom grouping of creative assets.
    /// </summary>
    std::string getCustomLabel4() const;
    void setCustomLabel4(std::string value);

    /// <summary>
    /// Visibility of the creative assets. Must be one of the following values (upper or lowercase): ‘visible’, ‘hidden’.
    /// </summary>
    std::string getVisibility() const;
    void setVisibility(std::string value);

    /// <summary>
    /// The creative assets image.
    /// </summary>
    std::string getImageLink() const;
    void setImageLink(std::string value);

    /// <summary>
    /// The creative assets video.
    /// </summary>
    std::string getVideoLink() const;
    void setVideoLink(std::string value);

protected:
    std::string m_Title = "";
    std::string m_Description = "";
    std::string m_Link = "";
    std::string m_Ios_deep_link = "";
    std::string m_Android_deep_link = "";
    std::string m_Google_product_category = "";
    std::string m_Custom_label_0 = "";
    std::string m_Custom_label_1 = "";
    std::string m_Custom_label_2 = "";
    std::string m_Custom_label_3 = "";
    std::string m_Custom_label_4 = "";
    std::string m_Visibility = "";
    std::string m_Image_link = "";
    std::string m_Video_link = "";
};

std::vector<CatalogsCreativeAssetsAttributes> createCatalogsCreativeAssetsAttributesVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsCreativeAssetsAttributes>(const CatalogsCreativeAssetsAttributes& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsCreativeAssetsAttributes fromPt<CatalogsCreativeAssetsAttributes>(const boost::property_tree::ptree& pt) {
    CatalogsCreativeAssetsAttributes ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsCreativeAssetsAttributes_H_ */
