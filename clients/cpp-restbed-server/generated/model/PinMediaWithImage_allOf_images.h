/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PinMediaWithImage_allOf_images.h
 *
 * 
 */

#ifndef PinMediaWithImage_allOf_images_H_
#define PinMediaWithImage_allOf_images_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  PinMediaWithImage_allOf_images 
{
public:
    PinMediaWithImage_allOf_images() = default;
    explicit PinMediaWithImage_allOf_images(boost::property_tree::ptree const& pt);
    virtual ~PinMediaWithImage_allOf_images() = default;

    PinMediaWithImage_allOf_images(const PinMediaWithImage_allOf_images& other) = default; // copy constructor
    PinMediaWithImage_allOf_images(PinMediaWithImage_allOf_images&& other) noexcept = default; // move constructor

    PinMediaWithImage_allOf_images& operator=(const PinMediaWithImage_allOf_images& other) = default; // copy assignment
    PinMediaWithImage_allOf_images& operator=(PinMediaWithImage_allOf_images&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// PinMediaWithImage_allOf_images members

    /// <summary>
    /// 
    /// </summary>
    std::string getR150x150() const;
    void setR150x150(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getR400x300() const;
    void setR400x300(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getR600x() const;
    void setR600x(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getR1200x() const;
    void setR1200x(std::string value);

protected:
    std::string m_r_150x150 = nullptr;
    std::string m_r_400x300 = nullptr;
    std::string m_r_600x = nullptr;
    std::string m_r_1200x = nullptr;
};

std::vector<PinMediaWithImage_allOf_images> createPinMediaWithImage_allOf_imagesVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<PinMediaWithImage_allOf_images>(const PinMediaWithImage_allOf_images& val) {
    return val.toPropertyTree();
}

template<>
inline PinMediaWithImage_allOf_images fromPt<PinMediaWithImage_allOf_images>(const boost::property_tree::ptree& pt) {
    PinMediaWithImage_allOf_images ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* PinMediaWithImage_allOf_images_H_ */
