/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BulkUpsertRequestCreate.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

BulkUpsertRequestCreate::BulkUpsertRequestCreate(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string BulkUpsertRequestCreate::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void BulkUpsertRequestCreate::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree BulkUpsertRequestCreate::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	// generate tree for Campaigns
    tmp_node.clear();
	if (!m_Campaigns.empty()) {
        tmp_node = toPt(m_Campaigns);
		pt.add_child("campaigns", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Ad_groups
    tmp_node.clear();
	if (!m_Ad_groups.empty()) {
        tmp_node = toPt(m_Ad_groups);
		pt.add_child("ad_groups", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Ads
    tmp_node.clear();
	if (!m_Ads.empty()) {
        tmp_node = toPt(m_Ads);
		pt.add_child("ads", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Product_groups
    tmp_node.clear();
	if (!m_Product_groups.empty()) {
        tmp_node = toPt(m_Product_groups);
		pt.add_child("product_groups", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Keywords
    tmp_node.clear();
	if (!m_Keywords.empty()) {
        tmp_node = toPt(m_Keywords);
		pt.add_child("keywords", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void BulkUpsertRequestCreate::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	// push all items of Campaigns into member
	if (pt.get_child_optional("campaigns")) {
        m_Campaigns = fromPt<std::vector<CampaignCreateRequest>>(pt.get_child("campaigns"));
	}
	// push all items of Ad_groups into member
	if (pt.get_child_optional("ad_groups")) {
        m_Ad_groups = fromPt<std::vector<AdGroupCreateRequest>>(pt.get_child("ad_groups"));
	}
	// push all items of Ads into member
	if (pt.get_child_optional("ads")) {
        m_Ads = fromPt<std::vector<AdCreateRequest>>(pt.get_child("ads"));
	}
	// push all items of Product_groups into member
	if (pt.get_child_optional("product_groups")) {
        m_Product_groups = fromPt<std::vector<ProductGroupPromotionCreateRequest>>(pt.get_child("product_groups"));
	}
	// push all items of Keywords into member
	if (pt.get_child_optional("keywords")) {
        m_Keywords = fromPt<std::vector<KeywordsRequest>>(pt.get_child("keywords"));
	}
}

std::vector<CampaignCreateRequest> BulkUpsertRequestCreate::getCampaigns() const
{
    return m_Campaigns;
}

void BulkUpsertRequestCreate::setCampaigns(std::vector<CampaignCreateRequest> value)
{
    m_Campaigns = value;
}


std::vector<AdGroupCreateRequest> BulkUpsertRequestCreate::getAdGroups() const
{
    return m_Ad_groups;
}

void BulkUpsertRequestCreate::setAdGroups(std::vector<AdGroupCreateRequest> value)
{
    m_Ad_groups = value;
}


std::vector<AdCreateRequest> BulkUpsertRequestCreate::getAds() const
{
    return m_Ads;
}

void BulkUpsertRequestCreate::setAds(std::vector<AdCreateRequest> value)
{
    m_Ads = value;
}


std::vector<ProductGroupPromotionCreateRequest> BulkUpsertRequestCreate::getProductGroups() const
{
    return m_Product_groups;
}

void BulkUpsertRequestCreate::setProductGroups(std::vector<ProductGroupPromotionCreateRequest> value)
{
    m_Product_groups = value;
}


std::vector<KeywordsRequest> BulkUpsertRequestCreate::getKeywords() const
{
    return m_Keywords;
}

void BulkUpsertRequestCreate::setKeywords(std::vector<KeywordsRequest> value)
{
    m_Keywords = value;
}



std::vector<BulkUpsertRequestCreate> createBulkUpsertRequestCreateVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<BulkUpsertRequestCreate>();
    for (const auto& child: pt) {
        vec.emplace_back(BulkUpsertRequestCreate(child.second));
    }

    return vec;
}

}
}
}
}

