/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ItemAttributesRequest_allOf_image_link.h
 *
 * &lt;p&gt;&lt;&#x3D; 2000 characters&lt;/p&gt; &lt;p&gt;The links to the main product images. Images should be at least 75x75 pixels to avoid errors. Use the additional_image_link field to add more images of your product. The URL of your image_link must be accessible by the Pinterest user-agent, and send the accurate images. Please make sure there are no template or placeholder images at the link. Must start with http:// or https://.&lt;/p&gt;
 */

#ifndef ItemAttributesRequest_allOf_image_link_H_
#define ItemAttributesRequest_allOf_image_link_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// &lt;p&gt;&lt;&#x3D; 2000 characters&lt;/p&gt; &lt;p&gt;The links to the main product images. Images should be at least 75x75 pixels to avoid errors. Use the additional_image_link field to add more images of your product. The URL of your image_link must be accessible by the Pinterest user-agent, and send the accurate images. Please make sure there are no template or placeholder images at the link. Must start with http:// or https://.&lt;/p&gt;
/// </summary>
class  ItemAttributesRequest_allOf_image_link 
{
public:
    ItemAttributesRequest_allOf_image_link() = default;
    explicit ItemAttributesRequest_allOf_image_link(boost::property_tree::ptree const& pt);
    virtual ~ItemAttributesRequest_allOf_image_link() = default;

    ItemAttributesRequest_allOf_image_link(const ItemAttributesRequest_allOf_image_link& other) = default; // copy constructor
    ItemAttributesRequest_allOf_image_link(ItemAttributesRequest_allOf_image_link&& other) noexcept = default; // move constructor

    ItemAttributesRequest_allOf_image_link& operator=(const ItemAttributesRequest_allOf_image_link& other) = default; // copy assignment
    ItemAttributesRequest_allOf_image_link& operator=(ItemAttributesRequest_allOf_image_link&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ItemAttributesRequest_allOf_image_link members

protected:
};

std::vector<ItemAttributesRequest_allOf_image_link> createItemAttributesRequest_allOf_image_linkVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ItemAttributesRequest_allOf_image_link>(const ItemAttributesRequest_allOf_image_link& val) {
    return val.toPropertyTree();
}

template<>
inline ItemAttributesRequest_allOf_image_link fromPt<ItemAttributesRequest_allOf_image_link>(const boost::property_tree::ptree& pt) {
    ItemAttributesRequest_allOf_image_link ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ItemAttributesRequest_allOf_image_link_H_ */
