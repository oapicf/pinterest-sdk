/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GetMMMReportResponseData.h
 *
 * 
 */

#ifndef GetMMMReportResponseData_H_
#define GetMMMReportResponseData_H_



#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  GetMMMReportResponseData 
{
public:
    GetMMMReportResponseData() = default;
    explicit GetMMMReportResponseData(boost::property_tree::ptree const& pt);
    virtual ~GetMMMReportResponseData() = default;

    GetMMMReportResponseData(const GetMMMReportResponseData& other) = default; // copy constructor
    GetMMMReportResponseData(GetMMMReportResponseData&& other) noexcept = default; // move constructor

    GetMMMReportResponseData& operator=(const GetMMMReportResponseData& other) = default; // copy assignment
    GetMMMReportResponseData& operator=(GetMMMReportResponseData&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// GetMMMReportResponseData members

    /// <summary>
    /// 
    /// </summary>
    std::string getReportStatus() const;
    void setReportStatus(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getUrl() const;
    void setUrl(std::string value);

    /// <summary>
    /// 
    /// </summary>
    double getSize() const;
    void setSize(double value);

protected:
    std::string m_Report_status = "";
    std::string m_Url = "";
    double m_Size = 0.0;
};

std::vector<GetMMMReportResponseData> createGetMMMReportResponseDataVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<GetMMMReportResponseData>(const GetMMMReportResponseData& val) {
    return val.toPropertyTree();
}

template<>
inline GetMMMReportResponseData fromPt<GetMMMReportResponseData>(const boost::property_tree::ptree& pt) {
    GetMMMReportResponseData ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* GetMMMReportResponseData_H_ */
