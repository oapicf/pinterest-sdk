/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BaseInviteDataResponse_invite_data.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

BaseInviteDataResponse_invite_data::BaseInviteDataResponse_invite_data(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string BaseInviteDataResponse_invite_data::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void BaseInviteDataResponse_invite_data::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree BaseInviteDataResponse_invite_data::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("invite_expiration", m_Invite_expiration);
	pt.put("invite_status", m_Invite_status);
	pt.put("invite_type", m_Invite_type);
	pt.put("last_updated_time", m_Last_updated_time);
	pt.put("sent_at", m_Sent_at);
	return pt;
}

void BaseInviteDataResponse_invite_data::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Invite_expiration = pt.get("invite_expiration", 0);
	m_Invite_status = pt.get("invite_status", "");
	m_Invite_type = pt.get("invite_type", "");
	m_Last_updated_time = pt.get("last_updated_time", 0);
	m_Sent_at = pt.get("sent_at", 0);
}

int32_t BaseInviteDataResponse_invite_data::getInviteExpiration() const
{
    return m_Invite_expiration;
}

void BaseInviteDataResponse_invite_data::setInviteExpiration(int32_t value)
{
    m_Invite_expiration = value;
}


std::string BaseInviteDataResponse_invite_data::getInviteStatus() const
{
    return m_Invite_status;
}

void BaseInviteDataResponse_invite_data::setInviteStatus(std::string value)
{
    m_Invite_status = value;
}


std::string BaseInviteDataResponse_invite_data::getInviteType() const
{
    return m_Invite_type;
}

void BaseInviteDataResponse_invite_data::setInviteType(std::string value)
{
    m_Invite_type = value;
}


int32_t BaseInviteDataResponse_invite_data::getLastUpdatedTime() const
{
    return m_Last_updated_time;
}

void BaseInviteDataResponse_invite_data::setLastUpdatedTime(int32_t value)
{
    m_Last_updated_time = value;
}


int32_t BaseInviteDataResponse_invite_data::getSentAt() const
{
    return m_Sent_at;
}

void BaseInviteDataResponse_invite_data::setSentAt(int32_t value)
{
    m_Sent_at = value;
}



std::vector<BaseInviteDataResponse_invite_data> createBaseInviteDataResponse_invite_dataVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<BaseInviteDataResponse_invite_data>();
    for (const auto& child: pt) {
        vec.emplace_back(BaseInviteDataResponse_invite_data(child.second));
    }

    return vec;
}

}
}
}
}

