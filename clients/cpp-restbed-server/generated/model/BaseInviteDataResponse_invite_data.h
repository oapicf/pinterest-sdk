/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BaseInviteDataResponse_invite_data.h
 *
 * Metadata for the invite/request.
 */

#ifndef BaseInviteDataResponse_invite_data_H_
#define BaseInviteDataResponse_invite_data_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Metadata for the invite/request.
/// </summary>
class  BaseInviteDataResponse_invite_data 
{
public:
    BaseInviteDataResponse_invite_data() = default;
    explicit BaseInviteDataResponse_invite_data(boost::property_tree::ptree const& pt);
    virtual ~BaseInviteDataResponse_invite_data() = default;

    BaseInviteDataResponse_invite_data(const BaseInviteDataResponse_invite_data& other) = default; // copy constructor
    BaseInviteDataResponse_invite_data(BaseInviteDataResponse_invite_data&& other) noexcept = default; // move constructor

    BaseInviteDataResponse_invite_data& operator=(const BaseInviteDataResponse_invite_data& other) = default; // copy assignment
    BaseInviteDataResponse_invite_data& operator=(BaseInviteDataResponse_invite_data&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// BaseInviteDataResponse_invite_data members

    /// <summary>
    /// The date and time when the invite/request will expire. Returned in milliseconds.
    /// </summary>
    int32_t getInviteExpiration() const;
    void setInviteExpiration(int32_t value);

    /// <summary>
    /// The current status of the invite. The invite can be in one of the following states PENDING, ACCEPTED, DECLINED, CANCELLED, EXPIRED.
    /// </summary>
    std::string getInviteStatus() const;
    void setInviteStatus(std::string value);

    /// <summary>
    /// The type of invite. &lt;br&gt;&#39;MEMBER_INVITE&#39; is to invite a member to access your business assets. &lt;br&gt;&#39;PARTNER_INVITE&#39; is to invite a partner to access your business assets. &lt;br&gt;&#39;PARTNER_REQUEST&#39; is to request access a partner&#39;s business assets.
    /// </summary>
    std::string getInviteType() const;
    void setInviteType(std::string value);

    /// <summary>
    /// The date and time the invite/request was last updated. Returned in milliseconds.
    /// </summary>
    int32_t getLastUpdatedTime() const;
    void setLastUpdatedTime(int32_t value);

    /// <summary>
    /// The date and time the invite/request was sent/created. Returned in milliseconds.
    /// </summary>
    int32_t getSentAt() const;
    void setSentAt(int32_t value);

protected:
    int32_t m_Invite_expiration = 0;
    std::string m_Invite_status = "";
    std::string m_Invite_type = "";
    int32_t m_Last_updated_time = 0;
    int32_t m_Sent_at = 0;
};

std::vector<BaseInviteDataResponse_invite_data> createBaseInviteDataResponse_invite_dataVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<BaseInviteDataResponse_invite_data>(const BaseInviteDataResponse_invite_data& val) {
    return val.toPropertyTree();
}

template<>
inline BaseInviteDataResponse_invite_data fromPt<BaseInviteDataResponse_invite_data>(const boost::property_tree::ptree& pt) {
    BaseInviteDataResponse_invite_data ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* BaseInviteDataResponse_invite_data_H_ */
