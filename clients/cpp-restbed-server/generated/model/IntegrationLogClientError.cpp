/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "IntegrationLogClientError.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

IntegrationLogClientError::IntegrationLogClientError(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string IntegrationLogClientError::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void IntegrationLogClientError::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree IntegrationLogClientError::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("cause", m_Cause);
	pt.put("column_number", m_Column_number);
	pt.put("file_name", m_File_name);
	pt.put("line_number", m_Line_number);
	pt.put("message", m_Message);
	pt.put("message_detail", m_Message_detail);
	pt.put("name", m_Name);
	pt.put("number", m_number);
	pt.put("stack_trace", m_Stack_trace);
	return pt;
}

void IntegrationLogClientError::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Cause = pt.get("cause", "");
	m_Column_number = pt.get("column_number", 0);
	m_File_name = pt.get("file_name", "");
	m_Line_number = pt.get("line_number", 0);
	m_Message = pt.get("message", "");
	m_Message_detail = pt.get("message_detail", "");
	m_Name = pt.get("name", "");
	m_number = pt.get("number", 0);
	m_Stack_trace = pt.get("stack_trace", "");
}

std::string IntegrationLogClientError::getCause() const
{
    return m_Cause;
}

void IntegrationLogClientError::setCause(std::string value)
{
    m_Cause = value;
}


int32_t IntegrationLogClientError::getColumnNumber() const
{
    return m_Column_number;
}

void IntegrationLogClientError::setColumnNumber(int32_t value)
{
    m_Column_number = value;
}


std::string IntegrationLogClientError::getFileName() const
{
    return m_File_name;
}

void IntegrationLogClientError::setFileName(std::string value)
{
    m_File_name = value;
}


int32_t IntegrationLogClientError::getLineNumber() const
{
    return m_Line_number;
}

void IntegrationLogClientError::setLineNumber(int32_t value)
{
    m_Line_number = value;
}


std::string IntegrationLogClientError::getMessage() const
{
    return m_Message;
}

void IntegrationLogClientError::setMessage(std::string value)
{
    m_Message = value;
}


std::string IntegrationLogClientError::getMessageDetail() const
{
    return m_Message_detail;
}

void IntegrationLogClientError::setMessageDetail(std::string value)
{
    m_Message_detail = value;
}


std::string IntegrationLogClientError::getName() const
{
    return m_Name;
}

void IntegrationLogClientError::setName(std::string value)
{
    m_Name = value;
}


int32_t IntegrationLogClientError::getNumber() const
{
    return m_number;
}

void IntegrationLogClientError::setNumber(int32_t value)
{
    m_number = value;
}


std::string IntegrationLogClientError::getStackTrace() const
{
    return m_Stack_trace;
}

void IntegrationLogClientError::setStackTrace(std::string value)
{
    m_Stack_trace = value;
}



std::vector<IntegrationLogClientError> createIntegrationLogClientErrorVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<IntegrationLogClientError>();
    for (const auto& child: pt) {
        vec.emplace_back(IntegrationLogClientError(child.second));
    }

    return vec;
}

}
}
}
}

