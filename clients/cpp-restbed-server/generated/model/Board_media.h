/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Board_media.h
 *
 * Board media.
 */

#ifndef Board_media_H_
#define Board_media_H_



#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Board media.
/// </summary>
class  Board_media 
{
public:
    Board_media() = default;
    explicit Board_media(boost::property_tree::ptree const& pt);
    virtual ~Board_media() = default;

    Board_media(const Board_media& other) = default; // copy constructor
    Board_media(Board_media&& other) noexcept = default; // move constructor

    Board_media& operator=(const Board_media& other) = default; // copy assignment
    Board_media& operator=(Board_media&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// Board_media members

    /// <summary>
    /// Board cover image.
    /// </summary>
    std::string getImageCoverUrl() const;
    void setImageCoverUrl(std::string value);

    /// <summary>
    /// Board pin thumbnail urls.
    /// </summary>
    std::vector<std::string> getPinThumbnailUrls() const;
    void setPinThumbnailUrls(std::vector<std::string> value);

protected:
    std::string m_Image_cover_url = "";
    std::vector<std::string> m_Pin_thumbnail_urls;
};

std::vector<Board_media> createBoard_mediaVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<Board_media>(const Board_media& val) {
    return val.toPropertyTree();
}

template<>
inline Board_media fromPt<Board_media>(const boost::property_tree::ptree& pt) {
    Board_media ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* Board_media_H_ */
