/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ConversionEventsUserData.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ConversionEventsUserData::ConversionEventsUserData(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string ConversionEventsUserData::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void ConversionEventsUserData::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree ConversionEventsUserData::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	// generate tree for Ph
    tmp_node.clear();
	if (!m_Ph.empty()) {
        tmp_node = toPt(m_Ph);
		pt.add_child("ph", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Ge
    tmp_node.clear();
	if (!m_Ge.empty()) {
        tmp_node = toPt(m_Ge);
		pt.add_child("ge", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Db
    tmp_node.clear();
	if (!m_Db.empty()) {
        tmp_node = toPt(m_Db);
		pt.add_child("db", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Ln
    tmp_node.clear();
	if (!m_Ln.empty()) {
        tmp_node = toPt(m_Ln);
		pt.add_child("ln", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Fn
    tmp_node.clear();
	if (!m_Fn.empty()) {
        tmp_node = toPt(m_Fn);
		pt.add_child("fn", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Ct
    tmp_node.clear();
	if (!m_Ct.empty()) {
        tmp_node = toPt(m_Ct);
		pt.add_child("ct", tmp_node);
		tmp_node.clear();
	}
	// generate tree for St
    tmp_node.clear();
	if (!m_St.empty()) {
        tmp_node = toPt(m_St);
		pt.add_child("st", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Zp
    tmp_node.clear();
	if (!m_Zp.empty()) {
        tmp_node = toPt(m_Zp);
		pt.add_child("zp", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Country
    tmp_node.clear();
	if (!m_Country.empty()) {
        tmp_node = toPt(m_Country);
		pt.add_child("country", tmp_node);
		tmp_node.clear();
	}
	// generate tree for External_id
    tmp_node.clear();
	if (!m_External_id.empty()) {
        tmp_node = toPt(m_External_id);
		pt.add_child("external_id", tmp_node);
		tmp_node.clear();
	}
	pt.put("click_id", m_Click_id);
	pt.put("partner_id", m_Partner_id);
	// generate tree for Em
    tmp_node.clear();
	if (!m_Em.empty()) {
        tmp_node = toPt(m_Em);
		pt.add_child("em", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Hashed_maids
    tmp_node.clear();
	if (!m_Hashed_maids.empty()) {
        tmp_node = toPt(m_Hashed_maids);
		pt.add_child("hashed_maids", tmp_node);
		tmp_node.clear();
	}
	pt.put("client_ip_address", m_Client_ip_address);
	pt.put("client_user_agent", m_Client_user_agent);
	return pt;
}

void ConversionEventsUserData::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	// push all items of Ph into member
	if (pt.get_child_optional("ph")) {
        m_Ph = fromPt<std::vector<std::string>>(pt.get_child("ph"));
	}
	// push all items of Ge into member
	if (pt.get_child_optional("ge")) {
        m_Ge = fromPt<std::vector<std::string>>(pt.get_child("ge"));
	}
	// push all items of Db into member
	if (pt.get_child_optional("db")) {
        m_Db = fromPt<std::vector<std::string>>(pt.get_child("db"));
	}
	// push all items of Ln into member
	if (pt.get_child_optional("ln")) {
        m_Ln = fromPt<std::vector<std::string>>(pt.get_child("ln"));
	}
	// push all items of Fn into member
	if (pt.get_child_optional("fn")) {
        m_Fn = fromPt<std::vector<std::string>>(pt.get_child("fn"));
	}
	// push all items of Ct into member
	if (pt.get_child_optional("ct")) {
        m_Ct = fromPt<std::vector<std::string>>(pt.get_child("ct"));
	}
	// push all items of St into member
	if (pt.get_child_optional("st")) {
        m_St = fromPt<std::vector<std::string>>(pt.get_child("st"));
	}
	// push all items of Zp into member
	if (pt.get_child_optional("zp")) {
        m_Zp = fromPt<std::vector<std::string>>(pt.get_child("zp"));
	}
	// push all items of Country into member
	if (pt.get_child_optional("country")) {
        m_Country = fromPt<std::vector<std::string>>(pt.get_child("country"));
	}
	// push all items of External_id into member
	if (pt.get_child_optional("external_id")) {
        m_External_id = fromPt<std::vector<std::string>>(pt.get_child("external_id"));
	}
	m_Click_id = pt.get("click_id", "");
	m_Partner_id = pt.get("partner_id", "");
	// push all items of Em into member
	if (pt.get_child_optional("em")) {
        m_Em = fromPt<std::vector<std::string>>(pt.get_child("em"));
	}
	// push all items of Hashed_maids into member
	if (pt.get_child_optional("hashed_maids")) {
        m_Hashed_maids = fromPt<std::vector<std::string>>(pt.get_child("hashed_maids"));
	}
	m_Client_ip_address = pt.get("client_ip_address", "");
	m_Client_user_agent = pt.get("client_user_agent", "");
}

std::vector<std::string> ConversionEventsUserData::getPh() const
{
    return m_Ph;
}

void ConversionEventsUserData::setPh(std::vector<std::string> value)
{
    m_Ph = value;
}


std::vector<std::string> ConversionEventsUserData::getGe() const
{
    return m_Ge;
}

void ConversionEventsUserData::setGe(std::vector<std::string> value)
{
    m_Ge = value;
}


std::vector<std::string> ConversionEventsUserData::getDb() const
{
    return m_Db;
}

void ConversionEventsUserData::setDb(std::vector<std::string> value)
{
    m_Db = value;
}


std::vector<std::string> ConversionEventsUserData::getLn() const
{
    return m_Ln;
}

void ConversionEventsUserData::setLn(std::vector<std::string> value)
{
    m_Ln = value;
}


std::vector<std::string> ConversionEventsUserData::getFn() const
{
    return m_Fn;
}

void ConversionEventsUserData::setFn(std::vector<std::string> value)
{
    m_Fn = value;
}


std::vector<std::string> ConversionEventsUserData::getCt() const
{
    return m_Ct;
}

void ConversionEventsUserData::setCt(std::vector<std::string> value)
{
    m_Ct = value;
}


std::vector<std::string> ConversionEventsUserData::getSt() const
{
    return m_St;
}

void ConversionEventsUserData::setSt(std::vector<std::string> value)
{
    m_St = value;
}


std::vector<std::string> ConversionEventsUserData::getZp() const
{
    return m_Zp;
}

void ConversionEventsUserData::setZp(std::vector<std::string> value)
{
    m_Zp = value;
}


std::vector<std::string> ConversionEventsUserData::getCountry() const
{
    return m_Country;
}

void ConversionEventsUserData::setCountry(std::vector<std::string> value)
{
    m_Country = value;
}


std::vector<std::string> ConversionEventsUserData::getExternalId() const
{
    return m_External_id;
}

void ConversionEventsUserData::setExternalId(std::vector<std::string> value)
{
    m_External_id = value;
}


std::string ConversionEventsUserData::getClickId() const
{
    return m_Click_id;
}

void ConversionEventsUserData::setClickId(std::string value)
{
    m_Click_id = value;
}


std::string ConversionEventsUserData::getPartnerId() const
{
    return m_Partner_id;
}

void ConversionEventsUserData::setPartnerId(std::string value)
{
    m_Partner_id = value;
}


std::vector<std::string> ConversionEventsUserData::getEm() const
{
    return m_Em;
}

void ConversionEventsUserData::setEm(std::vector<std::string> value)
{
    m_Em = value;
}


std::vector<std::string> ConversionEventsUserData::getHashedMaids() const
{
    return m_Hashed_maids;
}

void ConversionEventsUserData::setHashedMaids(std::vector<std::string> value)
{
    m_Hashed_maids = value;
}


std::string ConversionEventsUserData::getClientIpAddress() const
{
    return m_Client_ip_address;
}

void ConversionEventsUserData::setClientIpAddress(std::string value)
{
    m_Client_ip_address = value;
}


std::string ConversionEventsUserData::getClientUserAgent() const
{
    return m_Client_user_agent;
}

void ConversionEventsUserData::setClientUserAgent(std::string value)
{
    m_Client_user_agent = value;
}



std::vector<ConversionEventsUserData> createConversionEventsUserDataVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<ConversionEventsUserData>();
    for (const auto& child: pt) {
        vec.emplace_back(ConversionEventsUserData(child.second));
    }

    return vec;
}

}
}
}
}

