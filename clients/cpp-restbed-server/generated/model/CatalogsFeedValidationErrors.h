/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsFeedValidationErrors.h
 *
 * 
 */

#ifndef CatalogsFeedValidationErrors_H_
#define CatalogsFeedValidationErrors_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CatalogsFeedValidationErrors 
{
public:
    CatalogsFeedValidationErrors() = default;
    explicit CatalogsFeedValidationErrors(boost::property_tree::ptree const& pt);
    virtual ~CatalogsFeedValidationErrors() = default;

    CatalogsFeedValidationErrors(const CatalogsFeedValidationErrors& other) = default; // copy constructor
    CatalogsFeedValidationErrors(CatalogsFeedValidationErrors&& other) noexcept = default; // move constructor

    CatalogsFeedValidationErrors& operator=(const CatalogsFeedValidationErrors& other) = default; // copy assignment
    CatalogsFeedValidationErrors& operator=(CatalogsFeedValidationErrors&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsFeedValidationErrors members

    /// <summary>
    /// Pinterest couldn&#39;t download your feed.
    /// </summary>
    int32_t getFETCHERROR() const;
    void setFETCHERROR(int32_t value);

    /// <summary>
    /// Your feed wasn&#39;t ingested because it hasnâ€™t changed in the previous 90 days.
    /// </summary>
    int32_t getFETCHINACTIVEFEEDERROR() const;
    void setFETCHINACTIVEFEEDERROR(int32_t value);

    /// <summary>
    /// Your feed includes data with an unsupported encoding format.
    /// </summary>
    int32_t getENCODINGERROR() const;
    void setENCODINGERROR(int32_t value);

    /// <summary>
    /// Your feed includes data with formatting errors.
    /// </summary>
    int32_t getDELIMITERERROR() const;
    void setDELIMITERERROR(int32_t value);

    /// <summary>
    /// Your feed is missing some required column headers.
    /// </summary>
    int32_t getREQUIREDCOLUMNSMISSING() const;
    void setREQUIREDCOLUMNSMISSING(int32_t value);

    /// <summary>
    /// Some products are duplicated.
    /// </summary>
    int32_t getDUPLICATEPRODUCTS() const;
    void setDUPLICATEPRODUCTS(int32_t value);

    /// <summary>
    /// Some image links are formatted incorrectly.
    /// </summary>
    int32_t getIMAGELINKINVALID() const;
    void setIMAGELINKINVALID(int32_t value);

    /// <summary>
    /// Some items are missing an item id in their product metadata, those items will not be published.
    /// </summary>
    int32_t getITEMIDMISSING() const;
    void setITEMIDMISSING(int32_t value);

    /// <summary>
    /// Some items are missing a title in their product metadata, those items will not be published.
    /// </summary>
    int32_t getTITLEMISSING() const;
    void setTITLEMISSING(int32_t value);

    /// <summary>
    /// Some items are missing a description in their product metadata, those items will not be published.
    /// </summary>
    int32_t getDESCRIPTIONMISSING() const;
    void setDESCRIPTIONMISSING(int32_t value);

    /// <summary>
    /// Some items are missing a link URL in their product metadata, those items will not be published.
    /// </summary>
    int32_t getPRODUCTLINKMISSING() const;
    void setPRODUCTLINKMISSING(int32_t value);

    /// <summary>
    /// Some items are missing an image link URL in their product metadata, those items will not be published.
    /// </summary>
    int32_t getIMAGELINKMISSING() const;
    void setIMAGELINKMISSING(int32_t value);

    /// <summary>
    /// Some items are missing an availability value in their product metadata, those items will not be published.
    /// </summary>
    int32_t getAVAILABILITYINVALID() const;
    void setAVAILABILITYINVALID(int32_t value);

    /// <summary>
    /// Some items have price formatting errors in their product metadata, those items will not be published.
    /// </summary>
    int32_t getPRODUCTPRICEINVALID() const;
    void setPRODUCTPRICEINVALID(int32_t value);

    /// <summary>
    /// Some link values are formatted incorrectly.
    /// </summary>
    int32_t getLINKFORMATINVALID() const;
    void setLINKFORMATINVALID(int32_t value);

    /// <summary>
    /// Your feed contains formatting errors for some items.
    /// </summary>
    int32_t getPARSELINEERROR() const;
    void setPARSELINEERROR(int32_t value);

    /// <summary>
    /// Some adwords links contain too many characters.
    /// </summary>
    int32_t getADWORDSFORMATINVALID() const;
    void setADWORDSFORMATINVALID(int32_t value);

    /// <summary>
    /// We experienced a technical difficulty and were unable to ingest your feed. The next ingestion will happen in 24 hours.
    /// </summary>
    int32_t getINTERNALSERVICEERROR() const;
    void setINTERNALSERVICEERROR(int32_t value);

    /// <summary>
    /// Your merchant domain needs to be claimed.
    /// </summary>
    int32_t getNOVERIFIEDDOMAIN() const;
    void setNOVERIFIEDDOMAIN(int32_t value);

    /// <summary>
    /// Some items have invalid adult values.
    /// </summary>
    int32_t getADULTINVALID() const;
    void setADULTINVALID(int32_t value);

    /// <summary>
    /// Some items have image_link URLs that contain too many characters, so those items will not be published.
    /// </summary>
    int32_t getIMAGELINKLENGTHTOOLONG() const;
    void setIMAGELINKLENGTHTOOLONG(int32_t value);

    /// <summary>
    /// Some of your product link values don&#39;t match the verified domain associated with this account.
    /// </summary>
    int32_t getINVALIDDOMAIN() const;
    void setINVALIDDOMAIN(int32_t value);

    /// <summary>
    /// Your feed contains too many items, some items will not be published.
    /// </summary>
    int32_t getFEEDLENGTHTOOLONG() const;
    void setFEEDLENGTHTOOLONG(int32_t value);

    /// <summary>
    /// Some product links contain too many characters, those items will not be published.
    /// </summary>
    int32_t getLINKLENGTHTOOLONG() const;
    void setLINKLENGTHTOOLONG(int32_t value);

    /// <summary>
    /// Your feed couldn&#39;t be validated because the xml file is formatted incorrectly.
    /// </summary>
    int32_t getMALFORMEDXML() const;
    void setMALFORMEDXML(int32_t value);

    /// <summary>
    /// Some products are missing a price, those items will not be published.
    /// </summary>
    int32_t getPRICEMISSING() const;
    void setPRICEMISSING(int32_t value);

    /// <summary>
    /// Your feed couldn&#39;t be validated because the file doesn&#39;t contain the minimum number of lines required.
    /// </summary>
    int32_t getFEEDTOOSMALL() const;
    void setFEEDTOOSMALL(int32_t value);

    /// <summary>
    /// Some items exceed the maximum number of items per item group, those items will not be published.
    /// </summary>
    int32_t getMAXITEMSPERITEMGROUPEXCEEDED() const;
    void setMAXITEMSPERITEMGROUPEXCEEDED(int32_t value);

    /// <summary>
    /// Some items&#39; main images can&#39;t be found.
    /// </summary>
    int32_t getITEMMAINIMAGEDOWNLOADFAILURE() const;
    void setITEMMAINIMAGEDOWNLOADFAILURE(int32_t value);

    /// <summary>
    /// Some items were not published because they don&#39;t meet Pinterest&#39;s Merchant Guidelines.
    /// </summary>
    int32_t getPINJOINCONTENTUNSAFE() const;
    void setPINJOINCONTENTUNSAFE(int32_t value);

    /// <summary>
    /// Some items were not published because they don&#39;t meet Pinterest&#39;s Merchant Guidelines.
    /// </summary>
    int32_t getBLOCKLISTEDIMAGESIGNATURE() const;
    void setBLOCKLISTEDIMAGESIGNATURE(int32_t value);

    /// <summary>
    /// Some items have list price formatting errors in their product metadata, those items will not be published.
    /// </summary>
    int32_t getLISTPRICEINVALID() const;
    void setLISTPRICEINVALID(int32_t value);

    /// <summary>
    /// Some items were not published because price cannot be determined. The price, list price, and sale price are all different, so those items will not be published.
    /// </summary>
    int32_t getPRICECANNOTBEDETERMINED() const;
    void setPRICECANNOTBEDETERMINED(int32_t value);

protected:
    int32_t m_FETCH_ERROR = 0;
    int32_t m_FETCH_INACTIVE_FEED_ERROR = 0;
    int32_t m_ENCODING_ERROR = 0;
    int32_t m_DELIMITER_ERROR = 0;
    int32_t m_REQUIRED_COLUMNS_MISSING = 0;
    int32_t m_DUPLICATE_PRODUCTS = 0;
    int32_t m_IMAGE_LINK_INVALID = 0;
    int32_t m_ITEMID_MISSING = 0;
    int32_t m_TITLE_MISSING = 0;
    int32_t m_DESCRIPTION_MISSING = 0;
    int32_t m_PRODUCT_LINK_MISSING = 0;
    int32_t m_IMAGE_LINK_MISSING = 0;
    int32_t m_AVAILABILITY_INVALID = 0;
    int32_t m_PRODUCT_PRICE_INVALID = 0;
    int32_t m_LINK_FORMAT_INVALID = 0;
    int32_t m_PARSE_LINE_ERROR = 0;
    int32_t m_ADWORDS_FORMAT_INVALID = 0;
    int32_t m_INTERNAL_SERVICE_ERROR = 0;
    int32_t m_NO_VERIFIED_DOMAIN = 0;
    int32_t m_ADULT_INVALID = 0;
    int32_t m_IMAGE_LINK_LENGTH_TOO_LONG = 0;
    int32_t m_INVALID_DOMAIN = 0;
    int32_t m_FEED_LENGTH_TOO_LONG = 0;
    int32_t m_LINK_LENGTH_TOO_LONG = 0;
    int32_t m_MALFORMED_XML = 0;
    int32_t m_PRICE_MISSING = 0;
    int32_t m_FEED_TOO_SMALL = 0;
    int32_t m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED = 0;
    int32_t m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE = 0;
    int32_t m_PINJOIN_CONTENT_UNSAFE = 0;
    int32_t m_BLOCKLISTED_IMAGE_SIGNATURE = 0;
    int32_t m_LIST_PRICE_INVALID = 0;
    int32_t m_PRICE_CANNOT_BE_DETERMINED = 0;
};

std::vector<CatalogsFeedValidationErrors> createCatalogsFeedValidationErrorsVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsFeedValidationErrors>(const CatalogsFeedValidationErrors& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsFeedValidationErrors fromPt<CatalogsFeedValidationErrors>(const boost::property_tree::ptree& pt) {
    CatalogsFeedValidationErrors ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsFeedValidationErrors_H_ */
