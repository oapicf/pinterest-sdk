/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Targeting_template_list_200_response.h
 *
 * 
 */

#ifndef Targeting_template_list_200_response_H_
#define Targeting_template_list_200_response_H_



#include "TargetingTemplateResponseData.h"
#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "Paginated.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  Targeting_template_list_200_response : public Paginated
{
public:
    Targeting_template_list_200_response() = default;
    explicit Targeting_template_list_200_response(boost::property_tree::ptree const& pt);
    virtual ~Targeting_template_list_200_response() = default;

    Targeting_template_list_200_response(const Targeting_template_list_200_response& other) = default; // copy constructor
    Targeting_template_list_200_response(Targeting_template_list_200_response&& other) noexcept = default; // move constructor

    Targeting_template_list_200_response& operator=(const Targeting_template_list_200_response& other) = default; // copy assignment
    Targeting_template_list_200_response& operator=(Targeting_template_list_200_response&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// Targeting_template_list_200_response members

    /// <summary>
    /// 
    /// </summary>
    std::vector<TargetingTemplateResponseData> getItems() const;
    void setItems(std::vector<TargetingTemplateResponseData> value);

    /// <summary>
    /// 
    /// </summary>
    std::string getBookmark() const;
    void setBookmark(std::string value);

protected:
    std::vector<TargetingTemplateResponseData> m_Items;
    std::string m_Bookmark = "";
};

std::vector<Targeting_template_list_200_response> createTargeting_template_list_200_responseVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<Targeting_template_list_200_response>(const Targeting_template_list_200_response& val) {
    return val.toPropertyTree();
}

template<>
inline Targeting_template_list_200_response fromPt<Targeting_template_list_200_response>(const boost::property_tree::ptree& pt) {
    Targeting_template_list_200_response ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* Targeting_template_list_200_response_H_ */
