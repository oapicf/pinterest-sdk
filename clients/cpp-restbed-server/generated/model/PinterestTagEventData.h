/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PinterestTagEventData.h
 *
 * Optional for VISITOR &#x60;audience_type&#x60;. With the Pinterest tag, you can use event data to capture event details from your website. This object lists all the available predefined event data fields in the Pinterest tag. You can include these event data fields as part of a VISITOR audience’ s &#x60;rule&#x60;; however, you **must** specify an &#x60;event&#x60; for the &#x60;event_data&#x60; fields to be evaluated. Besides what’s listed, you can also create your own set of &#x60;event_data&#x60; fields and define their usages or purposes according to your website needs. However, the benefit of using the predefined event data fields is that we can provide various metrics based on those fields&#39; data.&lt;br&gt;Examples per &#x60;event&#x60; type:&lt;br&gt;&#x60;pagevisit&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;page_name\&quot;: \&quot;My online store 123 | view items | shoe\&quot; }&lt;br&gt;&#x60;signup&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;lead_type\&quot;: \&quot;New release promotion\&quot; }&lt;br&gt;&#x60;checkout&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;value\&quot;: 116, \&quot;order_quantity\&quot;: 2, \&quot;currency\&quot;: \&quot;USD\&quot;, \&quot;line_items\&quot;: [ { \&quot;product_name\&quot;: \&quot;Pillows (Set of 2)\&quot;, \&quot;product_id\&quot;: \&quot;11\&quot;, \&quot;product_price\&quot;: 48, \&quot;product_quantity\&quot;: 1 }, { \&quot;product_name\&quot;: \&quot;Pillows, Large (Set of 2)\&quot;, \&quot;product_id\&quot;: \&quot;15\&quot;, \&quot;product_price\&quot;: 68, \&quot;product_quantity\&quot;: 1 } ] }&lt;br&gt;&#x60;addtocart&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;value\&quot;: 499, \&quot;order_quantity\&quot;: 1, \&quot;currency\&quot;: \&quot;USD\&quot;, \&quot;line_items\&quot;: [ { \&quot;product_name\&quot;: \&quot;Red leather boots\&quot;, \&quot;product_id\&quot;: \&quot;3486\&quot;, \&quot;product_category\&quot;: \&quot;shoe\&quot;, \&quot;product_variant_id\&quot;: \&quot;JB11103000\&quot;, \&quot;product_price\&quot;: 499, \&quot;product_quantity\&quot;: \&quot;1\&quot; , \&quot;product_brand\&quot;: \&quot;My brand\&quot; }]}&lt;br&gt;&#x60;watchvideo&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;video_title\&quot;: \&quot;My Product Video 01\&quot; }&lt;br&gt;&#x60;lead&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;lead_type\&quot;: \&quot;Newsletter\&quot; }
 */

#ifndef PinterestTagEventData_H_
#define PinterestTagEventData_H_



#include "LineItem.h"
#include <string>
#include "Currency.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Optional for VISITOR &#x60;audience_type&#x60;. With the Pinterest tag, you can use event data to capture event details from your website. This object lists all the available predefined event data fields in the Pinterest tag. You can include these event data fields as part of a VISITOR audience’ s &#x60;rule&#x60;; however, you **must** specify an &#x60;event&#x60; for the &#x60;event_data&#x60; fields to be evaluated. Besides what’s listed, you can also create your own set of &#x60;event_data&#x60; fields and define their usages or purposes according to your website needs. However, the benefit of using the predefined event data fields is that we can provide various metrics based on those fields&#39; data.&lt;br&gt;Examples per &#x60;event&#x60; type:&lt;br&gt;&#x60;pagevisit&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;page_name\&quot;: \&quot;My online store 123 | view items | shoe\&quot; }&lt;br&gt;&#x60;signup&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;lead_type\&quot;: \&quot;New release promotion\&quot; }&lt;br&gt;&#x60;checkout&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;value\&quot;: 116, \&quot;order_quantity\&quot;: 2, \&quot;currency\&quot;: \&quot;USD\&quot;, \&quot;line_items\&quot;: [ { \&quot;product_name\&quot;: \&quot;Pillows (Set of 2)\&quot;, \&quot;product_id\&quot;: \&quot;11\&quot;, \&quot;product_price\&quot;: 48, \&quot;product_quantity\&quot;: 1 }, { \&quot;product_name\&quot;: \&quot;Pillows, Large (Set of 2)\&quot;, \&quot;product_id\&quot;: \&quot;15\&quot;, \&quot;product_price\&quot;: 68, \&quot;product_quantity\&quot;: 1 } ] }&lt;br&gt;&#x60;addtocart&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;value\&quot;: 499, \&quot;order_quantity\&quot;: 1, \&quot;currency\&quot;: \&quot;USD\&quot;, \&quot;line_items\&quot;: [ { \&quot;product_name\&quot;: \&quot;Red leather boots\&quot;, \&quot;product_id\&quot;: \&quot;3486\&quot;, \&quot;product_category\&quot;: \&quot;shoe\&quot;, \&quot;product_variant_id\&quot;: \&quot;JB11103000\&quot;, \&quot;product_price\&quot;: 499, \&quot;product_quantity\&quot;: \&quot;1\&quot; , \&quot;product_brand\&quot;: \&quot;My brand\&quot; }]}&lt;br&gt;&#x60;watchvideo&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;video_title\&quot;: \&quot;My Product Video 01\&quot; }&lt;br&gt;&#x60;lead&#x60;&lt;br&gt;\&quot;event_data\&quot;: { \&quot;lead_type\&quot;: \&quot;Newsletter\&quot; }
/// </summary>
class  PinterestTagEventData 
{
public:
    PinterestTagEventData() = default;
    explicit PinterestTagEventData(boost::property_tree::ptree const& pt);
    virtual ~PinterestTagEventData() = default;

    PinterestTagEventData(const PinterestTagEventData& other) = default; // copy constructor
    PinterestTagEventData(PinterestTagEventData&& other) noexcept = default; // move constructor

    PinterestTagEventData& operator=(const PinterestTagEventData& other) = default; // copy assignment
    PinterestTagEventData& operator=(PinterestTagEventData&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// PinterestTagEventData members

    /// <summary>
    /// 
    /// </summary>
    Currency getCurrency() const;
    void setCurrency(Currency value);

    /// <summary>
    /// Promotion code. For example, \&quot;Newsletter\&quot;.
    /// </summary>
    std::string getLeadType() const;
    void setLeadType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    LineItem getLineItems() const;
    void setLineItems(LineItem value);

    /// <summary>
    /// Order ID. For example, \&quot;X-151481\&quot;.
    /// </summary>
    std::string getOrderId() const;
    void setOrderId(std::string value);

    /// <summary>
    /// Order quantity. For example, 1.
    /// </summary>
    int32_t getOrderQuantity() const;
    void setOrderQuantity(int32_t value);

    /// <summary>
    /// Page name. For example, \&quot;Our Favorite Pins on Pinterest\&quot;.
    /// </summary>
    std::string getPageName() const;
    void setPageName(std::string value);

    /// <summary>
    /// Promotion code. For example, \&quot;WINTER10\&quot;.
    /// </summary>
    std::string getPromoCode() const;
    void setPromoCode(std::string value);

    /// <summary>
    /// Property. For example, \&quot;Athleta\&quot;.
    /// </summary>
    std::string getProperty() const;
    void setProperty(std::string value);

    /// <summary>
    /// Search query string. For example, \&quot;boots\&quot;.
    /// </summary>
    std::string getSearchQuery() const;
    void setSearchQuery(std::string value);

    /// <summary>
    /// Product value. For example, \&quot;199.98\&quot;
    /// </summary>
    std::string getValue() const;
    void setValue(std::string value);

    /// <summary>
    /// Video title. For example, \&quot;How to style your Parker Boots\&quot;.
    /// </summary>
    std::string getVideoTitle() const;
    void setVideoTitle(std::string value);

protected:
    Currency m_Currency = Currency{};
    std::string m_Lead_type = "";
    LineItem m_Line_items;
    std::string m_Order_id = "";
    int32_t m_Order_quantity = 0;
    std::string m_Page_name = "";
    std::string m_Promo_code = "";
    std::string m_Property = "";
    std::string m_Search_query = "";
    std::string m_Value = "";
    std::string m_Video_title = "";
};

std::vector<PinterestTagEventData> createPinterestTagEventDataVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<PinterestTagEventData>(const PinterestTagEventData& val) {
    return val.toPropertyTree();
}

template<>
inline PinterestTagEventData fromPt<PinterestTagEventData>(const boost::property_tree::ptree& pt) {
    PinterestTagEventData ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* PinterestTagEventData_H_ */
