/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SharedAudience.h
 *
 * 
 */

#ifndef SharedAudience_H_
#define SharedAudience_H_



#include <string>
#include "OperationType.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "SharedAudienceCommon.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  SharedAudience : public SharedAudienceCommon
{
public:
    SharedAudience() = default;
    explicit SharedAudience(boost::property_tree::ptree const& pt);
    virtual ~SharedAudience() = default;

    SharedAudience(const SharedAudience& other) = default; // copy constructor
    SharedAudience(SharedAudience&& other) noexcept = default; // move constructor

    SharedAudience& operator=(const SharedAudience& other) = default; // copy assignment
    SharedAudience& operator=(SharedAudience&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// SharedAudience members

    /// <summary>
    /// Unique identifier of an audience
    /// </summary>
    std::string getAudienceId() const;
    void setAudienceId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    OperationType getOperationType() const;
    void setOperationType(OperationType value);

    /// <summary>
    /// List of ad account IDs to share with or revoke from.
    /// </summary>
    std::vector<std::string> getRecipientAccountIds() const;
    void setRecipientAccountIds(std::vector<std::string> value);

protected:
    std::string m_Audience_id = "";
    OperationType m_Operation_type = OperationType{};
    std::vector<std::string> m_Recipient_account_ids;
};

std::vector<SharedAudience> createSharedAudienceVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<SharedAudience>(const SharedAudience& val) {
    return val.toPropertyTree();
}

template<>
inline SharedAudience fromPt<SharedAudience>(const boost::property_tree::ptree& pt) {
    SharedAudience ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* SharedAudience_H_ */
