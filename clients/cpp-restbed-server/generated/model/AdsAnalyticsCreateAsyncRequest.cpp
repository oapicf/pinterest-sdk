/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AdsAnalyticsCreateAsyncRequest.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

AdsAnalyticsCreateAsyncRequest::AdsAnalyticsCreateAsyncRequest(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string AdsAnalyticsCreateAsyncRequest::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void AdsAnalyticsCreateAsyncRequest::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree AdsAnalyticsCreateAsyncRequest::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("start_date", m_Start_date);
	pt.put("end_date", m_End_date);
	// generate tree for Attribution_types
    tmp_node.clear();
	if (!m_Attribution_types.empty()) {
        tmp_node = toPt(m_Attribution_types);
		pt.add_child("attribution_types", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Campaign_ids
    tmp_node.clear();
	if (!m_Campaign_ids.empty()) {
        tmp_node = toPt(m_Campaign_ids);
		pt.add_child("campaign_ids", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Campaign_statuses
    tmp_node.clear();
	if (!m_Campaign_statuses.empty()) {
        tmp_node = toPt(m_Campaign_statuses);
		pt.add_child("campaign_statuses", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Campaign_objective_types
    tmp_node.clear();
	if (!m_Campaign_objective_types.empty()) {
        tmp_node = toPt(m_Campaign_objective_types);
		pt.add_child("campaign_objective_types", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Ad_group_ids
    tmp_node.clear();
	if (!m_Ad_group_ids.empty()) {
        tmp_node = toPt(m_Ad_group_ids);
		pt.add_child("ad_group_ids", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Ad_group_statuses
    tmp_node.clear();
	if (!m_Ad_group_statuses.empty()) {
        tmp_node = toPt(m_Ad_group_statuses);
		pt.add_child("ad_group_statuses", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Ad_ids
    tmp_node.clear();
	if (!m_Ad_ids.empty()) {
        tmp_node = toPt(m_Ad_ids);
		pt.add_child("ad_ids", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Ad_statuses
    tmp_node.clear();
	if (!m_Ad_statuses.empty()) {
        tmp_node = toPt(m_Ad_statuses);
		pt.add_child("ad_statuses", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Product_group_ids
    tmp_node.clear();
	if (!m_Product_group_ids.empty()) {
        tmp_node = toPt(m_Product_group_ids);
		pt.add_child("product_group_ids", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Product_group_statuses
    tmp_node.clear();
	if (!m_Product_group_statuses.empty()) {
        tmp_node = toPt(m_Product_group_statuses);
		pt.add_child("product_group_statuses", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Product_item_ids
    tmp_node.clear();
	if (!m_Product_item_ids.empty()) {
        tmp_node = toPt(m_Product_item_ids);
		pt.add_child("product_item_ids", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Targeting_types
    tmp_node.clear();
	if (!m_Targeting_types.empty()) {
        tmp_node = toPt(m_Targeting_types);
		pt.add_child("targeting_types", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Metrics_filters
    tmp_node.clear();
	if (!m_Metrics_filters.empty()) {
        tmp_node = toPt(m_Metrics_filters);
		pt.add_child("metrics_filters", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Columns
    tmp_node.clear();
	if (!m_Columns.empty()) {
        tmp_node = toPt(m_Columns);
		pt.add_child("columns", tmp_node);
		tmp_node.clear();
	}
	pt.put("primary_sort", m_Primary_sort);
	pt.put("start_hour", m_Start_hour);
	pt.put("end_hour", m_End_hour);
	return pt;
}

void AdsAnalyticsCreateAsyncRequest::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Start_date = pt.get("start_date", "");
	m_End_date = pt.get("end_date", "");
	// push all items of Attribution_types into member
	if (pt.get_child_optional("attribution_types")) {
        m_Attribution_types = fromPt<std::vector<ConversionReportAttributionType>>(pt.get_child("attribution_types"));
	}
	// push all items of Campaign_ids into member
	if (pt.get_child_optional("campaign_ids")) {
        m_Campaign_ids = fromPt<std::vector<std::string>>(pt.get_child("campaign_ids"));
	}
	// push all items of Campaign_statuses into member
	if (pt.get_child_optional("campaign_statuses")) {
        m_Campaign_statuses = fromPt<std::vector<CampaignSummaryStatus>>(pt.get_child("campaign_statuses"));
	}
	// push all items of Campaign_objective_types into member
	if (pt.get_child_optional("campaign_objective_types")) {
        m_Campaign_objective_types = fromPt<std::vector<ObjectiveType>>(pt.get_child("campaign_objective_types"));
	}
	// push all items of Ad_group_ids into member
	if (pt.get_child_optional("ad_group_ids")) {
        m_Ad_group_ids = fromPt<std::vector<std::string>>(pt.get_child("ad_group_ids"));
	}
	// push all items of Ad_group_statuses into member
	if (pt.get_child_optional("ad_group_statuses")) {
        m_Ad_group_statuses = fromPt<std::vector<AdGroupSummaryStatus>>(pt.get_child("ad_group_statuses"));
	}
	// push all items of Ad_ids into member
	if (pt.get_child_optional("ad_ids")) {
        m_Ad_ids = fromPt<std::vector<std::string>>(pt.get_child("ad_ids"));
	}
	// push all items of Ad_statuses into member
	if (pt.get_child_optional("ad_statuses")) {
        m_Ad_statuses = fromPt<std::vector<PinPromotionSummaryStatus>>(pt.get_child("ad_statuses"));
	}
	// push all items of Product_group_ids into member
	if (pt.get_child_optional("product_group_ids")) {
        m_Product_group_ids = fromPt<std::vector<std::string>>(pt.get_child("product_group_ids"));
	}
	// push all items of Product_group_statuses into member
	if (pt.get_child_optional("product_group_statuses")) {
        m_Product_group_statuses = fromPt<std::vector<ProductGroupSummaryStatus>>(pt.get_child("product_group_statuses"));
	}
	// push all items of Product_item_ids into member
	if (pt.get_child_optional("product_item_ids")) {
        m_Product_item_ids = fromPt<std::vector<std::string>>(pt.get_child("product_item_ids"));
	}
	// push all items of Targeting_types into member
	if (pt.get_child_optional("targeting_types")) {
        m_Targeting_types = fromPt<std::vector<AdsAnalyticsTargetingType>>(pt.get_child("targeting_types"));
	}
	// push all items of Metrics_filters into member
	if (pt.get_child_optional("metrics_filters")) {
        m_Metrics_filters = fromPt<std::vector<AdsAnalyticsMetricsFilter>>(pt.get_child("metrics_filters"));
	}
	// push all items of Columns into member
	if (pt.get_child_optional("columns")) {
        m_Columns = fromPt<std::vector<ReportingColumnAsync>>(pt.get_child("columns"));
	}
	setPrimarySort(pt.get("primary_sort", ""));
	m_Start_hour = pt.get("start_hour", 0);
	m_End_hour = pt.get("end_hour", 0);
}

std::string AdsAnalyticsCreateAsyncRequest::getStartDate() const
{
    return m_Start_date;
}

void AdsAnalyticsCreateAsyncRequest::setStartDate(std::string value)
{
    m_Start_date = value;
}


std::string AdsAnalyticsCreateAsyncRequest::getEndDate() const
{
    return m_End_date;
}

void AdsAnalyticsCreateAsyncRequest::setEndDate(std::string value)
{
    m_End_date = value;
}


Granularity AdsAnalyticsCreateAsyncRequest::getGranularity() const
{
    return m_Granularity;
}

void AdsAnalyticsCreateAsyncRequest::setGranularity(Granularity value)
{
    m_Granularity = value;
}


ConversionAttributionWindowDays AdsAnalyticsCreateAsyncRequest::getClickWindowDays() const
{
    return m_Click_window_days;
}

void AdsAnalyticsCreateAsyncRequest::setClickWindowDays(ConversionAttributionWindowDays value)
{
    m_Click_window_days = value;
}


ConversionAttributionWindowDays AdsAnalyticsCreateAsyncRequest::getEngagementWindowDays() const
{
    return m_Engagement_window_days;
}

void AdsAnalyticsCreateAsyncRequest::setEngagementWindowDays(ConversionAttributionWindowDays value)
{
    m_Engagement_window_days = value;
}


ConversionAttributionWindowDays AdsAnalyticsCreateAsyncRequest::getViewWindowDays() const
{
    return m_View_window_days;
}

void AdsAnalyticsCreateAsyncRequest::setViewWindowDays(ConversionAttributionWindowDays value)
{
    m_View_window_days = value;
}


ConversionReportTimeType AdsAnalyticsCreateAsyncRequest::getConversionReportTime() const
{
    return m_Conversion_report_time;
}

void AdsAnalyticsCreateAsyncRequest::setConversionReportTime(ConversionReportTimeType value)
{
    m_Conversion_report_time = value;
}


std::vector<ConversionReportAttributionType> AdsAnalyticsCreateAsyncRequest::getAttributionTypes() const
{
    return m_Attribution_types;
}

void AdsAnalyticsCreateAsyncRequest::setAttributionTypes(std::vector<ConversionReportAttributionType> value)
{
    m_Attribution_types = value;
}


std::vector<std::string> AdsAnalyticsCreateAsyncRequest::getCampaignIds() const
{
    return m_Campaign_ids;
}

void AdsAnalyticsCreateAsyncRequest::setCampaignIds(std::vector<std::string> value)
{
    m_Campaign_ids = value;
}


std::vector<CampaignSummaryStatus> AdsAnalyticsCreateAsyncRequest::getCampaignStatuses() const
{
    return m_Campaign_statuses;
}

void AdsAnalyticsCreateAsyncRequest::setCampaignStatuses(std::vector<CampaignSummaryStatus> value)
{
    m_Campaign_statuses = value;
}


std::vector<ObjectiveType> AdsAnalyticsCreateAsyncRequest::getCampaignObjectiveTypes() const
{
    return m_Campaign_objective_types;
}

void AdsAnalyticsCreateAsyncRequest::setCampaignObjectiveTypes(std::vector<ObjectiveType> value)
{
    m_Campaign_objective_types = value;
}


std::vector<std::string> AdsAnalyticsCreateAsyncRequest::getAdGroupIds() const
{
    return m_Ad_group_ids;
}

void AdsAnalyticsCreateAsyncRequest::setAdGroupIds(std::vector<std::string> value)
{
    m_Ad_group_ids = value;
}


std::vector<AdGroupSummaryStatus> AdsAnalyticsCreateAsyncRequest::getAdGroupStatuses() const
{
    return m_Ad_group_statuses;
}

void AdsAnalyticsCreateAsyncRequest::setAdGroupStatuses(std::vector<AdGroupSummaryStatus> value)
{
    m_Ad_group_statuses = value;
}


std::vector<std::string> AdsAnalyticsCreateAsyncRequest::getAdIds() const
{
    return m_Ad_ids;
}

void AdsAnalyticsCreateAsyncRequest::setAdIds(std::vector<std::string> value)
{
    m_Ad_ids = value;
}


std::vector<PinPromotionSummaryStatus> AdsAnalyticsCreateAsyncRequest::getAdStatuses() const
{
    return m_Ad_statuses;
}

void AdsAnalyticsCreateAsyncRequest::setAdStatuses(std::vector<PinPromotionSummaryStatus> value)
{
    m_Ad_statuses = value;
}


std::vector<std::string> AdsAnalyticsCreateAsyncRequest::getProductGroupIds() const
{
    return m_Product_group_ids;
}

void AdsAnalyticsCreateAsyncRequest::setProductGroupIds(std::vector<std::string> value)
{
    m_Product_group_ids = value;
}


std::vector<ProductGroupSummaryStatus> AdsAnalyticsCreateAsyncRequest::getProductGroupStatuses() const
{
    return m_Product_group_statuses;
}

void AdsAnalyticsCreateAsyncRequest::setProductGroupStatuses(std::vector<ProductGroupSummaryStatus> value)
{
    m_Product_group_statuses = value;
}


std::vector<std::string> AdsAnalyticsCreateAsyncRequest::getProductItemIds() const
{
    return m_Product_item_ids;
}

void AdsAnalyticsCreateAsyncRequest::setProductItemIds(std::vector<std::string> value)
{
    m_Product_item_ids = value;
}


std::vector<AdsAnalyticsTargetingType> AdsAnalyticsCreateAsyncRequest::getTargetingTypes() const
{
    return m_Targeting_types;
}

void AdsAnalyticsCreateAsyncRequest::setTargetingTypes(std::vector<AdsAnalyticsTargetingType> value)
{
    m_Targeting_types = value;
}


std::vector<AdsAnalyticsMetricsFilter> AdsAnalyticsCreateAsyncRequest::getMetricsFilters() const
{
    return m_Metrics_filters;
}

void AdsAnalyticsCreateAsyncRequest::setMetricsFilters(std::vector<AdsAnalyticsMetricsFilter> value)
{
    m_Metrics_filters = value;
}


std::vector<ReportingColumnAsync> AdsAnalyticsCreateAsyncRequest::getColumns() const
{
    return m_Columns;
}

void AdsAnalyticsCreateAsyncRequest::setColumns(std::vector<ReportingColumnAsync> value)
{
    m_Columns = value;
}


MetricsReportingLevel AdsAnalyticsCreateAsyncRequest::getLevel() const
{
    return m_Level;
}

void AdsAnalyticsCreateAsyncRequest::setLevel(MetricsReportingLevel value)
{
    m_Level = value;
}


DataOutputFormat AdsAnalyticsCreateAsyncRequest::getReportFormat() const
{
    return m_Report_format;
}

void AdsAnalyticsCreateAsyncRequest::setReportFormat(DataOutputFormat value)
{
    m_Report_format = value;
}


std::string AdsAnalyticsCreateAsyncRequest::getPrimarySort() const
{
    return m_Primary_sort;
}

void AdsAnalyticsCreateAsyncRequest::setPrimarySort(std::string value)
{
    static const std::array<std::string, 2> allowedValues = {
        "BY_ID", "BY_DATE"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Primary_sort = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


int32_t AdsAnalyticsCreateAsyncRequest::getStartHour() const
{
    return m_Start_hour;
}

void AdsAnalyticsCreateAsyncRequest::setStartHour(int32_t value)
{
    m_Start_hour = value;
}


int32_t AdsAnalyticsCreateAsyncRequest::getEndHour() const
{
    return m_End_hour;
}

void AdsAnalyticsCreateAsyncRequest::setEndHour(int32_t value)
{
    m_End_hour = value;
}



std::vector<AdsAnalyticsCreateAsyncRequest> createAdsAnalyticsCreateAsyncRequestVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<AdsAnalyticsCreateAsyncRequest>();
    for (const auto& child: pt) {
        vec.emplace_back(AdsAnalyticsCreateAsyncRequest(child.second));
    }

    return vec;
}

}
}
}
}

