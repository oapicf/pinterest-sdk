/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsItems.h
 *
 * Response object of catalogs items
 */

#ifndef CatalogsItems_H_
#define CatalogsItems_H_



#include "ItemResponse.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Response object of catalogs items
/// </summary>
class  CatalogsItems 
{
public:
    CatalogsItems() = default;
    explicit CatalogsItems(boost::property_tree::ptree const& pt);
    virtual ~CatalogsItems() = default;

    CatalogsItems(const CatalogsItems& other) = default; // copy constructor
    CatalogsItems(CatalogsItems&& other) noexcept = default; // move constructor

    CatalogsItems& operator=(const CatalogsItems& other) = default; // copy assignment
    CatalogsItems& operator=(CatalogsItems&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsItems members

    /// <summary>
    /// Array with catalogs items
    /// </summary>
    std::vector<ItemResponse> getItems() const;
    void setItems(std::vector<ItemResponse> value);

protected:
    std::vector<ItemResponse> m_Items;
};

std::vector<CatalogsItems> createCatalogsItemsVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsItems>(const CatalogsItems& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsItems fromPt<CatalogsItems>(const boost::property_tree::ptree& pt) {
    CatalogsItems ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsItems_H_ */
