/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TrendingKeywordsResponse_trends_inner.h
 *
 * 
 */

#ifndef TrendingKeywordsResponse_trends_inner_H_
#define TrendingKeywordsResponse_trends_inner_H_



#include "TrendingKeywordsResponse_trends_inner_time_series.h"
#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  TrendingKeywordsResponse_trends_inner 
{
public:
    TrendingKeywordsResponse_trends_inner() = default;
    explicit TrendingKeywordsResponse_trends_inner(boost::property_tree::ptree const& pt);
    virtual ~TrendingKeywordsResponse_trends_inner() = default;

    TrendingKeywordsResponse_trends_inner(const TrendingKeywordsResponse_trends_inner& other) = default; // copy constructor
    TrendingKeywordsResponse_trends_inner(TrendingKeywordsResponse_trends_inner&& other) noexcept = default; // move constructor

    TrendingKeywordsResponse_trends_inner& operator=(const TrendingKeywordsResponse_trends_inner& other) = default; // copy assignment
    TrendingKeywordsResponse_trends_inner& operator=(TrendingKeywordsResponse_trends_inner&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// TrendingKeywordsResponse_trends_inner members

    /// <summary>
    /// The keyword that is trending.
    /// </summary>
    std::string getKeyword() const;
    void setKeyword(std::string value);

    /// <summary>
    /// The week-over-week percent change in search volume for this keyword.&lt;br /&gt; For example, a value of \&quot;50\&quot; would represent a 50% increase in searches in the last seven days compared to the week prior.&lt;br /&gt; **Note**: growth rates are rounded, with a maximum of +/- 10000% change.  A value of 10001 indicates that this keyword experienced &gt; 10000% week-over-week growth.
    /// </summary>
    int32_t getPctGrowthWow() const;
    void setPctGrowthWow(int32_t value);

    /// <summary>
    /// The month-over-month percent change in search volume for this keyword.&lt;br /&gt; For example, a value of \&quot;400\&quot; would represent a 400% increase in searches in the last 30 days compared to the month prior.&lt;br /&gt; **Note**: growth rates are rounded, with a maximum of +/- 10000% change.  A value of 10001 indicates that this keyword experienced &gt; 10000% month-over-month growth.
    /// </summary>
    int32_t getPctGrowthMom() const;
    void setPctGrowthMom(int32_t value);

    /// <summary>
    /// The year-over-year percent change in search volume for this keyword.&lt;br /&gt; For example, a value of \&quot;-5\&quot; would represent a 5% decrease in searches in the last 365 days compared to the month prior.&lt;br /&gt; **Note**: growth rates are rounded, with a maximum of +/- 10000% change.  A value of 10001 indicates that this keyword experienced &gt; 10000% year-over-year growth.
    /// </summary>
    int32_t getPctGrowthYoy() const;
    void setPctGrowthYoy(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    TrendingKeywordsResponse_trends_inner_time_series getTimeSeries() const;
    void setTimeSeries(TrendingKeywordsResponse_trends_inner_time_series value);

protected:
    std::string m_Keyword = "";
    int32_t m_Pct_growth_wow = 0;
    int32_t m_Pct_growth_mom = 0;
    int32_t m_Pct_growth_yoy = 0;
    TrendingKeywordsResponse_trends_inner_time_series m_Time_series = TrendingKeywordsResponse_trends_inner_time_series{};
};

std::vector<TrendingKeywordsResponse_trends_inner> createTrendingKeywordsResponse_trends_innerVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<TrendingKeywordsResponse_trends_inner>(const TrendingKeywordsResponse_trends_inner& val) {
    return val.toPropertyTree();
}

template<>
inline TrendingKeywordsResponse_trends_inner fromPt<TrendingKeywordsResponse_trends_inner>(const boost::property_tree::ptree& pt) {
    TrendingKeywordsResponse_trends_inner ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* TrendingKeywordsResponse_trends_inner_H_ */
