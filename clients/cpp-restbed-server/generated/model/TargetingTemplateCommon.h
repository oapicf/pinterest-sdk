/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TargetingTemplateCommon.h
 *
 * 
 */

#ifndef TargetingTemplateCommon_H_
#define TargetingTemplateCommon_H_



#include "TargetingSpec.h"
#include "PlacementGroupType.h"
#include <string>
#include "TrackingUrls.h"
#include "TargetingTemplateKeyword.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  TargetingTemplateCommon 
{
public:
    TargetingTemplateCommon() = default;
    explicit TargetingTemplateCommon(boost::property_tree::ptree const& pt);
    virtual ~TargetingTemplateCommon() = default;

    TargetingTemplateCommon(const TargetingTemplateCommon& other) = default; // copy constructor
    TargetingTemplateCommon(TargetingTemplateCommon&& other) noexcept = default; // move constructor

    TargetingTemplateCommon& operator=(const TargetingTemplateCommon& other) = default; // copy assignment
    TargetingTemplateCommon& operator=(TargetingTemplateCommon&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// TargetingTemplateCommon members

    /// <summary>
    /// targeting template name
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// Enable auto-targeting for ad group. Also known as &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/expanded-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;\&quot;expanded targeting\&quot;&lt;/a&gt;.
    /// </summary>
    bool isAutoTargetingEnabled() const;
    void setAutoTargetingEnabled(bool value);

    /// <summary>
    /// 
    /// </summary>
    TargetingSpec getTargetingAttributes() const;
    void setTargetingAttributes(TargetingSpec value);

    /// <summary>
    /// 
    /// </summary>
    PlacementGroupType getPlacementGroup() const;
    void setPlacementGroup(PlacementGroupType value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<TargetingTemplateKeyword> getKeywords() const;
    void setKeywords(std::vector<TargetingTemplateKeyword> value);

    /// <summary>
    /// 
    /// </summary>
    TrackingUrls getTrackingUrls() const;
    void setTrackingUrls(TrackingUrls value);

protected:
    std::string m_Name = "";
    bool m_Auto_targeting_enabled = true;
    TargetingSpec m_Targeting_attributes;
    PlacementGroupType m_Placement_group = PlacementGroupType{};
    std::vector<TargetingTemplateKeyword> m_Keywords;
    TrackingUrls m_Tracking_urls;
};

std::vector<TargetingTemplateCommon> createTargetingTemplateCommonVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<TargetingTemplateCommon>(const TargetingTemplateCommon& val) {
    return val.toPropertyTree();
}

template<>
inline TargetingTemplateCommon fromPt<TargetingTemplateCommon>(const boost::property_tree::ptree& pt) {
    TargetingTemplateCommon ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* TargetingTemplateCommon_H_ */
