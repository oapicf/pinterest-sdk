/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsCreativeAssetsProductGroupProductCounts.h
 *
 * Product counts for a Creative Assets CatalogsProductGroup
 */

#ifndef CatalogsCreativeAssetsProductGroupProductCounts_H_
#define CatalogsCreativeAssetsProductGroupProductCounts_H_



#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Product counts for a Creative Assets CatalogsProductGroup
/// </summary>
class  CatalogsCreativeAssetsProductGroupProductCounts 
{
public:
    CatalogsCreativeAssetsProductGroupProductCounts() = default;
    explicit CatalogsCreativeAssetsProductGroupProductCounts(boost::property_tree::ptree const& pt);
    virtual ~CatalogsCreativeAssetsProductGroupProductCounts() = default;

    CatalogsCreativeAssetsProductGroupProductCounts(const CatalogsCreativeAssetsProductGroupProductCounts& other) = default; // copy constructor
    CatalogsCreativeAssetsProductGroupProductCounts(CatalogsCreativeAssetsProductGroupProductCounts&& other) noexcept = default; // move constructor

    CatalogsCreativeAssetsProductGroupProductCounts& operator=(const CatalogsCreativeAssetsProductGroupProductCounts& other) = default; // copy assignment
    CatalogsCreativeAssetsProductGroupProductCounts& operator=(CatalogsCreativeAssetsProductGroupProductCounts&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsCreativeAssetsProductGroupProductCounts members

    /// <summary>
    /// 
    /// </summary>
    std::string getCatalogType() const;
    void setCatalogType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    double getTotal() const;
    void setTotal(double value);

    /// <summary>
    /// 
    /// </summary>
    double getVideos() const;
    void setVideos(double value);

protected:
    std::string m_Catalog_type = "";
    double m_Total = 0.0;
    double m_Videos = 0.0;
};

std::vector<CatalogsCreativeAssetsProductGroupProductCounts> createCatalogsCreativeAssetsProductGroupProductCountsVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsCreativeAssetsProductGroupProductCounts>(const CatalogsCreativeAssetsProductGroupProductCounts& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsCreativeAssetsProductGroupProductCounts fromPt<CatalogsCreativeAssetsProductGroupProductCounts>(const boost::property_tree::ptree& pt) {
    CatalogsCreativeAssetsProductGroupProductCounts ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsCreativeAssetsProductGroupProductCounts_H_ */
