/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ImageMetadata_images.h
 *
 * 
 */

#ifndef ImageMetadata_images_H_
#define ImageMetadata_images_H_



#include "ImageDetails.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ImageMetadata_images 
{
public:
    ImageMetadata_images() = default;
    explicit ImageMetadata_images(boost::property_tree::ptree const& pt);
    virtual ~ImageMetadata_images() = default;

    ImageMetadata_images(const ImageMetadata_images& other) = default; // copy constructor
    ImageMetadata_images(ImageMetadata_images&& other) noexcept = default; // move constructor

    ImageMetadata_images& operator=(const ImageMetadata_images& other) = default; // copy assignment
    ImageMetadata_images& operator=(ImageMetadata_images&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ImageMetadata_images members

    /// <summary>
    /// 
    /// </summary>
    ImageDetails getR150x150() const;
    void setR150x150(ImageDetails value);

    /// <summary>
    /// 
    /// </summary>
    ImageDetails getR400x300() const;
    void setR400x300(ImageDetails value);

    /// <summary>
    /// 
    /// </summary>
    ImageDetails getR600x() const;
    void setR600x(ImageDetails value);

    /// <summary>
    /// 
    /// </summary>
    ImageDetails getR1200x() const;
    void setR1200x(ImageDetails value);

protected:
    ImageDetails m_r_150x150 = ImageDetails{};
    ImageDetails m_r_400x300 = ImageDetails{};
    ImageDetails m_r_600x = ImageDetails{};
    ImageDetails m_r_1200x = ImageDetails{};
};

std::vector<ImageMetadata_images> createImageMetadata_imagesVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ImageMetadata_images>(const ImageMetadata_images& val) {
    return val.toPropertyTree();
}

template<>
inline ImageMetadata_images fromPt<ImageMetadata_images>(const boost::property_tree::ptree& pt) {
    ImageMetadata_images ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ImageMetadata_images_H_ */
