/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AuthRespondInvitesBody_invites_inner.h
 *
 * 
 */

#ifndef AuthRespondInvitesBody_invites_inner_H_
#define AuthRespondInvitesBody_invites_inner_H_



#include "AuthRespondInvitesBody_invites_inner_action.h"
#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  AuthRespondInvitesBody_invites_inner 
{
public:
    AuthRespondInvitesBody_invites_inner() = default;
    explicit AuthRespondInvitesBody_invites_inner(boost::property_tree::ptree const& pt);
    virtual ~AuthRespondInvitesBody_invites_inner() = default;

    AuthRespondInvitesBody_invites_inner(const AuthRespondInvitesBody_invites_inner& other) = default; // copy constructor
    AuthRespondInvitesBody_invites_inner(AuthRespondInvitesBody_invites_inner&& other) noexcept = default; // move constructor

    AuthRespondInvitesBody_invites_inner& operator=(const AuthRespondInvitesBody_invites_inner& other) = default; // copy assignment
    AuthRespondInvitesBody_invites_inner& operator=(AuthRespondInvitesBody_invites_inner&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AuthRespondInvitesBody_invites_inner members

    /// <summary>
    /// 
    /// </summary>
    AuthRespondInvitesBody_invites_inner_action getAction() const;
    void setAction(AuthRespondInvitesBody_invites_inner_action value);

    /// <summary>
    /// Unique identifier of an invite.
    /// </summary>
    std::string getInviteId() const;
    void setInviteId(std::string value);

protected:
    AuthRespondInvitesBody_invites_inner_action m_Action;
    std::string m_Invite_id = "";
};

std::vector<AuthRespondInvitesBody_invites_inner> createAuthRespondInvitesBody_invites_innerVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AuthRespondInvitesBody_invites_inner>(const AuthRespondInvitesBody_invites_inner& val) {
    return val.toPropertyTree();
}

template<>
inline AuthRespondInvitesBody_invites_inner fromPt<AuthRespondInvitesBody_invites_inner>(const boost::property_tree::ptree& pt) {
    AuthRespondInvitesBody_invites_inner ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AuthRespondInvitesBody_invites_inner_H_ */
