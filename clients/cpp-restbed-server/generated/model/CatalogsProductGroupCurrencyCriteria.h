/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsProductGroupCurrencyCriteria.h
 *
 * A currency filter. This filter cannot be negated
 */

#ifndef CatalogsProductGroupCurrencyCriteria_H_
#define CatalogsProductGroupCurrencyCriteria_H_



#include "NonNullableCatalogsCurrency.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// A currency filter. This filter cannot be negated
/// </summary>
class  CatalogsProductGroupCurrencyCriteria 
{
public:
    CatalogsProductGroupCurrencyCriteria() = default;
    explicit CatalogsProductGroupCurrencyCriteria(boost::property_tree::ptree const& pt);
    virtual ~CatalogsProductGroupCurrencyCriteria() = default;

    CatalogsProductGroupCurrencyCriteria(const CatalogsProductGroupCurrencyCriteria& other) = default; // copy constructor
    CatalogsProductGroupCurrencyCriteria(CatalogsProductGroupCurrencyCriteria&& other) noexcept = default; // move constructor

    CatalogsProductGroupCurrencyCriteria& operator=(const CatalogsProductGroupCurrencyCriteria& other) = default; // copy assignment
    CatalogsProductGroupCurrencyCriteria& operator=(CatalogsProductGroupCurrencyCriteria&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsProductGroupCurrencyCriteria members

    /// <summary>
    /// 
    /// </summary>
    NonNullableCatalogsCurrency getValues() const;
    void setValues(NonNullableCatalogsCurrency value);

    /// <summary>
    /// 
    /// </summary>
    bool isNegated() const;
    void setNegated(bool value);

protected:
    NonNullableCatalogsCurrency m_Values = NonNullableCatalogsCurrency{};
    bool m_Negated = false;
};

std::vector<CatalogsProductGroupCurrencyCriteria> createCatalogsProductGroupCurrencyCriteriaVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsProductGroupCurrencyCriteria>(const CatalogsProductGroupCurrencyCriteria& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsProductGroupCurrencyCriteria fromPt<CatalogsProductGroupCurrencyCriteria>(const boost::property_tree::ptree& pt) {
    CatalogsProductGroupCurrencyCriteria ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsProductGroupCurrencyCriteria_H_ */
