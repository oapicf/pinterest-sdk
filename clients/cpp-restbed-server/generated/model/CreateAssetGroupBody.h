/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateAssetGroupBody.h
 *
 * 
 */

#ifndef CreateAssetGroupBody_H_
#define CreateAssetGroupBody_H_



#include "AssetGroupType.h"
#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CreateAssetGroupBody 
{
public:
    CreateAssetGroupBody() = default;
    explicit CreateAssetGroupBody(boost::property_tree::ptree const& pt);
    virtual ~CreateAssetGroupBody() = default;

    CreateAssetGroupBody(const CreateAssetGroupBody& other) = default; // copy constructor
    CreateAssetGroupBody(CreateAssetGroupBody&& other) noexcept = default; // move constructor

    CreateAssetGroupBody& operator=(const CreateAssetGroupBody& other) = default; // copy assignment
    CreateAssetGroupBody& operator=(CreateAssetGroupBody&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CreateAssetGroupBody members

    /// <summary>
    /// Asset Group name
    /// </summary>
    std::string getAssetGroupName() const;
    void setAssetGroupName(std::string value);

    /// <summary>
    /// Asset group description
    /// </summary>
    std::string getAssetGroupDescription() const;
    void setAssetGroupDescription(std::string value);

    /// <summary>
    /// Asset Group Types. Note: The asset group types are used for user reference and categorization purposes only and do not impact the functionality of the asset group.
    /// </summary>
    std::vector<AssetGroupType> getAssetGroupTypes() const;
    void setAssetGroupTypes(std::vector<AssetGroupType> value);

protected:
    std::string m_Asset_group_name = "";
    std::string m_Asset_group_description = "";
    std::vector<AssetGroupType> m_Asset_group_types;
};

std::vector<CreateAssetGroupBody> createCreateAssetGroupBodyVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CreateAssetGroupBody>(const CreateAssetGroupBody& val) {
    return val.toPropertyTree();
}

template<>
inline CreateAssetGroupBody fromPt<CreateAssetGroupBody>(const boost::property_tree::ptree& pt) {
    CreateAssetGroupBody ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CreateAssetGroupBody_H_ */
