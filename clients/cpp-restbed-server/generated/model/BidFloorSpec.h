/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BidFloorSpec.h
 *
 * 
 */

#ifndef BidFloorSpec_H_
#define BidFloorSpec_H_



#include "Country.h"
#include "CreativeType.h"
#include "ObjectiveType.h"
#include "ActionType.h"
#include "OptimizationGoalMetadata.h"
#include "Currency.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  BidFloorSpec 
{
public:
    BidFloorSpec() = default;
    explicit BidFloorSpec(boost::property_tree::ptree const& pt);
    virtual ~BidFloorSpec() = default;

    BidFloorSpec(const BidFloorSpec& other) = default; // copy constructor
    BidFloorSpec(BidFloorSpec&& other) noexcept = default; // move constructor

    BidFloorSpec& operator=(const BidFloorSpec& other) = default; // copy assignment
    BidFloorSpec& operator=(BidFloorSpec&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// BidFloorSpec members

    /// <summary>
    /// 
    /// </summary>
    std::vector<Country> getCountries() const;
    void setCountries(std::vector<Country> value);

    /// <summary>
    /// 
    /// </summary>
    Currency getCurrency() const;
    void setCurrency(Currency value);

    /// <summary>
    /// 
    /// </summary>
    ObjectiveType getObjectiveType() const;
    void setObjectiveType(ObjectiveType value);

    /// <summary>
    /// 
    /// </summary>
    ActionType getBillableEvent() const;
    void setBillableEvent(ActionType value);

    /// <summary>
    /// 
    /// </summary>
    OptimizationGoalMetadata getOptimizationGoalMetadata() const;
    void setOptimizationGoalMetadata(OptimizationGoalMetadata value);

    /// <summary>
    /// 
    /// </summary>
    CreativeType getCreativeType() const;
    void setCreativeType(CreativeType value);

protected:
    std::vector<Country> m_Countries;
    Currency m_Currency = Currency{};
    ObjectiveType m_Objective_type = ObjectiveType{};
    ActionType m_Billable_event = ActionType{};
    OptimizationGoalMetadata m_Optimization_goal_metadata;
    CreativeType m_Creative_type = CreativeType{};
};

std::vector<BidFloorSpec> createBidFloorSpecVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<BidFloorSpec>(const BidFloorSpec& val) {
    return val.toPropertyTree();
}

template<>
inline BidFloorSpec fromPt<BidFloorSpec>(const boost::property_tree::ptree& pt) {
    BidFloorSpec ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* BidFloorSpec_H_ */
