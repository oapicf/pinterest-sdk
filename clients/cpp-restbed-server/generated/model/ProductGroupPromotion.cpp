/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ProductGroupPromotion.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ProductGroupPromotion::ProductGroupPromotion(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string ProductGroupPromotion::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void ProductGroupPromotion::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree ProductGroupPromotion::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("id", m_Id);
	pt.put("ad_group_id", m_Ad_group_id);
	pt.put("bid_in_micro_currency", m_Bid_in_micro_currency);
	pt.put("included", m_Included);
	pt.put("definition", m_Definition);
	pt.put("relative_definition", m_Relative_definition);
	pt.put("parent_id", m_Parent_id);
	pt.put("slideshow_collections_title", m_Slideshow_collections_title);
	pt.put("slideshow_collections_description", m_Slideshow_collections_description);
	pt.put("is_mdl", m_Is_mdl);
	pt.put("tracking_url", m_Tracking_url);
	pt.put("catalog_product_group_id", m_Catalog_product_group_id);
	pt.put("catalog_product_group_name", m_Catalog_product_group_name);
	pt.put("collections_hero_pin_id", m_Collections_hero_pin_id);
	pt.put("collections_hero_destination_url", m_Collections_hero_destination_url);
	return pt;
}

void ProductGroupPromotion::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Id = pt.get("id", "");
	m_Ad_group_id = pt.get("ad_group_id", "");
	m_Bid_in_micro_currency = pt.get("bid_in_micro_currency", 0);
	m_Included = pt.get("included", false);
	m_Definition = pt.get("definition", "");
	m_Relative_definition = pt.get("relative_definition", "");
	m_Parent_id = pt.get("parent_id", "");
	m_Slideshow_collections_title = pt.get("slideshow_collections_title", "");
	m_Slideshow_collections_description = pt.get("slideshow_collections_description", "");
	m_Is_mdl = pt.get("is_mdl", false);
	m_Tracking_url = pt.get("tracking_url", "");
	m_Catalog_product_group_id = pt.get("catalog_product_group_id", "");
	m_Catalog_product_group_name = pt.get("catalog_product_group_name", "");
	m_Collections_hero_pin_id = pt.get("collections_hero_pin_id", "");
	m_Collections_hero_destination_url = pt.get("collections_hero_destination_url", "");
}

std::string ProductGroupPromotion::getId() const
{
    return m_Id;
}

void ProductGroupPromotion::setId(std::string value)
{
    m_Id = value;
}


std::string ProductGroupPromotion::getAdGroupId() const
{
    return m_Ad_group_id;
}

void ProductGroupPromotion::setAdGroupId(std::string value)
{
    m_Ad_group_id = value;
}


int32_t ProductGroupPromotion::getBidInMicroCurrency() const
{
    return m_Bid_in_micro_currency;
}

void ProductGroupPromotion::setBidInMicroCurrency(int32_t value)
{
    m_Bid_in_micro_currency = value;
}


bool ProductGroupPromotion::isIncluded() const
{
    return m_Included;
}

void ProductGroupPromotion::setIncluded(bool value)
{
    m_Included = value;
}


std::string ProductGroupPromotion::getDefinition() const
{
    return m_Definition;
}

void ProductGroupPromotion::setDefinition(std::string value)
{
    m_Definition = value;
}


std::string ProductGroupPromotion::getRelativeDefinition() const
{
    return m_Relative_definition;
}

void ProductGroupPromotion::setRelativeDefinition(std::string value)
{
    m_Relative_definition = value;
}


std::string ProductGroupPromotion::getParentId() const
{
    return m_Parent_id;
}

void ProductGroupPromotion::setParentId(std::string value)
{
    m_Parent_id = value;
}


std::string ProductGroupPromotion::getSlideshowCollectionsTitle() const
{
    return m_Slideshow_collections_title;
}

void ProductGroupPromotion::setSlideshowCollectionsTitle(std::string value)
{
    m_Slideshow_collections_title = value;
}


std::string ProductGroupPromotion::getSlideshowCollectionsDescription() const
{
    return m_Slideshow_collections_description;
}

void ProductGroupPromotion::setSlideshowCollectionsDescription(std::string value)
{
    m_Slideshow_collections_description = value;
}


bool ProductGroupPromotion::isIsMdl() const
{
    return m_Is_mdl;
}

void ProductGroupPromotion::setIsMdl(bool value)
{
    m_Is_mdl = value;
}


EntityStatus ProductGroupPromotion::getStatus() const
{
    return m_Status;
}

void ProductGroupPromotion::setStatus(EntityStatus value)
{
    m_Status = value;
}


std::string ProductGroupPromotion::getTrackingUrl() const
{
    return m_Tracking_url;
}

void ProductGroupPromotion::setTrackingUrl(std::string value)
{
    m_Tracking_url = value;
}


std::string ProductGroupPromotion::getCatalogProductGroupId() const
{
    return m_Catalog_product_group_id;
}

void ProductGroupPromotion::setCatalogProductGroupId(std::string value)
{
    m_Catalog_product_group_id = value;
}


std::string ProductGroupPromotion::getCatalogProductGroupName() const
{
    return m_Catalog_product_group_name;
}

void ProductGroupPromotion::setCatalogProductGroupName(std::string value)
{
    m_Catalog_product_group_name = value;
}


std::string ProductGroupPromotion::getCollectionsHeroPinId() const
{
    return m_Collections_hero_pin_id;
}

void ProductGroupPromotion::setCollectionsHeroPinId(std::string value)
{
    m_Collections_hero_pin_id = value;
}


std::string ProductGroupPromotion::getCollectionsHeroDestinationUrl() const
{
    return m_Collections_hero_destination_url;
}

void ProductGroupPromotion::setCollectionsHeroDestinationUrl(std::string value)
{
    m_Collections_hero_destination_url = value;
}


GridClickType ProductGroupPromotion::getGridClickType() const
{
    return m_Grid_click_type;
}

void ProductGroupPromotion::setGridClickType(GridClickType value)
{
    m_Grid_click_type = value;
}



std::vector<ProductGroupPromotion> createProductGroupPromotionVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<ProductGroupPromotion>();
    for (const auto& child: pt) {
        vec.emplace_back(ProductGroupPromotion(child.second));
    }

    return vec;
}

}
}
}
}

