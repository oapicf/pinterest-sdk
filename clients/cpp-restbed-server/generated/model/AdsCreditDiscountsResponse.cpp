/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AdsCreditDiscountsResponse.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

AdsCreditDiscountsResponse::AdsCreditDiscountsResponse(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string AdsCreditDiscountsResponse::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void AdsCreditDiscountsResponse::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree AdsCreditDiscountsResponse::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("active", m_Active);
	pt.put("advertiser_id", m_Advertiser_id);
	pt.put("discountType", m_DiscountType);
	pt.put("discountInMicroCurrency", m_DiscountInMicroCurrency);
	pt.put("discountCurrency", m_DiscountCurrency);
	pt.put("title", m_Title);
	pt.put("remainingDiscountInMicroCurrency", m_RemainingDiscountInMicroCurrency);
	return pt;
}

void AdsCreditDiscountsResponse::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Active = pt.get("active", false);
	m_Advertiser_id = pt.get("advertiser_id", "");
	setDiscountType(pt.get("discountType", ""));
	m_DiscountInMicroCurrency = pt.get("discountInMicroCurrency", 0.0);
	m_DiscountCurrency = pt.get("discountCurrency", "");
	m_Title = pt.get("title", "");
	m_RemainingDiscountInMicroCurrency = pt.get("remainingDiscountInMicroCurrency", 0.0);
}

bool AdsCreditDiscountsResponse::isActive() const
{
    return m_Active;
}

void AdsCreditDiscountsResponse::setActive(bool value)
{
    m_Active = value;
}


std::string AdsCreditDiscountsResponse::getAdvertiserId() const
{
    return m_Advertiser_id;
}

void AdsCreditDiscountsResponse::setAdvertiserId(std::string value)
{
    m_Advertiser_id = value;
}


std::string AdsCreditDiscountsResponse::getDiscountType() const
{
    return m_DiscountType;
}

void AdsCreditDiscountsResponse::setDiscountType(std::string value)
{
    static const std::array<std::string, 20> allowedValues = {
        "COUPON", "CREDIT", "COUPON_APPLIED", "CREDIT_APPLIED", "MARKETING_OFFER_CREDIT", "MARKETING_OFFER_CREDIT_APPLIED", "GOODWILL_CREDIT", "GOODWILL_CREDIT_APPLIED", "INTERNAL_CREDIT", "INTERNAL_CREDIT_APPLIED", "PREPAID_CREDIT", "PREPAID_CREDIT_APPLIED", "SALES_INCENTIVE_CREDIT", "SALES_INCENTIVE_CREDIT_APPLIED", "CREDIT_EXPIRED", "FUTURE_CREDIT", "REFERRAL_CREDIT", "INVOICE_SALES_INCENTIVE_CREDIT", "INVOICE_SALES_INCENTIVE_CREDIT_APPLIED", "PREPAID_CREDIT_REFUND"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_DiscountType = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


double AdsCreditDiscountsResponse::getDiscountInMicroCurrency() const
{
    return m_DiscountInMicroCurrency;
}

void AdsCreditDiscountsResponse::setDiscountInMicroCurrency(double value)
{
    m_DiscountInMicroCurrency = value;
}


std::string AdsCreditDiscountsResponse::getDiscountCurrency() const
{
    return m_DiscountCurrency;
}

void AdsCreditDiscountsResponse::setDiscountCurrency(std::string value)
{
    m_DiscountCurrency = value;
}


std::string AdsCreditDiscountsResponse::getTitle() const
{
    return m_Title;
}

void AdsCreditDiscountsResponse::setTitle(std::string value)
{
    m_Title = value;
}


double AdsCreditDiscountsResponse::getRemainingDiscountInMicroCurrency() const
{
    return m_RemainingDiscountInMicroCurrency;
}

void AdsCreditDiscountsResponse::setRemainingDiscountInMicroCurrency(double value)
{
    m_RemainingDiscountInMicroCurrency = value;
}



std::vector<AdsCreditDiscountsResponse> createAdsCreditDiscountsResponseVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<AdsCreditDiscountsResponse>();
    for (const auto& child: pt) {
        vec.emplace_back(AdsCreditDiscountsResponse(child.second));
    }

    return vec;
}

}
}
}
}

