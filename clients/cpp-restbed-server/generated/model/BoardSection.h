/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BoardSection.h
 *
 * Sections help organize pins within a board.
 */

#ifndef BoardSection_H_
#define BoardSection_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Sections help organize pins within a board.
/// </summary>
class  BoardSection 
{
public:
    BoardSection() = default;
    explicit BoardSection(boost::property_tree::ptree const& pt);
    virtual ~BoardSection() = default;

    BoardSection(const BoardSection& other) = default; // copy constructor
    BoardSection(BoardSection&& other) noexcept = default; // move constructor

    BoardSection& operator=(const BoardSection& other) = default; // copy assignment
    BoardSection& operator=(BoardSection&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// BoardSection members

    /// <summary>
    /// 
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

protected:
    std::string m_Id = "";
    std::string m_Name = "";
};

std::vector<BoardSection> createBoardSectionVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<BoardSection>(const BoardSection& val) {
    return val.toPropertyTree();
}

template<>
inline BoardSection fromPt<BoardSection>(const boost::property_tree::ptree& pt) {
    BoardSection ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* BoardSection_H_ */
