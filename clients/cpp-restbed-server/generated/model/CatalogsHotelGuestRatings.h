/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsHotelGuestRatings.h
 *
 * If specified, you must provide all properties
 */

#ifndef CatalogsHotelGuestRatings_H_
#define CatalogsHotelGuestRatings_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// If specified, you must provide all properties
/// </summary>
class  CatalogsHotelGuestRatings 
{
public:
    CatalogsHotelGuestRatings() = default;
    explicit CatalogsHotelGuestRatings(boost::property_tree::ptree const& pt);
    virtual ~CatalogsHotelGuestRatings() = default;

    CatalogsHotelGuestRatings(const CatalogsHotelGuestRatings& other) = default; // copy constructor
    CatalogsHotelGuestRatings(CatalogsHotelGuestRatings&& other) noexcept = default; // move constructor

    CatalogsHotelGuestRatings& operator=(const CatalogsHotelGuestRatings& other) = default; // copy assignment
    CatalogsHotelGuestRatings& operator=(CatalogsHotelGuestRatings&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsHotelGuestRatings members

    /// <summary>
    /// Your hotel&#39;s rating.
    /// </summary>
    double getScore() const;
    void setScore(double value);

    /// <summary>
    /// Total number of people who have rated this hotel.
    /// </summary>
    int32_t getNumberOfReviewers() const;
    void setNumberOfReviewers(int32_t value);

    /// <summary>
    /// Max value for the hotel rating score.
    /// </summary>
    double getMaxScore() const;
    void setMaxScore(double value);

    /// <summary>
    /// System you use for guest reviews.
    /// </summary>
    std::string getRatingSystem() const;
    void setRatingSystem(std::string value);

protected:
    double m_Score = 0.0;
    int32_t m_Number_of_reviewers = 0;
    double m_Max_score = 0.0;
    std::string m_Rating_system = "";
};

std::vector<CatalogsHotelGuestRatings> createCatalogsHotelGuestRatingsVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsHotelGuestRatings>(const CatalogsHotelGuestRatings& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsHotelGuestRatings fromPt<CatalogsHotelGuestRatings>(const boost::property_tree::ptree& pt) {
    CatalogsHotelGuestRatings ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsHotelGuestRatings_H_ */
