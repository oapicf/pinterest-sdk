/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SharedAudienceResponse.h
 *
 * 
 */

#ifndef SharedAudienceResponse_H_
#define SharedAudienceResponse_H_



#include <string>
#include "Role.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "SharedAudienceResponseCommon.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  SharedAudienceResponse : public SharedAudienceResponseCommon
{
public:
    SharedAudienceResponse() = default;
    explicit SharedAudienceResponse(boost::property_tree::ptree const& pt);
    virtual ~SharedAudienceResponse() = default;

    SharedAudienceResponse(const SharedAudienceResponse& other) = default; // copy constructor
    SharedAudienceResponse(SharedAudienceResponse&& other) noexcept = default; // move constructor

    SharedAudienceResponse& operator=(const SharedAudienceResponse& other) = default; // copy assignment
    SharedAudienceResponse& operator=(SharedAudienceResponse&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// SharedAudienceResponse members

    /// <summary>
    /// Audience ID that was shared
    /// </summary>
    std::string getAudienceId() const;
    void setAudienceId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<Role> getPermissions() const;
    void setPermissions(std::vector<Role> value);

    /// <summary>
    /// Account IDs that received the audience
    /// </summary>
    std::vector<std::string> getRecipientAccountIds() const;
    void setRecipientAccountIds(std::vector<std::string> value);

protected:
    std::string m_Audience_id = "";
    std::vector<Role> m_Permissions;
    std::vector<std::string> m_Recipient_account_ids;
};

std::vector<SharedAudienceResponse> createSharedAudienceResponseVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<SharedAudienceResponse>(const SharedAudienceResponse& val) {
    return val.toPropertyTree();
}

template<>
inline SharedAudienceResponse fromPt<SharedAudienceResponse>(const boost::property_tree::ptree& pt) {
    SharedAudienceResponse ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* SharedAudienceResponse_H_ */
