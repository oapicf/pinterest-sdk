/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * IntegrationRequest.h
 *
 * Schema used for creating the integration metadata.
 */

#ifndef IntegrationRequest_H_
#define IntegrationRequest_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Schema used for creating the integration metadata.
/// </summary>
class  IntegrationRequest 
{
public:
    IntegrationRequest() = default;
    explicit IntegrationRequest(boost::property_tree::ptree const& pt);
    virtual ~IntegrationRequest() = default;

    IntegrationRequest(const IntegrationRequest& other) = default; // copy constructor
    IntegrationRequest(IntegrationRequest&& other) noexcept = default; // move constructor

    IntegrationRequest& operator=(const IntegrationRequest& other) = default; // copy assignment
    IntegrationRequest& operator=(IntegrationRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// IntegrationRequest members

    /// <summary>
    /// External business ID for the integration.
    /// </summary>
    std::string getExternalBusinessId() const;
    void setExternalBusinessId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getConnectedMerchantId() const;
    void setConnectedMerchantId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getConnectedAdvertiserId() const;
    void setConnectedAdvertiserId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getConnectedLbaId() const;
    void setConnectedLbaId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getConnectedTagId() const;
    void setConnectedTagId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getPartnerAccessToken() const;
    void setPartnerAccessToken(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getPartnerRefreshToken() const;
    void setPartnerRefreshToken(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getPartnerPrimaryEmail() const;
    void setPartnerPrimaryEmail(std::string value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getPartnerAccessTokenExpiry() const;
    void setPartnerAccessTokenExpiry(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getPartnerRefreshTokenExpiry() const;
    void setPartnerRefreshTokenExpiry(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::string getScopes() const;
    void setScopes(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getAdditionalId1() const;
    void setAdditionalId1(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getPartnerMetadata() const;
    void setPartnerMetadata(std::string value);

protected:
    std::string m_External_business_id = "";
    std::string m_Connected_merchant_id = "";
    std::string m_Connected_advertiser_id = "";
    std::string m_Connected_lba_id = "";
    std::string m_Connected_tag_id = "";
    std::string m_Partner_access_token = "";
    std::string m_Partner_refresh_token = "";
    std::string m_Partner_primary_email = "";
    int32_t m_Partner_access_token_expiry = 0;
    int32_t m_Partner_refresh_token_expiry = 0;
    std::string m_Scopes = "";
    std::string m_Additional_id_1 = "";
    std::string m_Partner_metadata = "";
};

std::vector<IntegrationRequest> createIntegrationRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<IntegrationRequest>(const IntegrationRequest& val) {
    return val.toPropertyTree();
}

template<>
inline IntegrationRequest fromPt<IntegrationRequest>(const boost::property_tree::ptree& pt) {
    IntegrationRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* IntegrationRequest_H_ */
