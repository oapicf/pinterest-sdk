/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "IntegrationLogClientRequest.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

IntegrationLogClientRequest::IntegrationLogClientRequest(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string IntegrationLogClientRequest::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void IntegrationLogClientRequest::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree IntegrationLogClientRequest::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("method", m_Method);
	pt.put("host", m_Host);
	pt.put("path", m_Path);
	// generate tree for Request_headers
    if (!m_Request_headers.empty()) {
        tmp_node = toPt(m_Request_headers);
        pt.add_child("request_headers", tmp_node);
    }
    tmp_node.clear();
	// generate tree for Response_headers
    if (!m_Response_headers.empty()) {
        tmp_node = toPt(m_Response_headers);
        pt.add_child("response_headers", tmp_node);
    }
    tmp_node.clear();
	pt.put("response_status_code", m_Response_status_code);
	return pt;
}

void IntegrationLogClientRequest::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	setMethod(pt.get("method", ""));
	m_Host = pt.get("host", "");
	m_Path = pt.get("path", "");
    if (pt.get_child_optional("request_headers")) {
        m_Request_headers = fromPt<std::map<std::string, std::string>>(pt.get_child("request_headers"));
    }
    if (pt.get_child_optional("response_headers")) {
        m_Response_headers = fromPt<std::map<std::string, std::string>>(pt.get_child("response_headers"));
    }
	m_Response_status_code = pt.get("response_status_code", 0);
}

std::string IntegrationLogClientRequest::getMethod() const
{
    return m_Method;
}

void IntegrationLogClientRequest::setMethod(std::string value)
{
    static const std::array<std::string, 9> allowedValues = {
        "GET", "HEAD", "POST", "PUT", "DELETE", "CONNECT", "OPTIONS", "TRACE", "PATCH"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Method = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


std::string IntegrationLogClientRequest::getHost() const
{
    return m_Host;
}

void IntegrationLogClientRequest::setHost(std::string value)
{
    m_Host = value;
}


std::string IntegrationLogClientRequest::getPath() const
{
    return m_Path;
}

void IntegrationLogClientRequest::setPath(std::string value)
{
    m_Path = value;
}


std::map<std::string, std::string> IntegrationLogClientRequest::getRequestHeaders() const
{
    return m_Request_headers;
}

void IntegrationLogClientRequest::setRequestHeaders(std::map<std::string, std::string> value)
{
    m_Request_headers = value;
}


std::map<std::string, std::string> IntegrationLogClientRequest::getResponseHeaders() const
{
    return m_Response_headers;
}

void IntegrationLogClientRequest::setResponseHeaders(std::map<std::string, std::string> value)
{
    m_Response_headers = value;
}


int32_t IntegrationLogClientRequest::getResponseStatusCode() const
{
    return m_Response_status_code;
}

void IntegrationLogClientRequest::setResponseStatusCode(int32_t value)
{
    m_Response_status_code = value;
}



std::vector<IntegrationLogClientRequest> createIntegrationLogClientRequestVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<IntegrationLogClientRequest>();
    for (const auto& child: pt) {
        vec.emplace_back(IntegrationLogClientRequest(child.second));
    }

    return vec;
}

}
}
}
}

