/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TargetingTypeFilter.h
 *
 * 
 */

#ifndef TargetingTypeFilter_H_
#define TargetingTypeFilter_H_



#include "AdsAnalyticsTargetingType.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  TargetingTypeFilter 
{
public:
    TargetingTypeFilter() = default;
    explicit TargetingTypeFilter(boost::property_tree::ptree const& pt);
    virtual ~TargetingTypeFilter() = default;

    TargetingTypeFilter(const TargetingTypeFilter& other) = default; // copy constructor
    TargetingTypeFilter(TargetingTypeFilter&& other) noexcept = default; // move constructor

    TargetingTypeFilter& operator=(const TargetingTypeFilter& other) = default; // copy assignment
    TargetingTypeFilter& operator=(TargetingTypeFilter&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// TargetingTypeFilter members

    /// <summary>
    /// List of targeting types. Requires &#x60;level&#x60; to be a value ending in &#x60;_TARGETING&#x60;. [\&quot;AGE_BUCKET_AND_GENDER\&quot;] is in BETA and not yet available to all users.
    /// </summary>
    std::vector<AdsAnalyticsTargetingType> getTargetingTypes() const;
    void setTargetingTypes(std::vector<AdsAnalyticsTargetingType> value);

protected:
    std::vector<AdsAnalyticsTargetingType> m_Targeting_types;
};

std::vector<TargetingTypeFilter> createTargetingTypeFilterVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<TargetingTypeFilter>(const TargetingTypeFilter& val) {
    return val.toPropertyTree();
}

template<>
inline TargetingTypeFilter fromPt<TargetingTypeFilter>(const boost::property_tree::ptree& pt) {
    TargetingTypeFilter ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* TargetingTypeFilter_H_ */
