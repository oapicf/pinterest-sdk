/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsReportFeedIngestionStats.h
 *
 * 
 */

#ifndef CatalogsReportFeedIngestionStats_H_
#define CatalogsReportFeedIngestionStats_H_



#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CatalogsReportFeedIngestionStats 
{
public:
    CatalogsReportFeedIngestionStats() = default;
    explicit CatalogsReportFeedIngestionStats(boost::property_tree::ptree const& pt);
    virtual ~CatalogsReportFeedIngestionStats() = default;

    CatalogsReportFeedIngestionStats(const CatalogsReportFeedIngestionStats& other) = default; // copy constructor
    CatalogsReportFeedIngestionStats(CatalogsReportFeedIngestionStats&& other) noexcept = default; // move constructor

    CatalogsReportFeedIngestionStats& operator=(const CatalogsReportFeedIngestionStats& other) = default; // copy assignment
    CatalogsReportFeedIngestionStats& operator=(CatalogsReportFeedIngestionStats&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsReportFeedIngestionStats members

    /// <summary>
    /// 
    /// </summary>
    std::string getReportType() const;
    void setReportType(std::string value);

    /// <summary>
    /// ID of the catalog entity.
    /// </summary>
    std::string getCatalogId() const;
    void setCatalogId(std::string value);

    /// <summary>
    /// The event code that a diagnostics aggregated number references
    /// </summary>
    int32_t getCode() const;
    void setCode(int32_t value);

    /// <summary>
    /// A human-friendly label for the event code (e.g, &#39;AVAILABILITY_INVALID&#39;)
    /// </summary>
    std::string getCodeLabel() const;
    void setCodeLabel(std::string value);

    /// <summary>
    /// Title message describing the diagnostic issue
    /// </summary>
    std::string getMessage() const;
    void setMessage(std::string value);

    /// <summary>
    /// Number of occurrences of the issue
    /// </summary>
    int32_t getOccurrences() const;
    void setOccurrences(int32_t value);

    /// <summary>
    /// An ERROR means that items have been dropped, while a WARN denotes that items have been ingested despite an issue
    /// </summary>
    std::string getSeverity() const;
    void setSeverity(std::string value);

protected:
    std::string m_Report_type = "";
    std::string m_Catalog_id = "";
    int32_t m_Code = 0;
    std::string m_Code_label = "";
    std::string m_Message = "";
    int32_t m_Occurrences = 0;
    std::string m_Severity = "";
};

std::vector<CatalogsReportFeedIngestionStats> createCatalogsReportFeedIngestionStatsVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsReportFeedIngestionStats>(const CatalogsReportFeedIngestionStats& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsReportFeedIngestionStats fromPt<CatalogsReportFeedIngestionStats>(const boost::property_tree::ptree& pt) {
    CatalogsReportFeedIngestionStats ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsReportFeedIngestionStats_H_ */
