/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * QuizPinResult.h
 *
 * The result, and link out, based on the user’s choice.
 */

#ifndef QuizPinResult_H_
#define QuizPinResult_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// The result, and link out, based on the user’s choice.
/// </summary>
class  QuizPinResult 
{
public:
    QuizPinResult() = default;
    explicit QuizPinResult(boost::property_tree::ptree const& pt);
    virtual ~QuizPinResult() = default;

    QuizPinResult(const QuizPinResult& other) = default; // copy constructor
    QuizPinResult(QuizPinResult&& other) noexcept = default; // move constructor

    QuizPinResult& operator=(const QuizPinResult& other) = default; // copy assignment
    QuizPinResult& operator=(QuizPinResult&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// QuizPinResult members

    /// <summary>
    /// 
    /// </summary>
    std::string getOrganicPinId() const;
    void setOrganicPinId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getAndroidDeepLink() const;
    void setAndroidDeepLink(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getIosDeepLink() const;
    void setIosDeepLink(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getDestinationUrl() const;
    void setDestinationUrl(std::string value);

    /// <summary>
    /// 
    /// </summary>
    double getResultId() const;
    void setResultId(double value);

protected:
    std::string m_Organic_pin_id = "";
    std::string m_Android_deep_link = "";
    std::string m_Ios_deep_link = "";
    std::string m_Destination_url = "";
    double m_Result_id = 0.0;
};

std::vector<QuizPinResult> createQuizPinResultVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<QuizPinResult>(const QuizPinResult& val) {
    return val.toPropertyTree();
}

template<>
inline QuizPinResult fromPt<QuizPinResult>(const boost::property_tree::ptree& pt) {
    QuizPinResult ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* QuizPinResult_H_ */
