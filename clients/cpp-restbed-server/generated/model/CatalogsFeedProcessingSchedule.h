/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsFeedProcessingSchedule.h
 *
 * Daily processing schedule. This field is **OPTIONAL**. Use this to configure the preferred time for processing a feed (otherwise random).
 */

#ifndef CatalogsFeedProcessingSchedule_H_
#define CatalogsFeedProcessingSchedule_H_



#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Daily processing schedule. This field is **OPTIONAL**. Use this to configure the preferred time for processing a feed (otherwise random).
/// </summary>
class  CatalogsFeedProcessingSchedule 
{
public:
    CatalogsFeedProcessingSchedule() = default;
    explicit CatalogsFeedProcessingSchedule(boost::property_tree::ptree const& pt);
    virtual ~CatalogsFeedProcessingSchedule() = default;

    CatalogsFeedProcessingSchedule(const CatalogsFeedProcessingSchedule& other) = default; // copy constructor
    CatalogsFeedProcessingSchedule(CatalogsFeedProcessingSchedule&& other) noexcept = default; // move constructor

    CatalogsFeedProcessingSchedule& operator=(const CatalogsFeedProcessingSchedule& other) = default; // copy assignment
    CatalogsFeedProcessingSchedule& operator=(CatalogsFeedProcessingSchedule&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsFeedProcessingSchedule members

    /// <summary>
    /// A time in format HH:MM with leading 0 (zero)
    /// </summary>
    std::string getTime() const;
    void setTime(std::string value);

    /// <summary>
    /// The timezone considered for the processing schedule time.
    /// </summary>
    std::string getTimezone() const;
    void setTimezone(std::string value);

protected:
    std::string m_Time = "";
    std::string m_Timezone = "";
};

std::vector<CatalogsFeedProcessingSchedule> createCatalogsFeedProcessingScheduleVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsFeedProcessingSchedule>(const CatalogsFeedProcessingSchedule& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsFeedProcessingSchedule fromPt<CatalogsFeedProcessingSchedule>(const boost::property_tree::ptree& pt) {
    CatalogsFeedProcessingSchedule ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsFeedProcessingSchedule_H_ */
