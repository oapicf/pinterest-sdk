/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "LineItem.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

LineItem::LineItem(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string LineItem::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void LineItem::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree LineItem::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("product_brand", m_Product_brand);
	pt.put("product_category", m_Product_category);
	pt.put("product_id", m_Product_id);
	pt.put("product_name", m_Product_name);
	pt.put("product_price", m_Product_price);
	pt.put("product_quantity", m_Product_quantity);
	pt.put("product_variant", m_Product_variant);
	pt.put("product_variant_id", m_Product_variant_id);
	return pt;
}

void LineItem::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Product_brand = pt.get("product_brand", "");
	m_Product_category = pt.get("product_category", "");
	m_Product_id = pt.get("product_id", 0);
	m_Product_name = pt.get("product_name", "");
	m_Product_price = pt.get("product_price", "");
	m_Product_quantity = pt.get("product_quantity", 0);
	m_Product_variant = pt.get("product_variant", "");
	m_Product_variant_id = pt.get("product_variant_id", "");
}

std::string LineItem::getProductBrand() const
{
    return m_Product_brand;
}

void LineItem::setProductBrand(std::string value)
{
    m_Product_brand = value;
}


std::string LineItem::getProductCategory() const
{
    return m_Product_category;
}

void LineItem::setProductCategory(std::string value)
{
    m_Product_category = value;
}


int32_t LineItem::getProductId() const
{
    return m_Product_id;
}

void LineItem::setProductId(int32_t value)
{
    m_Product_id = value;
}


std::string LineItem::getProductName() const
{
    return m_Product_name;
}

void LineItem::setProductName(std::string value)
{
    m_Product_name = value;
}


std::string LineItem::getProductPrice() const
{
    return m_Product_price;
}

void LineItem::setProductPrice(std::string value)
{
    m_Product_price = value;
}


int32_t LineItem::getProductQuantity() const
{
    return m_Product_quantity;
}

void LineItem::setProductQuantity(int32_t value)
{
    m_Product_quantity = value;
}


std::string LineItem::getProductVariant() const
{
    return m_Product_variant;
}

void LineItem::setProductVariant(std::string value)
{
    m_Product_variant = value;
}


std::string LineItem::getProductVariantId() const
{
    return m_Product_variant_id;
}

void LineItem::setProductVariantId(std::string value)
{
    m_Product_variant_id = value;
}



std::vector<LineItem> createLineItemVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<LineItem>();
    for (const auto& child: pt) {
        vec.emplace_back(LineItem(child.second));
    }

    return vec;
}

}
}
}
}

