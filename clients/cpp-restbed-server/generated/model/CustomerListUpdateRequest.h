/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CustomerListUpdateRequest.h
 *
 * 
 */

#ifndef CustomerListUpdateRequest_H_
#define CustomerListUpdateRequest_H_



#include <string>
#include "Exception.h"
#include "UserListOperationType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CustomerListUpdateRequest 
{
public:
    CustomerListUpdateRequest() = default;
    explicit CustomerListUpdateRequest(boost::property_tree::ptree const& pt);
    virtual ~CustomerListUpdateRequest() = default;

    CustomerListUpdateRequest(const CustomerListUpdateRequest& other) = default; // copy constructor
    CustomerListUpdateRequest(CustomerListUpdateRequest&& other) noexcept = default; // move constructor

    CustomerListUpdateRequest& operator=(const CustomerListUpdateRequest& other) = default; // copy assignment
    CustomerListUpdateRequest& operator=(CustomerListUpdateRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CustomerListUpdateRequest members

    /// <summary>
    /// Records list. Can be any combination of emails, MAIDs, or IDFAs. Emails must be lowercase and can be plain text or hashed using SHA1, SHA256, or MD5. MAIDs and IDFAs must be hashed with SHA1, SHA256, or MD5.
    /// </summary>
    std::string getRecords() const;
    void setRecords(std::string value);

    /// <summary>
    /// 
    /// </summary>
    UserListOperationType getOperationType() const;
    void setOperationType(UserListOperationType value);

    /// <summary>
    /// 
    /// </summary>
    Exception getExceptions() const;
    void setExceptions(Exception value);

protected:
    std::string m_Records = "";
    UserListOperationType m_Operation_type = "";
    Exception m_Exceptions = Exception{};
};

std::vector<CustomerListUpdateRequest> createCustomerListUpdateRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CustomerListUpdateRequest>(const CustomerListUpdateRequest& val) {
    return val.toPropertyTree();
}

template<>
inline CustomerListUpdateRequest fromPt<CustomerListUpdateRequest>(const boost::property_tree::ptree& pt) {
    CustomerListUpdateRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CustomerListUpdateRequest_H_ */
