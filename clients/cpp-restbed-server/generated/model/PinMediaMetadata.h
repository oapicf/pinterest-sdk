/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PinMediaMetadata.h
 *
 * 
 */

#ifndef PinMediaMetadata_H_
#define PinMediaMetadata_H_



#include "VideoMetadata.h"
#include "ImageMetadata.h"
#include <string>
#include "ImageMetadata_images.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "ImageMetadata.h"
#include "VideoMetadata.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  PinMediaMetadata : public ImageMetadata, public VideoMetadata
{
public:
    PinMediaMetadata() = default;
    explicit PinMediaMetadata(boost::property_tree::ptree const& pt);
    virtual ~PinMediaMetadata() = default;

    PinMediaMetadata(const PinMediaMetadata& other) = default; // copy constructor
    PinMediaMetadata(PinMediaMetadata&& other) noexcept = default; // move constructor

    PinMediaMetadata& operator=(const PinMediaMetadata& other) = default; // copy assignment
    PinMediaMetadata& operator=(PinMediaMetadata&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// PinMediaMetadata members

    /// <summary>
    /// 
    /// </summary>
    std::string getItemType() const;
    void setItemType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getTitle() const;
    void setTitle(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getLink() const;
    void setLink(std::string value);

    /// <summary>
    /// 
    /// </summary>
    ImageMetadata_images getImages() const;
    void setImages(ImageMetadata_images value);

    /// <summary>
    /// 
    /// </summary>
    std::string getCoverImageUrl() const;
    void setCoverImageUrl(std::string value);

    /// <summary>
    /// Video url (720p). &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This field is limited and not available to all apps.
    /// </summary>
    std::string getVideoUrl() const;
    void setVideoUrl(std::string value);

    /// <summary>
    /// Duration (in milliseconds)
    /// </summary>
    double getDuration() const;
    void setDuration(double value);

    /// <summary>
    /// Height (in pixels)
    /// </summary>
    int32_t getHeight() const;
    void setHeight(int32_t value);

    /// <summary>
    /// Width (in pixels)
    /// </summary>
    int32_t getWidth() const;
    void setWidth(int32_t value);

protected:
    std::string m_Item_type = "";
    std::string m_Title = "";
    std::string m_Description = "";
    std::string m_Link = "";
    ImageMetadata_images m_Images;
    std::string m_Cover_image_url = "";
    std::string m_Video_url = "";
    double m_Duration = 0.0;
    int32_t m_Height = 0;
    int32_t m_Width = 0;
};

std::vector<PinMediaMetadata> createPinMediaMetadataVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<PinMediaMetadata>(const PinMediaMetadata& val) {
    return val.toPropertyTree();
}

template<>
inline PinMediaMetadata fromPt<PinMediaMetadata>(const boost::property_tree::ptree& pt) {
    PinMediaMetadata ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* PinMediaMetadata_H_ */
