/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * KeywordMetrics.h
 *
 * Keyword metrics JSON
 */

#ifndef KeywordMetrics_H_
#define KeywordMetrics_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Keyword metrics JSON
/// </summary>
class  KeywordMetrics 
{
public:
    KeywordMetrics() = default;
    explicit KeywordMetrics(boost::property_tree::ptree const& pt);
    virtual ~KeywordMetrics() = default;

    KeywordMetrics(const KeywordMetrics& other) = default; // copy constructor
    KeywordMetrics(KeywordMetrics&& other) noexcept = default; // move constructor

    KeywordMetrics& operator=(const KeywordMetrics& other) = default; // copy assignment
    KeywordMetrics& operator=(KeywordMetrics&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// KeywordMetrics members

    /// <summary>
    /// Average cost per click
    /// </summary>
    double getAvgCpcInMicroCurrency() const;
    void setAvgCpcInMicroCurrency(double value);

    /// <summary>
    /// Keyword&#39;s search frequency. This value is based on keyword frequency in pepsi client response
    /// </summary>
    std::string getKeywordQueryVolume() const;
    void setKeywordQueryVolume(std::string value);

protected:
    double m_Avg_cpc_in_micro_currency = 0.0;
    std::string m_Keyword_query_volume = "";
};

std::vector<KeywordMetrics> createKeywordMetricsVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<KeywordMetrics>(const KeywordMetrics& val) {
    return val.toPropertyTree();
}

template<>
inline KeywordMetrics fromPt<KeywordMetrics>(const boost::property_tree::ptree& pt) {
    KeywordMetrics ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* KeywordMetrics_H_ */
