/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsHotelBatchItem.h
 *
 * Hotel batch item
 */

#ifndef CatalogsHotelBatchItem_H_
#define CatalogsHotelBatchItem_H_



#include "CatalogsDeleteHotelItem.h"
#include "CatalogsUpdatableHotelAttributes.h"
#include "CatalogsUpdateHotelItem.h"
#include <string>
#include "CatalogsUpsertHotelItem.h"
#include "CatalogsCreateHotelItem.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "CatalogsCreateHotelItem.h"
#include "CatalogsUpsertHotelItem.h"
#include "CatalogsUpdateHotelItem.h"
#include "CatalogsDeleteHotelItem.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Hotel batch item
/// </summary>
class  CatalogsHotelBatchItem : public CatalogsCreateHotelItem, public CatalogsUpsertHotelItem, public CatalogsUpdateHotelItem, public CatalogsDeleteHotelItem
{
public:
    CatalogsHotelBatchItem() = default;
    explicit CatalogsHotelBatchItem(boost::property_tree::ptree const& pt);
    virtual ~CatalogsHotelBatchItem() = default;

    CatalogsHotelBatchItem(const CatalogsHotelBatchItem& other) = default; // copy constructor
    CatalogsHotelBatchItem(CatalogsHotelBatchItem&& other) noexcept = default; // move constructor

    CatalogsHotelBatchItem& operator=(const CatalogsHotelBatchItem& other) = default; // copy assignment
    CatalogsHotelBatchItem& operator=(CatalogsHotelBatchItem&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsHotelBatchItem members

    /// <summary>
    /// The catalog hotel id in the merchant namespace
    /// </summary>
    std::string getHotelId() const;
    void setHotelId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getOperation() const;
    void setOperation(std::string value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsUpdatableHotelAttributes getAttributes() const;
    void setAttributes(CatalogsUpdatableHotelAttributes value);

protected:
    std::string m_Hotel_id = "";
    std::string m_Operation = "";
    CatalogsUpdatableHotelAttributes m_Attributes;
};

std::vector<CatalogsHotelBatchItem> createCatalogsHotelBatchItemVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsHotelBatchItem>(const CatalogsHotelBatchItem& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsHotelBatchItem fromPt<CatalogsHotelBatchItem>(const boost::property_tree::ptree& pt) {
    CatalogsHotelBatchItem ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsHotelBatchItem_H_ */
