/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AudienceRule.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

AudienceRule::AudienceRule(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string AudienceRule::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void AudienceRule::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree AudienceRule::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("country", m_Country);
	pt.put("customer_list_id", m_Customer_list_id);
	// generate tree for Engagement_domain
    tmp_node.clear();
	if (!m_Engagement_domain.empty()) {
        tmp_node = toPt(m_Engagement_domain);
		pt.add_child("engagement_domain", tmp_node);
		tmp_node.clear();
	}
	pt.put("engagement_type", m_Engagement_type);
	pt.put("event", m_Event);
	pt.add_child("event_data", m_Event_data.toPropertyTree());
	pt.put("percentage", m_Percentage);
	// generate tree for Pin_id
    tmp_node.clear();
	if (!m_Pin_id.empty()) {
        tmp_node = toPt(m_Pin_id);
		pt.add_child("pin_id", tmp_node);
		tmp_node.clear();
	}
	pt.put("prefill", m_Prefill);
	pt.put("retention_days", m_Retention_days);
	// generate tree for Seed_id
    tmp_node.clear();
	if (!m_Seed_id.empty()) {
        tmp_node = toPt(m_Seed_id);
		pt.add_child("seed_id", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Url
    tmp_node.clear();
	if (!m_Url.empty()) {
        tmp_node = toPt(m_Url);
		pt.add_child("url", tmp_node);
		tmp_node.clear();
	}
	pt.put("visitor_source_id", m_Visitor_source_id);
	pt.put("engager_type", m_Engager_type);
	// generate tree for Campaign_id
    tmp_node.clear();
	if (!m_Campaign_id.empty()) {
        tmp_node = toPt(m_Campaign_id);
		pt.add_child("campaign_id", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Ad_id
    tmp_node.clear();
	if (!m_Ad_id.empty()) {
        tmp_node = toPt(m_Ad_id);
		pt.add_child("ad_id", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Objective_type
    tmp_node.clear();
	if (!m_Objective_type.empty()) {
        tmp_node = toPt(m_Objective_type);
		pt.add_child("objective_type", tmp_node);
		tmp_node.clear();
	}
	pt.put("ad_account_id", m_Ad_account_id);
	return pt;
}

void AudienceRule::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Country = pt.get("country", "");
	m_Customer_list_id = pt.get("customer_list_id", "");
	// push all items of Engagement_domain into member
	if (pt.get_child_optional("engagement_domain")) {
        m_Engagement_domain = fromPt<std::vector<std::string>>(pt.get_child("engagement_domain"));
	}
	m_Engagement_type = pt.get("engagement_type", "");
	m_Event = pt.get("event", "");
	if (pt.get_child_optional("event_data")) {
        m_Event_data = fromPt<PinterestTagEventData>(pt.get_child("event_data"));
	}
	m_Percentage = pt.get("percentage", 0);
	// push all items of Pin_id into member
	if (pt.get_child_optional("pin_id")) {
        m_Pin_id = fromPt<std::vector<std::string>>(pt.get_child("pin_id"));
	}
	m_Prefill = pt.get("prefill", false);
	m_Retention_days = pt.get("retention_days", 0);
	// push all items of Seed_id into member
	if (pt.get_child_optional("seed_id")) {
        m_Seed_id = fromPt<std::vector<std::string>>(pt.get_child("seed_id"));
	}
	// push all items of Url into member
	if (pt.get_child_optional("url")) {
        m_Url = fromPt<std::vector<std::string>>(pt.get_child("url"));
	}
	m_Visitor_source_id = pt.get("visitor_source_id", "");
	m_Engager_type = pt.get("engager_type", 0);
	// push all items of Campaign_id into member
	if (pt.get_child_optional("campaign_id")) {
        m_Campaign_id = fromPt<std::vector<std::string>>(pt.get_child("campaign_id"));
	}
	// push all items of Ad_id into member
	if (pt.get_child_optional("ad_id")) {
        m_Ad_id = fromPt<std::vector<std::string>>(pt.get_child("ad_id"));
	}
	// push all items of Objective_type into member
	if (pt.get_child_optional("objective_type")) {
        m_Objective_type = fromPt<std::vector<ObjectiveType>>(pt.get_child("objective_type"));
	}
	m_Ad_account_id = pt.get("ad_account_id", "");
}

std::string AudienceRule::getCountry() const
{
    return m_Country;
}

void AudienceRule::setCountry(std::string value)
{
    m_Country = value;
}


std::string AudienceRule::getCustomerListId() const
{
    return m_Customer_list_id;
}

void AudienceRule::setCustomerListId(std::string value)
{
    m_Customer_list_id = value;
}


std::vector<std::string> AudienceRule::getEngagementDomain() const
{
    return m_Engagement_domain;
}

void AudienceRule::setEngagementDomain(std::vector<std::string> value)
{
    m_Engagement_domain = value;
}


std::string AudienceRule::getEngagementType() const
{
    return m_Engagement_type;
}

void AudienceRule::setEngagementType(std::string value)
{
    m_Engagement_type = value;
}


std::string AudienceRule::getEvent() const
{
    return m_Event;
}

void AudienceRule::setEvent(std::string value)
{
    m_Event = value;
}


PinterestTagEventData AudienceRule::getEventData() const
{
    return m_Event_data;
}

void AudienceRule::setEventData(PinterestTagEventData value)
{
    m_Event_data = value;
}


int32_t AudienceRule::getPercentage() const
{
    return m_Percentage;
}

void AudienceRule::setPercentage(int32_t value)
{
    m_Percentage = value;
}


std::vector<std::string> AudienceRule::getPinId() const
{
    return m_Pin_id;
}

void AudienceRule::setPinId(std::vector<std::string> value)
{
    m_Pin_id = value;
}


bool AudienceRule::isPrefill() const
{
    return m_Prefill;
}

void AudienceRule::setPrefill(bool value)
{
    m_Prefill = value;
}


int32_t AudienceRule::getRetentionDays() const
{
    return m_Retention_days;
}

void AudienceRule::setRetentionDays(int32_t value)
{
    m_Retention_days = value;
}


std::vector<std::string> AudienceRule::getSeedId() const
{
    return m_Seed_id;
}

void AudienceRule::setSeedId(std::vector<std::string> value)
{
    m_Seed_id = value;
}


std::vector<std::string> AudienceRule::getUrl() const
{
    return m_Url;
}

void AudienceRule::setUrl(std::vector<std::string> value)
{
    m_Url = value;
}


std::string AudienceRule::getVisitorSourceId() const
{
    return m_Visitor_source_id;
}

void AudienceRule::setVisitorSourceId(std::string value)
{
    m_Visitor_source_id = value;
}


std::string AudienceRule::getEventSource() const
{
    return m_Event_source;
}

void AudienceRule::setEventSource(std::string value)
{
    m_Event_source = value;
}


std::string AudienceRule::getIngestionSource() const
{
    return m_Ingestion_source;
}

void AudienceRule::setIngestionSource(std::string value)
{
    m_Ingestion_source = value;
}


int32_t AudienceRule::getEngagerType() const
{
    return m_Engager_type;
}

void AudienceRule::setEngagerType(int32_t value)
{
    m_Engager_type = value;
}


std::vector<std::string> AudienceRule::getCampaignId() const
{
    return m_Campaign_id;
}

void AudienceRule::setCampaignId(std::vector<std::string> value)
{
    m_Campaign_id = value;
}


std::vector<std::string> AudienceRule::getAdId() const
{
    return m_Ad_id;
}

void AudienceRule::setAdId(std::vector<std::string> value)
{
    m_Ad_id = value;
}


std::vector<ObjectiveType> AudienceRule::getObjectiveType() const
{
    return m_Objective_type;
}

void AudienceRule::setObjectiveType(std::vector<ObjectiveType> value)
{
    m_Objective_type = value;
}


std::string AudienceRule::getAdAccountId() const
{
    return m_Ad_account_id;
}

void AudienceRule::setAdAccountId(std::string value)
{
    m_Ad_account_id = value;
}



std::vector<AudienceRule> createAudienceRuleVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<AudienceRule>();
    for (const auto& child: pt) {
        vec.emplace_back(AudienceRule(child.second));
    }

    return vec;
}

}
}
}
}

