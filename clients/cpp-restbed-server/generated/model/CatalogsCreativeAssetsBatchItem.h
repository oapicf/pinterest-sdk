/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsCreativeAssetsBatchItem.h
 *
 * Creative assets batch item
 */

#ifndef CatalogsCreativeAssetsBatchItem_H_
#define CatalogsCreativeAssetsBatchItem_H_



#include "CatalogsUpdateCreativeAssetsItem.h"
#include <string>
#include "CatalogsUpsertCreativeAssetsItem.h"
#include "CatalogsCreateCreativeAssetsItem.h"
#include "CatalogsDeleteCreativeAssetsItem.h"
#include "CatalogsUpdatableCreativeAssetsAttributes.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "CatalogsCreateCreativeAssetsItem.h"
#include "CatalogsUpsertCreativeAssetsItem.h"
#include "CatalogsUpdateCreativeAssetsItem.h"
#include "CatalogsDeleteCreativeAssetsItem.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Creative assets batch item
/// </summary>
class  CatalogsCreativeAssetsBatchItem : public CatalogsCreateCreativeAssetsItem, public CatalogsUpsertCreativeAssetsItem, public CatalogsUpdateCreativeAssetsItem, public CatalogsDeleteCreativeAssetsItem
{
public:
    CatalogsCreativeAssetsBatchItem() = default;
    explicit CatalogsCreativeAssetsBatchItem(boost::property_tree::ptree const& pt);
    virtual ~CatalogsCreativeAssetsBatchItem() = default;

    CatalogsCreativeAssetsBatchItem(const CatalogsCreativeAssetsBatchItem& other) = default; // copy constructor
    CatalogsCreativeAssetsBatchItem(CatalogsCreativeAssetsBatchItem&& other) noexcept = default; // move constructor

    CatalogsCreativeAssetsBatchItem& operator=(const CatalogsCreativeAssetsBatchItem& other) = default; // copy assignment
    CatalogsCreativeAssetsBatchItem& operator=(CatalogsCreativeAssetsBatchItem&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsCreativeAssetsBatchItem members

    /// <summary>
    /// The catalog creative assets id in the merchant namespace
    /// </summary>
    std::string getCreativeAssetsId() const;
    void setCreativeAssetsId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getOperation() const;
    void setOperation(std::string value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsUpdatableCreativeAssetsAttributes getAttributes() const;
    void setAttributes(CatalogsUpdatableCreativeAssetsAttributes value);

protected:
    std::string m_Creative_assets_id = "";
    std::string m_Operation = "";
    CatalogsUpdatableCreativeAssetsAttributes m_Attributes;
};

std::vector<CatalogsCreativeAssetsBatchItem> createCatalogsCreativeAssetsBatchItemVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsCreativeAssetsBatchItem>(const CatalogsCreativeAssetsBatchItem& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsCreativeAssetsBatchItem fromPt<CatalogsCreativeAssetsBatchItem>(const boost::property_tree::ptree& pt) {
    CatalogsCreativeAssetsBatchItem ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsCreativeAssetsBatchItem_H_ */
