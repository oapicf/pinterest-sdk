/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdsCreditRedeemResponse.h
 *
 * 
 */

#ifndef AdsCreditRedeemResponse_H_
#define AdsCreditRedeemResponse_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  AdsCreditRedeemResponse 
{
public:
    AdsCreditRedeemResponse() = default;
    explicit AdsCreditRedeemResponse(boost::property_tree::ptree const& pt);
    virtual ~AdsCreditRedeemResponse() = default;

    AdsCreditRedeemResponse(const AdsCreditRedeemResponse& other) = default; // copy constructor
    AdsCreditRedeemResponse(AdsCreditRedeemResponse&& other) noexcept = default; // move constructor

    AdsCreditRedeemResponse& operator=(const AdsCreditRedeemResponse& other) = default; // copy assignment
    AdsCreditRedeemResponse& operator=(AdsCreditRedeemResponse&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AdsCreditRedeemResponse members

    /// <summary>
    /// Returns true if the offer code was successfully applied(validateOnly&#x3D;false) or can be applied(validateOnly&#x3D;true).
    /// </summary>
    bool isSuccess() const;
    void setSuccess(bool value);

    /// <summary>
    /// Error code type if error occurs
    /// </summary>
    int32_t getErrorCode() const;
    void setErrorCode(int32_t value);

    /// <summary>
    /// Reason for failure
    /// </summary>
    std::string getErrorMessage() const;
    void setErrorMessage(std::string value);

protected:
    bool m_Success = false;
    int32_t m_ErrorCode = 0;
    std::string m_ErrorMessage = "";
};

std::vector<AdsCreditRedeemResponse> createAdsCreditRedeemResponseVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AdsCreditRedeemResponse>(const AdsCreditRedeemResponse& val) {
    return val.toPropertyTree();
}

template<>
inline AdsCreditRedeemResponse fromPt<AdsCreditRedeemResponse>(const boost::property_tree::ptree& pt) {
    AdsCreditRedeemResponse ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AdsCreditRedeemResponse_H_ */
