/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateMMMReportRequest.h
 *
 * 
 */

#ifndef CreateMMMReportRequest_H_
#define CreateMMMReportRequest_H_



#include "TargetingAdvertiserCountry.h"
#include "MMMReportingTargetingType.h"
#include <string>
#include "MMMReportingColumn.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CreateMMMReportRequest 
{
public:
    CreateMMMReportRequest() = default;
    explicit CreateMMMReportRequest(boost::property_tree::ptree const& pt);
    virtual ~CreateMMMReportRequest() = default;

    CreateMMMReportRequest(const CreateMMMReportRequest& other) = default; // copy constructor
    CreateMMMReportRequest(CreateMMMReportRequest&& other) noexcept = default; // move constructor

    CreateMMMReportRequest& operator=(const CreateMMMReportRequest& other) = default; // copy assignment
    CreateMMMReportRequest& operator=(CreateMMMReportRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CreateMMMReportRequest members

    /// <summary>
    /// Name of the Marketing Mix Modeling (MMM) report
    /// </summary>
    std::string getReportName() const;
    void setReportName(std::string value);

    /// <summary>
    /// Metric report start date (UTC). Format: YYYY-MM-DD
    /// </summary>
    std::string getStartDate() const;
    void setStartDate(std::string value);

    /// <summary>
    /// Metric report end date (UTC). Format: YYYY-MM-DD
    /// </summary>
    std::string getEndDate() const;
    void setEndDate(std::string value);

    /// <summary>
    /// DAY - metrics are broken down daily.&lt;br&gt; WEEK - metrics are broken down weekly.
    /// </summary>
    std::string getGranularity() const;
    void setGranularity(std::string value);

    /// <summary>
    /// Level of the report
    /// </summary>
    std::string getLevel() const;
    void setLevel(std::string value);

    /// <summary>
    /// List of targeting types
    /// </summary>
    std::vector<MMMReportingTargetingType> getTargetingTypes() const;
    void setTargetingTypes(std::vector<MMMReportingTargetingType> value);

    /// <summary>
    /// Metric and entity columns
    /// </summary>
    std::vector<MMMReportingColumn> getColumns() const;
    void setColumns(std::vector<MMMReportingColumn> value);

    /// <summary>
    /// A List of countries for filtering
    /// </summary>
    std::vector<TargetingAdvertiserCountry> getCountries() const;
    void setCountries(std::vector<TargetingAdvertiserCountry> value);

protected:
    std::string m_Report_name = "";
    std::string m_Start_date = "";
    std::string m_End_date = "";
    std::string m_Granularity = "";
    std::string m_Level = "";
    std::vector<MMMReportingTargetingType> m_Targeting_types;
    std::vector<MMMReportingColumn> m_Columns;
    std::vector<TargetingAdvertiserCountry> m_Countries;
};

std::vector<CreateMMMReportRequest> createCreateMMMReportRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CreateMMMReportRequest>(const CreateMMMReportRequest& val) {
    return val.toPropertyTree();
}

template<>
inline CreateMMMReportRequest fromPt<CreateMMMReportRequest>(const boost::property_tree::ptree& pt) {
    CreateMMMReportRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CreateMMMReportRequest_H_ */
