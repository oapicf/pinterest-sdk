/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsCreativeAssetsItemsBatch.h
 *
 * Object describing the catalogs creative assets items batch
 */

#ifndef CatalogsCreativeAssetsItemsBatch_H_
#define CatalogsCreativeAssetsItemsBatch_H_



#include <string>
#include "CreativeAssetsProcessingRecord.h"
#include <vector>
#include "BatchOperationStatus.h"
#include "CatalogsType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Object describing the catalogs creative assets items batch
/// </summary>
class  CatalogsCreativeAssetsItemsBatch 
{
public:
    CatalogsCreativeAssetsItemsBatch() = default;
    explicit CatalogsCreativeAssetsItemsBatch(boost::property_tree::ptree const& pt);
    virtual ~CatalogsCreativeAssetsItemsBatch() = default;

    CatalogsCreativeAssetsItemsBatch(const CatalogsCreativeAssetsItemsBatch& other) = default; // copy constructor
    CatalogsCreativeAssetsItemsBatch(CatalogsCreativeAssetsItemsBatch&& other) noexcept = default; // move constructor

    CatalogsCreativeAssetsItemsBatch& operator=(const CatalogsCreativeAssetsItemsBatch& other) = default; // copy assignment
    CatalogsCreativeAssetsItemsBatch& operator=(CatalogsCreativeAssetsItemsBatch&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsCreativeAssetsItemsBatch members

    /// <summary>
    /// Id of the catalogs items batch
    /// </summary>
    std::string getBatchId() const;
    void setBatchId(std::string value);

    /// <summary>
    /// Date and time (UTC) of the batch creation: YYYY-MM-DD&#39;T&#39;hh:mm:ss
    /// </summary>
    std::string getCreatedTime() const;
    void setCreatedTime(std::string value);

    /// <summary>
    /// Date and time (UTC) of the batch completion: YYYY-MM-DD&#39;T&#39;hh:mm:ss
    /// </summary>
    std::string getCompletedTime() const;
    void setCompletedTime(std::string value);

    /// <summary>
    /// 
    /// </summary>
    BatchOperationStatus getStatus() const;
    void setStatus(BatchOperationStatus value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsType getCatalogType() const;
    void setCatalogType(CatalogsType value);

    /// <summary>
    /// Array with the catalogs items processing records part of the catalogs items batch
    /// </summary>
    std::vector<CreativeAssetsProcessingRecord> getItems() const;
    void setItems(std::vector<CreativeAssetsProcessingRecord> value);

protected:
    std::string m_Batch_id = "";
    std::string m_Created_time = "";
    std::string m_Completed_time = "";
    BatchOperationStatus m_Status = BatchOperationStatus{};
    CatalogsType m_Catalog_type = CatalogsType{};
    std::vector<CreativeAssetsProcessingRecord> m_Items;
};

std::vector<CatalogsCreativeAssetsItemsBatch> createCatalogsCreativeAssetsItemsBatchVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsCreativeAssetsItemsBatch>(const CatalogsCreativeAssetsItemsBatch& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsCreativeAssetsItemsBatch fromPt<CatalogsCreativeAssetsItemsBatch>(const boost::property_tree::ptree& pt) {
    CatalogsCreativeAssetsItemsBatch ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsCreativeAssetsItemsBatch_H_ */
