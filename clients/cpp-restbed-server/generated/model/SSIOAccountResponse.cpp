/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SSIOAccountResponse.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

SSIOAccountResponse::SSIOAccountResponse(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string SSIOAccountResponse::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void SSIOAccountResponse::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree SSIOAccountResponse::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("eligible", m_Eligible);
	pt.put("can_edit", m_Can_edit);
	// generate tree for Billto_infos
    tmp_node.clear();
	if (!m_Billto_infos.empty()) {
        tmp_node = toPt(m_Billto_infos);
		pt.add_child("billto_infos", tmp_node);
		tmp_node.clear();
	}
	pt.put("currency", m_Currency);
	// generate tree for Pmp_names
    tmp_node.clear();
	if (!m_Pmp_names.empty()) {
        tmp_node = toPt(m_Pmp_names);
		pt.add_child("pmp_names", tmp_node);
		tmp_node.clear();
	}
	pt.put("error", m_Error);
	return pt;
}

void SSIOAccountResponse::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Eligible = pt.get("eligible", false);
	m_Can_edit = pt.get("can_edit", false);
	// push all items of Billto_infos into member
	if (pt.get_child_optional("billto_infos")) {
        m_Billto_infos = fromPt<std::vector<SSIOAccountItem>>(pt.get_child("billto_infos"));
	}
	m_Currency = pt.get("currency", "");
	// push all items of Pmp_names into member
	if (pt.get_child_optional("pmp_names")) {
        m_Pmp_names = fromPt<std::vector<SSIOAccountPMPName>>(pt.get_child("pmp_names"));
	}
	m_Error = pt.get("error", "");
}

bool SSIOAccountResponse::isEligible() const
{
    return m_Eligible;
}

void SSIOAccountResponse::setEligible(bool value)
{
    m_Eligible = value;
}


bool SSIOAccountResponse::isCanEdit() const
{
    return m_Can_edit;
}

void SSIOAccountResponse::setCanEdit(bool value)
{
    m_Can_edit = value;
}


std::vector<SSIOAccountItem> SSIOAccountResponse::getBilltoInfos() const
{
    return m_Billto_infos;
}

void SSIOAccountResponse::setBilltoInfos(std::vector<SSIOAccountItem> value)
{
    m_Billto_infos = value;
}


std::string SSIOAccountResponse::getCurrency() const
{
    return m_Currency;
}

void SSIOAccountResponse::setCurrency(std::string value)
{
    m_Currency = value;
}


std::vector<SSIOAccountPMPName> SSIOAccountResponse::getPmpNames() const
{
    return m_Pmp_names;
}

void SSIOAccountResponse::setPmpNames(std::vector<SSIOAccountPMPName> value)
{
    m_Pmp_names = value;
}


std::string SSIOAccountResponse::getError() const
{
    return m_Error;
}

void SSIOAccountResponse::setError(std::string value)
{
    m_Error = value;
}



std::vector<SSIOAccountResponse> createSSIOAccountResponseVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<SSIOAccountResponse>();
    for (const auto& child: pt) {
        vec.emplace_back(SSIOAccountResponse(child.second));
    }

    return vec;
}

}
}
}
}

