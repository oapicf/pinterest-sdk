/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateInvitesResultsResponseArray_items_inner_invite.h
 *
 * An invite object if the invite/request was successfully created. Will only be provided if the an invite/request is successfully created.
 */

#ifndef CreateInvitesResultsResponseArray_items_inner_invite_H_
#define CreateInvitesResultsResponseArray_items_inner_invite_H_



#include <string>
#include "BusinessAccessUserSummary.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// An invite object if the invite/request was successfully created. Will only be provided if the an invite/request is successfully created.
/// </summary>
class  CreateInvitesResultsResponseArray_items_inner_invite 
{
public:
    CreateInvitesResultsResponseArray_items_inner_invite() = default;
    explicit CreateInvitesResultsResponseArray_items_inner_invite(boost::property_tree::ptree const& pt);
    virtual ~CreateInvitesResultsResponseArray_items_inner_invite() = default;

    CreateInvitesResultsResponseArray_items_inner_invite(const CreateInvitesResultsResponseArray_items_inner_invite& other) = default; // copy constructor
    CreateInvitesResultsResponseArray_items_inner_invite(CreateInvitesResultsResponseArray_items_inner_invite&& other) noexcept = default; // move constructor

    CreateInvitesResultsResponseArray_items_inner_invite& operator=(const CreateInvitesResultsResponseArray_items_inner_invite& other) = default; // copy assignment
    CreateInvitesResultsResponseArray_items_inner_invite& operator=(CreateInvitesResultsResponseArray_items_inner_invite&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CreateInvitesResultsResponseArray_items_inner_invite members

    /// <summary>
    /// Unique identifier of the invite/request.
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// Metadata for the member/partner that was sent the invite/request.
    /// </summary>
    BusinessAccessUserSummary getUser() const;
    void setUser(BusinessAccessUserSummary value);

protected:
    std::string m_Id = "";
    BusinessAccessUserSummary m_User;
};

std::vector<CreateInvitesResultsResponseArray_items_inner_invite> createCreateInvitesResultsResponseArray_items_inner_inviteVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CreateInvitesResultsResponseArray_items_inner_invite>(const CreateInvitesResultsResponseArray_items_inner_invite& val) {
    return val.toPropertyTree();
}

template<>
inline CreateInvitesResultsResponseArray_items_inner_invite fromPt<CreateInvitesResultsResponseArray_items_inner_invite>(const boost::property_tree::ptree& pt) {
    CreateInvitesResultsResponseArray_items_inner_invite ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CreateInvitesResultsResponseArray_items_inner_invite_H_ */
