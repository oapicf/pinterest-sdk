/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TargetingTemplateAudienceSizing_reach_estimate.h
 *
 * 
 */

#ifndef TargetingTemplateAudienceSizing_reach_estimate_H_
#define TargetingTemplateAudienceSizing_reach_estimate_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  TargetingTemplateAudienceSizing_reach_estimate 
{
public:
    TargetingTemplateAudienceSizing_reach_estimate() = default;
    explicit TargetingTemplateAudienceSizing_reach_estimate(boost::property_tree::ptree const& pt);
    virtual ~TargetingTemplateAudienceSizing_reach_estimate() = default;

    TargetingTemplateAudienceSizing_reach_estimate(const TargetingTemplateAudienceSizing_reach_estimate& other) = default; // copy constructor
    TargetingTemplateAudienceSizing_reach_estimate(TargetingTemplateAudienceSizing_reach_estimate&& other) noexcept = default; // move constructor

    TargetingTemplateAudienceSizing_reach_estimate& operator=(const TargetingTemplateAudienceSizing_reach_estimate& other) = default; // copy assignment
    TargetingTemplateAudienceSizing_reach_estimate& operator=(TargetingTemplateAudienceSizing_reach_estimate&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// TargetingTemplateAudienceSizing_reach_estimate members

    /// <summary>
    /// 
    /// </summary>
    int64_t getEstimate() const;
    void setEstimate(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getLowerBound() const;
    void setLowerBound(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getUpperBound() const;
    void setUpperBound(int64_t value);

protected:
    int64_t m_Estimate = 0L;
    int64_t m_Lower_bound = 0L;
    int64_t m_Upper_bound = 0L;
};

std::vector<TargetingTemplateAudienceSizing_reach_estimate> createTargetingTemplateAudienceSizing_reach_estimateVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<TargetingTemplateAudienceSizing_reach_estimate>(const TargetingTemplateAudienceSizing_reach_estimate& val) {
    return val.toPropertyTree();
}

template<>
inline TargetingTemplateAudienceSizing_reach_estimate fromPt<TargetingTemplateAudienceSizing_reach_estimate>(const boost::property_tree::ptree& pt) {
    TargetingTemplateAudienceSizing_reach_estimate ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* TargetingTemplateAudienceSizing_reach_estimate_H_ */
