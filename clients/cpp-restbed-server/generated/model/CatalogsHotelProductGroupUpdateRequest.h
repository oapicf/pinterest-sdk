/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsHotelProductGroupUpdateRequest.h
 *
 * Request object for updating a hotel product group.
 */

#ifndef CatalogsHotelProductGroupUpdateRequest_H_
#define CatalogsHotelProductGroupUpdateRequest_H_



#include <string>
#include "CatalogsHotelProductGroupFilters.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Request object for updating a hotel product group.
/// </summary>
class  CatalogsHotelProductGroupUpdateRequest 
{
public:
    CatalogsHotelProductGroupUpdateRequest() = default;
    explicit CatalogsHotelProductGroupUpdateRequest(boost::property_tree::ptree const& pt);
    virtual ~CatalogsHotelProductGroupUpdateRequest() = default;

    CatalogsHotelProductGroupUpdateRequest(const CatalogsHotelProductGroupUpdateRequest& other) = default; // copy constructor
    CatalogsHotelProductGroupUpdateRequest(CatalogsHotelProductGroupUpdateRequest&& other) noexcept = default; // move constructor

    CatalogsHotelProductGroupUpdateRequest& operator=(const CatalogsHotelProductGroupUpdateRequest& other) = default; // copy assignment
    CatalogsHotelProductGroupUpdateRequest& operator=(CatalogsHotelProductGroupUpdateRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsHotelProductGroupUpdateRequest members

    /// <summary>
    /// 
    /// </summary>
    std::string getCatalogType() const;
    void setCatalogType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsHotelProductGroupFilters getFilters() const;
    void setFilters(CatalogsHotelProductGroupFilters value);

protected:
    std::string m_Catalog_type = "";
    std::string m_Name = "";
    std::string m_Description = "";
    CatalogsHotelProductGroupFilters m_Filters;
};

std::vector<CatalogsHotelProductGroupUpdateRequest> createCatalogsHotelProductGroupUpdateRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsHotelProductGroupUpdateRequest>(const CatalogsHotelProductGroupUpdateRequest& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsHotelProductGroupUpdateRequest fromPt<CatalogsHotelProductGroupUpdateRequest>(const boost::property_tree::ptree& pt) {
    CatalogsHotelProductGroupUpdateRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsHotelProductGroupUpdateRequest_H_ */
