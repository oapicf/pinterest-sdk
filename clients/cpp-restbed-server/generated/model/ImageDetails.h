/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ImageDetails.h
 *
 * 
 */

#ifndef ImageDetails_H_
#define ImageDetails_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ImageDetails 
{
public:
    ImageDetails() = default;
    explicit ImageDetails(boost::property_tree::ptree const& pt);
    virtual ~ImageDetails() = default;

    ImageDetails(const ImageDetails& other) = default; // copy constructor
    ImageDetails(ImageDetails&& other) noexcept = default; // move constructor

    ImageDetails& operator=(const ImageDetails& other) = default; // copy assignment
    ImageDetails& operator=(ImageDetails&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ImageDetails members

    /// <summary>
    /// 
    /// </summary>
    int32_t getWidth() const;
    void setWidth(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getHeight() const;
    void setHeight(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::string getUrl() const;
    void setUrl(std::string value);

protected:
    int32_t m_Width = 0;
    int32_t m_Height = 0;
    std::string m_Url = "";
};

std::vector<ImageDetails> createImageDetailsVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ImageDetails>(const ImageDetails& val) {
    return val.toPropertyTree();
}

template<>
inline ImageDetails fromPt<ImageDetails>(const boost::property_tree::ptree& pt) {
    ImageDetails ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ImageDetails_H_ */
