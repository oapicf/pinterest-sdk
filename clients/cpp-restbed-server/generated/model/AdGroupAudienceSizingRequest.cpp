/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AdGroupAudienceSizingRequest.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

AdGroupAudienceSizingRequest::AdGroupAudienceSizingRequest(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string AdGroupAudienceSizingRequest::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void AdGroupAudienceSizingRequest::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree AdGroupAudienceSizingRequest::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("auto_targeting_enabled", m_Auto_targeting_enabled);
	// generate tree for Creative_types
    tmp_node.clear();
	if (!m_Creative_types.empty()) {
        tmp_node = toPt(m_Creative_types);
		pt.add_child("creative_types", tmp_node);
		tmp_node.clear();
	}
	pt.add_child("targeting_spec", m_Targeting_spec.toPropertyTree());
	// generate tree for Product_group_ids
    tmp_node.clear();
	if (!m_Product_group_ids.empty()) {
        tmp_node = toPt(m_Product_group_ids);
		pt.add_child("product_group_ids", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Keywords
    tmp_node.clear();
	if (!m_Keywords.empty()) {
        tmp_node = toPt(m_Keywords);
		pt.add_child("keywords", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void AdGroupAudienceSizingRequest::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Auto_targeting_enabled = pt.get("auto_targeting_enabled", true);
	// push all items of Creative_types into member
	if (pt.get_child_optional("creative_types")) {
        m_Creative_types = fromPt<std::vector<std::string>>(pt.get_child("creative_types"));
	}
	if (pt.get_child_optional("targeting_spec")) {
        m_Targeting_spec = fromPt<TargetingSpec>(pt.get_child("targeting_spec"));
	}
	// push all items of Product_group_ids into member
	if (pt.get_child_optional("product_group_ids")) {
        m_Product_group_ids = fromPt<std::vector<std::string>>(pt.get_child("product_group_ids"));
	}
	// push all items of Keywords into member
	if (pt.get_child_optional("keywords")) {
        m_Keywords = fromPt<std::vector<AdGroupAudienceSizingRequest_keywords_inner>>(pt.get_child("keywords"));
	}
}

bool AdGroupAudienceSizingRequest::isAutoTargetingEnabled() const
{
    return m_Auto_targeting_enabled;
}

void AdGroupAudienceSizingRequest::setAutoTargetingEnabled(bool value)
{
    m_Auto_targeting_enabled = value;
}


PlacementGroupType AdGroupAudienceSizingRequest::getPlacementGroup() const
{
    return m_Placement_group;
}

void AdGroupAudienceSizingRequest::setPlacementGroup(PlacementGroupType value)
{
    m_Placement_group = value;
}


std::vector<std::string> AdGroupAudienceSizingRequest::getCreativeTypes() const
{
    return m_Creative_types;
}

void AdGroupAudienceSizingRequest::setCreativeTypes(std::vector<std::string> value)
{
    static const std::array<std::string, 8> allowedValues = {
        "REGULAR", "VIDEO", "SHOPPING", "CAROUSEL", "MAX_VIDEO", "SHOP_THE_PIN", "COLLECTION", "IDEA"
    };

    for (const auto &v: value) {
        if (std::find(allowedValues.begin(), allowedValues.end(), v) == allowedValues.end()) {
            throw std::runtime_error("Value " + boost::lexical_cast<std::string>(v) + " not allowed");
        }
    }
}


TargetingSpec AdGroupAudienceSizingRequest::getTargetingSpec() const
{
    return m_Targeting_spec;
}

void AdGroupAudienceSizingRequest::setTargetingSpec(TargetingSpec value)
{
    m_Targeting_spec = value;
}


std::vector<std::string> AdGroupAudienceSizingRequest::getProductGroupIds() const
{
    return m_Product_group_ids;
}

void AdGroupAudienceSizingRequest::setProductGroupIds(std::vector<std::string> value)
{
    m_Product_group_ids = value;
}


std::vector<AdGroupAudienceSizingRequest_keywords_inner> AdGroupAudienceSizingRequest::getKeywords() const
{
    return m_Keywords;
}

void AdGroupAudienceSizingRequest::setKeywords(std::vector<AdGroupAudienceSizingRequest_keywords_inner> value)
{
    m_Keywords = value;
}



std::vector<AdGroupAudienceSizingRequest> createAdGroupAudienceSizingRequestVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<AdGroupAudienceSizingRequest>();
    for (const auto& child: pt) {
        vec.emplace_back(AdGroupAudienceSizingRequest(child.second));
    }

    return vec;
}

}
}
}
}

