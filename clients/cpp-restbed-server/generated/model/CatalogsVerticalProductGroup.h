/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsVerticalProductGroup.h
 *
 * 
 */

#ifndef CatalogsVerticalProductGroup_H_
#define CatalogsVerticalProductGroup_H_



#include "CatalogsCreativeAssetsProductGroup.h"
#include "CatalogsCreativeAssetsProductGroupFilters.h"
#include "CatalogsProductGroupType.h"
#include <string>
#include "CatalogsHotelProductGroup.h"
#include "CatalogsRetailProductGroup.h"
#include "CatalogsProductGroupStatus.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "CatalogsRetailProductGroup.h"
#include "CatalogsHotelProductGroup.h"
#include "CatalogsCreativeAssetsProductGroup.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CatalogsVerticalProductGroup : public CatalogsRetailProductGroup, public CatalogsHotelProductGroup, public CatalogsCreativeAssetsProductGroup
{
public:
    CatalogsVerticalProductGroup() = default;
    explicit CatalogsVerticalProductGroup(boost::property_tree::ptree const& pt);
    virtual ~CatalogsVerticalProductGroup() = default;

    CatalogsVerticalProductGroup(const CatalogsVerticalProductGroup& other) = default; // copy constructor
    CatalogsVerticalProductGroup(CatalogsVerticalProductGroup&& other) noexcept = default; // move constructor

    CatalogsVerticalProductGroup& operator=(const CatalogsVerticalProductGroup& other) = default; // copy assignment
    CatalogsVerticalProductGroup& operator=(CatalogsVerticalProductGroup&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsVerticalProductGroup members

    /// <summary>
    /// 
    /// </summary>
    std::string getCatalogType() const;
    void setCatalogType(std::string value);

    /// <summary>
    /// ID of the creative assets product group.
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// Name of creative assets product group
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsCreativeAssetsProductGroupFilters getFilters() const;
    void setFilters(CatalogsCreativeAssetsProductGroupFilters value);

    /// <summary>
    /// boolean indicator of whether the product group is being featured or not
    /// </summary>
    bool isIsFeatured() const;
    void setIsFeatured(bool value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsProductGroupType getType() const;
    void setType(CatalogsProductGroupType value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsProductGroupStatus getStatus() const;
    void setStatus(CatalogsProductGroupStatus value);

    /// <summary>
    /// Unix timestamp in seconds of when catalog product group was created.
    /// </summary>
    int32_t getCreatedAt() const;
    void setCreatedAt(int32_t value);

    /// <summary>
    /// Unix timestamp in seconds of last time catalog product group was updated.
    /// </summary>
    int32_t getUpdatedAt() const;
    void setUpdatedAt(int32_t value);

    /// <summary>
    /// Catalog id pertaining to the creative assets product group.
    /// </summary>
    std::string getCatalogId() const;
    void setCatalogId(std::string value);

    /// <summary>
    /// id of the catalogs feed belonging to this catalog product group
    /// </summary>
    std::string getFeedId() const;
    void setFeedId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getCountry() const;
    void setCountry(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getLocale() const;
    void setLocale(std::string value);

protected:
    std::string m_Catalog_type = "";
    std::string m_Id = "";
    std::string m_Name = "";
    std::string m_Description = "";
    CatalogsCreativeAssetsProductGroupFilters m_Filters;
    bool m_Is_featured = false;
    CatalogsProductGroupType m_Type = CatalogsProductGroupType{};
    CatalogsProductGroupStatus m_Status = CatalogsProductGroupStatus{};
    int32_t m_Created_at = 0;
    int32_t m_Updated_at = 0;
    std::string m_Catalog_id = "";
    std::string m_Feed_id = "";
    std::string m_Country = "";
    std::string m_Locale = "";
};

std::vector<CatalogsVerticalProductGroup> createCatalogsVerticalProductGroupVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsVerticalProductGroup>(const CatalogsVerticalProductGroup& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsVerticalProductGroup fromPt<CatalogsVerticalProductGroup>(const boost::property_tree::ptree& pt) {
    CatalogsVerticalProductGroup ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsVerticalProductGroup_H_ */
