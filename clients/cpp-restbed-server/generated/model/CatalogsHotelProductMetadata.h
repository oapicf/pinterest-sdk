/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsHotelProductMetadata.h
 *
 * Hotel product metadata entity
 */

#ifndef CatalogsHotelProductMetadata_H_
#define CatalogsHotelProductMetadata_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Hotel product metadata entity
/// </summary>
class  CatalogsHotelProductMetadata 
{
public:
    CatalogsHotelProductMetadata() = default;
    explicit CatalogsHotelProductMetadata(boost::property_tree::ptree const& pt);
    virtual ~CatalogsHotelProductMetadata() = default;

    CatalogsHotelProductMetadata(const CatalogsHotelProductMetadata& other) = default; // copy constructor
    CatalogsHotelProductMetadata(CatalogsHotelProductMetadata&& other) noexcept = default; // move constructor

    CatalogsHotelProductMetadata& operator=(const CatalogsHotelProductMetadata& other) = default; // copy assignment
    CatalogsHotelProductMetadata& operator=(CatalogsHotelProductMetadata&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsHotelProductMetadata members

    /// <summary>
    /// The user-created unique ID that represents the hotel item.
    /// </summary>
    std::string getHotelId() const;
    void setHotelId(std::string value);

protected:
    std::string m_Hotel_id = "";
};

std::vector<CatalogsHotelProductMetadata> createCatalogsHotelProductMetadataVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsHotelProductMetadata>(const CatalogsHotelProductMetadata& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsHotelProductMetadata fromPt<CatalogsHotelProductMetadata>(const boost::property_tree::ptree& pt) {
    CatalogsHotelProductMetadata ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsHotelProductMetadata_H_ */
