/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TrendingKeywordsResponse_trends_inner_time_series.h
 *
 * A sequence of weekly observations of the relative search volume for this keyword over the past year.&lt;br /&gt; These values are normalized to a [0-100] range, and can be used to visualize the history of user interest in this keyword. By default, normalization is applied independently to the time series of each keyword, but the &#x60;normalize_against_group&#x60; query parameter can be used in cases where you wish to compare relative volume between keywords.&lt;br /&gt; **Note**: The date of each observation is in ISO-8601 format and represents the *end* of the week.  For example, a value of &#x60;2023-10-31&#x60; would include searches that happened between &#x60;2023-10-25&#x60; and &#x60;2023-10-31&#x60;.
 */

#ifndef TrendingKeywordsResponse_trends_inner_time_series_H_
#define TrendingKeywordsResponse_trends_inner_time_series_H_



#include <string>
#include <map>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// A sequence of weekly observations of the relative search volume for this keyword over the past year.&lt;br /&gt; These values are normalized to a [0-100] range, and can be used to visualize the history of user interest in this keyword. By default, normalization is applied independently to the time series of each keyword, but the &#x60;normalize_against_group&#x60; query parameter can be used in cases where you wish to compare relative volume between keywords.&lt;br /&gt; **Note**: The date of each observation is in ISO-8601 format and represents the *end* of the week.  For example, a value of &#x60;2023-10-31&#x60; would include searches that happened between &#x60;2023-10-25&#x60; and &#x60;2023-10-31&#x60;.
/// </summary>
class  TrendingKeywordsResponse_trends_inner_time_series 
{
public:
    TrendingKeywordsResponse_trends_inner_time_series() = default;
    explicit TrendingKeywordsResponse_trends_inner_time_series(boost::property_tree::ptree const& pt);
    virtual ~TrendingKeywordsResponse_trends_inner_time_series() = default;

    TrendingKeywordsResponse_trends_inner_time_series(const TrendingKeywordsResponse_trends_inner_time_series& other) = default; // copy constructor
    TrendingKeywordsResponse_trends_inner_time_series(TrendingKeywordsResponse_trends_inner_time_series&& other) noexcept = default; // move constructor

    TrendingKeywordsResponse_trends_inner_time_series& operator=(const TrendingKeywordsResponse_trends_inner_time_series& other) = default; // copy assignment
    TrendingKeywordsResponse_trends_inner_time_series& operator=(TrendingKeywordsResponse_trends_inner_time_series&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// TrendingKeywordsResponse_trends_inner_time_series members

    /// <summary>
    /// 
    /// </summary>
    std::string getDate() const;
    void setDate(std::string value);

protected:
    std::string m_date = "";
};

std::vector<TrendingKeywordsResponse_trends_inner_time_series> createTrendingKeywordsResponse_trends_inner_time_seriesVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<TrendingKeywordsResponse_trends_inner_time_series>(const TrendingKeywordsResponse_trends_inner_time_series& val) {
    return val.toPropertyTree();
}

template<>
inline TrendingKeywordsResponse_trends_inner_time_series fromPt<TrendingKeywordsResponse_trends_inner_time_series>(const boost::property_tree::ptree& pt) {
    TrendingKeywordsResponse_trends_inner_time_series ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* TrendingKeywordsResponse_trends_inner_time_series_H_ */
