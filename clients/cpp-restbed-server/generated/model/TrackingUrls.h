/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TrackingUrls.h
 *
 * Third-party tracking URLs. Up to three tracking URLs - with a max length of 2,000 - are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. For more information, see &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Third-party and dynamic tracking&lt;/a&gt;.
 */

#ifndef TrackingUrls_H_
#define TrackingUrls_H_



#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Third-party tracking URLs. Up to three tracking URLs - with a max length of 2,000 - are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. For more information, see &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Third-party and dynamic tracking&lt;/a&gt;.
/// </summary>
class  TrackingUrls 
{
public:
    TrackingUrls() = default;
    explicit TrackingUrls(boost::property_tree::ptree const& pt);
    virtual ~TrackingUrls() = default;

    TrackingUrls(const TrackingUrls& other) = default; // copy constructor
    TrackingUrls(TrackingUrls&& other) noexcept = default; // move constructor

    TrackingUrls& operator=(const TrackingUrls& other) = default; // copy assignment
    TrackingUrls& operator=(TrackingUrls&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// TrackingUrls members

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::string> getImpression() const;
    void setImpression(std::vector<std::string> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::string> getClick() const;
    void setClick(std::vector<std::string> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::string> getEngagement() const;
    void setEngagement(std::vector<std::string> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::string> getBuyableButton() const;
    void setBuyableButton(std::vector<std::string> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::string> getAudienceVerification() const;
    void setAudienceVerification(std::vector<std::string> value);

protected:
    std::vector<std::string> m_Impression;
    std::vector<std::string> m_Click;
    std::vector<std::string> m_Engagement;
    std::vector<std::string> m_Buyable_button;
    std::vector<std::string> m_Audience_verification;
};

std::vector<TrackingUrls> createTrackingUrlsVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<TrackingUrls>(const TrackingUrls& val) {
    return val.toPropertyTree();
}

template<>
inline TrackingUrls fromPt<TrackingUrls>(const boost::property_tree::ptree& pt) {
    TrackingUrls ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* TrackingUrls_H_ */
