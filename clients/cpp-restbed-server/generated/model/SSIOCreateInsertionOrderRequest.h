/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SSIOCreateInsertionOrderRequest.h
 *
 * 
 */

#ifndef SSIOCreateInsertionOrderRequest_H_
#define SSIOCreateInsertionOrderRequest_H_



#include <string>
#include "Currency.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "SSIOInsertionOrderCommon.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  SSIOCreateInsertionOrderRequest : public SSIOInsertionOrderCommon
{
public:
    SSIOCreateInsertionOrderRequest() = default;
    explicit SSIOCreateInsertionOrderRequest(boost::property_tree::ptree const& pt);
    virtual ~SSIOCreateInsertionOrderRequest() = default;

    SSIOCreateInsertionOrderRequest(const SSIOCreateInsertionOrderRequest& other) = default; // copy constructor
    SSIOCreateInsertionOrderRequest(SSIOCreateInsertionOrderRequest&& other) noexcept = default; // move constructor

    SSIOCreateInsertionOrderRequest& operator=(const SSIOCreateInsertionOrderRequest& other) = default; // copy assignment
    SSIOCreateInsertionOrderRequest& operator=(SSIOCreateInsertionOrderRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// SSIOCreateInsertionOrderRequest members

    /// <summary>
    /// Starting date of time period. Format: YYYY-MM-DD
    /// </summary>
    std::string getStartDate() const;
    void setStartDate(std::string value);

    /// <summary>
    /// End date of time period. Format: YYYY-MM-DD
    /// </summary>
    std::string getEndDate() const;
    void setEndDate(std::string value);

    /// <summary>
    /// The po number
    /// </summary>
    std::string getPoNumber() const;
    void setPoNumber(std::string value);

    /// <summary>
    /// If Budget order line, the budget amount.
    /// </summary>
    double getBudgetAmount() const;
    void setBudgetAmount(double value);

    /// <summary>
    /// The billing contact first name
    /// </summary>
    std::string getBillingContactFirstname() const;
    void setBillingContactFirstname(std::string value);

    /// <summary>
    /// The billing contact last name
    /// </summary>
    std::string getBillingContactLastname() const;
    void setBillingContactLastname(std::string value);

    /// <summary>
    /// The billing contact email
    /// </summary>
    std::string getBillingContactEmail() const;
    void setBillingContactEmail(std::string value);

    /// <summary>
    /// The media contact first name
    /// </summary>
    std::string getMediaContactFirstname() const;
    void setMediaContactFirstname(std::string value);

    /// <summary>
    /// The media contact last name
    /// </summary>
    std::string getMediaContactLastname() const;
    void setMediaContactLastname(std::string value);

    /// <summary>
    /// The media contact email
    /// </summary>
    std::string getMediaContactEmail() const;
    void setMediaContactEmail(std::string value);

    /// <summary>
    /// URL link for agency
    /// </summary>
    std::string getAgencyLink() const;
    void setAgencyLink(std::string value);

    /// <summary>
    /// The email of user submitting the insertion order
    /// </summary>
    std::string getUserEmail() const;
    void setUserEmail(std::string value);

    /// <summary>
    /// The UTC timestamp (to the nearest sec) of when terms were accepted
    /// </summary>
    int32_t getAcceptedTermsTime() const;
    void setAcceptedTermsTime(int32_t value);

    /// <summary>
    /// The pmp id
    /// </summary>
    std::string getPmpId() const;
    void setPmpId(std::string value);

    /// <summary>
    /// The order name
    /// </summary>
    std::string getOrderName() const;
    void setOrderName(std::string value);

    /// <summary>
    /// Type can be Budget or Perpetual
    /// </summary>
    std::string getOrderLineType() const;
    void setOrderLineType(std::string value);

    /// <summary>
    /// The SFDC id for the terms
    /// </summary>
    std::string getAcceptedTermsId() const;
    void setAcceptedTermsId(std::string value);

    /// <summary>
    /// The bill-to company id
    /// </summary>
    std::string getBilltoCompanyId() const;
    void setBilltoCompanyId(std::string value);

    /// <summary>
    /// The bill-to business address id
    /// </summary>
    std::string getBilltoBusinessAddressId() const;
    void setBilltoBusinessAddressId(std::string value);

    /// <summary>
    /// The bill-to billing address id
    /// </summary>
    std::string getBilltoBillingAddressId() const;
    void setBilltoBillingAddressId(std::string value);

    /// <summary>
    /// If Ongoing (perpetual) order line, the estimated monthly spend
    /// </summary>
    double getEstimatedMonthlySpend() const;
    void setEstimatedMonthlySpend(double value);

    /// <summary>
    /// 
    /// </summary>
    Currency getCurrencyInfo() const;
    void setCurrencyInfo(Currency value);

protected:
    std::string m_Start_date = "";
    std::string m_End_date = "";
    std::string m_Po_number = "";
    double m_Budget_amount = 0.0;
    std::string m_Billing_contact_firstname = "";
    std::string m_Billing_contact_lastname = "";
    std::string m_Billing_contact_email = "";
    std::string m_Media_contact_firstname = "";
    std::string m_Media_contact_lastname = "";
    std::string m_Media_contact_email = "";
    std::string m_Agency_link = "";
    std::string m_User_email = "";
    int32_t m_Accepted_terms_time = 0;
    std::string m_Pmp_id = "";
    std::string m_Order_name = "";
    std::string m_Order_line_type = "";
    std::string m_Accepted_terms_id = "";
    std::string m_Billto_company_id = "";
    std::string m_Billto_business_address_id = "";
    std::string m_Billto_billing_address_id = "";
    double m_Estimated_monthly_spend = 0.0;
    Currency m_Currency_info = Currency{};
};

std::vector<SSIOCreateInsertionOrderRequest> createSSIOCreateInsertionOrderRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<SSIOCreateInsertionOrderRequest>(const SSIOCreateInsertionOrderRequest& val) {
    return val.toPropertyTree();
}

template<>
inline SSIOCreateInsertionOrderRequest fromPt<SSIOCreateInsertionOrderRequest>(const boost::property_tree::ptree& pt) {
    SSIOCreateInsertionOrderRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* SSIOCreateInsertionOrderRequest_H_ */
