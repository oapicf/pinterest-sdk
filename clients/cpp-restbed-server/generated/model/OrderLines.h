/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderLines.h
 *
 * Order Line
 */

#ifndef OrderLines_H_
#define OrderLines_H_



#include "OrderLineStatus.h"
#include <string>
#include "OrderLinePaidType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Order Line
/// </summary>
class  OrderLines 
{
public:
    OrderLines() = default;
    explicit OrderLines(boost::property_tree::ptree const& pt);
    virtual ~OrderLines() = default;

    OrderLines(const OrderLines& other) = default; // copy constructor
    OrderLines(OrderLines&& other) noexcept = default; // move constructor

    OrderLines& operator=(const OrderLines& other) = default; // copy assignment
    OrderLines& operator=(OrderLines&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// OrderLines members

    /// <summary>
    /// Order line ID.
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// Always \&quot;orderline\&quot;.
    /// </summary>
    std::string getType() const;
    void setType(std::string value);

    /// <summary>
    /// Ad account ID.
    /// </summary>
    std::string getAdAccountId() const;
    void setAdAccountId(std::string value);

    /// <summary>
    /// Purchase order ID.
    /// </summary>
    std::string getPurchaseOrderId() const;
    void setPurchaseOrderId(std::string value);

    /// <summary>
    /// Start time. Unix timestamp.
    /// </summary>
    double getStartTime() const;
    void setStartTime(double value);

    /// <summary>
    /// End time. Unix timestamp.
    /// </summary>
    double getEndTime() const;
    void setEndTime(double value);

    /// <summary>
    /// Order line budget in micro currency.
    /// </summary>
    double getBudget() const;
    void setBudget(double value);

    /// <summary>
    /// Order line paid budget in micro currency.
    /// </summary>
    double getPaidBudget() const;
    void setPaidBudget(double value);

    /// <summary>
    /// Order line status.
    /// </summary>
    OrderLineStatus getStatus() const;
    void setStatus(OrderLineStatus value);

    /// <summary>
    /// Order line name.
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// Order line paid type.
    /// </summary>
    OrderLinePaidType getPaidType() const;
    void setPaidType(OrderLinePaidType value);

protected:
    std::string m_Id = "";
    std::string m_Type = "";
    std::string m_Ad_account_id = "";
    std::string m_Purchase_order_id = "";
    double m_Start_time = 0.0;
    double m_End_time = 0.0;
    double m_Budget = 0.0;
    double m_Paid_budget = 0.0;
    OrderLineStatus m_Status = "";
    std::string m_Name = "";
    OrderLinePaidType m_Paid_type = "";
};

std::vector<OrderLines> createOrderLinesVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OrderLines>(const OrderLines& val) {
    return val.toPropertyTree();
}

template<>
inline OrderLines fromPt<OrderLines>(const boost::property_tree::ptree& pt) {
    OrderLines ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OrderLines_H_ */
