/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsReport.h
 *
 * 
 */

#ifndef CatalogsReport_H_
#define CatalogsReport_H_



#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CatalogsReport 
{
public:
    CatalogsReport() = default;
    explicit CatalogsReport(boost::property_tree::ptree const& pt);
    virtual ~CatalogsReport() = default;

    CatalogsReport(const CatalogsReport& other) = default; // copy constructor
    CatalogsReport(CatalogsReport&& other) noexcept = default; // move constructor

    CatalogsReport& operator=(const CatalogsReport& other) = default; // copy assignment
    CatalogsReport& operator=(CatalogsReport&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsReport members

    /// <summary>
    /// 
    /// </summary>
    std::string getReportStatus() const;
    void setReportStatus(std::string value);

    /// <summary>
    /// URL to download the report
    /// </summary>
    std::string getUrl() const;
    void setUrl(std::string value);

    /// <summary>
    /// Size of the report in bytes
    /// </summary>
    double getSize() const;
    void setSize(double value);

protected:
    std::string m_Report_status = "";
    std::string m_Url = "";
    double m_Size = 0.0;
};

std::vector<CatalogsReport> createCatalogsReportVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsReport>(const CatalogsReport& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsReport fromPt<CatalogsReport>(const boost::property_tree::ptree& pt) {
    CatalogsReport ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsReport_H_ */
