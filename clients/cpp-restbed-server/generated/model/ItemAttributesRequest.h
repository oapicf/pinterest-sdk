/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ItemAttributesRequest.h
 *
 * 
 */

#ifndef ItemAttributesRequest_H_
#define ItemAttributesRequest_H_



#include "ItemAttributesRequest_allOf_image_link.h"
#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "UpdatableItemAttributes.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ItemAttributesRequest : public UpdatableItemAttributes
{
public:
    ItemAttributesRequest() = default;
    explicit ItemAttributesRequest(boost::property_tree::ptree const& pt);
    virtual ~ItemAttributesRequest() = default;

    ItemAttributesRequest(const ItemAttributesRequest& other) = default; // copy constructor
    ItemAttributesRequest(ItemAttributesRequest&& other) noexcept = default; // move constructor

    ItemAttributesRequest& operator=(const ItemAttributesRequest& other) = default; // copy assignment
    ItemAttributesRequest& operator=(ItemAttributesRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ItemAttributesRequest members

    /// <summary>
    /// Allows advertisers to specify a separate URL that can be used to track traffic coming from Pinterest shopping ads. Must send full URL including tracking—do not send tracking parameters only. At this time we do not support impression tracking. Must begin with http:// or https://.
    /// </summary>
    std::string getAdLink() const;
    void setAdLink(std::string value);

    /// <summary>
    /// Set this attribute to TRUE if you&#39;re submitting items that are considered “adult”. These will not be shown on Pinterest.
    /// </summary>
    bool isAdult() const;
    void setAdult(bool value);

    /// <summary>
    /// The age group to apply a demographic range to the product. Must be one of the following values (upper or lowercased): ‘newborn’ , ‘infant’, ‘toddler’, ‘kids’, or ‘adult’.
    /// </summary>
    std::string getAgeGroup() const;
    void setAgeGroup(std::string value);

    /// <summary>
    /// The availability of the product. Must be one of the following values (upper or lowercased): ‘in stock’, ‘out of stock’ , ‘preorder’.
    /// </summary>
    std::string getAvailability() const;
    void setAvailability(std::string value);

    /// <summary>
    /// Average reviews for the item. Can be a number from 1-5.
    /// </summary>
    double getAverageReviewRating() const;
    void setAverageReviewRating(double value);

    /// <summary>
    /// The brand of the product.
    /// </summary>
    std::string getBrand() const;
    void setBrand(std::string value);

    /// <summary>
    /// This attribute is not supported anymore.
    /// </summary>
    bool isCheckoutEnabled() const;
    void setCheckoutEnabled(bool value);

    /// <summary>
    /// The primary color of the product.
    /// </summary>
    std::string getColor() const;
    void setColor(std::string value);

    /// <summary>
    /// The condition of the product. Must be one of the following values (upper or lowercased): ‘new’, ‘used’, or ‘refurbished’.
    /// </summary>
    std::string getCondition() const;
    void setCondition(std::string value);

    /// <summary>
    /// &lt;p&gt;&lt;&#x3D; 1000 characters&lt;/p&gt; &lt;p&gt;Custom grouping of products.&lt;/p&gt;
    /// </summary>
    std::string getCustomLabel0() const;
    void setCustomLabel0(std::string value);

    /// <summary>
    /// &lt;p&gt;&lt;&#x3D; 1000 characters&lt;/p&gt; &lt;p&gt;Custom grouping of products.&lt;/p&gt;
    /// </summary>
    std::string getCustomLabel1() const;
    void setCustomLabel1(std::string value);

    /// <summary>
    /// &lt;p&gt;&lt;&#x3D; 1000 characters&lt;/p&gt; &lt;p&gt;Custom grouping of products.&lt;/p&gt;
    /// </summary>
    std::string getCustomLabel2() const;
    void setCustomLabel2(std::string value);

    /// <summary>
    /// &lt;p&gt;&lt;&#x3D; 1000 characters&lt;/p&gt; &lt;p&gt;Custom grouping of products.&lt;/p&gt;
    /// </summary>
    std::string getCustomLabel3() const;
    void setCustomLabel3(std::string value);

    /// <summary>
    /// &lt;p&gt;&lt;&#x3D; 1000 characters&lt;/p&gt; &lt;p&gt;Custom grouping of products.&lt;/p&gt;
    /// </summary>
    std::string getCustomLabel4() const;
    void setCustomLabel4(std::string value);

    /// <summary>
    /// &lt;p&gt;&lt;&#x3D; 10000 characters&lt;/p&gt; &lt;p&gt;The description of the product.&lt;/p&gt;
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string value);

    /// <summary>
    /// The item is free to ship.
    /// </summary>
    bool isFreeShippingLabel() const;
    void setFreeShippingLabel(bool value);

    /// <summary>
    /// The minimum order purchase necessary for the customer to get free shipping. Only relevant if free shipping is offered.
    /// </summary>
    std::string getFreeShippingLimit() const;
    void setFreeShippingLimit(std::string value);

    /// <summary>
    /// The gender associated with the product. Must be one of the following values (upper or lowercased): ‘male’, ‘female’ , or ‘unisex’.
    /// </summary>
    std::string getGender() const;
    void setGender(std::string value);

    /// <summary>
    /// The categorization of the product based on the standardized Google Product Taxonomy. This is a set taxonomy. Both the text values and numeric codes are accepted.
    /// </summary>
    std::string getGoogleProductCategory() const;
    void setGoogleProductCategory(std::string value);

    /// <summary>
    /// The unique universal product identifier.
    /// </summary>
    int32_t getGtin() const;
    void setGtin(int32_t value);

    /// <summary>
    /// &lt;p&gt;&lt;&#x3D; 127 characters&lt;/p&gt; &lt;p&gt;The user-created unique ID that represents the product. Only Unicode characters are accepted.&lt;/p&gt;
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// &lt;p&gt;&lt;&#x3D; 127 characters&lt;/p&gt; &lt;p&gt;The parent ID of the product.&lt;/p&gt;
    /// </summary>
    std::string getItemGroupId() const;
    void setItemGroupId(std::string value);

    /// <summary>
    /// The millisecond timestamp when the item was lastly modified by the merchant.
    /// </summary>
    int64_t getLastUpdatedTime() const;
    void setLastUpdatedTime(int64_t value);

    /// <summary>
    /// &lt;p&gt;&lt;&#x3D; 511 characters&lt;/p&gt; &lt;p&gt;The landing page for the product.&lt;/p&gt;
    /// </summary>
    std::string getLink() const;
    void setLink(std::string value);

    /// <summary>
    /// The material used to make the product.
    /// </summary>
    std::string getMaterial() const;
    void setMaterial(std::string value);

    /// <summary>
    /// The minimum advertised price of the product. It supports the following formats, \&quot;19.99 USD\&quot;, \&quot;19.99USD\&quot; and \&quot;19.99\&quot;. If the currency is not included, we default to US dollars.
    /// </summary>
    std::string getMinAdPrice() const;
    void setMinAdPrice(std::string value);

    /// <summary>
    /// The mobile-optimized version of your landing page. Must begin with http:// or https://.
    /// </summary>
    std::string getMobileLink() const;
    void setMobileLink(std::string value);

    /// <summary>
    /// Manufacturer Part Number are alpha-numeric codes created by the manufacturer of a product to uniquely identify it among all products from the same manufacturer.
    /// </summary>
    std::string getMpn() const;
    void setMpn(std::string value);

    /// <summary>
    /// The number of ratings for the item.
    /// </summary>
    int32_t getNumberOfRatings() const;
    void setNumberOfRatings(int32_t value);

    /// <summary>
    /// The number of reviews available for the item.
    /// </summary>
    int32_t getNumberOfReviews() const;
    void setNumberOfReviews(int32_t value);

    /// <summary>
    /// The description of the pattern used for the product.
    /// </summary>
    std::string getPattern() const;
    void setPattern(std::string value);

    /// <summary>
    /// The price of the product. It supports the following formats, \&quot;24.99 USD\&quot;, \&quot;24.99USD\&quot; and \&quot;24.99\&quot;. If the currency is not included, we default to US dollars.
    /// </summary>
    std::string getPrice() const;
    void setPrice(std::string value);

    /// <summary>
    /// &lt;p&gt;&lt;&#x3D; 1000 characters&lt;/p&gt; &lt;p&gt;The categorization of your product based on your custom product taxonomy. Subcategories must be sent separated by “ &gt; “. The &gt; must be wrapped by spaces. We do not recognize any other delimiters such as comma or pipe.&lt;/p&gt;
    /// </summary>
    std::string getProductType() const;
    void setProductType(std::string value);

    /// <summary>
    /// The discounted price of the product. The sale_price must be lower than the price. It supports the following formats, \&quot;14.99 USD\&quot;, \&quot;14.99USD\&quot; and \&quot;14.99\&quot;. If the currency is not included, we default to US dollars.
    /// </summary>
    std::string getSalePrice() const;
    void setSalePrice(std::string value);

    /// <summary>
    /// Shipping consists of one group of up to four elements, country, region, service (all optional) and price (required). All colons, even for blank values, are required.
    /// </summary>
    std::string getShipping() const;
    void setShipping(std::string value);

    /// <summary>
    /// The height of the package needed to ship the product. Ensure there is a space between the numeric string and the metric.
    /// </summary>
    std::string getShippingHeight() const;
    void setShippingHeight(std::string value);

    /// <summary>
    /// The weight of the product. Ensure there is a space between the numeric string and the metric.
    /// </summary>
    std::string getShippingWeight() const;
    void setShippingWeight(std::string value);

    /// <summary>
    /// The width of the package needed to ship the product. Ensure there is a space between the numeric string and the metric.
    /// </summary>
    std::string getShippingWidth() const;
    void setShippingWidth(std::string value);

    /// <summary>
    /// The size of the product.
    /// </summary>
    std::string getSize() const;
    void setSize(std::string value);

    /// <summary>
    /// Indicates the country’s sizing system in which you are submitting your product. Must be one of the following values (upper or lowercased): ‘US’, ‘UK’, ‘EU’, ‘DE’ , ‘FR’, ‘JP’, ‘CN’, ‘IT’, ‘ BR’, ‘MEX’, or ‘AU’.
    /// </summary>
    std::string getSizeSystem() const;
    void setSizeSystem(std::string value);

    /// <summary>
    /// Additional description for the size. Must be one of the following values (upper or lowercased): ‘regular’, ‘petite’ , ‘plus’, ‘big_and_tall’, or ‘maternity’.
    /// </summary>
    std::string getSizeType() const;
    void setSizeType(std::string value);

    /// <summary>
    /// Tax consists of one group of up to four elements, country, region, rate (all required) and tax_ship (optional). All colons, even for blank values, are required.
    /// </summary>
    std::string getTax() const;
    void setTax(std::string value);

    /// <summary>
    /// &lt;p&gt;&lt;&#x3D; 500 characters&lt;/p&gt; &lt;p&gt;The name of the product.&lt;/p&gt;
    /// </summary>
    std::string getTitle() const;
    void setTitle(std::string value);

    /// <summary>
    /// Options for this variant. People will see these options next to your Pin and can select the one they want. List them in the order you want them displayed.
    /// </summary>
    std::vector<std::string> getVariantNames() const;
    void setVariantNames(std::vector<std::string> value);

    /// <summary>
    /// Option values for this variant. People will see these options next to your Pin and can select the one they want. List them in the order you want them displayed. The order of the variant values must be consistent with the order of the variant names.
    /// </summary>
    std::vector<std::string> getVariantValues() const;
    void setVariantValues(std::vector<std::string> value);

    /// <summary>
    /// &lt;p&gt;&lt;&#x3D; 2000 characters&lt;/p&gt; &lt;p&gt;The links to additional images for your product. Up to ten additional images can be used to show a product from different angles or to show different stages. Must begin with http:// or https://.&lt;/p&gt;
    /// </summary>
    std::vector<std::string> getAdditionalImageLink() const;
    void setAdditionalImageLink(std::vector<std::string> value);

    /// <summary>
    /// 
    /// </summary>
    ItemAttributesRequest_allOf_image_link getImageLink() const;
    void setImageLink(ItemAttributesRequest_allOf_image_link value);

    /// <summary>
    /// &lt;p&gt;&lt;&#x3D; 2,000 characters&lt;/p&gt; &lt;p&gt;Hosted link to the product video.&lt;/p&gt; &lt;p&gt;File types for linked videos must be .mp4, .mov or .m4v.&lt;/p&gt; &lt;p&gt;File size cannot exceed 2GB.&lt;/p&gt;
    /// </summary>
    std::string getVideoLink() const;
    void setVideoLink(std::string value);

protected:
    std::string m_Ad_link = "";
    bool m_Adult = false;
    std::string m_Age_group = "";
    std::string m_Availability = "";
    double m_Average_review_rating = 0.0;
    std::string m_Brand = "";
    bool m_Checkout_enabled = false;
    std::string m_Color = "";
    std::string m_Condition = "";
    std::string m_Custom_label_0 = "";
    std::string m_Custom_label_1 = "";
    std::string m_Custom_label_2 = "";
    std::string m_Custom_label_3 = "";
    std::string m_Custom_label_4 = "";
    std::string m_Description = "";
    bool m_Free_shipping_label = false;
    std::string m_Free_shipping_limit = "";
    std::string m_Gender = "";
    std::string m_Google_product_category = "";
    int32_t m_Gtin = 0;
    std::string m_Id = "";
    std::string m_Item_group_id = "";
    int64_t m_Last_updated_time = 0L;
    std::string m_Link = "";
    std::string m_Material = "";
    std::string m_Min_ad_price = "";
    std::string m_Mobile_link = "";
    std::string m_Mpn = "";
    int32_t m_Number_of_ratings = 0;
    int32_t m_Number_of_reviews = 0;
    std::string m_Pattern = "";
    std::string m_Price = "";
    std::string m_Product_type = "";
    std::string m_Sale_price = "";
    std::string m_Shipping = "";
    std::string m_Shipping_height = "";
    std::string m_Shipping_weight = "";
    std::string m_Shipping_width = "";
    std::string m_Size = "";
    std::string m_Size_system = "";
    std::string m_Size_type = "";
    std::string m_Tax = "";
    std::string m_Title = "";
    std::vector<std::string> m_Variant_names;
    std::vector<std::string> m_Variant_values;
    std::vector<std::string> m_Additional_image_link;
    ItemAttributesRequest_allOf_image_link m_Image_link;
    std::string m_Video_link = "";
};

std::vector<ItemAttributesRequest> createItemAttributesRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ItemAttributesRequest>(const ItemAttributesRequest& val) {
    return val.toPropertyTree();
}

template<>
inline ItemAttributesRequest fromPt<ItemAttributesRequest>(const boost::property_tree::ptree& pt) {
    ItemAttributesRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ItemAttributesRequest_H_ */
