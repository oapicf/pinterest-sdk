/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MediaUpload_allOf_upload_parameters.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

MediaUpload_allOf_upload_parameters::MediaUpload_allOf_upload_parameters(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string MediaUpload_allOf_upload_parameters::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void MediaUpload_allOf_upload_parameters::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree MediaUpload_allOf_upload_parameters::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("x-amz-date", m_X_amz_date);
	pt.put("x-amz-signature", m_X_amz_signature);
	pt.put("x-amz-security-token", m_X_amz_security_token);
	pt.put("x-amz-algorithm", m_X_amz_algorithm);
	pt.put("key", m_Key);
	pt.put("policy", m_Policy);
	pt.put("x-amz-credential", m_X_amz_credential);
	pt.put("Content-Type", m_Content_Type);
	return pt;
}

void MediaUpload_allOf_upload_parameters::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_X_amz_date = pt.get("x-amz-date", "");
	m_X_amz_signature = pt.get("x-amz-signature", "");
	m_X_amz_security_token = pt.get("x-amz-security-token", "");
	m_X_amz_algorithm = pt.get("x-amz-algorithm", "");
	m_Key = pt.get("key", "");
	m_Policy = pt.get("policy", "");
	m_X_amz_credential = pt.get("x-amz-credential", "");
	m_Content_Type = pt.get("Content-Type", "");
}

std::string MediaUpload_allOf_upload_parameters::getXAmzDate() const
{
    return m_X_amz_date;
}

void MediaUpload_allOf_upload_parameters::setXAmzDate(std::string value)
{
    m_X_amz_date = value;
}


std::string MediaUpload_allOf_upload_parameters::getXAmzSignature() const
{
    return m_X_amz_signature;
}

void MediaUpload_allOf_upload_parameters::setXAmzSignature(std::string value)
{
    m_X_amz_signature = value;
}


std::string MediaUpload_allOf_upload_parameters::getXAmzSecurityToken() const
{
    return m_X_amz_security_token;
}

void MediaUpload_allOf_upload_parameters::setXAmzSecurityToken(std::string value)
{
    m_X_amz_security_token = value;
}


std::string MediaUpload_allOf_upload_parameters::getXAmzAlgorithm() const
{
    return m_X_amz_algorithm;
}

void MediaUpload_allOf_upload_parameters::setXAmzAlgorithm(std::string value)
{
    m_X_amz_algorithm = value;
}


std::string MediaUpload_allOf_upload_parameters::getKey() const
{
    return m_Key;
}

void MediaUpload_allOf_upload_parameters::setKey(std::string value)
{
    m_Key = value;
}


std::string MediaUpload_allOf_upload_parameters::getPolicy() const
{
    return m_Policy;
}

void MediaUpload_allOf_upload_parameters::setPolicy(std::string value)
{
    m_Policy = value;
}


std::string MediaUpload_allOf_upload_parameters::getXAmzCredential() const
{
    return m_X_amz_credential;
}

void MediaUpload_allOf_upload_parameters::setXAmzCredential(std::string value)
{
    m_X_amz_credential = value;
}


std::string MediaUpload_allOf_upload_parameters::getContentType() const
{
    return m_Content_Type;
}

void MediaUpload_allOf_upload_parameters::setContentType(std::string value)
{
    m_Content_Type = value;
}



std::vector<MediaUpload_allOf_upload_parameters> createMediaUpload_allOf_upload_parametersVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<MediaUpload_allOf_upload_parameters>();
    for (const auto& child: pt) {
        vec.emplace_back(MediaUpload_allOf_upload_parameters(child.second));
    }

    return vec;
}

}
}
}
}

