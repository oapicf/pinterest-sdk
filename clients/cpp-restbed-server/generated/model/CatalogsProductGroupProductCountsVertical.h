/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsProductGroupProductCountsVertical.h
 *
 * Product counts for a CatalogsProductGroup
 */

#ifndef CatalogsProductGroupProductCountsVertical_H_
#define CatalogsProductGroupProductCountsVertical_H_



#include "CatalogsRetailProductGroupProductCounts.h"
#include "CatalogsCreativeAssetsProductGroupProductCounts.h"
#include "CatalogsHotelProductGroupProductCounts.h"
#include "CatalogsType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "CatalogsRetailProductGroupProductCounts.h"
#include "CatalogsHotelProductGroupProductCounts.h"
#include "CatalogsCreativeAssetsProductGroupProductCounts.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Product counts for a CatalogsProductGroup
/// </summary>
class  CatalogsProductGroupProductCountsVertical : public CatalogsRetailProductGroupProductCounts, public CatalogsHotelProductGroupProductCounts, public CatalogsCreativeAssetsProductGroupProductCounts
{
public:
    CatalogsProductGroupProductCountsVertical() = default;
    explicit CatalogsProductGroupProductCountsVertical(boost::property_tree::ptree const& pt);
    virtual ~CatalogsProductGroupProductCountsVertical() = default;

    CatalogsProductGroupProductCountsVertical(const CatalogsProductGroupProductCountsVertical& other) = default; // copy constructor
    CatalogsProductGroupProductCountsVertical(CatalogsProductGroupProductCountsVertical&& other) noexcept = default; // move constructor

    CatalogsProductGroupProductCountsVertical& operator=(const CatalogsProductGroupProductCountsVertical& other) = default; // copy assignment
    CatalogsProductGroupProductCountsVertical& operator=(CatalogsProductGroupProductCountsVertical&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsProductGroupProductCountsVertical members

    /// <summary>
    /// 
    /// </summary>
    CatalogsType getCatalogType() const;
    void setCatalogType(CatalogsType value);

    /// <summary>
    /// 
    /// </summary>
    double getInStock() const;
    void setInStock(double value);

    /// <summary>
    /// 
    /// </summary>
    double getOutOfStock() const;
    void setOutOfStock(double value);

    /// <summary>
    /// 
    /// </summary>
    double getPreorder() const;
    void setPreorder(double value);

    /// <summary>
    /// 
    /// </summary>
    double getTotal() const;
    void setTotal(double value);

    /// <summary>
    /// 
    /// </summary>
    double getVideos() const;
    void setVideos(double value);

protected:
    CatalogsType m_Catalog_type = CatalogsType{};
    double m_In_stock = 0.0;
    double m_Out_of_stock = 0.0;
    double m_Preorder = 0.0;
    double m_Total = 0.0;
    double m_Videos = 0.0;
};

std::vector<CatalogsProductGroupProductCountsVertical> createCatalogsProductGroupProductCountsVerticalVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsProductGroupProductCountsVertical>(const CatalogsProductGroupProductCountsVertical& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsProductGroupProductCountsVertical fromPt<CatalogsProductGroupProductCountsVertical>(const boost::property_tree::ptree& pt) {
    CatalogsProductGroupProductCountsVertical ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsProductGroupProductCountsVertical_H_ */
