/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CreateMMMReportRequest.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CreateMMMReportRequest::CreateMMMReportRequest(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string CreateMMMReportRequest::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void CreateMMMReportRequest::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CreateMMMReportRequest::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("report_name", m_Report_name);
	pt.put("start_date", m_Start_date);
	pt.put("end_date", m_End_date);
	pt.put("granularity", m_Granularity);
	pt.put("level", m_Level);
	// generate tree for Targeting_types
    tmp_node.clear();
	if (!m_Targeting_types.empty()) {
        tmp_node = toPt(m_Targeting_types);
		pt.add_child("targeting_types", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Columns
    tmp_node.clear();
	if (!m_Columns.empty()) {
        tmp_node = toPt(m_Columns);
		pt.add_child("columns", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Countries
    tmp_node.clear();
	if (!m_Countries.empty()) {
        tmp_node = toPt(m_Countries);
		pt.add_child("countries", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void CreateMMMReportRequest::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Report_name = pt.get("report_name", "");
	m_Start_date = pt.get("start_date", "");
	m_End_date = pt.get("end_date", "");
	setGranularity(pt.get("granularity", ""));
	setLevel(pt.get("level", ""));
	// push all items of Targeting_types into member
	if (pt.get_child_optional("targeting_types")) {
        m_Targeting_types = fromPt<std::vector<MMMReportingTargetingType>>(pt.get_child("targeting_types"));
	}
	// push all items of Columns into member
	if (pt.get_child_optional("columns")) {
        m_Columns = fromPt<std::vector<MMMReportingColumn>>(pt.get_child("columns"));
	}
	// push all items of Countries into member
	if (pt.get_child_optional("countries")) {
        m_Countries = fromPt<std::vector<TargetingAdvertiserCountry>>(pt.get_child("countries"));
	}
}

std::string CreateMMMReportRequest::getReportName() const
{
    return m_Report_name;
}

void CreateMMMReportRequest::setReportName(std::string value)
{
    m_Report_name = value;
}


std::string CreateMMMReportRequest::getStartDate() const
{
    return m_Start_date;
}

void CreateMMMReportRequest::setStartDate(std::string value)
{
    m_Start_date = value;
}


std::string CreateMMMReportRequest::getEndDate() const
{
    return m_End_date;
}

void CreateMMMReportRequest::setEndDate(std::string value)
{
    m_End_date = value;
}


std::string CreateMMMReportRequest::getGranularity() const
{
    return m_Granularity;
}

void CreateMMMReportRequest::setGranularity(std::string value)
{
    static const std::array<std::string, 2> allowedValues = {
        "DAY", "WEEK"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Granularity = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


std::string CreateMMMReportRequest::getLevel() const
{
    return m_Level;
}

void CreateMMMReportRequest::setLevel(std::string value)
{
    static const std::array<std::string, 2> allowedValues = {
        "CAMPAIGN_TARGETING", "AD_GROUP_TARGETING"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Level = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


std::vector<MMMReportingTargetingType> CreateMMMReportRequest::getTargetingTypes() const
{
    return m_Targeting_types;
}

void CreateMMMReportRequest::setTargetingTypes(std::vector<MMMReportingTargetingType> value)
{
    m_Targeting_types = value;
}


std::vector<MMMReportingColumn> CreateMMMReportRequest::getColumns() const
{
    return m_Columns;
}

void CreateMMMReportRequest::setColumns(std::vector<MMMReportingColumn> value)
{
    m_Columns = value;
}


std::vector<TargetingAdvertiserCountry> CreateMMMReportRequest::getCountries() const
{
    return m_Countries;
}

void CreateMMMReportRequest::setCountries(std::vector<TargetingAdvertiserCountry> value)
{
    m_Countries = value;
}



std::vector<CreateMMMReportRequest> createCreateMMMReportRequestVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CreateMMMReportRequest>();
    for (const auto& child: pt) {
        vec.emplace_back(CreateMMMReportRequest(child.second));
    }

    return vec;
}

}
}
}
}

