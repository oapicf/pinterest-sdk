/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AudienceUpdateRequest.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

AudienceUpdateRequest::AudienceUpdateRequest(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string AudienceUpdateRequest::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void AudienceUpdateRequest::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree AudienceUpdateRequest::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("ad_account_id", m_Ad_account_id);
	pt.put("name", m_Name);
	pt.add_child("rule", m_Rule.toPropertyTree());
	pt.put("description", m_Description);
	return pt;
}

void AudienceUpdateRequest::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Ad_account_id = pt.get("ad_account_id", "");
	m_Name = pt.get("name", "");
	if (pt.get_child_optional("rule")) {
        m_Rule = fromPt<AudienceRule>(pt.get_child("rule"));
	}
	m_Description = pt.get("description", "");
}

std::string AudienceUpdateRequest::getAdAccountId() const
{
    return m_Ad_account_id;
}

void AudienceUpdateRequest::setAdAccountId(std::string value)
{
    m_Ad_account_id = value;
}


std::string AudienceUpdateRequest::getName() const
{
    return m_Name;
}

void AudienceUpdateRequest::setName(std::string value)
{
    m_Name = value;
}


AudienceRule AudienceUpdateRequest::getRule() const
{
    return m_Rule;
}

void AudienceUpdateRequest::setRule(AudienceRule value)
{
    m_Rule = value;
}


std::string AudienceUpdateRequest::getDescription() const
{
    return m_Description;
}

void AudienceUpdateRequest::setDescription(std::string value)
{
    m_Description = value;
}


AudienceUpdateOperationType AudienceUpdateRequest::getOperationType() const
{
    return m_Operation_type;
}

void AudienceUpdateRequest::setOperationType(AudienceUpdateOperationType value)
{
    m_Operation_type = value;
}



std::vector<AudienceUpdateRequest> createAudienceUpdateRequestVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<AudienceUpdateRequest>();
    for (const auto& child: pt) {
        vec.emplace_back(AudienceUpdateRequest(child.second));
    }

    return vec;
}

}
}
}
}

