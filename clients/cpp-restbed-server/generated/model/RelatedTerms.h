/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RelatedTerms.h
 *
 * 
 */

#ifndef RelatedTerms_H_
#define RelatedTerms_H_



#include "RelatedTerms_related_terms_list_inner.h"
#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  RelatedTerms 
{
public:
    RelatedTerms() = default;
    explicit RelatedTerms(boost::property_tree::ptree const& pt);
    virtual ~RelatedTerms() = default;

    RelatedTerms(const RelatedTerms& other) = default; // copy constructor
    RelatedTerms(RelatedTerms&& other) noexcept = default; // move constructor

    RelatedTerms& operator=(const RelatedTerms& other) = default; // copy assignment
    RelatedTerms& operator=(RelatedTerms&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// RelatedTerms members

    /// <summary>
    /// First input term. For example, if you pass \&quot;?terms&#x3D;clothes,workout\&quot;, then id will be \&quot;clothes\&quot;
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// Total number of related terms returned
    /// </summary>
    int32_t getRelatedTermCount() const;
    void setRelatedTermCount(int32_t value);

    /// <summary>
    /// The id of the advertiser.
    /// </summary>
    std::vector<RelatedTerms_related_terms_list_inner> getRelatedTermsList() const;
    void setRelatedTermsList(std::vector<RelatedTerms_related_terms_list_inner> value);

protected:
    std::string m_Id = "";
    int32_t m_Related_term_count = 0;
    std::vector<RelatedTerms_related_terms_list_inner> m_Related_terms_list;
};

std::vector<RelatedTerms> createRelatedTermsVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<RelatedTerms>(const RelatedTerms& val) {
    return val.toPropertyTree();
}

template<>
inline RelatedTerms fromPt<RelatedTerms>(const boost::property_tree::ptree& pt) {
    RelatedTerms ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* RelatedTerms_H_ */
