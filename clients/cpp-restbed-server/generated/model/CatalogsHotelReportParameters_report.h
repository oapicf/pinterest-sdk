/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsHotelReportParameters_report.h
 *
 * 
 */

#ifndef CatalogsHotelReportParameters_report_H_
#define CatalogsHotelReportParameters_report_H_



#include <string>
#include "CatalogsReportDistributionIssueFilter.h"
#include "CatalogsReportFeedIngestionFilter.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "CatalogsReportFeedIngestionFilter.h"
#include "CatalogsReportDistributionIssueFilter.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CatalogsHotelReportParameters_report : public CatalogsReportFeedIngestionFilter, public CatalogsReportDistributionIssueFilter
{
public:
    CatalogsHotelReportParameters_report() = default;
    explicit CatalogsHotelReportParameters_report(boost::property_tree::ptree const& pt);
    virtual ~CatalogsHotelReportParameters_report() = default;

    CatalogsHotelReportParameters_report(const CatalogsHotelReportParameters_report& other) = default; // copy constructor
    CatalogsHotelReportParameters_report(CatalogsHotelReportParameters_report&& other) noexcept = default; // move constructor

    CatalogsHotelReportParameters_report& operator=(const CatalogsHotelReportParameters_report& other) = default; // copy assignment
    CatalogsHotelReportParameters_report& operator=(CatalogsHotelReportParameters_report&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsHotelReportParameters_report members

    /// <summary>
    /// 
    /// </summary>
    std::string getReportType() const;
    void setReportType(std::string value);

    /// <summary>
    /// ID of the feed entity.
    /// </summary>
    std::string getFeedId() const;
    void setFeedId(std::string value);

    /// <summary>
    /// Unique identifier of a feed processing result. It can be acquired from the \&quot;id\&quot; field of the \&quot;items\&quot; array within the response of the [List processing results for a given feed](/docs/api/v5/#operation/feed_processing_results/list). If not provided, default to most recent completed processing result.
    /// </summary>
    std::string getProcessingResultId() const;
    void setProcessingResultId(std::string value);

    /// <summary>
    /// Unique identifier of a catalog. If not given, oldest catalog will be used
    /// </summary>
    std::string getCatalogId() const;
    void setCatalogId(std::string value);

protected:
    std::string m_Report_type = "";
    std::string m_Feed_id = "";
    std::string m_Processing_result_id = "";
    std::string m_Catalog_id = "";
};

std::vector<CatalogsHotelReportParameters_report> createCatalogsHotelReportParameters_reportVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsHotelReportParameters_report>(const CatalogsHotelReportParameters_report& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsHotelReportParameters_report fromPt<CatalogsHotelReportParameters_report>(const boost::property_tree::ptree& pt) {
    CatalogsHotelReportParameters_report ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsHotelReportParameters_report_H_ */
