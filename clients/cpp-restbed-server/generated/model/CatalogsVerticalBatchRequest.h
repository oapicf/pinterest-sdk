/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsVerticalBatchRequest.h
 *
 * A request object that can have multiple operations on a single batch
 */

#ifndef CatalogsVerticalBatchRequest_H_
#define CatalogsVerticalBatchRequest_H_



#include "CatalogsCreativeAssetsBatchRequest.h"
#include "Country.h"
#include "CatalogsCreativeAssetsBatchItem.h"
#include "CatalogsRetailBatchRequest.h"
#include "CatalogsItemsRequest_language.h"
#include <string>
#include "CatalogsHotelBatchRequest.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "CatalogsRetailBatchRequest.h"
#include "CatalogsHotelBatchRequest.h"
#include "CatalogsCreativeAssetsBatchRequest.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// A request object that can have multiple operations on a single batch
/// </summary>
class  CatalogsVerticalBatchRequest : public CatalogsRetailBatchRequest, public CatalogsHotelBatchRequest, public CatalogsCreativeAssetsBatchRequest
{
public:
    CatalogsVerticalBatchRequest() = default;
    explicit CatalogsVerticalBatchRequest(boost::property_tree::ptree const& pt);
    virtual ~CatalogsVerticalBatchRequest() = default;

    CatalogsVerticalBatchRequest(const CatalogsVerticalBatchRequest& other) = default; // copy constructor
    CatalogsVerticalBatchRequest(CatalogsVerticalBatchRequest&& other) noexcept = default; // move constructor

    CatalogsVerticalBatchRequest& operator=(const CatalogsVerticalBatchRequest& other) = default; // copy assignment
    CatalogsVerticalBatchRequest& operator=(CatalogsVerticalBatchRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsVerticalBatchRequest members

    /// <summary>
    /// 
    /// </summary>
    std::string getCatalogType() const;
    void setCatalogType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    Country getCountry() const;
    void setCountry(Country value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsItemsRequest_language getLanguage() const;
    void setLanguage(CatalogsItemsRequest_language value);

    /// <summary>
    /// Array with creative assets item operations
    /// </summary>
    std::vector<CatalogsCreativeAssetsBatchItem> getItems() const;
    void setItems(std::vector<CatalogsCreativeAssetsBatchItem> value);

    /// <summary>
    /// Catalog id pertaining to the creative assets item. If not provided, default to oldest creative assets catalog
    /// </summary>
    std::string getCatalogId() const;
    void setCatalogId(std::string value);

protected:
    std::string m_Catalog_type = "";
    Country m_Country = Country{};
    CatalogsItemsRequest_language m_Language;
    std::vector<CatalogsCreativeAssetsBatchItem> m_Items;
    std::string m_Catalog_id = "";
};

std::vector<CatalogsVerticalBatchRequest> createCatalogsVerticalBatchRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsVerticalBatchRequest>(const CatalogsVerticalBatchRequest& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsVerticalBatchRequest fromPt<CatalogsVerticalBatchRequest>(const boost::property_tree::ptree& pt) {
    CatalogsVerticalBatchRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsVerticalBatchRequest_H_ */
