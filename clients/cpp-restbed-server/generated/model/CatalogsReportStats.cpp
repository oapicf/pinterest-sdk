/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CatalogsReportStats.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CatalogsReportStats::CatalogsReportStats(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string CatalogsReportStats::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void CatalogsReportStats::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CatalogsReportStats::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("report_type", m_Report_type);
	pt.put("catalog_id", m_Catalog_id);
	pt.put("code", m_Code);
	pt.put("code_label", m_Code_label);
	pt.put("message", m_Message);
	pt.put("occurrences", m_Occurrences);
	pt.put("severity", m_Severity);
	pt.put("ineligible_for_ads", m_Ineligible_for_ads);
	pt.put("ineligible_for_organic", m_Ineligible_for_organic);
	return pt;
}

void CatalogsReportStats::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	setReportType(pt.get("report_type", ""));
	m_Catalog_id = pt.get("catalog_id", "");
	m_Code = pt.get("code", 0);
	m_Code_label = pt.get("code_label", "");
	m_Message = pt.get("message", "");
	m_Occurrences = pt.get("occurrences", 0);
	setSeverity(pt.get("severity", ""));
	m_Ineligible_for_ads = pt.get("ineligible_for_ads", false);
	m_Ineligible_for_organic = pt.get("ineligible_for_organic", false);
}

std::string CatalogsReportStats::getReportType() const
{
    return m_Report_type;
}

void CatalogsReportStats::setReportType(std::string value)
{
    static const std::array<std::string, 2> allowedValues = {
        "FEED_INGESTION_ISSUES", "DISTRIBUTION_ISSUES"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Report_type = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


std::string CatalogsReportStats::getCatalogId() const
{
    return m_Catalog_id;
}

void CatalogsReportStats::setCatalogId(std::string value)
{
    m_Catalog_id = value;
}


int32_t CatalogsReportStats::getCode() const
{
    return m_Code;
}

void CatalogsReportStats::setCode(int32_t value)
{
    m_Code = value;
}


std::string CatalogsReportStats::getCodeLabel() const
{
    return m_Code_label;
}

void CatalogsReportStats::setCodeLabel(std::string value)
{
    m_Code_label = value;
}


std::string CatalogsReportStats::getMessage() const
{
    return m_Message;
}

void CatalogsReportStats::setMessage(std::string value)
{
    m_Message = value;
}


int32_t CatalogsReportStats::getOccurrences() const
{
    return m_Occurrences;
}

void CatalogsReportStats::setOccurrences(int32_t value)
{
    m_Occurrences = value;
}


std::string CatalogsReportStats::getSeverity() const
{
    return m_Severity;
}

void CatalogsReportStats::setSeverity(std::string value)
{
    static const std::array<std::string, 2> allowedValues = {
        "WARN", "ERROR"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Severity = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


bool CatalogsReportStats::isIneligibleForAds() const
{
    return m_Ineligible_for_ads;
}

void CatalogsReportStats::setIneligibleForAds(bool value)
{
    m_Ineligible_for_ads = value;
}


bool CatalogsReportStats::isIneligibleForOrganic() const
{
    return m_Ineligible_for_organic;
}

void CatalogsReportStats::setIneligibleForOrganic(bool value)
{
    m_Ineligible_for_organic = value;
}



std::vector<CatalogsReportStats> createCatalogsReportStatsVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CatalogsReportStats>();
    for (const auto& child: pt) {
        vec.emplace_back(CatalogsReportStats(child.second));
    }

    return vec;
}

}
}
}
}

