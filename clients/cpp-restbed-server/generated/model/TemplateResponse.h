/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TemplateResponse.h
 *
 * Template fields
 */

#ifndef TemplateResponse_H_
#define TemplateResponse_H_



#include "Granularity.h"
#include "TemplateResponse_date_range.h"
#include "DataOutputFormat.h"
#include <string>
#include "MetricsReportingLevel.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Template fields
/// </summary>
class  TemplateResponse 
{
public:
    TemplateResponse() = default;
    explicit TemplateResponse(boost::property_tree::ptree const& pt);
    virtual ~TemplateResponse() = default;

    TemplateResponse(const TemplateResponse& other) = default; // copy constructor
    TemplateResponse(TemplateResponse&& other) noexcept = default; // move constructor

    TemplateResponse& operator=(const TemplateResponse& other) = default; // copy assignment
    TemplateResponse& operator=(TemplateResponse&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// TemplateResponse members

    /// <summary>
    /// Template ID
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// ID of the Ad Account that owns the template
    /// </summary>
    std::string getAdAccountId() const;
    void setAdAccountId(std::string value);

    /// <summary>
    /// IDs of the Ad Accounts that have access to this template
    /// </summary>
    std::vector<std::string> getAdAccountIds() const;
    void setAdAccountIds(std::vector<std::string> value);

    /// <summary>
    /// ID of the user who created the template
    /// </summary>
    std::string getUserId() const;
    void setUserId(std::string value);

    /// <summary>
    /// Template Name
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// The number of days prior to the day the report will be delivered at which the report will start
    /// </summary>
    double getReportStartRelativeDaysInPast() const;
    void setReportStartRelativeDaysInPast(double value);

    /// <summary>
    /// The number of days prior to the day the report will be delivered at which the report will end
    /// </summary>
    double getReportEndRelativeDaysInPast() const;
    void setReportEndRelativeDaysInPast(double value);

    /// <summary>
    /// 
    /// </summary>
    TemplateResponse_date_range getDateRange() const;
    void setDateRange(TemplateResponse_date_range value);

    /// <summary>
    /// 
    /// </summary>
    MetricsReportingLevel getReportLevel() const;
    void setReportLevel(MetricsReportingLevel value);

    /// <summary>
    /// 
    /// </summary>
    DataOutputFormat getReportFormat() const;
    void setReportFormat(DataOutputFormat value);

    /// <summary>
    /// A list of columns to be included in the report
    /// </summary>
    std::vector<std::string> getColumns() const;
    void setColumns(std::vector<std::string> value);

    /// <summary>
    /// 
    /// </summary>
    Granularity getGranularity() const;
    void setGranularity(Granularity value);

    /// <summary>
    /// The length of the sliding window over which view conversions will be attributed
    /// </summary>
    double getViewWindowDays() const;
    void setViewWindowDays(double value);

    /// <summary>
    /// The length of the sliding window over which click conversions will be attributed
    /// </summary>
    double getClickWindowDays() const;
    void setClickWindowDays(double value);

    /// <summary>
    /// The length of the sliding window over which engagement conversions will be attributed
    /// </summary>
    double getEngagementWindowDays() const;
    void setEngagementWindowDays(double value);

    /// <summary>
    /// Conversion report time type
    /// </summary>
    std::string getConversionReportTimeType() const;
    void setConversionReportTimeType(std::string value);

    /// <summary>
    /// A JSON representation of any filters to be applied before returning report data. Each filter object should contain all of the following fields:&lt;br&gt; \&quot;field\&quot;: The column name&lt;br&gt; \&quot;operator\&quot;: The operator. Allowed operators: [\&quot;&#x3D;\&quot;, \&quot;!&#x3D;\&quot;, \&quot;in\&quot;, \&quot;not_in\&quot;, \&quot;~\&quot;, \&quot;&gt;\&quot;, \&quot;&lt;\&quot;, \&quot;contains_substring\&quot;]&lt;br&gt; \&quot;value\&quot;: A single value or a list of values
    /// </summary>
    std::string getFiltersJson() const;
    void setFiltersJson(std::string value);

    /// <summary>
    /// A boolean value that indicates if the user owns the template
    /// </summary>
    bool isIsOwnedByUser() const;
    void setIsOwnedByUser(bool value);

    /// <summary>
    /// A boolean value that indicates if this template has been used to create a scheduled report
    /// </summary>
    bool isIsScheduled() const;
    void setIsScheduled(bool value);

    /// <summary>
    /// The surface used to create this template
    /// </summary>
    std::string getCreationSource() const;
    void setCreationSource(std::string value);

    /// <summary>
    /// A boolean that indicates if the template has been deleted
    /// </summary>
    bool isIsDeleted() const;
    void setIsDeleted(bool value);

    /// <summary>
    /// Time of last update in seconds since Unix epoch
    /// </summary>
    double getUpdatedTime() const;
    void setUpdatedTime(double value);

    /// <summary>
    /// A list of custom column IDs
    /// </summary>
    std::vector<std::string> getCustomColumnIds() const;
    void setCustomColumnIds(std::vector<std::string> value);

    /// <summary>
    /// Reporting template type
    /// </summary>
    std::string getType() const;
    void setType(std::string value);

    /// <summary>
    /// The filter on the conversion ingestion source method for conversion metrics
    /// </summary>
    std::vector<std::string> getIngestionSources() const;
    void setIngestionSources(std::vector<std::string> value);

protected:
    std::string m_Id = "";
    std::string m_Ad_account_id = "";
    std::vector<std::string> m_Ad_account_ids;
    std::string m_User_id = "";
    std::string m_Name = "";
    double m_Report_start_relative_days_in_past = 0.0;
    double m_Report_end_relative_days_in_past = 0.0;
    TemplateResponse_date_range m_Date_range;
    MetricsReportingLevel m_Report_level = MetricsReportingLevel{};
    DataOutputFormat m_Report_format = DataOutputFormat{};
    std::vector<std::string> m_Columns;
    Granularity m_Granularity = Granularity{};
    double m_View_window_days = 0.0;
    double m_Click_window_days = 0.0;
    double m_Engagement_window_days = 0.0;
    std::string m_Conversion_report_time_type = "";
    std::string m_Filters_json = "";
    bool m_Is_owned_by_user = false;
    bool m_Is_scheduled = false;
    std::string m_Creation_source = "";
    bool m_Is_deleted = false;
    double m_Updated_time = 0.0;
    std::vector<std::string> m_Custom_column_ids;
    std::string m_Type = "";
    std::vector<std::string> m_Ingestion_sources;
};

std::vector<TemplateResponse> createTemplateResponseVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<TemplateResponse>(const TemplateResponse& val) {
    return val.toPropertyTree();
}

template<>
inline TemplateResponse fromPt<TemplateResponse>(const boost::property_tree::ptree& pt) {
    TemplateResponse ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* TemplateResponse_H_ */
