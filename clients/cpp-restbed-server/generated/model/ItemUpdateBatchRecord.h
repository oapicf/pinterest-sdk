/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ItemUpdateBatchRecord.h
 *
 * Object describing an item batch record to update items
 */

#ifndef ItemUpdateBatchRecord_H_
#define ItemUpdateBatchRecord_H_



#include <string>
#include "UpdatableItemAttributes.h"
#include <vector>
#include "UpdateMaskFieldType.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Object describing an item batch record to update items
/// </summary>
class  ItemUpdateBatchRecord 
{
public:
    ItemUpdateBatchRecord() = default;
    explicit ItemUpdateBatchRecord(boost::property_tree::ptree const& pt);
    virtual ~ItemUpdateBatchRecord() = default;

    ItemUpdateBatchRecord(const ItemUpdateBatchRecord& other) = default; // copy constructor
    ItemUpdateBatchRecord(ItemUpdateBatchRecord&& other) noexcept = default; // move constructor

    ItemUpdateBatchRecord& operator=(const ItemUpdateBatchRecord& other) = default; // copy assignment
    ItemUpdateBatchRecord& operator=(ItemUpdateBatchRecord&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ItemUpdateBatchRecord members

    /// <summary>
    /// The catalog item id in the merchant namespace
    /// </summary>
    std::string getItemId() const;
    void setItemId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    UpdatableItemAttributes getAttributes() const;
    void setAttributes(UpdatableItemAttributes value);

    /// <summary>
    /// The list of product attributes to be updated. Attributes specified in the update mask without a value specified in the body will be deleted from the product item.
    /// </summary>
    std::vector<UpdateMaskFieldType> getUpdateMask() const;
    void setUpdateMask(std::vector<UpdateMaskFieldType> value);

protected:
    std::string m_Item_id = "";
    UpdatableItemAttributes m_Attributes;
    std::vector<UpdateMaskFieldType> m_Update_mask;
};

std::vector<ItemUpdateBatchRecord> createItemUpdateBatchRecordVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ItemUpdateBatchRecord>(const ItemUpdateBatchRecord& val) {
    return val.toPropertyTree();
}

template<>
inline ItemUpdateBatchRecord fromPt<ItemUpdateBatchRecord>(const boost::property_tree::ptree& pt) {
    ItemUpdateBatchRecord ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ItemUpdateBatchRecord_H_ */
