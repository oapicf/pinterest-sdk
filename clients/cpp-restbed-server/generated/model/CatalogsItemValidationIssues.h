/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsItemValidationIssues.h
 *
 * 
 */

#ifndef CatalogsItemValidationIssues_H_
#define CatalogsItemValidationIssues_H_



#include "CatalogsItemValidationErrors.h"
#include <string>
#include "CatalogsItemValidationWarnings.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CatalogsItemValidationIssues 
{
public:
    CatalogsItemValidationIssues() = default;
    explicit CatalogsItemValidationIssues(boost::property_tree::ptree const& pt);
    virtual ~CatalogsItemValidationIssues() = default;

    CatalogsItemValidationIssues(const CatalogsItemValidationIssues& other) = default; // copy constructor
    CatalogsItemValidationIssues(CatalogsItemValidationIssues&& other) noexcept = default; // move constructor

    CatalogsItemValidationIssues& operator=(const CatalogsItemValidationIssues& other) = default; // copy assignment
    CatalogsItemValidationIssues& operator=(CatalogsItemValidationIssues&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsItemValidationIssues members

    /// <summary>
    /// Item number based on order of appearance in the Catalogs Feed. For example, &#39;0&#39; refers to first item found in a feed that was downloaded from a &#39;location&#39; specified during feed creation.
    /// </summary>
    int32_t getItemNumber() const;
    void setItemNumber(int32_t value);

    /// <summary>
    /// The merchant-created unique ID that represents the product.
    /// </summary>
    std::string getItemId() const;
    void setItemId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsItemValidationErrors getErrors() const;
    void setErrors(CatalogsItemValidationErrors value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsItemValidationWarnings getWarnings() const;
    void setWarnings(CatalogsItemValidationWarnings value);

protected:
    int32_t m_Item_number = 0;
    std::string m_Item_id = "";
    CatalogsItemValidationErrors m_Errors;
    CatalogsItemValidationWarnings m_Warnings;
};

std::vector<CatalogsItemValidationIssues> createCatalogsItemValidationIssuesVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsItemValidationIssues>(const CatalogsItemValidationIssues& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsItemValidationIssues fromPt<CatalogsItemValidationIssues>(const boost::property_tree::ptree& pt) {
    CatalogsItemValidationIssues ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsItemValidationIssues_H_ */
