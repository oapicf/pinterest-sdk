/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CatalogsRetailItemsBatch.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CatalogsRetailItemsBatch::CatalogsRetailItemsBatch(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string CatalogsRetailItemsBatch::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void CatalogsRetailItemsBatch::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CatalogsRetailItemsBatch::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("batch_id", m_Batch_id);
	pt.put("created_time", m_Created_time);
	pt.put("completed_time", m_Completed_time);
	// generate tree for Items
    tmp_node.clear();
	if (!m_Items.empty()) {
        tmp_node = toPt(m_Items);
		pt.add_child("items", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void CatalogsRetailItemsBatch::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Batch_id = pt.get("batch_id", "");
	m_Created_time = pt.get("created_time", "");
	m_Completed_time = pt.get("completed_time", "");
	// push all items of Items into member
	if (pt.get_child_optional("items")) {
        m_Items = fromPt<std::vector<ItemProcessingRecord>>(pt.get_child("items"));
	}
}

std::string CatalogsRetailItemsBatch::getBatchId() const
{
    return m_Batch_id;
}

void CatalogsRetailItemsBatch::setBatchId(std::string value)
{
    m_Batch_id = value;
}


std::string CatalogsRetailItemsBatch::getCreatedTime() const
{
    return m_Created_time;
}

void CatalogsRetailItemsBatch::setCreatedTime(std::string value)
{
    m_Created_time = value;
}


std::string CatalogsRetailItemsBatch::getCompletedTime() const
{
    return m_Completed_time;
}

void CatalogsRetailItemsBatch::setCompletedTime(std::string value)
{
    m_Completed_time = value;
}


BatchOperationStatus CatalogsRetailItemsBatch::getStatus() const
{
    return m_Status;
}

void CatalogsRetailItemsBatch::setStatus(BatchOperationStatus value)
{
    m_Status = value;
}


CatalogsType CatalogsRetailItemsBatch::getCatalogType() const
{
    return m_Catalog_type;
}

void CatalogsRetailItemsBatch::setCatalogType(CatalogsType value)
{
    m_Catalog_type = value;
}


std::vector<ItemProcessingRecord> CatalogsRetailItemsBatch::getItems() const
{
    return m_Items;
}

void CatalogsRetailItemsBatch::setItems(std::vector<ItemProcessingRecord> value)
{
    m_Items = value;
}



std::vector<CatalogsRetailItemsBatch> createCatalogsRetailItemsBatchVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CatalogsRetailItemsBatch>();
    for (const auto& child: pt) {
        vec.emplace_back(CatalogsRetailItemsBatch(child.second));
    }

    return vec;
}

}
}
}
}

