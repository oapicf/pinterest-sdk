/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AudienceDemographicValue.h
 *
 * Demographic detail for a single audience demographic
 */

#ifndef AudienceDemographicValue_H_
#define AudienceDemographicValue_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Demographic detail for a single audience demographic
/// </summary>
class  AudienceDemographicValue 
{
public:
    AudienceDemographicValue() = default;
    explicit AudienceDemographicValue(boost::property_tree::ptree const& pt);
    virtual ~AudienceDemographicValue() = default;

    AudienceDemographicValue(const AudienceDemographicValue& other) = default; // copy constructor
    AudienceDemographicValue(AudienceDemographicValue&& other) noexcept = default; // move constructor

    AudienceDemographicValue& operator=(const AudienceDemographicValue& other) = default; // copy assignment
    AudienceDemographicValue& operator=(AudienceDemographicValue&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AudienceDemographicValue members

    /// <summary>
    /// Unique key for demographic item
    /// </summary>
    std::string getKey() const;
    void setKey(std::string value);

    /// <summary>
    /// Display name for demographic
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// Value of demographic item as a percent of total audience
    /// </summary>
    double getRatio() const;
    void setRatio(double value);

protected:
    std::string m_Key = "";
    std::string m_Name = "";
    double m_Ratio = 0.0;
};

std::vector<AudienceDemographicValue> createAudienceDemographicValueVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AudienceDemographicValue>(const AudienceDemographicValue& val) {
    return val.toPropertyTree();
}

template<>
inline AudienceDemographicValue fromPt<AudienceDemographicValue>(const boost::property_tree::ptree& pt) {
    AudienceDemographicValue ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AudienceDemographicValue_H_ */
