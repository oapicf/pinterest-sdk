/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsProductGroupMultipleStringListCriteria.h
 *
 * 
 */

#ifndef CatalogsProductGroupMultipleStringListCriteria_H_
#define CatalogsProductGroupMultipleStringListCriteria_H_



#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CatalogsProductGroupMultipleStringListCriteria 
{
public:
    CatalogsProductGroupMultipleStringListCriteria() = default;
    explicit CatalogsProductGroupMultipleStringListCriteria(boost::property_tree::ptree const& pt);
    virtual ~CatalogsProductGroupMultipleStringListCriteria() = default;

    CatalogsProductGroupMultipleStringListCriteria(const CatalogsProductGroupMultipleStringListCriteria& other) = default; // copy constructor
    CatalogsProductGroupMultipleStringListCriteria(CatalogsProductGroupMultipleStringListCriteria&& other) noexcept = default; // move constructor

    CatalogsProductGroupMultipleStringListCriteria& operator=(const CatalogsProductGroupMultipleStringListCriteria& other) = default; // copy assignment
    CatalogsProductGroupMultipleStringListCriteria& operator=(CatalogsProductGroupMultipleStringListCriteria&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsProductGroupMultipleStringListCriteria members

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::vector<std::string>> getValues() const;
    void setValues(std::vector<std::vector<std::string>> value);

    /// <summary>
    /// 
    /// </summary>
    bool isNegated() const;
    void setNegated(bool value);

protected:
    std::vector<std::vector<std::string>> m_Values;
    bool m_Negated = false;
};

std::vector<CatalogsProductGroupMultipleStringListCriteria> createCatalogsProductGroupMultipleStringListCriteriaVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsProductGroupMultipleStringListCriteria>(const CatalogsProductGroupMultipleStringListCriteria& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsProductGroupMultipleStringListCriteria fromPt<CatalogsProductGroupMultipleStringListCriteria>(const boost::property_tree::ptree& pt) {
    CatalogsProductGroupMultipleStringListCriteria ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsProductGroupMultipleStringListCriteria_H_ */
