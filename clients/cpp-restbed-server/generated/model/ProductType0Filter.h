/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ProductType0Filter.h
 *
 * 
 */

#ifndef ProductType0Filter_H_
#define ProductType0Filter_H_



#include "CatalogsProductGroupMultipleStringListCriteria.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ProductType0Filter 
{
public:
    ProductType0Filter() = default;
    explicit ProductType0Filter(boost::property_tree::ptree const& pt);
    virtual ~ProductType0Filter() = default;

    ProductType0Filter(const ProductType0Filter& other) = default; // copy constructor
    ProductType0Filter(ProductType0Filter&& other) noexcept = default; // move constructor

    ProductType0Filter& operator=(const ProductType0Filter& other) = default; // copy assignment
    ProductType0Filter& operator=(ProductType0Filter&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ProductType0Filter members

    /// <summary>
    /// 
    /// </summary>
    CatalogsProductGroupMultipleStringListCriteria getPRODUCTTYPE0() const;
    void setPRODUCTTYPE0(CatalogsProductGroupMultipleStringListCriteria value);

protected:
    CatalogsProductGroupMultipleStringListCriteria m_PRODUCT_TYPE_0 = CatalogsProductGroupMultipleStringListCriteria{};
};

std::vector<ProductType0Filter> createProductType0FilterVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ProductType0Filter>(const ProductType0Filter& val) {
    return val.toPropertyTree();
}

template<>
inline ProductType0Filter fromPt<ProductType0Filter>(const boost::property_tree::ptree& pt) {
    ProductType0Filter ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ProductType0Filter_H_ */
