/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdGroupAudienceSizingRequest.h
 *
 * 
 */

#ifndef AdGroupAudienceSizingRequest_H_
#define AdGroupAudienceSizingRequest_H_



#include "TargetingSpec.h"
#include "PlacementGroupType.h"
#include <string>
#include <vector>
#include "AdGroupAudienceSizingRequest_keywords_inner.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  AdGroupAudienceSizingRequest 
{
public:
    AdGroupAudienceSizingRequest() = default;
    explicit AdGroupAudienceSizingRequest(boost::property_tree::ptree const& pt);
    virtual ~AdGroupAudienceSizingRequest() = default;

    AdGroupAudienceSizingRequest(const AdGroupAudienceSizingRequest& other) = default; // copy constructor
    AdGroupAudienceSizingRequest(AdGroupAudienceSizingRequest&& other) noexcept = default; // move constructor

    AdGroupAudienceSizingRequest& operator=(const AdGroupAudienceSizingRequest& other) = default; // copy assignment
    AdGroupAudienceSizingRequest& operator=(AdGroupAudienceSizingRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AdGroupAudienceSizingRequest members

    /// <summary>
    /// Enable auto-targeting for ad group. Also known as &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/expanded-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;\&quot;expanded targeting\&quot;&lt;/a&gt;.
    /// </summary>
    bool isAutoTargetingEnabled() const;
    void setAutoTargetingEnabled(bool value);

    /// <summary>
    /// &lt;a href&#x3D;\&quot;/docs/redoc/#section/Placement-group\&quot;&gt;Placement group&lt;/a&gt;.
    /// </summary>
    PlacementGroupType getPlacementGroup() const;
    void setPlacementGroup(PlacementGroupType value);

    /// <summary>
    /// Pin creative types filter. &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; SHOP_THE_PIN has been deprecated. Please use COLLECTION instead.
    /// </summary>
    std::vector<std::string> getCreativeTypes() const;
    void setCreativeTypes(std::vector<std::string> value);

    /// <summary>
    /// 
    /// </summary>
    TargetingSpec getTargetingSpec() const;
    void setTargetingSpec(TargetingSpec value);

    /// <summary>
    /// Targeted product group IDs. &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This can only be combined with shopping/catalog sales campaigns. For more information, &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/shopping-ads#section-14571\&quot; target&#x3D;\&quot;_blank\&quot;&gt;click here&lt;/a&gt;. SHOPPING_RETARGETING must be included in targeting_spec object or this field will be ignored.
    /// </summary>
    std::vector<std::string> getProductGroupIds() const;
    void setProductGroupIds(std::vector<std::string> value);

    /// <summary>
    /// Array of keyword objects. If the keywords field is missing, all keywords will be targeted.
    /// </summary>
    std::vector<AdGroupAudienceSizingRequest_keywords_inner> getKeywords() const;
    void setKeywords(std::vector<AdGroupAudienceSizingRequest_keywords_inner> value);

protected:
    bool m_Auto_targeting_enabled = true;
    PlacementGroupType m_Placement_group = "ALL";
    std::vector<std::string> m_Creative_types;
    TargetingSpec m_Targeting_spec;
    std::vector<std::string> m_Product_group_ids;
    std::vector<AdGroupAudienceSizingRequest_keywords_inner> m_Keywords;
};

std::vector<AdGroupAudienceSizingRequest> createAdGroupAudienceSizingRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AdGroupAudienceSizingRequest>(const AdGroupAudienceSizingRequest& val) {
    return val.toPropertyTree();
}

template<>
inline AdGroupAudienceSizingRequest fromPt<AdGroupAudienceSizingRequest>(const boost::property_tree::ptree& pt) {
    AdGroupAudienceSizingRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AdGroupAudienceSizingRequest_H_ */
