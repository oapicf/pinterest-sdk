/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CatalogsFeedIngestionErrors.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CatalogsFeedIngestionErrors::CatalogsFeedIngestionErrors(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string CatalogsFeedIngestionErrors::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void CatalogsFeedIngestionErrors::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CatalogsFeedIngestionErrors::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("LINE_LEVEL_INTERNAL_ERROR", m_LINE_LEVEL_INTERNAL_ERROR);
	pt.put("LARGE_PRODUCT_COUNT_DECREASE", m_LARGE_PRODUCT_COUNT_DECREASE);
	pt.put("ACCOUNT_FLAGGED", m_ACCOUNT_FLAGGED);
	pt.put("IMAGE_LEVEL_INTERNAL_ERROR", m_IMAGE_LEVEL_INTERNAL_ERROR);
	pt.put("IMAGE_FILE_NOT_ACCESSIBLE", m_IMAGE_FILE_NOT_ACCESSIBLE);
	pt.put("IMAGE_MALFORMED_URL", m_IMAGE_MALFORMED_URL);
	pt.put("IMAGE_FILE_NOT_FOUND", m_IMAGE_FILE_NOT_FOUND);
	pt.put("IMAGE_INVALID_FILE", m_IMAGE_INVALID_FILE);
	return pt;
}

void CatalogsFeedIngestionErrors::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_LINE_LEVEL_INTERNAL_ERROR = pt.get("LINE_LEVEL_INTERNAL_ERROR", 0);
	setLARGEPRODUCTCOUNTDECREASE(pt.get("LARGE_PRODUCT_COUNT_DECREASE", 0));
	m_ACCOUNT_FLAGGED = pt.get("ACCOUNT_FLAGGED", 0);
	m_IMAGE_LEVEL_INTERNAL_ERROR = pt.get("IMAGE_LEVEL_INTERNAL_ERROR", 0);
	m_IMAGE_FILE_NOT_ACCESSIBLE = pt.get("IMAGE_FILE_NOT_ACCESSIBLE", 0);
	m_IMAGE_MALFORMED_URL = pt.get("IMAGE_MALFORMED_URL", 0);
	m_IMAGE_FILE_NOT_FOUND = pt.get("IMAGE_FILE_NOT_FOUND", 0);
	m_IMAGE_INVALID_FILE = pt.get("IMAGE_INVALID_FILE", 0);
}

int32_t CatalogsFeedIngestionErrors::getLINELEVELINTERNALERROR() const
{
    return m_LINE_LEVEL_INTERNAL_ERROR;
}

void CatalogsFeedIngestionErrors::setLINELEVELINTERNALERROR(int32_t value)
{
    m_LINE_LEVEL_INTERNAL_ERROR = value;
}


int32_t CatalogsFeedIngestionErrors::getLARGEPRODUCTCOUNTDECREASE() const
{
    return m_LARGE_PRODUCT_COUNT_DECREASE;
}

void CatalogsFeedIngestionErrors::setLARGEPRODUCTCOUNTDECREASE(int32_t value)
{
    static const std::array<int32_t, 1> allowedValues = {
        1
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_LARGE_PRODUCT_COUNT_DECREASE = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


int32_t CatalogsFeedIngestionErrors::getACCOUNTFLAGGED() const
{
    return m_ACCOUNT_FLAGGED;
}

void CatalogsFeedIngestionErrors::setACCOUNTFLAGGED(int32_t value)
{
    m_ACCOUNT_FLAGGED = value;
}


int32_t CatalogsFeedIngestionErrors::getIMAGELEVELINTERNALERROR() const
{
    return m_IMAGE_LEVEL_INTERNAL_ERROR;
}

void CatalogsFeedIngestionErrors::setIMAGELEVELINTERNALERROR(int32_t value)
{
    m_IMAGE_LEVEL_INTERNAL_ERROR = value;
}


int32_t CatalogsFeedIngestionErrors::getIMAGEFILENOTACCESSIBLE() const
{
    return m_IMAGE_FILE_NOT_ACCESSIBLE;
}

void CatalogsFeedIngestionErrors::setIMAGEFILENOTACCESSIBLE(int32_t value)
{
    m_IMAGE_FILE_NOT_ACCESSIBLE = value;
}


int32_t CatalogsFeedIngestionErrors::getIMAGEMALFORMEDURL() const
{
    return m_IMAGE_MALFORMED_URL;
}

void CatalogsFeedIngestionErrors::setIMAGEMALFORMEDURL(int32_t value)
{
    m_IMAGE_MALFORMED_URL = value;
}


int32_t CatalogsFeedIngestionErrors::getIMAGEFILENOTFOUND() const
{
    return m_IMAGE_FILE_NOT_FOUND;
}

void CatalogsFeedIngestionErrors::setIMAGEFILENOTFOUND(int32_t value)
{
    m_IMAGE_FILE_NOT_FOUND = value;
}


int32_t CatalogsFeedIngestionErrors::getIMAGEINVALIDFILE() const
{
    return m_IMAGE_INVALID_FILE;
}

void CatalogsFeedIngestionErrors::setIMAGEINVALIDFILE(int32_t value)
{
    m_IMAGE_INVALID_FILE = value;
}



std::vector<CatalogsFeedIngestionErrors> createCatalogsFeedIngestionErrorsVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CatalogsFeedIngestionErrors>();
    for (const auto& child: pt) {
        vec.emplace_back(CatalogsFeedIngestionErrors(child.second));
    }

    return vec;
}

}
}
}
}

