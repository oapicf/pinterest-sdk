/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TopPinsAnalyticsResponse_date_availability.h
 *
 * 
 */

#ifndef TopPinsAnalyticsResponse_date_availability_H_
#define TopPinsAnalyticsResponse_date_availability_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  TopPinsAnalyticsResponse_date_availability 
{
public:
    TopPinsAnalyticsResponse_date_availability() = default;
    explicit TopPinsAnalyticsResponse_date_availability(boost::property_tree::ptree const& pt);
    virtual ~TopPinsAnalyticsResponse_date_availability() = default;

    TopPinsAnalyticsResponse_date_availability(const TopPinsAnalyticsResponse_date_availability& other) = default; // copy constructor
    TopPinsAnalyticsResponse_date_availability(TopPinsAnalyticsResponse_date_availability&& other) noexcept = default; // move constructor

    TopPinsAnalyticsResponse_date_availability& operator=(const TopPinsAnalyticsResponse_date_availability& other) = default; // copy assignment
    TopPinsAnalyticsResponse_date_availability& operator=(TopPinsAnalyticsResponse_date_availability&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// TopPinsAnalyticsResponse_date_availability members

    /// <summary>
    /// 
    /// </summary>
    double getLatestAvailableTimestamp() const;
    void setLatestAvailableTimestamp(double value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsRealtime() const;
    void setIsRealtime(bool value);

protected:
    double m_Latest_available_timestamp = 0.0;
    bool m_Is_realtime = false;
};

std::vector<TopPinsAnalyticsResponse_date_availability> createTopPinsAnalyticsResponse_date_availabilityVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<TopPinsAnalyticsResponse_date_availability>(const TopPinsAnalyticsResponse_date_availability& val) {
    return val.toPropertyTree();
}

template<>
inline TopPinsAnalyticsResponse_date_availability fromPt<TopPinsAnalyticsResponse_date_availability>(const boost::property_tree::ptree& pt) {
    TopPinsAnalyticsResponse_date_availability ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* TopPinsAnalyticsResponse_date_availability_H_ */
