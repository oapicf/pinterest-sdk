/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AudienceDefinition.h
 *
 * Queryable audience representation.
 */

#ifndef AudienceDefinition_H_
#define AudienceDefinition_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Queryable audience representation.
/// </summary>
class  AudienceDefinition 
{
public:
    AudienceDefinition() = default;
    explicit AudienceDefinition(boost::property_tree::ptree const& pt);
    virtual ~AudienceDefinition() = default;

    AudienceDefinition(const AudienceDefinition& other) = default; // copy constructor
    AudienceDefinition(AudienceDefinition&& other) noexcept = default; // move constructor

    AudienceDefinition& operator=(const AudienceDefinition& other) = default; // copy assignment
    AudienceDefinition& operator=(AudienceDefinition&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AudienceDefinition members

    /// <summary>
    /// Generation date
    /// </summary>
    std::string getDate() const;
    void setDate(std::string value);

    /// <summary>
    /// Generated audience type to request.
    /// </summary>
    std::string getType() const;
    void setType(std::string value);

    /// <summary>
    /// Generated audience scope to request.
    /// </summary>
    std::string getScope() const;
    void setScope(std::string value);

protected:
    std::string m_date = "";
    std::string m_Type = "";
    std::string m_Scope = "";
};

std::vector<AudienceDefinition> createAudienceDefinitionVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AudienceDefinition>(const AudienceDefinition& val) {
    return val.toPropertyTree();
}

template<>
inline AudienceDefinition fromPt<AudienceDefinition>(const boost::property_tree::ptree& pt) {
    AudienceDefinition ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AudienceDefinition_H_ */
