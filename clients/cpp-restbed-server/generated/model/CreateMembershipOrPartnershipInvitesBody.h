/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateMembershipOrPartnershipInvitesBody.h
 *
 * Body to be used on path to send Members or Partners Invite or Request
 */

#ifndef CreateMembershipOrPartnershipInvitesBody_H_
#define CreateMembershipOrPartnershipInvitesBody_H_



#include "InviteType.h"
#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Body to be used on path to send Members or Partners Invite or Request
/// </summary>
class  CreateMembershipOrPartnershipInvitesBody 
{
public:
    CreateMembershipOrPartnershipInvitesBody() = default;
    explicit CreateMembershipOrPartnershipInvitesBody(boost::property_tree::ptree const& pt);
    virtual ~CreateMembershipOrPartnershipInvitesBody() = default;

    CreateMembershipOrPartnershipInvitesBody(const CreateMembershipOrPartnershipInvitesBody& other) = default; // copy constructor
    CreateMembershipOrPartnershipInvitesBody(CreateMembershipOrPartnershipInvitesBody&& other) noexcept = default; // move constructor

    CreateMembershipOrPartnershipInvitesBody& operator=(const CreateMembershipOrPartnershipInvitesBody& other) = default; // copy assignment
    CreateMembershipOrPartnershipInvitesBody& operator=(CreateMembershipOrPartnershipInvitesBody&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CreateMembershipOrPartnershipInvitesBody members

    /// <summary>
    /// The business access level to grant member/partner. Note, values are case-sensitive. - EMPLOYEE: Can only view and access assets you assign them to. They cannot see details about other employees, partners, or other assets. - BIZ_ADMIN: Have full control of roles and can add employees and partners as well as grant asset access. - PARTNER: Can only view and access assets you assign them to/or they assign to you.
    /// </summary>
    std::string getBusinessRole() const;
    void setBusinessRole(std::string value);

    /// <summary>
    /// 
    /// </summary>
    InviteType getInviteType() const;
    void setInviteType(InviteType value);

    /// <summary>
    /// A list of usernames, emails, or a mix of them. Should be used if invite_type is MEMBER_INVITE
    /// </summary>
    std::vector<std::string> getMembers() const;
    void setMembers(std::vector<std::string> value);

    /// <summary>
    /// A list of partner_id. Should be used if invite_type is PARTNER_INVITE or PARTNER_REQUEST
    /// </summary>
    std::vector<std::string> getPartners() const;
    void setPartners(std::vector<std::string> value);

protected:
    std::string m_Business_role = "";
    InviteType m_Invite_type = InviteType{};
    std::vector<std::string> m_Members;
    std::vector<std::string> m_Partners;
};

std::vector<CreateMembershipOrPartnershipInvitesBody> createCreateMembershipOrPartnershipInvitesBodyVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CreateMembershipOrPartnershipInvitesBody>(const CreateMembershipOrPartnershipInvitesBody& val) {
    return val.toPropertyTree();
}

template<>
inline CreateMembershipOrPartnershipInvitesBody fromPt<CreateMembershipOrPartnershipInvitesBody>(const boost::property_tree::ptree& pt) {
    CreateMembershipOrPartnershipInvitesBody ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CreateMembershipOrPartnershipInvitesBody_H_ */
