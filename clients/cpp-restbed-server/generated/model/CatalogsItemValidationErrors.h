/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsItemValidationErrors.h
 *
 * 
 */

#ifndef CatalogsItemValidationErrors_H_
#define CatalogsItemValidationErrors_H_



#include "CatalogsItemValidationDetails.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CatalogsItemValidationErrors 
{
public:
    CatalogsItemValidationErrors() = default;
    explicit CatalogsItemValidationErrors(boost::property_tree::ptree const& pt);
    virtual ~CatalogsItemValidationErrors() = default;

    CatalogsItemValidationErrors(const CatalogsItemValidationErrors& other) = default; // copy constructor
    CatalogsItemValidationErrors(CatalogsItemValidationErrors&& other) noexcept = default; // move constructor

    CatalogsItemValidationErrors& operator=(const CatalogsItemValidationErrors& other) = default; // copy assignment
    CatalogsItemValidationErrors& operator=(CatalogsItemValidationErrors&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsItemValidationErrors members

    /// <summary>
    /// 
    /// </summary>
    CatalogsItemValidationDetails getADULTINVALID() const;
    void setADULTINVALID(CatalogsItemValidationDetails value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsItemValidationDetails getADWORDSFORMATINVALID() const;
    void setADWORDSFORMATINVALID(CatalogsItemValidationDetails value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsItemValidationDetails getAVAILABILITYINVALID() const;
    void setAVAILABILITYINVALID(CatalogsItemValidationDetails value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsItemValidationDetails getBLOCKLISTEDIMAGESIGNATURE() const;
    void setBLOCKLISTEDIMAGESIGNATURE(CatalogsItemValidationDetails value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsItemValidationDetails getDESCRIPTIONMISSING() const;
    void setDESCRIPTIONMISSING(CatalogsItemValidationDetails value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsItemValidationDetails getDUPLICATEPRODUCTS() const;
    void setDUPLICATEPRODUCTS(CatalogsItemValidationDetails value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsItemValidationDetails getIMAGELINKINVALID() const;
    void setIMAGELINKINVALID(CatalogsItemValidationDetails value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsItemValidationDetails getIMAGELINKLENGTHTOOLONG() const;
    void setIMAGELINKLENGTHTOOLONG(CatalogsItemValidationDetails value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsItemValidationDetails getIMAGELINKMISSING() const;
    void setIMAGELINKMISSING(CatalogsItemValidationDetails value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsItemValidationDetails getINVALIDDOMAIN() const;
    void setINVALIDDOMAIN(CatalogsItemValidationDetails value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsItemValidationDetails getITEMIDMISSING() const;
    void setITEMIDMISSING(CatalogsItemValidationDetails value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsItemValidationDetails getITEMMAINIMAGEDOWNLOADFAILURE() const;
    void setITEMMAINIMAGEDOWNLOADFAILURE(CatalogsItemValidationDetails value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsItemValidationDetails getLINKFORMATINVALID() const;
    void setLINKFORMATINVALID(CatalogsItemValidationDetails value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsItemValidationDetails getLINKLENGTHTOOLONG() const;
    void setLINKLENGTHTOOLONG(CatalogsItemValidationDetails value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsItemValidationDetails getLISTPRICEINVALID() const;
    void setLISTPRICEINVALID(CatalogsItemValidationDetails value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsItemValidationDetails getMAXITEMSPERITEMGROUPEXCEEDED() const;
    void setMAXITEMSPERITEMGROUPEXCEEDED(CatalogsItemValidationDetails value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsItemValidationDetails getPARSELINEERROR() const;
    void setPARSELINEERROR(CatalogsItemValidationDetails value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsItemValidationDetails getPINJOINCONTENTUNSAFE() const;
    void setPINJOINCONTENTUNSAFE(CatalogsItemValidationDetails value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsItemValidationDetails getPRICECANNOTBEDETERMINED() const;
    void setPRICECANNOTBEDETERMINED(CatalogsItemValidationDetails value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsItemValidationDetails getPRICEMISSING() const;
    void setPRICEMISSING(CatalogsItemValidationDetails value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsItemValidationDetails getPRODUCTLINKMISSING() const;
    void setPRODUCTLINKMISSING(CatalogsItemValidationDetails value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsItemValidationDetails getPRODUCTPRICEINVALID() const;
    void setPRODUCTPRICEINVALID(CatalogsItemValidationDetails value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsItemValidationDetails getTITLEMISSING() const;
    void setTITLEMISSING(CatalogsItemValidationDetails value);

protected:
    CatalogsItemValidationDetails m_ADULT_INVALID;
    CatalogsItemValidationDetails m_ADWORDS_FORMAT_INVALID;
    CatalogsItemValidationDetails m_AVAILABILITY_INVALID;
    CatalogsItemValidationDetails m_BLOCKLISTED_IMAGE_SIGNATURE;
    CatalogsItemValidationDetails m_DESCRIPTION_MISSING;
    CatalogsItemValidationDetails m_DUPLICATE_PRODUCTS;
    CatalogsItemValidationDetails m_IMAGE_LINK_INVALID;
    CatalogsItemValidationDetails m_IMAGE_LINK_LENGTH_TOO_LONG;
    CatalogsItemValidationDetails m_IMAGE_LINK_MISSING;
    CatalogsItemValidationDetails m_INVALID_DOMAIN;
    CatalogsItemValidationDetails m_ITEMID_MISSING;
    CatalogsItemValidationDetails m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE;
    CatalogsItemValidationDetails m_LINK_FORMAT_INVALID;
    CatalogsItemValidationDetails m_LINK_LENGTH_TOO_LONG;
    CatalogsItemValidationDetails m_LIST_PRICE_INVALID;
    CatalogsItemValidationDetails m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED;
    CatalogsItemValidationDetails m_PARSE_LINE_ERROR;
    CatalogsItemValidationDetails m_PINJOIN_CONTENT_UNSAFE;
    CatalogsItemValidationDetails m_PRICE_CANNOT_BE_DETERMINED;
    CatalogsItemValidationDetails m_PRICE_MISSING;
    CatalogsItemValidationDetails m_PRODUCT_LINK_MISSING;
    CatalogsItemValidationDetails m_PRODUCT_PRICE_INVALID;
    CatalogsItemValidationDetails m_TITLE_MISSING;
};

std::vector<CatalogsItemValidationErrors> createCatalogsItemValidationErrorsVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsItemValidationErrors>(const CatalogsItemValidationErrors& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsItemValidationErrors fromPt<CatalogsItemValidationErrors>(const boost::property_tree::ptree& pt) {
    CatalogsItemValidationErrors ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsItemValidationErrors_H_ */
