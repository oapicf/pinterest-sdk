/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Audience.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

Audience::Audience(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string Audience::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void Audience::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree Audience::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("ad_account_id", m_Ad_account_id);
	pt.put("id", m_Id);
	pt.put("name", m_Name);
	pt.put("audience_type", m_Audience_type);
	pt.put("description", m_Description);
	pt.add_child("rule", m_Rule.toPropertyTree());
	pt.put("size", m_Size);
	pt.put("status", m_Status);
	pt.put("type", m_Type);
	pt.put("created_timestamp", m_Created_timestamp);
	pt.put("updated_timestamp", m_Updated_timestamp);
	return pt;
}

void Audience::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Ad_account_id = pt.get("ad_account_id", "");
	m_Id = pt.get("id", "");
	m_Name = pt.get("name", "");
	m_Audience_type = pt.get("audience_type", "");
	m_Description = pt.get("description", "");
	if (pt.get_child_optional("rule")) {
        m_Rule = fromPt<AudienceRule>(pt.get_child("rule"));
	}
	m_Size = pt.get("size", 0);
	m_Status = pt.get("status", "");
	m_Type = pt.get("type", "");
	m_Created_timestamp = pt.get("created_timestamp", 0);
	m_Updated_timestamp = pt.get("updated_timestamp", 0);
}

std::string Audience::getAdAccountId() const
{
    return m_Ad_account_id;
}

void Audience::setAdAccountId(std::string value)
{
    m_Ad_account_id = value;
}


std::string Audience::getId() const
{
    return m_Id;
}

void Audience::setId(std::string value)
{
    m_Id = value;
}


std::string Audience::getName() const
{
    return m_Name;
}

void Audience::setName(std::string value)
{
    m_Name = value;
}


std::string Audience::getAudienceType() const
{
    return m_Audience_type;
}

void Audience::setAudienceType(std::string value)
{
    m_Audience_type = value;
}


std::string Audience::getDescription() const
{
    return m_Description;
}

void Audience::setDescription(std::string value)
{
    m_Description = value;
}


AudienceRule Audience::getRule() const
{
    return m_Rule;
}

void Audience::setRule(AudienceRule value)
{
    m_Rule = value;
}


int32_t Audience::getSize() const
{
    return m_Size;
}

void Audience::setSize(int32_t value)
{
    m_Size = value;
}


std::string Audience::getStatus() const
{
    return m_Status;
}

void Audience::setStatus(std::string value)
{
    m_Status = value;
}


std::string Audience::getType() const
{
    return m_Type;
}

void Audience::setType(std::string value)
{
    m_Type = value;
}


int32_t Audience::getCreatedTimestamp() const
{
    return m_Created_timestamp;
}

void Audience::setCreatedTimestamp(int32_t value)
{
    m_Created_timestamp = value;
}


int32_t Audience::getUpdatedTimestamp() const
{
    return m_Updated_timestamp;
}

void Audience::setUpdatedTimestamp(int32_t value)
{
    m_Updated_timestamp = value;
}



std::vector<Audience> createAudienceVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<Audience>();
    for (const auto& child: pt) {
        vec.emplace_back(Audience(child.second));
    }

    return vec;
}

}
}
}
}

