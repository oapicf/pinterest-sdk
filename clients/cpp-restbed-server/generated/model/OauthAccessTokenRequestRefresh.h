/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OauthAccessTokenRequestRefresh.h
 *
 * A request to exchange a refresh token for a new access token.
 */

#ifndef OauthAccessTokenRequestRefresh_H_
#define OauthAccessTokenRequestRefresh_H_



#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// A request to exchange a refresh token for a new access token.
/// </summary>
class  OauthAccessTokenRequestRefresh 
{
public:
    OauthAccessTokenRequestRefresh() = default;
    explicit OauthAccessTokenRequestRefresh(boost::property_tree::ptree const& pt);
    virtual ~OauthAccessTokenRequestRefresh() = default;

    OauthAccessTokenRequestRefresh(const OauthAccessTokenRequestRefresh& other) = default; // copy constructor
    OauthAccessTokenRequestRefresh(OauthAccessTokenRequestRefresh&& other) noexcept = default; // move constructor

    OauthAccessTokenRequestRefresh& operator=(const OauthAccessTokenRequestRefresh& other) = default; // copy assignment
    OauthAccessTokenRequestRefresh& operator=(OauthAccessTokenRequestRefresh&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// OauthAccessTokenRequestRefresh members

    /// <summary>
    /// 
    /// </summary>
    std::string getGrantType() const;
    void setGrantType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getRefreshToken() const;
    void setRefreshToken(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getScope() const;
    void setScope(std::string value);

    /// <summary>
    /// Setting this field to &lt;code&gt;true&lt;/code&gt; will add a new refresh token to your 200 response, as well as the refresh_token_expires_in and refresh_token_expires_at fields. To see the structure of this payload, set the 200 response_type to \&quot;everlasting_refresh\&quot;.
    /// </summary>
    bool isRefreshOn() const;
    void setRefreshOn(bool value);

protected:
    std::string m_Grant_type = "";
    std::string m_Refresh_token = "";
    std::string m_Scope = "";
    bool m_Refresh_on = false;
};

std::vector<OauthAccessTokenRequestRefresh> createOauthAccessTokenRequestRefreshVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OauthAccessTokenRequestRefresh>(const OauthAccessTokenRequestRefresh& val) {
    return val.toPropertyTree();
}

template<>
inline OauthAccessTokenRequestRefresh fromPt<OauthAccessTokenRequestRefresh>(const boost::property_tree::ptree& pt) {
    OauthAccessTokenRequestRefresh ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OauthAccessTokenRequestRefresh_H_ */
