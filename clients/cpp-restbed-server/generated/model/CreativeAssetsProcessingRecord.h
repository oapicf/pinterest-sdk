/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreativeAssetsProcessingRecord.h
 *
 * Object describing an item processing record
 */

#ifndef CreativeAssetsProcessingRecord_H_
#define CreativeAssetsProcessingRecord_H_



#include "ItemValidationEvent.h"
#include <string>
#include "ItemProcessingStatus.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Object describing an item processing record
/// </summary>
class  CreativeAssetsProcessingRecord 
{
public:
    CreativeAssetsProcessingRecord() = default;
    explicit CreativeAssetsProcessingRecord(boost::property_tree::ptree const& pt);
    virtual ~CreativeAssetsProcessingRecord() = default;

    CreativeAssetsProcessingRecord(const CreativeAssetsProcessingRecord& other) = default; // copy constructor
    CreativeAssetsProcessingRecord(CreativeAssetsProcessingRecord&& other) noexcept = default; // move constructor

    CreativeAssetsProcessingRecord& operator=(const CreativeAssetsProcessingRecord& other) = default; // copy assignment
    CreativeAssetsProcessingRecord& operator=(CreativeAssetsProcessingRecord&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CreativeAssetsProcessingRecord members

    /// <summary>
    /// The catalog creative assets id in the merchant namespace
    /// </summary>
    std::string getCreativeAssetsId() const;
    void setCreativeAssetsId(std::string value);

    /// <summary>
    /// Array with the validation errors for the item processing record. A non empty errors list causes the item processing to fail.
    /// </summary>
    std::vector<ItemValidationEvent> getErrors() const;
    void setErrors(std::vector<ItemValidationEvent> value);

    /// <summary>
    /// Array with the validation warnings for the item processing record
    /// </summary>
    std::vector<ItemValidationEvent> getWarnings() const;
    void setWarnings(std::vector<ItemValidationEvent> value);

    /// <summary>
    /// 
    /// </summary>
    ItemProcessingStatus getStatus() const;
    void setStatus(ItemProcessingStatus value);

protected:
    std::string m_Creative_assets_id = "";
    std::vector<ItemValidationEvent> m_Errors;
    std::vector<ItemValidationEvent> m_Warnings;
    ItemProcessingStatus m_Status = ItemProcessingStatus{};
};

std::vector<CreativeAssetsProcessingRecord> createCreativeAssetsProcessingRecordVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CreativeAssetsProcessingRecord>(const CreativeAssetsProcessingRecord& val) {
    return val.toPropertyTree();
}

template<>
inline CreativeAssetsProcessingRecord fromPt<CreativeAssetsProcessingRecord>(const boost::property_tree::ptree& pt) {
    CreativeAssetsProcessingRecord ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CreativeAssetsProcessingRecord_H_ */
