/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdAccountCreateSubscriptionResponse.h
 *
 * 
 */

#ifndef AdAccountCreateSubscriptionResponse_H_
#define AdAccountCreateSubscriptionResponse_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  AdAccountCreateSubscriptionResponse 
{
public:
    AdAccountCreateSubscriptionResponse() = default;
    explicit AdAccountCreateSubscriptionResponse(boost::property_tree::ptree const& pt);
    virtual ~AdAccountCreateSubscriptionResponse() = default;

    AdAccountCreateSubscriptionResponse(const AdAccountCreateSubscriptionResponse& other) = default; // copy constructor
    AdAccountCreateSubscriptionResponse(AdAccountCreateSubscriptionResponse&& other) noexcept = default; // move constructor

    AdAccountCreateSubscriptionResponse& operator=(const AdAccountCreateSubscriptionResponse& other) = default; // copy assignment
    AdAccountCreateSubscriptionResponse& operator=(AdAccountCreateSubscriptionResponse&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AdAccountCreateSubscriptionResponse members

    /// <summary>
    /// Subscription ID.
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// Base64 encoded key for client to decrypt lead data.
    /// </summary>
    std::string getCryptographicKey() const;
    void setCryptographicKey(std::string value);

    /// <summary>
    /// Lead data encryption algorithm.
    /// </summary>
    std::string getCryptographicAlgorithm() const;
    void setCryptographicAlgorithm(std::string value);

    /// <summary>
    /// Subscription creation time. Unix timestamp in milliseconds.
    /// </summary>
    int32_t getCreatedTime() const;
    void setCreatedTime(int32_t value);

protected:
    std::string m_Id = "";
    std::string m_Cryptographic_key = "";
    std::string m_Cryptographic_algorithm = "";
    int32_t m_Created_time = 0;
};

std::vector<AdAccountCreateSubscriptionResponse> createAdAccountCreateSubscriptionResponseVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AdAccountCreateSubscriptionResponse>(const AdAccountCreateSubscriptionResponse& val) {
    return val.toPropertyTree();
}

template<>
inline AdAccountCreateSubscriptionResponse fromPt<AdAccountCreateSubscriptionResponse>(const boost::property_tree::ptree& pt) {
    AdAccountCreateSubscriptionResponse ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AdAccountCreateSubscriptionResponse_H_ */
