/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CatalogsHotelAddress.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CatalogsHotelAddress::CatalogsHotelAddress(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string CatalogsHotelAddress::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void CatalogsHotelAddress::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CatalogsHotelAddress::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("addr1", m_Addr1);
	pt.put("city", m_City);
	pt.put("region", m_Region);
	pt.put("country", m_Country);
	pt.put("postal_code", m_Postal_code);
	return pt;
}

void CatalogsHotelAddress::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Addr1 = pt.get("addr1", "");
	m_City = pt.get("city", "");
	m_Region = pt.get("region", "");
	m_Country = pt.get("country", "");
	m_Postal_code = pt.get("postal_code", "");
}

std::string CatalogsHotelAddress::getAddr1() const
{
    return m_Addr1;
}

void CatalogsHotelAddress::setAddr1(std::string value)
{
    m_Addr1 = value;
}


std::string CatalogsHotelAddress::getCity() const
{
    return m_City;
}

void CatalogsHotelAddress::setCity(std::string value)
{
    m_City = value;
}


std::string CatalogsHotelAddress::getRegion() const
{
    return m_Region;
}

void CatalogsHotelAddress::setRegion(std::string value)
{
    m_Region = value;
}


std::string CatalogsHotelAddress::getCountry() const
{
    return m_Country;
}

void CatalogsHotelAddress::setCountry(std::string value)
{
    m_Country = value;
}


std::string CatalogsHotelAddress::getPostalCode() const
{
    return m_Postal_code;
}

void CatalogsHotelAddress::setPostalCode(std::string value)
{
    m_Postal_code = value;
}



std::vector<CatalogsHotelAddress> createCatalogsHotelAddressVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CatalogsHotelAddress>();
    for (const auto& child: pt) {
        vec.emplace_back(CatalogsHotelAddress(child.second));
    }

    return vec;
}

}
}
}
}

