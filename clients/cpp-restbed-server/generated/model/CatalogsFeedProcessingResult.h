/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsFeedProcessingResult.h
 *
 * 
 */

#ifndef CatalogsFeedProcessingResult_H_
#define CatalogsFeedProcessingResult_H_



#include "CatalogsFeedValidationDetails.h"
#include "CatalogsFeedProductCounts.h"
#include "CatalogsFeedProcessingStatus.h"
#include <string>
#include "CatalogsFeedIngestionDetails.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "CatalogsDbItem.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CatalogsFeedProcessingResult : public CatalogsDbItem
{
public:
    CatalogsFeedProcessingResult() = default;
    explicit CatalogsFeedProcessingResult(boost::property_tree::ptree const& pt);
    virtual ~CatalogsFeedProcessingResult() = default;

    CatalogsFeedProcessingResult(const CatalogsFeedProcessingResult& other) = default; // copy constructor
    CatalogsFeedProcessingResult(CatalogsFeedProcessingResult&& other) noexcept = default; // move constructor

    CatalogsFeedProcessingResult& operator=(const CatalogsFeedProcessingResult& other) = default; // copy assignment
    CatalogsFeedProcessingResult& operator=(CatalogsFeedProcessingResult&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsFeedProcessingResult members

    /// <summary>
    /// 
    /// </summary>
    std::string getCreatedAt() const;
    void setCreatedAt(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getUpdatedAt() const;
    void setUpdatedAt(std::string value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsFeedIngestionDetails getIngestionDetails() const;
    void setIngestionDetails(CatalogsFeedIngestionDetails value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsFeedProcessingStatus getStatus() const;
    void setStatus(CatalogsFeedProcessingStatus value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsFeedProductCounts getProductCounts() const;
    void setProductCounts(CatalogsFeedProductCounts value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsFeedValidationDetails getValidationDetails() const;
    void setValidationDetails(CatalogsFeedValidationDetails value);

protected:
    std::string m_Created_at = "";
    std::string m_Id = "";
    std::string m_Updated_at = "";
    CatalogsFeedIngestionDetails m_Ingestion_details;
    CatalogsFeedProcessingStatus m_Status = CatalogsFeedProcessingStatus{};
    CatalogsFeedProductCounts m_Product_counts;
    CatalogsFeedValidationDetails m_Validation_details;
};

std::vector<CatalogsFeedProcessingResult> createCatalogsFeedProcessingResultVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsFeedProcessingResult>(const CatalogsFeedProcessingResult& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsFeedProcessingResult fromPt<CatalogsFeedProcessingResult>(const boost::property_tree::ptree& pt) {
    CatalogsFeedProcessingResult ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsFeedProcessingResult_H_ */
