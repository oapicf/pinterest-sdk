/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsCreativeAssetsProductGroupUpdateRequest.h
 *
 * Request object for updating a creative assets product group.
 */

#ifndef CatalogsCreativeAssetsProductGroupUpdateRequest_H_
#define CatalogsCreativeAssetsProductGroupUpdateRequest_H_



#include "CatalogsCreativeAssetsProductGroupFilters.h"
#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Request object for updating a creative assets product group.
/// </summary>
class  CatalogsCreativeAssetsProductGroupUpdateRequest 
{
public:
    CatalogsCreativeAssetsProductGroupUpdateRequest() = default;
    explicit CatalogsCreativeAssetsProductGroupUpdateRequest(boost::property_tree::ptree const& pt);
    virtual ~CatalogsCreativeAssetsProductGroupUpdateRequest() = default;

    CatalogsCreativeAssetsProductGroupUpdateRequest(const CatalogsCreativeAssetsProductGroupUpdateRequest& other) = default; // copy constructor
    CatalogsCreativeAssetsProductGroupUpdateRequest(CatalogsCreativeAssetsProductGroupUpdateRequest&& other) noexcept = default; // move constructor

    CatalogsCreativeAssetsProductGroupUpdateRequest& operator=(const CatalogsCreativeAssetsProductGroupUpdateRequest& other) = default; // copy assignment
    CatalogsCreativeAssetsProductGroupUpdateRequest& operator=(CatalogsCreativeAssetsProductGroupUpdateRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsCreativeAssetsProductGroupUpdateRequest members

    /// <summary>
    /// 
    /// </summary>
    std::string getCatalogType() const;
    void setCatalogType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsCreativeAssetsProductGroupFilters getFilters() const;
    void setFilters(CatalogsCreativeAssetsProductGroupFilters value);

protected:
    std::string m_Catalog_type = "";
    std::string m_Name = "";
    std::string m_Description = "";
    CatalogsCreativeAssetsProductGroupFilters m_Filters;
};

std::vector<CatalogsCreativeAssetsProductGroupUpdateRequest> createCatalogsCreativeAssetsProductGroupUpdateRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsCreativeAssetsProductGroupUpdateRequest>(const CatalogsCreativeAssetsProductGroupUpdateRequest& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsCreativeAssetsProductGroupUpdateRequest fromPt<CatalogsCreativeAssetsProductGroupUpdateRequest>(const boost::property_tree::ptree& pt) {
    CatalogsCreativeAssetsProductGroupUpdateRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsCreativeAssetsProductGroupUpdateRequest_H_ */
