/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BudgetType.h
 *
 * Budget type. If DAILY, an ad group&#39;s daily spend will not exceed the budget parameter value. If LIFETIME, the end_time parameter is **REQUIRED**, and the ad group spend is spread evenly between the ad group &#x60;start_time&#x60; and &#x60;end_time&#x60; range. A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. For CBO campaigns, only \&quot;CBO_ADGROUP\&quot; is allowed. For WEB_SESSIONS campaigns, only \&quot;LIFETIME\&quot; is allowed. For update, only draft ad groups may update budget type.
 */

#ifndef BudgetType_H_
#define BudgetType_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Budget type. If DAILY, an ad group&#39;s daily spend will not exceed the budget parameter value. If LIFETIME, the end_time parameter is **REQUIRED**, and the ad group spend is spread evenly between the ad group &#x60;start_time&#x60; and &#x60;end_time&#x60; range. A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. For CBO campaigns, only \&quot;CBO_ADGROUP\&quot; is allowed. For WEB_SESSIONS campaigns, only \&quot;LIFETIME\&quot; is allowed. For update, only draft ad groups may update budget type.
/// </summary>
class  BudgetType 
{
public:
    BudgetType() = default;
    explicit BudgetType(boost::property_tree::ptree const& pt);
    virtual ~BudgetType() = default;

    BudgetType(const BudgetType& other) = default; // copy constructor
    BudgetType(BudgetType&& other) noexcept = default; // move constructor

    BudgetType& operator=(const BudgetType& other) = default; // copy assignment
    BudgetType& operator=(BudgetType&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    std::string toString() const;
    void fromString(const std::string& str);

    /////////////////////////////////////////////
    /// BudgetType members
    std::string getEnumValue() const;
    void setEnumValue(const std::string& val);

protected:
    std::string m_BudgetTypeEnumValue;
};

std::vector<BudgetType> createBudgetTypeVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<BudgetType>(const BudgetType& val) {
    return val.toPropertyTree();
}

template<>
inline BudgetType fromPt<BudgetType>(const boost::property_tree::ptree& pt) {
    BudgetType ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* BudgetType_H_ */
