/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BoardUpdate.h
 *
 * Board fields for updates
 */

#ifndef BoardUpdate_H_
#define BoardUpdate_H_



#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Board fields for updates
/// </summary>
class  BoardUpdate 
{
public:
    BoardUpdate() = default;
    explicit BoardUpdate(boost::property_tree::ptree const& pt);
    virtual ~BoardUpdate() = default;

    BoardUpdate(const BoardUpdate& other) = default; // copy constructor
    BoardUpdate(BoardUpdate&& other) noexcept = default; // move constructor

    BoardUpdate& operator=(const BoardUpdate& other) = default; // copy assignment
    BoardUpdate& operator=(BoardUpdate&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// BoardUpdate members

    /// <summary>
    /// 
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getPrivacy() const;
    void setPrivacy(std::string value);

protected:
    std::string m_Name = "";
    std::string m_Description = "";
    std::string m_Privacy = "";
};

std::vector<BoardUpdate> createBoardUpdateVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<BoardUpdate>(const BoardUpdate& val) {
    return val.toPropertyTree();
}

template<>
inline BoardUpdate fromPt<BoardUpdate>(const boost::property_tree::ptree& pt) {
    BoardUpdate ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* BoardUpdate_H_ */
