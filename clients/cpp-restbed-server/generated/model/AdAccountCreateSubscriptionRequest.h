/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdAccountCreateSubscriptionRequest.h
 *
 * 
 */

#ifndef AdAccountCreateSubscriptionRequest_H_
#define AdAccountCreateSubscriptionRequest_H_



#include "AdAccountCreateSubscriptionRequest_partner_metadata.h"
#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  AdAccountCreateSubscriptionRequest 
{
public:
    AdAccountCreateSubscriptionRequest() = default;
    explicit AdAccountCreateSubscriptionRequest(boost::property_tree::ptree const& pt);
    virtual ~AdAccountCreateSubscriptionRequest() = default;

    AdAccountCreateSubscriptionRequest(const AdAccountCreateSubscriptionRequest& other) = default; // copy constructor
    AdAccountCreateSubscriptionRequest(AdAccountCreateSubscriptionRequest&& other) noexcept = default; // move constructor

    AdAccountCreateSubscriptionRequest& operator=(const AdAccountCreateSubscriptionRequest& other) = default; // copy assignment
    AdAccountCreateSubscriptionRequest& operator=(AdAccountCreateSubscriptionRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AdAccountCreateSubscriptionRequest members

    /// <summary>
    /// Standard HTTPS webhook URL.
    /// </summary>
    std::string getWebhookUrl() const;
    void setWebhookUrl(std::string value);

    /// <summary>
    /// Lead form ID.
    /// </summary>
    std::string getLeadFormId() const;
    void setLeadFormId(std::string value);

    /// <summary>
    /// Partner access token. Only for clients that requires authentication. We recommend to avoid this param.
    /// </summary>
    std::string getPartnerAccessToken() const;
    void setPartnerAccessToken(std::string value);

    /// <summary>
    /// Partner refresh token. Only for clients that requires authentication. We recommend to avoid this param.
    /// </summary>
    std::string getPartnerRefreshToken() const;
    void setPartnerRefreshToken(std::string value);

    /// <summary>
    /// 
    /// </summary>
    AdAccountCreateSubscriptionRequest_partner_metadata getPartnerMetadata() const;
    void setPartnerMetadata(AdAccountCreateSubscriptionRequest_partner_metadata value);

protected:
    std::string m_Webhook_url = "";
    std::string m_Lead_form_id = "";
    std::string m_Partner_access_token = "";
    std::string m_Partner_refresh_token = "";
    AdAccountCreateSubscriptionRequest_partner_metadata m_Partner_metadata;
};

std::vector<AdAccountCreateSubscriptionRequest> createAdAccountCreateSubscriptionRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AdAccountCreateSubscriptionRequest>(const AdAccountCreateSubscriptionRequest& val) {
    return val.toPropertyTree();
}

template<>
inline AdAccountCreateSubscriptionRequest fromPt<AdAccountCreateSubscriptionRequest>(const boost::property_tree::ptree& pt) {
    AdAccountCreateSubscriptionRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AdAccountCreateSubscriptionRequest_H_ */
