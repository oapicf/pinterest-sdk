/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TopPinsAnalyticsResponse_pins_inner.h
 *
 * Array with metrics, status, and pin id for the requested metric
 */

#ifndef TopPinsAnalyticsResponse_pins_inner_H_
#define TopPinsAnalyticsResponse_pins_inner_H_



#include "DataStatus.h"
#include <string>
#include <map>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Array with metrics, status, and pin id for the requested metric
/// </summary>
class  TopPinsAnalyticsResponse_pins_inner 
{
public:
    TopPinsAnalyticsResponse_pins_inner() = default;
    explicit TopPinsAnalyticsResponse_pins_inner(boost::property_tree::ptree const& pt);
    virtual ~TopPinsAnalyticsResponse_pins_inner() = default;

    TopPinsAnalyticsResponse_pins_inner(const TopPinsAnalyticsResponse_pins_inner& other) = default; // copy constructor
    TopPinsAnalyticsResponse_pins_inner(TopPinsAnalyticsResponse_pins_inner&& other) noexcept = default; // move constructor

    TopPinsAnalyticsResponse_pins_inner& operator=(const TopPinsAnalyticsResponse_pins_inner& other) = default; // copy assignment
    TopPinsAnalyticsResponse_pins_inner& operator=(TopPinsAnalyticsResponse_pins_inner&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// TopPinsAnalyticsResponse_pins_inner members

    /// <summary>
    /// The metric name and daily value for each requested metric
    /// </summary>
    std::map<std::string, double> getMetrics() const;
    void setMetrics(std::map<std::string, double> value);

    /// <summary>
    /// 
    /// </summary>
    std::map<std::string, DataStatus> getDataStatus() const;
    void setDataStatus(std::map<std::string, DataStatus> value);

    /// <summary>
    /// The pin id
    /// </summary>
    std::string getPinId() const;
    void setPinId(std::string value);

protected:
    std::map<std::string, double> m_Metrics;
    std::map<std::string, DataStatus> m_Data_status;
    std::string m_Pin_id = "";
};

std::vector<TopPinsAnalyticsResponse_pins_inner> createTopPinsAnalyticsResponse_pins_innerVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<TopPinsAnalyticsResponse_pins_inner>(const TopPinsAnalyticsResponse_pins_inner& val) {
    return val.toPropertyTree();
}

template<>
inline TopPinsAnalyticsResponse_pins_inner fromPt<TopPinsAnalyticsResponse_pins_inner>(const boost::property_tree::ptree& pt) {
    TopPinsAnalyticsResponse_pins_inner ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* TopPinsAnalyticsResponse_pins_inner_H_ */
