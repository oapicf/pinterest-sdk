/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * LeadFormTestRequest.h
 *
 * Request to create test data for lead data test API.
 */

#ifndef LeadFormTestRequest_H_
#define LeadFormTestRequest_H_



#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Request to create test data for lead data test API.
/// </summary>
class  LeadFormTestRequest 
{
public:
    LeadFormTestRequest() = default;
    explicit LeadFormTestRequest(boost::property_tree::ptree const& pt);
    virtual ~LeadFormTestRequest() = default;

    LeadFormTestRequest(const LeadFormTestRequest& other) = default; // copy constructor
    LeadFormTestRequest(LeadFormTestRequest&& other) noexcept = default; // move constructor

    LeadFormTestRequest& operator=(const LeadFormTestRequest& other) = default; // copy assignment
    LeadFormTestRequest& operator=(LeadFormTestRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// LeadFormTestRequest members

    /// <summary>
    /// Test lead answers. Should follow the creation order.
    /// </summary>
    std::vector<std::string> getAnswers() const;
    void setAnswers(std::vector<std::string> value);

protected:
    std::vector<std::string> m_Answers;
};

std::vector<LeadFormTestRequest> createLeadFormTestRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<LeadFormTestRequest>(const LeadFormTestRequest& val) {
    return val.toPropertyTree();
}

template<>
inline LeadFormTestRequest fromPt<LeadFormTestRequest>(const boost::property_tree::ptree& pt) {
    LeadFormTestRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* LeadFormTestRequest_H_ */
