/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * QuizPinData.h
 *
 * This field includes all quiz data including questions, options, and results.
 */

#ifndef QuizPinData_H_
#define QuizPinData_H_



#include "QuizPinResult.h"
#include "QuizPinQuestion.h"
#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// This field includes all quiz data including questions, options, and results.
/// </summary>
class  QuizPinData 
{
public:
    QuizPinData() = default;
    explicit QuizPinData(boost::property_tree::ptree const& pt);
    virtual ~QuizPinData() = default;

    QuizPinData(const QuizPinData& other) = default; // copy constructor
    QuizPinData(QuizPinData&& other) noexcept = default; // move constructor

    QuizPinData& operator=(const QuizPinData& other) = default; // copy assignment
    QuizPinData& operator=(QuizPinData&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// QuizPinData members

    /// <summary>
    /// 
    /// </summary>
    std::vector<QuizPinQuestion> getQuestions() const;
    void setQuestions(std::vector<QuizPinQuestion> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<QuizPinResult> getResults() const;
    void setResults(std::vector<QuizPinResult> value);

    /// <summary>
    /// Quiz ad tie breaker type, default is RANDOM
    /// </summary>
    std::string getTieBreakerType() const;
    void setTieBreakerType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    QuizPinResult getTieBreakerCustomResult() const;
    void setTieBreakerCustomResult(QuizPinResult value);

protected:
    std::vector<QuizPinQuestion> m_Questions;
    std::vector<QuizPinResult> m_Results;
    std::string m_Tie_breaker_type = "";
    QuizPinResult m_Tie_breaker_custom_result;
};

std::vector<QuizPinData> createQuizPinDataVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<QuizPinData>(const QuizPinData& val) {
    return val.toPropertyTree();
}

template<>
inline QuizPinData fromPt<QuizPinData>(const boost::property_tree::ptree& pt) {
    QuizPinData ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* QuizPinData_H_ */
