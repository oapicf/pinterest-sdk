/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ConversionApiResponse_events_inner.h
 *
 * 
 */

#ifndef ConversionApiResponse_events_inner_H_
#define ConversionApiResponse_events_inner_H_



#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ConversionApiResponse_events_inner 
{
public:
    ConversionApiResponse_events_inner() = default;
    explicit ConversionApiResponse_events_inner(boost::property_tree::ptree const& pt);
    virtual ~ConversionApiResponse_events_inner() = default;

    ConversionApiResponse_events_inner(const ConversionApiResponse_events_inner& other) = default; // copy constructor
    ConversionApiResponse_events_inner(ConversionApiResponse_events_inner&& other) noexcept = default; // move constructor

    ConversionApiResponse_events_inner& operator=(const ConversionApiResponse_events_inner& other) = default; // copy assignment
    ConversionApiResponse_events_inner& operator=(ConversionApiResponse_events_inner&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ConversionApiResponse_events_inner members

    /// <summary>
    /// Whether the event was processed successfully.
    /// </summary>
    std::string getStatus() const;
    void setStatus(std::string value);

    /// <summary>
    /// Error message containing more information about why the event failed to be processed.
    /// </summary>
    std::string getErrorMessage() const;
    void setErrorMessage(std::string value);

    /// <summary>
    /// Warning messages about any fields in the event which are not standard. These are not critical to event processing.
    /// </summary>
    std::string getWarningMessage() const;
    void setWarningMessage(std::string value);

protected:
    std::string m_Status = "";
    std::string m_Error_message = "";
    std::string m_Warning_message = "";
};

std::vector<ConversionApiResponse_events_inner> createConversionApiResponse_events_innerVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ConversionApiResponse_events_inner>(const ConversionApiResponse_events_inner& val) {
    return val.toPropertyTree();
}

template<>
inline ConversionApiResponse_events_inner fromPt<ConversionApiResponse_events_inner>(const boost::property_tree::ptree& pt) {
    ConversionApiResponse_events_inner ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ConversionApiResponse_events_inner_H_ */
