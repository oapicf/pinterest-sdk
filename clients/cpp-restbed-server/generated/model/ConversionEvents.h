/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ConversionEvents.h
 *
 * A list of events (one or more) encapsulated by a data object.
 */

#ifndef ConversionEvents_H_
#define ConversionEvents_H_



#include <vector>
#include "ConversionEvents_data_inner.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// A list of events (one or more) encapsulated by a data object.
/// </summary>
class  ConversionEvents 
{
public:
    ConversionEvents() = default;
    explicit ConversionEvents(boost::property_tree::ptree const& pt);
    virtual ~ConversionEvents() = default;

    ConversionEvents(const ConversionEvents& other) = default; // copy constructor
    ConversionEvents(ConversionEvents&& other) noexcept = default; // move constructor

    ConversionEvents& operator=(const ConversionEvents& other) = default; // copy assignment
    ConversionEvents& operator=(ConversionEvents&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ConversionEvents members

    /// <summary>
    /// 
    /// </summary>
    std::vector<ConversionEvents_data_inner> getData() const;
    void setData(std::vector<ConversionEvents_data_inner> value);

protected:
    std::vector<ConversionEvents_data_inner> m_Data;
};

std::vector<ConversionEvents> createConversionEventsVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ConversionEvents>(const ConversionEvents& val) {
    return val.toPropertyTree();
}

template<>
inline ConversionEvents fromPt<ConversionEvents>(const boost::property_tree::ptree& pt) {
    ConversionEvents ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ConversionEvents_H_ */
