/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PinterestTagEventData.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

PinterestTagEventData::PinterestTagEventData(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string PinterestTagEventData::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void PinterestTagEventData::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree PinterestTagEventData::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("lead_type", m_Lead_type);
	pt.add_child("line_items", m_Line_items.toPropertyTree());
	pt.put("order_id", m_Order_id);
	pt.put("order_quantity", m_Order_quantity);
	pt.put("page_name", m_Page_name);
	pt.put("promo_code", m_Promo_code);
	pt.put("property", m_Property);
	pt.put("search_query", m_Search_query);
	pt.put("value", m_Value);
	pt.put("video_title", m_Video_title);
	return pt;
}

void PinterestTagEventData::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Lead_type = pt.get("lead_type", "");
	if (pt.get_child_optional("line_items")) {
        m_Line_items = fromPt<LineItem>(pt.get_child("line_items"));
	}
	m_Order_id = pt.get("order_id", "");
	m_Order_quantity = pt.get("order_quantity", 0);
	m_Page_name = pt.get("page_name", "");
	m_Promo_code = pt.get("promo_code", "");
	m_Property = pt.get("property", "");
	m_Search_query = pt.get("search_query", "");
	m_Value = pt.get("value", "");
	m_Video_title = pt.get("video_title", "");
}

Currency PinterestTagEventData::getCurrency() const
{
    return m_Currency;
}

void PinterestTagEventData::setCurrency(Currency value)
{
    m_Currency = value;
}


std::string PinterestTagEventData::getLeadType() const
{
    return m_Lead_type;
}

void PinterestTagEventData::setLeadType(std::string value)
{
    m_Lead_type = value;
}


LineItem PinterestTagEventData::getLineItems() const
{
    return m_Line_items;
}

void PinterestTagEventData::setLineItems(LineItem value)
{
    m_Line_items = value;
}


std::string PinterestTagEventData::getOrderId() const
{
    return m_Order_id;
}

void PinterestTagEventData::setOrderId(std::string value)
{
    m_Order_id = value;
}


int32_t PinterestTagEventData::getOrderQuantity() const
{
    return m_Order_quantity;
}

void PinterestTagEventData::setOrderQuantity(int32_t value)
{
    m_Order_quantity = value;
}


std::string PinterestTagEventData::getPageName() const
{
    return m_Page_name;
}

void PinterestTagEventData::setPageName(std::string value)
{
    m_Page_name = value;
}


std::string PinterestTagEventData::getPromoCode() const
{
    return m_Promo_code;
}

void PinterestTagEventData::setPromoCode(std::string value)
{
    m_Promo_code = value;
}


std::string PinterestTagEventData::getProperty() const
{
    return m_Property;
}

void PinterestTagEventData::setProperty(std::string value)
{
    m_Property = value;
}


std::string PinterestTagEventData::getSearchQuery() const
{
    return m_Search_query;
}

void PinterestTagEventData::setSearchQuery(std::string value)
{
    m_Search_query = value;
}


std::string PinterestTagEventData::getValue() const
{
    return m_Value;
}

void PinterestTagEventData::setValue(std::string value)
{
    m_Value = value;
}


std::string PinterestTagEventData::getVideoTitle() const
{
    return m_Video_title;
}

void PinterestTagEventData::setVideoTitle(std::string value)
{
    m_Video_title = value;
}



std::vector<PinterestTagEventData> createPinterestTagEventDataVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<PinterestTagEventData>();
    for (const auto& child: pt) {
        vec.emplace_back(PinterestTagEventData(child.second));
    }

    return vec;
}

}
}
}
}

