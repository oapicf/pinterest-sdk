/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ConversionTagListResponse.h
 *
 * 
 */

#ifndef ConversionTagListResponse_H_
#define ConversionTagListResponse_H_



#include "ConversionTagResponse.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ConversionTagListResponse 
{
public:
    ConversionTagListResponse() = default;
    explicit ConversionTagListResponse(boost::property_tree::ptree const& pt);
    virtual ~ConversionTagListResponse() = default;

    ConversionTagListResponse(const ConversionTagListResponse& other) = default; // copy constructor
    ConversionTagListResponse(ConversionTagListResponse&& other) noexcept = default; // move constructor

    ConversionTagListResponse& operator=(const ConversionTagListResponse& other) = default; // copy assignment
    ConversionTagListResponse& operator=(ConversionTagListResponse&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ConversionTagListResponse members

    /// <summary>
    /// 
    /// </summary>
    std::vector<ConversionTagResponse> getItems() const;
    void setItems(std::vector<ConversionTagResponse> value);

protected:
    std::vector<ConversionTagResponse> m_Items;
};

std::vector<ConversionTagListResponse> createConversionTagListResponseVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ConversionTagListResponse>(const ConversionTagListResponse& val) {
    return val.toPropertyTree();
}

template<>
inline ConversionTagListResponse fromPt<ConversionTagListResponse>(const boost::property_tree::ptree& pt) {
    ConversionTagListResponse ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ConversionTagListResponse_H_ */
