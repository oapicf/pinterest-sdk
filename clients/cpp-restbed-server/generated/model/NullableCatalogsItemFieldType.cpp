/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "NullableCatalogsItemFieldType.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

NullableCatalogsItemFieldType::NullableCatalogsItemFieldType(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string NullableCatalogsItemFieldType::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void NullableCatalogsItemFieldType::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree NullableCatalogsItemFieldType::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	return pt;
}

void NullableCatalogsItemFieldType::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
}

std::string NullableCatalogsItemFieldType::toString() const {
    return boost::lexical_cast<std::string>(getEnumValue());
}

void NullableCatalogsItemFieldType::fromString(const std::string& str) {
    setEnumValue(boost::lexical_cast<std::string>(str));
}

std::string NullableCatalogsItemFieldType::getEnumValue() const {
    return m_NullableCatalogsItemFieldTypeEnumValue;
}

void NullableCatalogsItemFieldType::setEnumValue(const std::string& val) {
    static const std::array<std::string, 56> allowedValues = {
        "ITEM_ID", "ITEM_GROUP_ID", "TITLE", "DESCRIPTION", "ITEM_LINK", "ORGANIC_LINK", "IMAGE_LINK", "ADWORDS_REDIRECT_LINK", "AD_LINK", "SIZE", "GOOGLE_PRODUCT_CATEGORY", "PRODUCT_CATEGORY", "CONDITION", "AVAILABILITY", "GENDER", "AGE_GROUP", "SIZE_TYPE", "SIZE_SYSTEM", "ADULT", "SHIPPING", "SHIPPING_WEIGHT", "TAX", "MULTIPACK", "ADDITIONAL_IMAGE_LINK", "PRICE", "SALE_PRICE", "IS_BUNDLE", "EXPIRATION_DATE", "SALE_PRICE_EFFECTIVE_DATE", "AVAILABILITY_DATE", "WEIGHT_UNIT", "PRODUCT_TYPE", "CUSTOM_LABEL_0", "CUSTOM_LABEL_1", "CUSTOM_LABEL_2", "CUSTOM_LABEL_3", "CUSTOM_LABEL_4", "MATERIAL", "PATTERN", "COLOR", "BRAND", "GTIN", "MPN", "IOS_DEEP_LINK", "ANDROID_DEEP_LINK", "FREE_SHIPPING_LABEL", "FREE_SHIPPING_LIMIT", "AVG_REVIEW_RATING", "NUM_RATINGS", "NUM_REVIEWS", "ALT_TEXT", "VARIANT_NAMES", "VARIANT_VALUES", "MIN_AD_PRICE", "SHIPPING_WIDTH", "SHIPPING_HEIGHT"
    };
    if (std::find(allowedValues.begin(), allowedValues.end(), val) != allowedValues.end()) {
        m_NullableCatalogsItemFieldTypeEnumValue = val;
    } else {
        throw std::runtime_error("Value " + boost::lexical_cast<std::string>(val) + " not allowed");
    }
}

std::vector<NullableCatalogsItemFieldType> createNullableCatalogsItemFieldTypeVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<NullableCatalogsItemFieldType>();
    for (const auto& child: pt) {
        vec.emplace_back(NullableCatalogsItemFieldType(child.second));
    }

    return vec;
}

}
}
}
}

