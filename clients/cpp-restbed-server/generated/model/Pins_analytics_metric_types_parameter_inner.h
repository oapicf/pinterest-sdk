/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Pins_analytics_metric_types_parameter_inner.h
 *
 * 
 */

#ifndef Pins_analytics_metric_types_parameter_inner_H_
#define Pins_analytics_metric_types_parameter_inner_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  Pins_analytics_metric_types_parameter_inner 
{
public:
    Pins_analytics_metric_types_parameter_inner() = default;
    explicit Pins_analytics_metric_types_parameter_inner(boost::property_tree::ptree const& pt);
    virtual ~Pins_analytics_metric_types_parameter_inner() = default;

    Pins_analytics_metric_types_parameter_inner(const Pins_analytics_metric_types_parameter_inner& other) = default; // copy constructor
    Pins_analytics_metric_types_parameter_inner(Pins_analytics_metric_types_parameter_inner&& other) noexcept = default; // move constructor

    Pins_analytics_metric_types_parameter_inner& operator=(const Pins_analytics_metric_types_parameter_inner& other) = default; // copy assignment
    Pins_analytics_metric_types_parameter_inner& operator=(Pins_analytics_metric_types_parameter_inner&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// Pins_analytics_metric_types_parameter_inner members

protected:
};

std::vector<Pins_analytics_metric_types_parameter_inner> createPins_analytics_metric_types_parameter_innerVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<Pins_analytics_metric_types_parameter_inner>(const Pins_analytics_metric_types_parameter_inner& val) {
    return val.toPropertyTree();
}

template<>
inline Pins_analytics_metric_types_parameter_inner fromPt<Pins_analytics_metric_types_parameter_inner>(const boost::property_tree::ptree& pt) {
    Pins_analytics_metric_types_parameter_inner ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* Pins_analytics_metric_types_parameter_inner_H_ */
