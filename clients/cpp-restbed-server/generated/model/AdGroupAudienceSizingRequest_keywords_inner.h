/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdGroupAudienceSizingRequest_keywords_inner.h
 *
 * 
 */

#ifndef AdGroupAudienceSizingRequest_keywords_inner_H_
#define AdGroupAudienceSizingRequest_keywords_inner_H_



#include <string>
#include "MatchTypeResponse.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  AdGroupAudienceSizingRequest_keywords_inner 
{
public:
    AdGroupAudienceSizingRequest_keywords_inner() = default;
    explicit AdGroupAudienceSizingRequest_keywords_inner(boost::property_tree::ptree const& pt);
    virtual ~AdGroupAudienceSizingRequest_keywords_inner() = default;

    AdGroupAudienceSizingRequest_keywords_inner(const AdGroupAudienceSizingRequest_keywords_inner& other) = default; // copy constructor
    AdGroupAudienceSizingRequest_keywords_inner(AdGroupAudienceSizingRequest_keywords_inner&& other) noexcept = default; // move constructor

    AdGroupAudienceSizingRequest_keywords_inner& operator=(const AdGroupAudienceSizingRequest_keywords_inner& other) = default; // copy assignment
    AdGroupAudienceSizingRequest_keywords_inner& operator=(AdGroupAudienceSizingRequest_keywords_inner&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AdGroupAudienceSizingRequest_keywords_inner members

    /// <summary>
    /// 
    /// </summary>
    MatchTypeResponse getMatchType() const;
    void setMatchType(MatchTypeResponse value);

    /// <summary>
    /// Keyword value (120 chars max).
    /// </summary>
    std::string getValue() const;
    void setValue(std::string value);

protected:
    MatchTypeResponse m_Match_type = MatchTypeResponse{};
    std::string m_Value = "";
};

std::vector<AdGroupAudienceSizingRequest_keywords_inner> createAdGroupAudienceSizingRequest_keywords_innerVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AdGroupAudienceSizingRequest_keywords_inner>(const AdGroupAudienceSizingRequest_keywords_inner& val) {
    return val.toPropertyTree();
}

template<>
inline AdGroupAudienceSizingRequest_keywords_inner fromPt<AdGroupAudienceSizingRequest_keywords_inner>(const boost::property_tree::ptree& pt) {
    AdGroupAudienceSizingRequest_keywords_inner ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AdGroupAudienceSizingRequest_keywords_inner_H_ */
