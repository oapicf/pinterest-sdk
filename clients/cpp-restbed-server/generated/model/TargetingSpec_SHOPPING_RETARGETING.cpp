/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TargetingSpec_SHOPPING_RETARGETING.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

TargetingSpec_SHOPPING_RETARGETING::TargetingSpec_SHOPPING_RETARGETING(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string TargetingSpec_SHOPPING_RETARGETING::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void TargetingSpec_SHOPPING_RETARGETING::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree TargetingSpec_SHOPPING_RETARGETING::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("lookback_window", m_Lookback_window);
	// generate tree for Tag_types
    tmp_node.clear();
	if (!m_Tag_types.empty()) {
        tmp_node = toPt(m_Tag_types);
		pt.add_child("tag_types", tmp_node);
		tmp_node.clear();
	}
	pt.put("exclusion_window", m_Exclusion_window);
	return pt;
}

void TargetingSpec_SHOPPING_RETARGETING::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Lookback_window = pt.get("lookback_window", 0);
	// push all items of Tag_types into member
	if (pt.get_child_optional("tag_types")) {
        m_Tag_types = fromPt<std::vector<int32_t>>(pt.get_child("tag_types"));
	}
	m_Exclusion_window = pt.get("exclusion_window", 0);
}

int32_t TargetingSpec_SHOPPING_RETARGETING::getLookbackWindow() const
{
    return m_Lookback_window;
}

void TargetingSpec_SHOPPING_RETARGETING::setLookbackWindow(int32_t value)
{
    m_Lookback_window = value;
}


std::vector<int32_t> TargetingSpec_SHOPPING_RETARGETING::getTagTypes() const
{
    return m_Tag_types;
}

void TargetingSpec_SHOPPING_RETARGETING::setTagTypes(std::vector<int32_t> value)
{
    m_Tag_types = value;
}


int32_t TargetingSpec_SHOPPING_RETARGETING::getExclusionWindow() const
{
    return m_Exclusion_window;
}

void TargetingSpec_SHOPPING_RETARGETING::setExclusionWindow(int32_t value)
{
    m_Exclusion_window = value;
}



std::vector<TargetingSpec_SHOPPING_RETARGETING> createTargetingSpec_SHOPPING_RETARGETINGVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<TargetingSpec_SHOPPING_RETARGETING>();
    for (const auto& child: pt) {
        vec.emplace_back(TargetingSpec_SHOPPING_RETARGETING(child.second));
    }

    return vec;
}

}
}
}
}

