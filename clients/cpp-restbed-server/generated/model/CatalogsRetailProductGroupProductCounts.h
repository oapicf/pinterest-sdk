/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsRetailProductGroupProductCounts.h
 *
 * Product counts for a Retail CatalogsProductGroup
 */

#ifndef CatalogsRetailProductGroupProductCounts_H_
#define CatalogsRetailProductGroupProductCounts_H_



#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Product counts for a Retail CatalogsProductGroup
/// </summary>
class  CatalogsRetailProductGroupProductCounts 
{
public:
    CatalogsRetailProductGroupProductCounts() = default;
    explicit CatalogsRetailProductGroupProductCounts(boost::property_tree::ptree const& pt);
    virtual ~CatalogsRetailProductGroupProductCounts() = default;

    CatalogsRetailProductGroupProductCounts(const CatalogsRetailProductGroupProductCounts& other) = default; // copy constructor
    CatalogsRetailProductGroupProductCounts(CatalogsRetailProductGroupProductCounts&& other) noexcept = default; // move constructor

    CatalogsRetailProductGroupProductCounts& operator=(const CatalogsRetailProductGroupProductCounts& other) = default; // copy assignment
    CatalogsRetailProductGroupProductCounts& operator=(CatalogsRetailProductGroupProductCounts&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsRetailProductGroupProductCounts members

    /// <summary>
    /// 
    /// </summary>
    std::string getCatalogType() const;
    void setCatalogType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    double getInStock() const;
    void setInStock(double value);

    /// <summary>
    /// 
    /// </summary>
    double getOutOfStock() const;
    void setOutOfStock(double value);

    /// <summary>
    /// 
    /// </summary>
    double getPreorder() const;
    void setPreorder(double value);

    /// <summary>
    /// 
    /// </summary>
    double getTotal() const;
    void setTotal(double value);

    /// <summary>
    /// 
    /// </summary>
    double getVideos() const;
    void setVideos(double value);

protected:
    std::string m_Catalog_type = "";
    double m_In_stock = 0.0;
    double m_Out_of_stock = 0.0;
    double m_Preorder = 0.0;
    double m_Total = 0.0;
    double m_Videos = 0.0;
};

std::vector<CatalogsRetailProductGroupProductCounts> createCatalogsRetailProductGroupProductCountsVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsRetailProductGroupProductCounts>(const CatalogsRetailProductGroupProductCounts& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsRetailProductGroupProductCounts fromPt<CatalogsRetailProductGroupProductCounts>(const boost::property_tree::ptree& pt) {
    CatalogsRetailProductGroupProductCounts ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsRetailProductGroupProductCounts_H_ */
