/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * LinkedBusiness.h
 *
 * 
 */

#ifndef LinkedBusiness_H_
#define LinkedBusiness_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  LinkedBusiness 
{
public:
    LinkedBusiness() = default;
    explicit LinkedBusiness(boost::property_tree::ptree const& pt);
    virtual ~LinkedBusiness() = default;

    LinkedBusiness(const LinkedBusiness& other) = default; // copy constructor
    LinkedBusiness(LinkedBusiness&& other) noexcept = default; // move constructor

    LinkedBusiness& operator=(const LinkedBusiness& other) = default; // copy assignment
    LinkedBusiness& operator=(LinkedBusiness&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// LinkedBusiness members

    /// <summary>
    /// Username
    /// </summary>
    std::string getUsername() const;
    void setUsername(std::string value);

    /// <summary>
    /// image_small_url
    /// </summary>
    std::string getImageSmallUrl() const;
    void setImageSmallUrl(std::string value);

    /// <summary>
    /// image_medium_url
    /// </summary>
    std::string getImageMediumUrl() const;
    void setImageMediumUrl(std::string value);

    /// <summary>
    /// image_large_url
    /// </summary>
    std::string getImageLargeUrl() const;
    void setImageLargeUrl(std::string value);

    /// <summary>
    /// image_xlarge_url
    /// </summary>
    std::string getImageXlargeUrl() const;
    void setImageXlargeUrl(std::string value);

protected:
    std::string m_Username = "";
    std::string m_Image_small_url = "";
    std::string m_Image_medium_url = "";
    std::string m_Image_large_url = "";
    std::string m_Image_xlarge_url = "";
};

std::vector<LinkedBusiness> createLinkedBusinessVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<LinkedBusiness>(const LinkedBusiness& val) {
    return val.toPropertyTree();
}

template<>
inline LinkedBusiness fromPt<LinkedBusiness>(const boost::property_tree::ptree& pt) {
    LinkedBusiness ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* LinkedBusiness_H_ */
