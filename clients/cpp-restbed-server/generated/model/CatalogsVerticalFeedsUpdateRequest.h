/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsVerticalFeedsUpdateRequest.h
 *
 * Request object for updating a feed.
 */

#ifndef CatalogsVerticalFeedsUpdateRequest_H_
#define CatalogsVerticalFeedsUpdateRequest_H_



#include "ProductAvailabilityType.h"
#include "CatalogsFeedProcessingSchedule.h"
#include "CatalogsFeedCredentials.h"
#include <string>
#include "CatalogsHotelFeedsUpdateRequest.h"
#include "CatalogsStatus.h"
#include "CatalogsRetailFeedsUpdateRequest.h"
#include "CatalogsCreativeAssetsFeedsUpdateRequest.h"
#include "CatalogsFormat.h"
#include "CatalogsType.h"
#include "NullableCurrency.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "CatalogsRetailFeedsUpdateRequest.h"
#include "CatalogsHotelFeedsUpdateRequest.h"
#include "CatalogsCreativeAssetsFeedsUpdateRequest.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Request object for updating a feed.
/// </summary>
class  CatalogsVerticalFeedsUpdateRequest : public CatalogsRetailFeedsUpdateRequest, public CatalogsHotelFeedsUpdateRequest, public CatalogsCreativeAssetsFeedsUpdateRequest
{
public:
    CatalogsVerticalFeedsUpdateRequest() = default;
    explicit CatalogsVerticalFeedsUpdateRequest(boost::property_tree::ptree const& pt);
    virtual ~CatalogsVerticalFeedsUpdateRequest() = default;

    CatalogsVerticalFeedsUpdateRequest(const CatalogsVerticalFeedsUpdateRequest& other) = default; // copy constructor
    CatalogsVerticalFeedsUpdateRequest(CatalogsVerticalFeedsUpdateRequest&& other) noexcept = default; // move constructor

    CatalogsVerticalFeedsUpdateRequest& operator=(const CatalogsVerticalFeedsUpdateRequest& other) = default; // copy assignment
    CatalogsVerticalFeedsUpdateRequest& operator=(CatalogsVerticalFeedsUpdateRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsVerticalFeedsUpdateRequest members

    /// <summary>
    /// 
    /// </summary>
    NullableCurrency getDefaultCurrency() const;
    void setDefaultCurrency(NullableCurrency value);

    /// <summary>
    /// A human-friendly name associated to a given feed.
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsFormat getFormat() const;
    void setFormat(CatalogsFormat value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsFeedCredentials getCredentials() const;
    void setCredentials(CatalogsFeedCredentials value);

    /// <summary>
    /// The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
    /// </summary>
    std::string getLocation() const;
    void setLocation(std::string value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsFeedProcessingSchedule getPreferredProcessingSchedule() const;
    void setPreferredProcessingSchedule(CatalogsFeedProcessingSchedule value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsStatus getStatus() const;
    void setStatus(CatalogsStatus value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsType getCatalogType() const;
    void setCatalogType(CatalogsType value);

    /// <summary>
    /// 
    /// </summary>
    ProductAvailabilityType getDefaultAvailability() const;
    void setDefaultAvailability(ProductAvailabilityType value);

protected:
    NullableCurrency m_Default_currency = NullableCurrency{};
    std::string m_Name = "";
    CatalogsFormat m_Format = CatalogsFormat{};
    CatalogsFeedCredentials m_Credentials;
    std::string m_Location = "";
    CatalogsFeedProcessingSchedule m_Preferred_processing_schedule;
    CatalogsStatus m_Status = CatalogsStatus{};
    CatalogsType m_Catalog_type = CatalogsType{};
    ProductAvailabilityType m_Default_availability = ProductAvailabilityType{};
};

std::vector<CatalogsVerticalFeedsUpdateRequest> createCatalogsVerticalFeedsUpdateRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsVerticalFeedsUpdateRequest>(const CatalogsVerticalFeedsUpdateRequest& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsVerticalFeedsUpdateRequest fromPt<CatalogsVerticalFeedsUpdateRequest>(const boost::property_tree::ptree& pt) {
    CatalogsVerticalFeedsUpdateRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsVerticalFeedsUpdateRequest_H_ */
