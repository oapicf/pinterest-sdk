/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CatalogsItemsUpdateBatchRequest.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CatalogsItemsUpdateBatchRequest::CatalogsItemsUpdateBatchRequest(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string CatalogsItemsUpdateBatchRequest::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void CatalogsItemsUpdateBatchRequest::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CatalogsItemsUpdateBatchRequest::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.add_child("language", m_Language.toPropertyTree());
	// generate tree for Items
    tmp_node.clear();
	if (!m_Items.empty()) {
        tmp_node = toPt(m_Items);
		pt.add_child("items", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void CatalogsItemsUpdateBatchRequest::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	if (pt.get_child_optional("language")) {
        m_Language = fromPt<CatalogsItemsRequest_language>(pt.get_child("language"));
	}
	// push all items of Items into member
	if (pt.get_child_optional("items")) {
        m_Items = fromPt<std::vector<ItemUpdateBatchRecord>>(pt.get_child("items"));
	}
}

Country CatalogsItemsUpdateBatchRequest::getCountry() const
{
    return m_Country;
}

void CatalogsItemsUpdateBatchRequest::setCountry(Country value)
{
    m_Country = value;
}


CatalogsItemsRequest_language CatalogsItemsUpdateBatchRequest::getLanguage() const
{
    return m_Language;
}

void CatalogsItemsUpdateBatchRequest::setLanguage(CatalogsItemsRequest_language value)
{
    m_Language = value;
}


BatchOperation CatalogsItemsUpdateBatchRequest::getOperation() const
{
    return m_Operation;
}

void CatalogsItemsUpdateBatchRequest::setOperation(BatchOperation value)
{
    m_Operation = value;
}


std::vector<ItemUpdateBatchRecord> CatalogsItemsUpdateBatchRequest::getItems() const
{
    return m_Items;
}

void CatalogsItemsUpdateBatchRequest::setItems(std::vector<ItemUpdateBatchRecord> value)
{
    m_Items = value;
}



std::vector<CatalogsItemsUpdateBatchRequest> createCatalogsItemsUpdateBatchRequestVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CatalogsItemsUpdateBatchRequest>();
    for (const auto& child: pt) {
        vec.emplace_back(CatalogsItemsUpdateBatchRequest(child.second));
    }

    return vec;
}

}
}
}
}

