/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsHotelListProductsByCatalogBasedFilterRequest.h
 *
 * Request object to list products for a given hotel catalog_id and product group filter.
 */

#ifndef CatalogsHotelListProductsByCatalogBasedFilterRequest_H_
#define CatalogsHotelListProductsByCatalogBasedFilterRequest_H_



#include <string>
#include "CatalogsHotelProductGroupFilters.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Request object to list products for a given hotel catalog_id and product group filter.
/// </summary>
class  CatalogsHotelListProductsByCatalogBasedFilterRequest 
{
public:
    CatalogsHotelListProductsByCatalogBasedFilterRequest() = default;
    explicit CatalogsHotelListProductsByCatalogBasedFilterRequest(boost::property_tree::ptree const& pt);
    virtual ~CatalogsHotelListProductsByCatalogBasedFilterRequest() = default;

    CatalogsHotelListProductsByCatalogBasedFilterRequest(const CatalogsHotelListProductsByCatalogBasedFilterRequest& other) = default; // copy constructor
    CatalogsHotelListProductsByCatalogBasedFilterRequest(CatalogsHotelListProductsByCatalogBasedFilterRequest&& other) noexcept = default; // move constructor

    CatalogsHotelListProductsByCatalogBasedFilterRequest& operator=(const CatalogsHotelListProductsByCatalogBasedFilterRequest& other) = default; // copy assignment
    CatalogsHotelListProductsByCatalogBasedFilterRequest& operator=(CatalogsHotelListProductsByCatalogBasedFilterRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsHotelListProductsByCatalogBasedFilterRequest members

    /// <summary>
    /// 
    /// </summary>
    std::string getCatalogType() const;
    void setCatalogType(std::string value);

    /// <summary>
    /// Catalog id pertaining to the hotel product group.
    /// </summary>
    std::string getCatalogId() const;
    void setCatalogId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsHotelProductGroupFilters getFilters() const;
    void setFilters(CatalogsHotelProductGroupFilters value);

protected:
    std::string m_Catalog_type = "";
    std::string m_Catalog_id = "";
    CatalogsHotelProductGroupFilters m_Filters;
};

std::vector<CatalogsHotelListProductsByCatalogBasedFilterRequest> createCatalogsHotelListProductsByCatalogBasedFilterRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsHotelListProductsByCatalogBasedFilterRequest>(const CatalogsHotelListProductsByCatalogBasedFilterRequest& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsHotelListProductsByCatalogBasedFilterRequest fromPt<CatalogsHotelListProductsByCatalogBasedFilterRequest>(const boost::property_tree::ptree& pt) {
    CatalogsHotelListProductsByCatalogBasedFilterRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsHotelListProductsByCatalogBasedFilterRequest_H_ */
