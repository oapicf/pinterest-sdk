/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdPreviewURLResponse.h
 *
 * 
 */

#ifndef AdPreviewURLResponse_H_
#define AdPreviewURLResponse_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  AdPreviewURLResponse 
{
public:
    AdPreviewURLResponse() = default;
    explicit AdPreviewURLResponse(boost::property_tree::ptree const& pt);
    virtual ~AdPreviewURLResponse() = default;

    AdPreviewURLResponse(const AdPreviewURLResponse& other) = default; // copy constructor
    AdPreviewURLResponse(AdPreviewURLResponse&& other) noexcept = default; // move constructor

    AdPreviewURLResponse& operator=(const AdPreviewURLResponse& other) = default; // copy assignment
    AdPreviewURLResponse& operator=(AdPreviewURLResponse&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AdPreviewURLResponse members

    /// <summary>
    /// &#39;Preview URL, expires in 7 days. Can be used in an iframe. For example: https://ads.pinterest.com/ad-preview/74667c814dd2b19/ The preview object ID/key is the last param - 74667c814dd2b19&#39;
    /// </summary>
    std::string getUrl() const;
    void setUrl(std::string value);

protected:
    std::string m_Url = "";
};

std::vector<AdPreviewURLResponse> createAdPreviewURLResponseVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AdPreviewURLResponse>(const AdPreviewURLResponse& val) {
    return val.toPropertyTree();
}

template<>
inline AdPreviewURLResponse fromPt<AdPreviewURLResponse>(const boost::property_tree::ptree& pt) {
    AdPreviewURLResponse ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AdPreviewURLResponse_H_ */
