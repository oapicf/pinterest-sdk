/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RespondToInvitesResponseArray_items_inner.h
 *
 * 
 */

#ifndef RespondToInvitesResponseArray_items_inner_H_
#define RespondToInvitesResponseArray_items_inner_H_



#include "BaseInviteDataResponse.h"
#include "InviteExceptionResponse.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  RespondToInvitesResponseArray_items_inner 
{
public:
    RespondToInvitesResponseArray_items_inner() = default;
    explicit RespondToInvitesResponseArray_items_inner(boost::property_tree::ptree const& pt);
    virtual ~RespondToInvitesResponseArray_items_inner() = default;

    RespondToInvitesResponseArray_items_inner(const RespondToInvitesResponseArray_items_inner& other) = default; // copy constructor
    RespondToInvitesResponseArray_items_inner(RespondToInvitesResponseArray_items_inner&& other) noexcept = default; // move constructor

    RespondToInvitesResponseArray_items_inner& operator=(const RespondToInvitesResponseArray_items_inner& other) = default; // copy assignment
    RespondToInvitesResponseArray_items_inner& operator=(RespondToInvitesResponseArray_items_inner&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// RespondToInvitesResponseArray_items_inner members

    /// <summary>
    /// 
    /// </summary>
    InviteExceptionResponse getException() const;
    void setException(InviteExceptionResponse value);

    /// <summary>
    /// 
    /// </summary>
    BaseInviteDataResponse getInvite() const;
    void setInvite(BaseInviteDataResponse value);

protected:
    InviteExceptionResponse m_Exception;
    BaseInviteDataResponse m_Invite;
};

std::vector<RespondToInvitesResponseArray_items_inner> createRespondToInvitesResponseArray_items_innerVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<RespondToInvitesResponseArray_items_inner>(const RespondToInvitesResponseArray_items_inner& val) {
    return val.toPropertyTree();
}

template<>
inline RespondToInvitesResponseArray_items_inner fromPt<RespondToInvitesResponseArray_items_inner>(const boost::property_tree::ptree& pt) {
    RespondToInvitesResponseArray_items_inner ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* RespondToInvitesResponseArray_items_inner_H_ */
