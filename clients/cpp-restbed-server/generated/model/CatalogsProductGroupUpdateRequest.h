/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsProductGroupUpdateRequest.h
 *
 * Request object for updating a product group.
 */

#ifndef CatalogsProductGroupUpdateRequest_H_
#define CatalogsProductGroupUpdateRequest_H_



#include "CatalogsProductGroupFiltersRequest.h"
#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Request object for updating a product group.
/// </summary>
class  CatalogsProductGroupUpdateRequest 
{
public:
    CatalogsProductGroupUpdateRequest() = default;
    explicit CatalogsProductGroupUpdateRequest(boost::property_tree::ptree const& pt);
    virtual ~CatalogsProductGroupUpdateRequest() = default;

    CatalogsProductGroupUpdateRequest(const CatalogsProductGroupUpdateRequest& other) = default; // copy constructor
    CatalogsProductGroupUpdateRequest(CatalogsProductGroupUpdateRequest&& other) noexcept = default; // move constructor

    CatalogsProductGroupUpdateRequest& operator=(const CatalogsProductGroupUpdateRequest& other) = default; // copy assignment
    CatalogsProductGroupUpdateRequest& operator=(CatalogsProductGroupUpdateRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsProductGroupUpdateRequest members

    /// <summary>
    /// 
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string value);

    /// <summary>
    /// boolean indicator of whether the product group is being featured or not
    /// </summary>
    bool isIsFeatured() const;
    void setIsFeatured(bool value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsProductGroupFiltersRequest getFilters() const;
    void setFilters(CatalogsProductGroupFiltersRequest value);

protected:
    std::string m_Name = "";
    std::string m_Description = "";
    bool m_Is_featured = false;
    CatalogsProductGroupFiltersRequest m_Filters;
};

std::vector<CatalogsProductGroupUpdateRequest> createCatalogsProductGroupUpdateRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsProductGroupUpdateRequest>(const CatalogsProductGroupUpdateRequest& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsProductGroupUpdateRequest fromPt<CatalogsProductGroupUpdateRequest>(const boost::property_tree::ptree& pt) {
    CatalogsProductGroupUpdateRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsProductGroupUpdateRequest_H_ */
