/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdAccountsCountryResponseData.h
 *
 * 
 */

#ifndef AdAccountsCountryResponseData_H_
#define AdAccountsCountryResponseData_H_



#include "AdCountry.h"
#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  AdAccountsCountryResponseData 
{
public:
    AdAccountsCountryResponseData() = default;
    explicit AdAccountsCountryResponseData(boost::property_tree::ptree const& pt);
    virtual ~AdAccountsCountryResponseData() = default;

    AdAccountsCountryResponseData(const AdAccountsCountryResponseData& other) = default; // copy constructor
    AdAccountsCountryResponseData(AdAccountsCountryResponseData&& other) noexcept = default; // move constructor

    AdAccountsCountryResponseData& operator=(const AdAccountsCountryResponseData& other) = default; // copy assignment
    AdAccountsCountryResponseData& operator=(AdAccountsCountryResponseData&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AdAccountsCountryResponseData members

    /// <summary>
    /// 
    /// </summary>
    AdCountry getCode() const;
    void setCode(AdCountry value);

    /// <summary>
    /// Country currency.
    /// </summary>
    std::string getCurrency() const;
    void setCurrency(std::string value);

    /// <summary>
    /// Country index
    /// </summary>
    double getIndex() const;
    void setIndex(double value);

    /// <summary>
    /// Country name
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

protected:
    AdCountry m_Code = "";
    std::string m_Currency = "";
    double m_Index = 0.0;
    std::string m_Name = "";
};

std::vector<AdAccountsCountryResponseData> createAdAccountsCountryResponseDataVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AdAccountsCountryResponseData>(const AdAccountsCountryResponseData& val) {
    return val.toPropertyTree();
}

template<>
inline AdAccountsCountryResponseData fromPt<AdAccountsCountryResponseData>(const boost::property_tree::ptree& pt) {
    AdAccountsCountryResponseData ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AdAccountsCountryResponseData_H_ */
