/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TargetingTemplateAudienceSizing.h
 *
 * Gets an audience size estimate for a set of given targeting spec data. &lt;p&gt;Returns:&lt;/p&gt; An object containing an audience size estimate that has a reach estimate (number of unique users) against the given targeting template. This by default provides a monthly estimate. 
 */

#ifndef TargetingTemplateAudienceSizing_H_
#define TargetingTemplateAudienceSizing_H_



#include "TargetingTemplateAudienceSizing_reach_estimate.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Gets an audience size estimate for a set of given targeting spec data. &lt;p&gt;Returns:&lt;/p&gt; An object containing an audience size estimate that has a reach estimate (number of unique users) against the given targeting template. This by default provides a monthly estimate. 
/// </summary>
class  TargetingTemplateAudienceSizing 
{
public:
    TargetingTemplateAudienceSizing() = default;
    explicit TargetingTemplateAudienceSizing(boost::property_tree::ptree const& pt);
    virtual ~TargetingTemplateAudienceSizing() = default;

    TargetingTemplateAudienceSizing(const TargetingTemplateAudienceSizing& other) = default; // copy constructor
    TargetingTemplateAudienceSizing(TargetingTemplateAudienceSizing&& other) noexcept = default; // move constructor

    TargetingTemplateAudienceSizing& operator=(const TargetingTemplateAudienceSizing& other) = default; // copy assignment
    TargetingTemplateAudienceSizing& operator=(TargetingTemplateAudienceSizing&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// TargetingTemplateAudienceSizing members

    /// <summary>
    /// 
    /// </summary>
    TargetingTemplateAudienceSizing_reach_estimate getReachEstimate() const;
    void setReachEstimate(TargetingTemplateAudienceSizing_reach_estimate value);

protected:
    TargetingTemplateAudienceSizing_reach_estimate m_Reach_estimate;
};

std::vector<TargetingTemplateAudienceSizing> createTargetingTemplateAudienceSizingVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<TargetingTemplateAudienceSizing>(const TargetingTemplateAudienceSizing& val) {
    return val.toPropertyTree();
}

template<>
inline TargetingTemplateAudienceSizing fromPt<TargetingTemplateAudienceSizing>(const boost::property_tree::ptree& pt) {
    TargetingTemplateAudienceSizing ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* TargetingTemplateAudienceSizing_H_ */
