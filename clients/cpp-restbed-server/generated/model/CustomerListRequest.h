/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CustomerListRequest.h
 *
 * 
 */

#ifndef CustomerListRequest_H_
#define CustomerListRequest_H_



#include "UserListType.h"
#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CustomerListRequest 
{
public:
    CustomerListRequest() = default;
    explicit CustomerListRequest(boost::property_tree::ptree const& pt);
    virtual ~CustomerListRequest() = default;

    CustomerListRequest(const CustomerListRequest& other) = default; // copy constructor
    CustomerListRequest(CustomerListRequest&& other) noexcept = default; // move constructor

    CustomerListRequest& operator=(const CustomerListRequest& other) = default; // copy assignment
    CustomerListRequest& operator=(CustomerListRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CustomerListRequest members

    /// <summary>
    /// Customer list name.
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// Records list. Can be any combination of emails, MAIDs, or IDFAs. Emails must be lowercase and can be plain text or hashed using SHA1, SHA256, or MD5. MAIDs and IDFAs must be hashed with SHA1, SHA256, or MD5.
    /// </summary>
    std::string getRecords() const;
    void setRecords(std::string value);

    /// <summary>
    /// 
    /// </summary>
    UserListType getListType() const;
    void setListType(UserListType value);

    /// <summary>
    /// Customer list errors.
    /// </summary>
    std::string getExceptions() const;
    void setExceptions(std::string value);

protected:
    std::string m_Name = "";
    std::string m_Records = "";
    UserListType m_List_type = "EMAIL";
    std::string m_Exceptions = std::string{};
};

std::vector<CustomerListRequest> createCustomerListRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CustomerListRequest>(const CustomerListRequest& val) {
    return val.toPropertyTree();
}

template<>
inline CustomerListRequest fromPt<CustomerListRequest>(const boost::property_tree::ptree& pt) {
    CustomerListRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CustomerListRequest_H_ */
