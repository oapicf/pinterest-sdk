/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdAccount.h
 *
 * 
 */

#ifndef AdAccount_H_
#define AdAccount_H_



#include "Country.h"
#include "Ad_account_owner.h"
#include <string>
#include "BusinessAccessRole.h"
#include "Currency.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  AdAccount 
{
public:
    AdAccount() = default;
    explicit AdAccount(boost::property_tree::ptree const& pt);
    virtual ~AdAccount() = default;

    AdAccount(const AdAccount& other) = default; // copy constructor
    AdAccount(AdAccount&& other) noexcept = default; // move constructor

    AdAccount& operator=(const AdAccount& other) = default; // copy assignment
    AdAccount& operator=(AdAccount&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AdAccount members

    /// <summary>
    /// 
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    Ad_account_owner getOwner() const;
    void setOwner(Ad_account_owner value);

    /// <summary>
    /// 
    /// </summary>
    Country getCountry() const;
    void setCountry(Country value);

    /// <summary>
    /// 
    /// </summary>
    Currency getCurrency() const;
    void setCurrency(Currency value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<BusinessAccessRole> getPermissions() const;
    void setPermissions(std::vector<BusinessAccessRole> value);

    /// <summary>
    /// Creation time. Unix timestamp in seconds.
    /// </summary>
    int32_t getCreatedTime() const;
    void setCreatedTime(int32_t value);

    /// <summary>
    /// Last update time. Unix timestamp in seconds.
    /// </summary>
    int32_t getUpdatedTime() const;
    void setUpdatedTime(int32_t value);

protected:
    std::string m_Id = "";
    std::string m_Name = "";
    Ad_account_owner m_Owner;
    Country m_Country = Country{};
    Currency m_Currency = Currency{};
    std::vector<BusinessAccessRole> m_Permissions;
    int32_t m_Created_time = 0;
    int32_t m_Updated_time = 0;
};

std::vector<AdAccount> createAdAccountVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AdAccount>(const AdAccount& val) {
    return val.toPropertyTree();
}

template<>
inline AdAccount fromPt<AdAccount>(const boost::property_tree::ptree& pt) {
    AdAccount ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AdAccount_H_ */
