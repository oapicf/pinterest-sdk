/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsFeedIngestionInfo.h
 *
 * 
 */

#ifndef CatalogsFeedIngestionInfo_H_
#define CatalogsFeedIngestionInfo_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CatalogsFeedIngestionInfo 
{
public:
    CatalogsFeedIngestionInfo() = default;
    explicit CatalogsFeedIngestionInfo(boost::property_tree::ptree const& pt);
    virtual ~CatalogsFeedIngestionInfo() = default;

    CatalogsFeedIngestionInfo(const CatalogsFeedIngestionInfo& other) = default; // copy constructor
    CatalogsFeedIngestionInfo(CatalogsFeedIngestionInfo&& other) noexcept = default; // move constructor

    CatalogsFeedIngestionInfo& operator=(const CatalogsFeedIngestionInfo& other) = default; // copy assignment
    CatalogsFeedIngestionInfo& operator=(CatalogsFeedIngestionInfo&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsFeedIngestionInfo members

    /// <summary>
    /// The number of ingested products that are in stock.
    /// </summary>
    int32_t getINSTOCK() const;
    void setINSTOCK(int32_t value);

    /// <summary>
    /// The number of ingested products that are in out of stock.
    /// </summary>
    int32_t getOUTOFSTOCK() const;
    void setOUTOFSTOCK(int32_t value);

    /// <summary>
    /// The number of ingested products that are in preorder.
    /// </summary>
    int32_t getPREORDER() const;
    void setPREORDER(int32_t value);

protected:
    int32_t m_IN_STOCK = 0;
    int32_t m_OUT_OF_STOCK = 0;
    int32_t m_PREORDER = 0;
};

std::vector<CatalogsFeedIngestionInfo> createCatalogsFeedIngestionInfoVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsFeedIngestionInfo>(const CatalogsFeedIngestionInfo& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsFeedIngestionInfo fromPt<CatalogsFeedIngestionInfo>(const boost::property_tree::ptree& pt) {
    CatalogsFeedIngestionInfo ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsFeedIngestionInfo_H_ */
