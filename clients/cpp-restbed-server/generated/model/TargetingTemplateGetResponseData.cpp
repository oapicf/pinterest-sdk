/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TargetingTemplateGetResponseData.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

TargetingTemplateGetResponseData::TargetingTemplateGetResponseData(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string TargetingTemplateGetResponseData::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void TargetingTemplateGetResponseData::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree TargetingTemplateGetResponseData::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("name", m_Name);
	pt.put("auto_targeting_enabled", m_Auto_targeting_enabled);
	pt.add_child("targeting_attributes", m_Targeting_attributes.toPropertyTree());
	// generate tree for Keywords
    tmp_node.clear();
	if (!m_Keywords.empty()) {
        tmp_node = toPt(m_Keywords);
		pt.add_child("keywords", tmp_node);
		tmp_node.clear();
	}
	pt.add_child("tracking_urls", m_Tracking_urls.toPropertyTree());
	pt.put("id", m_Id);
	pt.put("created_time", m_Created_time);
	pt.put("updated_time", m_Updated_time);
	pt.put("ad_account_id", m_Ad_account_id);
	pt.put("status", m_Status);
	pt.add_child("sizing", m_Sizing.toPropertyTree());
	pt.put("valid", m_Valid);
	return pt;
}

void TargetingTemplateGetResponseData::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Name = pt.get("name", "");
	m_Auto_targeting_enabled = pt.get("auto_targeting_enabled", true);
	if (pt.get_child_optional("targeting_attributes")) {
        m_Targeting_attributes = fromPt<TargetingSpec>(pt.get_child("targeting_attributes"));
	}
	// push all items of Keywords into member
	if (pt.get_child_optional("keywords")) {
        m_Keywords = fromPt<std::vector<TargetingTemplateKeyword>>(pt.get_child("keywords"));
	}
	if (pt.get_child_optional("tracking_urls")) {
        m_Tracking_urls = fromPt<TrackingUrls>(pt.get_child("tracking_urls"));
	}
	m_Id = pt.get("id", "");
	m_Created_time = pt.get("created_time", 0);
	m_Updated_time = pt.get("updated_time", 0);
	m_Ad_account_id = pt.get("ad_account_id", "");
	setStatus(pt.get("status", "ACTIVE"));
	if (pt.get_child_optional("sizing")) {
        m_Sizing = fromPt<TargetingTemplateAudienceSizing>(pt.get_child("sizing"));
	}
	m_Valid = pt.get("valid", false);
}

std::string TargetingTemplateGetResponseData::getName() const
{
    return m_Name;
}

void TargetingTemplateGetResponseData::setName(std::string value)
{
    m_Name = value;
}


bool TargetingTemplateGetResponseData::isAutoTargetingEnabled() const
{
    return m_Auto_targeting_enabled;
}

void TargetingTemplateGetResponseData::setAutoTargetingEnabled(bool value)
{
    m_Auto_targeting_enabled = value;
}


TargetingSpec TargetingTemplateGetResponseData::getTargetingAttributes() const
{
    return m_Targeting_attributes;
}

void TargetingTemplateGetResponseData::setTargetingAttributes(TargetingSpec value)
{
    m_Targeting_attributes = value;
}


PlacementGroupType TargetingTemplateGetResponseData::getPlacementGroup() const
{
    return m_Placement_group;
}

void TargetingTemplateGetResponseData::setPlacementGroup(PlacementGroupType value)
{
    m_Placement_group = value;
}


std::vector<TargetingTemplateKeyword> TargetingTemplateGetResponseData::getKeywords() const
{
    return m_Keywords;
}

void TargetingTemplateGetResponseData::setKeywords(std::vector<TargetingTemplateKeyword> value)
{
    m_Keywords = value;
}


TrackingUrls TargetingTemplateGetResponseData::getTrackingUrls() const
{
    return m_Tracking_urls;
}

void TargetingTemplateGetResponseData::setTrackingUrls(TrackingUrls value)
{
    m_Tracking_urls = value;
}


std::string TargetingTemplateGetResponseData::getId() const
{
    return m_Id;
}

void TargetingTemplateGetResponseData::setId(std::string value)
{
    m_Id = value;
}


int32_t TargetingTemplateGetResponseData::getCreatedTime() const
{
    return m_Created_time;
}

void TargetingTemplateGetResponseData::setCreatedTime(int32_t value)
{
    m_Created_time = value;
}


int32_t TargetingTemplateGetResponseData::getUpdatedTime() const
{
    return m_Updated_time;
}

void TargetingTemplateGetResponseData::setUpdatedTime(int32_t value)
{
    m_Updated_time = value;
}


std::string TargetingTemplateGetResponseData::getAdAccountId() const
{
    return m_Ad_account_id;
}

void TargetingTemplateGetResponseData::setAdAccountId(std::string value)
{
    m_Ad_account_id = value;
}


std::string TargetingTemplateGetResponseData::getStatus() const
{
    return m_Status;
}

void TargetingTemplateGetResponseData::setStatus(std::string value)
{
    static const std::array<std::string, 2> allowedValues = {
        "ACTIVE", "DELETED"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Status = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


TargetingTemplateAudienceSizing TargetingTemplateGetResponseData::getSizing() const
{
    return m_Sizing;
}

void TargetingTemplateGetResponseData::setSizing(TargetingTemplateAudienceSizing value)
{
    m_Sizing = value;
}


bool TargetingTemplateGetResponseData::isValid() const
{
    return m_Valid;
}

void TargetingTemplateGetResponseData::setValid(bool value)
{
    m_Valid = value;
}



std::vector<TargetingTemplateGetResponseData> createTargetingTemplateGetResponseDataVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<TargetingTemplateGetResponseData>();
    for (const auto& child: pt) {
        vec.emplace_back(TargetingTemplateGetResponseData(child.second));
    }

    return vec;
}

}
}
}
}

