/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AudienceInsightsResponse.h
 *
 * Audience interests and demographics.
 */

#ifndef AudienceInsightsResponse_H_
#define AudienceInsightsResponse_H_



#include "AudienceCategory.h"
#include "AudienceInsightType.h"
#include <string>
#include "AudienceDemographics.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Audience interests and demographics.
/// </summary>
class  AudienceInsightsResponse 
{
public:
    AudienceInsightsResponse() = default;
    explicit AudienceInsightsResponse(boost::property_tree::ptree const& pt);
    virtual ~AudienceInsightsResponse() = default;

    AudienceInsightsResponse(const AudienceInsightsResponse& other) = default; // copy constructor
    AudienceInsightsResponse(AudienceInsightsResponse&& other) noexcept = default; // move constructor

    AudienceInsightsResponse& operator=(const AudienceInsightsResponse& other) = default; // copy assignment
    AudienceInsightsResponse& operator=(AudienceInsightsResponse&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AudienceInsightsResponse members

    /// <summary>
    /// Category interest distribution
    /// </summary>
    std::vector<AudienceCategory> getCategories() const;
    void setCategories(std::vector<AudienceCategory> value);

    /// <summary>
    /// 
    /// </summary>
    AudienceDemographics getDemographics() const;
    void setDemographics(AudienceDemographics value);

    /// <summary>
    /// 
    /// </summary>
    AudienceInsightType getType() const;
    void setType(AudienceInsightType value);

    /// <summary>
    /// Generation date
    /// </summary>
    std::string getDate() const;
    void setDate(std::string value);

    /// <summary>
    /// Population count.
    /// </summary>
    int32_t getSize() const;
    void setSize(int32_t value);

    /// <summary>
    /// Indicates whether the audience size has been rounded up to the next highest upper boundary.
    /// </summary>
    bool isSizeIsUpperBound() const;
    void setSizeIsUpperBound(bool value);

protected:
    std::vector<AudienceCategory> m_Categories;
    AudienceDemographics m_Demographics;
    AudienceInsightType m_Type = AudienceInsightType{};
    std::string m_date = "";
    int32_t m_Size = 0;
    bool m_Size_is_upper_bound = false;
};

std::vector<AudienceInsightsResponse> createAudienceInsightsResponseVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AudienceInsightsResponse>(const AudienceInsightsResponse& val) {
    return val.toPropertyTree();
}

template<>
inline AudienceInsightsResponse fromPt<AudienceInsightsResponse>(const boost::property_tree::ptree& pt) {
    AudienceInsightsResponse ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AudienceInsightsResponse_H_ */
