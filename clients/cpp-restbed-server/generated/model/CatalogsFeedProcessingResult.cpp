/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CatalogsFeedProcessingResult.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CatalogsFeedProcessingResult::CatalogsFeedProcessingResult(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string CatalogsFeedProcessingResult::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void CatalogsFeedProcessingResult::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CatalogsFeedProcessingResult::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("created_at", m_Created_at);
	pt.put("id", m_Id);
	pt.put("updated_at", m_Updated_at);
	pt.add_child("ingestion_details", m_Ingestion_details.toPropertyTree());
	pt.add_child("product_counts", m_Product_counts.toPropertyTree());
	pt.add_child("validation_details", m_Validation_details.toPropertyTree());
	return pt;
}

void CatalogsFeedProcessingResult::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Created_at = pt.get("created_at", "");
	m_Id = pt.get("id", "");
	m_Updated_at = pt.get("updated_at", "");
	if (pt.get_child_optional("ingestion_details")) {
        m_Ingestion_details = fromPt<CatalogsFeedIngestionDetails>(pt.get_child("ingestion_details"));
	}
	if (pt.get_child_optional("product_counts")) {
        m_Product_counts = fromPt<CatalogsFeedProductCounts>(pt.get_child("product_counts"));
	}
	if (pt.get_child_optional("validation_details")) {
        m_Validation_details = fromPt<CatalogsFeedValidationDetails>(pt.get_child("validation_details"));
	}
}

std::string CatalogsFeedProcessingResult::getCreatedAt() const
{
    return m_Created_at;
}

void CatalogsFeedProcessingResult::setCreatedAt(std::string value)
{
    m_Created_at = value;
}


std::string CatalogsFeedProcessingResult::getId() const
{
    return m_Id;
}

void CatalogsFeedProcessingResult::setId(std::string value)
{
    m_Id = value;
}


std::string CatalogsFeedProcessingResult::getUpdatedAt() const
{
    return m_Updated_at;
}

void CatalogsFeedProcessingResult::setUpdatedAt(std::string value)
{
    m_Updated_at = value;
}


CatalogsFeedIngestionDetails CatalogsFeedProcessingResult::getIngestionDetails() const
{
    return m_Ingestion_details;
}

void CatalogsFeedProcessingResult::setIngestionDetails(CatalogsFeedIngestionDetails value)
{
    m_Ingestion_details = value;
}


CatalogsFeedProcessingStatus CatalogsFeedProcessingResult::getStatus() const
{
    return m_Status;
}

void CatalogsFeedProcessingResult::setStatus(CatalogsFeedProcessingStatus value)
{
    m_Status = value;
}


CatalogsFeedProductCounts CatalogsFeedProcessingResult::getProductCounts() const
{
    return m_Product_counts;
}

void CatalogsFeedProcessingResult::setProductCounts(CatalogsFeedProductCounts value)
{
    m_Product_counts = value;
}


CatalogsFeedValidationDetails CatalogsFeedProcessingResult::getValidationDetails() const
{
    return m_Validation_details;
}

void CatalogsFeedProcessingResult::setValidationDetails(CatalogsFeedValidationDetails value)
{
    m_Validation_details = value;
}



std::vector<CatalogsFeedProcessingResult> createCatalogsFeedProcessingResultVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CatalogsFeedProcessingResult>();
    for (const auto& child: pt) {
        vec.emplace_back(CatalogsFeedProcessingResult(child.second));
    }

    return vec;
}

}
}
}
}

