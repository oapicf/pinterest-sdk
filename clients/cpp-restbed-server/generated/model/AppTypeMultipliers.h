/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AppTypeMultipliers.h
 *
 * This represents a mapping from app type targeting criteria to a bid price adjustment.  Multiplier values must be between 0 and 10. A value of 10 represents a 900% increase in bid price (from $1 to $10 for example). A value of 0 will stop distribution for this item on the specified app type in &#x60;MAX_BID&#x60; ad groups in &#x60;CATALOG_SALES&#x60; campaigns. All app type multipliers must be set at the same time. If a multiplier is not provided it is assumed to be 1 (no bid adjustment).
 */

#ifndef AppTypeMultipliers_H_
#define AppTypeMultipliers_H_



#include "TargetingSpecAppType.h"
#include <map>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// This represents a mapping from app type targeting criteria to a bid price adjustment.  Multiplier values must be between 0 and 10. A value of 10 represents a 900% increase in bid price (from $1 to $10 for example). A value of 0 will stop distribution for this item on the specified app type in &#x60;MAX_BID&#x60; ad groups in &#x60;CATALOG_SALES&#x60; campaigns. All app type multipliers must be set at the same time. If a multiplier is not provided it is assumed to be 1 (no bid adjustment).
/// </summary>
class  AppTypeMultipliers 
{
public:
    AppTypeMultipliers() = default;
    explicit AppTypeMultipliers(boost::property_tree::ptree const& pt);
    virtual ~AppTypeMultipliers() = default;

    AppTypeMultipliers(const AppTypeMultipliers& other) = default; // copy constructor
    AppTypeMultipliers(AppTypeMultipliers&& other) noexcept = default; // move constructor

    AppTypeMultipliers& operator=(const AppTypeMultipliers& other) = default; // copy assignment
    AppTypeMultipliers& operator=(AppTypeMultipliers&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AppTypeMultipliers members

    /// <summary>
    /// 
    /// </summary>
    TargetingSpecAppType getAPPTYPE() const;
    void setAPPTYPE(TargetingSpecAppType value);

protected:
    TargetingSpecAppType m_APP_TYPE = TargetingSpecAppType{};
};

std::vector<AppTypeMultipliers> createAppTypeMultipliersVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AppTypeMultipliers>(const AppTypeMultipliers& val) {
    return val.toPropertyTree();
}

template<>
inline AppTypeMultipliers fromPt<AppTypeMultipliers>(const boost::property_tree::ptree& pt) {
    AppTypeMultipliers ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AppTypeMultipliers_H_ */
