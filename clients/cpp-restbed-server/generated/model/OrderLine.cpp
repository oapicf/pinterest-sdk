/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrderLine.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrderLine::OrderLine(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string OrderLine::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void OrderLine::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree OrderLine::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("id", m_Id);
	pt.put("type", m_Type);
	pt.put("ad_account_id", m_Ad_account_id);
	pt.put("purchase_order_id", m_Purchase_order_id);
	pt.put("start_time", m_Start_time);
	pt.put("end_time", m_End_time);
	pt.put("budget", m_Budget);
	pt.put("paid_budget", m_Paid_budget);
	pt.put("name", m_Name);
	// generate tree for Campaign_ids
    tmp_node.clear();
	if (!m_Campaign_ids.empty()) {
        tmp_node = toPt(m_Campaign_ids);
		pt.add_child("campaign_ids", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void OrderLine::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Id = pt.get("id", "");
	m_Type = pt.get("type", "");
	m_Ad_account_id = pt.get("ad_account_id", "");
	m_Purchase_order_id = pt.get("purchase_order_id", "");
	m_Start_time = pt.get("start_time", 0.0);
	m_End_time = pt.get("end_time", 0.0);
	m_Budget = pt.get("budget", 0.0);
	m_Paid_budget = pt.get("paid_budget", 0.0);
	m_Name = pt.get("name", "");
	// push all items of Campaign_ids into member
	if (pt.get_child_optional("campaign_ids")) {
        m_Campaign_ids = fromPt<std::vector<std::string>>(pt.get_child("campaign_ids"));
	}
}

std::string OrderLine::getId() const
{
    return m_Id;
}

void OrderLine::setId(std::string value)
{
    m_Id = value;
}


std::string OrderLine::getType() const
{
    return m_Type;
}

void OrderLine::setType(std::string value)
{
    m_Type = value;
}


std::string OrderLine::getAdAccountId() const
{
    return m_Ad_account_id;
}

void OrderLine::setAdAccountId(std::string value)
{
    m_Ad_account_id = value;
}


std::string OrderLine::getPurchaseOrderId() const
{
    return m_Purchase_order_id;
}

void OrderLine::setPurchaseOrderId(std::string value)
{
    m_Purchase_order_id = value;
}


double OrderLine::getStartTime() const
{
    return m_Start_time;
}

void OrderLine::setStartTime(double value)
{
    m_Start_time = value;
}


double OrderLine::getEndTime() const
{
    return m_End_time;
}

void OrderLine::setEndTime(double value)
{
    m_End_time = value;
}


double OrderLine::getBudget() const
{
    return m_Budget;
}

void OrderLine::setBudget(double value)
{
    m_Budget = value;
}


double OrderLine::getPaidBudget() const
{
    return m_Paid_budget;
}

void OrderLine::setPaidBudget(double value)
{
    m_Paid_budget = value;
}


OrderLineStatus OrderLine::getStatus() const
{
    return m_Status;
}

void OrderLine::setStatus(OrderLineStatus value)
{
    m_Status = value;
}


std::string OrderLine::getName() const
{
    return m_Name;
}

void OrderLine::setName(std::string value)
{
    m_Name = value;
}


OrderLinePaidType OrderLine::getPaidType() const
{
    return m_Paid_type;
}

void OrderLine::setPaidType(OrderLinePaidType value)
{
    m_Paid_type = value;
}


std::vector<std::string> OrderLine::getCampaignIds() const
{
    return m_Campaign_ids;
}

void OrderLine::setCampaignIds(std::vector<std::string> value)
{
    m_Campaign_ids = value;
}



std::vector<OrderLine> createOrderLineVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<OrderLine>();
    for (const auto& child: pt) {
        vec.emplace_back(OrderLine(child.second));
    }

    return vec;
}

}
}
}
}

