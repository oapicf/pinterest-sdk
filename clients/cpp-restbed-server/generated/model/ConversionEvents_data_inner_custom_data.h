/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ConversionEvents_data_inner_custom_data.h
 *
 * Object containing other custom data.
 */

#ifndef ConversionEvents_data_inner_custom_data_H_
#define ConversionEvents_data_inner_custom_data_H_



#include <string>
#include <vector>
#include "ConversionEvents_data_inner_custom_data_contents_inner.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Object containing other custom data.
/// </summary>
class  ConversionEvents_data_inner_custom_data 
{
public:
    ConversionEvents_data_inner_custom_data() = default;
    explicit ConversionEvents_data_inner_custom_data(boost::property_tree::ptree const& pt);
    virtual ~ConversionEvents_data_inner_custom_data() = default;

    ConversionEvents_data_inner_custom_data(const ConversionEvents_data_inner_custom_data& other) = default; // copy constructor
    ConversionEvents_data_inner_custom_data(ConversionEvents_data_inner_custom_data&& other) noexcept = default; // move constructor

    ConversionEvents_data_inner_custom_data& operator=(const ConversionEvents_data_inner_custom_data& other) = default; // copy assignment
    ConversionEvents_data_inner_custom_data& operator=(ConversionEvents_data_inner_custom_data&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ConversionEvents_data_inner_custom_data members

    /// <summary>
    /// The ISO-4217 currency code. If not provided, we will default to the advertiser&#39;s currency set during account creation. Your campaign performance needs this field to report right ROAS/CPA.
    /// </summary>
    std::string getCurrency() const;
    void setCurrency(std::string value);

    /// <summary>
    /// Total value of the event. Accepted as a string in the request; it will be parsed into a double. For example, if there are two items in a checkout event, the value should be the total price. We recommend to use pre-tax, pre-shipping final value.
    /// </summary>
    std::string getValue() const;
    void setValue(std::string value);

    /// <summary>
    /// List of products IDs. We recommend using this if you are a merchant for PageVisit, AddToCart and Checkouts. For detail, please check &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt; (Install the Pinterest tag section).
    /// </summary>
    std::vector<std::string> getContentIds() const;
    void setContentIds(std::vector<std::string> value);

    /// <summary>
    /// The name of the page or product associated with the event.
    /// </summary>
    std::string getContentName() const;
    void setContentName(std::string value);

    /// <summary>
    /// The category of the content associated with the event.
    /// </summary>
    std::string getContentCategory() const;
    void setContentCategory(std::string value);

    /// <summary>
    /// The brand of the content associated with the event.
    /// </summary>
    std::string getContentBrand() const;
    void setContentBrand(std::string value);

    /// <summary>
    /// A list of objects containing information about products, such as price and quantity. We recommend using this if you are a merchant for PageVisit, AddToCart and Checkouts. For detail, please check &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt; (Install the Pinterest tag section).
    /// </summary>
    std::vector<ConversionEvents_data_inner_custom_data_contents_inner> getContents() const;
    void setContents(std::vector<ConversionEvents_data_inner_custom_data_contents_inner> value);

    /// <summary>
    /// Total number of products of the event. For example, the total number of items purchased in a checkout event. We recommend using this if you are a merchant for AddToCart and Checkouts. For detail, please check &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt; (Install the Pinterest tag section).
    /// </summary>
    int64_t getNumItems() const;
    void setNumItems(int64_t value);

    /// <summary>
    /// The order ID. We recommend sending order_id to help us deduplicate events when necessary. This also helps to run other measurement products at Pinterest.
    /// </summary>
    std::string getOrderId() const;
    void setOrderId(std::string value);

    /// <summary>
    /// The search string related to the user conversion event.
    /// </summary>
    std::string getSearchString() const;
    void setSearchString(std::string value);

    /// <summary>
    /// Flags for different privacy rights laws to opt out users of sharing personal information. Values should be comma separated. Please follow the &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/limited-data-processing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Help Center&lt;/a&gt; and &lt;a href&#x3D;\&quot;/docs/api-features/conversion-overview/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;dev site&lt;/a&gt; for specific opt_out_type set up.
    /// </summary>
    std::string getOptOutType() const;
    void setOptOutType(std::string value);

    /// <summary>
    /// Named partner. Not required, this is for Pinterest internal use only. Please do not use this unless specifically guided.
    /// </summary>
    std::string getNp() const;
    void setNp(std::string value);

protected:
    std::string m_Currency = "";
    std::string m_Value = "";
    std::vector<std::string> m_Content_ids;
    std::string m_Content_name = "";
    std::string m_Content_category = "";
    std::string m_Content_brand = "";
    std::vector<ConversionEvents_data_inner_custom_data_contents_inner> m_Contents;
    int64_t m_Num_items = 0L;
    std::string m_Order_id = "";
    std::string m_Search_string = "";
    std::string m_Opt_out_type = "";
    std::string m_Np = "";
};

std::vector<ConversionEvents_data_inner_custom_data> createConversionEvents_data_inner_custom_dataVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ConversionEvents_data_inner_custom_data>(const ConversionEvents_data_inner_custom_data& val) {
    return val.toPropertyTree();
}

template<>
inline ConversionEvents_data_inner_custom_data fromPt<ConversionEvents_data_inner_custom_data>(const boost::property_tree::ptree& pt) {
    ConversionEvents_data_inner_custom_data ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ConversionEvents_data_inner_custom_data_H_ */
