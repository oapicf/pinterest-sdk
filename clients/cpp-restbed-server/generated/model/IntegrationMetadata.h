/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * IntegrationMetadata.h
 *
 * Integration metadata
 */

#ifndef IntegrationMetadata_H_
#define IntegrationMetadata_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Integration metadata
/// </summary>
class  IntegrationMetadata 
{
public:
    IntegrationMetadata() = default;
    explicit IntegrationMetadata(boost::property_tree::ptree const& pt);
    virtual ~IntegrationMetadata() = default;

    IntegrationMetadata(const IntegrationMetadata& other) = default; // copy constructor
    IntegrationMetadata(IntegrationMetadata&& other) noexcept = default; // move constructor

    IntegrationMetadata& operator=(const IntegrationMetadata& other) = default; // copy assignment
    IntegrationMetadata& operator=(IntegrationMetadata&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// IntegrationMetadata members

    /// <summary>
    /// 
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getExternalBusinessId() const;
    void setExternalBusinessId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getConnectedMerchantId() const;
    void setConnectedMerchantId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getConnectedUserId() const;
    void setConnectedUserId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getConnectedAdvertiserId() const;
    void setConnectedAdvertiserId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getConnectedLbaId() const;
    void setConnectedLbaId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getConnectedTagId() const;
    void setConnectedTagId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    double getPartnerAccessTokenExpiry() const;
    void setPartnerAccessTokenExpiry(double value);

    /// <summary>
    /// 
    /// </summary>
    double getPartnerRefreshTokenExpiry() const;
    void setPartnerRefreshTokenExpiry(double value);

    /// <summary>
    /// 
    /// </summary>
    std::string getScopes() const;
    void setScopes(std::string value);

    /// <summary>
    /// 
    /// </summary>
    double getCreatedTimestamp() const;
    void setCreatedTimestamp(double value);

    /// <summary>
    /// 
    /// </summary>
    double getUpdatedTimestamp() const;
    void setUpdatedTimestamp(double value);

    /// <summary>
    /// 
    /// </summary>
    std::string getAdditionalId1() const;
    void setAdditionalId1(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getPartnerMetadata() const;
    void setPartnerMetadata(std::string value);

protected:
    std::string m_Id = "";
    std::string m_External_business_id = "";
    std::string m_Connected_merchant_id = "";
    std::string m_Connected_user_id = "";
    std::string m_Connected_advertiser_id = "";
    std::string m_Connected_lba_id = "";
    std::string m_Connected_tag_id = "";
    double m_Partner_access_token_expiry = 0.0;
    double m_Partner_refresh_token_expiry = 0.0;
    std::string m_Scopes = "";
    double m_Created_timestamp = 0.0;
    double m_Updated_timestamp = 0.0;
    std::string m_Additional_id_1 = "";
    std::string m_Partner_metadata = "";
};

std::vector<IntegrationMetadata> createIntegrationMetadataVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<IntegrationMetadata>(const IntegrationMetadata& val) {
    return val.toPropertyTree();
}

template<>
inline IntegrationMetadata fromPt<IntegrationMetadata>(const boost::property_tree::ptree& pt) {
    IntegrationMetadata ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* IntegrationMetadata_H_ */
