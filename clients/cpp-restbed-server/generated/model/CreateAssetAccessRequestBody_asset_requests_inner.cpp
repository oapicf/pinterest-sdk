/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CreateAssetAccessRequestBody_asset_requests_inner.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CreateAssetAccessRequestBody_asset_requests_inner::CreateAssetAccessRequestBody_asset_requests_inner(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string CreateAssetAccessRequestBody_asset_requests_inner::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void CreateAssetAccessRequestBody_asset_requests_inner::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CreateAssetAccessRequestBody_asset_requests_inner::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("partner_id", m_Partner_id);
	// generate tree for Asset_id_to_permissions
    if (!m_Asset_id_to_permissions.empty()) {
        tmp_node = toPt(m_Asset_id_to_permissions);
        pt.add_child("asset_id_to_permissions", tmp_node);
    }
    tmp_node.clear();
	return pt;
}

void CreateAssetAccessRequestBody_asset_requests_inner::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Partner_id = pt.get("partner_id", "");
    if (pt.get_child_optional("asset_id_to_permissions")) {
        m_Asset_id_to_permissions = fromPt<std::map<std::string, std::vector<Permissions>>>(pt.get_child("asset_id_to_permissions"));
    }
}

std::string CreateAssetAccessRequestBody_asset_requests_inner::getPartnerId() const
{
    return m_Partner_id;
}

void CreateAssetAccessRequestBody_asset_requests_inner::setPartnerId(std::string value)
{
    m_Partner_id = value;
}


std::map<std::string, std::vector<Permissions>> CreateAssetAccessRequestBody_asset_requests_inner::getAssetIdToPermissions() const
{
    return m_Asset_id_to_permissions;
}

void CreateAssetAccessRequestBody_asset_requests_inner::setAssetIdToPermissions(std::map<std::string, std::vector<Permissions>> value)
{
    m_Asset_id_to_permissions = value;
}



std::vector<CreateAssetAccessRequestBody_asset_requests_inner> createCreateAssetAccessRequestBody_asset_requests_innerVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CreateAssetAccessRequestBody_asset_requests_inner>();
    for (const auto& child: pt) {
        vec.emplace_back(CreateAssetAccessRequestBody_asset_requests_inner(child.second));
    }

    return vec;
}

}
}
}
}

