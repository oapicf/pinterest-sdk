/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ConversionEventsUserData_anyOf.h
 *
 * 
 */

#ifndef ConversionEventsUserData_anyOf_H_
#define ConversionEventsUserData_anyOf_H_



#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ConversionEventsUserData_anyOf 
{
public:
    ConversionEventsUserData_anyOf() = default;
    explicit ConversionEventsUserData_anyOf(boost::property_tree::ptree const& pt);
    virtual ~ConversionEventsUserData_anyOf() = default;

    ConversionEventsUserData_anyOf(const ConversionEventsUserData_anyOf& other) = default; // copy constructor
    ConversionEventsUserData_anyOf(ConversionEventsUserData_anyOf&& other) noexcept = default; // move constructor

    ConversionEventsUserData_anyOf& operator=(const ConversionEventsUserData_anyOf& other) = default; // copy assignment
    ConversionEventsUserData_anyOf& operator=(ConversionEventsUserData_anyOf&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ConversionEventsUserData_anyOf members

    /// <summary>
    /// Sha256 hashes of lowercase version of user&#39;s email addresses. Used for matching. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
    /// </summary>
    std::vector<std::string> getEm() const;
    void setEm(std::vector<std::string> value);

    /// <summary>
    /// Sha256 hashes of user&#39;s \&quot;Google Advertising IDs\&quot; (GAIDs) or \&quot;Apple&#39;s Identifier for Advertisers\&quot; (IDFAs). Used for matching. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
    /// </summary>
    std::vector<std::string> getHashedMaids() const;
    void setHashedMaids(std::vector<std::string> value);

    /// <summary>
    /// The user&#39;s IP address, which can be either in IPv4 or IPv6 format. Used for matching. We highly recommend this for all events. It may improve reporting performance such as ROAS/CPA.
    /// </summary>
    std::string getClientIpAddress() const;
    void setClientIpAddress(std::string value);

    /// <summary>
    /// The user agent string of the user&#39;s web browser. We highly recommend this for all events. It may improve reporting performance such as ROAS/CPA.
    /// </summary>
    std::string getClientUserAgent() const;
    void setClientUserAgent(std::string value);

protected:
    std::vector<std::string> m_Em;
    std::vector<std::string> m_Hashed_maids;
    std::string m_Client_ip_address = "";
    std::string m_Client_user_agent = "";
};

std::vector<ConversionEventsUserData_anyOf> createConversionEventsUserData_anyOfVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ConversionEventsUserData_anyOf>(const ConversionEventsUserData_anyOf& val) {
    return val.toPropertyTree();
}

template<>
inline ConversionEventsUserData_anyOf fromPt<ConversionEventsUserData_anyOf>(const boost::property_tree::ptree& pt) {
    ConversionEventsUserData_anyOf ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ConversionEventsUserData_anyOf_H_ */
