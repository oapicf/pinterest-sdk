/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsListProductsByFilterRequest.h
 *
 * Request object to list products for a given product group filter.
 */

#ifndef CatalogsListProductsByFilterRequest_H_
#define CatalogsListProductsByFilterRequest_H_



#include "Country.h"
#include "CatalogsCreativeAssetsProductGroupFilters.h"
#include <string>
#include "CatalogsLocale.h"
#include "CatalogsVerticalsListProductsByCatalogBasedFilterRequest.h"
#include "CatalogsListProductsByFeedBasedFilter.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "CatalogsListProductsByFeedBasedFilter.h"
#include "CatalogsVerticalsListProductsByCatalogBasedFilterRequest.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Request object to list products for a given product group filter.
/// </summary>
class  CatalogsListProductsByFilterRequest : public CatalogsListProductsByFeedBasedFilter, public CatalogsVerticalsListProductsByCatalogBasedFilterRequest
{
public:
    CatalogsListProductsByFilterRequest() = default;
    explicit CatalogsListProductsByFilterRequest(boost::property_tree::ptree const& pt);
    virtual ~CatalogsListProductsByFilterRequest() = default;

    CatalogsListProductsByFilterRequest(const CatalogsListProductsByFilterRequest& other) = default; // copy constructor
    CatalogsListProductsByFilterRequest(CatalogsListProductsByFilterRequest&& other) noexcept = default; // move constructor

    CatalogsListProductsByFilterRequest& operator=(const CatalogsListProductsByFilterRequest& other) = default; // copy assignment
    CatalogsListProductsByFilterRequest& operator=(CatalogsListProductsByFilterRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsListProductsByFilterRequest members

    /// <summary>
    /// Catalog Feed id pertaining to the catalog product group filter.
    /// </summary>
    std::string getFeedId() const;
    void setFeedId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsCreativeAssetsProductGroupFilters getFilters() const;
    void setFilters(CatalogsCreativeAssetsProductGroupFilters value);

    /// <summary>
    /// 
    /// </summary>
    std::string getCatalogType() const;
    void setCatalogType(std::string value);

    /// <summary>
    /// Catalog id pertaining to the creative assets product group.
    /// </summary>
    std::string getCatalogId() const;
    void setCatalogId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    Country getCountry() const;
    void setCountry(Country value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsLocale getLocale() const;
    void setLocale(CatalogsLocale value);

protected:
    std::string m_Feed_id = "";
    CatalogsCreativeAssetsProductGroupFilters m_Filters;
    std::string m_Catalog_type = "";
    std::string m_Catalog_id = "";
    Country m_Country = Country{};
    CatalogsLocale m_Locale = CatalogsLocale{};
};

std::vector<CatalogsListProductsByFilterRequest> createCatalogsListProductsByFilterRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsListProductsByFilterRequest>(const CatalogsListProductsByFilterRequest& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsListProductsByFilterRequest fromPt<CatalogsListProductsByFilterRequest>(const boost::property_tree::ptree& pt) {
    CatalogsListProductsByFilterRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsListProductsByFilterRequest_H_ */
