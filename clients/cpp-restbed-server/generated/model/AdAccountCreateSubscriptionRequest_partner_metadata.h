/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdAccountCreateSubscriptionRequest_partner_metadata.h
 *
 * Partner metadata. Only for clients that requires special handling. We recommend to avoid this param.
 */

#ifndef AdAccountCreateSubscriptionRequest_partner_metadata_H_
#define AdAccountCreateSubscriptionRequest_partner_metadata_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Partner metadata. Only for clients that requires special handling. We recommend to avoid this param.
/// </summary>
class  AdAccountCreateSubscriptionRequest_partner_metadata 
{
public:
    AdAccountCreateSubscriptionRequest_partner_metadata() = default;
    explicit AdAccountCreateSubscriptionRequest_partner_metadata(boost::property_tree::ptree const& pt);
    virtual ~AdAccountCreateSubscriptionRequest_partner_metadata() = default;

    AdAccountCreateSubscriptionRequest_partner_metadata(const AdAccountCreateSubscriptionRequest_partner_metadata& other) = default; // copy constructor
    AdAccountCreateSubscriptionRequest_partner_metadata(AdAccountCreateSubscriptionRequest_partner_metadata&& other) noexcept = default; // move constructor

    AdAccountCreateSubscriptionRequest_partner_metadata& operator=(const AdAccountCreateSubscriptionRequest_partner_metadata& other) = default; // copy assignment
    AdAccountCreateSubscriptionRequest_partner_metadata& operator=(AdAccountCreateSubscriptionRequest_partner_metadata&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AdAccountCreateSubscriptionRequest_partner_metadata members

    /// <summary>
    /// Text field value that uniquely identifies a subscriber.
    /// </summary>
    std::string getSubscriberKey() const;
    void setSubscriberKey(std::string value);

protected:
    std::string m_Subscriber_key = "";
};

std::vector<AdAccountCreateSubscriptionRequest_partner_metadata> createAdAccountCreateSubscriptionRequest_partner_metadataVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AdAccountCreateSubscriptionRequest_partner_metadata>(const AdAccountCreateSubscriptionRequest_partner_metadata& val) {
    return val.toPropertyTree();
}

template<>
inline AdAccountCreateSubscriptionRequest_partner_metadata fromPt<AdAccountCreateSubscriptionRequest_partner_metadata>(const boost::property_tree::ptree& pt) {
    AdAccountCreateSubscriptionRequest_partner_metadata ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AdAccountCreateSubscriptionRequest_partner_metadata_H_ */
