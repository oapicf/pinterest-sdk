/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ConversionTagConfigs.h
 *
 * 
 */

#ifndef ConversionTagConfigs_H_
#define ConversionTagConfigs_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ConversionTagConfigs 
{
public:
    ConversionTagConfigs() = default;
    explicit ConversionTagConfigs(boost::property_tree::ptree const& pt);
    virtual ~ConversionTagConfigs() = default;

    ConversionTagConfigs(const ConversionTagConfigs& other) = default; // copy constructor
    ConversionTagConfigs(ConversionTagConfigs&& other) noexcept = default; // move constructor

    ConversionTagConfigs& operator=(const ConversionTagConfigs& other) = default; // copy assignment
    ConversionTagConfigs& operator=(ConversionTagConfigs&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ConversionTagConfigs members

    /// <summary>
    /// Whether Automatic Enhanced Match email is enabled. See &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/enhanced-match\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Enhanced match&lt;/a&gt; for more information.
    /// </summary>
    bool isAemEnabled() const;
    void setAemEnabled(bool value);

    /// <summary>
    /// Metadata ingestion frequency.
    /// </summary>
    double getMdFrequency() const;
    void setMdFrequency(double value);

    /// <summary>
    /// Whether Automatic Enhanced Match name is enabled. See &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/enhanced-match\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Enhanced match&lt;/a&gt; for more information.
    /// </summary>
    bool isAemFnlnEnabled() const;
    void setAemFnlnEnabled(bool value);

    /// <summary>
    /// Whether Automatic Enhanced Match phone is enabled. See &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/enhanced-match\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Enhanced match&lt;/a&gt; for more information.
    /// </summary>
    bool isAemPhEnabled() const;
    void setAemPhEnabled(bool value);

    /// <summary>
    /// Whether Automatic Enhanced Match gender is enabled. See &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/enhanced-match\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Enhanced match&lt;/a&gt; for more information.
    /// </summary>
    bool isAemGeEnabled() const;
    void setAemGeEnabled(bool value);

    /// <summary>
    /// Whether Automatic Enhanced Match birthdate is enabled. See &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/enhanced-match\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Enhanced match&lt;/a&gt; for more information.
    /// </summary>
    bool isAemDbEnabled() const;
    void setAemDbEnabled(bool value);

    /// <summary>
    /// Whether Automatic Enhanced Match location is enabled. See &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/enhanced-match\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Enhanced match&lt;/a&gt; for more information.
    /// </summary>
    bool isAemLocEnabled() const;
    void setAemLocEnabled(bool value);

protected:
    bool m_Aem_enabled = false;
    double m_Md_frequency = 1;
    bool m_Aem_fnln_enabled = false;
    bool m_Aem_ph_enabled = false;
    bool m_Aem_ge_enabled = false;
    bool m_Aem_db_enabled = false;
    bool m_Aem_loc_enabled = false;
};

std::vector<ConversionTagConfigs> createConversionTagConfigsVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ConversionTagConfigs>(const ConversionTagConfigs& val) {
    return val.toPropertyTree();
}

template<>
inline ConversionTagConfigs fromPt<ConversionTagConfigs>(const boost::property_tree::ptree& pt) {
    ConversionTagConfigs ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ConversionTagConfigs_H_ */
