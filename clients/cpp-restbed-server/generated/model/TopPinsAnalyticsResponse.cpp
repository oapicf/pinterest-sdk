/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TopPinsAnalyticsResponse.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

TopPinsAnalyticsResponse::TopPinsAnalyticsResponse(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string TopPinsAnalyticsResponse::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void TopPinsAnalyticsResponse::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree TopPinsAnalyticsResponse::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.add_child("date_availability", m_Date_availability.toPropertyTree());
	// generate tree for Pins
    tmp_node.clear();
	if (!m_Pins.empty()) {
        tmp_node = toPt(m_Pins);
		pt.add_child("pins", tmp_node);
		tmp_node.clear();
	}
	pt.put("sort_by", m_Sort_by);
	return pt;
}

void TopPinsAnalyticsResponse::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	if (pt.get_child_optional("date_availability")) {
        m_Date_availability = fromPt<TopPinsAnalyticsResponse_date_availability>(pt.get_child("date_availability"));
	}
	// push all items of Pins into member
	if (pt.get_child_optional("pins")) {
        m_Pins = fromPt<std::vector<TopPinsAnalyticsResponse_pins_inner>>(pt.get_child("pins"));
	}
	setSortBy(pt.get("sort_by", ""));
}

TopPinsAnalyticsResponse_date_availability TopPinsAnalyticsResponse::getDateAvailability() const
{
    return m_Date_availability;
}

void TopPinsAnalyticsResponse::setDateAvailability(TopPinsAnalyticsResponse_date_availability value)
{
    m_Date_availability = value;
}


std::vector<TopPinsAnalyticsResponse_pins_inner> TopPinsAnalyticsResponse::getPins() const
{
    return m_Pins;
}

void TopPinsAnalyticsResponse::setPins(std::vector<TopPinsAnalyticsResponse_pins_inner> value)
{
    m_Pins = value;
}


std::string TopPinsAnalyticsResponse::getSortBy() const
{
    return m_Sort_by;
}

void TopPinsAnalyticsResponse::setSortBy(std::string value)
{
    static const std::array<std::string, 5> allowedValues = {
        "ENGAGEMENT", "SAVE", "IMPRESSION", "OUTBOUND_CLICK", "PIN_CLICK"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Sort_by = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}



std::vector<TopPinsAnalyticsResponse> createTopPinsAnalyticsResponseVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<TopPinsAnalyticsResponse>();
    for (const auto& child: pt) {
        vec.emplace_back(TopPinsAnalyticsResponse(child.second));
    }

    return vec;
}

}
}
}
}

