/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SSIOAccountAddress.h
 *
 * 
 */

#ifndef SSIOAccountAddress_H_
#define SSIOAccountAddress_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  SSIOAccountAddress 
{
public:
    SSIOAccountAddress() = default;
    explicit SSIOAccountAddress(boost::property_tree::ptree const& pt);
    virtual ~SSIOAccountAddress() = default;

    SSIOAccountAddress(const SSIOAccountAddress& other) = default; // copy constructor
    SSIOAccountAddress(SSIOAccountAddress&& other) noexcept = default; // move constructor

    SSIOAccountAddress& operator=(const SSIOAccountAddress& other) = default; // copy assignment
    SSIOAccountAddress& operator=(SSIOAccountAddress&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// SSIOAccountAddress members

    /// <summary>
    /// Address display
    /// </summary>
    std::string getDisplay() const;
    void setDisplay(std::string value);

    /// <summary>
    /// Purpose for which the address is used, usually Billing or Businness
    /// </summary>
    std::string getPurpose() const;
    void setPurpose(std::string value);

    /// <summary>
    /// Salesforce id for address
    /// </summary>
    std::string getAddressId() const;
    void setAddressId(std::string value);

    /// <summary>
    /// Legal entity for this insertion order
    /// </summary>
    std::string getOrderLegalEntity() const;
    void setOrderLegalEntity(std::string value);

protected:
    std::string m_Display = "";
    std::string m_Purpose = "";
    std::string m_Address_id = "";
    std::string m_Order_legal_entity = "";
};

std::vector<SSIOAccountAddress> createSSIOAccountAddressVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<SSIOAccountAddress>(const SSIOAccountAddress& val) {
    return val.toPropertyTree();
}

template<>
inline SSIOAccountAddress fromPt<SSIOAccountAddress>(const boost::property_tree::ptree& pt) {
    SSIOAccountAddress ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* SSIOAccountAddress_H_ */
