/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreativeAssetsIdFilter.h
 *
 * 
 */

#ifndef CreativeAssetsIdFilter_H_
#define CreativeAssetsIdFilter_H_



#include "CatalogsProductGroupMultipleStringCriteria.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CreativeAssetsIdFilter 
{
public:
    CreativeAssetsIdFilter() = default;
    explicit CreativeAssetsIdFilter(boost::property_tree::ptree const& pt);
    virtual ~CreativeAssetsIdFilter() = default;

    CreativeAssetsIdFilter(const CreativeAssetsIdFilter& other) = default; // copy constructor
    CreativeAssetsIdFilter(CreativeAssetsIdFilter&& other) noexcept = default; // move constructor

    CreativeAssetsIdFilter& operator=(const CreativeAssetsIdFilter& other) = default; // copy assignment
    CreativeAssetsIdFilter& operator=(CreativeAssetsIdFilter&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CreativeAssetsIdFilter members

    /// <summary>
    /// 
    /// </summary>
    CatalogsProductGroupMultipleStringCriteria getCREATIVEASSETSID() const;
    void setCREATIVEASSETSID(CatalogsProductGroupMultipleStringCriteria value);

protected:
    CatalogsProductGroupMultipleStringCriteria m_CREATIVE_ASSETS_ID = CatalogsProductGroupMultipleStringCriteria{};
};

std::vector<CreativeAssetsIdFilter> createCreativeAssetsIdFilterVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CreativeAssetsIdFilter>(const CreativeAssetsIdFilter& val) {
    return val.toPropertyTree();
}

template<>
inline CreativeAssetsIdFilter fromPt<CreativeAssetsIdFilter>(const boost::property_tree::ptree& pt) {
    CreativeAssetsIdFilter ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CreativeAssetsIdFilter_H_ */
