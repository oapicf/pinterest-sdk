/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PinMediaWithImage.h
 *
 * Pin with image.
 */

#ifndef PinMediaWithImage_H_
#define PinMediaWithImage_H_



#include "PinMediaWithImage_allOf_images.h"
#include "PinMedia.h"
#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "PinMedia.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Pin with image.
/// </summary>
class  PinMediaWithImage : public PinMedia
{
public:
    PinMediaWithImage() = default;
    explicit PinMediaWithImage(boost::property_tree::ptree const& pt);
    virtual ~PinMediaWithImage() = default;

    PinMediaWithImage(const PinMediaWithImage& other) = default; // copy constructor
    PinMediaWithImage(PinMediaWithImage&& other) noexcept = default; // move constructor

    PinMediaWithImage& operator=(const PinMediaWithImage& other) = default; // copy assignment
    PinMediaWithImage& operator=(PinMediaWithImage&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// PinMediaWithImage members

    /// <summary>
    /// 
    /// </summary>
    std::string getMediaType() const;
    void setMediaType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    PinMediaWithImage_allOf_images getImages() const;
    void setImages(PinMediaWithImage_allOf_images value);

protected:
    std::string m_Media_type = "";
    PinMediaWithImage_allOf_images m_Images;
};

std::vector<PinMediaWithImage> createPinMediaWithImageVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<PinMediaWithImage>(const PinMediaWithImage& val) {
    return val.toPropertyTree();
}

template<>
inline PinMediaWithImage fromPt<PinMediaWithImage>(const boost::property_tree::ptree& pt) {
    PinMediaWithImage ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* PinMediaWithImage_H_ */
