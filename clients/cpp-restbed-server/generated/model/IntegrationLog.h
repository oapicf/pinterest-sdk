/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * IntegrationLog.h
 *
 * Schema for log sent from an integration application.
 */

#ifndef IntegrationLog_H_
#define IntegrationLog_H_



#include <string>
#include "IntegrationLogClientError.h"
#include "IntegrationLogClientRequest.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Schema for log sent from an integration application.
/// </summary>
class  IntegrationLog 
{
public:
    IntegrationLog() = default;
    explicit IntegrationLog(boost::property_tree::ptree const& pt);
    virtual ~IntegrationLog() = default;

    IntegrationLog(const IntegrationLog& other) = default; // copy constructor
    IntegrationLog(IntegrationLog&& other) noexcept = default; // move constructor

    IntegrationLog& operator=(const IntegrationLog& other) = default; // copy assignment
    IntegrationLog& operator=(IntegrationLog&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// IntegrationLog members

    /// <summary>
    /// Timestamp in milliseconds of when the log was executed at the client.
    /// </summary>
    int32_t getClientTimestamp() const;
    void setClientTimestamp(int32_t value);

    /// <summary>
    /// Log event type
    /// </summary>
    std::string getEventType() const;
    void setEventType(std::string value);

    /// <summary>
    /// Log level type
    /// </summary>
    std::string getLogLevel() const;
    void setLogLevel(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getExternalBusinessId() const;
    void setExternalBusinessId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getAdvertiserId() const;
    void setAdvertiserId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getMerchantId() const;
    void setMerchantId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getTagId() const;
    void setTagId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getFeedProfileId() const;
    void setFeedProfileId(std::string value);

    /// <summary>
    /// Explanation of the event that occured.
    /// </summary>
    std::string getMessage() const;
    void setMessage(std::string value);

    /// <summary>
    /// Version number of the integration application.
    /// </summary>
    std::string getAppVersionNumber() const;
    void setAppVersionNumber(std::string value);

    /// <summary>
    /// Version number of the platform the integration application is running on.
    /// </summary>
    std::string getPlatformVersionNumber() const;
    void setPlatformVersionNumber(std::string value);

    /// <summary>
    /// 
    /// </summary>
    IntegrationLogClientError getError() const;
    void setError(IntegrationLogClientError value);

    /// <summary>
    /// 
    /// </summary>
    IntegrationLogClientRequest getRequest() const;
    void setRequest(IntegrationLogClientRequest value);

protected:
    int32_t m_Client_timestamp = 0;
    std::string m_Event_type = "";
    std::string m_Log_level = "";
    std::string m_External_business_id = "";
    std::string m_Advertiser_id = "";
    std::string m_Merchant_id = "";
    std::string m_Tag_id = "";
    std::string m_Feed_profile_id = "";
    std::string m_Message = "";
    std::string m_App_version_number = "";
    std::string m_Platform_version_number = "";
    IntegrationLogClientError m_Error;
    IntegrationLogClientRequest m_Request;
};

std::vector<IntegrationLog> createIntegrationLogVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<IntegrationLog>(const IntegrationLog& val) {
    return val.toPropertyTree();
}

template<>
inline IntegrationLog fromPt<IntegrationLog>(const boost::property_tree::ptree& pt) {
    IntegrationLog ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* IntegrationLog_H_ */
