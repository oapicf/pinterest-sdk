/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * KeywordUpdateBody.h
 *
 * 
 */

#ifndef KeywordUpdateBody_H_
#define KeywordUpdateBody_H_



#include "KeywordUpdate.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  KeywordUpdateBody 
{
public:
    KeywordUpdateBody() = default;
    explicit KeywordUpdateBody(boost::property_tree::ptree const& pt);
    virtual ~KeywordUpdateBody() = default;

    KeywordUpdateBody(const KeywordUpdateBody& other) = default; // copy constructor
    KeywordUpdateBody(KeywordUpdateBody&& other) noexcept = default; // move constructor

    KeywordUpdateBody& operator=(const KeywordUpdateBody& other) = default; // copy assignment
    KeywordUpdateBody& operator=(KeywordUpdateBody&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// KeywordUpdateBody members

    /// <summary>
    /// Keywords to update. Object array. Each object has 2 possible fields:&lt;br&gt;1. \&quot;id\&quot;: (required) keyword ID&lt;br&gt;2. \&quot;archived\&quot;: boolean. Should keyword be archived?&lt;br&gt;For example: [{\&quot;id\&quot;:\&quot;2886610576653\&quot;, \&quot;archived\&quot;: false}, {\&quot;id\&quot;:\&quot;2886610576654\&quot;,  \&quot;archived\&quot;: true}, ...]
    /// </summary>
    std::vector<KeywordUpdate> getKeywords() const;
    void setKeywords(std::vector<KeywordUpdate> value);

protected:
    std::vector<KeywordUpdate> m_Keywords;
};

std::vector<KeywordUpdateBody> createKeywordUpdateBodyVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<KeywordUpdateBody>(const KeywordUpdateBody& val) {
    return val.toPropertyTree();
}

template<>
inline KeywordUpdateBody fromPt<KeywordUpdateBody>(const boost::property_tree::ptree& pt) {
    KeywordUpdateBody ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* KeywordUpdateBody_H_ */
