/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsProductGroupPricingCriteria.h
 *
 * 
 */

#ifndef CatalogsProductGroupPricingCriteria_H_
#define CatalogsProductGroupPricingCriteria_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CatalogsProductGroupPricingCriteria 
{
public:
    CatalogsProductGroupPricingCriteria() = default;
    explicit CatalogsProductGroupPricingCriteria(boost::property_tree::ptree const& pt);
    virtual ~CatalogsProductGroupPricingCriteria() = default;

    CatalogsProductGroupPricingCriteria(const CatalogsProductGroupPricingCriteria& other) = default; // copy constructor
    CatalogsProductGroupPricingCriteria(CatalogsProductGroupPricingCriteria&& other) noexcept = default; // move constructor

    CatalogsProductGroupPricingCriteria& operator=(const CatalogsProductGroupPricingCriteria& other) = default; // copy assignment
    CatalogsProductGroupPricingCriteria& operator=(CatalogsProductGroupPricingCriteria&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsProductGroupPricingCriteria members

    /// <summary>
    /// 
    /// </summary>
    bool isInclusion() const;
    void setInclusion(bool value);

    /// <summary>
    /// 
    /// </summary>
    double getValues() const;
    void setValues(double value);

    /// <summary>
    /// 
    /// </summary>
    bool isNegated() const;
    void setNegated(bool value);

protected:
    bool m_Inclusion = true;
    double m_Values = 0.0;
    bool m_Negated = false;
};

std::vector<CatalogsProductGroupPricingCriteria> createCatalogsProductGroupPricingCriteriaVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsProductGroupPricingCriteria>(const CatalogsProductGroupPricingCriteria& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsProductGroupPricingCriteria fromPt<CatalogsProductGroupPricingCriteria>(const boost::property_tree::ptree& pt) {
    CatalogsProductGroupPricingCriteria ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsProductGroupPricingCriteria_H_ */
