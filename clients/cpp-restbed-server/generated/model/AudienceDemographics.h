/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AudienceDemographics.h
 *
 * Audience demographics
 */

#ifndef AudienceDemographics_H_
#define AudienceDemographics_H_



#include "AudienceDemographicValue.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Audience demographics
/// </summary>
class  AudienceDemographics 
{
public:
    AudienceDemographics() = default;
    explicit AudienceDemographics(boost::property_tree::ptree const& pt);
    virtual ~AudienceDemographics() = default;

    AudienceDemographics(const AudienceDemographics& other) = default; // copy constructor
    AudienceDemographics(AudienceDemographics&& other) noexcept = default; // move constructor

    AudienceDemographics& operator=(const AudienceDemographics& other) = default; // copy assignment
    AudienceDemographics& operator=(AudienceDemographics&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AudienceDemographics members

    /// <summary>
    /// Ages distribution.
    /// </summary>
    std::vector<AudienceDemographicValue> getAges() const;
    void setAges(std::vector<AudienceDemographicValue> value);

    /// <summary>
    /// Gender distribution.
    /// </summary>
    std::vector<AudienceDemographicValue> getGenders() const;
    void setGenders(std::vector<AudienceDemographicValue> value);

    /// <summary>
    /// Device usage distribution.
    /// </summary>
    std::vector<AudienceDemographicValue> getDevices() const;
    void setDevices(std::vector<AudienceDemographicValue> value);

    /// <summary>
    /// Geographic metro area distribution.
    /// </summary>
    std::vector<AudienceDemographicValue> getMetros() const;
    void setMetros(std::vector<AudienceDemographicValue> value);

    /// <summary>
    /// Country area distribution.
    /// </summary>
    std::vector<AudienceDemographicValue> getCountries() const;
    void setCountries(std::vector<AudienceDemographicValue> value);

protected:
    std::vector<AudienceDemographicValue> m_Ages;
    std::vector<AudienceDemographicValue> m_Genders;
    std::vector<AudienceDemographicValue> m_Devices;
    std::vector<AudienceDemographicValue> m_Metros;
    std::vector<AudienceDemographicValue> m_Countries;
};

std::vector<AudienceDemographics> createAudienceDemographicsVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AudienceDemographics>(const AudienceDemographics& val) {
    return val.toPropertyTree();
}

template<>
inline AudienceDemographics fromPt<AudienceDemographics>(const boost::property_tree::ptree& pt) {
    AudienceDemographics ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AudienceDemographics_H_ */
