/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * InviteType.h
 *
 * The type of invite. &lt;br&gt;&#39;MEMBER_INVITE&#39; is to invite a member to access your business assets. &lt;br&gt;&#39;PARTNER INVITE&#39; is to invite a partner to access your business assets. &lt;br&gt;&#39;PARTNER_REQUEST&#39; is to request access a partner&#39;s business assets.
 */

#ifndef InviteType_H_
#define InviteType_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// The type of invite. &lt;br&gt;&#39;MEMBER_INVITE&#39; is to invite a member to access your business assets. &lt;br&gt;&#39;PARTNER INVITE&#39; is to invite a partner to access your business assets. &lt;br&gt;&#39;PARTNER_REQUEST&#39; is to request access a partner&#39;s business assets.
/// </summary>
class  InviteType 
{
public:
    InviteType() = default;
    explicit InviteType(boost::property_tree::ptree const& pt);
    virtual ~InviteType() = default;

    InviteType(const InviteType& other) = default; // copy constructor
    InviteType(InviteType&& other) noexcept = default; // move constructor

    InviteType& operator=(const InviteType& other) = default; // copy assignment
    InviteType& operator=(InviteType&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    std::string toString() const;
    void fromString(const std::string& str);

    /////////////////////////////////////////////
    /// InviteType members
    std::string getEnumValue() const;
    void setEnumValue(const std::string& val);

protected:
    std::string m_InviteTypeEnumValue;
};

std::vector<InviteType> createInviteTypeVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<InviteType>(const InviteType& val) {
    return val.toPropertyTree();
}

template<>
inline InviteType fromPt<InviteType>(const boost::property_tree::ptree& pt) {
    InviteType ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* InviteType_H_ */
