/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsItemsRequest.h
 *
 * Request object of catalogs items
 */

#ifndef CatalogsItemsRequest_H_
#define CatalogsItemsRequest_H_



#include "Country.h"
#include "CatalogsItemsRequest_language.h"
#include "CatalogsItemsPostFilters.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Request object of catalogs items
/// </summary>
class  CatalogsItemsRequest 
{
public:
    CatalogsItemsRequest() = default;
    explicit CatalogsItemsRequest(boost::property_tree::ptree const& pt);
    virtual ~CatalogsItemsRequest() = default;

    CatalogsItemsRequest(const CatalogsItemsRequest& other) = default; // copy constructor
    CatalogsItemsRequest(CatalogsItemsRequest&& other) noexcept = default; // move constructor

    CatalogsItemsRequest& operator=(const CatalogsItemsRequest& other) = default; // copy assignment
    CatalogsItemsRequest& operator=(CatalogsItemsRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsItemsRequest members

    /// <summary>
    /// 
    /// </summary>
    Country getCountry() const;
    void setCountry(Country value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsItemsRequest_language getLanguage() const;
    void setLanguage(CatalogsItemsRequest_language value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsItemsPostFilters getFilters() const;
    void setFilters(CatalogsItemsPostFilters value);

protected:
    Country m_Country = Country{};
    CatalogsItemsRequest_language m_Language;
    CatalogsItemsPostFilters m_Filters;
};

std::vector<CatalogsItemsRequest> createCatalogsItemsRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsItemsRequest>(const CatalogsItemsRequest& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsItemsRequest fromPt<CatalogsItemsRequest>(const boost::property_tree::ptree& pt) {
    CatalogsItemsRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsItemsRequest_H_ */
