/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "IntegrationRequestPatch.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

IntegrationRequestPatch::IntegrationRequestPatch(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string IntegrationRequestPatch::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void IntegrationRequestPatch::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree IntegrationRequestPatch::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("connected_merchant_id", m_Connected_merchant_id);
	pt.put("connected_advertiser_id", m_Connected_advertiser_id);
	pt.put("connected_lba_id", m_Connected_lba_id);
	pt.put("connected_tag_id", m_Connected_tag_id);
	pt.put("partner_access_token", m_Partner_access_token);
	pt.put("partner_refresh_token", m_Partner_refresh_token);
	pt.put("partner_primary_email", m_Partner_primary_email);
	pt.put("partner_access_token_expiry", m_Partner_access_token_expiry);
	pt.put("partner_refresh_token_expiry", m_Partner_refresh_token_expiry);
	pt.put("scopes", m_Scopes);
	pt.put("additional_id_1", m_Additional_id_1);
	pt.put("partner_metadata", m_Partner_metadata);
	return pt;
}

void IntegrationRequestPatch::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Connected_merchant_id = pt.get("connected_merchant_id", "");
	m_Connected_advertiser_id = pt.get("connected_advertiser_id", "");
	m_Connected_lba_id = pt.get("connected_lba_id", "");
	m_Connected_tag_id = pt.get("connected_tag_id", "");
	m_Partner_access_token = pt.get("partner_access_token", "");
	m_Partner_refresh_token = pt.get("partner_refresh_token", "");
	m_Partner_primary_email = pt.get("partner_primary_email", "");
	m_Partner_access_token_expiry = pt.get("partner_access_token_expiry", 0.0);
	m_Partner_refresh_token_expiry = pt.get("partner_refresh_token_expiry", 0.0);
	m_Scopes = pt.get("scopes", "");
	m_Additional_id_1 = pt.get("additional_id_1", "");
	m_Partner_metadata = pt.get("partner_metadata", "");
}

std::string IntegrationRequestPatch::getConnectedMerchantId() const
{
    return m_Connected_merchant_id;
}

void IntegrationRequestPatch::setConnectedMerchantId(std::string value)
{
    m_Connected_merchant_id = value;
}


std::string IntegrationRequestPatch::getConnectedAdvertiserId() const
{
    return m_Connected_advertiser_id;
}

void IntegrationRequestPatch::setConnectedAdvertiserId(std::string value)
{
    m_Connected_advertiser_id = value;
}


std::string IntegrationRequestPatch::getConnectedLbaId() const
{
    return m_Connected_lba_id;
}

void IntegrationRequestPatch::setConnectedLbaId(std::string value)
{
    m_Connected_lba_id = value;
}


std::string IntegrationRequestPatch::getConnectedTagId() const
{
    return m_Connected_tag_id;
}

void IntegrationRequestPatch::setConnectedTagId(std::string value)
{
    m_Connected_tag_id = value;
}


std::string IntegrationRequestPatch::getPartnerAccessToken() const
{
    return m_Partner_access_token;
}

void IntegrationRequestPatch::setPartnerAccessToken(std::string value)
{
    m_Partner_access_token = value;
}


std::string IntegrationRequestPatch::getPartnerRefreshToken() const
{
    return m_Partner_refresh_token;
}

void IntegrationRequestPatch::setPartnerRefreshToken(std::string value)
{
    m_Partner_refresh_token = value;
}


std::string IntegrationRequestPatch::getPartnerPrimaryEmail() const
{
    return m_Partner_primary_email;
}

void IntegrationRequestPatch::setPartnerPrimaryEmail(std::string value)
{
    m_Partner_primary_email = value;
}


double IntegrationRequestPatch::getPartnerAccessTokenExpiry() const
{
    return m_Partner_access_token_expiry;
}

void IntegrationRequestPatch::setPartnerAccessTokenExpiry(double value)
{
    m_Partner_access_token_expiry = value;
}


double IntegrationRequestPatch::getPartnerRefreshTokenExpiry() const
{
    return m_Partner_refresh_token_expiry;
}

void IntegrationRequestPatch::setPartnerRefreshTokenExpiry(double value)
{
    m_Partner_refresh_token_expiry = value;
}


std::string IntegrationRequestPatch::getScopes() const
{
    return m_Scopes;
}

void IntegrationRequestPatch::setScopes(std::string value)
{
    m_Scopes = value;
}


std::string IntegrationRequestPatch::getAdditionalId1() const
{
    return m_Additional_id_1;
}

void IntegrationRequestPatch::setAdditionalId1(std::string value)
{
    m_Additional_id_1 = value;
}


std::string IntegrationRequestPatch::getPartnerMetadata() const
{
    return m_Partner_metadata;
}

void IntegrationRequestPatch::setPartnerMetadata(std::string value)
{
    m_Partner_metadata = value;
}



std::vector<IntegrationRequestPatch> createIntegrationRequestPatchVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<IntegrationRequestPatch>();
    for (const auto& child: pt) {
        vec.emplace_back(IntegrationRequestPatch(child.second));
    }

    return vec;
}

}
}
}
}

