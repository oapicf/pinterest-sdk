/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsHotelProductGroupFilterKeys.h
 *
 * 
 */

#ifndef CatalogsHotelProductGroupFilterKeys_H_
#define CatalogsHotelProductGroupFilterKeys_H_



#include "CustomLabel4Filter.h"
#include "HotelIdFilter.h"
#include "BrandFilter.h"
#include "CustomLabel1Filter.h"
#include "CustomLabel3Filter.h"
#include "PriceFilter.h"
#include "CatalogsProductGroupMultipleCountriesCriteria.h"
#include "CatalogsProductGroupMultipleStringCriteria.h"
#include "Catalogs_product_group_pricing_currency_criteria.h"
#include "CustomLabel0Filter.h"
#include "CountryFilter.h"
#include "CustomLabel2Filter.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "PriceFilter.h"
#include "HotelIdFilter.h"
#include "BrandFilter.h"
#include "CustomLabel0Filter.h"
#include "CustomLabel1Filter.h"
#include "CustomLabel2Filter.h"
#include "CustomLabel3Filter.h"
#include "CustomLabel4Filter.h"
#include "CountryFilter.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CatalogsHotelProductGroupFilterKeys : public PriceFilter, public HotelIdFilter, public BrandFilter, public CustomLabel0Filter, public CustomLabel1Filter, public CustomLabel2Filter, public CustomLabel3Filter, public CustomLabel4Filter, public CountryFilter
{
public:
    CatalogsHotelProductGroupFilterKeys() = default;
    explicit CatalogsHotelProductGroupFilterKeys(boost::property_tree::ptree const& pt);
    virtual ~CatalogsHotelProductGroupFilterKeys() = default;

    CatalogsHotelProductGroupFilterKeys(const CatalogsHotelProductGroupFilterKeys& other) = default; // copy constructor
    CatalogsHotelProductGroupFilterKeys(CatalogsHotelProductGroupFilterKeys&& other) noexcept = default; // move constructor

    CatalogsHotelProductGroupFilterKeys& operator=(const CatalogsHotelProductGroupFilterKeys& other) = default; // copy assignment
    CatalogsHotelProductGroupFilterKeys& operator=(CatalogsHotelProductGroupFilterKeys&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsHotelProductGroupFilterKeys members

    /// <summary>
    /// 
    /// </summary>
    Catalogs_product_group_pricing_currency_criteria getPRICE() const;
    void setPRICE(Catalogs_product_group_pricing_currency_criteria value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsProductGroupMultipleStringCriteria getHOTELID() const;
    void setHOTELID(CatalogsProductGroupMultipleStringCriteria value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsProductGroupMultipleStringCriteria getBRAND() const;
    void setBRAND(CatalogsProductGroupMultipleStringCriteria value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsProductGroupMultipleStringCriteria getCUSTOMLABEL0() const;
    void setCUSTOMLABEL0(CatalogsProductGroupMultipleStringCriteria value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsProductGroupMultipleStringCriteria getCUSTOMLABEL1() const;
    void setCUSTOMLABEL1(CatalogsProductGroupMultipleStringCriteria value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsProductGroupMultipleStringCriteria getCUSTOMLABEL2() const;
    void setCUSTOMLABEL2(CatalogsProductGroupMultipleStringCriteria value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsProductGroupMultipleStringCriteria getCUSTOMLABEL3() const;
    void setCUSTOMLABEL3(CatalogsProductGroupMultipleStringCriteria value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsProductGroupMultipleStringCriteria getCUSTOMLABEL4() const;
    void setCUSTOMLABEL4(CatalogsProductGroupMultipleStringCriteria value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsProductGroupMultipleCountriesCriteria getCOUNTRY() const;
    void setCOUNTRY(CatalogsProductGroupMultipleCountriesCriteria value);

protected:
    Catalogs_product_group_pricing_currency_criteria m_PRICE;
    CatalogsProductGroupMultipleStringCriteria m_HOTEL_ID = CatalogsProductGroupMultipleStringCriteria{};
    CatalogsProductGroupMultipleStringCriteria m_BRAND = CatalogsProductGroupMultipleStringCriteria{};
    CatalogsProductGroupMultipleStringCriteria m_CUSTOM_LABEL_0 = CatalogsProductGroupMultipleStringCriteria{};
    CatalogsProductGroupMultipleStringCriteria m_CUSTOM_LABEL_1 = CatalogsProductGroupMultipleStringCriteria{};
    CatalogsProductGroupMultipleStringCriteria m_CUSTOM_LABEL_2 = CatalogsProductGroupMultipleStringCriteria{};
    CatalogsProductGroupMultipleStringCriteria m_CUSTOM_LABEL_3 = CatalogsProductGroupMultipleStringCriteria{};
    CatalogsProductGroupMultipleStringCriteria m_CUSTOM_LABEL_4 = CatalogsProductGroupMultipleStringCriteria{};
    CatalogsProductGroupMultipleCountriesCriteria m_COUNTRY = CatalogsProductGroupMultipleCountriesCriteria{};
};

std::vector<CatalogsHotelProductGroupFilterKeys> createCatalogsHotelProductGroupFilterKeysVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsHotelProductGroupFilterKeys>(const CatalogsHotelProductGroupFilterKeys& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsHotelProductGroupFilterKeys fromPt<CatalogsHotelProductGroupFilterKeys>(const boost::property_tree::ptree& pt) {
    CatalogsHotelProductGroupFilterKeys ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsHotelProductGroupFilterKeys_H_ */
