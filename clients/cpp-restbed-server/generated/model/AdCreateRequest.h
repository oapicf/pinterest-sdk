/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdCreateRequest.h
 *
 * 
 */

#ifndef AdCreateRequest_H_
#define AdCreateRequest_H_



#include "CreativeType.h"
#include "EntityStatus.h"
#include <string>
#include "GridClickType.h"
#include "QuizPinData.h"
#include "TrackingUrls.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "AdCommon.h"
#include "AdPinId.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  AdCreateRequest : public AdCommon, public AdPinId
{
public:
    AdCreateRequest() = default;
    explicit AdCreateRequest(boost::property_tree::ptree const& pt);
    virtual ~AdCreateRequest() = default;

    AdCreateRequest(const AdCreateRequest& other) = default; // copy constructor
    AdCreateRequest(AdCreateRequest&& other) noexcept = default; // move constructor

    AdCreateRequest& operator=(const AdCreateRequest& other) = default; // copy assignment
    AdCreateRequest& operator=(AdCreateRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AdCreateRequest members

    /// <summary>
    /// ID of the ad group that contains the ad.
    /// </summary>
    std::string getAdGroupId() const;
    void setAdGroupId(std::string value);

    /// <summary>
    /// Deep link URL for Android devices.
    /// </summary>
    std::string getAndroidDeepLink() const;
    void setAndroidDeepLink(std::string value);

    /// <summary>
    /// Comma-separated deep links for the carousel pin on Android.
    /// </summary>
    std::vector<std::string> getCarouselAndroidDeepLinks() const;
    void setCarouselAndroidDeepLinks(std::vector<std::string> value);

    /// <summary>
    /// Comma-separated destination URLs for the carousel pin to promote.
    /// </summary>
    std::vector<std::string> getCarouselDestinationUrls() const;
    void setCarouselDestinationUrls(std::vector<std::string> value);

    /// <summary>
    /// Comma-separated deep links for the carousel pin on iOS.
    /// </summary>
    std::vector<std::string> getCarouselIosDeepLinks() const;
    void setCarouselIosDeepLinks(std::vector<std::string> value);

    /// <summary>
    /// Tracking url for the ad clicks.
    /// </summary>
    std::string getClickTrackingUrl() const;
    void setClickTrackingUrl(std::string value);

    /// <summary>
    /// 
    /// </summary>
    CreativeType getCreativeType() const;
    void setCreativeType(CreativeType value);

    /// <summary>
    /// Destination URL.
    /// </summary>
    std::string getDestinationUrl() const;
    void setDestinationUrl(std::string value);

    /// <summary>
    /// Deep link URL for iOS devices.
    /// </summary>
    std::string getIosDeepLink() const;
    void setIosDeepLink(std::string value);

    /// <summary>
    /// Is original pin deleted?
    /// </summary>
    bool isIsPinDeleted() const;
    void setIsPinDeleted(bool value);

    /// <summary>
    /// Is pin repinnable?
    /// </summary>
    bool isIsRemovable() const;
    void setIsRemovable(bool value);

    /// <summary>
    /// Name of the ad - 255 chars max.
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    EntityStatus getStatus() const;
    void setStatus(EntityStatus value);

    /// <summary>
    /// 
    /// </summary>
    TrackingUrls getTrackingUrls() const;
    void setTrackingUrls(TrackingUrls value);

    /// <summary>
    /// Tracking URL for ad impressions.
    /// </summary>
    std::string getViewTrackingUrl() const;
    void setViewTrackingUrl(std::string value);

    /// <summary>
    /// Lead form ID for lead ad generation.
    /// </summary>
    std::string getLeadFormId() const;
    void setLeadFormId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    GridClickType getGridClickType() const;
    void setGridClickType(GridClickType value);

    /// <summary>
    /// Select a call to action (CTA) to display below your ad. Available only for ads with direct links enabled. CTA options for consideration and conversion campaigns are LEARN_MORE, SHOP_NOW, BOOK_NOW, SIGN_UP, VISIT_SITE, BUY_NOW, GET_OFFER, ORDER_NOW, ADD_TO_CART (for conversion campaigns with add to cart conversion events only)
    /// </summary>
    std::string getCustomizableCtaType() const;
    void setCustomizableCtaType(std::string value);

    /// <summary>
    /// Before creating a quiz ad, you must create an organic Pin using POST/Create Pin for each result in the quiz. Quiz ads cannot be saved by a Pinner. Quiz ad results can be saved.
    /// </summary>
    QuizPinData getQuizPinData() const;
    void setQuizPinData(QuizPinData value);

    /// <summary>
    /// Pin ID.
    /// </summary>
    std::string getPinId() const;
    void setPinId(std::string value);

protected:
    std::string m_Ad_group_id = "";
    std::string m_Android_deep_link = "";
    std::vector<std::string> m_Carousel_android_deep_links;
    std::vector<std::string> m_Carousel_destination_urls;
    std::vector<std::string> m_Carousel_ios_deep_links;
    std::string m_Click_tracking_url = "";
    CreativeType m_Creative_type = CreativeType{};
    std::string m_Destination_url = "";
    std::string m_Ios_deep_link = "";
    bool m_Is_pin_deleted = false;
    bool m_Is_removable = false;
    std::string m_Name = "";
    EntityStatus m_Status = EntityStatus{};
    TrackingUrls m_Tracking_urls;
    std::string m_View_tracking_url = "";
    std::string m_Lead_form_id = "";
    GridClickType m_Grid_click_type = GridClickType{};
    std::string m_Customizable_cta_type = "";
    QuizPinData m_Quiz_pin_data;
    std::string m_Pin_id = "";
};

std::vector<AdCreateRequest> createAdCreateRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AdCreateRequest>(const AdCreateRequest& val) {
    return val.toPropertyTree();
}

template<>
inline AdCreateRequest fromPt<AdCreateRequest>(const boost::property_tree::ptree& pt) {
    AdCreateRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AdCreateRequest_H_ */
