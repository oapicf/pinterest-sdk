/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ConversionApiResponse.h
 *
 * Schema describing the object in the response, which contains information about the events that were received and processed.
 */

#ifndef ConversionApiResponse_H_
#define ConversionApiResponse_H_



#include "ConversionApiResponse_events_inner.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Schema describing the object in the response, which contains information about the events that were received and processed.
/// </summary>
class  ConversionApiResponse 
{
public:
    ConversionApiResponse() = default;
    explicit ConversionApiResponse(boost::property_tree::ptree const& pt);
    virtual ~ConversionApiResponse() = default;

    ConversionApiResponse(const ConversionApiResponse& other) = default; // copy constructor
    ConversionApiResponse(ConversionApiResponse&& other) noexcept = default; // move constructor

    ConversionApiResponse& operator=(const ConversionApiResponse& other) = default; // copy assignment
    ConversionApiResponse& operator=(ConversionApiResponse&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ConversionApiResponse members

    /// <summary>
    /// Total number of events received in the request.
    /// </summary>
    int32_t getNumEventsReceived() const;
    void setNumEventsReceived(int32_t value);

    /// <summary>
    /// Number of events that were successfully processed from the events.
    /// </summary>
    int32_t getNumEventsProcessed() const;
    void setNumEventsProcessed(int32_t value);

    /// <summary>
    /// Specific messages for each event received. The order will match the order in which the events were received in the request.
    /// </summary>
    std::vector<ConversionApiResponse_events_inner> getEvents() const;
    void setEvents(std::vector<ConversionApiResponse_events_inner> value);

protected:
    int32_t m_Num_events_received = 0;
    int32_t m_Num_events_processed = 0;
    std::vector<ConversionApiResponse_events_inner> m_Events;
};

std::vector<ConversionApiResponse> createConversionApiResponseVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ConversionApiResponse>(const ConversionApiResponse& val) {
    return val.toPropertyTree();
}

template<>
inline ConversionApiResponse fromPt<ConversionApiResponse>(const boost::property_tree::ptree& pt) {
    ConversionApiResponse ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ConversionApiResponse_H_ */
