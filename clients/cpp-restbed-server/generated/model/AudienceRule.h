/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AudienceRule.h
 *
 * JSON object defining targeted audience users. Example rule formats per audience type:&lt;br&gt;CUSTOMER_LIST: { \&quot;customer_list_id\&quot;: \&quot;&amp;lt;customer list ID&amp;gt;\&quot;}&lt;br&gt;ACTALIKE: { \&quot;seed_id\&quot;: [\&quot;&amp;lt;audience ID&amp;gt;\&quot;], \&quot;country\&quot;: \&quot;US\&quot;, \&quot;percentage\&quot;: \&quot;10\&quot; }&lt;br&gt;(Valid countries include: \&quot;US\&quot;, \&quot;CA\&quot;, and \&quot;GB\&quot;. Percentage should be 1-10.&lt;br&gt;The targeted audience should be this % size across Pinterest.)&lt;br&gt;VISITOR: { \&quot;visitor_source_id\&quot;: [\&quot;&amp;lt;conversion tag ID&amp;gt;\&quot;], \&quot;retention_days\&quot;: \&quot;180\&quot;, \&quot;event_source\&quot;: {\&quot;&#x3D;\&quot;: [\&quot;web\&quot;, \&quot;mobile\&quot;]}, \&quot;ingestion_source\&quot;: {\&quot;&#x3D;\&quot;: [\&quot;tag\&quot;]}}&lt;br&gt;(Retention days should be 1-540. Retention applies to specific customers.)&lt;br&gt;ENGAGEMENT: {\&quot;engagement_domain\&quot;: [\&quot;www.entomi.com\&quot;], \&quot;engager_type\&quot;: 1}&lt;br&gt;For more details on engagement audiences, see &lt;a href&#x3D;\&quot;/docs/redoc/adtech_ads_v4/#section/November-2021\&quot; target&#x3D;\&quot;_blank\&quot;&gt;November 2021 changelog&lt;/a&gt;.
 */

#ifndef AudienceRule_H_
#define AudienceRule_H_



#include "ObjectiveType.h"
#include <string>
#include "PinterestTagEventData.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// JSON object defining targeted audience users. Example rule formats per audience type:&lt;br&gt;CUSTOMER_LIST: { \&quot;customer_list_id\&quot;: \&quot;&amp;lt;customer list ID&amp;gt;\&quot;}&lt;br&gt;ACTALIKE: { \&quot;seed_id\&quot;: [\&quot;&amp;lt;audience ID&amp;gt;\&quot;], \&quot;country\&quot;: \&quot;US\&quot;, \&quot;percentage\&quot;: \&quot;10\&quot; }&lt;br&gt;(Valid countries include: \&quot;US\&quot;, \&quot;CA\&quot;, and \&quot;GB\&quot;. Percentage should be 1-10.&lt;br&gt;The targeted audience should be this % size across Pinterest.)&lt;br&gt;VISITOR: { \&quot;visitor_source_id\&quot;: [\&quot;&amp;lt;conversion tag ID&amp;gt;\&quot;], \&quot;retention_days\&quot;: \&quot;180\&quot;, \&quot;event_source\&quot;: {\&quot;&#x3D;\&quot;: [\&quot;web\&quot;, \&quot;mobile\&quot;]}, \&quot;ingestion_source\&quot;: {\&quot;&#x3D;\&quot;: [\&quot;tag\&quot;]}}&lt;br&gt;(Retention days should be 1-540. Retention applies to specific customers.)&lt;br&gt;ENGAGEMENT: {\&quot;engagement_domain\&quot;: [\&quot;www.entomi.com\&quot;], \&quot;engager_type\&quot;: 1}&lt;br&gt;For more details on engagement audiences, see &lt;a href&#x3D;\&quot;/docs/redoc/adtech_ads_v4/#section/November-2021\&quot; target&#x3D;\&quot;_blank\&quot;&gt;November 2021 changelog&lt;/a&gt;.
/// </summary>
class  AudienceRule 
{
public:
    AudienceRule() = default;
    explicit AudienceRule(boost::property_tree::ptree const& pt);
    virtual ~AudienceRule() = default;

    AudienceRule(const AudienceRule& other) = default; // copy constructor
    AudienceRule(AudienceRule&& other) noexcept = default; // move constructor

    AudienceRule& operator=(const AudienceRule& other) = default; // copy assignment
    AudienceRule& operator=(AudienceRule&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AudienceRule members

    /// <summary>
    /// Valid countries include: \&quot;US\&quot;, \&quot;CA\&quot;, and \&quot;GB\&quot;.
    /// </summary>
    std::string getCountry() const;
    void setCountry(std::string value);

    /// <summary>
    /// Customer list ID. For CUSTOMER_LIST &#x60;audience_type&#x60;.
    /// </summary>
    std::string getCustomerListId() const;
    void setCustomerListId(std::string value);

    /// <summary>
    /// The audience account&#39;s verified domain. **Required** for ENGAGEMENT &#x60;audience_type&#x60;.
    /// </summary>
    std::vector<std::string> getEngagementDomain() const;
    void setEngagementDomain(std::vector<std::string> value);

    /// <summary>
    /// Engagement type enum. Optional for ENGAGEMENT &#x60;audience_type&#x60;. Supported values are &#x60;click&#x60;, &#x60;save&#x60;, &#x60;closeup&#x60;, &#x60;comment&#x60; and &#x60;like&#x60;. All engagements are included if this field is not set. 
    /// </summary>
    std::string getEngagementType() const;
    void setEngagementType(std::string value);

    /// <summary>
    /// A Pinterest tag event. Optional for VISITOR &#x60;audience_type&#x60;. Possible values are &#x60;pagevisit&#x60;, &#x60;signup&#x60;, &#x60;checkout&#x60;, &#x60;viewcategory&#x60;, &#x60;search&#x60;, &#x60;addtocart&#x60;, &#x60;watchvideo&#x60;, &#x60;lead&#x60;, and &#x60;custom&#x60;. This field also accepts a partner-defined Pinterest tag event.
    /// </summary>
    std::string getEvent() const;
    void setEvent(std::string value);

    /// <summary>
    /// 
    /// </summary>
    PinterestTagEventData getEventData() const;
    void setEventData(PinterestTagEventData value);

    /// <summary>
    /// Percentage should be 1-10. The targeted audience should be this % size across Pinterest.
    /// </summary>
    int32_t getPercentage() const;
    void setPercentage(int32_t value);

    /// <summary>
    /// IDs of engaged organic pins. Optional for ENGAGEMENT &#x60;audience_type&#x60;. For example, \&quot;pin_id:\&quot;: [\&quot;34567\&quot;]
    /// </summary>
    std::vector<std::string> getPinId() const;
    void setPinId(std::vector<std::string> value);

    /// <summary>
    /// Optional for VISITOR &#x60;audience_type&#x60;. If &#x60;true&#x60;, the specified rule on existing engagement data is applied to pre-populate the audience. If &#x60;false&#x60;, the audience is empty at creation time. The default is &#x60;true&#x60;.
    /// </summary>
    bool isPrefill() const;
    void setPrefill(bool value);

    /// <summary>
    /// Number of days a Pinterest user remains in the audience. Optional for ENGAGEMENT and VISITOR &#x60;audience_type&#x60;. Accepted range is 1-540. Defaults to 180 if not specified.
    /// </summary>
    int32_t getRetentionDays() const;
    void setRetentionDays(int32_t value);

    /// <summary>
    /// Audience ID(s). For ACTALIKE &#x60;audience_type&#x60;. 
    /// </summary>
    std::vector<std::string> getSeedId() const;
    void setSeedId(std::vector<std::string> value);

    /// <summary>
    /// Optional for ENGAGEMENT or VISITOR &#x60;audience_type&#x60;. For ENGAGEMENT, it is the engaged pin&#39;s URL. For VISITOR, you can use it as a string or a {operator: value} object for filtering visitors based on conversion tag event URLs. Supported operators are [ &#x3D;, !&#x3D;, contains, not_contains].&lt;br&gt;Example 1:  \&quot;url\&quot;: \&quot;http://www.myonlinestore123.com/view_item/shoe\&quot;&lt;br&gt;Example 2: \&quot;url\&quot;: {\&quot;contains\&quot;: \&quot;/view_item/shoe\&quot;}
    /// </summary>
    std::vector<std::string> getUrl() const;
    void setUrl(std::vector<std::string> value);

    /// <summary>
    /// The conversion tag ID, or the Pinterest tag ID, that you use on your website. For VISITOR &#x60;audience_type&#x60;.
    /// </summary>
    std::string getVisitorSourceId() const;
    void setVisitorSourceId(std::string value);

    /// <summary>
    /// Optional for VISITOR. You can use it as a {&#39;&#x3D;&#39;: [value]}. Supported values are: web, mobile, offline
    /// </summary>
    std::string getEventSource() const;
    void setEventSource(std::string value);

    /// <summary>
    /// Optional for VISITOR. You can use it as a {&#39;&#x3D;&#39;: [value]}. Supported values are: tag, mmp, file_upload, conversions_api
    /// </summary>
    std::string getIngestionSource() const;
    void setIngestionSource(std::string value);

    /// <summary>
    /// Optional for ENGAGEMENT. Engager type value should be 1-2.
    /// </summary>
    int32_t getEngagerType() const;
    void setEngagerType(int32_t value);

    /// <summary>
    /// Campaign ID for engagement audience filter.
    /// </summary>
    std::vector<std::string> getCampaignId() const;
    void setCampaignId(std::vector<std::string> value);

    /// <summary>
    /// Ad ID for engagement audience filter.
    /// </summary>
    std::vector<std::string> getAdId() const;
    void setAdId(std::vector<std::string> value);

    /// <summary>
    /// Objective for engagement audience filter.
    /// </summary>
    std::vector<ObjectiveType> getObjectiveType() const;
    void setObjectiveType(std::vector<ObjectiveType> value);

    /// <summary>
    /// Ad account ID.
    /// </summary>
    std::string getAdAccountId() const;
    void setAdAccountId(std::string value);

protected:
    std::string m_Country = "";
    std::string m_Customer_list_id = "";
    std::vector<std::string> m_Engagement_domain;
    std::string m_Engagement_type = "";
    std::string m_Event = "";
    PinterestTagEventData m_Event_data;
    int32_t m_Percentage = 0;
    std::vector<std::string> m_Pin_id;
    bool m_Prefill = false;
    int32_t m_Retention_days = 0;
    std::vector<std::string> m_Seed_id;
    std::vector<std::string> m_Url;
    std::string m_Visitor_source_id = "";
    std::string m_Event_source = std::string{};
    std::string m_Ingestion_source = std::string{};
    int32_t m_Engager_type = 0;
    std::vector<std::string> m_Campaign_id;
    std::vector<std::string> m_Ad_id;
    std::vector<ObjectiveType> m_Objective_type;
    std::string m_Ad_account_id = "";
};

std::vector<AudienceRule> createAudienceRuleVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AudienceRule>(const AudienceRule& val) {
    return val.toPropertyTree();
}

template<>
inline AudienceRule fromPt<AudienceRule>(const boost::property_tree::ptree& pt) {
    AudienceRule ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AudienceRule_H_ */
