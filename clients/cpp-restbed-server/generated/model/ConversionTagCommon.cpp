/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ConversionTagCommon.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ConversionTagCommon::ConversionTagCommon(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string ConversionTagCommon::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void ConversionTagCommon::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree ConversionTagCommon::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("ad_account_id", m_Ad_account_id);
	pt.put("code_snippet", m_Code_snippet);
	pt.put("id", m_Id);
	pt.put("last_fired_time_ms", m_Last_fired_time_ms);
	pt.put("name", m_Name);
	pt.put("version", m_Version);
	pt.add_child("configs", m_Configs.toPropertyTree());
	return pt;
}

void ConversionTagCommon::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Ad_account_id = pt.get("ad_account_id", "");
	m_Code_snippet = pt.get("code_snippet", "");
	m_Id = pt.get("id", "");
	m_Last_fired_time_ms = pt.get("last_fired_time_ms", 0.0);
	m_Name = pt.get("name", "");
	m_Version = pt.get("version", "");
	if (pt.get_child_optional("configs")) {
        m_Configs = fromPt<ConversionTagConfigs>(pt.get_child("configs"));
	}
}

std::string ConversionTagCommon::getAdAccountId() const
{
    return m_Ad_account_id;
}

void ConversionTagCommon::setAdAccountId(std::string value)
{
    m_Ad_account_id = value;
}


std::string ConversionTagCommon::getCodeSnippet() const
{
    return m_Code_snippet;
}

void ConversionTagCommon::setCodeSnippet(std::string value)
{
    m_Code_snippet = value;
}


EnhancedMatchStatusType ConversionTagCommon::getEnhancedMatchStatus() const
{
    return m_Enhanced_match_status;
}

void ConversionTagCommon::setEnhancedMatchStatus(EnhancedMatchStatusType value)
{
    m_Enhanced_match_status = value;
}


std::string ConversionTagCommon::getId() const
{
    return m_Id;
}

void ConversionTagCommon::setId(std::string value)
{
    m_Id = value;
}


double ConversionTagCommon::getLastFiredTimeMs() const
{
    return m_Last_fired_time_ms;
}

void ConversionTagCommon::setLastFiredTimeMs(double value)
{
    m_Last_fired_time_ms = value;
}


std::string ConversionTagCommon::getName() const
{
    return m_Name;
}

void ConversionTagCommon::setName(std::string value)
{
    m_Name = value;
}


EntityStatus ConversionTagCommon::getStatus() const
{
    return m_Status;
}

void ConversionTagCommon::setStatus(EntityStatus value)
{
    m_Status = value;
}


std::string ConversionTagCommon::getVersion() const
{
    return m_Version;
}

void ConversionTagCommon::setVersion(std::string value)
{
    m_Version = value;
}


ConversionTagConfigs ConversionTagCommon::getConfigs() const
{
    return m_Configs;
}

void ConversionTagCommon::setConfigs(ConversionTagConfigs value)
{
    m_Configs = value;
}



std::vector<ConversionTagCommon> createConversionTagCommonVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<ConversionTagCommon>();
    for (const auto& child: pt) {
        vec.emplace_back(ConversionTagCommon(child.second));
    }

    return vec;
}

}
}
}
}

