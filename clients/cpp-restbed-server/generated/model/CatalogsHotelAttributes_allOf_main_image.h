/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsHotelAttributes_allOf_main_image.h
 *
 * The main hotel image
 */

#ifndef CatalogsHotelAttributes_allOf_main_image_H_
#define CatalogsHotelAttributes_allOf_main_image_H_



#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// The main hotel image
/// </summary>
class  CatalogsHotelAttributes_allOf_main_image 
{
public:
    CatalogsHotelAttributes_allOf_main_image() = default;
    explicit CatalogsHotelAttributes_allOf_main_image(boost::property_tree::ptree const& pt);
    virtual ~CatalogsHotelAttributes_allOf_main_image() = default;

    CatalogsHotelAttributes_allOf_main_image(const CatalogsHotelAttributes_allOf_main_image& other) = default; // copy constructor
    CatalogsHotelAttributes_allOf_main_image(CatalogsHotelAttributes_allOf_main_image&& other) noexcept = default; // move constructor

    CatalogsHotelAttributes_allOf_main_image& operator=(const CatalogsHotelAttributes_allOf_main_image& other) = default; // copy assignment
    CatalogsHotelAttributes_allOf_main_image& operator=(CatalogsHotelAttributes_allOf_main_image&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsHotelAttributes_allOf_main_image members

    /// <summary>
    /// &lt;p&gt;&lt;&#x3D; 2000 characters&lt;/p&gt; &lt;p&gt;The link to the main hotel image. Image should be at least 75x75 pixels to avoid errors. Use the additional_image_link field to add more images of your hotel. The URL of your main_image.link must be accessible by the Pinterest user-agent, and send the accurate image. Please make sure there is no template or placeholder image at the link. Must start with http:// or https://.&lt;/p&gt;
    /// </summary>
    std::string getLink() const;
    void setLink(std::string value);

    /// <summary>
    /// Tag appended to the image that identifies image category or details. There can be multiple tags associated with an image
    /// </summary>
    std::vector<std::string> getTag() const;
    void setTag(std::vector<std::string> value);

protected:
    std::string m_Link = "";
    std::vector<std::string> m_Tag;
};

std::vector<CatalogsHotelAttributes_allOf_main_image> createCatalogsHotelAttributes_allOf_main_imageVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsHotelAttributes_allOf_main_image>(const CatalogsHotelAttributes_allOf_main_image& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsHotelAttributes_allOf_main_image fromPt<CatalogsHotelAttributes_allOf_main_image>(const boost::property_tree::ptree& pt) {
    CatalogsHotelAttributes_allOf_main_image ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsHotelAttributes_allOf_main_image_H_ */
