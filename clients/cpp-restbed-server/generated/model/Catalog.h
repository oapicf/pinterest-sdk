/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Catalog.h
 *
 * Catalog entity
 */

#ifndef Catalog_H_
#define Catalog_H_



#include <string>
#include "CatalogsType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "CatalogsDbItem.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Catalog entity
/// </summary>
class  Catalog : public CatalogsDbItem
{
public:
    Catalog() = default;
    explicit Catalog(boost::property_tree::ptree const& pt);
    virtual ~Catalog() = default;

    Catalog(const Catalog& other) = default; // copy constructor
    Catalog(Catalog&& other) noexcept = default; // move constructor

    Catalog& operator=(const Catalog& other) = default; // copy assignment
    Catalog& operator=(Catalog&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// Catalog members

    /// <summary>
    /// 
    /// </summary>
    std::string getCreatedAt() const;
    void setCreatedAt(std::string value);

    /// <summary>
    /// ID of the catalog entity.
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getUpdatedAt() const;
    void setUpdatedAt(std::string value);

    /// <summary>
    /// A human-friendly name associated to a catalog entity.
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsType getCatalogType() const;
    void setCatalogType(CatalogsType value);

protected:
    std::string m_Created_at = "";
    std::string m_Id = "";
    std::string m_Updated_at = "";
    std::string m_Name = "";
    CatalogsType m_Catalog_type = CatalogsType{};
};

std::vector<Catalog> createCatalogVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<Catalog>(const Catalog& val) {
    return val.toPropertyTree();
}

template<>
inline Catalog fromPt<Catalog>(const boost::property_tree::ptree& pt) {
    Catalog ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* Catalog_H_ */
