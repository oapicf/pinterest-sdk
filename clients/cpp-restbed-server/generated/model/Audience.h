/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Audience.h
 *
 * 
 */

#ifndef Audience_H_
#define Audience_H_



#include "AudienceRule.h"
#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  Audience 
{
public:
    Audience() = default;
    explicit Audience(boost::property_tree::ptree const& pt);
    virtual ~Audience() = default;

    Audience(const Audience& other) = default; // copy constructor
    Audience(Audience&& other) noexcept = default; // move constructor

    Audience& operator=(const Audience& other) = default; // copy assignment
    Audience& operator=(Audience&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// Audience members

    /// <summary>
    /// Ad account ID.
    /// </summary>
    std::string getAdAccountId() const;
    void setAdAccountId(std::string value);

    /// <summary>
    /// Audience ID.
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// Audience name.
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// &lt;a href&#x3D;\&quot;/docs/reference/glossary/#Audience Types\&quot;&gt;Audience types&lt;/a&gt;: ACTALIKE, ENGAGEMENT, CUSTOMER_LIST and VISITOR
    /// </summary>
    std::string getAudienceType() const;
    void setAudienceType(std::string value);

    /// <summary>
    /// Audience description.
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string value);

    /// <summary>
    /// 
    /// </summary>
    AudienceRule getRule() const;
    void setRule(AudienceRule value);

    /// <summary>
    /// Audience size.
    /// </summary>
    int32_t getSize() const;
    void setSize(int32_t value);

    /// <summary>
    /// Audience status. READY, INITIALIZING, TOO_SMALL - Each audience list needs to have at least 100 people with Pinterest accounts before you can start using it.
    /// </summary>
    std::string getStatus() const;
    void setStatus(std::string value);

    /// <summary>
    /// Always \&quot;audience\&quot;.
    /// </summary>
    std::string getType() const;
    void setType(std::string value);

    /// <summary>
    /// Creation time. Unix timestamp in seconds.
    /// </summary>
    int32_t getCreatedTimestamp() const;
    void setCreatedTimestamp(int32_t value);

    /// <summary>
    /// Last update time. Unix timestamp in seconds.
    /// </summary>
    int32_t getUpdatedTimestamp() const;
    void setUpdatedTimestamp(int32_t value);

protected:
    std::string m_Ad_account_id = "";
    std::string m_Id = "";
    std::string m_Name = "";
    std::string m_Audience_type = "";
    std::string m_Description = "";
    AudienceRule m_Rule;
    int32_t m_Size = 0;
    std::string m_Status = "";
    std::string m_Type = "";
    int32_t m_Created_timestamp = 0;
    int32_t m_Updated_timestamp = 0;
};

std::vector<Audience> createAudienceVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<Audience>(const Audience& val) {
    return val.toPropertyTree();
}

template<>
inline Audience fromPt<Audience>(const boost::property_tree::ptree& pt) {
    Audience ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* Audience_H_ */
