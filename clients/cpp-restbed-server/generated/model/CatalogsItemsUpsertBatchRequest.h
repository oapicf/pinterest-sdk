/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsItemsUpsertBatchRequest.h
 *
 * Request object to upsert catalogs items
 */

#ifndef CatalogsItemsUpsertBatchRequest_H_
#define CatalogsItemsUpsertBatchRequest_H_



#include "BatchOperation.h"
#include "Country.h"
#include "CatalogsItemsRequest_language.h"
#include "ItemUpsertBatchRecord.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Request object to upsert catalogs items
/// </summary>
class  CatalogsItemsUpsertBatchRequest 
{
public:
    CatalogsItemsUpsertBatchRequest() = default;
    explicit CatalogsItemsUpsertBatchRequest(boost::property_tree::ptree const& pt);
    virtual ~CatalogsItemsUpsertBatchRequest() = default;

    CatalogsItemsUpsertBatchRequest(const CatalogsItemsUpsertBatchRequest& other) = default; // copy constructor
    CatalogsItemsUpsertBatchRequest(CatalogsItemsUpsertBatchRequest&& other) noexcept = default; // move constructor

    CatalogsItemsUpsertBatchRequest& operator=(const CatalogsItemsUpsertBatchRequest& other) = default; // copy assignment
    CatalogsItemsUpsertBatchRequest& operator=(CatalogsItemsUpsertBatchRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsItemsUpsertBatchRequest members

    /// <summary>
    /// 
    /// </summary>
    Country getCountry() const;
    void setCountry(Country value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsItemsRequest_language getLanguage() const;
    void setLanguage(CatalogsItemsRequest_language value);

    /// <summary>
    /// 
    /// </summary>
    BatchOperation getOperation() const;
    void setOperation(BatchOperation value);

    /// <summary>
    /// Array with catalogs items
    /// </summary>
    std::vector<ItemUpsertBatchRecord> getItems() const;
    void setItems(std::vector<ItemUpsertBatchRecord> value);

protected:
    Country m_Country = Country{};
    CatalogsItemsRequest_language m_Language;
    BatchOperation m_Operation = BatchOperation{};
    std::vector<ItemUpsertBatchRecord> m_Items;
};

std::vector<CatalogsItemsUpsertBatchRequest> createCatalogsItemsUpsertBatchRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsItemsUpsertBatchRequest>(const CatalogsItemsUpsertBatchRequest& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsItemsUpsertBatchRequest fromPt<CatalogsItemsUpsertBatchRequest>(const boost::property_tree::ptree& pt) {
    CatalogsItemsUpsertBatchRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsItemsUpsertBatchRequest_H_ */
