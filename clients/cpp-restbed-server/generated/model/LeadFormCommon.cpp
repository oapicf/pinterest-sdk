/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "LeadFormCommon.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

LeadFormCommon::LeadFormCommon(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string LeadFormCommon::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void LeadFormCommon::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree LeadFormCommon::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("name", m_Name);
	pt.put("privacy_policy_link", m_Privacy_policy_link);
	pt.put("has_accepted_terms", m_Has_accepted_terms);
	pt.put("completion_message", m_Completion_message);
	pt.put("disclosure_language", m_Disclosure_language);
	// generate tree for Questions
    tmp_node.clear();
	if (!m_Questions.empty()) {
        tmp_node = toPt(m_Questions);
		pt.add_child("questions", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Policy_links
    tmp_node.clear();
	if (!m_Policy_links.empty()) {
        tmp_node = toPt(m_Policy_links);
		pt.add_child("policy_links", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void LeadFormCommon::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Name = pt.get("name", "");
	m_Privacy_policy_link = pt.get("privacy_policy_link", "");
	m_Has_accepted_terms = pt.get("has_accepted_terms", false);
	m_Completion_message = pt.get("completion_message", "");
	m_Disclosure_language = pt.get("disclosure_language", "");
	// push all items of Questions into member
	if (pt.get_child_optional("questions")) {
        m_Questions = fromPt<std::vector<LeadFormQuestion>>(pt.get_child("questions"));
	}
	// push all items of Policy_links into member
	if (pt.get_child_optional("policy_links")) {
        m_Policy_links = fromPt<std::vector<LeadFormCommon_policy_links_inner>>(pt.get_child("policy_links"));
	}
}

std::string LeadFormCommon::getName() const
{
    return m_Name;
}

void LeadFormCommon::setName(std::string value)
{
    m_Name = value;
}


std::string LeadFormCommon::getPrivacyPolicyLink() const
{
    return m_Privacy_policy_link;
}

void LeadFormCommon::setPrivacyPolicyLink(std::string value)
{
    m_Privacy_policy_link = value;
}


bool LeadFormCommon::isHasAcceptedTerms() const
{
    return m_Has_accepted_terms;
}

void LeadFormCommon::setHasAcceptedTerms(bool value)
{
    m_Has_accepted_terms = value;
}


std::string LeadFormCommon::getCompletionMessage() const
{
    return m_Completion_message;
}

void LeadFormCommon::setCompletionMessage(std::string value)
{
    m_Completion_message = value;
}


LeadFormStatus LeadFormCommon::getStatus() const
{
    return m_Status;
}

void LeadFormCommon::setStatus(LeadFormStatus value)
{
    m_Status = value;
}


std::string LeadFormCommon::getDisclosureLanguage() const
{
    return m_Disclosure_language;
}

void LeadFormCommon::setDisclosureLanguage(std::string value)
{
    m_Disclosure_language = value;
}


std::vector<LeadFormQuestion> LeadFormCommon::getQuestions() const
{
    return m_Questions;
}

void LeadFormCommon::setQuestions(std::vector<LeadFormQuestion> value)
{
    m_Questions = value;
}


std::vector<LeadFormCommon_policy_links_inner> LeadFormCommon::getPolicyLinks() const
{
    return m_Policy_links;
}

void LeadFormCommon::setPolicyLinks(std::vector<LeadFormCommon_policy_links_inner> value)
{
    m_Policy_links = value;
}



std::vector<LeadFormCommon> createLeadFormCommonVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<LeadFormCommon>();
    for (const auto& child: pt) {
        vec.emplace_back(LeadFormCommon(child.second));
    }

    return vec;
}

}
}
}
}

