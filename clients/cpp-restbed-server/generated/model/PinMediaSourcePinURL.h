/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PinMediaSourcePinURL.h
 *
 * Pin URL-based media source for product pin creation. Currently the field is only available to a list of beta users.
 */

#ifndef PinMediaSourcePinURL_H_
#define PinMediaSourcePinURL_H_



#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Pin URL-based media source for product pin creation. Currently the field is only available to a list of beta users.
/// </summary>
class  PinMediaSourcePinURL 
{
public:
    PinMediaSourcePinURL() = default;
    explicit PinMediaSourcePinURL(boost::property_tree::ptree const& pt);
    virtual ~PinMediaSourcePinURL() = default;

    PinMediaSourcePinURL(const PinMediaSourcePinURL& other) = default; // copy constructor
    PinMediaSourcePinURL(PinMediaSourcePinURL&& other) noexcept = default; // move constructor

    PinMediaSourcePinURL& operator=(const PinMediaSourcePinURL& other) = default; // copy assignment
    PinMediaSourcePinURL& operator=(PinMediaSourcePinURL&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// PinMediaSourcePinURL members

    /// <summary>
    /// 
    /// </summary>
    std::string getSourceType() const;
    void setSourceType(std::string value);

    /// <summary>
    /// This is an affiliate link or sponsored product. The FTC requires disclosure for paid partnerships and affiliate products.
    /// </summary>
    bool isIsAffiliateLink() const;
    void setIsAffiliateLink(bool value);

protected:
    std::string m_Source_type = "";
    bool m_Is_affiliate_link = false;
};

std::vector<PinMediaSourcePinURL> createPinMediaSourcePinURLVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<PinMediaSourcePinURL>(const PinMediaSourcePinURL& val) {
    return val.toPropertyTree();
}

template<>
inline PinMediaSourcePinURL fromPt<PinMediaSourcePinURL>(const boost::property_tree::ptree& pt) {
    PinMediaSourcePinURL ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* PinMediaSourcePinURL_H_ */
