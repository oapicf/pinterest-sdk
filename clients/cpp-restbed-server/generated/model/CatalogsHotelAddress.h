/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsHotelAddress.h
 *
 * 
 */

#ifndef CatalogsHotelAddress_H_
#define CatalogsHotelAddress_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CatalogsHotelAddress 
{
public:
    CatalogsHotelAddress() = default;
    explicit CatalogsHotelAddress(boost::property_tree::ptree const& pt);
    virtual ~CatalogsHotelAddress() = default;

    CatalogsHotelAddress(const CatalogsHotelAddress& other) = default; // copy constructor
    CatalogsHotelAddress(CatalogsHotelAddress&& other) noexcept = default; // move constructor

    CatalogsHotelAddress& operator=(const CatalogsHotelAddress& other) = default; // copy assignment
    CatalogsHotelAddress& operator=(CatalogsHotelAddress&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsHotelAddress members

    /// <summary>
    /// Primary street address of hotel.
    /// </summary>
    std::string getAddr1() const;
    void setAddr1(std::string value);

    /// <summary>
    /// City where the hotel is located.
    /// </summary>
    std::string getCity() const;
    void setCity(std::string value);

    /// <summary>
    /// State, county, province, where the hotel is located.
    /// </summary>
    std::string getRegion() const;
    void setRegion(std::string value);

    /// <summary>
    /// Country where the hotel is located.
    /// </summary>
    std::string getCountry() const;
    void setCountry(std::string value);

    /// <summary>
    /// Required for countries with a postal code system. Postal or zip code of the hotel.
    /// </summary>
    std::string getPostalCode() const;
    void setPostalCode(std::string value);

protected:
    std::string m_Addr1 = "";
    std::string m_City = "";
    std::string m_Region = "";
    std::string m_Country = "";
    std::string m_Postal_code = "";
};

std::vector<CatalogsHotelAddress> createCatalogsHotelAddressVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsHotelAddress>(const CatalogsHotelAddress& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsHotelAddress fromPt<CatalogsHotelAddress>(const boost::property_tree::ptree& pt) {
    CatalogsHotelAddress ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsHotelAddress_H_ */
