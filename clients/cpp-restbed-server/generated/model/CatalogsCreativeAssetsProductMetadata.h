/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsCreativeAssetsProductMetadata.h
 *
 * Creative assets product metadata entity
 */

#ifndef CatalogsCreativeAssetsProductMetadata_H_
#define CatalogsCreativeAssetsProductMetadata_H_



#include <string>
#include "CreativeAssetsVisibilityType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Creative assets product metadata entity
/// </summary>
class  CatalogsCreativeAssetsProductMetadata 
{
public:
    CatalogsCreativeAssetsProductMetadata() = default;
    explicit CatalogsCreativeAssetsProductMetadata(boost::property_tree::ptree const& pt);
    virtual ~CatalogsCreativeAssetsProductMetadata() = default;

    CatalogsCreativeAssetsProductMetadata(const CatalogsCreativeAssetsProductMetadata& other) = default; // copy constructor
    CatalogsCreativeAssetsProductMetadata(CatalogsCreativeAssetsProductMetadata&& other) noexcept = default; // move constructor

    CatalogsCreativeAssetsProductMetadata& operator=(const CatalogsCreativeAssetsProductMetadata& other) = default; // copy assignment
    CatalogsCreativeAssetsProductMetadata& operator=(CatalogsCreativeAssetsProductMetadata&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsCreativeAssetsProductMetadata members

    /// <summary>
    /// The user-created unique ID that represents the creative assets item.
    /// </summary>
    std::string getCreativeAssetsId() const;
    void setCreativeAssetsId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    CreativeAssetsVisibilityType getVisibility() const;
    void setVisibility(CreativeAssetsVisibilityType value);

protected:
    std::string m_Creative_assets_id = "";
    CreativeAssetsVisibilityType m_Visibility = CreativeAssetsVisibilityType{};
};

std::vector<CatalogsCreativeAssetsProductMetadata> createCatalogsCreativeAssetsProductMetadataVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsCreativeAssetsProductMetadata>(const CatalogsCreativeAssetsProductMetadata& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsCreativeAssetsProductMetadata fromPt<CatalogsCreativeAssetsProductMetadata>(const boost::property_tree::ptree& pt) {
    CatalogsCreativeAssetsProductMetadata ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsCreativeAssetsProductMetadata_H_ */
