/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PinMediaSourceVideoID.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

PinMediaSourceVideoID::PinMediaSourceVideoID(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string PinMediaSourceVideoID::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void PinMediaSourceVideoID::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree PinMediaSourceVideoID::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("source_type", m_Source_type);
	pt.put("cover_image_url", m_Cover_image_url);
	pt.put("cover_image_content_type", m_Cover_image_content_type);
	pt.put("cover_image_data", m_Cover_image_data);
	pt.put("media_id", m_Media_id);
	pt.put("is_standard", m_Is_standard);
	return pt;
}

void PinMediaSourceVideoID::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	setSourceType(pt.get("source_type", ""));
	m_Cover_image_url = pt.get("cover_image_url", "");
	setCoverImageContentType(pt.get("cover_image_content_type", ""));
	m_Cover_image_data = pt.get("cover_image_data", "");
	m_Media_id = pt.get("media_id", "");
	m_Is_standard = pt.get("is_standard", true);
}

std::string PinMediaSourceVideoID::getSourceType() const
{
    return m_Source_type;
}

void PinMediaSourceVideoID::setSourceType(std::string value)
{
    static const std::array<std::string, 1> allowedValues = {
        "video_id"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Source_type = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


std::string PinMediaSourceVideoID::getCoverImageUrl() const
{
    return m_Cover_image_url;
}

void PinMediaSourceVideoID::setCoverImageUrl(std::string value)
{
    m_Cover_image_url = value;
}


std::string PinMediaSourceVideoID::getCoverImageContentType() const
{
    return m_Cover_image_content_type;
}

void PinMediaSourceVideoID::setCoverImageContentType(std::string value)
{
    static const std::array<std::string, 2> allowedValues = {
        "image/jpeg", "image/png"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Cover_image_content_type = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


std::string PinMediaSourceVideoID::getCoverImageData() const
{
    return m_Cover_image_data;
}

void PinMediaSourceVideoID::setCoverImageData(std::string value)
{
    m_Cover_image_data = value;
}


std::string PinMediaSourceVideoID::getMediaId() const
{
    return m_Media_id;
}

void PinMediaSourceVideoID::setMediaId(std::string value)
{
    m_Media_id = value;
}


bool PinMediaSourceVideoID::isIsStandard() const
{
    return m_Is_standard;
}

void PinMediaSourceVideoID::setIsStandard(bool value)
{
    m_Is_standard = value;
}



std::vector<PinMediaSourceVideoID> createPinMediaSourceVideoIDVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<PinMediaSourceVideoID>();
    for (const auto& child: pt) {
        vec.emplace_back(PinMediaSourceVideoID(child.second));
    }

    return vec;
}

}
}
}
}

