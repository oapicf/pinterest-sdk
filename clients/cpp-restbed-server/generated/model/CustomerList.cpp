/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CustomerList.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CustomerList::CustomerList(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string CustomerList::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void CustomerList::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CustomerList::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("ad_account_id", m_Ad_account_id);
	pt.put("created_time", m_Created_time);
	pt.put("id", m_Id);
	pt.put("name", m_Name);
	pt.put("num_batches", m_Num_batches);
	pt.put("num_removed_user_records", m_Num_removed_user_records);
	pt.put("num_uploaded_user_records", m_Num_uploaded_user_records);
	pt.put("status", m_Status);
	pt.put("type", m_Type);
	pt.put("updated_time", m_Updated_time);
	return pt;
}

void CustomerList::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Ad_account_id = pt.get("ad_account_id", "");
	m_Created_time = pt.get("created_time", 0.0);
	m_Id = pt.get("id", "");
	m_Name = pt.get("name", "");
	m_Num_batches = pt.get("num_batches", 0.0);
	m_Num_removed_user_records = pt.get("num_removed_user_records", 0.0);
	m_Num_uploaded_user_records = pt.get("num_uploaded_user_records", 0.0);
	setStatus(pt.get("status", ""));
	m_Type = pt.get("type", "");
	m_Updated_time = pt.get("updated_time", 0.0);
}

std::string CustomerList::getAdAccountId() const
{
    return m_Ad_account_id;
}

void CustomerList::setAdAccountId(std::string value)
{
    m_Ad_account_id = value;
}


double CustomerList::getCreatedTime() const
{
    return m_Created_time;
}

void CustomerList::setCreatedTime(double value)
{
    m_Created_time = value;
}


std::string CustomerList::getId() const
{
    return m_Id;
}

void CustomerList::setId(std::string value)
{
    m_Id = value;
}


std::string CustomerList::getName() const
{
    return m_Name;
}

void CustomerList::setName(std::string value)
{
    m_Name = value;
}


double CustomerList::getNumBatches() const
{
    return m_Num_batches;
}

void CustomerList::setNumBatches(double value)
{
    m_Num_batches = value;
}


double CustomerList::getNumRemovedUserRecords() const
{
    return m_Num_removed_user_records;
}

void CustomerList::setNumRemovedUserRecords(double value)
{
    m_Num_removed_user_records = value;
}


double CustomerList::getNumUploadedUserRecords() const
{
    return m_Num_uploaded_user_records;
}

void CustomerList::setNumUploadedUserRecords(double value)
{
    m_Num_uploaded_user_records = value;
}


std::string CustomerList::getStatus() const
{
    return m_Status;
}

void CustomerList::setStatus(std::string value)
{
    static const std::array<std::string, 4> allowedValues = {
        "PROCESSING", "READY", "TOO_SMALL", "UPLOADING"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Status = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


std::string CustomerList::getType() const
{
    return m_Type;
}

void CustomerList::setType(std::string value)
{
    m_Type = value;
}


double CustomerList::getUpdatedTime() const
{
    return m_Updated_time;
}

void CustomerList::setUpdatedTime(double value)
{
    m_Updated_time = value;
}


std::string CustomerList::getExceptions() const
{
    return m_Exceptions;
}

void CustomerList::setExceptions(std::string value)
{
    m_Exceptions = value;
}



std::vector<CustomerList> createCustomerListVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CustomerList>();
    for (const auto& child: pt) {
        vec.emplace_back(CustomerList(child.second));
    }

    return vec;
}

}
}
}
}

