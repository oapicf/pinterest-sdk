/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GridClickType.h
 *
 * Where a user is taken after clicking on an ad in grid. &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt;  This parameter is read-only and is set to DIRECT_TO_DESTINATION by default for direct links supported ads.  grid_click_type values provided will be ignored.
 */

#ifndef GridClickType_H_
#define GridClickType_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Where a user is taken after clicking on an ad in grid. &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt;  This parameter is read-only and is set to DIRECT_TO_DESTINATION by default for direct links supported ads.  grid_click_type values provided will be ignored.
/// </summary>
class  GridClickType 
{
public:
    GridClickType() = default;
    explicit GridClickType(boost::property_tree::ptree const& pt);
    virtual ~GridClickType() = default;

    GridClickType(const GridClickType& other) = default; // copy constructor
    GridClickType(GridClickType&& other) noexcept = default; // move constructor

    GridClickType& operator=(const GridClickType& other) = default; // copy assignment
    GridClickType& operator=(GridClickType&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    std::string toString() const;
    void fromString(const std::string& str);

    /////////////////////////////////////////////
    /// GridClickType members
    std::string getEnumValue() const;
    void setEnumValue(const std::string& val);

protected:
    std::string m_GridClickTypeEnumValue;
};

std::vector<GridClickType> createGridClickTypeVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<GridClickType>(const GridClickType& val) {
    return val.toPropertyTree();
}

template<>
inline GridClickType fromPt<GridClickType>(const boost::property_tree::ptree& pt) {
    GridClickType ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* GridClickType_H_ */
