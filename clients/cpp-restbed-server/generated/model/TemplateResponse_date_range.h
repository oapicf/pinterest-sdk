/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TemplateResponse_date_range.h
 *
 * 
 */

#ifndef TemplateResponse_date_range_H_
#define TemplateResponse_date_range_H_



#include "TemplateResponse_date_range_relative_date_range.h"
#include "TemplateResponse_date_range_dynamic_date_range.h"
#include "TemplateResponse_date_range_absolute_date_range.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  TemplateResponse_date_range 
{
public:
    TemplateResponse_date_range() = default;
    explicit TemplateResponse_date_range(boost::property_tree::ptree const& pt);
    virtual ~TemplateResponse_date_range() = default;

    TemplateResponse_date_range(const TemplateResponse_date_range& other) = default; // copy constructor
    TemplateResponse_date_range(TemplateResponse_date_range&& other) noexcept = default; // move constructor

    TemplateResponse_date_range& operator=(const TemplateResponse_date_range& other) = default; // copy assignment
    TemplateResponse_date_range& operator=(TemplateResponse_date_range&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// TemplateResponse_date_range members

    /// <summary>
    /// 
    /// </summary>
    TemplateResponse_date_range_dynamic_date_range getDynamicDateRange() const;
    void setDynamicDateRange(TemplateResponse_date_range_dynamic_date_range value);

    /// <summary>
    /// 
    /// </summary>
    TemplateResponse_date_range_relative_date_range getRelativeDateRange() const;
    void setRelativeDateRange(TemplateResponse_date_range_relative_date_range value);

    /// <summary>
    /// 
    /// </summary>
    TemplateResponse_date_range_absolute_date_range getAbsoluteDateRange() const;
    void setAbsoluteDateRange(TemplateResponse_date_range_absolute_date_range value);

protected:
    TemplateResponse_date_range_dynamic_date_range m_Dynamic_date_range;
    TemplateResponse_date_range_relative_date_range m_Relative_date_range;
    TemplateResponse_date_range_absolute_date_range m_Absolute_date_range;
};

std::vector<TemplateResponse_date_range> createTemplateResponse_date_rangeVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<TemplateResponse_date_range>(const TemplateResponse_date_range& val) {
    return val.toPropertyTree();
}

template<>
inline TemplateResponse_date_range fromPt<TemplateResponse_date_range>(const boost::property_tree::ptree& pt) {
    TemplateResponse_date_range ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* TemplateResponse_date_range_H_ */
