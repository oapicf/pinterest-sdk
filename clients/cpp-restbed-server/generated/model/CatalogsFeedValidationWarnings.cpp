/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CatalogsFeedValidationWarnings.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CatalogsFeedValidationWarnings::CatalogsFeedValidationWarnings(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string CatalogsFeedValidationWarnings::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void CatalogsFeedValidationWarnings::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CatalogsFeedValidationWarnings::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("AD_LINK_FORMAT_WARNING", m_AD_LINK_FORMAT_WARNING);
	pt.put("AD_LINK_SAME_AS_LINK", m_AD_LINK_SAME_AS_LINK);
	pt.put("TITLE_LENGTH_TOO_LONG", m_TITLE_LENGTH_TOO_LONG);
	pt.put("DESCRIPTION_LENGTH_TOO_LONG", m_DESCRIPTION_LENGTH_TOO_LONG);
	pt.put("GENDER_INVALID", m_GENDER_INVALID);
	pt.put("AGE_GROUP_INVALID", m_AGE_GROUP_INVALID);
	pt.put("SIZE_TYPE_INVALID", m_SIZE_TYPE_INVALID);
	pt.put("SIZE_SYSTEM_INVALID", m_SIZE_SYSTEM_INVALID);
	pt.put("LINK_FORMAT_WARNING", m_LINK_FORMAT_WARNING);
	pt.put("SALES_PRICE_INVALID", m_SALES_PRICE_INVALID);
	pt.put("PRODUCT_CATEGORY_DEPTH_WARNING", m_PRODUCT_CATEGORY_DEPTH_WARNING);
	pt.put("ADWORDS_FORMAT_WARNING", m_ADWORDS_FORMAT_WARNING);
	pt.put("ADWORDS_SAME_AS_LINK", m_ADWORDS_SAME_AS_LINK);
	pt.put("DUPLICATE_HEADERS", m_DUPLICATE_HEADERS);
	pt.put("FETCH_SAME_SIGNATURE", m_FETCH_SAME_SIGNATURE);
	pt.put("ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG", m_ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG);
	pt.put("ADDITIONAL_IMAGE_LINK_WARNING", m_ADDITIONAL_IMAGE_LINK_WARNING);
	pt.put("IMAGE_LINK_WARNING", m_IMAGE_LINK_WARNING);
	pt.put("SHIPPING_INVALID", m_SHIPPING_INVALID);
	pt.put("TAX_INVALID", m_TAX_INVALID);
	pt.put("SHIPPING_WEIGHT_INVALID", m_SHIPPING_WEIGHT_INVALID);
	pt.put("EXPIRATION_DATE_INVALID", m_EXPIRATION_DATE_INVALID);
	pt.put("AVAILABILITY_DATE_INVALID", m_AVAILABILITY_DATE_INVALID);
	pt.put("SALE_DATE_INVALID", m_SALE_DATE_INVALID);
	pt.put("WEIGHT_UNIT_INVALID", m_WEIGHT_UNIT_INVALID);
	pt.put("IS_BUNDLE_INVALID", m_IS_BUNDLE_INVALID);
	pt.put("UPDATED_TIME_INVALID", m_UPDATED_TIME_INVALID);
	pt.put("CUSTOM_LABEL_LENGTH_TOO_LONG", m_CUSTOM_LABEL_LENGTH_TOO_LONG);
	pt.put("PRODUCT_TYPE_LENGTH_TOO_LONG", m_PRODUCT_TYPE_LENGTH_TOO_LONG);
	pt.put("TOO_MANY_ADDITIONAL_IMAGE_LINKS", m_TOO_MANY_ADDITIONAL_IMAGE_LINKS);
	pt.put("MULTIPACK_INVALID", m_MULTIPACK_INVALID);
	pt.put("INDEXED_PRODUCT_COUNT_LARGE_DELTA", m_INDEXED_PRODUCT_COUNT_LARGE_DELTA);
	pt.put("ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE", m_ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE);
	pt.put("OPTIONAL_PRODUCT_CATEGORY_MISSING", m_OPTIONAL_PRODUCT_CATEGORY_MISSING);
	pt.put("OPTIONAL_PRODUCT_CATEGORY_INVALID", m_OPTIONAL_PRODUCT_CATEGORY_INVALID);
	pt.put("OPTIONAL_CONDITION_MISSING", m_OPTIONAL_CONDITION_MISSING);
	pt.put("OPTIONAL_CONDITION_INVALID", m_OPTIONAL_CONDITION_INVALID);
	pt.put("IOS_DEEP_LINK_INVALID", m_IOS_DEEP_LINK_INVALID);
	pt.put("ANDROID_DEEP_LINK_INVALID", m_ANDROID_DEEP_LINK_INVALID);
	pt.put("UTM_SOURCE_AUTO_CORRECTED", m_UTM_SOURCE_AUTO_CORRECTED);
	pt.put("COUNTRY_DOES_NOT_MAP_TO_CURRENCY", m_COUNTRY_DOES_NOT_MAP_TO_CURRENCY);
	pt.put("MIN_AD_PRICE_INVALID", m_MIN_AD_PRICE_INVALID);
	pt.put("GTIN_INVALID", m_GTIN_INVALID);
	pt.put("INCONSISTENT_CURRENCY_VALUES", m_INCONSISTENT_CURRENCY_VALUES);
	pt.put("SALES_PRICE_TOO_LOW", m_SALES_PRICE_TOO_LOW);
	pt.put("SHIPPING_WIDTH_INVALID", m_SHIPPING_WIDTH_INVALID);
	pt.put("SHIPPING_HEIGHT_INVALID", m_SHIPPING_HEIGHT_INVALID);
	pt.put("SALES_PRICE_TOO_HIGH", m_SALES_PRICE_TOO_HIGH);
	pt.put("MPN_INVALID", m_MPN_INVALID);
	return pt;
}

void CatalogsFeedValidationWarnings::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_AD_LINK_FORMAT_WARNING = pt.get("AD_LINK_FORMAT_WARNING", 0);
	m_AD_LINK_SAME_AS_LINK = pt.get("AD_LINK_SAME_AS_LINK", 0);
	m_TITLE_LENGTH_TOO_LONG = pt.get("TITLE_LENGTH_TOO_LONG", 0);
	m_DESCRIPTION_LENGTH_TOO_LONG = pt.get("DESCRIPTION_LENGTH_TOO_LONG", 0);
	m_GENDER_INVALID = pt.get("GENDER_INVALID", 0);
	m_AGE_GROUP_INVALID = pt.get("AGE_GROUP_INVALID", 0);
	m_SIZE_TYPE_INVALID = pt.get("SIZE_TYPE_INVALID", 0);
	m_SIZE_SYSTEM_INVALID = pt.get("SIZE_SYSTEM_INVALID", 0);
	m_LINK_FORMAT_WARNING = pt.get("LINK_FORMAT_WARNING", 0);
	m_SALES_PRICE_INVALID = pt.get("SALES_PRICE_INVALID", 0);
	m_PRODUCT_CATEGORY_DEPTH_WARNING = pt.get("PRODUCT_CATEGORY_DEPTH_WARNING", 0);
	m_ADWORDS_FORMAT_WARNING = pt.get("ADWORDS_FORMAT_WARNING", 0);
	m_ADWORDS_SAME_AS_LINK = pt.get("ADWORDS_SAME_AS_LINK", 0);
	m_DUPLICATE_HEADERS = pt.get("DUPLICATE_HEADERS", 0);
	setFETCHSAMESIGNATURE(pt.get("FETCH_SAME_SIGNATURE", 0));
	m_ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG = pt.get("ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG", 0);
	m_ADDITIONAL_IMAGE_LINK_WARNING = pt.get("ADDITIONAL_IMAGE_LINK_WARNING", 0);
	m_IMAGE_LINK_WARNING = pt.get("IMAGE_LINK_WARNING", 0);
	m_SHIPPING_INVALID = pt.get("SHIPPING_INVALID", 0);
	m_TAX_INVALID = pt.get("TAX_INVALID", 0);
	m_SHIPPING_WEIGHT_INVALID = pt.get("SHIPPING_WEIGHT_INVALID", 0);
	m_EXPIRATION_DATE_INVALID = pt.get("EXPIRATION_DATE_INVALID", 0);
	m_AVAILABILITY_DATE_INVALID = pt.get("AVAILABILITY_DATE_INVALID", 0);
	m_SALE_DATE_INVALID = pt.get("SALE_DATE_INVALID", 0);
	m_WEIGHT_UNIT_INVALID = pt.get("WEIGHT_UNIT_INVALID", 0);
	m_IS_BUNDLE_INVALID = pt.get("IS_BUNDLE_INVALID", 0);
	m_UPDATED_TIME_INVALID = pt.get("UPDATED_TIME_INVALID", 0);
	m_CUSTOM_LABEL_LENGTH_TOO_LONG = pt.get("CUSTOM_LABEL_LENGTH_TOO_LONG", 0);
	m_PRODUCT_TYPE_LENGTH_TOO_LONG = pt.get("PRODUCT_TYPE_LENGTH_TOO_LONG", 0);
	m_TOO_MANY_ADDITIONAL_IMAGE_LINKS = pt.get("TOO_MANY_ADDITIONAL_IMAGE_LINKS", 0);
	m_MULTIPACK_INVALID = pt.get("MULTIPACK_INVALID", 0);
	m_INDEXED_PRODUCT_COUNT_LARGE_DELTA = pt.get("INDEXED_PRODUCT_COUNT_LARGE_DELTA", 0);
	m_ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE = pt.get("ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE", 0);
	m_OPTIONAL_PRODUCT_CATEGORY_MISSING = pt.get("OPTIONAL_PRODUCT_CATEGORY_MISSING", 0);
	m_OPTIONAL_PRODUCT_CATEGORY_INVALID = pt.get("OPTIONAL_PRODUCT_CATEGORY_INVALID", 0);
	m_OPTIONAL_CONDITION_MISSING = pt.get("OPTIONAL_CONDITION_MISSING", 0);
	m_OPTIONAL_CONDITION_INVALID = pt.get("OPTIONAL_CONDITION_INVALID", 0);
	m_IOS_DEEP_LINK_INVALID = pt.get("IOS_DEEP_LINK_INVALID", 0);
	m_ANDROID_DEEP_LINK_INVALID = pt.get("ANDROID_DEEP_LINK_INVALID", 0);
	m_UTM_SOURCE_AUTO_CORRECTED = pt.get("UTM_SOURCE_AUTO_CORRECTED", 0);
	m_COUNTRY_DOES_NOT_MAP_TO_CURRENCY = pt.get("COUNTRY_DOES_NOT_MAP_TO_CURRENCY", 0);
	m_MIN_AD_PRICE_INVALID = pt.get("MIN_AD_PRICE_INVALID", 0);
	m_GTIN_INVALID = pt.get("GTIN_INVALID", 0);
	m_INCONSISTENT_CURRENCY_VALUES = pt.get("INCONSISTENT_CURRENCY_VALUES", 0);
	m_SALES_PRICE_TOO_LOW = pt.get("SALES_PRICE_TOO_LOW", 0);
	m_SHIPPING_WIDTH_INVALID = pt.get("SHIPPING_WIDTH_INVALID", 0);
	m_SHIPPING_HEIGHT_INVALID = pt.get("SHIPPING_HEIGHT_INVALID", 0);
	m_SALES_PRICE_TOO_HIGH = pt.get("SALES_PRICE_TOO_HIGH", 0);
	m_MPN_INVALID = pt.get("MPN_INVALID", 0);
}

int32_t CatalogsFeedValidationWarnings::getADLINKFORMATWARNING() const
{
    return m_AD_LINK_FORMAT_WARNING;
}

void CatalogsFeedValidationWarnings::setADLINKFORMATWARNING(int32_t value)
{
    m_AD_LINK_FORMAT_WARNING = value;
}


int32_t CatalogsFeedValidationWarnings::getADLINKSAMEASLINK() const
{
    return m_AD_LINK_SAME_AS_LINK;
}

void CatalogsFeedValidationWarnings::setADLINKSAMEASLINK(int32_t value)
{
    m_AD_LINK_SAME_AS_LINK = value;
}


int32_t CatalogsFeedValidationWarnings::getTITLELENGTHTOOLONG() const
{
    return m_TITLE_LENGTH_TOO_LONG;
}

void CatalogsFeedValidationWarnings::setTITLELENGTHTOOLONG(int32_t value)
{
    m_TITLE_LENGTH_TOO_LONG = value;
}


int32_t CatalogsFeedValidationWarnings::getDESCRIPTIONLENGTHTOOLONG() const
{
    return m_DESCRIPTION_LENGTH_TOO_LONG;
}

void CatalogsFeedValidationWarnings::setDESCRIPTIONLENGTHTOOLONG(int32_t value)
{
    m_DESCRIPTION_LENGTH_TOO_LONG = value;
}


int32_t CatalogsFeedValidationWarnings::getGENDERINVALID() const
{
    return m_GENDER_INVALID;
}

void CatalogsFeedValidationWarnings::setGENDERINVALID(int32_t value)
{
    m_GENDER_INVALID = value;
}


int32_t CatalogsFeedValidationWarnings::getAGEGROUPINVALID() const
{
    return m_AGE_GROUP_INVALID;
}

void CatalogsFeedValidationWarnings::setAGEGROUPINVALID(int32_t value)
{
    m_AGE_GROUP_INVALID = value;
}


int32_t CatalogsFeedValidationWarnings::getSIZETYPEINVALID() const
{
    return m_SIZE_TYPE_INVALID;
}

void CatalogsFeedValidationWarnings::setSIZETYPEINVALID(int32_t value)
{
    m_SIZE_TYPE_INVALID = value;
}


int32_t CatalogsFeedValidationWarnings::getSIZESYSTEMINVALID() const
{
    return m_SIZE_SYSTEM_INVALID;
}

void CatalogsFeedValidationWarnings::setSIZESYSTEMINVALID(int32_t value)
{
    m_SIZE_SYSTEM_INVALID = value;
}


int32_t CatalogsFeedValidationWarnings::getLINKFORMATWARNING() const
{
    return m_LINK_FORMAT_WARNING;
}

void CatalogsFeedValidationWarnings::setLINKFORMATWARNING(int32_t value)
{
    m_LINK_FORMAT_WARNING = value;
}


int32_t CatalogsFeedValidationWarnings::getSALESPRICEINVALID() const
{
    return m_SALES_PRICE_INVALID;
}

void CatalogsFeedValidationWarnings::setSALESPRICEINVALID(int32_t value)
{
    m_SALES_PRICE_INVALID = value;
}


int32_t CatalogsFeedValidationWarnings::getPRODUCTCATEGORYDEPTHWARNING() const
{
    return m_PRODUCT_CATEGORY_DEPTH_WARNING;
}

void CatalogsFeedValidationWarnings::setPRODUCTCATEGORYDEPTHWARNING(int32_t value)
{
    m_PRODUCT_CATEGORY_DEPTH_WARNING = value;
}


int32_t CatalogsFeedValidationWarnings::getADWORDSFORMATWARNING() const
{
    return m_ADWORDS_FORMAT_WARNING;
}

void CatalogsFeedValidationWarnings::setADWORDSFORMATWARNING(int32_t value)
{
    m_ADWORDS_FORMAT_WARNING = value;
}


int32_t CatalogsFeedValidationWarnings::getADWORDSSAMEASLINK() const
{
    return m_ADWORDS_SAME_AS_LINK;
}

void CatalogsFeedValidationWarnings::setADWORDSSAMEASLINK(int32_t value)
{
    m_ADWORDS_SAME_AS_LINK = value;
}


int32_t CatalogsFeedValidationWarnings::getDUPLICATEHEADERS() const
{
    return m_DUPLICATE_HEADERS;
}

void CatalogsFeedValidationWarnings::setDUPLICATEHEADERS(int32_t value)
{
    m_DUPLICATE_HEADERS = value;
}


int32_t CatalogsFeedValidationWarnings::getFETCHSAMESIGNATURE() const
{
    return m_FETCH_SAME_SIGNATURE;
}

void CatalogsFeedValidationWarnings::setFETCHSAMESIGNATURE(int32_t value)
{
    static const std::array<int32_t, 1> allowedValues = {
        1
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_FETCH_SAME_SIGNATURE = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


int32_t CatalogsFeedValidationWarnings::getADDITIONALIMAGELINKLENGTHTOOLONG() const
{
    return m_ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG;
}

void CatalogsFeedValidationWarnings::setADDITIONALIMAGELINKLENGTHTOOLONG(int32_t value)
{
    m_ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG = value;
}


int32_t CatalogsFeedValidationWarnings::getADDITIONALIMAGELINKWARNING() const
{
    return m_ADDITIONAL_IMAGE_LINK_WARNING;
}

void CatalogsFeedValidationWarnings::setADDITIONALIMAGELINKWARNING(int32_t value)
{
    m_ADDITIONAL_IMAGE_LINK_WARNING = value;
}


int32_t CatalogsFeedValidationWarnings::getIMAGELINKWARNING() const
{
    return m_IMAGE_LINK_WARNING;
}

void CatalogsFeedValidationWarnings::setIMAGELINKWARNING(int32_t value)
{
    m_IMAGE_LINK_WARNING = value;
}


int32_t CatalogsFeedValidationWarnings::getSHIPPINGINVALID() const
{
    return m_SHIPPING_INVALID;
}

void CatalogsFeedValidationWarnings::setSHIPPINGINVALID(int32_t value)
{
    m_SHIPPING_INVALID = value;
}


int32_t CatalogsFeedValidationWarnings::getTAXINVALID() const
{
    return m_TAX_INVALID;
}

void CatalogsFeedValidationWarnings::setTAXINVALID(int32_t value)
{
    m_TAX_INVALID = value;
}


int32_t CatalogsFeedValidationWarnings::getSHIPPINGWEIGHTINVALID() const
{
    return m_SHIPPING_WEIGHT_INVALID;
}

void CatalogsFeedValidationWarnings::setSHIPPINGWEIGHTINVALID(int32_t value)
{
    m_SHIPPING_WEIGHT_INVALID = value;
}


int32_t CatalogsFeedValidationWarnings::getEXPIRATIONDATEINVALID() const
{
    return m_EXPIRATION_DATE_INVALID;
}

void CatalogsFeedValidationWarnings::setEXPIRATIONDATEINVALID(int32_t value)
{
    m_EXPIRATION_DATE_INVALID = value;
}


int32_t CatalogsFeedValidationWarnings::getAVAILABILITYDATEINVALID() const
{
    return m_AVAILABILITY_DATE_INVALID;
}

void CatalogsFeedValidationWarnings::setAVAILABILITYDATEINVALID(int32_t value)
{
    m_AVAILABILITY_DATE_INVALID = value;
}


int32_t CatalogsFeedValidationWarnings::getSALEDATEINVALID() const
{
    return m_SALE_DATE_INVALID;
}

void CatalogsFeedValidationWarnings::setSALEDATEINVALID(int32_t value)
{
    m_SALE_DATE_INVALID = value;
}


int32_t CatalogsFeedValidationWarnings::getWEIGHTUNITINVALID() const
{
    return m_WEIGHT_UNIT_INVALID;
}

void CatalogsFeedValidationWarnings::setWEIGHTUNITINVALID(int32_t value)
{
    m_WEIGHT_UNIT_INVALID = value;
}


int32_t CatalogsFeedValidationWarnings::getISBUNDLEINVALID() const
{
    return m_IS_BUNDLE_INVALID;
}

void CatalogsFeedValidationWarnings::setISBUNDLEINVALID(int32_t value)
{
    m_IS_BUNDLE_INVALID = value;
}


int32_t CatalogsFeedValidationWarnings::getUPDATEDTIMEINVALID() const
{
    return m_UPDATED_TIME_INVALID;
}

void CatalogsFeedValidationWarnings::setUPDATEDTIMEINVALID(int32_t value)
{
    m_UPDATED_TIME_INVALID = value;
}


int32_t CatalogsFeedValidationWarnings::getCUSTOMLABELLENGTHTOOLONG() const
{
    return m_CUSTOM_LABEL_LENGTH_TOO_LONG;
}

void CatalogsFeedValidationWarnings::setCUSTOMLABELLENGTHTOOLONG(int32_t value)
{
    m_CUSTOM_LABEL_LENGTH_TOO_LONG = value;
}


int32_t CatalogsFeedValidationWarnings::getPRODUCTTYPELENGTHTOOLONG() const
{
    return m_PRODUCT_TYPE_LENGTH_TOO_LONG;
}

void CatalogsFeedValidationWarnings::setPRODUCTTYPELENGTHTOOLONG(int32_t value)
{
    m_PRODUCT_TYPE_LENGTH_TOO_LONG = value;
}


int32_t CatalogsFeedValidationWarnings::getTOOMANYADDITIONALIMAGELINKS() const
{
    return m_TOO_MANY_ADDITIONAL_IMAGE_LINKS;
}

void CatalogsFeedValidationWarnings::setTOOMANYADDITIONALIMAGELINKS(int32_t value)
{
    m_TOO_MANY_ADDITIONAL_IMAGE_LINKS = value;
}


int32_t CatalogsFeedValidationWarnings::getMULTIPACKINVALID() const
{
    return m_MULTIPACK_INVALID;
}

void CatalogsFeedValidationWarnings::setMULTIPACKINVALID(int32_t value)
{
    m_MULTIPACK_INVALID = value;
}


int32_t CatalogsFeedValidationWarnings::getINDEXEDPRODUCTCOUNTLARGEDELTA() const
{
    return m_INDEXED_PRODUCT_COUNT_LARGE_DELTA;
}

void CatalogsFeedValidationWarnings::setINDEXEDPRODUCTCOUNTLARGEDELTA(int32_t value)
{
    m_INDEXED_PRODUCT_COUNT_LARGE_DELTA = value;
}


int32_t CatalogsFeedValidationWarnings::getITEMADDITIONALIMAGEDOWNLOADFAILURE() const
{
    return m_ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE;
}

void CatalogsFeedValidationWarnings::setITEMADDITIONALIMAGEDOWNLOADFAILURE(int32_t value)
{
    m_ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE = value;
}


int32_t CatalogsFeedValidationWarnings::getOPTIONALPRODUCTCATEGORYMISSING() const
{
    return m_OPTIONAL_PRODUCT_CATEGORY_MISSING;
}

void CatalogsFeedValidationWarnings::setOPTIONALPRODUCTCATEGORYMISSING(int32_t value)
{
    m_OPTIONAL_PRODUCT_CATEGORY_MISSING = value;
}


int32_t CatalogsFeedValidationWarnings::getOPTIONALPRODUCTCATEGORYINVALID() const
{
    return m_OPTIONAL_PRODUCT_CATEGORY_INVALID;
}

void CatalogsFeedValidationWarnings::setOPTIONALPRODUCTCATEGORYINVALID(int32_t value)
{
    m_OPTIONAL_PRODUCT_CATEGORY_INVALID = value;
}


int32_t CatalogsFeedValidationWarnings::getOPTIONALCONDITIONMISSING() const
{
    return m_OPTIONAL_CONDITION_MISSING;
}

void CatalogsFeedValidationWarnings::setOPTIONALCONDITIONMISSING(int32_t value)
{
    m_OPTIONAL_CONDITION_MISSING = value;
}


int32_t CatalogsFeedValidationWarnings::getOPTIONALCONDITIONINVALID() const
{
    return m_OPTIONAL_CONDITION_INVALID;
}

void CatalogsFeedValidationWarnings::setOPTIONALCONDITIONINVALID(int32_t value)
{
    m_OPTIONAL_CONDITION_INVALID = value;
}


int32_t CatalogsFeedValidationWarnings::getIOSDEEPLINKINVALID() const
{
    return m_IOS_DEEP_LINK_INVALID;
}

void CatalogsFeedValidationWarnings::setIOSDEEPLINKINVALID(int32_t value)
{
    m_IOS_DEEP_LINK_INVALID = value;
}


int32_t CatalogsFeedValidationWarnings::getANDROIDDEEPLINKINVALID() const
{
    return m_ANDROID_DEEP_LINK_INVALID;
}

void CatalogsFeedValidationWarnings::setANDROIDDEEPLINKINVALID(int32_t value)
{
    m_ANDROID_DEEP_LINK_INVALID = value;
}


int32_t CatalogsFeedValidationWarnings::getUTMSOURCEAUTOCORRECTED() const
{
    return m_UTM_SOURCE_AUTO_CORRECTED;
}

void CatalogsFeedValidationWarnings::setUTMSOURCEAUTOCORRECTED(int32_t value)
{
    m_UTM_SOURCE_AUTO_CORRECTED = value;
}


int32_t CatalogsFeedValidationWarnings::getCOUNTRYDOESNOTMAPTOCURRENCY() const
{
    return m_COUNTRY_DOES_NOT_MAP_TO_CURRENCY;
}

void CatalogsFeedValidationWarnings::setCOUNTRYDOESNOTMAPTOCURRENCY(int32_t value)
{
    m_COUNTRY_DOES_NOT_MAP_TO_CURRENCY = value;
}


int32_t CatalogsFeedValidationWarnings::getMINADPRICEINVALID() const
{
    return m_MIN_AD_PRICE_INVALID;
}

void CatalogsFeedValidationWarnings::setMINADPRICEINVALID(int32_t value)
{
    m_MIN_AD_PRICE_INVALID = value;
}


int32_t CatalogsFeedValidationWarnings::getGTININVALID() const
{
    return m_GTIN_INVALID;
}

void CatalogsFeedValidationWarnings::setGTININVALID(int32_t value)
{
    m_GTIN_INVALID = value;
}


int32_t CatalogsFeedValidationWarnings::getINCONSISTENTCURRENCYVALUES() const
{
    return m_INCONSISTENT_CURRENCY_VALUES;
}

void CatalogsFeedValidationWarnings::setINCONSISTENTCURRENCYVALUES(int32_t value)
{
    m_INCONSISTENT_CURRENCY_VALUES = value;
}


int32_t CatalogsFeedValidationWarnings::getSALESPRICETOOLOW() const
{
    return m_SALES_PRICE_TOO_LOW;
}

void CatalogsFeedValidationWarnings::setSALESPRICETOOLOW(int32_t value)
{
    m_SALES_PRICE_TOO_LOW = value;
}


int32_t CatalogsFeedValidationWarnings::getSHIPPINGWIDTHINVALID() const
{
    return m_SHIPPING_WIDTH_INVALID;
}

void CatalogsFeedValidationWarnings::setSHIPPINGWIDTHINVALID(int32_t value)
{
    m_SHIPPING_WIDTH_INVALID = value;
}


int32_t CatalogsFeedValidationWarnings::getSHIPPINGHEIGHTINVALID() const
{
    return m_SHIPPING_HEIGHT_INVALID;
}

void CatalogsFeedValidationWarnings::setSHIPPINGHEIGHTINVALID(int32_t value)
{
    m_SHIPPING_HEIGHT_INVALID = value;
}


int32_t CatalogsFeedValidationWarnings::getSALESPRICETOOHIGH() const
{
    return m_SALES_PRICE_TOO_HIGH;
}

void CatalogsFeedValidationWarnings::setSALESPRICETOOHIGH(int32_t value)
{
    m_SALES_PRICE_TOO_HIGH = value;
}


int32_t CatalogsFeedValidationWarnings::getMPNINVALID() const
{
    return m_MPN_INVALID;
}

void CatalogsFeedValidationWarnings::setMPNINVALID(int32_t value)
{
    m_MPN_INVALID = value;
}



std::vector<CatalogsFeedValidationWarnings> createCatalogsFeedValidationWarningsVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CatalogsFeedValidationWarnings>();
    for (const auto& child: pt) {
        vec.emplace_back(CatalogsFeedValidationWarnings(child.second));
    }

    return vec;
}

}
}
}
}

