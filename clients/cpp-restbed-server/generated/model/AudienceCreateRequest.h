/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AudienceCreateRequest.h
 *
 * 
 */

#ifndef AudienceCreateRequest_H_
#define AudienceCreateRequest_H_



#include "AudienceCreateRequest_1_audience_type.h"
#include "AudienceRule.h"
#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "AudienceCommon.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  AudienceCreateRequest : public AudienceCommon
{
public:
    AudienceCreateRequest() = default;
    explicit AudienceCreateRequest(boost::property_tree::ptree const& pt);
    virtual ~AudienceCreateRequest() = default;

    AudienceCreateRequest(const AudienceCreateRequest& other) = default; // copy constructor
    AudienceCreateRequest(AudienceCreateRequest&& other) noexcept = default; // move constructor

    AudienceCreateRequest& operator=(const AudienceCreateRequest& other) = default; // copy assignment
    AudienceCreateRequest& operator=(AudienceCreateRequest&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// AudienceCreateRequest members

    /// <summary>
    /// Ad account ID.
    /// </summary>
    std::string getAdAccountId() const;
    void setAdAccountId(std::string value);

    /// <summary>
    /// Audience name.
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    AudienceRule getRule() const;
    void setRule(AudienceRule value);

    /// <summary>
    /// Audience description.
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string value);

    /// <summary>
    /// 
    /// </summary>
    AudienceCreateRequest_1_audience_type getAudienceType() const;
    void setAudienceType(AudienceCreateRequest_1_audience_type value);

protected:
    std::string m_Ad_account_id = "";
    std::string m_Name = "";
    AudienceRule m_Rule;
    std::string m_Description = "";
    AudienceCreateRequest_1_audience_type m_Audience_type;
};

std::vector<AudienceCreateRequest> createAudienceCreateRequestVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<AudienceCreateRequest>(const AudienceCreateRequest& val) {
    return val.toPropertyTree();
}

template<>
inline AudienceCreateRequest fromPt<AudienceCreateRequest>(const boost::property_tree::ptree& pt) {
    AudienceCreateRequest ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* AudienceCreateRequest_H_ */
