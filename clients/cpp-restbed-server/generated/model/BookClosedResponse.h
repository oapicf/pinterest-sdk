/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BookClosedResponse.h
 *
 * Creation fields
 */

#ifndef BookClosedResponse_H_
#define BookClosedResponse_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Creation fields
/// </summary>
class  BookClosedResponse 
{
public:
    BookClosedResponse() = default;
    explicit BookClosedResponse(boost::property_tree::ptree const& pt);
    virtual ~BookClosedResponse() = default;

    BookClosedResponse(const BookClosedResponse& other) = default; // copy constructor
    BookClosedResponse(BookClosedResponse&& other) noexcept = default; // move constructor

    BookClosedResponse& operator=(const BookClosedResponse& other) = default; // copy assignment
    BookClosedResponse& operator=(BookClosedResponse&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// BookClosedResponse members

    /// <summary>
    /// Are conversion metrics ready?
    /// </summary>
    bool isConversionMetricsReady() const;
    void setConversionMetricsReady(bool value);

    /// <summary>
    /// Are non-conversion metrics ready?
    /// </summary>
    bool isNonConversionMetricsReady() const;
    void setNonConversionMetricsReady(bool value);

protected:
    bool m_Conversion_metrics_ready = false;
    bool m_Non_conversion_metrics_ready = false;
};

std::vector<BookClosedResponse> createBookClosedResponseVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<BookClosedResponse>(const BookClosedResponse& val) {
    return val.toPropertyTree();
}

template<>
inline BookClosedResponse fromPt<BookClosedResponse>(const boost::property_tree::ptree& pt) {
    BookClosedResponse ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* BookClosedResponse_H_ */
