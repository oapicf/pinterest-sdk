/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TargetingSpec.h
 *
 * Ad group targeting specification defining the ad group target audience. For example, &#x60;{\&quot;APPTYPE\&quot;:[\&quot;iphone\&quot;], \&quot;GENDER\&quot;:[\&quot;male\&quot;], \&quot;LOCALE\&quot;:[\&quot;en-US\&quot;], \&quot;LOCATION\&quot;:[\&quot;501\&quot;], \&quot;AGE_BUCKET\&quot;:[\&quot;25-34\&quot;]}&#x60;
 */

#ifndef TargetingSpec_H_
#define TargetingSpec_H_



#include "TargetingSpec_SHOPPING_RETARGETING.h"
#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Ad group targeting specification defining the ad group target audience. For example, &#x60;{\&quot;APPTYPE\&quot;:[\&quot;iphone\&quot;], \&quot;GENDER\&quot;:[\&quot;male\&quot;], \&quot;LOCALE\&quot;:[\&quot;en-US\&quot;], \&quot;LOCATION\&quot;:[\&quot;501\&quot;], \&quot;AGE_BUCKET\&quot;:[\&quot;25-34\&quot;]}&#x60;
/// </summary>
class  TargetingSpec 
{
public:
    TargetingSpec() = default;
    explicit TargetingSpec(boost::property_tree::ptree const& pt);
    virtual ~TargetingSpec() = default;

    TargetingSpec(const TargetingSpec& other) = default; // copy constructor
    TargetingSpec(TargetingSpec&& other) noexcept = default; // move constructor

    TargetingSpec& operator=(const TargetingSpec& other) = default; // copy assignment
    TargetingSpec& operator=(TargetingSpec&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// TargetingSpec members

    /// <summary>
    /// Age ranges. If the AGE_BUCKET field is missing, the default behavior in terms of ad delivery is that **All age buckets** will be targeted.
    /// </summary>
    std::vector<std::string> getAGEBUCKET() const;
    void setAGEBUCKET(std::vector<std::string> value);

    /// <summary>
    /// Allowed devices. If the APPTYPE field is missing, the default behavior in terms of ad delivery is that **All devices/apptypes** will be targeted.
    /// </summary>
    std::vector<std::string> getAPPTYPE() const;
    void setAPPTYPE(std::vector<std::string> value);

    /// <summary>
    /// Excluded customer list IDs. Used to drive new customer acquisition goals. For example: [\&quot;2542620905475\&quot;]. Audience lists need to have at least 100 people with Pinterest accounts in them. If the AUDIENCE_EXCLUDE field is missing, the default behavior in terms of ad delivery is that **No users will be excluded**.
    /// </summary>
    std::vector<std::string> getAUDIENCEEXCLUDE() const;
    void setAUDIENCEEXCLUDE(std::vector<std::string> value);

    /// <summary>
    /// Targeted customer list IDs. For example: [\&quot;2542620905473\&quot;]. Audience lists need to have at least 100 people with Pinterest accounts in them Audience lists need to have at least 100 people with Pinterest accounts in them. If the AUDIENCE_INCLUDE field is missing, the default behavior in terms of ad delivery is that **All users will be included**.
    /// </summary>
    std::vector<std::string> getAUDIENCEINCLUDE() const;
    void setAUDIENCEINCLUDE(std::vector<std::string> value);

    /// <summary>
    /// Targeted genders. Values: [\&quot;unknown\&quot;,\&quot;male\&quot;,\&quot;female\&quot;]. If the GENDER field is missing, the default behavior in terms of ad delivery is that **All genders will be targeted**.
    /// </summary>
    std::vector<std::string> getGENDER() const;
    void setGENDER(std::vector<std::string> value);

    /// <summary>
    /// Location region codes, e.g., \&quot;BE-VOV\&quot; (East Flanders, Belgium) For complete list, &lt;a href&#x3D;\&quot;https://help.pinterest.com/sub/helpcenter/partner/pinterest_location_targeting_codes.xlsx\&quot; target&#x3D;\&quot;_blank\&quot;&gt;click here&lt;/a&gt; or postal codes, e.g., \&quot;US-94107\&quot;. Use either region codes or postal codes but not both. At least one of LOCATION or GEO must be specified. If the GEO field is missing, then only LOCATION values will be targeted (see LOCATION field below).
    /// </summary>
    std::vector<std::string> getGEO() const;
    void setGEO(std::vector<std::string> value);

    /// <summary>
    /// Array of interest object IDs. If the INTEREST field is missing, the default behavior in terms of ad delivery is that **All interests will be targeted**.
    /// </summary>
    std::vector<std::string> getINTEREST() const;
    void setINTEREST(std::vector<std::string> value);

    /// <summary>
    /// 24 ISO 639-1 two letter language codes. If the LOCALE field is missing, the default behavior in terms of ad delivery is that **All languages will be targeted, only english non-sublanguage will be targeted**.
    /// </summary>
    std::vector<std::string> getLOCALE() const;
    void setLOCALE(std::vector<std::string> value);

    /// <summary>
    /// 22 ISO Alpha 2 two letter country codes or US Nielsen DMA (Designated Market Area) codes (location region codes) (e.g., [\&quot;US\&quot;, \&quot;807\&quot;]). For complete list, click here. Location-Country and Location-Metro codes apply. At least one of LOCATION or GEO must be specified. If the LOCATION field is missing, then only GEO values will be targeted (see GEO field above).
    /// </summary>
    std::vector<std::string> getLOCATION() const;
    void setLOCATION(std::vector<std::string> value);

    /// <summary>
    /// Array of object: lookback_window [Integer]: Number of days ago to start lookback timeframe for dynamic retargeting tag_types [Array of integer]: Event types to target for dynamic retargeting exclusion_window [Integer]: Number of days ago to stop lookback timeframe for dynamic retargeting
    /// </summary>
    std::vector<TargetingSpec_SHOPPING_RETARGETING> getSHOPPINGRETARGETING() const;
    void setSHOPPINGRETARGETING(std::vector<TargetingSpec_SHOPPING_RETARGETING> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::string> getTARGETINGSTRATEGY() const;
    void setTARGETINGSTRATEGY(std::vector<std::string> value);

protected:
    std::vector<std::string> m_AGE_BUCKET;
    std::vector<std::string> m_APPTYPE;
    std::vector<std::string> m_AUDIENCE_EXCLUDE;
    std::vector<std::string> m_AUDIENCE_INCLUDE;
    std::vector<std::string> m_GENDER;
    std::vector<std::string> m_GEO;
    std::vector<std::string> m_INTEREST;
    std::vector<std::string> m_LOCALE;
    std::vector<std::string> m_LOCATION;
    std::vector<TargetingSpec_SHOPPING_RETARGETING> m_SHOPPING_RETARGETING;
    std::vector<std::string> m_TARGETING_STRATEGY;
};

std::vector<TargetingSpec> createTargetingSpecVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<TargetingSpec>(const TargetingSpec& val) {
    return val.toPropertyTree();
}

template<>
inline TargetingSpec fromPt<TargetingSpec>(const boost::property_tree::ptree& pt) {
    TargetingSpec ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* TargetingSpec_H_ */
