/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CatalogsFeedValidationErrors.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CatalogsFeedValidationErrors::CatalogsFeedValidationErrors(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string CatalogsFeedValidationErrors::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void CatalogsFeedValidationErrors::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CatalogsFeedValidationErrors::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("FETCH_ERROR", m_FETCH_ERROR);
	pt.put("FETCH_INACTIVE_FEED_ERROR", m_FETCH_INACTIVE_FEED_ERROR);
	pt.put("ENCODING_ERROR", m_ENCODING_ERROR);
	pt.put("DELIMITER_ERROR", m_DELIMITER_ERROR);
	pt.put("REQUIRED_COLUMNS_MISSING", m_REQUIRED_COLUMNS_MISSING);
	pt.put("DUPLICATE_PRODUCTS", m_DUPLICATE_PRODUCTS);
	pt.put("IMAGE_LINK_INVALID", m_IMAGE_LINK_INVALID);
	pt.put("ITEMID_MISSING", m_ITEMID_MISSING);
	pt.put("TITLE_MISSING", m_TITLE_MISSING);
	pt.put("DESCRIPTION_MISSING", m_DESCRIPTION_MISSING);
	pt.put("PRODUCT_LINK_MISSING", m_PRODUCT_LINK_MISSING);
	pt.put("IMAGE_LINK_MISSING", m_IMAGE_LINK_MISSING);
	pt.put("AVAILABILITY_INVALID", m_AVAILABILITY_INVALID);
	pt.put("PRODUCT_PRICE_INVALID", m_PRODUCT_PRICE_INVALID);
	pt.put("LINK_FORMAT_INVALID", m_LINK_FORMAT_INVALID);
	pt.put("PARSE_LINE_ERROR", m_PARSE_LINE_ERROR);
	pt.put("ADWORDS_FORMAT_INVALID", m_ADWORDS_FORMAT_INVALID);
	pt.put("INTERNAL_SERVICE_ERROR", m_INTERNAL_SERVICE_ERROR);
	pt.put("NO_VERIFIED_DOMAIN", m_NO_VERIFIED_DOMAIN);
	pt.put("ADULT_INVALID", m_ADULT_INVALID);
	pt.put("IMAGE_LINK_LENGTH_TOO_LONG", m_IMAGE_LINK_LENGTH_TOO_LONG);
	pt.put("INVALID_DOMAIN", m_INVALID_DOMAIN);
	pt.put("FEED_LENGTH_TOO_LONG", m_FEED_LENGTH_TOO_LONG);
	pt.put("LINK_LENGTH_TOO_LONG", m_LINK_LENGTH_TOO_LONG);
	pt.put("MALFORMED_XML", m_MALFORMED_XML);
	pt.put("PRICE_MISSING", m_PRICE_MISSING);
	pt.put("FEED_TOO_SMALL", m_FEED_TOO_SMALL);
	pt.put("MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED", m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED);
	pt.put("ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE", m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE);
	pt.put("PINJOIN_CONTENT_UNSAFE", m_PINJOIN_CONTENT_UNSAFE);
	pt.put("BLOCKLISTED_IMAGE_SIGNATURE", m_BLOCKLISTED_IMAGE_SIGNATURE);
	pt.put("LIST_PRICE_INVALID", m_LIST_PRICE_INVALID);
	pt.put("PRICE_CANNOT_BE_DETERMINED", m_PRICE_CANNOT_BE_DETERMINED);
	return pt;
}

void CatalogsFeedValidationErrors::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_FETCH_ERROR = pt.get("FETCH_ERROR", 0);
	m_FETCH_INACTIVE_FEED_ERROR = pt.get("FETCH_INACTIVE_FEED_ERROR", 0);
	m_ENCODING_ERROR = pt.get("ENCODING_ERROR", 0);
	m_DELIMITER_ERROR = pt.get("DELIMITER_ERROR", 0);
	m_REQUIRED_COLUMNS_MISSING = pt.get("REQUIRED_COLUMNS_MISSING", 0);
	m_DUPLICATE_PRODUCTS = pt.get("DUPLICATE_PRODUCTS", 0);
	m_IMAGE_LINK_INVALID = pt.get("IMAGE_LINK_INVALID", 0);
	m_ITEMID_MISSING = pt.get("ITEMID_MISSING", 0);
	m_TITLE_MISSING = pt.get("TITLE_MISSING", 0);
	m_DESCRIPTION_MISSING = pt.get("DESCRIPTION_MISSING", 0);
	m_PRODUCT_LINK_MISSING = pt.get("PRODUCT_LINK_MISSING", 0);
	m_IMAGE_LINK_MISSING = pt.get("IMAGE_LINK_MISSING", 0);
	m_AVAILABILITY_INVALID = pt.get("AVAILABILITY_INVALID", 0);
	m_PRODUCT_PRICE_INVALID = pt.get("PRODUCT_PRICE_INVALID", 0);
	m_LINK_FORMAT_INVALID = pt.get("LINK_FORMAT_INVALID", 0);
	m_PARSE_LINE_ERROR = pt.get("PARSE_LINE_ERROR", 0);
	m_ADWORDS_FORMAT_INVALID = pt.get("ADWORDS_FORMAT_INVALID", 0);
	m_INTERNAL_SERVICE_ERROR = pt.get("INTERNAL_SERVICE_ERROR", 0);
	m_NO_VERIFIED_DOMAIN = pt.get("NO_VERIFIED_DOMAIN", 0);
	m_ADULT_INVALID = pt.get("ADULT_INVALID", 0);
	m_IMAGE_LINK_LENGTH_TOO_LONG = pt.get("IMAGE_LINK_LENGTH_TOO_LONG", 0);
	m_INVALID_DOMAIN = pt.get("INVALID_DOMAIN", 0);
	m_FEED_LENGTH_TOO_LONG = pt.get("FEED_LENGTH_TOO_LONG", 0);
	m_LINK_LENGTH_TOO_LONG = pt.get("LINK_LENGTH_TOO_LONG", 0);
	m_MALFORMED_XML = pt.get("MALFORMED_XML", 0);
	m_PRICE_MISSING = pt.get("PRICE_MISSING", 0);
	m_FEED_TOO_SMALL = pt.get("FEED_TOO_SMALL", 0);
	m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED = pt.get("MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED", 0);
	m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE = pt.get("ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE", 0);
	m_PINJOIN_CONTENT_UNSAFE = pt.get("PINJOIN_CONTENT_UNSAFE", 0);
	m_BLOCKLISTED_IMAGE_SIGNATURE = pt.get("BLOCKLISTED_IMAGE_SIGNATURE", 0);
	m_LIST_PRICE_INVALID = pt.get("LIST_PRICE_INVALID", 0);
	m_PRICE_CANNOT_BE_DETERMINED = pt.get("PRICE_CANNOT_BE_DETERMINED", 0);
}

int32_t CatalogsFeedValidationErrors::getFETCHERROR() const
{
    return m_FETCH_ERROR;
}

void CatalogsFeedValidationErrors::setFETCHERROR(int32_t value)
{
    m_FETCH_ERROR = value;
}


int32_t CatalogsFeedValidationErrors::getFETCHINACTIVEFEEDERROR() const
{
    return m_FETCH_INACTIVE_FEED_ERROR;
}

void CatalogsFeedValidationErrors::setFETCHINACTIVEFEEDERROR(int32_t value)
{
    m_FETCH_INACTIVE_FEED_ERROR = value;
}


int32_t CatalogsFeedValidationErrors::getENCODINGERROR() const
{
    return m_ENCODING_ERROR;
}

void CatalogsFeedValidationErrors::setENCODINGERROR(int32_t value)
{
    m_ENCODING_ERROR = value;
}


int32_t CatalogsFeedValidationErrors::getDELIMITERERROR() const
{
    return m_DELIMITER_ERROR;
}

void CatalogsFeedValidationErrors::setDELIMITERERROR(int32_t value)
{
    m_DELIMITER_ERROR = value;
}


int32_t CatalogsFeedValidationErrors::getREQUIREDCOLUMNSMISSING() const
{
    return m_REQUIRED_COLUMNS_MISSING;
}

void CatalogsFeedValidationErrors::setREQUIREDCOLUMNSMISSING(int32_t value)
{
    m_REQUIRED_COLUMNS_MISSING = value;
}


int32_t CatalogsFeedValidationErrors::getDUPLICATEPRODUCTS() const
{
    return m_DUPLICATE_PRODUCTS;
}

void CatalogsFeedValidationErrors::setDUPLICATEPRODUCTS(int32_t value)
{
    m_DUPLICATE_PRODUCTS = value;
}


int32_t CatalogsFeedValidationErrors::getIMAGELINKINVALID() const
{
    return m_IMAGE_LINK_INVALID;
}

void CatalogsFeedValidationErrors::setIMAGELINKINVALID(int32_t value)
{
    m_IMAGE_LINK_INVALID = value;
}


int32_t CatalogsFeedValidationErrors::getITEMIDMISSING() const
{
    return m_ITEMID_MISSING;
}

void CatalogsFeedValidationErrors::setITEMIDMISSING(int32_t value)
{
    m_ITEMID_MISSING = value;
}


int32_t CatalogsFeedValidationErrors::getTITLEMISSING() const
{
    return m_TITLE_MISSING;
}

void CatalogsFeedValidationErrors::setTITLEMISSING(int32_t value)
{
    m_TITLE_MISSING = value;
}


int32_t CatalogsFeedValidationErrors::getDESCRIPTIONMISSING() const
{
    return m_DESCRIPTION_MISSING;
}

void CatalogsFeedValidationErrors::setDESCRIPTIONMISSING(int32_t value)
{
    m_DESCRIPTION_MISSING = value;
}


int32_t CatalogsFeedValidationErrors::getPRODUCTLINKMISSING() const
{
    return m_PRODUCT_LINK_MISSING;
}

void CatalogsFeedValidationErrors::setPRODUCTLINKMISSING(int32_t value)
{
    m_PRODUCT_LINK_MISSING = value;
}


int32_t CatalogsFeedValidationErrors::getIMAGELINKMISSING() const
{
    return m_IMAGE_LINK_MISSING;
}

void CatalogsFeedValidationErrors::setIMAGELINKMISSING(int32_t value)
{
    m_IMAGE_LINK_MISSING = value;
}


int32_t CatalogsFeedValidationErrors::getAVAILABILITYINVALID() const
{
    return m_AVAILABILITY_INVALID;
}

void CatalogsFeedValidationErrors::setAVAILABILITYINVALID(int32_t value)
{
    m_AVAILABILITY_INVALID = value;
}


int32_t CatalogsFeedValidationErrors::getPRODUCTPRICEINVALID() const
{
    return m_PRODUCT_PRICE_INVALID;
}

void CatalogsFeedValidationErrors::setPRODUCTPRICEINVALID(int32_t value)
{
    m_PRODUCT_PRICE_INVALID = value;
}


int32_t CatalogsFeedValidationErrors::getLINKFORMATINVALID() const
{
    return m_LINK_FORMAT_INVALID;
}

void CatalogsFeedValidationErrors::setLINKFORMATINVALID(int32_t value)
{
    m_LINK_FORMAT_INVALID = value;
}


int32_t CatalogsFeedValidationErrors::getPARSELINEERROR() const
{
    return m_PARSE_LINE_ERROR;
}

void CatalogsFeedValidationErrors::setPARSELINEERROR(int32_t value)
{
    m_PARSE_LINE_ERROR = value;
}


int32_t CatalogsFeedValidationErrors::getADWORDSFORMATINVALID() const
{
    return m_ADWORDS_FORMAT_INVALID;
}

void CatalogsFeedValidationErrors::setADWORDSFORMATINVALID(int32_t value)
{
    m_ADWORDS_FORMAT_INVALID = value;
}


int32_t CatalogsFeedValidationErrors::getINTERNALSERVICEERROR() const
{
    return m_INTERNAL_SERVICE_ERROR;
}

void CatalogsFeedValidationErrors::setINTERNALSERVICEERROR(int32_t value)
{
    m_INTERNAL_SERVICE_ERROR = value;
}


int32_t CatalogsFeedValidationErrors::getNOVERIFIEDDOMAIN() const
{
    return m_NO_VERIFIED_DOMAIN;
}

void CatalogsFeedValidationErrors::setNOVERIFIEDDOMAIN(int32_t value)
{
    m_NO_VERIFIED_DOMAIN = value;
}


int32_t CatalogsFeedValidationErrors::getADULTINVALID() const
{
    return m_ADULT_INVALID;
}

void CatalogsFeedValidationErrors::setADULTINVALID(int32_t value)
{
    m_ADULT_INVALID = value;
}


int32_t CatalogsFeedValidationErrors::getIMAGELINKLENGTHTOOLONG() const
{
    return m_IMAGE_LINK_LENGTH_TOO_LONG;
}

void CatalogsFeedValidationErrors::setIMAGELINKLENGTHTOOLONG(int32_t value)
{
    m_IMAGE_LINK_LENGTH_TOO_LONG = value;
}


int32_t CatalogsFeedValidationErrors::getINVALIDDOMAIN() const
{
    return m_INVALID_DOMAIN;
}

void CatalogsFeedValidationErrors::setINVALIDDOMAIN(int32_t value)
{
    m_INVALID_DOMAIN = value;
}


int32_t CatalogsFeedValidationErrors::getFEEDLENGTHTOOLONG() const
{
    return m_FEED_LENGTH_TOO_LONG;
}

void CatalogsFeedValidationErrors::setFEEDLENGTHTOOLONG(int32_t value)
{
    m_FEED_LENGTH_TOO_LONG = value;
}


int32_t CatalogsFeedValidationErrors::getLINKLENGTHTOOLONG() const
{
    return m_LINK_LENGTH_TOO_LONG;
}

void CatalogsFeedValidationErrors::setLINKLENGTHTOOLONG(int32_t value)
{
    m_LINK_LENGTH_TOO_LONG = value;
}


int32_t CatalogsFeedValidationErrors::getMALFORMEDXML() const
{
    return m_MALFORMED_XML;
}

void CatalogsFeedValidationErrors::setMALFORMEDXML(int32_t value)
{
    m_MALFORMED_XML = value;
}


int32_t CatalogsFeedValidationErrors::getPRICEMISSING() const
{
    return m_PRICE_MISSING;
}

void CatalogsFeedValidationErrors::setPRICEMISSING(int32_t value)
{
    m_PRICE_MISSING = value;
}


int32_t CatalogsFeedValidationErrors::getFEEDTOOSMALL() const
{
    return m_FEED_TOO_SMALL;
}

void CatalogsFeedValidationErrors::setFEEDTOOSMALL(int32_t value)
{
    m_FEED_TOO_SMALL = value;
}


int32_t CatalogsFeedValidationErrors::getMAXITEMSPERITEMGROUPEXCEEDED() const
{
    return m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED;
}

void CatalogsFeedValidationErrors::setMAXITEMSPERITEMGROUPEXCEEDED(int32_t value)
{
    m_MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED = value;
}


int32_t CatalogsFeedValidationErrors::getITEMMAINIMAGEDOWNLOADFAILURE() const
{
    return m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE;
}

void CatalogsFeedValidationErrors::setITEMMAINIMAGEDOWNLOADFAILURE(int32_t value)
{
    m_ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE = value;
}


int32_t CatalogsFeedValidationErrors::getPINJOINCONTENTUNSAFE() const
{
    return m_PINJOIN_CONTENT_UNSAFE;
}

void CatalogsFeedValidationErrors::setPINJOINCONTENTUNSAFE(int32_t value)
{
    m_PINJOIN_CONTENT_UNSAFE = value;
}


int32_t CatalogsFeedValidationErrors::getBLOCKLISTEDIMAGESIGNATURE() const
{
    return m_BLOCKLISTED_IMAGE_SIGNATURE;
}

void CatalogsFeedValidationErrors::setBLOCKLISTEDIMAGESIGNATURE(int32_t value)
{
    m_BLOCKLISTED_IMAGE_SIGNATURE = value;
}


int32_t CatalogsFeedValidationErrors::getLISTPRICEINVALID() const
{
    return m_LIST_PRICE_INVALID;
}

void CatalogsFeedValidationErrors::setLISTPRICEINVALID(int32_t value)
{
    m_LIST_PRICE_INVALID = value;
}


int32_t CatalogsFeedValidationErrors::getPRICECANNOTBEDETERMINED() const
{
    return m_PRICE_CANNOT_BE_DETERMINED;
}

void CatalogsFeedValidationErrors::setPRICECANNOTBEDETERMINED(int32_t value)
{
    m_PRICE_CANNOT_BE_DETERMINED = value;
}



std::vector<CatalogsFeedValidationErrors> createCatalogsFeedValidationErrorsVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CatalogsFeedValidationErrors>();
    for (const auto& child: pt) {
        vec.emplace_back(CatalogsFeedValidationErrors(child.second));
    }

    return vec;
}

}
}
}
}

