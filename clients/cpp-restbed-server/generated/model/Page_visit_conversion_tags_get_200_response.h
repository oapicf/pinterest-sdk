/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Page_visit_conversion_tags_get_200_response.h
 *
 * 
 */

#ifndef Page_visit_conversion_tags_get_200_response_H_
#define Page_visit_conversion_tags_get_200_response_H_



#include <string>
#include "ConversionEventResponse.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "Paginated.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  Page_visit_conversion_tags_get_200_response : public Paginated
{
public:
    Page_visit_conversion_tags_get_200_response() = default;
    explicit Page_visit_conversion_tags_get_200_response(boost::property_tree::ptree const& pt);
    virtual ~Page_visit_conversion_tags_get_200_response() = default;

    Page_visit_conversion_tags_get_200_response(const Page_visit_conversion_tags_get_200_response& other) = default; // copy constructor
    Page_visit_conversion_tags_get_200_response(Page_visit_conversion_tags_get_200_response&& other) noexcept = default; // move constructor

    Page_visit_conversion_tags_get_200_response& operator=(const Page_visit_conversion_tags_get_200_response& other) = default; // copy assignment
    Page_visit_conversion_tags_get_200_response& operator=(Page_visit_conversion_tags_get_200_response&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// Page_visit_conversion_tags_get_200_response members

    /// <summary>
    /// 
    /// </summary>
    std::vector<ConversionEventResponse> getItems() const;
    void setItems(std::vector<ConversionEventResponse> value);

    /// <summary>
    /// 
    /// </summary>
    std::string getBookmark() const;
    void setBookmark(std::string value);

protected:
    std::vector<ConversionEventResponse> m_Items;
    std::string m_Bookmark = "";
};

std::vector<Page_visit_conversion_tags_get_200_response> createPage_visit_conversion_tags_get_200_responseVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<Page_visit_conversion_tags_get_200_response>(const Page_visit_conversion_tags_get_200_response& val) {
    return val.toPropertyTree();
}

template<>
inline Page_visit_conversion_tags_get_200_response fromPt<Page_visit_conversion_tags_get_200_response>(const boost::property_tree::ptree& pt) {
    Page_visit_conversion_tags_get_200_response ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* Page_visit_conversion_tags_get_200_response_H_ */
