/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UpdateInvitesResultsResponseArray.h
 *
 * 
 */

#ifndef UpdateInvitesResultsResponseArray_H_
#define UpdateInvitesResultsResponseArray_H_



#include "UpdateInvitesResultsResponseArray_items_inner.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  UpdateInvitesResultsResponseArray 
{
public:
    UpdateInvitesResultsResponseArray() = default;
    explicit UpdateInvitesResultsResponseArray(boost::property_tree::ptree const& pt);
    virtual ~UpdateInvitesResultsResponseArray() = default;

    UpdateInvitesResultsResponseArray(const UpdateInvitesResultsResponseArray& other) = default; // copy constructor
    UpdateInvitesResultsResponseArray(UpdateInvitesResultsResponseArray&& other) noexcept = default; // move constructor

    UpdateInvitesResultsResponseArray& operator=(const UpdateInvitesResultsResponseArray& other) = default; // copy assignment
    UpdateInvitesResultsResponseArray& operator=(UpdateInvitesResultsResponseArray&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// UpdateInvitesResultsResponseArray members

    /// <summary>
    /// List of invite/Request action status. If there is an error, an exception object will be returned. If the action was successfully completed, an invite object will be returned.
    /// </summary>
    std::vector<UpdateInvitesResultsResponseArray_items_inner> getItems() const;
    void setItems(std::vector<UpdateInvitesResultsResponseArray_items_inner> value);

protected:
    std::vector<UpdateInvitesResultsResponseArray_items_inner> m_Items;
};

std::vector<UpdateInvitesResultsResponseArray> createUpdateInvitesResultsResponseArrayVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<UpdateInvitesResultsResponseArray>(const UpdateInvitesResultsResponseArray& val) {
    return val.toPropertyTree();
}

template<>
inline UpdateInvitesResultsResponseArray fromPt<UpdateInvitesResultsResponseArray>(const boost::property_tree::ptree& pt) {
    UpdateInvitesResultsResponseArray ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* UpdateInvitesResultsResponseArray_H_ */
