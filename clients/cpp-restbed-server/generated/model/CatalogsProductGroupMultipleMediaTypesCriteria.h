/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsProductGroupMultipleMediaTypesCriteria.h
 *
 * 
 */

#ifndef CatalogsProductGroupMultipleMediaTypesCriteria_H_
#define CatalogsProductGroupMultipleMediaTypesCriteria_H_



#include "MediaType.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CatalogsProductGroupMultipleMediaTypesCriteria 
{
public:
    CatalogsProductGroupMultipleMediaTypesCriteria() = default;
    explicit CatalogsProductGroupMultipleMediaTypesCriteria(boost::property_tree::ptree const& pt);
    virtual ~CatalogsProductGroupMultipleMediaTypesCriteria() = default;

    CatalogsProductGroupMultipleMediaTypesCriteria(const CatalogsProductGroupMultipleMediaTypesCriteria& other) = default; // copy constructor
    CatalogsProductGroupMultipleMediaTypesCriteria(CatalogsProductGroupMultipleMediaTypesCriteria&& other) noexcept = default; // move constructor

    CatalogsProductGroupMultipleMediaTypesCriteria& operator=(const CatalogsProductGroupMultipleMediaTypesCriteria& other) = default; // copy assignment
    CatalogsProductGroupMultipleMediaTypesCriteria& operator=(CatalogsProductGroupMultipleMediaTypesCriteria&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsProductGroupMultipleMediaTypesCriteria members

    /// <summary>
    /// 
    /// </summary>
    std::vector<MediaType> getValues() const;
    void setValues(std::vector<MediaType> value);

    /// <summary>
    /// 
    /// </summary>
    bool isNegated() const;
    void setNegated(bool value);

protected:
    std::vector<MediaType> m_Values;
    bool m_Negated = false;
};

std::vector<CatalogsProductGroupMultipleMediaTypesCriteria> createCatalogsProductGroupMultipleMediaTypesCriteriaVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsProductGroupMultipleMediaTypesCriteria>(const CatalogsProductGroupMultipleMediaTypesCriteria& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsProductGroupMultipleMediaTypesCriteria fromPt<CatalogsProductGroupMultipleMediaTypesCriteria>(const boost::property_tree::ptree& pt) {
    CatalogsProductGroupMultipleMediaTypesCriteria ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsProductGroupMultipleMediaTypesCriteria_H_ */
