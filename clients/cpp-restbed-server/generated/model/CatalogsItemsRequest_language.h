/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsItemsRequest_language.h
 *
 * We recommend using the CatalogsLocale values.
 */

#ifndef CatalogsItemsRequest_language_H_
#define CatalogsItemsRequest_language_H_



#include "Language.h"
#include "CatalogsLocale.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "CatalogsLocale.h"
#include "Language.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// We recommend using the CatalogsLocale values.
/// </summary>
class  CatalogsItemsRequest_language : public CatalogsLocale, public Language
{
public:
    CatalogsItemsRequest_language() = default;
    explicit CatalogsItemsRequest_language(boost::property_tree::ptree const& pt);
    virtual ~CatalogsItemsRequest_language() = default;

    CatalogsItemsRequest_language(const CatalogsItemsRequest_language& other) = default; // copy constructor
    CatalogsItemsRequest_language(CatalogsItemsRequest_language&& other) noexcept = default; // move constructor

    CatalogsItemsRequest_language& operator=(const CatalogsItemsRequest_language& other) = default; // copy assignment
    CatalogsItemsRequest_language& operator=(CatalogsItemsRequest_language&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsItemsRequest_language members

protected:
};

std::vector<CatalogsItemsRequest_language> createCatalogsItemsRequest_languageVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsItemsRequest_language>(const CatalogsItemsRequest_language& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsItemsRequest_language fromPt<CatalogsItemsRequest_language>(const boost::property_tree::ptree& pt) {
    CatalogsItemsRequest_language ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsItemsRequest_language_H_ */
