/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PinMediaWithVideo.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

PinMediaWithVideo::PinMediaWithVideo(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string PinMediaWithVideo::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void PinMediaWithVideo::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree PinMediaWithVideo::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("media_type", m_Media_type);
	pt.add_child("images", m_Images.toPropertyTree());
	pt.put("cover_image_url", m_Cover_image_url);
	pt.put("video_url", m_Video_url);
	pt.put("duration", m_Duration);
	pt.put("height", m_Height);
	pt.put("width", m_Width);
	return pt;
}

void PinMediaWithVideo::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Media_type = pt.get("media_type", "");
	if (pt.get_child_optional("images")) {
        m_Images = fromPt<PinMediaWithImage_allOf_images>(pt.get_child("images"));
	}
	m_Cover_image_url = pt.get("cover_image_url", "");
	m_Video_url = pt.get("video_url", "");
	m_Duration = pt.get("duration", 0.0);
	m_Height = pt.get("height", 0);
	m_Width = pt.get("width", 0);
}

std::string PinMediaWithVideo::getMediaType() const
{
    return m_Media_type;
}

void PinMediaWithVideo::setMediaType(std::string value)
{
    m_Media_type = value;
}


PinMediaWithImage_allOf_images PinMediaWithVideo::getImages() const
{
    return m_Images;
}

void PinMediaWithVideo::setImages(PinMediaWithImage_allOf_images value)
{
    m_Images = value;
}


std::string PinMediaWithVideo::getCoverImageUrl() const
{
    return m_Cover_image_url;
}

void PinMediaWithVideo::setCoverImageUrl(std::string value)
{
    m_Cover_image_url = value;
}


std::string PinMediaWithVideo::getVideoUrl() const
{
    return m_Video_url;
}

void PinMediaWithVideo::setVideoUrl(std::string value)
{
    m_Video_url = value;
}


double PinMediaWithVideo::getDuration() const
{
    return m_Duration;
}

void PinMediaWithVideo::setDuration(double value)
{
    m_Duration = value;
}


int32_t PinMediaWithVideo::getHeight() const
{
    return m_Height;
}

void PinMediaWithVideo::setHeight(int32_t value)
{
    m_Height = value;
}


int32_t PinMediaWithVideo::getWidth() const
{
    return m_Width;
}

void PinMediaWithVideo::setWidth(int32_t value)
{
    m_Width = value;
}



std::vector<PinMediaWithVideo> createPinMediaWithVideoVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<PinMediaWithVideo>();
    for (const auto& child: pt) {
        vec.emplace_back(PinMediaWithVideo(child.second));
    }

    return vec;
}

}
}
}
}

