/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CatalogsCreativeAssetsProductGroupFilterKeys.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CatalogsCreativeAssetsProductGroupFilterKeys::CatalogsCreativeAssetsProductGroupFilterKeys(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string CatalogsCreativeAssetsProductGroupFilterKeys::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CatalogsCreativeAssetsProductGroupFilterKeys::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	return pt;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
}

CatalogsProductGroupMultipleStringCriteria CatalogsCreativeAssetsProductGroupFilterKeys::getCREATIVEASSETSID() const
{
    return m_CREATIVE_ASSETS_ID;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::setCREATIVEASSETSID(CatalogsProductGroupMultipleStringCriteria value)
{
    m_CREATIVE_ASSETS_ID = value;
}


CatalogsProductGroupMultipleStringCriteria CatalogsCreativeAssetsProductGroupFilterKeys::getCUSTOMLABEL0() const
{
    return m_CUSTOM_LABEL_0;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::setCUSTOMLABEL0(CatalogsProductGroupMultipleStringCriteria value)
{
    m_CUSTOM_LABEL_0 = value;
}


CatalogsProductGroupMultipleStringCriteria CatalogsCreativeAssetsProductGroupFilterKeys::getCUSTOMLABEL1() const
{
    return m_CUSTOM_LABEL_1;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::setCUSTOMLABEL1(CatalogsProductGroupMultipleStringCriteria value)
{
    m_CUSTOM_LABEL_1 = value;
}


CatalogsProductGroupMultipleStringCriteria CatalogsCreativeAssetsProductGroupFilterKeys::getCUSTOMLABEL2() const
{
    return m_CUSTOM_LABEL_2;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::setCUSTOMLABEL2(CatalogsProductGroupMultipleStringCriteria value)
{
    m_CUSTOM_LABEL_2 = value;
}


CatalogsProductGroupMultipleStringCriteria CatalogsCreativeAssetsProductGroupFilterKeys::getCUSTOMLABEL3() const
{
    return m_CUSTOM_LABEL_3;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::setCUSTOMLABEL3(CatalogsProductGroupMultipleStringCriteria value)
{
    m_CUSTOM_LABEL_3 = value;
}


CatalogsProductGroupMultipleStringCriteria CatalogsCreativeAssetsProductGroupFilterKeys::getCUSTOMLABEL4() const
{
    return m_CUSTOM_LABEL_4;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::setCUSTOMLABEL4(CatalogsProductGroupMultipleStringCriteria value)
{
    m_CUSTOM_LABEL_4 = value;
}


CatalogsProductGroupMultipleStringListCriteria CatalogsCreativeAssetsProductGroupFilterKeys::getGOOGLEPRODUCTCATEGORY6() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_6;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::setGOOGLEPRODUCTCATEGORY6(CatalogsProductGroupMultipleStringListCriteria value)
{
    m_GOOGLE_PRODUCT_CATEGORY_6 = value;
}


CatalogsProductGroupMultipleStringListCriteria CatalogsCreativeAssetsProductGroupFilterKeys::getGOOGLEPRODUCTCATEGORY5() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_5;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::setGOOGLEPRODUCTCATEGORY5(CatalogsProductGroupMultipleStringListCriteria value)
{
    m_GOOGLE_PRODUCT_CATEGORY_5 = value;
}


CatalogsProductGroupMultipleStringListCriteria CatalogsCreativeAssetsProductGroupFilterKeys::getGOOGLEPRODUCTCATEGORY4() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_4;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::setGOOGLEPRODUCTCATEGORY4(CatalogsProductGroupMultipleStringListCriteria value)
{
    m_GOOGLE_PRODUCT_CATEGORY_4 = value;
}


CatalogsProductGroupMultipleStringListCriteria CatalogsCreativeAssetsProductGroupFilterKeys::getGOOGLEPRODUCTCATEGORY3() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_3;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::setGOOGLEPRODUCTCATEGORY3(CatalogsProductGroupMultipleStringListCriteria value)
{
    m_GOOGLE_PRODUCT_CATEGORY_3 = value;
}


CatalogsProductGroupMultipleStringListCriteria CatalogsCreativeAssetsProductGroupFilterKeys::getGOOGLEPRODUCTCATEGORY2() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_2;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::setGOOGLEPRODUCTCATEGORY2(CatalogsProductGroupMultipleStringListCriteria value)
{
    m_GOOGLE_PRODUCT_CATEGORY_2 = value;
}


CatalogsProductGroupMultipleStringListCriteria CatalogsCreativeAssetsProductGroupFilterKeys::getGOOGLEPRODUCTCATEGORY1() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_1;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::setGOOGLEPRODUCTCATEGORY1(CatalogsProductGroupMultipleStringListCriteria value)
{
    m_GOOGLE_PRODUCT_CATEGORY_1 = value;
}


CatalogsProductGroupMultipleStringListCriteria CatalogsCreativeAssetsProductGroupFilterKeys::getGOOGLEPRODUCTCATEGORY0() const
{
    return m_GOOGLE_PRODUCT_CATEGORY_0;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::setGOOGLEPRODUCTCATEGORY0(CatalogsProductGroupMultipleStringListCriteria value)
{
    m_GOOGLE_PRODUCT_CATEGORY_0 = value;
}


CatalogsProductGroupMultipleMediaTypesCriteria CatalogsCreativeAssetsProductGroupFilterKeys::getMEDIATYPE() const
{
    return m_MEDIA_TYPE;
}

void CatalogsCreativeAssetsProductGroupFilterKeys::setMEDIATYPE(CatalogsProductGroupMultipleMediaTypesCriteria value)
{
    m_MEDIA_TYPE = value;
}



std::vector<CatalogsCreativeAssetsProductGroupFilterKeys> createCatalogsCreativeAssetsProductGroupFilterKeysVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CatalogsCreativeAssetsProductGroupFilterKeys>();
    for (const auto& child: pt) {
        vec.emplace_back(CatalogsCreativeAssetsProductGroupFilterKeys(child.second));
    }

    return vec;
}

}
}
}
}

