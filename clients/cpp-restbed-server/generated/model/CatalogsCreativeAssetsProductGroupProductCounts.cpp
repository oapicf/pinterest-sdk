/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CatalogsCreativeAssetsProductGroupProductCounts.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CatalogsCreativeAssetsProductGroupProductCounts::CatalogsCreativeAssetsProductGroupProductCounts(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string CatalogsCreativeAssetsProductGroupProductCounts::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void CatalogsCreativeAssetsProductGroupProductCounts::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CatalogsCreativeAssetsProductGroupProductCounts::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("catalog_type", m_Catalog_type);
	pt.put("total", m_Total);
	pt.put("videos", m_Videos);
	return pt;
}

void CatalogsCreativeAssetsProductGroupProductCounts::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	setCatalogType(pt.get("catalog_type", ""));
	m_Total = pt.get("total", 0.0);
	m_Videos = pt.get("videos", 0.0);
}

std::string CatalogsCreativeAssetsProductGroupProductCounts::getCatalogType() const
{
    return m_Catalog_type;
}

void CatalogsCreativeAssetsProductGroupProductCounts::setCatalogType(std::string value)
{
    static const std::array<std::string, 1> allowedValues = {
        "CREATIVE_ASSETS"
    };

    if (std::find(allowedValues.begin(), allowedValues.end(), value) != allowedValues.end()) {
		m_Catalog_type = value;
	} else {
		throw std::runtime_error("Value " + boost::lexical_cast<std::string>(value) + " not allowed");
	}
}


double CatalogsCreativeAssetsProductGroupProductCounts::getTotal() const
{
    return m_Total;
}

void CatalogsCreativeAssetsProductGroupProductCounts::setTotal(double value)
{
    m_Total = value;
}


double CatalogsCreativeAssetsProductGroupProductCounts::getVideos() const
{
    return m_Videos;
}

void CatalogsCreativeAssetsProductGroupProductCounts::setVideos(double value)
{
    m_Videos = value;
}



std::vector<CatalogsCreativeAssetsProductGroupProductCounts> createCatalogsCreativeAssetsProductGroupProductCountsVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CatalogsCreativeAssetsProductGroupProductCounts>();
    for (const auto& child: pt) {
        vec.emplace_back(CatalogsCreativeAssetsProductGroupProductCounts(child.second));
    }

    return vec;
}

}
}
}
}

