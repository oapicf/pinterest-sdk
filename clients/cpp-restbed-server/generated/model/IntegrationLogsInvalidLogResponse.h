/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * IntegrationLogsInvalidLogResponse.h
 *
 * Schema describing the response when a log has invalid fields.
 */

#ifndef IntegrationLogsInvalidLogResponse_H_
#define IntegrationLogsInvalidLogResponse_H_



#include "IntegrationLogsInvalidLogResponse_rejected_logs_inner.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Schema describing the response when a log has invalid fields.
/// </summary>
class  IntegrationLogsInvalidLogResponse 
{
public:
    IntegrationLogsInvalidLogResponse() = default;
    explicit IntegrationLogsInvalidLogResponse(boost::property_tree::ptree const& pt);
    virtual ~IntegrationLogsInvalidLogResponse() = default;

    IntegrationLogsInvalidLogResponse(const IntegrationLogsInvalidLogResponse& other) = default; // copy constructor
    IntegrationLogsInvalidLogResponse(IntegrationLogsInvalidLogResponse&& other) noexcept = default; // move constructor

    IntegrationLogsInvalidLogResponse& operator=(const IntegrationLogsInvalidLogResponse& other) = default; // copy assignment
    IntegrationLogsInvalidLogResponse& operator=(IntegrationLogsInvalidLogResponse&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// IntegrationLogsInvalidLogResponse members

    /// <summary>
    /// 
    /// </summary>
    std::vector<IntegrationLogsInvalidLogResponse_rejected_logs_inner> getRejectedLogs() const;
    void setRejectedLogs(std::vector<IntegrationLogsInvalidLogResponse_rejected_logs_inner> value);

protected:
    std::vector<IntegrationLogsInvalidLogResponse_rejected_logs_inner> m_Rejected_logs;
};

std::vector<IntegrationLogsInvalidLogResponse> createIntegrationLogsInvalidLogResponseVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<IntegrationLogsInvalidLogResponse>(const IntegrationLogsInvalidLogResponse& val) {
    return val.toPropertyTree();
}

template<>
inline IntegrationLogsInvalidLogResponse fromPt<IntegrationLogsInvalidLogResponse>(const boost::property_tree::ptree& pt) {
    IntegrationLogsInvalidLogResponse ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* IntegrationLogsInvalidLogResponse_H_ */
