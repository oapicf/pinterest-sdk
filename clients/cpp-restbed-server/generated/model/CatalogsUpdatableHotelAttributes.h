/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsUpdatableHotelAttributes.h
 *
 * 
 */

#ifndef CatalogsUpdatableHotelAttributes_H_
#define CatalogsUpdatableHotelAttributes_H_



#include "CatalogsHotelGuestRatings.h"
#include "CatalogsHotelAddress.h"
#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CatalogsUpdatableHotelAttributes 
{
public:
    CatalogsUpdatableHotelAttributes() = default;
    explicit CatalogsUpdatableHotelAttributes(boost::property_tree::ptree const& pt);
    virtual ~CatalogsUpdatableHotelAttributes() = default;

    CatalogsUpdatableHotelAttributes(const CatalogsUpdatableHotelAttributes& other) = default; // copy constructor
    CatalogsUpdatableHotelAttributes(CatalogsUpdatableHotelAttributes&& other) noexcept = default; // move constructor

    CatalogsUpdatableHotelAttributes& operator=(const CatalogsUpdatableHotelAttributes& other) = default; // copy assignment
    CatalogsUpdatableHotelAttributes& operator=(CatalogsUpdatableHotelAttributes&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsUpdatableHotelAttributes members

    /// <summary>
    /// The hotel&#39;s name.
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// Link to the product page
    /// </summary>
    std::string getLink() const;
    void setLink(std::string value);

    /// <summary>
    /// Brief description of the hotel.
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string value);

    /// <summary>
    /// The brand to which this hotel belongs to.
    /// </summary>
    std::string getBrand() const;
    void setBrand(std::string value);

    /// <summary>
    /// Latitude of the hotel.
    /// </summary>
    double getLatitude() const;
    void setLatitude(double value);

    /// <summary>
    /// Longitude of the hotel.
    /// </summary>
    double getLongitude() const;
    void setLongitude(double value);

    /// <summary>
    /// A list of neighborhoods where the hotel is located
    /// </summary>
    std::vector<std::string> getNeighborhood() const;
    void setNeighborhood(std::vector<std::string> value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsHotelAddress getAddress() const;
    void setAddress(CatalogsHotelAddress value);

    /// <summary>
    /// Custom grouping of hotels
    /// </summary>
    std::string getCustomLabel0() const;
    void setCustomLabel0(std::string value);

    /// <summary>
    /// Custom grouping of hotels
    /// </summary>
    std::string getCustomLabel1() const;
    void setCustomLabel1(std::string value);

    /// <summary>
    /// Custom grouping of hotels
    /// </summary>
    std::string getCustomLabel2() const;
    void setCustomLabel2(std::string value);

    /// <summary>
    /// Custom grouping of hotels
    /// </summary>
    std::string getCustomLabel3() const;
    void setCustomLabel3(std::string value);

    /// <summary>
    /// Custom grouping of hotels
    /// </summary>
    std::string getCustomLabel4() const;
    void setCustomLabel4(std::string value);

    /// <summary>
    /// The type of property. The category can be any type of internal description desired.
    /// </summary>
    std::string getCategory() const;
    void setCategory(std::string value);

    /// <summary>
    /// Base price of the hotel room per night followed by the ISO currency code
    /// </summary>
    std::string getBasePrice() const;
    void setBasePrice(std::string value);

    /// <summary>
    /// Sale price of a hotel room per night. Used to advertise discounts off the regular price of the hotel.
    /// </summary>
    std::string getSalePrice() const;
    void setSalePrice(std::string value);

    /// <summary>
    /// 
    /// </summary>
    CatalogsHotelGuestRatings getGuestRatings() const;
    void setGuestRatings(CatalogsHotelGuestRatings value);

protected:
    std::string m_Name = "";
    std::string m_Link = "";
    std::string m_Description = "";
    std::string m_Brand = "";
    double m_Latitude = 0.0;
    double m_Longitude = 0.0;
    std::vector<std::string> m_Neighborhood;
    CatalogsHotelAddress m_Address;
    std::string m_Custom_label_0 = "";
    std::string m_Custom_label_1 = "";
    std::string m_Custom_label_2 = "";
    std::string m_Custom_label_3 = "";
    std::string m_Custom_label_4 = "";
    std::string m_Category = "";
    std::string m_Base_price = "";
    std::string m_Sale_price = "";
    CatalogsHotelGuestRatings m_Guest_ratings;
};

std::vector<CatalogsUpdatableHotelAttributes> createCatalogsUpdatableHotelAttributesVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsUpdatableHotelAttributes>(const CatalogsUpdatableHotelAttributes& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsUpdatableHotelAttributes fromPt<CatalogsUpdatableHotelAttributes>(const boost::property_tree::ptree& pt) {
    CatalogsUpdatableHotelAttributes ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsUpdatableHotelAttributes_H_ */
