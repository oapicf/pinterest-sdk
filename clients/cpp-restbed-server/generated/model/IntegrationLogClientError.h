/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * IntegrationLogClientError.h
 *
 * System error details included in the log sent by the client.
 */

#ifndef IntegrationLogClientError_H_
#define IntegrationLogClientError_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// System error details included in the log sent by the client.
/// </summary>
class  IntegrationLogClientError 
{
public:
    IntegrationLogClientError() = default;
    explicit IntegrationLogClientError(boost::property_tree::ptree const& pt);
    virtual ~IntegrationLogClientError() = default;

    IntegrationLogClientError(const IntegrationLogClientError& other) = default; // copy constructor
    IntegrationLogClientError(IntegrationLogClientError&& other) noexcept = default; // move constructor

    IntegrationLogClientError& operator=(const IntegrationLogClientError& other) = default; // copy assignment
    IntegrationLogClientError& operator=(IntegrationLogClientError&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// IntegrationLogClientError members

    /// <summary>
    /// Original cause of the error.
    /// </summary>
    std::string getCause() const;
    void setCause(std::string value);

    /// <summary>
    /// Column number in the line of the file that raised the error.
    /// </summary>
    int32_t getColumnNumber() const;
    void setColumnNumber(int32_t value);

    /// <summary>
    /// Filename where the error happened.
    /// </summary>
    std::string getFileName() const;
    void setFileName(std::string value);

    /// <summary>
    /// Line number where the error happened.
    /// </summary>
    int32_t getLineNumber() const;
    void setLineNumber(int32_t value);

    /// <summary>
    /// Human-readable description of the error.
    /// </summary>
    std::string getMessage() const;
    void setMessage(std::string value);

    /// <summary>
    /// More detail about the message.
    /// </summary>
    std::string getMessageDetail() const;
    void setMessageDetail(std::string value);

    /// <summary>
    /// Filename where the error happened.
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// Integer that specifies the error code.
    /// </summary>
    int32_t getNumber() const;
    void setNumber(int32_t value);

    /// <summary>
    /// Stack trace of where the error happened.
    /// </summary>
    std::string getStackTrace() const;
    void setStackTrace(std::string value);

protected:
    std::string m_Cause = "";
    int32_t m_Column_number = 0;
    std::string m_File_name = "";
    int32_t m_Line_number = 0;
    std::string m_Message = "";
    std::string m_Message_detail = "";
    std::string m_Name = "";
    int32_t m_number = 0;
    std::string m_Stack_trace = "";
};

std::vector<IntegrationLogClientError> createIntegrationLogClientErrorVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<IntegrationLogClientError>(const IntegrationLogClientError& val) {
    return val.toPropertyTree();
}

template<>
inline IntegrationLogClientError fromPt<IntegrationLogClientError>(const boost::property_tree::ptree& pt) {
    IntegrationLogClientError ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* IntegrationLogClientError_H_ */
