/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TrendingKeywordsResponse_trends_inner.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

TrendingKeywordsResponse_trends_inner::TrendingKeywordsResponse_trends_inner(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string TrendingKeywordsResponse_trends_inner::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void TrendingKeywordsResponse_trends_inner::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree TrendingKeywordsResponse_trends_inner::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("keyword", m_Keyword);
	pt.put("pct_growth_wow", m_Pct_growth_wow);
	pt.put("pct_growth_mom", m_Pct_growth_mom);
	pt.put("pct_growth_yoy", m_Pct_growth_yoy);
	return pt;
}

void TrendingKeywordsResponse_trends_inner::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Keyword = pt.get("keyword", "");
	m_Pct_growth_wow = pt.get("pct_growth_wow", 0);
	m_Pct_growth_mom = pt.get("pct_growth_mom", 0);
	m_Pct_growth_yoy = pt.get("pct_growth_yoy", 0);
}

std::string TrendingKeywordsResponse_trends_inner::getKeyword() const
{
    return m_Keyword;
}

void TrendingKeywordsResponse_trends_inner::setKeyword(std::string value)
{
    m_Keyword = value;
}


int32_t TrendingKeywordsResponse_trends_inner::getPctGrowthWow() const
{
    return m_Pct_growth_wow;
}

void TrendingKeywordsResponse_trends_inner::setPctGrowthWow(int32_t value)
{
    m_Pct_growth_wow = value;
}


int32_t TrendingKeywordsResponse_trends_inner::getPctGrowthMom() const
{
    return m_Pct_growth_mom;
}

void TrendingKeywordsResponse_trends_inner::setPctGrowthMom(int32_t value)
{
    m_Pct_growth_mom = value;
}


int32_t TrendingKeywordsResponse_trends_inner::getPctGrowthYoy() const
{
    return m_Pct_growth_yoy;
}

void TrendingKeywordsResponse_trends_inner::setPctGrowthYoy(int32_t value)
{
    m_Pct_growth_yoy = value;
}


TrendingKeywordsResponse_trends_inner_time_series TrendingKeywordsResponse_trends_inner::getTimeSeries() const
{
    return m_Time_series;
}

void TrendingKeywordsResponse_trends_inner::setTimeSeries(TrendingKeywordsResponse_trends_inner_time_series value)
{
    m_Time_series = value;
}



std::vector<TrendingKeywordsResponse_trends_inner> createTrendingKeywordsResponse_trends_innerVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<TrendingKeywordsResponse_trends_inner>();
    for (const auto& child: pt) {
        vec.emplace_back(TrendingKeywordsResponse_trends_inner(child.second));
    }

    return vec;
}

}
}
}
}

