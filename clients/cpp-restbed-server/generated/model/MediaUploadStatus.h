/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MediaUploadStatus.h
 *
 * Media upload status
 */

#ifndef MediaUploadStatus_H_
#define MediaUploadStatus_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Media upload status
/// </summary>
class  MediaUploadStatus 
{
public:
    MediaUploadStatus() = default;
    explicit MediaUploadStatus(boost::property_tree::ptree const& pt);
    virtual ~MediaUploadStatus() = default;

    MediaUploadStatus(const MediaUploadStatus& other) = default; // copy constructor
    MediaUploadStatus(MediaUploadStatus&& other) noexcept = default; // move constructor

    MediaUploadStatus& operator=(const MediaUploadStatus& other) = default; // copy assignment
    MediaUploadStatus& operator=(MediaUploadStatus&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    std::string toString() const;
    void fromString(const std::string& str);

    /////////////////////////////////////////////
    /// MediaUploadStatus members
    std::string getEnumValue() const;
    void setEnumValue(const std::string& val);

protected:
    std::string m_MediaUploadStatusEnumValue;
};

std::vector<MediaUploadStatus> createMediaUploadStatusVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<MediaUploadStatus>(const MediaUploadStatus& val) {
    return val.toPropertyTree();
}

template<>
inline MediaUploadStatus fromPt<MediaUploadStatus>(const boost::property_tree::ptree& pt) {
    MediaUploadStatus ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* MediaUploadStatus_H_ */
