/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsItemsFilters.h
 *
 * 
 */

#ifndef CatalogsItemsFilters_H_
#define CatalogsItemsFilters_H_



#include "CatalogsRetailItemsFilter.h"
#include "CatalogsHotelItemsFilter.h"
#include <string>
#include <vector>
#include "CatalogsCreativeAssetsItemsFilter.h"
#include "CatalogsType.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "CatalogsRetailItemsFilter.h"
#include "CatalogsHotelItemsFilter.h"
#include "CatalogsCreativeAssetsItemsFilter.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CatalogsItemsFilters : public CatalogsRetailItemsFilter, public CatalogsHotelItemsFilter, public CatalogsCreativeAssetsItemsFilter
{
public:
    CatalogsItemsFilters() = default;
    explicit CatalogsItemsFilters(boost::property_tree::ptree const& pt);
    virtual ~CatalogsItemsFilters() = default;

    CatalogsItemsFilters(const CatalogsItemsFilters& other) = default; // copy constructor
    CatalogsItemsFilters(CatalogsItemsFilters&& other) noexcept = default; // move constructor

    CatalogsItemsFilters& operator=(const CatalogsItemsFilters& other) = default; // copy assignment
    CatalogsItemsFilters& operator=(CatalogsItemsFilters&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CatalogsItemsFilters members

    /// <summary>
    /// 
    /// </summary>
    CatalogsType getCatalogType() const;
    void setCatalogType(CatalogsType value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::string> getItemIds() const;
    void setItemIds(std::vector<std::string> value);

    /// <summary>
    /// Catalog id pertaining to the creative assets item. If not provided, default to oldest creative assets catalog
    /// </summary>
    std::string getCatalogId() const;
    void setCatalogId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::string> getHotelIds() const;
    void setHotelIds(std::vector<std::string> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::string> getCreativeAssetsIds() const;
    void setCreativeAssetsIds(std::vector<std::string> value);

protected:
    CatalogsType m_Catalog_type = CatalogsType{};
    std::vector<std::string> m_Item_ids;
    std::string m_Catalog_id = "";
    std::vector<std::string> m_Hotel_ids;
    std::vector<std::string> m_Creative_assets_ids;
};

std::vector<CatalogsItemsFilters> createCatalogsItemsFiltersVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CatalogsItemsFilters>(const CatalogsItemsFilters& val) {
    return val.toPropertyTree();
}

template<>
inline CatalogsItemsFilters fromPt<CatalogsItemsFilters>(const boost::property_tree::ptree& pt) {
    CatalogsItemsFilters ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CatalogsItemsFilters_H_ */
