/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DeletePartnersResponse.h
 *
 * An object with a list of partners that were deleted.
 */

#ifndef DeletePartnersResponse_H_
#define DeletePartnersResponse_H_



#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// An object with a list of partners that were deleted.
/// </summary>
class  DeletePartnersResponse 
{
public:
    DeletePartnersResponse() = default;
    explicit DeletePartnersResponse(boost::property_tree::ptree const& pt);
    virtual ~DeletePartnersResponse() = default;

    DeletePartnersResponse(const DeletePartnersResponse& other) = default; // copy constructor
    DeletePartnersResponse(DeletePartnersResponse&& other) noexcept = default; // move constructor

    DeletePartnersResponse& operator=(const DeletePartnersResponse& other) = default; // copy assignment
    DeletePartnersResponse& operator=(DeletePartnersResponse&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// DeletePartnersResponse members

    /// <summary>
    /// List of partners whose business partnership have been terminated.
    /// </summary>
    std::vector<std::string> getDeletedPartners() const;
    void setDeletedPartners(std::vector<std::string> value);

protected:
    std::vector<std::string> m_Deleted_partners;
};

std::vector<DeletePartnersResponse> createDeletePartnersResponseVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<DeletePartnersResponse>(const DeletePartnersResponse& val) {
    return val.toPropertyTree();
}

template<>
inline DeletePartnersResponse fromPt<DeletePartnersResponse>(const boost::property_tree::ptree& pt) {
    DeletePartnersResponse ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* DeletePartnersResponse_H_ */
