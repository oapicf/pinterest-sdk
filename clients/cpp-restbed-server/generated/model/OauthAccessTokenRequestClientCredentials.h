/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OauthAccessTokenRequestClientCredentials.h
 *
 * A request to receive a client token.
 */

#ifndef OauthAccessTokenRequestClientCredentials_H_
#define OauthAccessTokenRequestClientCredentials_H_



#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// A request to receive a client token.
/// </summary>
class  OauthAccessTokenRequestClientCredentials 
{
public:
    OauthAccessTokenRequestClientCredentials() = default;
    explicit OauthAccessTokenRequestClientCredentials(boost::property_tree::ptree const& pt);
    virtual ~OauthAccessTokenRequestClientCredentials() = default;

    OauthAccessTokenRequestClientCredentials(const OauthAccessTokenRequestClientCredentials& other) = default; // copy constructor
    OauthAccessTokenRequestClientCredentials(OauthAccessTokenRequestClientCredentials&& other) noexcept = default; // move constructor

    OauthAccessTokenRequestClientCredentials& operator=(const OauthAccessTokenRequestClientCredentials& other) = default; // copy assignment
    OauthAccessTokenRequestClientCredentials& operator=(OauthAccessTokenRequestClientCredentials&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// OauthAccessTokenRequestClientCredentials members

    /// <summary>
    /// 
    /// </summary>
    std::string getGrantType() const;
    void setGrantType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getScope() const;
    void setScope(std::string value);

protected:
    std::string m_Grant_type = "";
    std::string m_Scope = "";
};

std::vector<OauthAccessTokenRequestClientCredentials> createOauthAccessTokenRequestClientCredentialsVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OauthAccessTokenRequestClientCredentials>(const OauthAccessTokenRequestClientCredentials& val) {
    return val.toPropertyTree();
}

template<>
inline OauthAccessTokenRequestClientCredentials fromPt<OauthAccessTokenRequestClientCredentials>(const boost::property_tree::ptree& pt) {
    OauthAccessTokenRequestClientCredentials ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OauthAccessTokenRequestClientCredentials_H_ */
