/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CatalogsHotelAttributes.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CatalogsHotelAttributes::CatalogsHotelAttributes(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string CatalogsHotelAttributes::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void CatalogsHotelAttributes::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CatalogsHotelAttributes::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("name", m_Name);
	pt.put("link", m_Link);
	pt.put("description", m_Description);
	pt.put("brand", m_Brand);
	pt.put("latitude", m_Latitude);
	pt.put("longitude", m_Longitude);
	// generate tree for Neighborhood
    tmp_node.clear();
	if (!m_Neighborhood.empty()) {
        tmp_node = toPt(m_Neighborhood);
		pt.add_child("neighborhood", tmp_node);
		tmp_node.clear();
	}
	pt.add_child("address", m_Address.toPropertyTree());
	pt.put("custom_label_0", m_Custom_label_0);
	pt.put("custom_label_1", m_Custom_label_1);
	pt.put("custom_label_2", m_Custom_label_2);
	pt.put("custom_label_3", m_Custom_label_3);
	pt.put("custom_label_4", m_Custom_label_4);
	pt.put("category", m_Category);
	pt.put("base_price", m_Base_price);
	pt.put("sale_price", m_Sale_price);
	pt.add_child("guest_ratings", m_Guest_ratings.toPropertyTree());
	pt.add_child("main_image", m_Main_image.toPropertyTree());
	// generate tree for Additional_image_link
    tmp_node.clear();
	if (!m_Additional_image_link.empty()) {
        tmp_node = toPt(m_Additional_image_link);
		pt.add_child("additional_image_link", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void CatalogsHotelAttributes::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Name = pt.get("name", "");
	m_Link = pt.get("link", "");
	m_Description = pt.get("description", "");
	m_Brand = pt.get("brand", "");
	m_Latitude = pt.get("latitude", 0.0);
	m_Longitude = pt.get("longitude", 0.0);
	// push all items of Neighborhood into member
	if (pt.get_child_optional("neighborhood")) {
        m_Neighborhood = fromPt<std::vector<std::string>>(pt.get_child("neighborhood"));
	}
	if (pt.get_child_optional("address")) {
        m_Address = fromPt<CatalogsHotelAddress>(pt.get_child("address"));
	}
	m_Custom_label_0 = pt.get("custom_label_0", "");
	m_Custom_label_1 = pt.get("custom_label_1", "");
	m_Custom_label_2 = pt.get("custom_label_2", "");
	m_Custom_label_3 = pt.get("custom_label_3", "");
	m_Custom_label_4 = pt.get("custom_label_4", "");
	m_Category = pt.get("category", "");
	m_Base_price = pt.get("base_price", "");
	m_Sale_price = pt.get("sale_price", "");
	if (pt.get_child_optional("guest_ratings")) {
        m_Guest_ratings = fromPt<CatalogsHotelGuestRatings>(pt.get_child("guest_ratings"));
	}
	if (pt.get_child_optional("main_image")) {
        m_Main_image = fromPt<CatalogsHotelAttributes_allOf_main_image>(pt.get_child("main_image"));
	}
	// push all items of Additional_image_link into member
	if (pt.get_child_optional("additional_image_link")) {
        m_Additional_image_link = fromPt<std::vector<std::string>>(pt.get_child("additional_image_link"));
	}
}

std::string CatalogsHotelAttributes::getName() const
{
    return m_Name;
}

void CatalogsHotelAttributes::setName(std::string value)
{
    m_Name = value;
}


std::string CatalogsHotelAttributes::getLink() const
{
    return m_Link;
}

void CatalogsHotelAttributes::setLink(std::string value)
{
    m_Link = value;
}


std::string CatalogsHotelAttributes::getDescription() const
{
    return m_Description;
}

void CatalogsHotelAttributes::setDescription(std::string value)
{
    m_Description = value;
}


std::string CatalogsHotelAttributes::getBrand() const
{
    return m_Brand;
}

void CatalogsHotelAttributes::setBrand(std::string value)
{
    m_Brand = value;
}


double CatalogsHotelAttributes::getLatitude() const
{
    return m_Latitude;
}

void CatalogsHotelAttributes::setLatitude(double value)
{
    m_Latitude = value;
}


double CatalogsHotelAttributes::getLongitude() const
{
    return m_Longitude;
}

void CatalogsHotelAttributes::setLongitude(double value)
{
    m_Longitude = value;
}


std::vector<std::string> CatalogsHotelAttributes::getNeighborhood() const
{
    return m_Neighborhood;
}

void CatalogsHotelAttributes::setNeighborhood(std::vector<std::string> value)
{
    m_Neighborhood = value;
}


CatalogsHotelAddress CatalogsHotelAttributes::getAddress() const
{
    return m_Address;
}

void CatalogsHotelAttributes::setAddress(CatalogsHotelAddress value)
{
    m_Address = value;
}


std::string CatalogsHotelAttributes::getCustomLabel0() const
{
    return m_Custom_label_0;
}

void CatalogsHotelAttributes::setCustomLabel0(std::string value)
{
    m_Custom_label_0 = value;
}


std::string CatalogsHotelAttributes::getCustomLabel1() const
{
    return m_Custom_label_1;
}

void CatalogsHotelAttributes::setCustomLabel1(std::string value)
{
    m_Custom_label_1 = value;
}


std::string CatalogsHotelAttributes::getCustomLabel2() const
{
    return m_Custom_label_2;
}

void CatalogsHotelAttributes::setCustomLabel2(std::string value)
{
    m_Custom_label_2 = value;
}


std::string CatalogsHotelAttributes::getCustomLabel3() const
{
    return m_Custom_label_3;
}

void CatalogsHotelAttributes::setCustomLabel3(std::string value)
{
    m_Custom_label_3 = value;
}


std::string CatalogsHotelAttributes::getCustomLabel4() const
{
    return m_Custom_label_4;
}

void CatalogsHotelAttributes::setCustomLabel4(std::string value)
{
    m_Custom_label_4 = value;
}


std::string CatalogsHotelAttributes::getCategory() const
{
    return m_Category;
}

void CatalogsHotelAttributes::setCategory(std::string value)
{
    m_Category = value;
}


std::string CatalogsHotelAttributes::getBasePrice() const
{
    return m_Base_price;
}

void CatalogsHotelAttributes::setBasePrice(std::string value)
{
    m_Base_price = value;
}


std::string CatalogsHotelAttributes::getSalePrice() const
{
    return m_Sale_price;
}

void CatalogsHotelAttributes::setSalePrice(std::string value)
{
    m_Sale_price = value;
}


CatalogsHotelGuestRatings CatalogsHotelAttributes::getGuestRatings() const
{
    return m_Guest_ratings;
}

void CatalogsHotelAttributes::setGuestRatings(CatalogsHotelGuestRatings value)
{
    m_Guest_ratings = value;
}


CatalogsHotelAttributes_allOf_main_image CatalogsHotelAttributes::getMainImage() const
{
    return m_Main_image;
}

void CatalogsHotelAttributes::setMainImage(CatalogsHotelAttributes_allOf_main_image value)
{
    m_Main_image = value;
}


std::vector<std::string> CatalogsHotelAttributes::getAdditionalImageLink() const
{
    return m_Additional_image_link;
}

void CatalogsHotelAttributes::setAdditionalImageLink(std::vector<std::string> value)
{
    m_Additional_image_link = value;
}



std::vector<CatalogsHotelAttributes> createCatalogsHotelAttributesVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CatalogsHotelAttributes>();
    for (const auto& child: pt) {
        vec.emplace_back(CatalogsHotelAttributes(child.second));
    }

    return vec;
}

}
}
}
}

