/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Board.h
 *
 * Board
 */

#ifndef Board_H_
#define Board_H_



#include <string>
#include "BoardOwner.h"
#include "Board_media.h"
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Board
/// </summary>
class  Board 
{
public:
    Board() = default;
    explicit Board(boost::property_tree::ptree const& pt);
    virtual ~Board() = default;

    Board(const Board& other) = default; // copy constructor
    Board(Board&& other) noexcept = default; // move constructor

    Board& operator=(const Board& other) = default; // copy assignment
    Board& operator=(Board&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// Board members

    /// <summary>
    /// 
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// Date and time of board creation.
    /// </summary>
    std::string getCreatedAt() const;
    void setCreatedAt(std::string value);

    /// <summary>
    /// Date and time of last board pins modified.
    /// </summary>
    std::string getBoardPinsModifiedAt() const;
    void setBoardPinsModifiedAt(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string value);

    /// <summary>
    /// Count of collaborators on the board.
    /// </summary>
    int32_t getCollaboratorCount() const;
    void setCollaboratorCount(int32_t value);

    /// <summary>
    /// Count of pins on the board.
    /// </summary>
    int32_t getPinCount() const;
    void setPinCount(int32_t value);

    /// <summary>
    /// Board follower count.
    /// </summary>
    int32_t getFollowerCount() const;
    void setFollowerCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    Board_media getMedia() const;
    void setMedia(Board_media value);

    /// <summary>
    /// 
    /// </summary>
    BoardOwner getOwner() const;
    void setOwner(BoardOwner value);

    /// <summary>
    /// Privacy setting for a board. Learn more about &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/article/secret-boards\&quot;&gt;secret boards&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/protected-boards\&quot;&gt;protected boards&lt;/a&gt;
    /// </summary>
    std::string getPrivacy() const;
    void setPrivacy(std::string value);

protected:
    std::string m_Id = "";
    std::string m_Created_at = "";
    std::string m_Board_pins_modified_at = "";
    std::string m_Name = "";
    std::string m_Description = "";
    int32_t m_Collaborator_count = 0;
    int32_t m_Pin_count = 0;
    int32_t m_Follower_count = 0;
    Board_media m_Media;
    BoardOwner m_Owner;
    std::string m_Privacy = "PUBLIC";
};

std::vector<Board> createBoardVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<Board>(const Board& val) {
    return val.toPropertyTree();
}

template<>
inline Board fromPt<Board>(const boost::property_tree::ptree& pt) {
    Board ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* Board_H_ */
