/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CampaignsApi.h
 *
 * 
 */

#ifndef CampaignsApi_H_
#define CampaignsApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "AdsAnalyticsCampaignTargetingType.h"
#include "CampaignCreateRequest.h"
#include "CampaignCreateResponse.h"
#include "CampaignResponse.h"
#include "CampaignUpdateRequest.h"
#include "CampaignUpdateResponse.h"
#include "CampaignsAnalyticsResponse_inner.h"
#include "Campaigns_list_200_response.h"
#include "ConversionReportAttributionType.h"
#include "Error.h"
#include "Granularity.h"
#include "MetricsResponse.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  CampaignsApiException: public std::exception
{
public:
    CampaignsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace CampaignsApiResources {
/// <summary>
/// Get targeting analytics for campaigns
/// </summary>
/// <remarks>
/// Get targeting analytics for one or more campaigns. For the requested account and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \&quot;age_bucket\&quot;) for applicable values (e.g. \&quot;45-49\&quot;). &lt;p/&gt; - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
/// </remarks>
class  Ad_accountsAd_account_idCampaignsTargeting_analyticsResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idCampaignsTargeting_analyticsResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idCampaignsTargeting_analyticsResource() = default;

    Ad_accountsAd_account_idCampaignsTargeting_analyticsResource(
        const Ad_accountsAd_account_idCampaignsTargeting_analyticsResource& other) = default; // copy constructor
    Ad_accountsAd_account_idCampaignsTargeting_analyticsResource(Ad_accountsAd_account_idCampaignsTargeting_analyticsResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idCampaignsTargeting_analyticsResource& operator=(const Ad_accountsAd_account_idCampaignsTargeting_analyticsResource& other) = default; // copy assignment
    Ad_accountsAd_account_idCampaignsTargeting_analyticsResource& operator=(Ad_accountsAd_account_idCampaignsTargeting_analyticsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, MetricsResponse>(
        std::string & adAccountId, std::vector<std::string> & campaignIds, std::string & startDate, std::string & endDate, std::vector<AdsAnalyticsCampaignTargetingType> & targetingTypes, std::vector<std::string> & columns, Granularity & granularity, int32_t & clickWindowDays, int32_t & engagementWindowDays, int32_t & viewWindowDays, std::string & conversionReportTime, ConversionReportAttributionType & attributionTypes)> handler_GET_func =
            [](std::string &, std::vector<std::string> &, std::string &, std::string &, std::vector<AdsAnalyticsCampaignTargetingType> &, std::vector<std::string> &, Granularity &, int32_t &, int32_t &, int32_t &, std::string &, ConversionReportAttributionType &) -> std::pair<int, MetricsResponse>
                { throw CampaignsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, MetricsResponse> handler_GET(
        std::string & adAccountId, std::vector<std::string> & campaignIds, std::string & startDate, std::string & endDate, std::vector<AdsAnalyticsCampaignTargetingType> & targetingTypes, std::vector<std::string> & columns, Granularity & granularity, int32_t & clickWindowDays, int32_t & engagementWindowDays, int32_t & viewWindowDays, std::string & conversionReportTime, ConversionReportAttributionType & attributionTypes);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCampaignsApiException(const CampaignsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get campaign analytics
/// </summary>
/// <remarks>
/// Get analytics for the specified campaigns in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
/// </remarks>
class  Ad_accountsAd_account_idCampaignsAnalyticsResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idCampaignsAnalyticsResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idCampaignsAnalyticsResource() = default;

    Ad_accountsAd_account_idCampaignsAnalyticsResource(
        const Ad_accountsAd_account_idCampaignsAnalyticsResource& other) = default; // copy constructor
    Ad_accountsAd_account_idCampaignsAnalyticsResource(Ad_accountsAd_account_idCampaignsAnalyticsResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idCampaignsAnalyticsResource& operator=(const Ad_accountsAd_account_idCampaignsAnalyticsResource& other) = default; // copy assignment
    Ad_accountsAd_account_idCampaignsAnalyticsResource& operator=(Ad_accountsAd_account_idCampaignsAnalyticsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::vector<CampaignsAnalyticsResponse_inner>>(
        std::string & adAccountId, std::string & startDate, std::string & endDate, std::vector<std::string> & campaignIds, std::vector<std::string> & columns, Granularity & granularity, int32_t & clickWindowDays, int32_t & engagementWindowDays, int32_t & viewWindowDays, std::string & conversionReportTime)> handler_GET_func =
            [](std::string &, std::string &, std::string &, std::vector<std::string> &, std::vector<std::string> &, Granularity &, int32_t &, int32_t &, int32_t &, std::string &) -> std::pair<int, std::vector<CampaignsAnalyticsResponse_inner>>
                { throw CampaignsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<CampaignsAnalyticsResponse_inner>> handler_GET(
        std::string & adAccountId, std::string & startDate, std::string & endDate, std::vector<std::string> & campaignIds, std::vector<std::string> & columns, Granularity & granularity, int32_t & clickWindowDays, int32_t & engagementWindowDays, int32_t & viewWindowDays, std::string & conversionReportTime);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCampaignsApiException(const CampaignsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Create campaigns
/// </summary>
/// <remarks>
/// Create multiple new campaigns. Every campaign has its own campaign_id and houses one or more ad groups, which contain one or more ads. For more, see &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/set-up-your-campaign/\&quot;&gt;Set up your campaign&lt;/a&gt;. &lt;p/&gt; &lt;strong&gt;Note:&lt;/strong&gt; - The values for &#39;lifetime_spend_cap&#39; and &#39;daily_spend_cap&#39; are microcurrency amounts based on the currency field set in the advertiser&#39;s profile. (e.g. USD) &lt;p/&gt; &lt;p&gt;Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.&lt;/p&gt; &lt;p&gt;A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’s profile.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Equivalency equations&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;$1 &#x3D; 1,000,000 microdollars&lt;/li&gt;   &lt;li&gt;1 microdollar &#x3D; $0.000001 &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;To convert between currency and microcurrency&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;To convert dollars to microdollars, mutiply dollars by 1,000,000&lt;/li&gt;   &lt;li&gt;To convert microdollars to dollars, divide microdollars by 1,000,000&lt;/li&gt; &lt;/ul&gt;
/// </remarks>
class  Ad_accountsAd_account_idCampaignsResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idCampaignsResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idCampaignsResource() = default;

    Ad_accountsAd_account_idCampaignsResource(
        const Ad_accountsAd_account_idCampaignsResource& other) = default; // copy constructor
    Ad_accountsAd_account_idCampaignsResource(Ad_accountsAd_account_idCampaignsResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idCampaignsResource& operator=(const Ad_accountsAd_account_idCampaignsResource& other) = default; // copy assignment
    Ad_accountsAd_account_idCampaignsResource& operator=(Ad_accountsAd_account_idCampaignsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, CampaignCreateResponse>(
        std::string & adAccountId, std::vector<CampaignCreateRequest> & campaignCreateRequest)> handler_POST_func =
            [](std::string &, std::vector<CampaignCreateRequest> &) -> std::pair<int, CampaignCreateResponse>
                { throw CampaignsApiException(501, "Not implemented"); };

    std::function<std::pair<int, Campaigns_list_200_response>(
        std::string & adAccountId, std::vector<std::string> & campaignIds, std::vector<std::string> & entityStatuses, int32_t & pageSize, std::string & order, std::string & bookmark)> handler_GET_func =
            [](std::string &, std::vector<std::string> &, std::vector<std::string> &, int32_t &, std::string &, std::string &) -> std::pair<int, Campaigns_list_200_response>
                { throw CampaignsApiException(501, "Not implemented"); };

    std::function<std::pair<int, CampaignUpdateResponse>(
        std::string & adAccountId, std::vector<CampaignUpdateRequest> & campaignUpdateRequest)> handler_PATCH_func =
            [](std::string &, std::vector<CampaignUpdateRequest> &) -> std::pair<int, CampaignUpdateResponse>
                { throw CampaignsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, CampaignCreateResponse> handler_POST(
        std::string & adAccountId, std::vector<CampaignCreateRequest> & campaignCreateRequest);

    virtual std::pair<int, Campaigns_list_200_response> handler_GET(
        std::string & adAccountId, std::vector<std::string> & campaignIds, std::vector<std::string> & entityStatuses, int32_t & pageSize, std::string & order, std::string & bookmark);
    virtual std::pair<int, CampaignUpdateResponse> handler_PATCH(
        std::string & adAccountId, std::vector<CampaignUpdateRequest> & campaignUpdateRequest);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCampaignsApiException(const CampaignsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PATCH_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get campaign
/// </summary>
/// <remarks>
/// Get a specific campaign given the campaign ID.
/// </remarks>
class  Ad_accountsAd_account_idCampaignsCampaign_idResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idCampaignsCampaign_idResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idCampaignsCampaign_idResource() = default;

    Ad_accountsAd_account_idCampaignsCampaign_idResource(
        const Ad_accountsAd_account_idCampaignsCampaign_idResource& other) = default; // copy constructor
    Ad_accountsAd_account_idCampaignsCampaign_idResource(Ad_accountsAd_account_idCampaignsCampaign_idResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idCampaignsCampaign_idResource& operator=(const Ad_accountsAd_account_idCampaignsCampaign_idResource& other) = default; // copy assignment
    Ad_accountsAd_account_idCampaignsCampaign_idResource& operator=(Ad_accountsAd_account_idCampaignsCampaign_idResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, CampaignResponse>(
        std::string & adAccountId, std::string & campaignId)> handler_GET_func =
            [](std::string &, std::string &) -> std::pair<int, CampaignResponse>
                { throw CampaignsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, CampaignResponse> handler_GET(
        std::string & adAccountId, std::string & campaignId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCampaignsApiException(const CampaignsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace CampaignsApiResources */

using CampaignsApiAd_accountsAd_account_idCampaignsTargeting_analyticsResource [[deprecated]] = CampaignsApiResources::Ad_accountsAd_account_idCampaignsTargeting_analyticsResource;
using CampaignsApiAd_accountsAd_account_idCampaignsAnalyticsResource [[deprecated]] = CampaignsApiResources::Ad_accountsAd_account_idCampaignsAnalyticsResource;
using CampaignsApiAd_accountsAd_account_idCampaignsResource [[deprecated]] = CampaignsApiResources::Ad_accountsAd_account_idCampaignsResource;
using CampaignsApiAd_accountsAd_account_idCampaignsCampaign_idResource [[deprecated]] = CampaignsApiResources::Ad_accountsAd_account_idCampaignsCampaign_idResource;

//
// The restbed service to actually implement the REST server
//
class  CampaignsApi
{
public:
    explicit CampaignsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~CampaignsApi();

    std::shared_ptr<CampaignsApiResources::Ad_accountsAd_account_idCampaignsTargeting_analyticsResource> getAd_accountsAd_account_idCampaignsTargeting_analyticsResource();
    std::shared_ptr<CampaignsApiResources::Ad_accountsAd_account_idCampaignsAnalyticsResource> getAd_accountsAd_account_idCampaignsAnalyticsResource();
    std::shared_ptr<CampaignsApiResources::Ad_accountsAd_account_idCampaignsResource> getAd_accountsAd_account_idCampaignsResource();
    std::shared_ptr<CampaignsApiResources::Ad_accountsAd_account_idCampaignsCampaign_idResource> getAd_accountsAd_account_idCampaignsCampaign_idResource();

    void setResource(std::shared_ptr<CampaignsApiResources::Ad_accountsAd_account_idCampaignsTargeting_analyticsResource> resource);
    void setResource(std::shared_ptr<CampaignsApiResources::Ad_accountsAd_account_idCampaignsAnalyticsResource> resource);
    void setResource(std::shared_ptr<CampaignsApiResources::Ad_accountsAd_account_idCampaignsResource> resource);
    void setResource(std::shared_ptr<CampaignsApiResources::Ad_accountsAd_account_idCampaignsCampaign_idResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setCampaignsApiAd_accountsAd_account_idCampaignsTargeting_analyticsResource(std::shared_ptr<CampaignsApiResources::Ad_accountsAd_account_idCampaignsTargeting_analyticsResource> spCampaignsApiAd_accountsAd_account_idCampaignsTargeting_analyticsResource);
    [[deprecated("use setResource()")]]
    virtual void setCampaignsApiAd_accountsAd_account_idCampaignsAnalyticsResource(std::shared_ptr<CampaignsApiResources::Ad_accountsAd_account_idCampaignsAnalyticsResource> spCampaignsApiAd_accountsAd_account_idCampaignsAnalyticsResource);
    [[deprecated("use setResource()")]]
    virtual void setCampaignsApiAd_accountsAd_account_idCampaignsResource(std::shared_ptr<CampaignsApiResources::Ad_accountsAd_account_idCampaignsResource> spCampaignsApiAd_accountsAd_account_idCampaignsResource);
    [[deprecated("use setResource()")]]
    virtual void setCampaignsApiAd_accountsAd_account_idCampaignsCampaign_idResource(std::shared_ptr<CampaignsApiResources::Ad_accountsAd_account_idCampaignsCampaign_idResource> spCampaignsApiAd_accountsAd_account_idCampaignsCampaign_idResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<CampaignsApiResources::Ad_accountsAd_account_idCampaignsTargeting_analyticsResource> m_spAd_accountsAd_account_idCampaignsTargeting_analyticsResource;
    std::shared_ptr<CampaignsApiResources::Ad_accountsAd_account_idCampaignsAnalyticsResource> m_spAd_accountsAd_account_idCampaignsAnalyticsResource;
    std::shared_ptr<CampaignsApiResources::Ad_accountsAd_account_idCampaignsResource> m_spAd_accountsAd_account_idCampaignsResource;
    std::shared_ptr<CampaignsApiResources::Ad_accountsAd_account_idCampaignsCampaign_idResource> m_spAd_accountsAd_account_idCampaignsCampaign_idResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* CampaignsApi_H_ */

