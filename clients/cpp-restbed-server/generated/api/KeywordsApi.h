/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * KeywordsApi.h
 *
 * 
 */

#ifndef KeywordsApi_H_
#define KeywordsApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "Error.h"
#include "KeywordUpdateBody.h"
#include "KeywordsMetricsArrayResponse.h"
#include "KeywordsRequest.h"
#include "KeywordsResponse.h"
#include "Keywords_get_200_response.h"
#include "MatchType.h"
#include "TrendType.h"
#include "TrendingKeywordsResponse.h"
#include "TrendsSupportedRegion.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  KeywordsApiException: public std::exception
{
public:
    KeywordsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace KeywordsApiResources {
/// <summary>
/// Get country&#39;s keyword metrics
/// </summary>
/// <remarks>
/// See keyword metrics for a specified country, aggregated across all of Pinterest. (Definitions are available from the \&quot;Get delivery metrics definitions\&quot; &lt;a href&#x3D;\&quot;/docs/api/v5/#operation/delivery_metrics/get\&quot;&gt;API endpoint&lt;/a&gt;).
/// </remarks>
class  Ad_accountsAd_account_idKeywordsMetricsResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idKeywordsMetricsResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idKeywordsMetricsResource() = default;

    Ad_accountsAd_account_idKeywordsMetricsResource(
        const Ad_accountsAd_account_idKeywordsMetricsResource& other) = default; // copy constructor
    Ad_accountsAd_account_idKeywordsMetricsResource(Ad_accountsAd_account_idKeywordsMetricsResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idKeywordsMetricsResource& operator=(const Ad_accountsAd_account_idKeywordsMetricsResource& other) = default; // copy assignment
    Ad_accountsAd_account_idKeywordsMetricsResource& operator=(Ad_accountsAd_account_idKeywordsMetricsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, KeywordsMetricsArrayResponse>(
        std::string & adAccountId, std::string & countryCode, std::vector<std::string> & keywords)> handler_GET_func =
            [](std::string &, std::string &, std::vector<std::string> &) -> std::pair<int, KeywordsMetricsArrayResponse>
                { throw KeywordsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, KeywordsMetricsArrayResponse> handler_GET(
        std::string & adAccountId, std::string & countryCode, std::vector<std::string> & keywords);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleKeywordsApiException(const KeywordsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Create keywords
/// </summary>
/// <remarks>
/// &lt;p&gt;Create keywords for following entity types(advertiser, campaign, ad group or ad).&lt;/p&gt; &lt;p&gt;For more information, see &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://help.pinterest.com/en/business/article/keyword-targeting\&quot;&gt;Keyword targeting&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;/p&gt; &lt;ul style&#x3D;\&quot;list-style-type: square;\&quot;&gt; &lt;li&gt;Advertisers and campaigns can only be assigned keywords with excluding (&#39;_NEGATIVE&#39;).&lt;/li&gt; &lt;li&gt;All keyword match types are available for ad groups.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information on match types, see &lt;a  target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;/docs/api-features/targeting-overview/\&quot;&gt;match type enums&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Returns:&lt;/b&gt;&lt;/p&gt; &lt;ul style&#x3D;\&quot;list-style-type: square;\&quot;&gt; &lt;li&gt;&lt;p&gt;A successful call returns an object containing an array of new keyword objects and an empty &amp;quot;errors&amp;quot; object array.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;An unsuccessful call returns an empty keywords array, and, instead, inserts the entire object with nulled/negated properties into the &amp;quot;errors&amp;quot; object array:&lt;/p&gt; &lt;pre class&#x3D;\&quot;last literal-block\&quot;&gt; { \&quot;keywords\&quot;: [], \&quot;errors\&quot;: [ { \&quot;data\&quot;: { \&quot;archived\&quot;: null, \&quot;match_type\&quot;: \&quot;EXACT\&quot;, \&quot;parent_type\&quot;: null, \&quot;value\&quot;: \&quot;foobar\&quot;, \&quot;parent_id\&quot;: null, \&quot;type\&quot;: \&quot;keyword\&quot;, \&quot;id\&quot;: null }, \&quot;error_messages\&quot;: [ \&quot;Advertisers and Campaigns only accept excluded targeting attributes.\&quot; ] } } &lt;/pre&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;b&gt;Rate limit&lt;/b&gt;: &lt;a href&#x3D;\&quot;/docs/reference/rate-limits/\&quot;&gt;WRITE&lt;/a&gt;.&lt;/p&gt;
/// </remarks>
class  Ad_accountsAd_account_idKeywordsResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idKeywordsResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idKeywordsResource() = default;

    Ad_accountsAd_account_idKeywordsResource(
        const Ad_accountsAd_account_idKeywordsResource& other) = default; // copy constructor
    Ad_accountsAd_account_idKeywordsResource(Ad_accountsAd_account_idKeywordsResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idKeywordsResource& operator=(const Ad_accountsAd_account_idKeywordsResource& other) = default; // copy assignment
    Ad_accountsAd_account_idKeywordsResource& operator=(Ad_accountsAd_account_idKeywordsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, KeywordsResponse>(
        std::string & adAccountId, KeywordsRequest & keywordsRequest)> handler_POST_func =
            [](std::string &, KeywordsRequest &) -> std::pair<int, KeywordsResponse>
                { throw KeywordsApiException(501, "Not implemented"); };

    std::function<std::pair<int, Keywords_get_200_response>(
        std::string & adAccountId, std::string & campaignId, std::string & adGroupId, std::vector<MatchType> & matchTypes, int32_t & pageSize, std::string & bookmark)> handler_GET_func =
            [](std::string &, std::string &, std::string &, std::vector<MatchType> &, int32_t &, std::string &) -> std::pair<int, Keywords_get_200_response>
                { throw KeywordsApiException(501, "Not implemented"); };

    std::function<std::pair<int, KeywordsResponse>(
        std::string & adAccountId, KeywordUpdateBody & keywordUpdateBody)> handler_PATCH_func =
            [](std::string &, KeywordUpdateBody &) -> std::pair<int, KeywordsResponse>
                { throw KeywordsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, KeywordsResponse> handler_POST(
        std::string & adAccountId, KeywordsRequest & keywordsRequest);

    virtual std::pair<int, Keywords_get_200_response> handler_GET(
        std::string & adAccountId, std::string & campaignId, std::string & adGroupId, std::vector<MatchType> & matchTypes, int32_t & pageSize, std::string & bookmark);
    virtual std::pair<int, KeywordsResponse> handler_PATCH(
        std::string & adAccountId, KeywordUpdateBody & keywordUpdateBody);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleKeywordsApiException(const KeywordsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PATCH_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// List trending keywords
/// </summary>
/// <remarks>
/// &lt;p&gt;Get the top trending search keywords among the Pinterest user audience.&lt;/p&gt; &lt;p&gt;Trending keywords can be used to inform ad targeting, budget strategy, and creative decisions about which products and Pins will resonate with your audience.&lt;/p&gt; &lt;p&gt;Geographic, demographic and interest-based filters are available to narrow down to the top trends among a specific audience. Multiple trend types are supported that can be used to identify newly-popular, evergreen or seasonal keywords.&lt;/p&gt; &lt;p&gt;For an interactive way to explore this data, please visit &lt;a href&#x3D;\&quot;https://trends.pinterest.com\&quot;&gt;trends.pinterest.com&lt;/a&gt;. 
/// </remarks>
class  TrendsKeywordsRegionTopTrend_typeResource: public restbed::Resource
{
public:
    TrendsKeywordsRegionTopTrend_typeResource(const std::string& context = "/v5");
    virtual ~TrendsKeywordsRegionTopTrend_typeResource() = default;

    TrendsKeywordsRegionTopTrend_typeResource(
        const TrendsKeywordsRegionTopTrend_typeResource& other) = default; // copy constructor
    TrendsKeywordsRegionTopTrend_typeResource(TrendsKeywordsRegionTopTrend_typeResource&& other) noexcept = default; // move constructor

    TrendsKeywordsRegionTopTrend_typeResource& operator=(const TrendsKeywordsRegionTopTrend_typeResource& other) = default; // copy assignment
    TrendsKeywordsRegionTopTrend_typeResource& operator=(TrendsKeywordsRegionTopTrend_typeResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, TrendingKeywordsResponse>(
        TrendsSupportedRegion & region, TrendType & trendType, std::vector<std::string> & interests, std::vector<std::string> & genders, std::vector<std::string> & ages, std::vector<std::string> & includeKeywords, bool & normalizeAgainstGroup, int32_t & limit)> handler_GET_func =
            [](TrendsSupportedRegion &, TrendType &, std::vector<std::string> &, std::vector<std::string> &, std::vector<std::string> &, std::vector<std::string> &, bool &, int32_t &) -> std::pair<int, TrendingKeywordsResponse>
                { throw KeywordsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, TrendingKeywordsResponse> handler_GET(
        TrendsSupportedRegion & region, TrendType & trendType, std::vector<std::string> & interests, std::vector<std::string> & genders, std::vector<std::string> & ages, std::vector<std::string> & includeKeywords, bool & normalizeAgainstGroup, int32_t & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleKeywordsApiException(const KeywordsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace KeywordsApiResources */

using KeywordsApiAd_accountsAd_account_idKeywordsMetricsResource [[deprecated]] = KeywordsApiResources::Ad_accountsAd_account_idKeywordsMetricsResource;
using KeywordsApiAd_accountsAd_account_idKeywordsResource [[deprecated]] = KeywordsApiResources::Ad_accountsAd_account_idKeywordsResource;
using KeywordsApiTrendsKeywordsRegionTopTrend_typeResource [[deprecated]] = KeywordsApiResources::TrendsKeywordsRegionTopTrend_typeResource;

//
// The restbed service to actually implement the REST server
//
class  KeywordsApi
{
public:
    explicit KeywordsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~KeywordsApi();

    std::shared_ptr<KeywordsApiResources::Ad_accountsAd_account_idKeywordsMetricsResource> getAd_accountsAd_account_idKeywordsMetricsResource();
    std::shared_ptr<KeywordsApiResources::Ad_accountsAd_account_idKeywordsResource> getAd_accountsAd_account_idKeywordsResource();
    std::shared_ptr<KeywordsApiResources::TrendsKeywordsRegionTopTrend_typeResource> getTrendsKeywordsRegionTopTrend_typeResource();

    void setResource(std::shared_ptr<KeywordsApiResources::Ad_accountsAd_account_idKeywordsMetricsResource> resource);
    void setResource(std::shared_ptr<KeywordsApiResources::Ad_accountsAd_account_idKeywordsResource> resource);
    void setResource(std::shared_ptr<KeywordsApiResources::TrendsKeywordsRegionTopTrend_typeResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setKeywordsApiAd_accountsAd_account_idKeywordsMetricsResource(std::shared_ptr<KeywordsApiResources::Ad_accountsAd_account_idKeywordsMetricsResource> spKeywordsApiAd_accountsAd_account_idKeywordsMetricsResource);
    [[deprecated("use setResource()")]]
    virtual void setKeywordsApiAd_accountsAd_account_idKeywordsResource(std::shared_ptr<KeywordsApiResources::Ad_accountsAd_account_idKeywordsResource> spKeywordsApiAd_accountsAd_account_idKeywordsResource);
    [[deprecated("use setResource()")]]
    virtual void setKeywordsApiTrendsKeywordsRegionTopTrend_typeResource(std::shared_ptr<KeywordsApiResources::TrendsKeywordsRegionTopTrend_typeResource> spKeywordsApiTrendsKeywordsRegionTopTrend_typeResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<KeywordsApiResources::Ad_accountsAd_account_idKeywordsMetricsResource> m_spAd_accountsAd_account_idKeywordsMetricsResource;
    std::shared_ptr<KeywordsApiResources::Ad_accountsAd_account_idKeywordsResource> m_spAd_accountsAd_account_idKeywordsResource;
    std::shared_ptr<KeywordsApiResources::TrendsKeywordsRegionTopTrend_typeResource> m_spTrendsKeywordsRegionTopTrend_typeResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* KeywordsApi_H_ */

