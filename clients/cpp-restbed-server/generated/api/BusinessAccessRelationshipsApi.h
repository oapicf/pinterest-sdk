/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BusinessAccessRelationshipsApi.h
 *
 * 
 */

#ifndef BusinessAccessRelationshipsApi_H_
#define BusinessAccessRelationshipsApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "DeletePartnersRequest.h"
#include "DeletePartnersResponse.h"
#include "DeletedMembersResponse.h"
#include "Error.h"
#include "Get_business_employers_200_response.h"
#include "Get_business_members_200_response.h"
#include "Get_business_partners_200_response.h"
#include "MemberBusinessRole.h"
#include "MembersToDeleteBody.h"
#include "PartnerType.h"
#include "UpdateMemberBusinessRoleBody.h"
#include "UpdateMemberResultsResponseArray.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  BusinessAccessRelationshipsApiException: public std::exception
{
public:
    BusinessAccessRelationshipsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace BusinessAccessRelationshipsApiResources {
/// <summary>
/// Terminate business memberships
/// </summary>
/// <remarks>
/// Terminate memberships between the specified members and your business.
/// </remarks>
class  BusinessesBusiness_idMembersResource: public restbed::Resource
{
public:
    BusinessesBusiness_idMembersResource(const std::string& context = "/v5");
    virtual ~BusinessesBusiness_idMembersResource() = default;

    BusinessesBusiness_idMembersResource(
        const BusinessesBusiness_idMembersResource& other) = default; // copy constructor
    BusinessesBusiness_idMembersResource(BusinessesBusiness_idMembersResource&& other) noexcept = default; // move constructor

    BusinessesBusiness_idMembersResource& operator=(const BusinessesBusiness_idMembersResource& other) = default; // copy assignment
    BusinessesBusiness_idMembersResource& operator=(BusinessesBusiness_idMembersResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, DeletedMembersResponse>(
        std::string & businessId, MembersToDeleteBody & membersToDeleteBody)> handler_DELETE_func =
            [](std::string &, MembersToDeleteBody &) -> std::pair<int, DeletedMembersResponse>
                { throw BusinessAccessRelationshipsApiException(501, "Not implemented"); };

    std::function<std::pair<int, Get_business_members_200_response>(
        std::string & businessId, bool & assetsSummary, std::vector<MemberBusinessRole> & businessRoles, std::string & memberIds, int32_t & startIndex, std::string & bookmark, int32_t & pageSize)> handler_GET_func =
            [](std::string &, bool &, std::vector<MemberBusinessRole> &, std::string &, int32_t &, std::string &, int32_t &) -> std::pair<int, Get_business_members_200_response>
                { throw BusinessAccessRelationshipsApiException(501, "Not implemented"); };

    std::function<std::pair<int, UpdateMemberResultsResponseArray>(
        std::string & businessId, std::vector<UpdateMemberBusinessRoleBody> & updateMemberBusinessRoleBody)> handler_PATCH_func =
            [](std::string &, std::vector<UpdateMemberBusinessRoleBody> &) -> std::pair<int, UpdateMemberResultsResponseArray>
                { throw BusinessAccessRelationshipsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, DeletedMembersResponse> handler_DELETE(
        std::string & businessId, MembersToDeleteBody & membersToDeleteBody);

    virtual std::pair<int, Get_business_members_200_response> handler_GET(
        std::string & businessId, bool & assetsSummary, std::vector<MemberBusinessRole> & businessRoles, std::string & memberIds, int32_t & startIndex, std::string & bookmark, int32_t & pageSize);
    virtual std::pair<int, UpdateMemberResultsResponseArray> handler_PATCH(
        std::string & businessId, std::vector<UpdateMemberBusinessRoleBody> & updateMemberBusinessRoleBody);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBusinessAccessRelationshipsApiException(const BusinessAccessRelationshipsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PATCH_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Terminate business partnerships
/// </summary>
/// <remarks>
/// Terminate partnerships between the specified partners and your business. Note: You may only batch terminate partners of the same partner type.
/// </remarks>
class  BusinessesBusiness_idPartnersResource: public restbed::Resource
{
public:
    BusinessesBusiness_idPartnersResource(const std::string& context = "/v5");
    virtual ~BusinessesBusiness_idPartnersResource() = default;

    BusinessesBusiness_idPartnersResource(
        const BusinessesBusiness_idPartnersResource& other) = default; // copy constructor
    BusinessesBusiness_idPartnersResource(BusinessesBusiness_idPartnersResource&& other) noexcept = default; // move constructor

    BusinessesBusiness_idPartnersResource& operator=(const BusinessesBusiness_idPartnersResource& other) = default; // copy assignment
    BusinessesBusiness_idPartnersResource& operator=(BusinessesBusiness_idPartnersResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, DeletePartnersResponse>(
        std::string & businessId, DeletePartnersRequest & deletePartnersRequest)> handler_DELETE_func =
            [](std::string &, DeletePartnersRequest &) -> std::pair<int, DeletePartnersResponse>
                { throw BusinessAccessRelationshipsApiException(501, "Not implemented"); };

    std::function<std::pair<int, Get_business_partners_200_response>(
        std::string & businessId, bool & assetsSummary, PartnerType & partnerType, std::string & partnerIds, int32_t & startIndex, int32_t & pageSize, std::string & bookmark)> handler_GET_func =
            [](std::string &, bool &, PartnerType &, std::string &, int32_t &, int32_t &, std::string &) -> std::pair<int, Get_business_partners_200_response>
                { throw BusinessAccessRelationshipsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, DeletePartnersResponse> handler_DELETE(
        std::string & businessId, DeletePartnersRequest & deletePartnersRequest);

    virtual std::pair<int, Get_business_partners_200_response> handler_GET(
        std::string & businessId, bool & assetsSummary, PartnerType & partnerType, std::string & partnerIds, int32_t & startIndex, int32_t & pageSize, std::string & bookmark);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBusinessAccessRelationshipsApiException(const BusinessAccessRelationshipsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// List business employers for user
/// </summary>
/// <remarks>
/// Get all of the viewing user&#39;s business employers.
/// </remarks>
class  BusinessesEmployersResource: public restbed::Resource
{
public:
    BusinessesEmployersResource(const std::string& context = "/v5");
    virtual ~BusinessesEmployersResource() = default;

    BusinessesEmployersResource(
        const BusinessesEmployersResource& other) = default; // copy constructor
    BusinessesEmployersResource(BusinessesEmployersResource&& other) noexcept = default; // move constructor

    BusinessesEmployersResource& operator=(const BusinessesEmployersResource& other) = default; // copy assignment
    BusinessesEmployersResource& operator=(BusinessesEmployersResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Get_business_employers_200_response>(
        int32_t & pageSize, std::string & bookmark)> handler_GET_func =
            [](int32_t &, std::string &) -> std::pair<int, Get_business_employers_200_response>
                { throw BusinessAccessRelationshipsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Get_business_employers_200_response> handler_GET(
        int32_t & pageSize, std::string & bookmark);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBusinessAccessRelationshipsApiException(const BusinessAccessRelationshipsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace BusinessAccessRelationshipsApiResources */

using BusinessAccessRelationshipsApiBusinessesBusiness_idMembersResource [[deprecated]] = BusinessAccessRelationshipsApiResources::BusinessesBusiness_idMembersResource;
using BusinessAccessRelationshipsApiBusinessesBusiness_idPartnersResource [[deprecated]] = BusinessAccessRelationshipsApiResources::BusinessesBusiness_idPartnersResource;
using BusinessAccessRelationshipsApiBusinessesEmployersResource [[deprecated]] = BusinessAccessRelationshipsApiResources::BusinessesEmployersResource;

//
// The restbed service to actually implement the REST server
//
class  BusinessAccessRelationshipsApi
{
public:
    explicit BusinessAccessRelationshipsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~BusinessAccessRelationshipsApi();

    std::shared_ptr<BusinessAccessRelationshipsApiResources::BusinessesBusiness_idMembersResource> getBusinessesBusiness_idMembersResource();
    std::shared_ptr<BusinessAccessRelationshipsApiResources::BusinessesBusiness_idPartnersResource> getBusinessesBusiness_idPartnersResource();
    std::shared_ptr<BusinessAccessRelationshipsApiResources::BusinessesEmployersResource> getBusinessesEmployersResource();

    void setResource(std::shared_ptr<BusinessAccessRelationshipsApiResources::BusinessesBusiness_idMembersResource> resource);
    void setResource(std::shared_ptr<BusinessAccessRelationshipsApiResources::BusinessesBusiness_idPartnersResource> resource);
    void setResource(std::shared_ptr<BusinessAccessRelationshipsApiResources::BusinessesEmployersResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setBusinessAccessRelationshipsApiBusinessesBusiness_idMembersResource(std::shared_ptr<BusinessAccessRelationshipsApiResources::BusinessesBusiness_idMembersResource> spBusinessAccessRelationshipsApiBusinessesBusiness_idMembersResource);
    [[deprecated("use setResource()")]]
    virtual void setBusinessAccessRelationshipsApiBusinessesBusiness_idPartnersResource(std::shared_ptr<BusinessAccessRelationshipsApiResources::BusinessesBusiness_idPartnersResource> spBusinessAccessRelationshipsApiBusinessesBusiness_idPartnersResource);
    [[deprecated("use setResource()")]]
    virtual void setBusinessAccessRelationshipsApiBusinessesEmployersResource(std::shared_ptr<BusinessAccessRelationshipsApiResources::BusinessesEmployersResource> spBusinessAccessRelationshipsApiBusinessesEmployersResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<BusinessAccessRelationshipsApiResources::BusinessesBusiness_idMembersResource> m_spBusinessesBusiness_idMembersResource;
    std::shared_ptr<BusinessAccessRelationshipsApiResources::BusinessesBusiness_idPartnersResource> m_spBusinessesBusiness_idPartnersResource;
    std::shared_ptr<BusinessAccessRelationshipsApiResources::BusinessesEmployersResource> m_spBusinessesEmployersResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* BusinessAccessRelationshipsApi_H_ */

