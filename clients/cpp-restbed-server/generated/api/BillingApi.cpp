/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "BillingApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

namespace {
[[maybe_unused]]
std::string selectPreferredContentType(const std::vector<std::string>& contentTypes) {
    if (contentTypes.size() == 0) {
        return "application/json";
    }

    if (contentTypes.size() == 1) {
        return contentTypes.at(0);
    }

    static const std::array<std::string, 2> preferredTypes = {"json", "xml"};
    for (const auto& preferredType: preferredTypes) {
        const auto ret = std::find_if(contentTypes.cbegin(),
        contentTypes.cend(),
        [preferredType](const std::string& str) {
            return str.find(preferredType) != std::string::npos;});
        if (ret != contentTypes.cend()) {
            return *ret;
        }
    }

    return contentTypes.at(0);
}
}

BillingApiException::BillingApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int BillingApiException::getStatus() const
{
    return m_status;
}
const char* BillingApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
MODEL_T extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = MODEL_T(pt);
    return model;
}

template<class MODEL_T>
std::vector<MODEL_T> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<MODEL_T>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(MODEL_T(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

namespace BillingApiResources {
Ad_accountsAd_account_idAds_creditRedeemResource::Ad_accountsAd_account_idAds_creditRedeemResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/ad_accounts/{ad_account_id: .*}/ads_credit/redeem");
	this->set_method_handler("POST",
		std::bind(&Ad_accountsAd_account_idAds_creditRedeemResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> Ad_accountsAd_account_idAds_creditRedeemResource::handleBillingApiException(const BillingApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idAds_creditRedeemResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idAds_creditRedeemResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void Ad_accountsAd_account_idAds_creditRedeemResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void Ad_accountsAd_account_idAds_creditRedeemResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void Ad_accountsAd_account_idAds_creditRedeemResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void Ad_accountsAd_account_idAds_creditRedeemResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto adsCreditRedeemRequest = extractJsonModelBodyParam<AdsCreditRedeemRequest>(bodyContent);
    // Getting the path params
    std::string adAccountId = request->get_path_parameter("ad_account_id", "");
    
    int status_code = 500;
    AdsCreditRedeemResponse resultObject = AdsCreditRedeemResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(adAccountId, adsCreditRedeemRequest);
    }
    catch(const BillingApiException& e) {
        std::tie(status_code, result) = handleBillingApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Error thrown when unable to redeem offer code.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, AdsCreditRedeemResponse> Ad_accountsAd_account_idAds_creditRedeemResource::handler_POST(
        std::string & adAccountId, AdsCreditRedeemRequest & adsCreditRedeemRequest)
{
    return handler_POST_func(adAccountId, adsCreditRedeemRequest);
}


std::string Ad_accountsAd_account_idAds_creditRedeemResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string Ad_accountsAd_account_idAds_creditRedeemResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
Ad_accountsAd_account_idAds_creditDiscountsResource::Ad_accountsAd_account_idAds_creditDiscountsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/ad_accounts/{ad_account_id: .*}/ads_credit/discounts");
	this->set_method_handler("GET",
		std::bind(&Ad_accountsAd_account_idAds_creditDiscountsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> Ad_accountsAd_account_idAds_creditDiscountsResource::handleBillingApiException(const BillingApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idAds_creditDiscountsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idAds_creditDiscountsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void Ad_accountsAd_account_idAds_creditDiscountsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void Ad_accountsAd_account_idAds_creditDiscountsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void Ad_accountsAd_account_idAds_creditDiscountsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void Ad_accountsAd_account_idAds_creditDiscountsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string adAccountId = request->get_path_parameter("ad_account_id", "");
    // Getting the query params
    std::string bookmark = request->get_query_parameter("bookmark", "");
    int32_t pageSize = request->get_query_parameter("pageSize", 25);
    
    int status_code = 500;
    Ads_credits_discounts_get_200_response resultObject = Ads_credits_discounts_get_200_response{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(adAccountId, bookmark, pageSize);
    }
    catch(const BillingApiException& e) {
        std::tie(status_code, result) = handleBillingApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, Ads_credits_discounts_get_200_response> Ad_accountsAd_account_idAds_creditDiscountsResource::handler_GET(
        std::string & adAccountId, std::string & bookmark, int32_t & pageSize)
{
    return handler_GET_func(adAccountId, bookmark, pageSize);
}


std::string Ad_accountsAd_account_idAds_creditDiscountsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string Ad_accountsAd_account_idAds_creditDiscountsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
Ad_accountsAd_account_idBilling_profilesResource::Ad_accountsAd_account_idBilling_profilesResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/ad_accounts/{ad_account_id: .*}/billing_profiles");
	this->set_method_handler("GET",
		std::bind(&Ad_accountsAd_account_idBilling_profilesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> Ad_accountsAd_account_idBilling_profilesResource::handleBillingApiException(const BillingApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idBilling_profilesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idBilling_profilesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void Ad_accountsAd_account_idBilling_profilesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void Ad_accountsAd_account_idBilling_profilesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void Ad_accountsAd_account_idBilling_profilesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void Ad_accountsAd_account_idBilling_profilesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string adAccountId = request->get_path_parameter("ad_account_id", "");
    // Getting the query params
    bool isActive = request->get_query_parameter("isActive", false);
    std::string bookmark = request->get_query_parameter("bookmark", "");
    int32_t pageSize = request->get_query_parameter("pageSize", 25);
    
    int status_code = 500;
    Billing_profiles_get_200_response resultObject = Billing_profiles_get_200_response{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(adAccountId, isActive, bookmark, pageSize);
    }
    catch(const BillingApiException& e) {
        std::tie(status_code, result) = handleBillingApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, Billing_profiles_get_200_response> Ad_accountsAd_account_idBilling_profilesResource::handler_GET(
        std::string & adAccountId, bool & isActive, std::string & bookmark, int32_t & pageSize)
{
    return handler_GET_func(adAccountId, isActive, bookmark, pageSize);
}


std::string Ad_accountsAd_account_idBilling_profilesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string Ad_accountsAd_account_idBilling_profilesResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
Ad_accountsAd_account_idSsioAccountsResource::Ad_accountsAd_account_idSsioAccountsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/ad_accounts/{ad_account_id: .*}/ssio/accounts");
	this->set_method_handler("GET",
		std::bind(&Ad_accountsAd_account_idSsioAccountsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> Ad_accountsAd_account_idSsioAccountsResource::handleBillingApiException(const BillingApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idSsioAccountsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idSsioAccountsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void Ad_accountsAd_account_idSsioAccountsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void Ad_accountsAd_account_idSsioAccountsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void Ad_accountsAd_account_idSsioAccountsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void Ad_accountsAd_account_idSsioAccountsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string adAccountId = request->get_path_parameter("ad_account_id", "");
    
    int status_code = 500;
    SSIOAccountResponse resultObject = SSIOAccountResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(adAccountId);
    }
    catch(const BillingApiException& e) {
        std::tie(status_code, result) = handleBillingApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid request parameter.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, SSIOAccountResponse> Ad_accountsAd_account_idSsioAccountsResource::handler_GET(
        std::string & adAccountId)
{
    return handler_GET_func(adAccountId);
}


std::string Ad_accountsAd_account_idSsioAccountsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string Ad_accountsAd_account_idSsioAccountsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
Ad_accountsAd_account_idSsioInsertion_ordersResource::Ad_accountsAd_account_idSsioInsertion_ordersResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/ad_accounts/{ad_account_id: .*}/ssio/insertion_orders");
	this->set_method_handler("POST",
		std::bind(&Ad_accountsAd_account_idSsioInsertion_ordersResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("PATCH",
		std::bind(&Ad_accountsAd_account_idSsioInsertion_ordersResource::handler_PATCH_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> Ad_accountsAd_account_idSsioInsertion_ordersResource::handleBillingApiException(const BillingApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idSsioInsertion_ordersResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idSsioInsertion_ordersResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void Ad_accountsAd_account_idSsioInsertion_ordersResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void Ad_accountsAd_account_idSsioInsertion_ordersResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void Ad_accountsAd_account_idSsioInsertion_ordersResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void Ad_accountsAd_account_idSsioInsertion_ordersResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto sSIOCreateInsertionOrderRequest = extractJsonModelBodyParam<SSIOCreateInsertionOrderRequest>(bodyContent);
    // Getting the path params
    std::string adAccountId = request->get_path_parameter("ad_account_id", "");
    
    int status_code = 500;
    SSIOCreateInsertionOrderResponse resultObject = SSIOCreateInsertionOrderResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(adAccountId, sSIOCreateInsertionOrderRequest);
    }
    catch(const BillingApiException& e) {
        std::tie(status_code, result) = handleBillingApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid request.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void Ad_accountsAd_account_idSsioInsertion_ordersResource::handler_PATCH_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto sSIOEditInsertionOrderRequest = extractJsonModelBodyParam<SSIOEditInsertionOrderRequest>(bodyContent);
    // Getting the path params
    std::string adAccountId = request->get_path_parameter("ad_account_id", "");
    
    int status_code = 500;
    SSIOEditInsertionOrderResponse resultObject = SSIOEditInsertionOrderResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_PATCH(adAccountId, sSIOEditInsertionOrderRequest);
    }
    catch(const BillingApiException& e) {
        std::tie(status_code, result) = handleBillingApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid request.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, SSIOCreateInsertionOrderResponse> Ad_accountsAd_account_idSsioInsertion_ordersResource::handler_POST(
        std::string & adAccountId, SSIOCreateInsertionOrderRequest & sSIOCreateInsertionOrderRequest)
{
    return handler_POST_func(adAccountId, sSIOCreateInsertionOrderRequest);
}

std::pair<int, SSIOEditInsertionOrderResponse> Ad_accountsAd_account_idSsioInsertion_ordersResource::handler_PATCH(
    std::string & adAccountId, SSIOEditInsertionOrderRequest & sSIOEditInsertionOrderRequest)
{
    return handler_PATCH_func(adAccountId, sSIOEditInsertionOrderRequest);
}

std::string Ad_accountsAd_account_idSsioInsertion_ordersResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string Ad_accountsAd_account_idSsioInsertion_ordersResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
Ad_accountsAd_account_idSsioInsertion_ordersStatusResource::Ad_accountsAd_account_idSsioInsertion_ordersStatusResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/ad_accounts/{ad_account_id: .*}/ssio/insertion_orders/status");
	this->set_method_handler("GET",
		std::bind(&Ad_accountsAd_account_idSsioInsertion_ordersStatusResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> Ad_accountsAd_account_idSsioInsertion_ordersStatusResource::handleBillingApiException(const BillingApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idSsioInsertion_ordersStatusResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idSsioInsertion_ordersStatusResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void Ad_accountsAd_account_idSsioInsertion_ordersStatusResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void Ad_accountsAd_account_idSsioInsertion_ordersStatusResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void Ad_accountsAd_account_idSsioInsertion_ordersStatusResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void Ad_accountsAd_account_idSsioInsertion_ordersStatusResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string adAccountId = request->get_path_parameter("ad_account_id", "");
    // Getting the query params
    std::string bookmark = request->get_query_parameter("bookmark", "");
    int32_t pageSize = request->get_query_parameter("pageSize", 25);
    
    int status_code = 500;
    Ssio_insertion_orders_status_get_by_ad_account_200_response resultObject = Ssio_insertion_orders_status_get_by_ad_account_200_response{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(adAccountId, bookmark, pageSize);
    }
    catch(const BillingApiException& e) {
        std::tie(status_code, result) = handleBillingApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid request parameter.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, Ssio_insertion_orders_status_get_by_ad_account_200_response> Ad_accountsAd_account_idSsioInsertion_ordersStatusResource::handler_GET(
        std::string & adAccountId, std::string & bookmark, int32_t & pageSize)
{
    return handler_GET_func(adAccountId, bookmark, pageSize);
}


std::string Ad_accountsAd_account_idSsioInsertion_ordersStatusResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string Ad_accountsAd_account_idSsioInsertion_ordersStatusResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource::Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/ad_accounts/{ad_account_id: .*}/ssio/insertion_orders/{pin_order_id: .*}/status");
	this->set_method_handler("GET",
		std::bind(&Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource::handleBillingApiException(const BillingApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string adAccountId = request->get_path_parameter("ad_account_id", "");
    std::string pinOrderId = request->get_path_parameter("pin_order_id", "");
    
    int status_code = 500;
    SSIOInsertionOrderStatusResponse resultObject = SSIOInsertionOrderStatusResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(adAccountId, pinOrderId);
    }
    catch(const BillingApiException& e) {
        std::tie(status_code, result) = handleBillingApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid request parameter.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, SSIOInsertionOrderStatusResponse> Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource::handler_GET(
        std::string & adAccountId, std::string & pinOrderId)
{
    return handler_GET_func(adAccountId, pinOrderId);
}


std::string Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
Ad_accountsAd_account_idSsioOrder_linesResource::Ad_accountsAd_account_idSsioOrder_linesResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/ad_accounts/{ad_account_id: .*}/ssio/order_lines");
	this->set_method_handler("GET",
		std::bind(&Ad_accountsAd_account_idSsioOrder_linesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> Ad_accountsAd_account_idSsioOrder_linesResource::handleBillingApiException(const BillingApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idSsioOrder_linesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idSsioOrder_linesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void Ad_accountsAd_account_idSsioOrder_linesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void Ad_accountsAd_account_idSsioOrder_linesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void Ad_accountsAd_account_idSsioOrder_linesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void Ad_accountsAd_account_idSsioOrder_linesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string adAccountId = request->get_path_parameter("ad_account_id", "");
    // Getting the query params
    std::string bookmark = request->get_query_parameter("bookmark", "");
    int32_t pageSize = request->get_query_parameter("pageSize", 25);
    std::string pinOrderId = request->get_query_parameter("pinOrderId", "");
    
    int status_code = 500;
    Ssio_order_lines_get_by_ad_account_200_response resultObject = Ssio_order_lines_get_by_ad_account_200_response{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(adAccountId, bookmark, pageSize, pinOrderId);
    }
    catch(const BillingApiException& e) {
        std::tie(status_code, result) = handleBillingApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid request parameter.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, Ssio_order_lines_get_by_ad_account_200_response> Ad_accountsAd_account_idSsioOrder_linesResource::handler_GET(
        std::string & adAccountId, std::string & bookmark, int32_t & pageSize, std::string & pinOrderId)
{
    return handler_GET_func(adAccountId, bookmark, pageSize, pinOrderId);
}


std::string Ad_accountsAd_account_idSsioOrder_linesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string Ad_accountsAd_account_idSsioOrder_linesResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}

} /* namespace BillingApiResources */

BillingApi::BillingApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

BillingApi::~BillingApi() {}

std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idAds_creditRedeemResource> BillingApi::getAd_accountsAd_account_idAds_creditRedeemResource() {
    if (!m_spAd_accountsAd_account_idAds_creditRedeemResource) {
        setResource(std::make_shared<BillingApiResources::Ad_accountsAd_account_idAds_creditRedeemResource>());
    }
    return m_spAd_accountsAd_account_idAds_creditRedeemResource;
}
std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idAds_creditDiscountsResource> BillingApi::getAd_accountsAd_account_idAds_creditDiscountsResource() {
    if (!m_spAd_accountsAd_account_idAds_creditDiscountsResource) {
        setResource(std::make_shared<BillingApiResources::Ad_accountsAd_account_idAds_creditDiscountsResource>());
    }
    return m_spAd_accountsAd_account_idAds_creditDiscountsResource;
}
std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idBilling_profilesResource> BillingApi::getAd_accountsAd_account_idBilling_profilesResource() {
    if (!m_spAd_accountsAd_account_idBilling_profilesResource) {
        setResource(std::make_shared<BillingApiResources::Ad_accountsAd_account_idBilling_profilesResource>());
    }
    return m_spAd_accountsAd_account_idBilling_profilesResource;
}
std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioAccountsResource> BillingApi::getAd_accountsAd_account_idSsioAccountsResource() {
    if (!m_spAd_accountsAd_account_idSsioAccountsResource) {
        setResource(std::make_shared<BillingApiResources::Ad_accountsAd_account_idSsioAccountsResource>());
    }
    return m_spAd_accountsAd_account_idSsioAccountsResource;
}
std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioInsertion_ordersResource> BillingApi::getAd_accountsAd_account_idSsioInsertion_ordersResource() {
    if (!m_spAd_accountsAd_account_idSsioInsertion_ordersResource) {
        setResource(std::make_shared<BillingApiResources::Ad_accountsAd_account_idSsioInsertion_ordersResource>());
    }
    return m_spAd_accountsAd_account_idSsioInsertion_ordersResource;
}
std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioInsertion_ordersStatusResource> BillingApi::getAd_accountsAd_account_idSsioInsertion_ordersStatusResource() {
    if (!m_spAd_accountsAd_account_idSsioInsertion_ordersStatusResource) {
        setResource(std::make_shared<BillingApiResources::Ad_accountsAd_account_idSsioInsertion_ordersStatusResource>());
    }
    return m_spAd_accountsAd_account_idSsioInsertion_ordersStatusResource;
}
std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource> BillingApi::getAd_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource() {
    if (!m_spAd_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource) {
        setResource(std::make_shared<BillingApiResources::Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource>());
    }
    return m_spAd_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource;
}
std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioOrder_linesResource> BillingApi::getAd_accountsAd_account_idSsioOrder_linesResource() {
    if (!m_spAd_accountsAd_account_idSsioOrder_linesResource) {
        setResource(std::make_shared<BillingApiResources::Ad_accountsAd_account_idSsioOrder_linesResource>());
    }
    return m_spAd_accountsAd_account_idSsioOrder_linesResource;
}
void BillingApi::setResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idAds_creditRedeemResource> resource) {
    m_spAd_accountsAd_account_idAds_creditRedeemResource = resource;
    m_service->publish(m_spAd_accountsAd_account_idAds_creditRedeemResource);
}
void BillingApi::setResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idAds_creditDiscountsResource> resource) {
    m_spAd_accountsAd_account_idAds_creditDiscountsResource = resource;
    m_service->publish(m_spAd_accountsAd_account_idAds_creditDiscountsResource);
}
void BillingApi::setResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idBilling_profilesResource> resource) {
    m_spAd_accountsAd_account_idBilling_profilesResource = resource;
    m_service->publish(m_spAd_accountsAd_account_idBilling_profilesResource);
}
void BillingApi::setResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioAccountsResource> resource) {
    m_spAd_accountsAd_account_idSsioAccountsResource = resource;
    m_service->publish(m_spAd_accountsAd_account_idSsioAccountsResource);
}
void BillingApi::setResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioInsertion_ordersResource> resource) {
    m_spAd_accountsAd_account_idSsioInsertion_ordersResource = resource;
    m_service->publish(m_spAd_accountsAd_account_idSsioInsertion_ordersResource);
}
void BillingApi::setResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioInsertion_ordersStatusResource> resource) {
    m_spAd_accountsAd_account_idSsioInsertion_ordersStatusResource = resource;
    m_service->publish(m_spAd_accountsAd_account_idSsioInsertion_ordersStatusResource);
}
void BillingApi::setResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource> resource) {
    m_spAd_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource = resource;
    m_service->publish(m_spAd_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource);
}
void BillingApi::setResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioOrder_linesResource> resource) {
    m_spAd_accountsAd_account_idSsioOrder_linesResource = resource;
    m_service->publish(m_spAd_accountsAd_account_idSsioOrder_linesResource);
}
void BillingApi::setBillingApiAd_accountsAd_account_idAds_creditRedeemResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idAds_creditRedeemResource> spAd_accountsAd_account_idAds_creditRedeemResource) {
    m_spAd_accountsAd_account_idAds_creditRedeemResource = spAd_accountsAd_account_idAds_creditRedeemResource;
    m_service->publish(m_spAd_accountsAd_account_idAds_creditRedeemResource);
}
void BillingApi::setBillingApiAd_accountsAd_account_idAds_creditDiscountsResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idAds_creditDiscountsResource> spAd_accountsAd_account_idAds_creditDiscountsResource) {
    m_spAd_accountsAd_account_idAds_creditDiscountsResource = spAd_accountsAd_account_idAds_creditDiscountsResource;
    m_service->publish(m_spAd_accountsAd_account_idAds_creditDiscountsResource);
}
void BillingApi::setBillingApiAd_accountsAd_account_idBilling_profilesResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idBilling_profilesResource> spAd_accountsAd_account_idBilling_profilesResource) {
    m_spAd_accountsAd_account_idBilling_profilesResource = spAd_accountsAd_account_idBilling_profilesResource;
    m_service->publish(m_spAd_accountsAd_account_idBilling_profilesResource);
}
void BillingApi::setBillingApiAd_accountsAd_account_idSsioAccountsResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioAccountsResource> spAd_accountsAd_account_idSsioAccountsResource) {
    m_spAd_accountsAd_account_idSsioAccountsResource = spAd_accountsAd_account_idSsioAccountsResource;
    m_service->publish(m_spAd_accountsAd_account_idSsioAccountsResource);
}
void BillingApi::setBillingApiAd_accountsAd_account_idSsioInsertion_ordersResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioInsertion_ordersResource> spAd_accountsAd_account_idSsioInsertion_ordersResource) {
    m_spAd_accountsAd_account_idSsioInsertion_ordersResource = spAd_accountsAd_account_idSsioInsertion_ordersResource;
    m_service->publish(m_spAd_accountsAd_account_idSsioInsertion_ordersResource);
}
void BillingApi::setBillingApiAd_accountsAd_account_idSsioInsertion_ordersStatusResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioInsertion_ordersStatusResource> spAd_accountsAd_account_idSsioInsertion_ordersStatusResource) {
    m_spAd_accountsAd_account_idSsioInsertion_ordersStatusResource = spAd_accountsAd_account_idSsioInsertion_ordersStatusResource;
    m_service->publish(m_spAd_accountsAd_account_idSsioInsertion_ordersStatusResource);
}
void BillingApi::setBillingApiAd_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource> spAd_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource) {
    m_spAd_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource = spAd_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource;
    m_service->publish(m_spAd_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource);
}
void BillingApi::setBillingApiAd_accountsAd_account_idSsioOrder_linesResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioOrder_linesResource> spAd_accountsAd_account_idSsioOrder_linesResource) {
    m_spAd_accountsAd_account_idSsioOrder_linesResource = spAd_accountsAd_account_idSsioOrder_linesResource;
    m_service->publish(m_spAd_accountsAd_account_idSsioOrder_linesResource);
}


void BillingApi::publishDefaultResources() {
    if (!m_spAd_accountsAd_account_idAds_creditRedeemResource) {
        setResource(std::make_shared<BillingApiResources::Ad_accountsAd_account_idAds_creditRedeemResource>());
    }
    if (!m_spAd_accountsAd_account_idAds_creditDiscountsResource) {
        setResource(std::make_shared<BillingApiResources::Ad_accountsAd_account_idAds_creditDiscountsResource>());
    }
    if (!m_spAd_accountsAd_account_idBilling_profilesResource) {
        setResource(std::make_shared<BillingApiResources::Ad_accountsAd_account_idBilling_profilesResource>());
    }
    if (!m_spAd_accountsAd_account_idSsioAccountsResource) {
        setResource(std::make_shared<BillingApiResources::Ad_accountsAd_account_idSsioAccountsResource>());
    }
    if (!m_spAd_accountsAd_account_idSsioInsertion_ordersResource) {
        setResource(std::make_shared<BillingApiResources::Ad_accountsAd_account_idSsioInsertion_ordersResource>());
    }
    if (!m_spAd_accountsAd_account_idSsioInsertion_ordersStatusResource) {
        setResource(std::make_shared<BillingApiResources::Ad_accountsAd_account_idSsioInsertion_ordersStatusResource>());
    }
    if (!m_spAd_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource) {
        setResource(std::make_shared<BillingApiResources::Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource>());
    }
    if (!m_spAd_accountsAd_account_idSsioOrder_linesResource) {
        setResource(std::make_shared<BillingApiResources::Ad_accountsAd_account_idSsioOrder_linesResource>());
    }
}

std::shared_ptr<restbed::Service> BillingApi::service() {
    return m_service;
}


}
}
}
}

