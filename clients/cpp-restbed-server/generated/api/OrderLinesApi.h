/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderLinesApi.h
 *
 * 
 */

#ifndef OrderLinesApi_H_
#define OrderLinesApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "Error.h"
#include "OrderLine.h"
#include "Order_lines_list_200_response.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  OrderLinesApiException: public std::exception
{
public:
    OrderLinesApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace OrderLinesApiResources {
/// <summary>
/// Get order line
/// </summary>
/// <remarks>
/// Get a specific existing order line associated with an ad account.
/// </remarks>
class  Ad_accountsAd_account_idOrder_linesOrder_line_idResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idOrder_linesOrder_line_idResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idOrder_linesOrder_line_idResource() = default;

    Ad_accountsAd_account_idOrder_linesOrder_line_idResource(
        const Ad_accountsAd_account_idOrder_linesOrder_line_idResource& other) = default; // copy constructor
    Ad_accountsAd_account_idOrder_linesOrder_line_idResource(Ad_accountsAd_account_idOrder_linesOrder_line_idResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idOrder_linesOrder_line_idResource& operator=(const Ad_accountsAd_account_idOrder_linesOrder_line_idResource& other) = default; // copy assignment
    Ad_accountsAd_account_idOrder_linesOrder_line_idResource& operator=(Ad_accountsAd_account_idOrder_linesOrder_line_idResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, OrderLine>(
        std::string & adAccountId, std::string & orderLineId)> handler_GET_func =
            [](std::string &, std::string &) -> std::pair<int, OrderLine>
                { throw OrderLinesApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, OrderLine> handler_GET(
        std::string & adAccountId, std::string & orderLineId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOrderLinesApiException(const OrderLinesApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get order lines
/// </summary>
/// <remarks>
/// List existing order lines associated with an ad account.
/// </remarks>
class  Ad_accountsAd_account_idOrder_linesResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idOrder_linesResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idOrder_linesResource() = default;

    Ad_accountsAd_account_idOrder_linesResource(
        const Ad_accountsAd_account_idOrder_linesResource& other) = default; // copy constructor
    Ad_accountsAd_account_idOrder_linesResource(Ad_accountsAd_account_idOrder_linesResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idOrder_linesResource& operator=(const Ad_accountsAd_account_idOrder_linesResource& other) = default; // copy assignment
    Ad_accountsAd_account_idOrder_linesResource& operator=(Ad_accountsAd_account_idOrder_linesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Order_lines_list_200_response>(
        std::string & adAccountId, int32_t & pageSize, std::string & order, std::string & bookmark)> handler_GET_func =
            [](std::string &, int32_t &, std::string &, std::string &) -> std::pair<int, Order_lines_list_200_response>
                { throw OrderLinesApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Order_lines_list_200_response> handler_GET(
        std::string & adAccountId, int32_t & pageSize, std::string & order, std::string & bookmark);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOrderLinesApiException(const OrderLinesApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace OrderLinesApiResources */

using OrderLinesApiAd_accountsAd_account_idOrder_linesOrder_line_idResource [[deprecated]] = OrderLinesApiResources::Ad_accountsAd_account_idOrder_linesOrder_line_idResource;
using OrderLinesApiAd_accountsAd_account_idOrder_linesResource [[deprecated]] = OrderLinesApiResources::Ad_accountsAd_account_idOrder_linesResource;

//
// The restbed service to actually implement the REST server
//
class  OrderLinesApi
{
public:
    explicit OrderLinesApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~OrderLinesApi();

    std::shared_ptr<OrderLinesApiResources::Ad_accountsAd_account_idOrder_linesOrder_line_idResource> getAd_accountsAd_account_idOrder_linesOrder_line_idResource();
    std::shared_ptr<OrderLinesApiResources::Ad_accountsAd_account_idOrder_linesResource> getAd_accountsAd_account_idOrder_linesResource();

    void setResource(std::shared_ptr<OrderLinesApiResources::Ad_accountsAd_account_idOrder_linesOrder_line_idResource> resource);
    void setResource(std::shared_ptr<OrderLinesApiResources::Ad_accountsAd_account_idOrder_linesResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setOrderLinesApiAd_accountsAd_account_idOrder_linesOrder_line_idResource(std::shared_ptr<OrderLinesApiResources::Ad_accountsAd_account_idOrder_linesOrder_line_idResource> spOrderLinesApiAd_accountsAd_account_idOrder_linesOrder_line_idResource);
    [[deprecated("use setResource()")]]
    virtual void setOrderLinesApiAd_accountsAd_account_idOrder_linesResource(std::shared_ptr<OrderLinesApiResources::Ad_accountsAd_account_idOrder_linesResource> spOrderLinesApiAd_accountsAd_account_idOrder_linesResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<OrderLinesApiResources::Ad_accountsAd_account_idOrder_linesOrder_line_idResource> m_spAd_accountsAd_account_idOrder_linesOrder_line_idResource;
    std::shared_ptr<OrderLinesApiResources::Ad_accountsAd_account_idOrder_linesResource> m_spAd_accountsAd_account_idOrder_linesResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* OrderLinesApi_H_ */

