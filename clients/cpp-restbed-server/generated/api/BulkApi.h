/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BulkApi.h
 *
 * 
 */

#ifndef BulkApi_H_
#define BulkApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "BulkDownloadRequest.h"
#include "BulkDownloadResponse.h"
#include "BulkUpsertRequest.h"
#include "BulkUpsertResponse.h"
#include "BulkUpsertStatusResponse.h"
#include "Error.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  BulkApiException: public std::exception
{
public:
    BulkApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace BulkApiResources {
/// <summary>
/// Get advertiser entities in bulk
/// </summary>
/// <remarks>
/// Create an asynchronous report that may include information on campaigns, ad groups, product groups, ads, and/or keywords; can filter by campaigns. Though the entities may be active, archived, or paused, only active entities will return data.
/// </remarks>
class  Ad_accountsAd_account_idBulkDownloadResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idBulkDownloadResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idBulkDownloadResource() = default;

    Ad_accountsAd_account_idBulkDownloadResource(
        const Ad_accountsAd_account_idBulkDownloadResource& other) = default; // copy constructor
    Ad_accountsAd_account_idBulkDownloadResource(Ad_accountsAd_account_idBulkDownloadResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idBulkDownloadResource& operator=(const Ad_accountsAd_account_idBulkDownloadResource& other) = default; // copy assignment
    Ad_accountsAd_account_idBulkDownloadResource& operator=(Ad_accountsAd_account_idBulkDownloadResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, BulkDownloadResponse>(
        std::string & adAccountId, BulkDownloadRequest & bulkDownloadRequest)> handler_POST_func =
            [](std::string &, BulkDownloadRequest &) -> std::pair<int, BulkDownloadResponse>
                { throw BulkApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, BulkDownloadResponse> handler_POST(
        std::string & adAccountId, BulkDownloadRequest & bulkDownloadRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBulkApiException(const BulkApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Download advertiser entities in bulk
/// </summary>
/// <remarks>
/// Get the status of a bulk request by &lt;code&gt;request_id&lt;/code&gt;, along with a download URL that will allow you to download the new or updated entity data (campaigns, ad groups, product groups, ads, or keywords).
/// </remarks>
class  Ad_accountsAd_account_idBulkBulk_request_idResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idBulkBulk_request_idResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idBulkBulk_request_idResource() = default;

    Ad_accountsAd_account_idBulkBulk_request_idResource(
        const Ad_accountsAd_account_idBulkBulk_request_idResource& other) = default; // copy constructor
    Ad_accountsAd_account_idBulkBulk_request_idResource(Ad_accountsAd_account_idBulkBulk_request_idResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idBulkBulk_request_idResource& operator=(const Ad_accountsAd_account_idBulkBulk_request_idResource& other) = default; // copy assignment
    Ad_accountsAd_account_idBulkBulk_request_idResource& operator=(Ad_accountsAd_account_idBulkBulk_request_idResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, BulkUpsertStatusResponse>(
        std::string & adAccountId, std::string & bulkRequestId, bool & includeDetails)> handler_GET_func =
            [](std::string &, std::string &, bool &) -> std::pair<int, BulkUpsertStatusResponse>
                { throw BulkApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, BulkUpsertStatusResponse> handler_GET(
        std::string & adAccountId, std::string & bulkRequestId, bool & includeDetails);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBulkApiException(const BulkApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Create/update ad entities in bulk
/// </summary>
/// <remarks>
/// Either create or update any combination of campaigns, ad groups, product groups, ads, or keywords. Note that this request will be processed asynchronously; the response will include a &lt;code&gt;request_id&lt;/code&gt; that can be used to obtain the status of the request.
/// </remarks>
class  Ad_accountsAd_account_idBulkUpsertResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idBulkUpsertResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idBulkUpsertResource() = default;

    Ad_accountsAd_account_idBulkUpsertResource(
        const Ad_accountsAd_account_idBulkUpsertResource& other) = default; // copy constructor
    Ad_accountsAd_account_idBulkUpsertResource(Ad_accountsAd_account_idBulkUpsertResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idBulkUpsertResource& operator=(const Ad_accountsAd_account_idBulkUpsertResource& other) = default; // copy assignment
    Ad_accountsAd_account_idBulkUpsertResource& operator=(Ad_accountsAd_account_idBulkUpsertResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, BulkUpsertResponse>(
        std::string & adAccountId, BulkUpsertRequest & bulkUpsertRequest)> handler_POST_func =
            [](std::string &, BulkUpsertRequest &) -> std::pair<int, BulkUpsertResponse>
                { throw BulkApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, BulkUpsertResponse> handler_POST(
        std::string & adAccountId, BulkUpsertRequest & bulkUpsertRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBulkApiException(const BulkApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace BulkApiResources */

using BulkApiAd_accountsAd_account_idBulkDownloadResource [[deprecated]] = BulkApiResources::Ad_accountsAd_account_idBulkDownloadResource;
using BulkApiAd_accountsAd_account_idBulkBulk_request_idResource [[deprecated]] = BulkApiResources::Ad_accountsAd_account_idBulkBulk_request_idResource;
using BulkApiAd_accountsAd_account_idBulkUpsertResource [[deprecated]] = BulkApiResources::Ad_accountsAd_account_idBulkUpsertResource;

//
// The restbed service to actually implement the REST server
//
class  BulkApi
{
public:
    explicit BulkApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~BulkApi();

    std::shared_ptr<BulkApiResources::Ad_accountsAd_account_idBulkDownloadResource> getAd_accountsAd_account_idBulkDownloadResource();
    std::shared_ptr<BulkApiResources::Ad_accountsAd_account_idBulkBulk_request_idResource> getAd_accountsAd_account_idBulkBulk_request_idResource();
    std::shared_ptr<BulkApiResources::Ad_accountsAd_account_idBulkUpsertResource> getAd_accountsAd_account_idBulkUpsertResource();

    void setResource(std::shared_ptr<BulkApiResources::Ad_accountsAd_account_idBulkDownloadResource> resource);
    void setResource(std::shared_ptr<BulkApiResources::Ad_accountsAd_account_idBulkBulk_request_idResource> resource);
    void setResource(std::shared_ptr<BulkApiResources::Ad_accountsAd_account_idBulkUpsertResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setBulkApiAd_accountsAd_account_idBulkDownloadResource(std::shared_ptr<BulkApiResources::Ad_accountsAd_account_idBulkDownloadResource> spBulkApiAd_accountsAd_account_idBulkDownloadResource);
    [[deprecated("use setResource()")]]
    virtual void setBulkApiAd_accountsAd_account_idBulkBulk_request_idResource(std::shared_ptr<BulkApiResources::Ad_accountsAd_account_idBulkBulk_request_idResource> spBulkApiAd_accountsAd_account_idBulkBulk_request_idResource);
    [[deprecated("use setResource()")]]
    virtual void setBulkApiAd_accountsAd_account_idBulkUpsertResource(std::shared_ptr<BulkApiResources::Ad_accountsAd_account_idBulkUpsertResource> spBulkApiAd_accountsAd_account_idBulkUpsertResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<BulkApiResources::Ad_accountsAd_account_idBulkDownloadResource> m_spAd_accountsAd_account_idBulkDownloadResource;
    std::shared_ptr<BulkApiResources::Ad_accountsAd_account_idBulkBulk_request_idResource> m_spAd_accountsAd_account_idBulkBulk_request_idResource;
    std::shared_ptr<BulkApiResources::Ad_accountsAd_account_idBulkUpsertResource> m_spAd_accountsAd_account_idBulkUpsertResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* BulkApi_H_ */

