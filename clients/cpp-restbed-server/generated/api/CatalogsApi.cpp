/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "CatalogsApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

namespace {
[[maybe_unused]]
std::string selectPreferredContentType(const std::vector<std::string>& contentTypes) {
    if (contentTypes.size() == 0) {
        return "application/json";
    }

    if (contentTypes.size() == 1) {
        return contentTypes.at(0);
    }

    static const std::array<std::string, 2> preferredTypes = {"json", "xml"};
    for (const auto& preferredType: preferredTypes) {
        const auto ret = std::find_if(contentTypes.cbegin(),
        contentTypes.cend(),
        [preferredType](const std::string& str) {
            return str.find(preferredType) != std::string::npos;});
        if (ret != contentTypes.cend()) {
            return *ret;
        }
    }

    return contentTypes.at(0);
}
}

CatalogsApiException::CatalogsApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int CatalogsApiException::getStatus() const
{
    return m_status;
}
const char* CatalogsApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
MODEL_T extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = MODEL_T(pt);
    return model;
}

template<class MODEL_T>
std::vector<MODEL_T> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<MODEL_T>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(MODEL_T(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

namespace CatalogsApiResources {
CatalogsProduct_groupsProduct_group_idProductsResource::CatalogsProduct_groupsProduct_group_idProductsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/catalogs/product_groups/{product_group_id: .*}/products");
	this->set_method_handler("GET",
		std::bind(&CatalogsProduct_groupsProduct_group_idProductsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CatalogsProduct_groupsProduct_group_idProductsResource::handleCatalogsApiException(const CatalogsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CatalogsProduct_groupsProduct_group_idProductsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CatalogsProduct_groupsProduct_group_idProductsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CatalogsProduct_groupsProduct_group_idProductsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CatalogsProduct_groupsProduct_group_idProductsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CatalogsProduct_groupsProduct_group_idProductsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CatalogsProduct_groupsProduct_group_idProductsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string productGroupId = request->get_path_parameter("product_group_id", "");
    // Getting the query params
    std::string bookmark = request->get_query_parameter("bookmark", "");
    int32_t pageSize = request->get_query_parameter("pageSize", 25);
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    bool pinMetrics = request->get_query_parameter("pinMetrics", false);
    
    int status_code = 500;
    Catalogs_product_group_pins_list_200_response resultObject = Catalogs_product_group_pins_list_200_response{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(productGroupId, bookmark, pageSize, adAccountId, pinMetrics);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid parameters.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unauthorized access.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Catalogs product group not found.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, Catalogs_product_group_pins_list_200_response> CatalogsProduct_groupsProduct_group_idProductsResource::handler_GET(
        std::string & productGroupId, std::string & bookmark, int32_t & pageSize, std::string & adAccountId, bool & pinMetrics)
{
    return handler_GET_func(productGroupId, bookmark, pageSize, adAccountId, pinMetrics);
}


std::string CatalogsProduct_groupsProduct_group_idProductsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CatalogsProduct_groupsProduct_group_idProductsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CatalogsProduct_groupsResource::CatalogsProduct_groupsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/catalogs/product_groups");
	this->set_method_handler("POST",
		std::bind(&CatalogsProduct_groupsResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&CatalogsProduct_groupsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CatalogsProduct_groupsResource::handleCatalogsApiException(const CatalogsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CatalogsProduct_groupsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CatalogsProduct_groupsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CatalogsProduct_groupsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CatalogsProduct_groupsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CatalogsProduct_groupsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CatalogsProduct_groupsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto multipleProductGroupsInner = extractJsonModelBodyParam<Multiple_product_groups_inner>(bodyContent);
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    CatalogsVerticalProductGroup resultObject = CatalogsVerticalProductGroup{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(multipleProductGroupsInner, adAccountId);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 201) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 201, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid body.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unauthorized access.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Forbidden. Account not approved for catalog product group mutations yet.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 409) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Conflict. Can&#39;t create this catalogs product group with this value.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 409, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void CatalogsProduct_groupsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // Getting the query params
    std::string id_raw = request->get_query_parameter("id");
    std::vector<int32_t> id;
    std::vector<std::string> id_temp;
    boost::split(id_temp, id_raw, boost::is_any_of(","));
    std::transform(id_temp.begin(), id_temp.end(), std::back_inserter(id), [](const auto& i){ int32_t ret; ret.fromString(i); return ret;});
    std::string feedId = request->get_query_parameter("feedId", "");
    std::string catalogId = request->get_query_parameter("catalogId", "");
    std::string bookmark = request->get_query_parameter("bookmark", "");
    int32_t pageSize = request->get_query_parameter("pageSize", 25);
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    Catalogs_product_groups_list_200_response resultObject = Catalogs_product_groups_list_200_response{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(id, feedId, catalogId, bookmark, pageSize, adAccountId);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid feed parameters.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unauthorized access.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Forbidden. Account not approved for catalog product group mutations yet.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Data feed not found.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 409) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Conflict. Can&#39;t create this catalogs product group with this value.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 409, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, CatalogsVerticalProductGroup> CatalogsProduct_groupsResource::handler_POST(
        Multiple_product_groups_inner & multipleProductGroupsInner, std::string & adAccountId)
{
    return handler_POST_func(multipleProductGroupsInner, adAccountId);
}

std::pair<int, Catalogs_product_groups_list_200_response> CatalogsProduct_groupsResource::handler_GET(
    std::vector<int32_t> & id, std::string & feedId, std::string & catalogId, std::string & bookmark, int32_t & pageSize, std::string & adAccountId)
{
    return handler_GET_func(id, feedId, catalogId, bookmark, pageSize, adAccountId);
}

std::string CatalogsProduct_groupsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CatalogsProduct_groupsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CatalogsProduct_groupsMultipleResource::CatalogsProduct_groupsMultipleResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/catalogs/product_groups/multiple");
	this->set_method_handler("POST",
		std::bind(&CatalogsProduct_groupsMultipleResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("DELETE",
		std::bind(&CatalogsProduct_groupsMultipleResource::handler_DELETE_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CatalogsProduct_groupsMultipleResource::handleCatalogsApiException(const CatalogsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CatalogsProduct_groupsMultipleResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CatalogsProduct_groupsMultipleResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CatalogsProduct_groupsMultipleResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CatalogsProduct_groupsMultipleResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CatalogsProduct_groupsMultipleResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CatalogsProduct_groupsMultipleResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto multipleProductGroupsInner = extractJsonArrayBodyParam<Multiple_product_groups_inner>(bodyContent);
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    std::vector<std::string> resultObject = std::vector<std::string>();
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(multipleProductGroupsInner, adAccountId);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 201) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 201, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid body.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unauthorized access.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Forbidden. Account not approved for catalog product group mutations yet.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 409) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Conflict. Can&#39;t create this catalogs product group with this value.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 409, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void CatalogsProduct_groupsMultipleResource::handler_DELETE_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // Getting the query params
    std::string id_raw = request->get_query_parameter("id");
    std::vector<int32_t> id;
    std::vector<std::string> id_temp;
    boost::split(id_temp, id_raw, boost::is_any_of(","));
    std::transform(id_temp.begin(), id_temp.end(), std::back_inserter(id), [](const auto& i){ int32_t ret; ret.fromString(i); return ret;});
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    std::string result = "";
    
    try {
        status_code =
            handler_DELETE(id, adAccountId);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 204) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 204, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unauthorized access.";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Forbidden. Account not approved for catalog product group mutations yet.";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Catalogs product group not found.";
    
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 409) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Conflict. Can&#39;t delete this catalogs product group.";
    
        returnResponse(session, 409, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error.";
    
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, std::vector<std::string>> CatalogsProduct_groupsMultipleResource::handler_POST(
        std::vector<Multiple_product_groups_inner> & multipleProductGroupsInner, std::string & adAccountId)
{
    return handler_POST_func(multipleProductGroupsInner, adAccountId);
}

int CatalogsProduct_groupsMultipleResource::handler_DELETE(
    std::vector<int32_t> & id, std::string & adAccountId)
{
    return handler_DELETE_func(id, adAccountId);
}

std::string CatalogsProduct_groupsMultipleResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CatalogsProduct_groupsMultipleResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CatalogsProduct_groupsProduct_group_idResource::CatalogsProduct_groupsProduct_group_idResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/catalogs/product_groups/{product_group_id: .*}");
	this->set_method_handler("DELETE",
		std::bind(&CatalogsProduct_groupsProduct_group_idResource::handler_DELETE_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&CatalogsProduct_groupsProduct_group_idResource::handler_GET_internal, this,
			std::placeholders::_1));
	this->set_method_handler("PATCH",
		std::bind(&CatalogsProduct_groupsProduct_group_idResource::handler_PATCH_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CatalogsProduct_groupsProduct_group_idResource::handleCatalogsApiException(const CatalogsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CatalogsProduct_groupsProduct_group_idResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CatalogsProduct_groupsProduct_group_idResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CatalogsProduct_groupsProduct_group_idResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CatalogsProduct_groupsProduct_group_idResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CatalogsProduct_groupsProduct_group_idResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CatalogsProduct_groupsProduct_group_idResource::handler_DELETE_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string productGroupId = request->get_path_parameter("product_group_id", "");
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    std::string result = "";
    
    try {
        status_code =
            handler_DELETE(productGroupId, adAccountId);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 204) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 204, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid catalogs product group id parameters.";
    
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unauthorized access.";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Forbidden. Account not approved for catalog product group mutations yet.";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Catalogs product group not found.";
    
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 409) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Conflict. Can&#39;t delete this catalogs product group.";
    
        returnResponse(session, 409, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error.";
    
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void CatalogsProduct_groupsProduct_group_idResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // Getting the path params
    std::string productGroupId = request->get_path_parameter("product_group_id", "");
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    CatalogsVerticalProductGroup resultObject = CatalogsVerticalProductGroup{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(productGroupId, adAccountId);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid catalogs product group id parameters.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unauthorized access.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Forbidden. Account not approved for catalog product group mutations yet.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Catalogs product group not found.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 409) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Conflict. Can&#39;t get a catalogs product group without an existing catalog.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 409, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}
// x-extension
void CatalogsProduct_groupsProduct_group_idResource::handler_PATCH_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto catalogsProductGroupsUpdateRequest = extractJsonModelBodyParam<Catalogs_product_groups_update_request>(bodyContent);
    // Getting the path params
    std::string productGroupId = request->get_path_parameter("product_group_id", "");
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    CatalogsVerticalProductGroup resultObject = CatalogsVerticalProductGroup{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_PATCH(productGroupId, catalogsProductGroupsUpdateRequest, adAccountId);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid parameters.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unauthorized access.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Forbidden. Account not approved for catalog product group mutations yet.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Catalogs product group not found.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 409) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Conflict. Can&#39;t update this catalogs product group to this value.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 409, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

int CatalogsProduct_groupsProduct_group_idResource::handler_DELETE(
        std::string & productGroupId, std::string & adAccountId)
{
    return handler_DELETE_func(productGroupId, adAccountId);
}

std::pair<int, CatalogsVerticalProductGroup> CatalogsProduct_groupsProduct_group_idResource::handler_GET(
    std::string & productGroupId, std::string & adAccountId)
{
    return handler_GET_func(productGroupId, adAccountId);
}
std::pair<int, CatalogsVerticalProductGroup> CatalogsProduct_groupsProduct_group_idResource::handler_PATCH(
    std::string & productGroupId, Catalogs_product_groups_update_request & catalogsProductGroupsUpdateRequest, std::string & adAccountId)
{
    return handler_PATCH_func(productGroupId, catalogsProductGroupsUpdateRequest, adAccountId);
}

std::string CatalogsProduct_groupsProduct_group_idResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CatalogsProduct_groupsProduct_group_idResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CatalogsProduct_groupsProduct_group_idProduct_countsResource::CatalogsProduct_groupsProduct_group_idProduct_countsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/catalogs/product_groups/{product_group_id: .*}/product_counts");
	this->set_method_handler("GET",
		std::bind(&CatalogsProduct_groupsProduct_group_idProduct_countsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CatalogsProduct_groupsProduct_group_idProduct_countsResource::handleCatalogsApiException(const CatalogsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CatalogsProduct_groupsProduct_group_idProduct_countsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CatalogsProduct_groupsProduct_group_idProduct_countsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CatalogsProduct_groupsProduct_group_idProduct_countsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CatalogsProduct_groupsProduct_group_idProduct_countsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CatalogsProduct_groupsProduct_group_idProduct_countsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CatalogsProduct_groupsProduct_group_idProduct_countsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string productGroupId = request->get_path_parameter("product_group_id", "");
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    CatalogsProductGroupProductCountsVertical resultObject = CatalogsProductGroupProductCountsVertical{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(productGroupId, adAccountId);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Product Group Not Found.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 409) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Can&#39;t access this feature without an existing catalog.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 409, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, CatalogsProductGroupProductCountsVertical> CatalogsProduct_groupsProduct_group_idProduct_countsResource::handler_GET(
        std::string & productGroupId, std::string & adAccountId)
{
    return handler_GET_func(productGroupId, adAccountId);
}


std::string CatalogsProduct_groupsProduct_group_idProduct_countsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CatalogsProduct_groupsProduct_group_idProduct_countsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CatalogsResource::CatalogsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/catalogs");
	this->set_method_handler("POST",
		std::bind(&CatalogsResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&CatalogsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CatalogsResource::handleCatalogsApiException(const CatalogsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CatalogsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CatalogsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CatalogsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CatalogsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CatalogsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CatalogsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto catalogsCreateRequest = extractJsonModelBodyParam<CatalogsCreateRequest>(bodyContent);
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    Catalog resultObject = Catalog{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(catalogsCreateRequest, adAccountId);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid parameters.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unauthorized access.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void CatalogsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // Getting the query params
    std::string bookmark = request->get_query_parameter("bookmark", "");
    int32_t pageSize = request->get_query_parameter("pageSize", 25);
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    Catalogs_list_200_response resultObject = Catalogs_list_200_response{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(bookmark, pageSize, adAccountId);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid parameters.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unauthorized access.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, Catalog> CatalogsResource::handler_POST(
        CatalogsCreateRequest & catalogsCreateRequest, std::string & adAccountId)
{
    return handler_POST_func(catalogsCreateRequest, adAccountId);
}

std::pair<int, Catalogs_list_200_response> CatalogsResource::handler_GET(
    std::string & bookmark, int32_t & pageSize, std::string & adAccountId)
{
    return handler_GET_func(bookmark, pageSize, adAccountId);
}

std::string CatalogsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CatalogsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CatalogsFeedsFeed_idProcessing_resultsResource::CatalogsFeedsFeed_idProcessing_resultsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/catalogs/feeds/{feed_id: .*}/processing_results");
	this->set_method_handler("GET",
		std::bind(&CatalogsFeedsFeed_idProcessing_resultsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CatalogsFeedsFeed_idProcessing_resultsResource::handleCatalogsApiException(const CatalogsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CatalogsFeedsFeed_idProcessing_resultsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CatalogsFeedsFeed_idProcessing_resultsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CatalogsFeedsFeed_idProcessing_resultsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CatalogsFeedsFeed_idProcessing_resultsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CatalogsFeedsFeed_idProcessing_resultsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CatalogsFeedsFeed_idProcessing_resultsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string feedId = request->get_path_parameter("feed_id", "");
    // Getting the query params
    std::string bookmark = request->get_query_parameter("bookmark", "");
    int32_t pageSize = request->get_query_parameter("pageSize", 25);
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    Feed_processing_results_list_200_response resultObject = Feed_processing_results_list_200_response{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(feedId, bookmark, pageSize, adAccountId);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid parameters.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unauthorized access.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Feed not found.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, Feed_processing_results_list_200_response> CatalogsFeedsFeed_idProcessing_resultsResource::handler_GET(
        std::string & feedId, std::string & bookmark, int32_t & pageSize, std::string & adAccountId)
{
    return handler_GET_func(feedId, bookmark, pageSize, adAccountId);
}


std::string CatalogsFeedsFeed_idProcessing_resultsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CatalogsFeedsFeed_idProcessing_resultsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CatalogsFeedsResource::CatalogsFeedsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/catalogs/feeds");
	this->set_method_handler("POST",
		std::bind(&CatalogsFeedsResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&CatalogsFeedsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CatalogsFeedsResource::handleCatalogsApiException(const CatalogsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CatalogsFeedsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CatalogsFeedsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CatalogsFeedsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CatalogsFeedsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CatalogsFeedsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CatalogsFeedsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto feedsCreateRequest = extractJsonModelBodyParam<Feeds_create_request>(bodyContent);
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    CatalogsFeed resultObject = CatalogsFeed{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(feedsCreateRequest, adAccountId);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 201) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 201, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid feed parameters.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unauthorized access.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Business account required.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 409) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "User website required.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 409, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 422) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unique feed name is required.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 422, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 501) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Not implemented (absent \&quot;default_country\&quot; or \&quot;default_locale\&quot;).";
    
        result = resultObject.toJsonString();
        returnResponse(session, 501, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void CatalogsFeedsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // Getting the query params
    std::string bookmark = request->get_query_parameter("bookmark", "");
    int32_t pageSize = request->get_query_parameter("pageSize", 25);
    std::string catalogId = request->get_query_parameter("catalogId", "");
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    Feeds_list_200_response resultObject = Feeds_list_200_response{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(bookmark, pageSize, catalogId, adAccountId);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid parameters.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unauthorized access.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, CatalogsFeed> CatalogsFeedsResource::handler_POST(
        Feeds_create_request & feedsCreateRequest, std::string & adAccountId)
{
    return handler_POST_func(feedsCreateRequest, adAccountId);
}

std::pair<int, Feeds_list_200_response> CatalogsFeedsResource::handler_GET(
    std::string & bookmark, int32_t & pageSize, std::string & catalogId, std::string & adAccountId)
{
    return handler_GET_func(bookmark, pageSize, catalogId, adAccountId);
}

std::string CatalogsFeedsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CatalogsFeedsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CatalogsFeedsFeed_idResource::CatalogsFeedsFeed_idResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/catalogs/feeds/{feed_id: .*}");
	this->set_method_handler("DELETE",
		std::bind(&CatalogsFeedsFeed_idResource::handler_DELETE_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&CatalogsFeedsFeed_idResource::handler_GET_internal, this,
			std::placeholders::_1));
	this->set_method_handler("PATCH",
		std::bind(&CatalogsFeedsFeed_idResource::handler_PATCH_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CatalogsFeedsFeed_idResource::handleCatalogsApiException(const CatalogsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CatalogsFeedsFeed_idResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CatalogsFeedsFeed_idResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CatalogsFeedsFeed_idResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CatalogsFeedsFeed_idResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CatalogsFeedsFeed_idResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CatalogsFeedsFeed_idResource::handler_DELETE_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string feedId = request->get_path_parameter("feed_id", "");
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    std::string result = "";
    
    try {
        status_code =
            handler_DELETE(feedId, adAccountId);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 204) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 204, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid feed parameters.";
    
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Forbidden. Account not approved for feed mutations yet.";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Data feed not found.";
    
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 409) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Conflict. Can&#39;t delete a feed with active promotions.";
    
        returnResponse(session, 409, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void CatalogsFeedsFeed_idResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // Getting the path params
    std::string feedId = request->get_path_parameter("feed_id", "");
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    CatalogsFeed resultObject = CatalogsFeed{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(feedId, adAccountId);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid feed parameters.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unauthorized access.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Data feed not found.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}
// x-extension
void CatalogsFeedsFeed_idResource::handler_PATCH_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto feedsUpdateRequest = extractJsonModelBodyParam<Feeds_update_request>(bodyContent);
    // Getting the path params
    std::string feedId = request->get_path_parameter("feed_id", "");
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    CatalogsFeed resultObject = CatalogsFeed{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_PATCH(feedId, feedsUpdateRequest, adAccountId);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid feed parameters.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Forbidden. Account not approved for feed mutations yet.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Data feed not found.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

int CatalogsFeedsFeed_idResource::handler_DELETE(
        std::string & feedId, std::string & adAccountId)
{
    return handler_DELETE_func(feedId, adAccountId);
}

std::pair<int, CatalogsFeed> CatalogsFeedsFeed_idResource::handler_GET(
    std::string & feedId, std::string & adAccountId)
{
    return handler_GET_func(feedId, adAccountId);
}
std::pair<int, CatalogsFeed> CatalogsFeedsFeed_idResource::handler_PATCH(
    std::string & feedId, Feeds_update_request & feedsUpdateRequest, std::string & adAccountId)
{
    return handler_PATCH_func(feedId, feedsUpdateRequest, adAccountId);
}

std::string CatalogsFeedsFeed_idResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CatalogsFeedsFeed_idResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CatalogsFeedsFeed_idIngestResource::CatalogsFeedsFeed_idIngestResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/catalogs/feeds/{feed_id: .*}/ingest");
	this->set_method_handler("POST",
		std::bind(&CatalogsFeedsFeed_idIngestResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CatalogsFeedsFeed_idIngestResource::handleCatalogsApiException(const CatalogsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CatalogsFeedsFeed_idIngestResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CatalogsFeedsFeed_idIngestResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CatalogsFeedsFeed_idIngestResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CatalogsFeedsFeed_idIngestResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CatalogsFeedsFeed_idIngestResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CatalogsFeedsFeed_idIngestResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string feedId = request->get_path_parameter("feed_id", "");
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    CatalogsFeedIngestion resultObject = CatalogsFeedIngestion{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(feedId, adAccountId);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid feed parameters.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Forbidden. Account not approved for feed mutations yet.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Data feed not found.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, CatalogsFeedIngestion> CatalogsFeedsFeed_idIngestResource::handler_POST(
        std::string & feedId, std::string & adAccountId)
{
    return handler_POST_func(feedId, adAccountId);
}


std::string CatalogsFeedsFeed_idIngestResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CatalogsFeedsFeed_idIngestResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CatalogsItemsBatchBatch_idResource::CatalogsItemsBatchBatch_idResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/catalogs/items/batch/{batch_id: .*}");
	this->set_method_handler("GET",
		std::bind(&CatalogsItemsBatchBatch_idResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CatalogsItemsBatchBatch_idResource::handleCatalogsApiException(const CatalogsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CatalogsItemsBatchBatch_idResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CatalogsItemsBatchBatch_idResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CatalogsItemsBatchBatch_idResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CatalogsItemsBatchBatch_idResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CatalogsItemsBatchBatch_idResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CatalogsItemsBatchBatch_idResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string batchId = request->get_path_parameter("batch_id", "");
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    CatalogsItemsBatch resultObject = CatalogsItemsBatch{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(batchId, adAccountId);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Not authenticated to access catalogs items batch";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Not authorized to access catalogs items batch";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Catalogs items batch not found";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 405) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Method Not Allowed.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 405, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, CatalogsItemsBatch> CatalogsItemsBatchBatch_idResource::handler_GET(
        std::string & batchId, std::string & adAccountId)
{
    return handler_GET_func(batchId, adAccountId);
}


std::string CatalogsItemsBatchBatch_idResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CatalogsItemsBatchBatch_idResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CatalogsItemsBatchResource::CatalogsItemsBatchResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/catalogs/items/batch");
	this->set_method_handler("POST",
		std::bind(&CatalogsItemsBatchResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CatalogsItemsBatchResource::handleCatalogsApiException(const CatalogsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CatalogsItemsBatchResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CatalogsItemsBatchResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CatalogsItemsBatchResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CatalogsItemsBatchResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CatalogsItemsBatchResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CatalogsItemsBatchResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto itemsBatchPostRequest = extractJsonModelBodyParam<Items_batch_post_request>(bodyContent);
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    CatalogsItemsBatch resultObject = CatalogsItemsBatch{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(itemsBatchPostRequest, adAccountId);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid request parameters.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Not authenticated to post catalogs items";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Not authorized to post catalogs items";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, CatalogsItemsBatch> CatalogsItemsBatchResource::handler_POST(
        Items_batch_post_request & itemsBatchPostRequest, std::string & adAccountId)
{
    return handler_POST_func(itemsBatchPostRequest, adAccountId);
}


std::string CatalogsItemsBatchResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CatalogsItemsBatchResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CatalogsProcessing_resultsProcessing_result_idItem_issuesResource::CatalogsProcessing_resultsProcessing_result_idItem_issuesResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/catalogs/processing_results/{processing_result_id: .*}/item_issues");
	this->set_method_handler("GET",
		std::bind(&CatalogsProcessing_resultsProcessing_result_idItem_issuesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CatalogsProcessing_resultsProcessing_result_idItem_issuesResource::handleCatalogsApiException(const CatalogsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CatalogsProcessing_resultsProcessing_result_idItem_issuesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CatalogsProcessing_resultsProcessing_result_idItem_issuesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CatalogsProcessing_resultsProcessing_result_idItem_issuesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CatalogsProcessing_resultsProcessing_result_idItem_issuesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CatalogsProcessing_resultsProcessing_result_idItem_issuesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CatalogsProcessing_resultsProcessing_result_idItem_issuesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string processingResultId = request->get_path_parameter("processing_result_id", "");
    // Getting the query params
    std::string bookmark = request->get_query_parameter("bookmark", "");
    int32_t pageSize = request->get_query_parameter("pageSize", 25);
    std::string itemNumbers_raw = request->get_query_parameter("itemNumbers");
    std::vector<int32_t> itemNumbers;
    std::vector<std::string> itemNumbers_temp;
    boost::split(itemNumbers_temp, itemNumbers_raw, boost::is_any_of(","));
    std::transform(itemNumbers_temp.begin(), itemNumbers_temp.end(), std::back_inserter(itemNumbers), [](const auto& i){ int32_t ret; ret.fromString(i); return ret;});
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    Items_issues_list_200_response resultObject = Items_issues_list_200_response{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(processingResultId, bookmark, pageSize, itemNumbers, itemValidationIssue, adAccountId);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unauthorized access.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Processing Result not found.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 501) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Not implemented.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 501, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, Items_issues_list_200_response> CatalogsProcessing_resultsProcessing_result_idItem_issuesResource::handler_GET(
        std::string & processingResultId, std::string & bookmark, int32_t & pageSize, std::vector<int32_t> & itemNumbers, CatalogsItemValidationIssue & itemValidationIssue, std::string & adAccountId)
{
    return handler_GET_func(processingResultId, bookmark, pageSize, itemNumbers, itemValidationIssue, adAccountId);
}


std::string CatalogsProcessing_resultsProcessing_result_idItem_issuesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CatalogsProcessing_resultsProcessing_result_idItem_issuesResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CatalogsItemsResource::CatalogsItemsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/catalogs/items");
	this->set_method_handler("GET",
		std::bind(&CatalogsItemsResource::handler_GET_internal, this,
			std::placeholders::_1));
	this->set_method_handler("POST",
		std::bind(&CatalogsItemsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CatalogsItemsResource::handleCatalogsApiException(const CatalogsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CatalogsItemsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CatalogsItemsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CatalogsItemsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CatalogsItemsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CatalogsItemsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CatalogsItemsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    std::string country = request->get_query_parameter("country", "");
    std::string language = request->get_query_parameter("language", "");
    std::string itemIds_raw = request->get_query_parameter("itemIds");
    std::vector<std::string> itemIds;
    std::vector<std::string> itemIds_temp;
    boost::split(itemIds_temp, itemIds_raw, boost::is_any_of(","));
    std::copy(itemIds_temp.begin(), itemIds_temp.end(), std::inserter(itemIds, std::next(itemIds.begin())));
    
    int status_code = 500;
    CatalogsItems resultObject = CatalogsItems{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(country, language, adAccountId, itemIds, filters);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid request parameters.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Not authorized to access catalogs items";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Not authorized to access catalogs items";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void CatalogsItemsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto catalogsItemsRequest = extractJsonModelBodyParam<CatalogsItemsRequest>(bodyContent);
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    CatalogsItems resultObject = CatalogsItems{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(catalogsItemsRequest, adAccountId);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid request";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Not authorized to access catalogs items";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Not authorized to access catalogs items";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, CatalogsItems> CatalogsItemsResource::handler_GET(
        std::string & country, std::string & language, std::string & adAccountId, std::vector<std::string> & itemIds, CatalogsItemsFilters & filters)
{
    return handler_GET_func(country, language, adAccountId, itemIds, filters);
}

std::pair<int, CatalogsItems> CatalogsItemsResource::handler_POST(
    CatalogsItemsRequest & catalogsItemsRequest, std::string & adAccountId)
{
    return handler_POST_func(catalogsItemsRequest, adAccountId);
}

std::string CatalogsItemsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CatalogsItemsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CatalogsProductsGet_by_product_group_filtersResource::CatalogsProductsGet_by_product_group_filtersResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/catalogs/products/get_by_product_group_filters");
	this->set_method_handler("POST",
		std::bind(&CatalogsProductsGet_by_product_group_filtersResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CatalogsProductsGet_by_product_group_filtersResource::handleCatalogsApiException(const CatalogsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CatalogsProductsGet_by_product_group_filtersResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CatalogsProductsGet_by_product_group_filtersResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CatalogsProductsGet_by_product_group_filtersResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CatalogsProductsGet_by_product_group_filtersResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CatalogsProductsGet_by_product_group_filtersResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CatalogsProductsGet_by_product_group_filtersResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto catalogsListProductsByFilterRequest = extractJsonModelBodyParam<CatalogsListProductsByFilterRequest>(bodyContent);
    // Getting the query params
    std::string bookmark = request->get_query_parameter("bookmark", "");
    int32_t pageSize = request->get_query_parameter("pageSize", 25);
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    bool pinMetrics = request->get_query_parameter("pinMetrics", false);
    
    int status_code = 500;
    Catalogs_product_group_pins_list_200_response resultObject = Catalogs_product_group_pins_list_200_response{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(catalogsListProductsByFilterRequest, bookmark, pageSize, adAccountId, pinMetrics);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unauthorized access.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 409) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Conflict. Can&#39;t get products.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 409, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, Catalogs_product_group_pins_list_200_response> CatalogsProductsGet_by_product_group_filtersResource::handler_POST(
        CatalogsListProductsByFilterRequest & catalogsListProductsByFilterRequest, std::string & bookmark, int32_t & pageSize, std::string & adAccountId, bool & pinMetrics)
{
    return handler_POST_func(catalogsListProductsByFilterRequest, bookmark, pageSize, adAccountId, pinMetrics);
}


std::string CatalogsProductsGet_by_product_group_filtersResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CatalogsProductsGet_by_product_group_filtersResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CatalogsReportsResource::CatalogsReportsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/catalogs/reports");
	this->set_method_handler("POST",
		std::bind(&CatalogsReportsResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&CatalogsReportsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CatalogsReportsResource::handleCatalogsApiException(const CatalogsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CatalogsReportsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CatalogsReportsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CatalogsReportsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CatalogsReportsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CatalogsReportsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CatalogsReportsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto catalogsReportParameters = extractJsonModelBodyParam<CatalogsReportParameters>(bodyContent);
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    CatalogsCreateReportResponse resultObject = CatalogsCreateReportResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(catalogsReportParameters, adAccountId);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Entity (e.g., catalog, feed or processing_result) not found";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 409) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Can&#39;t access this feature without an existing catalog.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 409, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void CatalogsReportsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    std::string token = request->get_query_parameter("token", "");
    
    int status_code = 500;
    CatalogsReport resultObject = CatalogsReport{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(token, adAccountId);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "The token you provided is not valid or has expired.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 409) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Can&#39;t access this feature without an existing catalog.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 409, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, CatalogsCreateReportResponse> CatalogsReportsResource::handler_POST(
        CatalogsReportParameters & catalogsReportParameters, std::string & adAccountId)
{
    return handler_POST_func(catalogsReportParameters, adAccountId);
}

std::pair<int, CatalogsReport> CatalogsReportsResource::handler_GET(
    std::string & token, std::string & adAccountId)
{
    return handler_GET_func(token, adAccountId);
}

std::string CatalogsReportsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CatalogsReportsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CatalogsReportsStatsResource::CatalogsReportsStatsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/catalogs/reports/stats");
	this->set_method_handler("GET",
		std::bind(&CatalogsReportsStatsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CatalogsReportsStatsResource::handleCatalogsApiException(const CatalogsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CatalogsReportsStatsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CatalogsReportsStatsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CatalogsReportsStatsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CatalogsReportsStatsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CatalogsReportsStatsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CatalogsReportsStatsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    int32_t pageSize = request->get_query_parameter("pageSize", 25);
    std::string bookmark = request->get_query_parameter("bookmark", "");
    
    int status_code = 500;
    Reports_stats_200_response resultObject = Reports_stats_200_response{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(parameters, adAccountId, pageSize, bookmark);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Not authorized to access catalogs";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, Reports_stats_200_response> CatalogsReportsStatsResource::handler_GET(
        CatalogsReportParameters & parameters, std::string & adAccountId, int32_t & pageSize, std::string & bookmark)
{
    return handler_GET_func(parameters, adAccountId, pageSize, bookmark);
}


std::string CatalogsReportsStatsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CatalogsReportsStatsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}

} /* namespace CatalogsApiResources */

CatalogsApi::CatalogsApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

CatalogsApi::~CatalogsApi() {}

std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsProduct_group_idProductsResource> CatalogsApi::getCatalogsProduct_groupsProduct_group_idProductsResource() {
    if (!m_spCatalogsProduct_groupsProduct_group_idProductsResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsProduct_groupsProduct_group_idProductsResource>());
    }
    return m_spCatalogsProduct_groupsProduct_group_idProductsResource;
}
std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsResource> CatalogsApi::getCatalogsProduct_groupsResource() {
    if (!m_spCatalogsProduct_groupsResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsProduct_groupsResource>());
    }
    return m_spCatalogsProduct_groupsResource;
}
std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsMultipleResource> CatalogsApi::getCatalogsProduct_groupsMultipleResource() {
    if (!m_spCatalogsProduct_groupsMultipleResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsProduct_groupsMultipleResource>());
    }
    return m_spCatalogsProduct_groupsMultipleResource;
}
std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsProduct_group_idResource> CatalogsApi::getCatalogsProduct_groupsProduct_group_idResource() {
    if (!m_spCatalogsProduct_groupsProduct_group_idResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsProduct_groupsProduct_group_idResource>());
    }
    return m_spCatalogsProduct_groupsProduct_group_idResource;
}
std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsProduct_group_idProduct_countsResource> CatalogsApi::getCatalogsProduct_groupsProduct_group_idProduct_countsResource() {
    if (!m_spCatalogsProduct_groupsProduct_group_idProduct_countsResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsProduct_groupsProduct_group_idProduct_countsResource>());
    }
    return m_spCatalogsProduct_groupsProduct_group_idProduct_countsResource;
}
std::shared_ptr<CatalogsApiResources::CatalogsResource> CatalogsApi::getCatalogsResource() {
    if (!m_spCatalogsResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsResource>());
    }
    return m_spCatalogsResource;
}
std::shared_ptr<CatalogsApiResources::CatalogsFeedsFeed_idProcessing_resultsResource> CatalogsApi::getCatalogsFeedsFeed_idProcessing_resultsResource() {
    if (!m_spCatalogsFeedsFeed_idProcessing_resultsResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsFeedsFeed_idProcessing_resultsResource>());
    }
    return m_spCatalogsFeedsFeed_idProcessing_resultsResource;
}
std::shared_ptr<CatalogsApiResources::CatalogsFeedsResource> CatalogsApi::getCatalogsFeedsResource() {
    if (!m_spCatalogsFeedsResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsFeedsResource>());
    }
    return m_spCatalogsFeedsResource;
}
std::shared_ptr<CatalogsApiResources::CatalogsFeedsFeed_idResource> CatalogsApi::getCatalogsFeedsFeed_idResource() {
    if (!m_spCatalogsFeedsFeed_idResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsFeedsFeed_idResource>());
    }
    return m_spCatalogsFeedsFeed_idResource;
}
std::shared_ptr<CatalogsApiResources::CatalogsFeedsFeed_idIngestResource> CatalogsApi::getCatalogsFeedsFeed_idIngestResource() {
    if (!m_spCatalogsFeedsFeed_idIngestResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsFeedsFeed_idIngestResource>());
    }
    return m_spCatalogsFeedsFeed_idIngestResource;
}
std::shared_ptr<CatalogsApiResources::CatalogsItemsBatchBatch_idResource> CatalogsApi::getCatalogsItemsBatchBatch_idResource() {
    if (!m_spCatalogsItemsBatchBatch_idResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsItemsBatchBatch_idResource>());
    }
    return m_spCatalogsItemsBatchBatch_idResource;
}
std::shared_ptr<CatalogsApiResources::CatalogsItemsBatchResource> CatalogsApi::getCatalogsItemsBatchResource() {
    if (!m_spCatalogsItemsBatchResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsItemsBatchResource>());
    }
    return m_spCatalogsItemsBatchResource;
}
std::shared_ptr<CatalogsApiResources::CatalogsProcessing_resultsProcessing_result_idItem_issuesResource> CatalogsApi::getCatalogsProcessing_resultsProcessing_result_idItem_issuesResource() {
    if (!m_spCatalogsProcessing_resultsProcessing_result_idItem_issuesResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsProcessing_resultsProcessing_result_idItem_issuesResource>());
    }
    return m_spCatalogsProcessing_resultsProcessing_result_idItem_issuesResource;
}
std::shared_ptr<CatalogsApiResources::CatalogsItemsResource> CatalogsApi::getCatalogsItemsResource() {
    if (!m_spCatalogsItemsResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsItemsResource>());
    }
    return m_spCatalogsItemsResource;
}
std::shared_ptr<CatalogsApiResources::CatalogsProductsGet_by_product_group_filtersResource> CatalogsApi::getCatalogsProductsGet_by_product_group_filtersResource() {
    if (!m_spCatalogsProductsGet_by_product_group_filtersResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsProductsGet_by_product_group_filtersResource>());
    }
    return m_spCatalogsProductsGet_by_product_group_filtersResource;
}
std::shared_ptr<CatalogsApiResources::CatalogsReportsResource> CatalogsApi::getCatalogsReportsResource() {
    if (!m_spCatalogsReportsResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsReportsResource>());
    }
    return m_spCatalogsReportsResource;
}
std::shared_ptr<CatalogsApiResources::CatalogsReportsStatsResource> CatalogsApi::getCatalogsReportsStatsResource() {
    if (!m_spCatalogsReportsStatsResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsReportsStatsResource>());
    }
    return m_spCatalogsReportsStatsResource;
}
void CatalogsApi::setResource(std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsProduct_group_idProductsResource> resource) {
    m_spCatalogsProduct_groupsProduct_group_idProductsResource = resource;
    m_service->publish(m_spCatalogsProduct_groupsProduct_group_idProductsResource);
}
void CatalogsApi::setResource(std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsResource> resource) {
    m_spCatalogsProduct_groupsResource = resource;
    m_service->publish(m_spCatalogsProduct_groupsResource);
}
void CatalogsApi::setResource(std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsMultipleResource> resource) {
    m_spCatalogsProduct_groupsMultipleResource = resource;
    m_service->publish(m_spCatalogsProduct_groupsMultipleResource);
}
void CatalogsApi::setResource(std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsProduct_group_idResource> resource) {
    m_spCatalogsProduct_groupsProduct_group_idResource = resource;
    m_service->publish(m_spCatalogsProduct_groupsProduct_group_idResource);
}
void CatalogsApi::setResource(std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsProduct_group_idProduct_countsResource> resource) {
    m_spCatalogsProduct_groupsProduct_group_idProduct_countsResource = resource;
    m_service->publish(m_spCatalogsProduct_groupsProduct_group_idProduct_countsResource);
}
void CatalogsApi::setResource(std::shared_ptr<CatalogsApiResources::CatalogsResource> resource) {
    m_spCatalogsResource = resource;
    m_service->publish(m_spCatalogsResource);
}
void CatalogsApi::setResource(std::shared_ptr<CatalogsApiResources::CatalogsFeedsFeed_idProcessing_resultsResource> resource) {
    m_spCatalogsFeedsFeed_idProcessing_resultsResource = resource;
    m_service->publish(m_spCatalogsFeedsFeed_idProcessing_resultsResource);
}
void CatalogsApi::setResource(std::shared_ptr<CatalogsApiResources::CatalogsFeedsResource> resource) {
    m_spCatalogsFeedsResource = resource;
    m_service->publish(m_spCatalogsFeedsResource);
}
void CatalogsApi::setResource(std::shared_ptr<CatalogsApiResources::CatalogsFeedsFeed_idResource> resource) {
    m_spCatalogsFeedsFeed_idResource = resource;
    m_service->publish(m_spCatalogsFeedsFeed_idResource);
}
void CatalogsApi::setResource(std::shared_ptr<CatalogsApiResources::CatalogsFeedsFeed_idIngestResource> resource) {
    m_spCatalogsFeedsFeed_idIngestResource = resource;
    m_service->publish(m_spCatalogsFeedsFeed_idIngestResource);
}
void CatalogsApi::setResource(std::shared_ptr<CatalogsApiResources::CatalogsItemsBatchBatch_idResource> resource) {
    m_spCatalogsItemsBatchBatch_idResource = resource;
    m_service->publish(m_spCatalogsItemsBatchBatch_idResource);
}
void CatalogsApi::setResource(std::shared_ptr<CatalogsApiResources::CatalogsItemsBatchResource> resource) {
    m_spCatalogsItemsBatchResource = resource;
    m_service->publish(m_spCatalogsItemsBatchResource);
}
void CatalogsApi::setResource(std::shared_ptr<CatalogsApiResources::CatalogsProcessing_resultsProcessing_result_idItem_issuesResource> resource) {
    m_spCatalogsProcessing_resultsProcessing_result_idItem_issuesResource = resource;
    m_service->publish(m_spCatalogsProcessing_resultsProcessing_result_idItem_issuesResource);
}
void CatalogsApi::setResource(std::shared_ptr<CatalogsApiResources::CatalogsItemsResource> resource) {
    m_spCatalogsItemsResource = resource;
    m_service->publish(m_spCatalogsItemsResource);
}
void CatalogsApi::setResource(std::shared_ptr<CatalogsApiResources::CatalogsProductsGet_by_product_group_filtersResource> resource) {
    m_spCatalogsProductsGet_by_product_group_filtersResource = resource;
    m_service->publish(m_spCatalogsProductsGet_by_product_group_filtersResource);
}
void CatalogsApi::setResource(std::shared_ptr<CatalogsApiResources::CatalogsReportsResource> resource) {
    m_spCatalogsReportsResource = resource;
    m_service->publish(m_spCatalogsReportsResource);
}
void CatalogsApi::setResource(std::shared_ptr<CatalogsApiResources::CatalogsReportsStatsResource> resource) {
    m_spCatalogsReportsStatsResource = resource;
    m_service->publish(m_spCatalogsReportsStatsResource);
}
void CatalogsApi::setCatalogsApiCatalogsProduct_groupsProduct_group_idProductsResource(std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsProduct_group_idProductsResource> spCatalogsProduct_groupsProduct_group_idProductsResource) {
    m_spCatalogsProduct_groupsProduct_group_idProductsResource = spCatalogsProduct_groupsProduct_group_idProductsResource;
    m_service->publish(m_spCatalogsProduct_groupsProduct_group_idProductsResource);
}
void CatalogsApi::setCatalogsApiCatalogsProduct_groupsResource(std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsResource> spCatalogsProduct_groupsResource) {
    m_spCatalogsProduct_groupsResource = spCatalogsProduct_groupsResource;
    m_service->publish(m_spCatalogsProduct_groupsResource);
}
void CatalogsApi::setCatalogsApiCatalogsProduct_groupsMultipleResource(std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsMultipleResource> spCatalogsProduct_groupsMultipleResource) {
    m_spCatalogsProduct_groupsMultipleResource = spCatalogsProduct_groupsMultipleResource;
    m_service->publish(m_spCatalogsProduct_groupsMultipleResource);
}
void CatalogsApi::setCatalogsApiCatalogsProduct_groupsProduct_group_idResource(std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsProduct_group_idResource> spCatalogsProduct_groupsProduct_group_idResource) {
    m_spCatalogsProduct_groupsProduct_group_idResource = spCatalogsProduct_groupsProduct_group_idResource;
    m_service->publish(m_spCatalogsProduct_groupsProduct_group_idResource);
}
void CatalogsApi::setCatalogsApiCatalogsProduct_groupsProduct_group_idProduct_countsResource(std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsProduct_group_idProduct_countsResource> spCatalogsProduct_groupsProduct_group_idProduct_countsResource) {
    m_spCatalogsProduct_groupsProduct_group_idProduct_countsResource = spCatalogsProduct_groupsProduct_group_idProduct_countsResource;
    m_service->publish(m_spCatalogsProduct_groupsProduct_group_idProduct_countsResource);
}
void CatalogsApi::setCatalogsApiCatalogsResource(std::shared_ptr<CatalogsApiResources::CatalogsResource> spCatalogsResource) {
    m_spCatalogsResource = spCatalogsResource;
    m_service->publish(m_spCatalogsResource);
}
void CatalogsApi::setCatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource(std::shared_ptr<CatalogsApiResources::CatalogsFeedsFeed_idProcessing_resultsResource> spCatalogsFeedsFeed_idProcessing_resultsResource) {
    m_spCatalogsFeedsFeed_idProcessing_resultsResource = spCatalogsFeedsFeed_idProcessing_resultsResource;
    m_service->publish(m_spCatalogsFeedsFeed_idProcessing_resultsResource);
}
void CatalogsApi::setCatalogsApiCatalogsFeedsResource(std::shared_ptr<CatalogsApiResources::CatalogsFeedsResource> spCatalogsFeedsResource) {
    m_spCatalogsFeedsResource = spCatalogsFeedsResource;
    m_service->publish(m_spCatalogsFeedsResource);
}
void CatalogsApi::setCatalogsApiCatalogsFeedsFeed_idResource(std::shared_ptr<CatalogsApiResources::CatalogsFeedsFeed_idResource> spCatalogsFeedsFeed_idResource) {
    m_spCatalogsFeedsFeed_idResource = spCatalogsFeedsFeed_idResource;
    m_service->publish(m_spCatalogsFeedsFeed_idResource);
}
void CatalogsApi::setCatalogsApiCatalogsFeedsFeed_idIngestResource(std::shared_ptr<CatalogsApiResources::CatalogsFeedsFeed_idIngestResource> spCatalogsFeedsFeed_idIngestResource) {
    m_spCatalogsFeedsFeed_idIngestResource = spCatalogsFeedsFeed_idIngestResource;
    m_service->publish(m_spCatalogsFeedsFeed_idIngestResource);
}
void CatalogsApi::setCatalogsApiCatalogsItemsBatchBatch_idResource(std::shared_ptr<CatalogsApiResources::CatalogsItemsBatchBatch_idResource> spCatalogsItemsBatchBatch_idResource) {
    m_spCatalogsItemsBatchBatch_idResource = spCatalogsItemsBatchBatch_idResource;
    m_service->publish(m_spCatalogsItemsBatchBatch_idResource);
}
void CatalogsApi::setCatalogsApiCatalogsItemsBatchResource(std::shared_ptr<CatalogsApiResources::CatalogsItemsBatchResource> spCatalogsItemsBatchResource) {
    m_spCatalogsItemsBatchResource = spCatalogsItemsBatchResource;
    m_service->publish(m_spCatalogsItemsBatchResource);
}
void CatalogsApi::setCatalogsApiCatalogsProcessing_resultsProcessing_result_idItem_issuesResource(std::shared_ptr<CatalogsApiResources::CatalogsProcessing_resultsProcessing_result_idItem_issuesResource> spCatalogsProcessing_resultsProcessing_result_idItem_issuesResource) {
    m_spCatalogsProcessing_resultsProcessing_result_idItem_issuesResource = spCatalogsProcessing_resultsProcessing_result_idItem_issuesResource;
    m_service->publish(m_spCatalogsProcessing_resultsProcessing_result_idItem_issuesResource);
}
void CatalogsApi::setCatalogsApiCatalogsItemsResource(std::shared_ptr<CatalogsApiResources::CatalogsItemsResource> spCatalogsItemsResource) {
    m_spCatalogsItemsResource = spCatalogsItemsResource;
    m_service->publish(m_spCatalogsItemsResource);
}
void CatalogsApi::setCatalogsApiCatalogsProductsGet_by_product_group_filtersResource(std::shared_ptr<CatalogsApiResources::CatalogsProductsGet_by_product_group_filtersResource> spCatalogsProductsGet_by_product_group_filtersResource) {
    m_spCatalogsProductsGet_by_product_group_filtersResource = spCatalogsProductsGet_by_product_group_filtersResource;
    m_service->publish(m_spCatalogsProductsGet_by_product_group_filtersResource);
}
void CatalogsApi::setCatalogsApiCatalogsReportsResource(std::shared_ptr<CatalogsApiResources::CatalogsReportsResource> spCatalogsReportsResource) {
    m_spCatalogsReportsResource = spCatalogsReportsResource;
    m_service->publish(m_spCatalogsReportsResource);
}
void CatalogsApi::setCatalogsApiCatalogsReportsStatsResource(std::shared_ptr<CatalogsApiResources::CatalogsReportsStatsResource> spCatalogsReportsStatsResource) {
    m_spCatalogsReportsStatsResource = spCatalogsReportsStatsResource;
    m_service->publish(m_spCatalogsReportsStatsResource);
}


void CatalogsApi::publishDefaultResources() {
    if (!m_spCatalogsProduct_groupsProduct_group_idProductsResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsProduct_groupsProduct_group_idProductsResource>());
    }
    if (!m_spCatalogsProduct_groupsResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsProduct_groupsResource>());
    }
    if (!m_spCatalogsProduct_groupsMultipleResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsProduct_groupsMultipleResource>());
    }
    if (!m_spCatalogsProduct_groupsProduct_group_idResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsProduct_groupsProduct_group_idResource>());
    }
    if (!m_spCatalogsProduct_groupsProduct_group_idProduct_countsResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsProduct_groupsProduct_group_idProduct_countsResource>());
    }
    if (!m_spCatalogsResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsResource>());
    }
    if (!m_spCatalogsFeedsFeed_idProcessing_resultsResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsFeedsFeed_idProcessing_resultsResource>());
    }
    if (!m_spCatalogsFeedsResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsFeedsResource>());
    }
    if (!m_spCatalogsFeedsFeed_idResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsFeedsFeed_idResource>());
    }
    if (!m_spCatalogsFeedsFeed_idIngestResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsFeedsFeed_idIngestResource>());
    }
    if (!m_spCatalogsItemsBatchBatch_idResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsItemsBatchBatch_idResource>());
    }
    if (!m_spCatalogsItemsBatchResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsItemsBatchResource>());
    }
    if (!m_spCatalogsProcessing_resultsProcessing_result_idItem_issuesResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsProcessing_resultsProcessing_result_idItem_issuesResource>());
    }
    if (!m_spCatalogsItemsResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsItemsResource>());
    }
    if (!m_spCatalogsProductsGet_by_product_group_filtersResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsProductsGet_by_product_group_filtersResource>());
    }
    if (!m_spCatalogsReportsResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsReportsResource>());
    }
    if (!m_spCatalogsReportsStatsResource) {
        setResource(std::make_shared<CatalogsApiResources::CatalogsReportsStatsResource>());
    }
}

std::shared_ptr<restbed::Service> CatalogsApi::service() {
    return m_service;
}


}
}
}
}

