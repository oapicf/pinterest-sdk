/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsApi.h
 *
 * 
 */

#ifndef CatalogsApi_H_
#define CatalogsApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "Catalog.h"
#include "CatalogsCreateReportResponse.h"
#include "CatalogsCreateRequest.h"
#include "CatalogsFeed.h"
#include "CatalogsFeedIngestion.h"
#include "CatalogsItemValidationIssue.h"
#include "CatalogsItems.h"
#include "CatalogsItemsBatch.h"
#include "CatalogsItemsFilters.h"
#include "CatalogsItemsRequest.h"
#include "CatalogsListProductsByFilterRequest.h"
#include "CatalogsProductGroupProductCountsVertical.h"
#include "CatalogsReport.h"
#include "CatalogsReportParameters.h"
#include "CatalogsVerticalProductGroup.h"
#include "Catalogs_list_200_response.h"
#include "Catalogs_product_group_pins_list_200_response.h"
#include "Catalogs_product_groups_list_200_response.h"
#include "Catalogs_product_groups_update_request.h"
#include "Error.h"
#include "Feed_processing_results_list_200_response.h"
#include "Feeds_create_request.h"
#include "Feeds_list_200_response.h"
#include "Feeds_update_request.h"
#include "Items_batch_post_request.h"
#include "Items_issues_list_200_response.h"
#include "Multiple_product_groups_inner.h"
#include "Reports_stats_200_response.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  CatalogsApiException: public std::exception
{
public:
    CatalogsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace CatalogsApiResources {
/// <summary>
/// List products by product group
/// </summary>
/// <remarks>
/// Get a list of product pins for a given Catalogs Product Group Id owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.  &lt;a href&#x3D;&#39;/docs/api-features/shopping-overview/&#39;&gt;Learn more&lt;/a&gt;
/// </remarks>
class  CatalogsProduct_groupsProduct_group_idProductsResource: public restbed::Resource
{
public:
    CatalogsProduct_groupsProduct_group_idProductsResource(const std::string& context = "/v5");
    virtual ~CatalogsProduct_groupsProduct_group_idProductsResource() = default;

    CatalogsProduct_groupsProduct_group_idProductsResource(
        const CatalogsProduct_groupsProduct_group_idProductsResource& other) = default; // copy constructor
    CatalogsProduct_groupsProduct_group_idProductsResource(CatalogsProduct_groupsProduct_group_idProductsResource&& other) noexcept = default; // move constructor

    CatalogsProduct_groupsProduct_group_idProductsResource& operator=(const CatalogsProduct_groupsProduct_group_idProductsResource& other) = default; // copy assignment
    CatalogsProduct_groupsProduct_group_idProductsResource& operator=(CatalogsProduct_groupsProduct_group_idProductsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Catalogs_product_group_pins_list_200_response>(
        std::string & productGroupId, std::string & bookmark, int32_t & pageSize, std::string & adAccountId, bool & pinMetrics)> handler_GET_func =
            [](std::string &, std::string &, int32_t &, std::string &, bool &) -> std::pair<int, Catalogs_product_group_pins_list_200_response>
                { throw CatalogsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Catalogs_product_group_pins_list_200_response> handler_GET(
        std::string & productGroupId, std::string & bookmark, int32_t & pageSize, std::string & adAccountId, bool & pinMetrics);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCatalogsApiException(const CatalogsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Create product group
/// </summary>
/// <remarks>
/// Create product group to use in Catalogs owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.  &lt;a href&#x3D;&#39;/docs/api-features/shopping-overview/&#39;&gt;Learn more&lt;/a&gt;  Note: Access to the Creative Assets catalog type is restricted to a specific group of users. If you require access, please reach out to your partner manager.
/// </remarks>
class  CatalogsProduct_groupsResource: public restbed::Resource
{
public:
    CatalogsProduct_groupsResource(const std::string& context = "/v5");
    virtual ~CatalogsProduct_groupsResource() = default;

    CatalogsProduct_groupsResource(
        const CatalogsProduct_groupsResource& other) = default; // copy constructor
    CatalogsProduct_groupsResource(CatalogsProduct_groupsResource&& other) noexcept = default; // move constructor

    CatalogsProduct_groupsResource& operator=(const CatalogsProduct_groupsResource& other) = default; // copy assignment
    CatalogsProduct_groupsResource& operator=(CatalogsProduct_groupsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, CatalogsVerticalProductGroup>(
        Multiple_product_groups_inner & multipleProductGroupsInner, std::string & adAccountId)> handler_POST_func =
            [](Multiple_product_groups_inner &, std::string &) -> std::pair<int, CatalogsVerticalProductGroup>
                { throw CatalogsApiException(501, "Not implemented"); };

    std::function<std::pair<int, Catalogs_product_groups_list_200_response>(
        std::vector<int32_t> & id, std::string & feedId, std::string & catalogId, std::string & bookmark, int32_t & pageSize, std::string & adAccountId)> handler_GET_func =
            [](std::vector<int32_t> &, std::string &, std::string &, std::string &, int32_t &, std::string &) -> std::pair<int, Catalogs_product_groups_list_200_response>
                { throw CatalogsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, CatalogsVerticalProductGroup> handler_POST(
        Multiple_product_groups_inner & multipleProductGroupsInner, std::string & adAccountId);

    virtual std::pair<int, Catalogs_product_groups_list_200_response> handler_GET(
        std::vector<int32_t> & id, std::string & feedId, std::string & catalogId, std::string & bookmark, int32_t & pageSize, std::string & adAccountId);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCatalogsApiException(const CatalogsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Create product groups
/// </summary>
/// <remarks>
/// Create product group to use in Catalogs owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.  &lt;a href&#x3D;&#39;/docs/api-features/shopping-overview/&#39;&gt;Learn more&lt;/a&gt;  Note: Access to the Creative Assets catalog type is restricted to a specific group of users. If you require access, please reach out to your partner manager.
/// </remarks>
class  CatalogsProduct_groupsMultipleResource: public restbed::Resource
{
public:
    CatalogsProduct_groupsMultipleResource(const std::string& context = "/v5");
    virtual ~CatalogsProduct_groupsMultipleResource() = default;

    CatalogsProduct_groupsMultipleResource(
        const CatalogsProduct_groupsMultipleResource& other) = default; // copy constructor
    CatalogsProduct_groupsMultipleResource(CatalogsProduct_groupsMultipleResource&& other) noexcept = default; // move constructor

    CatalogsProduct_groupsMultipleResource& operator=(const CatalogsProduct_groupsMultipleResource& other) = default; // copy assignment
    CatalogsProduct_groupsMultipleResource& operator=(CatalogsProduct_groupsMultipleResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::vector<std::string>>(
        std::vector<Multiple_product_groups_inner> & multipleProductGroupsInner, std::string & adAccountId)> handler_POST_func =
            [](std::vector<Multiple_product_groups_inner> &, std::string &) -> std::pair<int, std::vector<std::string>>
                { throw CatalogsApiException(501, "Not implemented"); };

    std::function<int(
        std::vector<int32_t> & id, std::string & adAccountId)> handler_DELETE_func =
            [](std::vector<int32_t> &, std::string &) -> int
                { throw CatalogsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<std::string>> handler_POST(
        std::vector<Multiple_product_groups_inner> & multipleProductGroupsInner, std::string & adAccountId);

    virtual int handler_DELETE(
        std::vector<int32_t> & id, std::string & adAccountId);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCatalogsApiException(const CatalogsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Delete product group
/// </summary>
/// <remarks>
/// Delete a product group owned by the \&quot;operation user_account\&quot; from being in use in Catalogs. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.  &lt;a href&#x3D;&#39;/docs/api-features/shopping-overview/&#39;&gt;Learn more&lt;/a&gt;
/// </remarks>
class  CatalogsProduct_groupsProduct_group_idResource: public restbed::Resource
{
public:
    CatalogsProduct_groupsProduct_group_idResource(const std::string& context = "/v5");
    virtual ~CatalogsProduct_groupsProduct_group_idResource() = default;

    CatalogsProduct_groupsProduct_group_idResource(
        const CatalogsProduct_groupsProduct_group_idResource& other) = default; // copy constructor
    CatalogsProduct_groupsProduct_group_idResource(CatalogsProduct_groupsProduct_group_idResource&& other) noexcept = default; // move constructor

    CatalogsProduct_groupsProduct_group_idResource& operator=(const CatalogsProduct_groupsProduct_group_idResource& other) = default; // copy assignment
    CatalogsProduct_groupsProduct_group_idResource& operator=(CatalogsProduct_groupsProduct_group_idResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<int(
        std::string & productGroupId, std::string & adAccountId)> handler_DELETE_func =
            [](std::string &, std::string &) -> int
                { throw CatalogsApiException(501, "Not implemented"); };

    std::function<std::pair<int, CatalogsVerticalProductGroup>(
        std::string & productGroupId, std::string & adAccountId)> handler_GET_func =
            [](std::string &, std::string &) -> std::pair<int, CatalogsVerticalProductGroup>
                { throw CatalogsApiException(501, "Not implemented"); };

    std::function<std::pair<int, CatalogsVerticalProductGroup>(
        std::string & productGroupId, Catalogs_product_groups_update_request & catalogsProductGroupsUpdateRequest, std::string & adAccountId)> handler_PATCH_func =
            [](std::string &, Catalogs_product_groups_update_request &, std::string &) -> std::pair<int, CatalogsVerticalProductGroup>
                { throw CatalogsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_DELETE(
        std::string & productGroupId, std::string & adAccountId);

    virtual std::pair<int, CatalogsVerticalProductGroup> handler_GET(
        std::string & productGroupId, std::string & adAccountId);
    virtual std::pair<int, CatalogsVerticalProductGroup> handler_PATCH(
        std::string & productGroupId, Catalogs_product_groups_update_request & catalogsProductGroupsUpdateRequest, std::string & adAccountId);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCatalogsApiException(const CatalogsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PATCH_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get product counts
/// </summary>
/// <remarks>
/// Get a product counts for a given Catalogs Product Group owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.  &lt;a href&#x3D;&#39;/docs/api-features/shopping-overview/&#39;&gt;Learn more&lt;/a&gt;
/// </remarks>
class  CatalogsProduct_groupsProduct_group_idProduct_countsResource: public restbed::Resource
{
public:
    CatalogsProduct_groupsProduct_group_idProduct_countsResource(const std::string& context = "/v5");
    virtual ~CatalogsProduct_groupsProduct_group_idProduct_countsResource() = default;

    CatalogsProduct_groupsProduct_group_idProduct_countsResource(
        const CatalogsProduct_groupsProduct_group_idProduct_countsResource& other) = default; // copy constructor
    CatalogsProduct_groupsProduct_group_idProduct_countsResource(CatalogsProduct_groupsProduct_group_idProduct_countsResource&& other) noexcept = default; // move constructor

    CatalogsProduct_groupsProduct_group_idProduct_countsResource& operator=(const CatalogsProduct_groupsProduct_group_idProduct_countsResource& other) = default; // copy assignment
    CatalogsProduct_groupsProduct_group_idProduct_countsResource& operator=(CatalogsProduct_groupsProduct_group_idProduct_countsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, CatalogsProductGroupProductCountsVertical>(
        std::string & productGroupId, std::string & adAccountId)> handler_GET_func =
            [](std::string &, std::string &) -> std::pair<int, CatalogsProductGroupProductCountsVertical>
                { throw CatalogsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, CatalogsProductGroupProductCountsVertical> handler_GET(
        std::string & productGroupId, std::string & adAccountId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCatalogsApiException(const CatalogsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Create catalog
/// </summary>
/// <remarks>
/// Create a new catalog owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.  &lt;a href&#x3D;&#39;/docs/api-features/shopping-overview/&#39;&gt;Learn more&lt;/a&gt;  Note: this API only supports the catalog type of HOTEL for now.
/// </remarks>
class  CatalogsResource: public restbed::Resource
{
public:
    CatalogsResource(const std::string& context = "/v5");
    virtual ~CatalogsResource() = default;

    CatalogsResource(
        const CatalogsResource& other) = default; // copy constructor
    CatalogsResource(CatalogsResource&& other) noexcept = default; // move constructor

    CatalogsResource& operator=(const CatalogsResource& other) = default; // copy assignment
    CatalogsResource& operator=(CatalogsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Catalog>(
        CatalogsCreateRequest & catalogsCreateRequest, std::string & adAccountId)> handler_POST_func =
            [](CatalogsCreateRequest &, std::string &) -> std::pair<int, Catalog>
                { throw CatalogsApiException(501, "Not implemented"); };

    std::function<std::pair<int, Catalogs_list_200_response>(
        std::string & bookmark, int32_t & pageSize, std::string & adAccountId)> handler_GET_func =
            [](std::string &, int32_t &, std::string &) -> std::pair<int, Catalogs_list_200_response>
                { throw CatalogsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Catalog> handler_POST(
        CatalogsCreateRequest & catalogsCreateRequest, std::string & adAccountId);

    virtual std::pair<int, Catalogs_list_200_response> handler_GET(
        std::string & bookmark, int32_t & pageSize, std::string & adAccountId);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCatalogsApiException(const CatalogsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// List feed processing results
/// </summary>
/// <remarks>
/// Fetch a feed processing results owned by the \&quot;operation user_account\&quot;. Please note that for now the bookmark parameter is not functional and only the first page will be available until it is implemented in some release in the near future. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.  &lt;a href&#x3D;&#39;/docs/api-features/shopping-overview/&#39;&gt;Learn more&lt;/a&gt;
/// </remarks>
class  CatalogsFeedsFeed_idProcessing_resultsResource: public restbed::Resource
{
public:
    CatalogsFeedsFeed_idProcessing_resultsResource(const std::string& context = "/v5");
    virtual ~CatalogsFeedsFeed_idProcessing_resultsResource() = default;

    CatalogsFeedsFeed_idProcessing_resultsResource(
        const CatalogsFeedsFeed_idProcessing_resultsResource& other) = default; // copy constructor
    CatalogsFeedsFeed_idProcessing_resultsResource(CatalogsFeedsFeed_idProcessing_resultsResource&& other) noexcept = default; // move constructor

    CatalogsFeedsFeed_idProcessing_resultsResource& operator=(const CatalogsFeedsFeed_idProcessing_resultsResource& other) = default; // copy assignment
    CatalogsFeedsFeed_idProcessing_resultsResource& operator=(CatalogsFeedsFeed_idProcessing_resultsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Feed_processing_results_list_200_response>(
        std::string & feedId, std::string & bookmark, int32_t & pageSize, std::string & adAccountId)> handler_GET_func =
            [](std::string &, std::string &, int32_t &, std::string &) -> std::pair<int, Feed_processing_results_list_200_response>
                { throw CatalogsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Feed_processing_results_list_200_response> handler_GET(
        std::string & feedId, std::string & bookmark, int32_t & pageSize, std::string & adAccountId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCatalogsApiException(const CatalogsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Create feed
/// </summary>
/// <remarks>
/// Create a new feed owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Please, be aware that \&quot;default_country\&quot; and \&quot;default_locale\&quot; are not required in the spec for forward compatibility but for now the API will not accept requests without those fields.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.  For Retail partners, refer to &lt;a href&#x3D;&#39;https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs&#39;&gt;Before you get started with Catalogs&lt;/a&gt;. For Hotel parterns, refer to &lt;a href&#x3D;&#39;/docs/api-features/shopping-overview/&#39;&gt;Pinterest API for shopping&lt;/a&gt;.  Note: Access to the Creative Assets catalog type is restricted to a specific group of users. If you require access, please reach out to your partner manager.
/// </remarks>
class  CatalogsFeedsResource: public restbed::Resource
{
public:
    CatalogsFeedsResource(const std::string& context = "/v5");
    virtual ~CatalogsFeedsResource() = default;

    CatalogsFeedsResource(
        const CatalogsFeedsResource& other) = default; // copy constructor
    CatalogsFeedsResource(CatalogsFeedsResource&& other) noexcept = default; // move constructor

    CatalogsFeedsResource& operator=(const CatalogsFeedsResource& other) = default; // copy assignment
    CatalogsFeedsResource& operator=(CatalogsFeedsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, CatalogsFeed>(
        Feeds_create_request & feedsCreateRequest, std::string & adAccountId)> handler_POST_func =
            [](Feeds_create_request &, std::string &) -> std::pair<int, CatalogsFeed>
                { throw CatalogsApiException(501, "Not implemented"); };

    std::function<std::pair<int, Feeds_list_200_response>(
        std::string & bookmark, int32_t & pageSize, std::string & catalogId, std::string & adAccountId)> handler_GET_func =
            [](std::string &, int32_t &, std::string &, std::string &) -> std::pair<int, Feeds_list_200_response>
                { throw CatalogsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, CatalogsFeed> handler_POST(
        Feeds_create_request & feedsCreateRequest, std::string & adAccountId);

    virtual std::pair<int, Feeds_list_200_response> handler_GET(
        std::string & bookmark, int32_t & pageSize, std::string & catalogId, std::string & adAccountId);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCatalogsApiException(const CatalogsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Delete feed
/// </summary>
/// <remarks>
/// Delete a feed owned by the \&quot;operating user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.  For Retail partners, refer to &lt;a href&#x3D;&#39;https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs&#39;&gt;Before you get started with Catalogs&lt;/a&gt;. For Hotel parterns, refer to &lt;a href&#x3D;&#39;/docs/api-features/shopping-overview/&#39;&gt;Pinterest API for shopping&lt;/a&gt;.
/// </remarks>
class  CatalogsFeedsFeed_idResource: public restbed::Resource
{
public:
    CatalogsFeedsFeed_idResource(const std::string& context = "/v5");
    virtual ~CatalogsFeedsFeed_idResource() = default;

    CatalogsFeedsFeed_idResource(
        const CatalogsFeedsFeed_idResource& other) = default; // copy constructor
    CatalogsFeedsFeed_idResource(CatalogsFeedsFeed_idResource&& other) noexcept = default; // move constructor

    CatalogsFeedsFeed_idResource& operator=(const CatalogsFeedsFeed_idResource& other) = default; // copy assignment
    CatalogsFeedsFeed_idResource& operator=(CatalogsFeedsFeed_idResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<int(
        std::string & feedId, std::string & adAccountId)> handler_DELETE_func =
            [](std::string &, std::string &) -> int
                { throw CatalogsApiException(501, "Not implemented"); };

    std::function<std::pair<int, CatalogsFeed>(
        std::string & feedId, std::string & adAccountId)> handler_GET_func =
            [](std::string &, std::string &) -> std::pair<int, CatalogsFeed>
                { throw CatalogsApiException(501, "Not implemented"); };

    std::function<std::pair<int, CatalogsFeed>(
        std::string & feedId, Feeds_update_request & feedsUpdateRequest, std::string & adAccountId)> handler_PATCH_func =
            [](std::string &, Feeds_update_request &, std::string &) -> std::pair<int, CatalogsFeed>
                { throw CatalogsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_DELETE(
        std::string & feedId, std::string & adAccountId);

    virtual std::pair<int, CatalogsFeed> handler_GET(
        std::string & feedId, std::string & adAccountId);
    virtual std::pair<int, CatalogsFeed> handler_PATCH(
        std::string & feedId, Feeds_update_request & feedsUpdateRequest, std::string & adAccountId);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCatalogsApiException(const CatalogsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PATCH_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Ingest feed items
/// </summary>
/// <remarks>
/// Ingest items for a given feed owned by the \&quot;operation user_account\&quot;.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.  &lt;a href&#x3D;&#39;/docs/api-features/shopping-overview/&#39;&gt;Learn more&lt;/a&gt;  Note: This endpoint is restricted to a specific group of users. If you require access, please reach out to your partner manager.
/// </remarks>
class  CatalogsFeedsFeed_idIngestResource: public restbed::Resource
{
public:
    CatalogsFeedsFeed_idIngestResource(const std::string& context = "/v5");
    virtual ~CatalogsFeedsFeed_idIngestResource() = default;

    CatalogsFeedsFeed_idIngestResource(
        const CatalogsFeedsFeed_idIngestResource& other) = default; // copy constructor
    CatalogsFeedsFeed_idIngestResource(CatalogsFeedsFeed_idIngestResource&& other) noexcept = default; // move constructor

    CatalogsFeedsFeed_idIngestResource& operator=(const CatalogsFeedsFeed_idIngestResource& other) = default; // copy assignment
    CatalogsFeedsFeed_idIngestResource& operator=(CatalogsFeedsFeed_idIngestResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, CatalogsFeedIngestion>(
        std::string & feedId, std::string & adAccountId)> handler_POST_func =
            [](std::string &, std::string &) -> std::pair<int, CatalogsFeedIngestion>
                { throw CatalogsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, CatalogsFeedIngestion> handler_POST(
        std::string & feedId, std::string & adAccountId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCatalogsApiException(const CatalogsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get item batch status
/// </summary>
/// <remarks>
/// Get a single catalogs items batch owned by the \&quot;operating user_account\&quot;. &lt;a href&#x3D;\&quot;/docs/api-features/shopping-overview/#Update%20items%20in%20batch\&quot; target&#x3D;\&quot;_blank\&quot;&gt;See detailed documentation here.&lt;/a&gt; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.
/// </remarks>
class  CatalogsItemsBatchBatch_idResource: public restbed::Resource
{
public:
    CatalogsItemsBatchBatch_idResource(const std::string& context = "/v5");
    virtual ~CatalogsItemsBatchBatch_idResource() = default;

    CatalogsItemsBatchBatch_idResource(
        const CatalogsItemsBatchBatch_idResource& other) = default; // copy constructor
    CatalogsItemsBatchBatch_idResource(CatalogsItemsBatchBatch_idResource&& other) noexcept = default; // move constructor

    CatalogsItemsBatchBatch_idResource& operator=(const CatalogsItemsBatchBatch_idResource& other) = default; // copy assignment
    CatalogsItemsBatchBatch_idResource& operator=(CatalogsItemsBatchBatch_idResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, CatalogsItemsBatch>(
        std::string & batchId, std::string & adAccountId)> handler_GET_func =
            [](std::string &, std::string &) -> std::pair<int, CatalogsItemsBatch>
                { throw CatalogsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, CatalogsItemsBatch> handler_GET(
        std::string & batchId, std::string & adAccountId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCatalogsApiException(const CatalogsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Operate on item batch
/// </summary>
/// <remarks>
/// This endpoint supports multiple operations on a set of one or more catalog items owned by the \&quot;operation user_account\&quot;. &lt;a href&#x3D;\&quot;/docs/api-features/shopping-overview/#Update%20items%20in%20batch\&quot; target&#x3D;\&quot;_blank\&quot;&gt;See detailed documentation here.&lt;/a&gt; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.  Note: - Access to the Creative Assets catalog type is restricted to a specific group of users. If you require access, please reach out to your partner manager. - The item UPSERT operation is restricted to users without a feed data source. If you plan to migrate item ingestion from feeds to the API, please reach out to your partner manager to get assistance.
/// </remarks>
class  CatalogsItemsBatchResource: public restbed::Resource
{
public:
    CatalogsItemsBatchResource(const std::string& context = "/v5");
    virtual ~CatalogsItemsBatchResource() = default;

    CatalogsItemsBatchResource(
        const CatalogsItemsBatchResource& other) = default; // copy constructor
    CatalogsItemsBatchResource(CatalogsItemsBatchResource&& other) noexcept = default; // move constructor

    CatalogsItemsBatchResource& operator=(const CatalogsItemsBatchResource& other) = default; // copy assignment
    CatalogsItemsBatchResource& operator=(CatalogsItemsBatchResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, CatalogsItemsBatch>(
        Items_batch_post_request & itemsBatchPostRequest, std::string & adAccountId)> handler_POST_func =
            [](Items_batch_post_request &, std::string &) -> std::pair<int, CatalogsItemsBatch>
                { throw CatalogsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, CatalogsItemsBatch> handler_POST(
        Items_batch_post_request & itemsBatchPostRequest, std::string & adAccountId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCatalogsApiException(const CatalogsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// List item issues
/// </summary>
/// <remarks>
/// List item validation issues for a given feed processing result owned by the \&quot;operation user_account\&quot;. Up to 20 random samples of affected items are returned for each error and warning code. Please note that for now query parameters &#39;item_numbers&#39; and &#39;item_validation_issue&#39; cannot be used simultaneously until it is implemented in some release in the future. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.  Note: To get a list of all affected items instead of sampled issues, please refer to &lt;a href&#x3D;&#39;/docs/api/v5/#operation/reports/create&#39;&gt;Build catalogs report&lt;/a&gt; and &lt;a href&#x3D;&#39;/docs/api/v5/#operation/reports/get&#39;&gt;Get catalogs report&lt;/a&gt; endpoints. Moreover, they support multiple types of catalogs.  &lt;a href&#x3D;&#39;/docs/api-features/shopping-overview/&#39;&gt;Learn more&lt;/a&gt;
/// </remarks>
class  CatalogsProcessing_resultsProcessing_result_idItem_issuesResource: public restbed::Resource
{
public:
    CatalogsProcessing_resultsProcessing_result_idItem_issuesResource(const std::string& context = "/v5");
    virtual ~CatalogsProcessing_resultsProcessing_result_idItem_issuesResource() = default;

    CatalogsProcessing_resultsProcessing_result_idItem_issuesResource(
        const CatalogsProcessing_resultsProcessing_result_idItem_issuesResource& other) = default; // copy constructor
    CatalogsProcessing_resultsProcessing_result_idItem_issuesResource(CatalogsProcessing_resultsProcessing_result_idItem_issuesResource&& other) noexcept = default; // move constructor

    CatalogsProcessing_resultsProcessing_result_idItem_issuesResource& operator=(const CatalogsProcessing_resultsProcessing_result_idItem_issuesResource& other) = default; // copy assignment
    CatalogsProcessing_resultsProcessing_result_idItem_issuesResource& operator=(CatalogsProcessing_resultsProcessing_result_idItem_issuesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Items_issues_list_200_response>(
        std::string & processingResultId, std::string & bookmark, int32_t & pageSize, std::vector<int32_t> & itemNumbers, CatalogsItemValidationIssue & itemValidationIssue, std::string & adAccountId)> handler_GET_func =
            [](std::string &, std::string &, int32_t &, std::vector<int32_t> &, CatalogsItemValidationIssue &, std::string &) -> std::pair<int, Items_issues_list_200_response>
                { throw CatalogsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Items_issues_list_200_response> handler_GET(
        std::string & processingResultId, std::string & bookmark, int32_t & pageSize, std::vector<int32_t> & itemNumbers, CatalogsItemValidationIssue & itemValidationIssue, std::string & adAccountId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCatalogsApiException(const CatalogsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get catalogs items
/// </summary>
/// <remarks>
/// Get the items of the catalog owned by the \&quot;operation user_account\&quot;. &lt;a href&#x3D;\&quot;/docs/api-features/shopping-overview/#Update%20items%20in%20batch\&quot; target&#x3D;\&quot;_blank\&quot;&gt;See detailed documentation here.&lt;/a&gt; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.  Note: this endpoint is deprecated and will be deleted soon. Please use &lt;a href&#x3D;&#39;/docs/api/v5/#operation/items/post&#39;&gt;Get catalogs items (POST)&lt;/a&gt; instead.
/// </remarks>
class  CatalogsItemsResource: public restbed::Resource
{
public:
    CatalogsItemsResource(const std::string& context = "/v5");
    virtual ~CatalogsItemsResource() = default;

    CatalogsItemsResource(
        const CatalogsItemsResource& other) = default; // copy constructor
    CatalogsItemsResource(CatalogsItemsResource&& other) noexcept = default; // move constructor

    CatalogsItemsResource& operator=(const CatalogsItemsResource& other) = default; // copy assignment
    CatalogsItemsResource& operator=(CatalogsItemsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, CatalogsItems>(
        std::string & country, std::string & language, std::string & adAccountId, std::vector<std::string> & itemIds, CatalogsItemsFilters & filters)> handler_GET_func =
            [](std::string &, std::string &, std::string &, std::vector<std::string> &, CatalogsItemsFilters &) -> std::pair<int, CatalogsItems>
                { throw CatalogsApiException(501, "Not implemented"); };

    std::function<std::pair<int, CatalogsItems>(
        CatalogsItemsRequest & catalogsItemsRequest, std::string & adAccountId)> handler_POST_func =
            [](CatalogsItemsRequest &, std::string &) -> std::pair<int, CatalogsItems>
                { throw CatalogsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, CatalogsItems> handler_GET(
        std::string & country, std::string & language, std::string & adAccountId, std::vector<std::string> & itemIds, CatalogsItemsFilters & filters);

    virtual std::pair<int, CatalogsItems> handler_POST(
        CatalogsItemsRequest & catalogsItemsRequest, std::string & adAccountId);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCatalogsApiException(const CatalogsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// List products by filter
/// </summary>
/// <remarks>
/// List products Pins owned by the \&quot;operation user_account\&quot; that meet the criteria specified in the Catalogs Product Group Filter given in the request. - This endpoint has been implemented in POST to allow for complex filters. This specific POST endpoint is designed to be idempotent. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.  Note: This endpoint only supports RETAIL catalog at the moment.  &lt;a href&#x3D;&#39;/docs/api-features/shopping-overview/&#39;&gt;Learn more&lt;/a&gt;
/// </remarks>
class  CatalogsProductsGet_by_product_group_filtersResource: public restbed::Resource
{
public:
    CatalogsProductsGet_by_product_group_filtersResource(const std::string& context = "/v5");
    virtual ~CatalogsProductsGet_by_product_group_filtersResource() = default;

    CatalogsProductsGet_by_product_group_filtersResource(
        const CatalogsProductsGet_by_product_group_filtersResource& other) = default; // copy constructor
    CatalogsProductsGet_by_product_group_filtersResource(CatalogsProductsGet_by_product_group_filtersResource&& other) noexcept = default; // move constructor

    CatalogsProductsGet_by_product_group_filtersResource& operator=(const CatalogsProductsGet_by_product_group_filtersResource& other) = default; // copy assignment
    CatalogsProductsGet_by_product_group_filtersResource& operator=(CatalogsProductsGet_by_product_group_filtersResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Catalogs_product_group_pins_list_200_response>(
        CatalogsListProductsByFilterRequest & catalogsListProductsByFilterRequest, std::string & bookmark, int32_t & pageSize, std::string & adAccountId, bool & pinMetrics)> handler_POST_func =
            [](CatalogsListProductsByFilterRequest &, std::string &, int32_t &, std::string &, bool &) -> std::pair<int, Catalogs_product_group_pins_list_200_response>
                { throw CatalogsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Catalogs_product_group_pins_list_200_response> handler_POST(
        CatalogsListProductsByFilterRequest & catalogsListProductsByFilterRequest, std::string & bookmark, int32_t & pageSize, std::string & adAccountId, bool & pinMetrics);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCatalogsApiException(const CatalogsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Build catalogs report
/// </summary>
/// <remarks>
/// Async request to create a report of the catalog owned by the \&quot;operation user_account\&quot;. This endpoint generates a report upon receiving the first approved request of the day. Any following requests with identical parameters will yield the same report even if data has changed. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.
/// </remarks>
class  CatalogsReportsResource: public restbed::Resource
{
public:
    CatalogsReportsResource(const std::string& context = "/v5");
    virtual ~CatalogsReportsResource() = default;

    CatalogsReportsResource(
        const CatalogsReportsResource& other) = default; // copy constructor
    CatalogsReportsResource(CatalogsReportsResource&& other) noexcept = default; // move constructor

    CatalogsReportsResource& operator=(const CatalogsReportsResource& other) = default; // copy assignment
    CatalogsReportsResource& operator=(CatalogsReportsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, CatalogsCreateReportResponse>(
        CatalogsReportParameters & catalogsReportParameters, std::string & adAccountId)> handler_POST_func =
            [](CatalogsReportParameters &, std::string &) -> std::pair<int, CatalogsCreateReportResponse>
                { throw CatalogsApiException(501, "Not implemented"); };

    std::function<std::pair<int, CatalogsReport>(
        std::string & token, std::string & adAccountId)> handler_GET_func =
            [](std::string &, std::string &) -> std::pair<int, CatalogsReport>
                { throw CatalogsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, CatalogsCreateReportResponse> handler_POST(
        CatalogsReportParameters & catalogsReportParameters, std::string & adAccountId);

    virtual std::pair<int, CatalogsReport> handler_GET(
        std::string & token, std::string & adAccountId);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCatalogsApiException(const CatalogsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// List report stats
/// </summary>
/// <remarks>
/// List aggregated numbers of issues for a catalog owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.
/// </remarks>
class  CatalogsReportsStatsResource: public restbed::Resource
{
public:
    CatalogsReportsStatsResource(const std::string& context = "/v5");
    virtual ~CatalogsReportsStatsResource() = default;

    CatalogsReportsStatsResource(
        const CatalogsReportsStatsResource& other) = default; // copy constructor
    CatalogsReportsStatsResource(CatalogsReportsStatsResource&& other) noexcept = default; // move constructor

    CatalogsReportsStatsResource& operator=(const CatalogsReportsStatsResource& other) = default; // copy assignment
    CatalogsReportsStatsResource& operator=(CatalogsReportsStatsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Reports_stats_200_response>(
        CatalogsReportParameters & parameters, std::string & adAccountId, int32_t & pageSize, std::string & bookmark)> handler_GET_func =
            [](CatalogsReportParameters &, std::string &, int32_t &, std::string &) -> std::pair<int, Reports_stats_200_response>
                { throw CatalogsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Reports_stats_200_response> handler_GET(
        CatalogsReportParameters & parameters, std::string & adAccountId, int32_t & pageSize, std::string & bookmark);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCatalogsApiException(const CatalogsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace CatalogsApiResources */

using CatalogsApiCatalogsProduct_groupsProduct_group_idProductsResource [[deprecated]] = CatalogsApiResources::CatalogsProduct_groupsProduct_group_idProductsResource;
using CatalogsApiCatalogsProduct_groupsResource [[deprecated]] = CatalogsApiResources::CatalogsProduct_groupsResource;
using CatalogsApiCatalogsProduct_groupsMultipleResource [[deprecated]] = CatalogsApiResources::CatalogsProduct_groupsMultipleResource;
using CatalogsApiCatalogsProduct_groupsProduct_group_idResource [[deprecated]] = CatalogsApiResources::CatalogsProduct_groupsProduct_group_idResource;
using CatalogsApiCatalogsProduct_groupsProduct_group_idProduct_countsResource [[deprecated]] = CatalogsApiResources::CatalogsProduct_groupsProduct_group_idProduct_countsResource;
using CatalogsApiCatalogsResource [[deprecated]] = CatalogsApiResources::CatalogsResource;
using CatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource [[deprecated]] = CatalogsApiResources::CatalogsFeedsFeed_idProcessing_resultsResource;
using CatalogsApiCatalogsFeedsResource [[deprecated]] = CatalogsApiResources::CatalogsFeedsResource;
using CatalogsApiCatalogsFeedsFeed_idResource [[deprecated]] = CatalogsApiResources::CatalogsFeedsFeed_idResource;
using CatalogsApiCatalogsFeedsFeed_idIngestResource [[deprecated]] = CatalogsApiResources::CatalogsFeedsFeed_idIngestResource;
using CatalogsApiCatalogsItemsBatchBatch_idResource [[deprecated]] = CatalogsApiResources::CatalogsItemsBatchBatch_idResource;
using CatalogsApiCatalogsItemsBatchResource [[deprecated]] = CatalogsApiResources::CatalogsItemsBatchResource;
using CatalogsApiCatalogsProcessing_resultsProcessing_result_idItem_issuesResource [[deprecated]] = CatalogsApiResources::CatalogsProcessing_resultsProcessing_result_idItem_issuesResource;
using CatalogsApiCatalogsItemsResource [[deprecated]] = CatalogsApiResources::CatalogsItemsResource;
using CatalogsApiCatalogsProductsGet_by_product_group_filtersResource [[deprecated]] = CatalogsApiResources::CatalogsProductsGet_by_product_group_filtersResource;
using CatalogsApiCatalogsReportsResource [[deprecated]] = CatalogsApiResources::CatalogsReportsResource;
using CatalogsApiCatalogsReportsStatsResource [[deprecated]] = CatalogsApiResources::CatalogsReportsStatsResource;

//
// The restbed service to actually implement the REST server
//
class  CatalogsApi
{
public:
    explicit CatalogsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~CatalogsApi();

    std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsProduct_group_idProductsResource> getCatalogsProduct_groupsProduct_group_idProductsResource();
    std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsResource> getCatalogsProduct_groupsResource();
    std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsMultipleResource> getCatalogsProduct_groupsMultipleResource();
    std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsProduct_group_idResource> getCatalogsProduct_groupsProduct_group_idResource();
    std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsProduct_group_idProduct_countsResource> getCatalogsProduct_groupsProduct_group_idProduct_countsResource();
    std::shared_ptr<CatalogsApiResources::CatalogsResource> getCatalogsResource();
    std::shared_ptr<CatalogsApiResources::CatalogsFeedsFeed_idProcessing_resultsResource> getCatalogsFeedsFeed_idProcessing_resultsResource();
    std::shared_ptr<CatalogsApiResources::CatalogsFeedsResource> getCatalogsFeedsResource();
    std::shared_ptr<CatalogsApiResources::CatalogsFeedsFeed_idResource> getCatalogsFeedsFeed_idResource();
    std::shared_ptr<CatalogsApiResources::CatalogsFeedsFeed_idIngestResource> getCatalogsFeedsFeed_idIngestResource();
    std::shared_ptr<CatalogsApiResources::CatalogsItemsBatchBatch_idResource> getCatalogsItemsBatchBatch_idResource();
    std::shared_ptr<CatalogsApiResources::CatalogsItemsBatchResource> getCatalogsItemsBatchResource();
    std::shared_ptr<CatalogsApiResources::CatalogsProcessing_resultsProcessing_result_idItem_issuesResource> getCatalogsProcessing_resultsProcessing_result_idItem_issuesResource();
    std::shared_ptr<CatalogsApiResources::CatalogsItemsResource> getCatalogsItemsResource();
    std::shared_ptr<CatalogsApiResources::CatalogsProductsGet_by_product_group_filtersResource> getCatalogsProductsGet_by_product_group_filtersResource();
    std::shared_ptr<CatalogsApiResources::CatalogsReportsResource> getCatalogsReportsResource();
    std::shared_ptr<CatalogsApiResources::CatalogsReportsStatsResource> getCatalogsReportsStatsResource();

    void setResource(std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsProduct_group_idProductsResource> resource);
    void setResource(std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsResource> resource);
    void setResource(std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsMultipleResource> resource);
    void setResource(std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsProduct_group_idResource> resource);
    void setResource(std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsProduct_group_idProduct_countsResource> resource);
    void setResource(std::shared_ptr<CatalogsApiResources::CatalogsResource> resource);
    void setResource(std::shared_ptr<CatalogsApiResources::CatalogsFeedsFeed_idProcessing_resultsResource> resource);
    void setResource(std::shared_ptr<CatalogsApiResources::CatalogsFeedsResource> resource);
    void setResource(std::shared_ptr<CatalogsApiResources::CatalogsFeedsFeed_idResource> resource);
    void setResource(std::shared_ptr<CatalogsApiResources::CatalogsFeedsFeed_idIngestResource> resource);
    void setResource(std::shared_ptr<CatalogsApiResources::CatalogsItemsBatchBatch_idResource> resource);
    void setResource(std::shared_ptr<CatalogsApiResources::CatalogsItemsBatchResource> resource);
    void setResource(std::shared_ptr<CatalogsApiResources::CatalogsProcessing_resultsProcessing_result_idItem_issuesResource> resource);
    void setResource(std::shared_ptr<CatalogsApiResources::CatalogsItemsResource> resource);
    void setResource(std::shared_ptr<CatalogsApiResources::CatalogsProductsGet_by_product_group_filtersResource> resource);
    void setResource(std::shared_ptr<CatalogsApiResources::CatalogsReportsResource> resource);
    void setResource(std::shared_ptr<CatalogsApiResources::CatalogsReportsStatsResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setCatalogsApiCatalogsProduct_groupsProduct_group_idProductsResource(std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsProduct_group_idProductsResource> spCatalogsApiCatalogsProduct_groupsProduct_group_idProductsResource);
    [[deprecated("use setResource()")]]
    virtual void setCatalogsApiCatalogsProduct_groupsResource(std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsResource> spCatalogsApiCatalogsProduct_groupsResource);
    [[deprecated("use setResource()")]]
    virtual void setCatalogsApiCatalogsProduct_groupsMultipleResource(std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsMultipleResource> spCatalogsApiCatalogsProduct_groupsMultipleResource);
    [[deprecated("use setResource()")]]
    virtual void setCatalogsApiCatalogsProduct_groupsProduct_group_idResource(std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsProduct_group_idResource> spCatalogsApiCatalogsProduct_groupsProduct_group_idResource);
    [[deprecated("use setResource()")]]
    virtual void setCatalogsApiCatalogsProduct_groupsProduct_group_idProduct_countsResource(std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsProduct_group_idProduct_countsResource> spCatalogsApiCatalogsProduct_groupsProduct_group_idProduct_countsResource);
    [[deprecated("use setResource()")]]
    virtual void setCatalogsApiCatalogsResource(std::shared_ptr<CatalogsApiResources::CatalogsResource> spCatalogsApiCatalogsResource);
    [[deprecated("use setResource()")]]
    virtual void setCatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource(std::shared_ptr<CatalogsApiResources::CatalogsFeedsFeed_idProcessing_resultsResource> spCatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource);
    [[deprecated("use setResource()")]]
    virtual void setCatalogsApiCatalogsFeedsResource(std::shared_ptr<CatalogsApiResources::CatalogsFeedsResource> spCatalogsApiCatalogsFeedsResource);
    [[deprecated("use setResource()")]]
    virtual void setCatalogsApiCatalogsFeedsFeed_idResource(std::shared_ptr<CatalogsApiResources::CatalogsFeedsFeed_idResource> spCatalogsApiCatalogsFeedsFeed_idResource);
    [[deprecated("use setResource()")]]
    virtual void setCatalogsApiCatalogsFeedsFeed_idIngestResource(std::shared_ptr<CatalogsApiResources::CatalogsFeedsFeed_idIngestResource> spCatalogsApiCatalogsFeedsFeed_idIngestResource);
    [[deprecated("use setResource()")]]
    virtual void setCatalogsApiCatalogsItemsBatchBatch_idResource(std::shared_ptr<CatalogsApiResources::CatalogsItemsBatchBatch_idResource> spCatalogsApiCatalogsItemsBatchBatch_idResource);
    [[deprecated("use setResource()")]]
    virtual void setCatalogsApiCatalogsItemsBatchResource(std::shared_ptr<CatalogsApiResources::CatalogsItemsBatchResource> spCatalogsApiCatalogsItemsBatchResource);
    [[deprecated("use setResource()")]]
    virtual void setCatalogsApiCatalogsProcessing_resultsProcessing_result_idItem_issuesResource(std::shared_ptr<CatalogsApiResources::CatalogsProcessing_resultsProcessing_result_idItem_issuesResource> spCatalogsApiCatalogsProcessing_resultsProcessing_result_idItem_issuesResource);
    [[deprecated("use setResource()")]]
    virtual void setCatalogsApiCatalogsItemsResource(std::shared_ptr<CatalogsApiResources::CatalogsItemsResource> spCatalogsApiCatalogsItemsResource);
    [[deprecated("use setResource()")]]
    virtual void setCatalogsApiCatalogsProductsGet_by_product_group_filtersResource(std::shared_ptr<CatalogsApiResources::CatalogsProductsGet_by_product_group_filtersResource> spCatalogsApiCatalogsProductsGet_by_product_group_filtersResource);
    [[deprecated("use setResource()")]]
    virtual void setCatalogsApiCatalogsReportsResource(std::shared_ptr<CatalogsApiResources::CatalogsReportsResource> spCatalogsApiCatalogsReportsResource);
    [[deprecated("use setResource()")]]
    virtual void setCatalogsApiCatalogsReportsStatsResource(std::shared_ptr<CatalogsApiResources::CatalogsReportsStatsResource> spCatalogsApiCatalogsReportsStatsResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsProduct_group_idProductsResource> m_spCatalogsProduct_groupsProduct_group_idProductsResource;
    std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsResource> m_spCatalogsProduct_groupsResource;
    std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsMultipleResource> m_spCatalogsProduct_groupsMultipleResource;
    std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsProduct_group_idResource> m_spCatalogsProduct_groupsProduct_group_idResource;
    std::shared_ptr<CatalogsApiResources::CatalogsProduct_groupsProduct_group_idProduct_countsResource> m_spCatalogsProduct_groupsProduct_group_idProduct_countsResource;
    std::shared_ptr<CatalogsApiResources::CatalogsResource> m_spCatalogsResource;
    std::shared_ptr<CatalogsApiResources::CatalogsFeedsFeed_idProcessing_resultsResource> m_spCatalogsFeedsFeed_idProcessing_resultsResource;
    std::shared_ptr<CatalogsApiResources::CatalogsFeedsResource> m_spCatalogsFeedsResource;
    std::shared_ptr<CatalogsApiResources::CatalogsFeedsFeed_idResource> m_spCatalogsFeedsFeed_idResource;
    std::shared_ptr<CatalogsApiResources::CatalogsFeedsFeed_idIngestResource> m_spCatalogsFeedsFeed_idIngestResource;
    std::shared_ptr<CatalogsApiResources::CatalogsItemsBatchBatch_idResource> m_spCatalogsItemsBatchBatch_idResource;
    std::shared_ptr<CatalogsApiResources::CatalogsItemsBatchResource> m_spCatalogsItemsBatchResource;
    std::shared_ptr<CatalogsApiResources::CatalogsProcessing_resultsProcessing_result_idItem_issuesResource> m_spCatalogsProcessing_resultsProcessing_result_idItem_issuesResource;
    std::shared_ptr<CatalogsApiResources::CatalogsItemsResource> m_spCatalogsItemsResource;
    std::shared_ptr<CatalogsApiResources::CatalogsProductsGet_by_product_group_filtersResource> m_spCatalogsProductsGet_by_product_group_filtersResource;
    std::shared_ptr<CatalogsApiResources::CatalogsReportsResource> m_spCatalogsReportsResource;
    std::shared_ptr<CatalogsApiResources::CatalogsReportsStatsResource> m_spCatalogsReportsStatsResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* CatalogsApi_H_ */

