/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TermsOfServiceApi.h
 *
 * 
 */

#ifndef TermsOfServiceApi_H_
#define TermsOfServiceApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "Error.h"
#include "TermsOfService.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  TermsOfServiceApiException: public std::exception
{
public:
    TermsOfServiceApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace TermsOfServiceApiResources {
/// <summary>
/// Get terms of service
/// </summary>
/// <remarks>
/// Get the text of the terms of service and see whether the advertiser has accepted the terms of service.
/// </remarks>
class  Ad_accountsAd_account_idTerms_of_serviceResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idTerms_of_serviceResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idTerms_of_serviceResource() = default;

    Ad_accountsAd_account_idTerms_of_serviceResource(
        const Ad_accountsAd_account_idTerms_of_serviceResource& other) = default; // copy constructor
    Ad_accountsAd_account_idTerms_of_serviceResource(Ad_accountsAd_account_idTerms_of_serviceResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idTerms_of_serviceResource& operator=(const Ad_accountsAd_account_idTerms_of_serviceResource& other) = default; // copy assignment
    Ad_accountsAd_account_idTerms_of_serviceResource& operator=(Ad_accountsAd_account_idTerms_of_serviceResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, TermsOfService>(
        std::string & adAccountId, bool & includeHtml, std::string & tosType)> handler_GET_func =
            [](std::string &, bool &, std::string &) -> std::pair<int, TermsOfService>
                { throw TermsOfServiceApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, TermsOfService> handler_GET(
        std::string & adAccountId, bool & includeHtml, std::string & tosType);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleTermsOfServiceApiException(const TermsOfServiceApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace TermsOfServiceApiResources */

using TermsOfServiceApiAd_accountsAd_account_idTerms_of_serviceResource [[deprecated]] = TermsOfServiceApiResources::Ad_accountsAd_account_idTerms_of_serviceResource;

//
// The restbed service to actually implement the REST server
//
class  TermsOfServiceApi
{
public:
    explicit TermsOfServiceApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~TermsOfServiceApi();

    std::shared_ptr<TermsOfServiceApiResources::Ad_accountsAd_account_idTerms_of_serviceResource> getAd_accountsAd_account_idTerms_of_serviceResource();

    void setResource(std::shared_ptr<TermsOfServiceApiResources::Ad_accountsAd_account_idTerms_of_serviceResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setTermsOfServiceApiAd_accountsAd_account_idTerms_of_serviceResource(std::shared_ptr<TermsOfServiceApiResources::Ad_accountsAd_account_idTerms_of_serviceResource> spTermsOfServiceApiAd_accountsAd_account_idTerms_of_serviceResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<TermsOfServiceApiResources::Ad_accountsAd_account_idTerms_of_serviceResource> m_spAd_accountsAd_account_idTerms_of_serviceResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* TermsOfServiceApi_H_ */

