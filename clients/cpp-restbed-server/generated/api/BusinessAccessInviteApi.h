/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BusinessAccessInviteApi.h
 *
 * 
 */

#ifndef BusinessAccessInviteApi_H_
#define BusinessAccessInviteApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "AuthRespondInvitesBody.h"
#include "CancelInvitesBody.h"
#include "CreateAssetAccessRequestBody.h"
#include "CreateAssetAccessRequestResponse.h"
#include "CreateAssetInvitesRequest.h"
#include "CreateInvitesResultsResponseArray.h"
#include "CreateMembershipOrPartnershipInvitesBody.h"
#include "DeleteInvitesResultsResponseArray.h"
#include "Error.h"
#include "Get_invites_200_response.h"
#include "InviteType.h"
#include "RespondToInvitesResponseArray.h"
#include "UpdateInvitesResultsResponseArray.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  BusinessAccessInviteApiException: public std::exception
{
public:
    BusinessAccessInviteApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace BusinessAccessInviteApiResources {
/// <summary>
/// Create a request to access an existing partner&#39;s assets.
/// </summary>
/// <remarks>
/// Create a request to access an existing partner&#39;s assets with the specified permissions. The request will be sent to the partner for approval. The assets that can be requested are ad accounts and profiles.
/// </remarks>
class  BusinessesBusiness_idRequestsAssetsAccessResource: public restbed::Resource
{
public:
    BusinessesBusiness_idRequestsAssetsAccessResource(const std::string& context = "/v5");
    virtual ~BusinessesBusiness_idRequestsAssetsAccessResource() = default;

    BusinessesBusiness_idRequestsAssetsAccessResource(
        const BusinessesBusiness_idRequestsAssetsAccessResource& other) = default; // copy constructor
    BusinessesBusiness_idRequestsAssetsAccessResource(BusinessesBusiness_idRequestsAssetsAccessResource&& other) noexcept = default; // move constructor

    BusinessesBusiness_idRequestsAssetsAccessResource& operator=(const BusinessesBusiness_idRequestsAssetsAccessResource& other) = default; // copy assignment
    BusinessesBusiness_idRequestsAssetsAccessResource& operator=(BusinessesBusiness_idRequestsAssetsAccessResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, CreateAssetAccessRequestResponse>(
        std::string & businessId, CreateAssetAccessRequestBody & createAssetAccessRequestBody)> handler_POST_func =
            [](std::string &, CreateAssetAccessRequestBody &) -> std::pair<int, CreateAssetAccessRequestResponse>
                { throw BusinessAccessInviteApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, CreateAssetAccessRequestResponse> handler_POST(
        std::string & businessId, CreateAssetAccessRequestBody & createAssetAccessRequestBody);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBusinessAccessInviteApiException(const BusinessAccessInviteApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Cancel invites/requests
/// </summary>
/// <remarks>
/// Cancel membership/partnership invites and/or requests.
/// </remarks>
class  BusinessesBusiness_idInvitesResource: public restbed::Resource
{
public:
    BusinessesBusiness_idInvitesResource(const std::string& context = "/v5");
    virtual ~BusinessesBusiness_idInvitesResource() = default;

    BusinessesBusiness_idInvitesResource(
        const BusinessesBusiness_idInvitesResource& other) = default; // copy constructor
    BusinessesBusiness_idInvitesResource(BusinessesBusiness_idInvitesResource&& other) noexcept = default; // move constructor

    BusinessesBusiness_idInvitesResource& operator=(const BusinessesBusiness_idInvitesResource& other) = default; // copy assignment
    BusinessesBusiness_idInvitesResource& operator=(BusinessesBusiness_idInvitesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, DeleteInvitesResultsResponseArray>(
        std::string & businessId, CancelInvitesBody & cancelInvitesBody)> handler_DELETE_func =
            [](std::string &, CancelInvitesBody &) -> std::pair<int, DeleteInvitesResultsResponseArray>
                { throw BusinessAccessInviteApiException(501, "Not implemented"); };

    std::function<std::pair<int, CreateInvitesResultsResponseArray>(
        std::string & businessId, CreateMembershipOrPartnershipInvitesBody & createMembershipOrPartnershipInvitesBody)> handler_POST_func =
            [](std::string &, CreateMembershipOrPartnershipInvitesBody &) -> std::pair<int, CreateInvitesResultsResponseArray>
                { throw BusinessAccessInviteApiException(501, "Not implemented"); };

    std::function<std::pair<int, Get_invites_200_response>(
        std::string & businessId, bool & isMember, std::vector<std::string> & inviteStatus, InviteType & inviteType, std::string & bookmark, int32_t & pageSize)> handler_GET_func =
            [](std::string &, bool &, std::vector<std::string> &, InviteType &, std::string &, int32_t &) -> std::pair<int, Get_invites_200_response>
                { throw BusinessAccessInviteApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, DeleteInvitesResultsResponseArray> handler_DELETE(
        std::string & businessId, CancelInvitesBody & cancelInvitesBody);

    virtual std::pair<int, CreateInvitesResultsResponseArray> handler_POST(
        std::string & businessId, CreateMembershipOrPartnershipInvitesBody & createMembershipOrPartnershipInvitesBody);
    virtual std::pair<int, Get_invites_200_response> handler_GET(
        std::string & businessId, bool & isMember, std::vector<std::string> & inviteStatus, InviteType & inviteType, std::string & bookmark, int32_t & pageSize);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBusinessAccessInviteApiException(const BusinessAccessInviteApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Update invite/request with an asset permission
/// </summary>
/// <remarks>
/// Assign asset permissions information to an existing invite/request. Can be used to: - Request access to a partner&#39;s asset. Note: This is only for when no existing partnership exists. If an existing   partnership exists, use \&quot;Create a request to access an existing partner&#39;s assets\&quot; to request access to your   partner&#39;s assets.     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot; - Invite a partner to access your business assets. Note: This is only for when there is no existing partnership.   If there is an existing partnership, use \&quot;Assign/Update partner asset permissions\&quot; to assign a partner access to   new assets.     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot; - Invite a member to access your business assets. Note: This is only for when there is no existing membership.   If there is an existing membership, use \&quot;Assign/Update member asset permissions\&quot; to assign a member access to new   assets.     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;  To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview.
/// </remarks>
class  BusinessesBusiness_idInvitesAssetsAccessResource: public restbed::Resource
{
public:
    BusinessesBusiness_idInvitesAssetsAccessResource(const std::string& context = "/v5");
    virtual ~BusinessesBusiness_idInvitesAssetsAccessResource() = default;

    BusinessesBusiness_idInvitesAssetsAccessResource(
        const BusinessesBusiness_idInvitesAssetsAccessResource& other) = default; // copy constructor
    BusinessesBusiness_idInvitesAssetsAccessResource(BusinessesBusiness_idInvitesAssetsAccessResource&& other) noexcept = default; // move constructor

    BusinessesBusiness_idInvitesAssetsAccessResource& operator=(const BusinessesBusiness_idInvitesAssetsAccessResource& other) = default; // copy assignment
    BusinessesBusiness_idInvitesAssetsAccessResource& operator=(BusinessesBusiness_idInvitesAssetsAccessResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, UpdateInvitesResultsResponseArray>(
        std::string & businessId, CreateAssetInvitesRequest & createAssetInvitesRequest)> handler_POST_func =
            [](std::string &, CreateAssetInvitesRequest &) -> std::pair<int, UpdateInvitesResultsResponseArray>
                { throw BusinessAccessInviteApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, UpdateInvitesResultsResponseArray> handler_POST(
        std::string & businessId, CreateAssetInvitesRequest & createAssetInvitesRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBusinessAccessInviteApiException(const BusinessAccessInviteApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Accept or decline an invite/request
/// </summary>
/// <remarks>
/// Accept or decline invites or requests.
/// </remarks>
class  BusinessesInvitesResource: public restbed::Resource
{
public:
    BusinessesInvitesResource(const std::string& context = "/v5");
    virtual ~BusinessesInvitesResource() = default;

    BusinessesInvitesResource(
        const BusinessesInvitesResource& other) = default; // copy constructor
    BusinessesInvitesResource(BusinessesInvitesResource&& other) noexcept = default; // move constructor

    BusinessesInvitesResource& operator=(const BusinessesInvitesResource& other) = default; // copy assignment
    BusinessesInvitesResource& operator=(BusinessesInvitesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, RespondToInvitesResponseArray>(
        AuthRespondInvitesBody & authRespondInvitesBody)> handler_PATCH_func =
            [](AuthRespondInvitesBody &) -> std::pair<int, RespondToInvitesResponseArray>
                { throw BusinessAccessInviteApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, RespondToInvitesResponseArray> handler_PATCH(
        AuthRespondInvitesBody & authRespondInvitesBody);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBusinessAccessInviteApiException(const BusinessAccessInviteApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PATCH_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace BusinessAccessInviteApiResources */

using BusinessAccessInviteApiBusinessesBusiness_idRequestsAssetsAccessResource [[deprecated]] = BusinessAccessInviteApiResources::BusinessesBusiness_idRequestsAssetsAccessResource;
using BusinessAccessInviteApiBusinessesBusiness_idInvitesResource [[deprecated]] = BusinessAccessInviteApiResources::BusinessesBusiness_idInvitesResource;
using BusinessAccessInviteApiBusinessesBusiness_idInvitesAssetsAccessResource [[deprecated]] = BusinessAccessInviteApiResources::BusinessesBusiness_idInvitesAssetsAccessResource;
using BusinessAccessInviteApiBusinessesInvitesResource [[deprecated]] = BusinessAccessInviteApiResources::BusinessesInvitesResource;

//
// The restbed service to actually implement the REST server
//
class  BusinessAccessInviteApi
{
public:
    explicit BusinessAccessInviteApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~BusinessAccessInviteApi();

    std::shared_ptr<BusinessAccessInviteApiResources::BusinessesBusiness_idRequestsAssetsAccessResource> getBusinessesBusiness_idRequestsAssetsAccessResource();
    std::shared_ptr<BusinessAccessInviteApiResources::BusinessesBusiness_idInvitesResource> getBusinessesBusiness_idInvitesResource();
    std::shared_ptr<BusinessAccessInviteApiResources::BusinessesBusiness_idInvitesAssetsAccessResource> getBusinessesBusiness_idInvitesAssetsAccessResource();
    std::shared_ptr<BusinessAccessInviteApiResources::BusinessesInvitesResource> getBusinessesInvitesResource();

    void setResource(std::shared_ptr<BusinessAccessInviteApiResources::BusinessesBusiness_idRequestsAssetsAccessResource> resource);
    void setResource(std::shared_ptr<BusinessAccessInviteApiResources::BusinessesBusiness_idInvitesResource> resource);
    void setResource(std::shared_ptr<BusinessAccessInviteApiResources::BusinessesBusiness_idInvitesAssetsAccessResource> resource);
    void setResource(std::shared_ptr<BusinessAccessInviteApiResources::BusinessesInvitesResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setBusinessAccessInviteApiBusinessesBusiness_idRequestsAssetsAccessResource(std::shared_ptr<BusinessAccessInviteApiResources::BusinessesBusiness_idRequestsAssetsAccessResource> spBusinessAccessInviteApiBusinessesBusiness_idRequestsAssetsAccessResource);
    [[deprecated("use setResource()")]]
    virtual void setBusinessAccessInviteApiBusinessesBusiness_idInvitesResource(std::shared_ptr<BusinessAccessInviteApiResources::BusinessesBusiness_idInvitesResource> spBusinessAccessInviteApiBusinessesBusiness_idInvitesResource);
    [[deprecated("use setResource()")]]
    virtual void setBusinessAccessInviteApiBusinessesBusiness_idInvitesAssetsAccessResource(std::shared_ptr<BusinessAccessInviteApiResources::BusinessesBusiness_idInvitesAssetsAccessResource> spBusinessAccessInviteApiBusinessesBusiness_idInvitesAssetsAccessResource);
    [[deprecated("use setResource()")]]
    virtual void setBusinessAccessInviteApiBusinessesInvitesResource(std::shared_ptr<BusinessAccessInviteApiResources::BusinessesInvitesResource> spBusinessAccessInviteApiBusinessesInvitesResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<BusinessAccessInviteApiResources::BusinessesBusiness_idRequestsAssetsAccessResource> m_spBusinessesBusiness_idRequestsAssetsAccessResource;
    std::shared_ptr<BusinessAccessInviteApiResources::BusinessesBusiness_idInvitesResource> m_spBusinessesBusiness_idInvitesResource;
    std::shared_ptr<BusinessAccessInviteApiResources::BusinessesBusiness_idInvitesAssetsAccessResource> m_spBusinessesBusiness_idInvitesAssetsAccessResource;
    std::shared_ptr<BusinessAccessInviteApiResources::BusinessesInvitesResource> m_spBusinessesInvitesResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* BusinessAccessInviteApi_H_ */

