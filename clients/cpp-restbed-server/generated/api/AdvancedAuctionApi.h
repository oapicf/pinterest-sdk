/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdvancedAuctionApi.h
 *
 * 
 */

#ifndef AdvancedAuctionApi_H_
#define AdvancedAuctionApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "AdvancedAuctionItems.h"
#include "AdvancedAuctionItemsGetRequest.h"
#include "AdvancedAuctionItemsSubmitRequest.h"
#include "AdvancedAuctionProcessedItems.h"
#include "Error.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  AdvancedAuctionApiException: public std::exception
{
public:
    AdvancedAuctionApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace AdvancedAuctionApiResources {
/// <summary>
/// Get item bid options (POST)
/// </summary>
/// <remarks>
/// Get the bid options for a batch of retail catalog items.  The catalog must be owned by the \&quot;operation user_account\&quot;. &lt;a href&#x3D;\&quot;/docs/api-features/shopping-overview/#Update%20items%20in%20batch\&quot; target&#x3D;\&quot;_blank\&quot;&gt;See detailed documentation here.&lt;/a&gt; By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: &#x60;Owner&#x60;, &#x60;Admin&#x60;.  This endpoint is not available to all users.
/// </remarks>
class  Advanced_auctionItemsGetResource: public restbed::Resource
{
public:
    Advanced_auctionItemsGetResource(const std::string& context = "/v5");
    virtual ~Advanced_auctionItemsGetResource() = default;

    Advanced_auctionItemsGetResource(
        const Advanced_auctionItemsGetResource& other) = default; // copy constructor
    Advanced_auctionItemsGetResource(Advanced_auctionItemsGetResource&& other) noexcept = default; // move constructor

    Advanced_auctionItemsGetResource& operator=(const Advanced_auctionItemsGetResource& other) = default; // copy assignment
    Advanced_auctionItemsGetResource& operator=(Advanced_auctionItemsGetResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, AdvancedAuctionItems>(
        AdvancedAuctionItemsGetRequest & advancedAuctionItemsGetRequest, std::string & adAccountId)> handler_POST_func =
            [](AdvancedAuctionItemsGetRequest &, std::string &) -> std::pair<int, AdvancedAuctionItems>
                { throw AdvancedAuctionApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, AdvancedAuctionItems> handler_POST(
        AdvancedAuctionItemsGetRequest & advancedAuctionItemsGetRequest, std::string & adAccountId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAdvancedAuctionApiException(const AdvancedAuctionApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Operate on item level bid options
/// </summary>
/// <remarks>
/// This endpoint supports multiple operations on a set of one or more bid options (bid price and bid adjustments for targeting categories) for retail catalog items. These advanced auction settings are applied in campaigns using objective_type &#x60;CATALOG_SALES&#x60; and ad groups using bid_strategy_type &#x60;MAX_BID&#x60;.  The catalog must be owned by the \&quot;operation user_account\&quot;. &lt;a href&#x3D;\&quot;/docs/api-features/modify-items-in-batch/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;See detailed documentation here.&lt;/a&gt; By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: &#x60;Owner&#x60;, &#x60;Admin&#x60;.  This endpoint is not available to all users.
/// </remarks>
class  Advanced_auctionItemsSubmitResource: public restbed::Resource
{
public:
    Advanced_auctionItemsSubmitResource(const std::string& context = "/v5");
    virtual ~Advanced_auctionItemsSubmitResource() = default;

    Advanced_auctionItemsSubmitResource(
        const Advanced_auctionItemsSubmitResource& other) = default; // copy constructor
    Advanced_auctionItemsSubmitResource(Advanced_auctionItemsSubmitResource&& other) noexcept = default; // move constructor

    Advanced_auctionItemsSubmitResource& operator=(const Advanced_auctionItemsSubmitResource& other) = default; // copy assignment
    Advanced_auctionItemsSubmitResource& operator=(Advanced_auctionItemsSubmitResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, AdvancedAuctionProcessedItems>(
        AdvancedAuctionItemsSubmitRequest & advancedAuctionItemsSubmitRequest, std::string & adAccountId)> handler_POST_func =
            [](AdvancedAuctionItemsSubmitRequest &, std::string &) -> std::pair<int, AdvancedAuctionProcessedItems>
                { throw AdvancedAuctionApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, AdvancedAuctionProcessedItems> handler_POST(
        AdvancedAuctionItemsSubmitRequest & advancedAuctionItemsSubmitRequest, std::string & adAccountId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAdvancedAuctionApiException(const AdvancedAuctionApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace AdvancedAuctionApiResources */

using AdvancedAuctionApiAdvanced_auctionItemsGetResource [[deprecated]] = AdvancedAuctionApiResources::Advanced_auctionItemsGetResource;
using AdvancedAuctionApiAdvanced_auctionItemsSubmitResource [[deprecated]] = AdvancedAuctionApiResources::Advanced_auctionItemsSubmitResource;

//
// The restbed service to actually implement the REST server
//
class  AdvancedAuctionApi
{
public:
    explicit AdvancedAuctionApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~AdvancedAuctionApi();

    std::shared_ptr<AdvancedAuctionApiResources::Advanced_auctionItemsGetResource> getAdvanced_auctionItemsGetResource();
    std::shared_ptr<AdvancedAuctionApiResources::Advanced_auctionItemsSubmitResource> getAdvanced_auctionItemsSubmitResource();

    void setResource(std::shared_ptr<AdvancedAuctionApiResources::Advanced_auctionItemsGetResource> resource);
    void setResource(std::shared_ptr<AdvancedAuctionApiResources::Advanced_auctionItemsSubmitResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setAdvancedAuctionApiAdvanced_auctionItemsGetResource(std::shared_ptr<AdvancedAuctionApiResources::Advanced_auctionItemsGetResource> spAdvancedAuctionApiAdvanced_auctionItemsGetResource);
    [[deprecated("use setResource()")]]
    virtual void setAdvancedAuctionApiAdvanced_auctionItemsSubmitResource(std::shared_ptr<AdvancedAuctionApiResources::Advanced_auctionItemsSubmitResource> spAdvancedAuctionApiAdvanced_auctionItemsSubmitResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<AdvancedAuctionApiResources::Advanced_auctionItemsGetResource> m_spAdvanced_auctionItemsGetResource;
    std::shared_ptr<AdvancedAuctionApiResources::Advanced_auctionItemsSubmitResource> m_spAdvanced_auctionItemsSubmitResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* AdvancedAuctionApi_H_ */

