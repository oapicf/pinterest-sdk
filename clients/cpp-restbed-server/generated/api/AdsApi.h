/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdsApi.h
 *
 * 
 */

#ifndef AdsApi_H_
#define AdsApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "AdArrayResponse.h"
#include "AdCreateRequest.h"
#include "AdPreviewRequest.h"
#include "AdPreviewURLResponse.h"
#include "AdResponse.h"
#include "AdUpdateRequest.h"
#include "AdsAnalyticsAdTargetingType.h"
#include "AdsAnalyticsResponse_inner.h"
#include "Ads_list_200_response.h"
#include "ConversionReportAttributionType.h"
#include "Error.h"
#include "Granularity.h"
#include "MetricsResponse.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  AdsApiException: public std::exception
{
public:
    AdsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace AdsApiResources {
/// <summary>
/// Create ad preview with pin or image
/// </summary>
/// <remarks>
/// Create an ad preview given an ad account ID and either an existing organic pin ID or the URL for an image to be used to create the Pin and the ad. &lt;p/&gt; If you are creating a preview from an existing Pin, that Pin must be promotable: that is, it must have a clickthrough link and meet other requirements. (See &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/promoted-pins-overview\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Ads Overview&lt;/a&gt;.) &lt;p/&gt; You can view the returned preview URL on a webpage or iframe for 7 days, after which the URL expires. Collection ads are not currently supported ad preview.
/// </remarks>
class  Ad_accountsAd_account_idAd_previewsResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idAd_previewsResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idAd_previewsResource() = default;

    Ad_accountsAd_account_idAd_previewsResource(
        const Ad_accountsAd_account_idAd_previewsResource& other) = default; // copy constructor
    Ad_accountsAd_account_idAd_previewsResource(Ad_accountsAd_account_idAd_previewsResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idAd_previewsResource& operator=(const Ad_accountsAd_account_idAd_previewsResource& other) = default; // copy assignment
    Ad_accountsAd_account_idAd_previewsResource& operator=(Ad_accountsAd_account_idAd_previewsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, AdPreviewURLResponse>(
        std::string & adAccountId, AdPreviewRequest & adPreviewRequest)> handler_POST_func =
            [](std::string &, AdPreviewRequest &) -> std::pair<int, AdPreviewURLResponse>
                { throw AdsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, AdPreviewURLResponse> handler_POST(
        std::string & adAccountId, AdPreviewRequest & adPreviewRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAdsApiException(const AdsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get targeting analytics for ads
/// </summary>
/// <remarks>
/// Get targeting analytics for one or more ads. For the requested ad(s) and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \&quot;age_bucket\&quot;) for applicable values (e.g. \&quot;45-49\&quot;). &lt;p/&gt; - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
/// </remarks>
class  Ad_accountsAd_account_idAdsTargeting_analyticsResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idAdsTargeting_analyticsResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idAdsTargeting_analyticsResource() = default;

    Ad_accountsAd_account_idAdsTargeting_analyticsResource(
        const Ad_accountsAd_account_idAdsTargeting_analyticsResource& other) = default; // copy constructor
    Ad_accountsAd_account_idAdsTargeting_analyticsResource(Ad_accountsAd_account_idAdsTargeting_analyticsResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idAdsTargeting_analyticsResource& operator=(const Ad_accountsAd_account_idAdsTargeting_analyticsResource& other) = default; // copy assignment
    Ad_accountsAd_account_idAdsTargeting_analyticsResource& operator=(Ad_accountsAd_account_idAdsTargeting_analyticsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, MetricsResponse>(
        std::string & adAccountId, std::vector<std::string> & adIds, std::string & startDate, std::string & endDate, std::vector<AdsAnalyticsAdTargetingType> & targetingTypes, std::vector<std::string> & columns, Granularity & granularity, int32_t & clickWindowDays, int32_t & engagementWindowDays, int32_t & viewWindowDays, std::string & conversionReportTime, ConversionReportAttributionType & attributionTypes)> handler_GET_func =
            [](std::string &, std::vector<std::string> &, std::string &, std::string &, std::vector<AdsAnalyticsAdTargetingType> &, std::vector<std::string> &, Granularity &, int32_t &, int32_t &, int32_t &, std::string &, ConversionReportAttributionType &) -> std::pair<int, MetricsResponse>
                { throw AdsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, MetricsResponse> handler_GET(
        std::string & adAccountId, std::vector<std::string> & adIds, std::string & startDate, std::string & endDate, std::vector<AdsAnalyticsAdTargetingType> & targetingTypes, std::vector<std::string> & columns, Granularity & granularity, int32_t & clickWindowDays, int32_t & engagementWindowDays, int32_t & viewWindowDays, std::string & conversionReportTime, ConversionReportAttributionType & attributionTypes);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAdsApiException(const AdsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get ad analytics
/// </summary>
/// <remarks>
/// Get analytics for the specified ads in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - The request must contain either ad_ids or both campaign_ids and pin_ids. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
/// </remarks>
class  Ad_accountsAd_account_idAdsAnalyticsResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idAdsAnalyticsResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idAdsAnalyticsResource() = default;

    Ad_accountsAd_account_idAdsAnalyticsResource(
        const Ad_accountsAd_account_idAdsAnalyticsResource& other) = default; // copy constructor
    Ad_accountsAd_account_idAdsAnalyticsResource(Ad_accountsAd_account_idAdsAnalyticsResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idAdsAnalyticsResource& operator=(const Ad_accountsAd_account_idAdsAnalyticsResource& other) = default; // copy assignment
    Ad_accountsAd_account_idAdsAnalyticsResource& operator=(Ad_accountsAd_account_idAdsAnalyticsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::vector<AdsAnalyticsResponse_inner>>(
        std::string & adAccountId, std::string & startDate, std::string & endDate, std::vector<std::string> & columns, Granularity & granularity, std::vector<std::string> & adIds, int32_t & clickWindowDays, int32_t & engagementWindowDays, int32_t & viewWindowDays, std::string & conversionReportTime, std::vector<std::string> & pinIds, std::vector<std::string> & campaignIds)> handler_GET_func =
            [](std::string &, std::string &, std::string &, std::vector<std::string> &, Granularity &, std::vector<std::string> &, int32_t &, int32_t &, int32_t &, std::string &, std::vector<std::string> &, std::vector<std::string> &) -> std::pair<int, std::vector<AdsAnalyticsResponse_inner>>
                { throw AdsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<AdsAnalyticsResponse_inner>> handler_GET(
        std::string & adAccountId, std::string & startDate, std::string & endDate, std::vector<std::string> & columns, Granularity & granularity, std::vector<std::string> & adIds, int32_t & clickWindowDays, int32_t & engagementWindowDays, int32_t & viewWindowDays, std::string & conversionReportTime, std::vector<std::string> & pinIds, std::vector<std::string> & campaignIds);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAdsApiException(const AdsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Create ads
/// </summary>
/// <remarks>
/// Create multiple new ads. Request must contain ad_group_id, creative_type, and the source Pin pin_id.
/// </remarks>
class  Ad_accountsAd_account_idAdsResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idAdsResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idAdsResource() = default;

    Ad_accountsAd_account_idAdsResource(
        const Ad_accountsAd_account_idAdsResource& other) = default; // copy constructor
    Ad_accountsAd_account_idAdsResource(Ad_accountsAd_account_idAdsResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idAdsResource& operator=(const Ad_accountsAd_account_idAdsResource& other) = default; // copy assignment
    Ad_accountsAd_account_idAdsResource& operator=(Ad_accountsAd_account_idAdsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, AdArrayResponse>(
        std::string & adAccountId, std::vector<AdCreateRequest> & adCreateRequest)> handler_POST_func =
            [](std::string &, std::vector<AdCreateRequest> &) -> std::pair<int, AdArrayResponse>
                { throw AdsApiException(501, "Not implemented"); };

    std::function<std::pair<int, Ads_list_200_response>(
        std::string & adAccountId, std::vector<std::string> & campaignIds, std::vector<std::string> & adGroupIds, std::vector<std::string> & adIds, std::vector<std::string> & entityStatuses, int32_t & pageSize, std::string & order, std::string & bookmark)> handler_GET_func =
            [](std::string &, std::vector<std::string> &, std::vector<std::string> &, std::vector<std::string> &, std::vector<std::string> &, int32_t &, std::string &, std::string &) -> std::pair<int, Ads_list_200_response>
                { throw AdsApiException(501, "Not implemented"); };

    std::function<std::pair<int, AdArrayResponse>(
        std::string & adAccountId, std::vector<AdUpdateRequest> & adUpdateRequest)> handler_PATCH_func =
            [](std::string &, std::vector<AdUpdateRequest> &) -> std::pair<int, AdArrayResponse>
                { throw AdsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, AdArrayResponse> handler_POST(
        std::string & adAccountId, std::vector<AdCreateRequest> & adCreateRequest);

    virtual std::pair<int, Ads_list_200_response> handler_GET(
        std::string & adAccountId, std::vector<std::string> & campaignIds, std::vector<std::string> & adGroupIds, std::vector<std::string> & adIds, std::vector<std::string> & entityStatuses, int32_t & pageSize, std::string & order, std::string & bookmark);
    virtual std::pair<int, AdArrayResponse> handler_PATCH(
        std::string & adAccountId, std::vector<AdUpdateRequest> & adUpdateRequest);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAdsApiException(const AdsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PATCH_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get ad
/// </summary>
/// <remarks>
/// Get a specific ad given the ad ID. If your pin is rejected, rejected_reasons will contain additional information from the Ad Review process. For more information about our policies and rejection reasons see the &lt;a href&#x3D;\&quot;https://www.pinterest.com/_/_/policy/advertising-guidelines/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Pinterest advertising standards&lt;/a&gt;.
/// </remarks>
class  Ad_accountsAd_account_idAdsAd_idResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idAdsAd_idResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idAdsAd_idResource() = default;

    Ad_accountsAd_account_idAdsAd_idResource(
        const Ad_accountsAd_account_idAdsAd_idResource& other) = default; // copy constructor
    Ad_accountsAd_account_idAdsAd_idResource(Ad_accountsAd_account_idAdsAd_idResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idAdsAd_idResource& operator=(const Ad_accountsAd_account_idAdsAd_idResource& other) = default; // copy assignment
    Ad_accountsAd_account_idAdsAd_idResource& operator=(Ad_accountsAd_account_idAdsAd_idResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, AdResponse>(
        std::string & adAccountId, std::string & adId)> handler_GET_func =
            [](std::string &, std::string &) -> std::pair<int, AdResponse>
                { throw AdsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, AdResponse> handler_GET(
        std::string & adAccountId, std::string & adId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAdsApiException(const AdsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace AdsApiResources */

using AdsApiAd_accountsAd_account_idAd_previewsResource [[deprecated]] = AdsApiResources::Ad_accountsAd_account_idAd_previewsResource;
using AdsApiAd_accountsAd_account_idAdsTargeting_analyticsResource [[deprecated]] = AdsApiResources::Ad_accountsAd_account_idAdsTargeting_analyticsResource;
using AdsApiAd_accountsAd_account_idAdsAnalyticsResource [[deprecated]] = AdsApiResources::Ad_accountsAd_account_idAdsAnalyticsResource;
using AdsApiAd_accountsAd_account_idAdsResource [[deprecated]] = AdsApiResources::Ad_accountsAd_account_idAdsResource;
using AdsApiAd_accountsAd_account_idAdsAd_idResource [[deprecated]] = AdsApiResources::Ad_accountsAd_account_idAdsAd_idResource;

//
// The restbed service to actually implement the REST server
//
class  AdsApi
{
public:
    explicit AdsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~AdsApi();

    std::shared_ptr<AdsApiResources::Ad_accountsAd_account_idAd_previewsResource> getAd_accountsAd_account_idAd_previewsResource();
    std::shared_ptr<AdsApiResources::Ad_accountsAd_account_idAdsTargeting_analyticsResource> getAd_accountsAd_account_idAdsTargeting_analyticsResource();
    std::shared_ptr<AdsApiResources::Ad_accountsAd_account_idAdsAnalyticsResource> getAd_accountsAd_account_idAdsAnalyticsResource();
    std::shared_ptr<AdsApiResources::Ad_accountsAd_account_idAdsResource> getAd_accountsAd_account_idAdsResource();
    std::shared_ptr<AdsApiResources::Ad_accountsAd_account_idAdsAd_idResource> getAd_accountsAd_account_idAdsAd_idResource();

    void setResource(std::shared_ptr<AdsApiResources::Ad_accountsAd_account_idAd_previewsResource> resource);
    void setResource(std::shared_ptr<AdsApiResources::Ad_accountsAd_account_idAdsTargeting_analyticsResource> resource);
    void setResource(std::shared_ptr<AdsApiResources::Ad_accountsAd_account_idAdsAnalyticsResource> resource);
    void setResource(std::shared_ptr<AdsApiResources::Ad_accountsAd_account_idAdsResource> resource);
    void setResource(std::shared_ptr<AdsApiResources::Ad_accountsAd_account_idAdsAd_idResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setAdsApiAd_accountsAd_account_idAd_previewsResource(std::shared_ptr<AdsApiResources::Ad_accountsAd_account_idAd_previewsResource> spAdsApiAd_accountsAd_account_idAd_previewsResource);
    [[deprecated("use setResource()")]]
    virtual void setAdsApiAd_accountsAd_account_idAdsTargeting_analyticsResource(std::shared_ptr<AdsApiResources::Ad_accountsAd_account_idAdsTargeting_analyticsResource> spAdsApiAd_accountsAd_account_idAdsTargeting_analyticsResource);
    [[deprecated("use setResource()")]]
    virtual void setAdsApiAd_accountsAd_account_idAdsAnalyticsResource(std::shared_ptr<AdsApiResources::Ad_accountsAd_account_idAdsAnalyticsResource> spAdsApiAd_accountsAd_account_idAdsAnalyticsResource);
    [[deprecated("use setResource()")]]
    virtual void setAdsApiAd_accountsAd_account_idAdsResource(std::shared_ptr<AdsApiResources::Ad_accountsAd_account_idAdsResource> spAdsApiAd_accountsAd_account_idAdsResource);
    [[deprecated("use setResource()")]]
    virtual void setAdsApiAd_accountsAd_account_idAdsAd_idResource(std::shared_ptr<AdsApiResources::Ad_accountsAd_account_idAdsAd_idResource> spAdsApiAd_accountsAd_account_idAdsAd_idResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<AdsApiResources::Ad_accountsAd_account_idAd_previewsResource> m_spAd_accountsAd_account_idAd_previewsResource;
    std::shared_ptr<AdsApiResources::Ad_accountsAd_account_idAdsTargeting_analyticsResource> m_spAd_accountsAd_account_idAdsTargeting_analyticsResource;
    std::shared_ptr<AdsApiResources::Ad_accountsAd_account_idAdsAnalyticsResource> m_spAd_accountsAd_account_idAdsAnalyticsResource;
    std::shared_ptr<AdsApiResources::Ad_accountsAd_account_idAdsResource> m_spAd_accountsAd_account_idAdsResource;
    std::shared_ptr<AdsApiResources::Ad_accountsAd_account_idAdsAd_idResource> m_spAd_accountsAd_account_idAdsAd_idResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* AdsApi_H_ */

