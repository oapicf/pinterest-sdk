/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BusinessAccessAssetsApi.h
 *
 * 
 */

#ifndef BusinessAccessAssetsApi_H_
#define BusinessAccessAssetsApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "Business_asset_members_get_200_response.h"
#include "Business_asset_partners_get_200_response.h"
#include "Business_assets_get_200_response.h"
#include "Business_member_assets_get_200_response.h"
#include "Business_members_asset_access_delete_request.h"
#include "Business_partner_asset_access_get_200_response.h"
#include "CreateAssetGroupBody.h"
#include "CreateAssetGroupResponse.h"
#include "DeleteAssetGroupBody.h"
#include "DeleteAssetGroupResponse.h"
#include "DeleteMemberAccessResultsResponseArray.h"
#include "DeletePartnerAssetAccessBody.h"
#include "DeletePartnerAssetsResultsResponseArray.h"
#include "Error.h"
#include "PartnerType.h"
#include "PermissionsWithOwner.h"
#include "UpdateAssetGroupBody.h"
#include "UpdateAssetGroupResponse.h"
#include "UpdateMemberAssetAccessBody.h"
#include "UpdateMemberAssetsResultsResponseArray.h"
#include "UpdatePartnerAssetAccessBody.h"
#include "UpdatePartnerAssetsResultsResponseArray.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  BusinessAccessAssetsApiException: public std::exception
{
public:
    BusinessAccessAssetsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace BusinessAccessAssetsApiResources {
/// <summary>
/// Create a new asset group.
/// </summary>
/// <remarks>
/// Create a new asset group with the specified parameters. - An &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/asset-groups\&quot;&gt;asset group&lt;/a&gt; is a custom group of assets based on how youâ€™d like to manage your accounts.
/// </remarks>
class  BusinessesBusiness_idAsset_groupsResource: public restbed::Resource
{
public:
    BusinessesBusiness_idAsset_groupsResource(const std::string& context = "/v5");
    virtual ~BusinessesBusiness_idAsset_groupsResource() = default;

    BusinessesBusiness_idAsset_groupsResource(
        const BusinessesBusiness_idAsset_groupsResource& other) = default; // copy constructor
    BusinessesBusiness_idAsset_groupsResource(BusinessesBusiness_idAsset_groupsResource&& other) noexcept = default; // move constructor

    BusinessesBusiness_idAsset_groupsResource& operator=(const BusinessesBusiness_idAsset_groupsResource& other) = default; // copy assignment
    BusinessesBusiness_idAsset_groupsResource& operator=(BusinessesBusiness_idAsset_groupsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, CreateAssetGroupResponse>(
        std::string & businessId, CreateAssetGroupBody & createAssetGroupBody)> handler_POST_func =
            [](std::string &, CreateAssetGroupBody &) -> std::pair<int, CreateAssetGroupResponse>
                { throw BusinessAccessAssetsApiException(501, "Not implemented"); };

    std::function<std::pair<int, DeleteAssetGroupResponse>(
        std::string & businessId, DeleteAssetGroupBody & deleteAssetGroupBody)> handler_DELETE_func =
            [](std::string &, DeleteAssetGroupBody &) -> std::pair<int, DeleteAssetGroupResponse>
                { throw BusinessAccessAssetsApiException(501, "Not implemented"); };

    std::function<std::pair<int, UpdateAssetGroupResponse>(
        std::string & businessId, UpdateAssetGroupBody & updateAssetGroupBody)> handler_PATCH_func =
            [](std::string &, UpdateAssetGroupBody &) -> std::pair<int, UpdateAssetGroupResponse>
                { throw BusinessAccessAssetsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, CreateAssetGroupResponse> handler_POST(
        std::string & businessId, CreateAssetGroupBody & createAssetGroupBody);

    virtual std::pair<int, DeleteAssetGroupResponse> handler_DELETE(
        std::string & businessId, DeleteAssetGroupBody & deleteAssetGroupBody);
    virtual std::pair<int, UpdateAssetGroupResponse> handler_PATCH(
        std::string & businessId, UpdateAssetGroupBody & updateAssetGroupBody);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBusinessAccessAssetsApiException(const BusinessAccessAssetsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PATCH_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get members with access to asset
/// </summary>
/// <remarks>
/// Get all the members the requesting business has granted access to on the given asset.
/// </remarks>
class  BusinessesBusiness_idAssetsAsset_idMembersResource: public restbed::Resource
{
public:
    BusinessesBusiness_idAssetsAsset_idMembersResource(const std::string& context = "/v5");
    virtual ~BusinessesBusiness_idAssetsAsset_idMembersResource() = default;

    BusinessesBusiness_idAssetsAsset_idMembersResource(
        const BusinessesBusiness_idAssetsAsset_idMembersResource& other) = default; // copy constructor
    BusinessesBusiness_idAssetsAsset_idMembersResource(BusinessesBusiness_idAssetsAsset_idMembersResource&& other) noexcept = default; // move constructor

    BusinessesBusiness_idAssetsAsset_idMembersResource& operator=(const BusinessesBusiness_idAssetsAsset_idMembersResource& other) = default; // copy assignment
    BusinessesBusiness_idAssetsAsset_idMembersResource& operator=(BusinessesBusiness_idAssetsAsset_idMembersResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Business_asset_members_get_200_response>(
        std::string & businessId, std::string & assetId, std::string & bookmark, int32_t & pageSize, int32_t & startIndex)> handler_GET_func =
            [](std::string &, std::string &, std::string &, int32_t &, int32_t &) -> std::pair<int, Business_asset_members_get_200_response>
                { throw BusinessAccessAssetsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Business_asset_members_get_200_response> handler_GET(
        std::string & businessId, std::string & assetId, std::string & bookmark, int32_t & pageSize, int32_t & startIndex);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBusinessAccessAssetsApiException(const BusinessAccessAssetsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get partners with access to asset
/// </summary>
/// <remarks>
/// Get all the partners the requesting business has granted access to on the given asset. Note: If the asset has been shared with you, an empty array will be returned. This is because an asset shared with you cannot be shared with a different partner.
/// </remarks>
class  BusinessesBusiness_idAssetsAsset_idPartnersResource: public restbed::Resource
{
public:
    BusinessesBusiness_idAssetsAsset_idPartnersResource(const std::string& context = "/v5");
    virtual ~BusinessesBusiness_idAssetsAsset_idPartnersResource() = default;

    BusinessesBusiness_idAssetsAsset_idPartnersResource(
        const BusinessesBusiness_idAssetsAsset_idPartnersResource& other) = default; // copy constructor
    BusinessesBusiness_idAssetsAsset_idPartnersResource(BusinessesBusiness_idAssetsAsset_idPartnersResource&& other) noexcept = default; // move constructor

    BusinessesBusiness_idAssetsAsset_idPartnersResource& operator=(const BusinessesBusiness_idAssetsAsset_idPartnersResource& other) = default; // copy assignment
    BusinessesBusiness_idAssetsAsset_idPartnersResource& operator=(BusinessesBusiness_idAssetsAsset_idPartnersResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Business_asset_partners_get_200_response>(
        std::string & businessId, std::string & assetId, int32_t & startIndex, std::string & bookmark, int32_t & pageSize)> handler_GET_func =
            [](std::string &, std::string &, int32_t &, std::string &, int32_t &) -> std::pair<int, Business_asset_partners_get_200_response>
                { throw BusinessAccessAssetsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Business_asset_partners_get_200_response> handler_GET(
        std::string & businessId, std::string & assetId, int32_t & startIndex, std::string & bookmark, int32_t & pageSize);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBusinessAccessAssetsApiException(const BusinessAccessAssetsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// List business assets
/// </summary>
/// <remarks>
/// Get all the assets the requesting business has access to. This includes assets the business owns and assets the business has access to through partnerships.
/// </remarks>
class  BusinessesBusiness_idAssetsResource: public restbed::Resource
{
public:
    BusinessesBusiness_idAssetsResource(const std::string& context = "/v5");
    virtual ~BusinessesBusiness_idAssetsResource() = default;

    BusinessesBusiness_idAssetsResource(
        const BusinessesBusiness_idAssetsResource& other) = default; // copy constructor
    BusinessesBusiness_idAssetsResource(BusinessesBusiness_idAssetsResource&& other) noexcept = default; // move constructor

    BusinessesBusiness_idAssetsResource& operator=(const BusinessesBusiness_idAssetsResource& other) = default; // copy assignment
    BusinessesBusiness_idAssetsResource& operator=(BusinessesBusiness_idAssetsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Business_assets_get_200_response>(
        std::string & businessId, std::vector<PermissionsWithOwner> & permissions, std::string & childAssetId, std::string & assetGroupId, std::string & assetType, int32_t & startIndex, std::string & bookmark, int32_t & pageSize)> handler_GET_func =
            [](std::string &, std::vector<PermissionsWithOwner> &, std::string &, std::string &, std::string &, int32_t &, std::string &, int32_t &) -> std::pair<int, Business_assets_get_200_response>
                { throw BusinessAccessAssetsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Business_assets_get_200_response> handler_GET(
        std::string & businessId, std::vector<PermissionsWithOwner> & permissions, std::string & childAssetId, std::string & assetGroupId, std::string & assetType, int32_t & startIndex, std::string & bookmark, int32_t & pageSize);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBusinessAccessAssetsApiException(const BusinessAccessAssetsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get assets assigned to a member
/// </summary>
/// <remarks>
/// Get assets on which you assigned asset permissions to the given member. Can be used to: - get all assets, regardless of asset type or - get assets of one asset type by using the asset_type query. The return response will include the permissions the member has to that asset and the asset type.
/// </remarks>
class  BusinessesBusiness_idMembersMember_idAssetsResource: public restbed::Resource
{
public:
    BusinessesBusiness_idMembersMember_idAssetsResource(const std::string& context = "/v5");
    virtual ~BusinessesBusiness_idMembersMember_idAssetsResource() = default;

    BusinessesBusiness_idMembersMember_idAssetsResource(
        const BusinessesBusiness_idMembersMember_idAssetsResource& other) = default; // copy constructor
    BusinessesBusiness_idMembersMember_idAssetsResource(BusinessesBusiness_idMembersMember_idAssetsResource&& other) noexcept = default; // move constructor

    BusinessesBusiness_idMembersMember_idAssetsResource& operator=(const BusinessesBusiness_idMembersMember_idAssetsResource& other) = default; // copy assignment
    BusinessesBusiness_idMembersMember_idAssetsResource& operator=(BusinessesBusiness_idMembersMember_idAssetsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Business_member_assets_get_200_response>(
        std::string & businessId, std::string & memberId, std::string & assetType, int32_t & startIndex, std::string & bookmark, int32_t & pageSize)> handler_GET_func =
            [](std::string &, std::string &, std::string &, int32_t &, std::string &, int32_t &) -> std::pair<int, Business_member_assets_get_200_response>
                { throw BusinessAccessAssetsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Business_member_assets_get_200_response> handler_GET(
        std::string & businessId, std::string & memberId, std::string & assetType, int32_t & startIndex, std::string & bookmark, int32_t & pageSize);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBusinessAccessAssetsApiException(const BusinessAccessAssetsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Delete member access to asset
/// </summary>
/// <remarks>
/// Terminate multiple members&#39; access to an asset.
/// </remarks>
class  BusinessesBusiness_idMembersAssetsAccessResource: public restbed::Resource
{
public:
    BusinessesBusiness_idMembersAssetsAccessResource(const std::string& context = "/v5");
    virtual ~BusinessesBusiness_idMembersAssetsAccessResource() = default;

    BusinessesBusiness_idMembersAssetsAccessResource(
        const BusinessesBusiness_idMembersAssetsAccessResource& other) = default; // copy constructor
    BusinessesBusiness_idMembersAssetsAccessResource(BusinessesBusiness_idMembersAssetsAccessResource&& other) noexcept = default; // move constructor

    BusinessesBusiness_idMembersAssetsAccessResource& operator=(const BusinessesBusiness_idMembersAssetsAccessResource& other) = default; // copy assignment
    BusinessesBusiness_idMembersAssetsAccessResource& operator=(BusinessesBusiness_idMembersAssetsAccessResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, DeleteMemberAccessResultsResponseArray>(
        std::string & businessId, Business_members_asset_access_delete_request & businessMembersAssetAccessDeleteRequest)> handler_DELETE_func =
            [](std::string &, Business_members_asset_access_delete_request &) -> std::pair<int, DeleteMemberAccessResultsResponseArray>
                { throw BusinessAccessAssetsApiException(501, "Not implemented"); };

    std::function<std::pair<int, UpdateMemberAssetsResultsResponseArray>(
        std::string & businessId, UpdateMemberAssetAccessBody & updateMemberAssetAccessBody)> handler_PATCH_func =
            [](std::string &, UpdateMemberAssetAccessBody &) -> std::pair<int, UpdateMemberAssetsResultsResponseArray>
                { throw BusinessAccessAssetsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, DeleteMemberAccessResultsResponseArray> handler_DELETE(
        std::string & businessId, Business_members_asset_access_delete_request & businessMembersAssetAccessDeleteRequest);

    virtual std::pair<int, UpdateMemberAssetsResultsResponseArray> handler_PATCH(
        std::string & businessId, UpdateMemberAssetAccessBody & updateMemberAssetAccessBody);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBusinessAccessAssetsApiException(const BusinessAccessAssetsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PATCH_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get assets assigned to a partner or assets assigned by a partner
/// </summary>
/// <remarks>
/// Can be used to get the business assets your partner has granted you access to or the business assets you have granted your partner access to. If you specify: - partner_type&#x3D;INTERNAL, you will retrieve your business assets that the partner has access to. - partner_type&#x3D;EXTERNAL, you will retrieve the partner&#39;s business assets that the partner has granted you access to.
/// </remarks>
class  BusinessesBusiness_idPartnersPartner_idAssetsResource: public restbed::Resource
{
public:
    BusinessesBusiness_idPartnersPartner_idAssetsResource(const std::string& context = "/v5");
    virtual ~BusinessesBusiness_idPartnersPartner_idAssetsResource() = default;

    BusinessesBusiness_idPartnersPartner_idAssetsResource(
        const BusinessesBusiness_idPartnersPartner_idAssetsResource& other) = default; // copy constructor
    BusinessesBusiness_idPartnersPartner_idAssetsResource(BusinessesBusiness_idPartnersPartner_idAssetsResource&& other) noexcept = default; // move constructor

    BusinessesBusiness_idPartnersPartner_idAssetsResource& operator=(const BusinessesBusiness_idPartnersPartner_idAssetsResource& other) = default; // copy assignment
    BusinessesBusiness_idPartnersPartner_idAssetsResource& operator=(BusinessesBusiness_idPartnersPartner_idAssetsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Business_partner_asset_access_get_200_response>(
        std::string & businessId, std::string & partnerId, PartnerType & partnerType, std::string & assetType, int32_t & startIndex, int32_t & pageSize, std::string & bookmark)> handler_GET_func =
            [](std::string &, std::string &, PartnerType &, std::string &, int32_t &, int32_t &, std::string &) -> std::pair<int, Business_partner_asset_access_get_200_response>
                { throw BusinessAccessAssetsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Business_partner_asset_access_get_200_response> handler_GET(
        std::string & businessId, std::string & partnerId, PartnerType & partnerType, std::string & assetType, int32_t & startIndex, int32_t & pageSize, std::string & bookmark);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBusinessAccessAssetsApiException(const BusinessAccessAssetsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Delete partner access to asset
/// </summary>
/// <remarks>
/// Terminate multiple partners&#39; access to an asset. If - partner_type&#x3D;INTERNAL: You will terminate a partner&#39;s asset access to your business assets. - partner_type&#x3D;EXTERNAL: You will terminate your own access to your partner&#39;s business assets.
/// </remarks>
class  BusinessesBusiness_idPartnersAssetsResource: public restbed::Resource
{
public:
    BusinessesBusiness_idPartnersAssetsResource(const std::string& context = "/v5");
    virtual ~BusinessesBusiness_idPartnersAssetsResource() = default;

    BusinessesBusiness_idPartnersAssetsResource(
        const BusinessesBusiness_idPartnersAssetsResource& other) = default; // copy constructor
    BusinessesBusiness_idPartnersAssetsResource(BusinessesBusiness_idPartnersAssetsResource&& other) noexcept = default; // move constructor

    BusinessesBusiness_idPartnersAssetsResource& operator=(const BusinessesBusiness_idPartnersAssetsResource& other) = default; // copy assignment
    BusinessesBusiness_idPartnersAssetsResource& operator=(BusinessesBusiness_idPartnersAssetsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, DeletePartnerAssetsResultsResponseArray>(
        std::string & businessId, DeletePartnerAssetAccessBody & deletePartnerAssetAccessBody)> handler_DELETE_func =
            [](std::string &, DeletePartnerAssetAccessBody &) -> std::pair<int, DeletePartnerAssetsResultsResponseArray>
                { throw BusinessAccessAssetsApiException(501, "Not implemented"); };

    std::function<std::pair<int, UpdatePartnerAssetsResultsResponseArray>(
        std::string & businessId, UpdatePartnerAssetAccessBody & updatePartnerAssetAccessBody)> handler_PATCH_func =
            [](std::string &, UpdatePartnerAssetAccessBody &) -> std::pair<int, UpdatePartnerAssetsResultsResponseArray>
                { throw BusinessAccessAssetsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, DeletePartnerAssetsResultsResponseArray> handler_DELETE(
        std::string & businessId, DeletePartnerAssetAccessBody & deletePartnerAssetAccessBody);

    virtual std::pair<int, UpdatePartnerAssetsResultsResponseArray> handler_PATCH(
        std::string & businessId, UpdatePartnerAssetAccessBody & updatePartnerAssetAccessBody);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBusinessAccessAssetsApiException(const BusinessAccessAssetsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PATCH_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace BusinessAccessAssetsApiResources */

using BusinessAccessAssetsApiBusinessesBusiness_idAsset_groupsResource [[deprecated]] = BusinessAccessAssetsApiResources::BusinessesBusiness_idAsset_groupsResource;
using BusinessAccessAssetsApiBusinessesBusiness_idAssetsAsset_idMembersResource [[deprecated]] = BusinessAccessAssetsApiResources::BusinessesBusiness_idAssetsAsset_idMembersResource;
using BusinessAccessAssetsApiBusinessesBusiness_idAssetsAsset_idPartnersResource [[deprecated]] = BusinessAccessAssetsApiResources::BusinessesBusiness_idAssetsAsset_idPartnersResource;
using BusinessAccessAssetsApiBusinessesBusiness_idAssetsResource [[deprecated]] = BusinessAccessAssetsApiResources::BusinessesBusiness_idAssetsResource;
using BusinessAccessAssetsApiBusinessesBusiness_idMembersMember_idAssetsResource [[deprecated]] = BusinessAccessAssetsApiResources::BusinessesBusiness_idMembersMember_idAssetsResource;
using BusinessAccessAssetsApiBusinessesBusiness_idMembersAssetsAccessResource [[deprecated]] = BusinessAccessAssetsApiResources::BusinessesBusiness_idMembersAssetsAccessResource;
using BusinessAccessAssetsApiBusinessesBusiness_idPartnersPartner_idAssetsResource [[deprecated]] = BusinessAccessAssetsApiResources::BusinessesBusiness_idPartnersPartner_idAssetsResource;
using BusinessAccessAssetsApiBusinessesBusiness_idPartnersAssetsResource [[deprecated]] = BusinessAccessAssetsApiResources::BusinessesBusiness_idPartnersAssetsResource;

//
// The restbed service to actually implement the REST server
//
class  BusinessAccessAssetsApi
{
public:
    explicit BusinessAccessAssetsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~BusinessAccessAssetsApi();

    std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idAsset_groupsResource> getBusinessesBusiness_idAsset_groupsResource();
    std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idAssetsAsset_idMembersResource> getBusinessesBusiness_idAssetsAsset_idMembersResource();
    std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idAssetsAsset_idPartnersResource> getBusinessesBusiness_idAssetsAsset_idPartnersResource();
    std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idAssetsResource> getBusinessesBusiness_idAssetsResource();
    std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idMembersMember_idAssetsResource> getBusinessesBusiness_idMembersMember_idAssetsResource();
    std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idMembersAssetsAccessResource> getBusinessesBusiness_idMembersAssetsAccessResource();
    std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idPartnersPartner_idAssetsResource> getBusinessesBusiness_idPartnersPartner_idAssetsResource();
    std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idPartnersAssetsResource> getBusinessesBusiness_idPartnersAssetsResource();

    void setResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idAsset_groupsResource> resource);
    void setResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idAssetsAsset_idMembersResource> resource);
    void setResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idAssetsAsset_idPartnersResource> resource);
    void setResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idAssetsResource> resource);
    void setResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idMembersMember_idAssetsResource> resource);
    void setResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idMembersAssetsAccessResource> resource);
    void setResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idPartnersPartner_idAssetsResource> resource);
    void setResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idPartnersAssetsResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setBusinessAccessAssetsApiBusinessesBusiness_idAsset_groupsResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idAsset_groupsResource> spBusinessAccessAssetsApiBusinessesBusiness_idAsset_groupsResource);
    [[deprecated("use setResource()")]]
    virtual void setBusinessAccessAssetsApiBusinessesBusiness_idAssetsAsset_idMembersResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idAssetsAsset_idMembersResource> spBusinessAccessAssetsApiBusinessesBusiness_idAssetsAsset_idMembersResource);
    [[deprecated("use setResource()")]]
    virtual void setBusinessAccessAssetsApiBusinessesBusiness_idAssetsAsset_idPartnersResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idAssetsAsset_idPartnersResource> spBusinessAccessAssetsApiBusinessesBusiness_idAssetsAsset_idPartnersResource);
    [[deprecated("use setResource()")]]
    virtual void setBusinessAccessAssetsApiBusinessesBusiness_idAssetsResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idAssetsResource> spBusinessAccessAssetsApiBusinessesBusiness_idAssetsResource);
    [[deprecated("use setResource()")]]
    virtual void setBusinessAccessAssetsApiBusinessesBusiness_idMembersMember_idAssetsResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idMembersMember_idAssetsResource> spBusinessAccessAssetsApiBusinessesBusiness_idMembersMember_idAssetsResource);
    [[deprecated("use setResource()")]]
    virtual void setBusinessAccessAssetsApiBusinessesBusiness_idMembersAssetsAccessResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idMembersAssetsAccessResource> spBusinessAccessAssetsApiBusinessesBusiness_idMembersAssetsAccessResource);
    [[deprecated("use setResource()")]]
    virtual void setBusinessAccessAssetsApiBusinessesBusiness_idPartnersPartner_idAssetsResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idPartnersPartner_idAssetsResource> spBusinessAccessAssetsApiBusinessesBusiness_idPartnersPartner_idAssetsResource);
    [[deprecated("use setResource()")]]
    virtual void setBusinessAccessAssetsApiBusinessesBusiness_idPartnersAssetsResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idPartnersAssetsResource> spBusinessAccessAssetsApiBusinessesBusiness_idPartnersAssetsResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idAsset_groupsResource> m_spBusinessesBusiness_idAsset_groupsResource;
    std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idAssetsAsset_idMembersResource> m_spBusinessesBusiness_idAssetsAsset_idMembersResource;
    std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idAssetsAsset_idPartnersResource> m_spBusinessesBusiness_idAssetsAsset_idPartnersResource;
    std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idAssetsResource> m_spBusinessesBusiness_idAssetsResource;
    std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idMembersMember_idAssetsResource> m_spBusinessesBusiness_idMembersMember_idAssetsResource;
    std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idMembersAssetsAccessResource> m_spBusinessesBusiness_idMembersAssetsAccessResource;
    std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idPartnersPartner_idAssetsResource> m_spBusinessesBusiness_idPartnersPartner_idAssetsResource;
    std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idPartnersAssetsResource> m_spBusinessesBusiness_idPartnersAssetsResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* BusinessAccessAssetsApi_H_ */

