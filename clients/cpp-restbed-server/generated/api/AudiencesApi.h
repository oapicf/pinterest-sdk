/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AudiencesApi.h
 *
 * 
 */

#ifndef AudiencesApi_H_
#define AudiencesApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "Audience.h"
#include "AudienceCreateCustomRequest.h"
#include "AudienceCreateRequest.h"
#include "AudienceUpdateRequest.h"
#include "Audiences_list_200_response.h"
#include "Error.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  AudiencesApiException: public std::exception
{
public:
    AudiencesApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace AudiencesApiResources {
/// <summary>
/// Create audience
/// </summary>
/// <remarks>
/// Create an audience you can use in targeting for specific ad groups. Targeting combines customer information with the ways users interact with Pinterest to help you reach specific groups of users; you can include or exclude specific audience_ids when you create an ad group. &lt;p/&gt; For more, see &lt;a class&#x3D;\&quot;reference external\&quot; href&#x3D;\&quot;https://help.pinterest.com/en/business/article/audience-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Audience targeting&lt;/a&gt;.
/// </remarks>
class  Ad_accountsAd_account_idAudiencesResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idAudiencesResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idAudiencesResource() = default;

    Ad_accountsAd_account_idAudiencesResource(
        const Ad_accountsAd_account_idAudiencesResource& other) = default; // copy constructor
    Ad_accountsAd_account_idAudiencesResource(Ad_accountsAd_account_idAudiencesResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idAudiencesResource& operator=(const Ad_accountsAd_account_idAudiencesResource& other) = default; // copy assignment
    Ad_accountsAd_account_idAudiencesResource& operator=(Ad_accountsAd_account_idAudiencesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Audience>(
        std::string & adAccountId, AudienceCreateRequest & audienceCreateRequest)> handler_POST_func =
            [](std::string &, AudienceCreateRequest &) -> std::pair<int, Audience>
                { throw AudiencesApiException(501, "Not implemented"); };

    std::function<std::pair<int, Audiences_list_200_response>(
        std::string & adAccountId, std::string & bookmark, std::string & order, int32_t & pageSize, std::string & ownershipType)> handler_GET_func =
            [](std::string &, std::string &, std::string &, int32_t &, std::string &) -> std::pair<int, Audiences_list_200_response>
                { throw AudiencesApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Audience> handler_POST(
        std::string & adAccountId, AudienceCreateRequest & audienceCreateRequest);

    virtual std::pair<int, Audiences_list_200_response> handler_GET(
        std::string & adAccountId, std::string & bookmark, std::string & order, int32_t & pageSize, std::string & ownershipType);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAudiencesApiException(const AudiencesApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Create custom audience
/// </summary>
/// <remarks>
/// Create a custom audience and find the audiences you want your ads to reach.
/// </remarks>
class  Ad_accountsAd_account_idAudiencesCustomResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idAudiencesCustomResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idAudiencesCustomResource() = default;

    Ad_accountsAd_account_idAudiencesCustomResource(
        const Ad_accountsAd_account_idAudiencesCustomResource& other) = default; // copy constructor
    Ad_accountsAd_account_idAudiencesCustomResource(Ad_accountsAd_account_idAudiencesCustomResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idAudiencesCustomResource& operator=(const Ad_accountsAd_account_idAudiencesCustomResource& other) = default; // copy assignment
    Ad_accountsAd_account_idAudiencesCustomResource& operator=(Ad_accountsAd_account_idAudiencesCustomResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Audience>(
        std::string & adAccountId, AudienceCreateCustomRequest & audienceCreateCustomRequest)> handler_POST_func =
            [](std::string &, AudienceCreateCustomRequest &) -> std::pair<int, Audience>
                { throw AudiencesApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Audience> handler_POST(
        std::string & adAccountId, AudienceCreateCustomRequest & audienceCreateCustomRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAudiencesApiException(const AudiencesApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get audience
/// </summary>
/// <remarks>
/// Get a specific audience given the audience ID.
/// </remarks>
class  Ad_accountsAd_account_idAudiencesAudience_idResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idAudiencesAudience_idResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idAudiencesAudience_idResource() = default;

    Ad_accountsAd_account_idAudiencesAudience_idResource(
        const Ad_accountsAd_account_idAudiencesAudience_idResource& other) = default; // copy constructor
    Ad_accountsAd_account_idAudiencesAudience_idResource(Ad_accountsAd_account_idAudiencesAudience_idResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idAudiencesAudience_idResource& operator=(const Ad_accountsAd_account_idAudiencesAudience_idResource& other) = default; // copy assignment
    Ad_accountsAd_account_idAudiencesAudience_idResource& operator=(Ad_accountsAd_account_idAudiencesAudience_idResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Audience>(
        std::string & adAccountId, std::string & audienceId)> handler_GET_func =
            [](std::string &, std::string &) -> std::pair<int, Audience>
                { throw AudiencesApiException(501, "Not implemented"); };

    std::function<std::pair<int, Audience>(
        std::string & adAccountId, std::string & audienceId, AudienceUpdateRequest & audienceUpdateRequest)> handler_PATCH_func =
            [](std::string &, std::string &, AudienceUpdateRequest &) -> std::pair<int, Audience>
                { throw AudiencesApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Audience> handler_GET(
        std::string & adAccountId, std::string & audienceId);

    virtual std::pair<int, Audience> handler_PATCH(
        std::string & adAccountId, std::string & audienceId, AudienceUpdateRequest & audienceUpdateRequest);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAudiencesApiException(const AudiencesApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PATCH_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace AudiencesApiResources */

using AudiencesApiAd_accountsAd_account_idAudiencesResource [[deprecated]] = AudiencesApiResources::Ad_accountsAd_account_idAudiencesResource;
using AudiencesApiAd_accountsAd_account_idAudiencesCustomResource [[deprecated]] = AudiencesApiResources::Ad_accountsAd_account_idAudiencesCustomResource;
using AudiencesApiAd_accountsAd_account_idAudiencesAudience_idResource [[deprecated]] = AudiencesApiResources::Ad_accountsAd_account_idAudiencesAudience_idResource;

//
// The restbed service to actually implement the REST server
//
class  AudiencesApi
{
public:
    explicit AudiencesApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~AudiencesApi();

    std::shared_ptr<AudiencesApiResources::Ad_accountsAd_account_idAudiencesResource> getAd_accountsAd_account_idAudiencesResource();
    std::shared_ptr<AudiencesApiResources::Ad_accountsAd_account_idAudiencesCustomResource> getAd_accountsAd_account_idAudiencesCustomResource();
    std::shared_ptr<AudiencesApiResources::Ad_accountsAd_account_idAudiencesAudience_idResource> getAd_accountsAd_account_idAudiencesAudience_idResource();

    void setResource(std::shared_ptr<AudiencesApiResources::Ad_accountsAd_account_idAudiencesResource> resource);
    void setResource(std::shared_ptr<AudiencesApiResources::Ad_accountsAd_account_idAudiencesCustomResource> resource);
    void setResource(std::shared_ptr<AudiencesApiResources::Ad_accountsAd_account_idAudiencesAudience_idResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setAudiencesApiAd_accountsAd_account_idAudiencesResource(std::shared_ptr<AudiencesApiResources::Ad_accountsAd_account_idAudiencesResource> spAudiencesApiAd_accountsAd_account_idAudiencesResource);
    [[deprecated("use setResource()")]]
    virtual void setAudiencesApiAd_accountsAd_account_idAudiencesCustomResource(std::shared_ptr<AudiencesApiResources::Ad_accountsAd_account_idAudiencesCustomResource> spAudiencesApiAd_accountsAd_account_idAudiencesCustomResource);
    [[deprecated("use setResource()")]]
    virtual void setAudiencesApiAd_accountsAd_account_idAudiencesAudience_idResource(std::shared_ptr<AudiencesApiResources::Ad_accountsAd_account_idAudiencesAudience_idResource> spAudiencesApiAd_accountsAd_account_idAudiencesAudience_idResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<AudiencesApiResources::Ad_accountsAd_account_idAudiencesResource> m_spAd_accountsAd_account_idAudiencesResource;
    std::shared_ptr<AudiencesApiResources::Ad_accountsAd_account_idAudiencesCustomResource> m_spAd_accountsAd_account_idAudiencesCustomResource;
    std::shared_ptr<AudiencesApiResources::Ad_accountsAd_account_idAudiencesAudience_idResource> m_spAd_accountsAd_account_idAudiencesAudience_idResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* AudiencesApi_H_ */

