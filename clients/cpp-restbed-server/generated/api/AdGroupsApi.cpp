/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "AdGroupsApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

namespace {
[[maybe_unused]]
std::string selectPreferredContentType(const std::vector<std::string>& contentTypes) {
    if (contentTypes.size() == 0) {
        return "application/json";
    }

    if (contentTypes.size() == 1) {
        return contentTypes.at(0);
    }

    static const std::array<std::string, 2> preferredTypes = {"json", "xml"};
    for (const auto& preferredType: preferredTypes) {
        const auto ret = std::find_if(contentTypes.cbegin(),
        contentTypes.cend(),
        [preferredType](const std::string& str) {
            return str.find(preferredType) != std::string::npos;});
        if (ret != contentTypes.cend()) {
            return *ret;
        }
    }

    return contentTypes.at(0);
}
}

AdGroupsApiException::AdGroupsApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int AdGroupsApiException::getStatus() const
{
    return m_status;
}
const char* AdGroupsApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
MODEL_T extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = MODEL_T(pt);
    return model;
}

template<class MODEL_T>
std::vector<MODEL_T> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<MODEL_T>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(MODEL_T(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

namespace AdGroupsApiResources {
Ad_accountsAd_account_idBid_floorResource::Ad_accountsAd_account_idBid_floorResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/ad_accounts/{ad_account_id: .*}/bid_floor");
	this->set_method_handler("POST",
		std::bind(&Ad_accountsAd_account_idBid_floorResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> Ad_accountsAd_account_idBid_floorResource::handleAdGroupsApiException(const AdGroupsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idBid_floorResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idBid_floorResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void Ad_accountsAd_account_idBid_floorResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void Ad_accountsAd_account_idBid_floorResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void Ad_accountsAd_account_idBid_floorResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void Ad_accountsAd_account_idBid_floorResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto bidFloorRequest = extractJsonModelBodyParam<BidFloorRequest>(bodyContent);
    // Getting the path params
    std::string adAccountId = request->get_path_parameter("ad_account_id", "");
    
    int status_code = 500;
    BidFloor resultObject = BidFloor{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(adAccountId, bidFloorRequest);
    }
    catch(const AdGroupsApiException& e) {
        std::tie(status_code, result) = handleAdGroupsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, BidFloor> Ad_accountsAd_account_idBid_floorResource::handler_POST(
        std::string & adAccountId, BidFloorRequest & bidFloorRequest)
{
    return handler_POST_func(adAccountId, bidFloorRequest);
}


std::string Ad_accountsAd_account_idBid_floorResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string Ad_accountsAd_account_idBid_floorResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource::Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/ad_accounts/{ad_account_id: .*}/ad_groups/targeting_analytics");
	this->set_method_handler("GET",
		std::bind(&Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource::handleAdGroupsApiException(const AdGroupsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string adAccountId = request->get_path_parameter("ad_account_id", "");
    // Getting the query params
    std::string adGroupIds_raw = request->get_query_parameter("adGroupIds");
    std::vector<std::string> adGroupIds;
    std::vector<std::string> adGroupIds_temp;
    boost::split(adGroupIds_temp, adGroupIds_raw, boost::is_any_of(","));
    std::copy(adGroupIds_temp.begin(), adGroupIds_temp.end(), std::inserter(adGroupIds, std::next(adGroupIds.begin())));
    std::string startDate = request->get_query_parameter("startDate", "");
    std::string endDate = request->get_query_parameter("endDate", "");
    std::string targetingTypes_raw = request->get_query_parameter("targetingTypes");
    std::vector<AdsAnalyticsTargetingType> targetingTypes;
    std::vector<std::string> targetingTypes_temp;
    boost::split(targetingTypes_temp, targetingTypes_raw, boost::is_any_of(","));
    std::transform(targetingTypes_temp.begin(), targetingTypes_temp.end(), std::back_inserter(targetingTypes), [](const auto& i){ AdsAnalyticsTargetingType ret; ret.fromString(i); return ret;});
    std::string columns_raw = request->get_query_parameter("columns");
    std::vector<std::string> columns;
    std::vector<std::string> columns_temp;
    boost::split(columns_temp, columns_raw, boost::is_any_of(","));
    std::copy(columns_temp.begin(), columns_temp.end(), std::inserter(columns, std::next(columns.begin())));
    int32_t clickWindowDays = request->get_query_parameter("clickWindowDays", 30);
    int32_t engagementWindowDays = request->get_query_parameter("engagementWindowDays", 30);
    int32_t viewWindowDays = request->get_query_parameter("viewWindowDays", 1);
    std::string conversionReportTime = request->get_query_parameter("conversionReportTime", "TIME_OF_AD_ACTION");
    
    int status_code = 500;
    MetricsResponse resultObject = MetricsResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(adAccountId, adGroupIds, startDate, endDate, targetingTypes, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, attributionTypes);
    }
    catch(const AdGroupsApiException& e) {
        std::tie(status_code, result) = handleAdGroupsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, MetricsResponse> Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource::handler_GET(
        std::string & adAccountId, std::vector<std::string> & adGroupIds, std::string & startDate, std::string & endDate, std::vector<AdsAnalyticsTargetingType> & targetingTypes, std::vector<std::string> & columns, Granularity & granularity, int32_t & clickWindowDays, int32_t & engagementWindowDays, int32_t & viewWindowDays, std::string & conversionReportTime, ConversionReportAttributionType & attributionTypes)
{
    return handler_GET_func(adAccountId, adGroupIds, startDate, endDate, targetingTypes, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, attributionTypes);
}


std::string Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
Ad_accountsAd_account_idAd_groupsAnalyticsResource::Ad_accountsAd_account_idAd_groupsAnalyticsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/ad_accounts/{ad_account_id: .*}/ad_groups/analytics");
	this->set_method_handler("GET",
		std::bind(&Ad_accountsAd_account_idAd_groupsAnalyticsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> Ad_accountsAd_account_idAd_groupsAnalyticsResource::handleAdGroupsApiException(const AdGroupsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idAd_groupsAnalyticsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idAd_groupsAnalyticsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void Ad_accountsAd_account_idAd_groupsAnalyticsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void Ad_accountsAd_account_idAd_groupsAnalyticsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void Ad_accountsAd_account_idAd_groupsAnalyticsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void Ad_accountsAd_account_idAd_groupsAnalyticsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string adAccountId = request->get_path_parameter("ad_account_id", "");
    // Getting the query params
    std::string startDate = request->get_query_parameter("startDate", "");
    std::string endDate = request->get_query_parameter("endDate", "");
    std::string adGroupIds_raw = request->get_query_parameter("adGroupIds");
    std::vector<std::string> adGroupIds;
    std::vector<std::string> adGroupIds_temp;
    boost::split(adGroupIds_temp, adGroupIds_raw, boost::is_any_of(","));
    std::copy(adGroupIds_temp.begin(), adGroupIds_temp.end(), std::inserter(adGroupIds, std::next(adGroupIds.begin())));
    std::string columns_raw = request->get_query_parameter("columns");
    std::vector<std::string> columns;
    std::vector<std::string> columns_temp;
    boost::split(columns_temp, columns_raw, boost::is_any_of(","));
    std::copy(columns_temp.begin(), columns_temp.end(), std::inserter(columns, std::next(columns.begin())));
    int32_t clickWindowDays = request->get_query_parameter("clickWindowDays", 30);
    int32_t engagementWindowDays = request->get_query_parameter("engagementWindowDays", 30);
    int32_t viewWindowDays = request->get_query_parameter("viewWindowDays", 1);
    std::string conversionReportTime = request->get_query_parameter("conversionReportTime", "TIME_OF_AD_ACTION");
    
    int status_code = 500;
    std::vector<AdGroupsAnalyticsResponse_inner> resultObject = std::vector<AdGroupsAnalyticsResponse_inner>();
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(adAccountId, startDate, endDate, adGroupIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime);
    }
    catch(const AdGroupsApiException& e) {
        std::tie(status_code, result) = handleAdGroupsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid ad account group analytics parameters.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, std::vector<AdGroupsAnalyticsResponse_inner>> Ad_accountsAd_account_idAd_groupsAnalyticsResource::handler_GET(
        std::string & adAccountId, std::string & startDate, std::string & endDate, std::vector<std::string> & adGroupIds, std::vector<std::string> & columns, Granularity & granularity, int32_t & clickWindowDays, int32_t & engagementWindowDays, int32_t & viewWindowDays, std::string & conversionReportTime)
{
    return handler_GET_func(adAccountId, startDate, endDate, adGroupIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime);
}


std::string Ad_accountsAd_account_idAd_groupsAnalyticsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string Ad_accountsAd_account_idAd_groupsAnalyticsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
Ad_accountsAd_account_idAd_groupsAudience_sizingResource::Ad_accountsAd_account_idAd_groupsAudience_sizingResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/ad_accounts/{ad_account_id: .*}/ad_groups/audience_sizing");
	this->set_method_handler("POST",
		std::bind(&Ad_accountsAd_account_idAd_groupsAudience_sizingResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> Ad_accountsAd_account_idAd_groupsAudience_sizingResource::handleAdGroupsApiException(const AdGroupsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idAd_groupsAudience_sizingResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idAd_groupsAudience_sizingResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void Ad_accountsAd_account_idAd_groupsAudience_sizingResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void Ad_accountsAd_account_idAd_groupsAudience_sizingResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void Ad_accountsAd_account_idAd_groupsAudience_sizingResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void Ad_accountsAd_account_idAd_groupsAudience_sizingResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto adGroupAudienceSizingRequest = extractJsonModelBodyParam<AdGroupAudienceSizingRequest>(bodyContent);
    // Getting the path params
    std::string adAccountId = request->get_path_parameter("ad_account_id", "");
    
    int status_code = 500;
    AdGroupAudienceSizingResponse resultObject = AdGroupAudienceSizingResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(adAccountId, adGroupAudienceSizingRequest);
    }
    catch(const AdGroupsApiException& e) {
        std::tie(status_code, result) = handleAdGroupsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid ad group audience sizing parameters.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "No access to requested audience list or product group.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, AdGroupAudienceSizingResponse> Ad_accountsAd_account_idAd_groupsAudience_sizingResource::handler_POST(
        std::string & adAccountId, AdGroupAudienceSizingRequest & adGroupAudienceSizingRequest)
{
    return handler_POST_func(adAccountId, adGroupAudienceSizingRequest);
}


std::string Ad_accountsAd_account_idAd_groupsAudience_sizingResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string Ad_accountsAd_account_idAd_groupsAudience_sizingResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
Ad_accountsAd_account_idAd_groupsResource::Ad_accountsAd_account_idAd_groupsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/ad_accounts/{ad_account_id: .*}/ad_groups");
	this->set_method_handler("POST",
		std::bind(&Ad_accountsAd_account_idAd_groupsResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&Ad_accountsAd_account_idAd_groupsResource::handler_GET_internal, this,
			std::placeholders::_1));
	this->set_method_handler("PATCH",
		std::bind(&Ad_accountsAd_account_idAd_groupsResource::handler_PATCH_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> Ad_accountsAd_account_idAd_groupsResource::handleAdGroupsApiException(const AdGroupsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idAd_groupsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idAd_groupsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void Ad_accountsAd_account_idAd_groupsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void Ad_accountsAd_account_idAd_groupsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void Ad_accountsAd_account_idAd_groupsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void Ad_accountsAd_account_idAd_groupsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto adGroupCreateRequest = extractJsonArrayBodyParam<AdGroupCreateRequest>(bodyContent);
    // Getting the path params
    std::string adAccountId = request->get_path_parameter("ad_account_id", "");
    
    int status_code = 500;
    AdGroupArrayResponse resultObject = AdGroupArrayResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(adAccountId, adGroupCreateRequest);
    }
    catch(const AdGroupsApiException& e) {
        std::tie(status_code, result) = handleAdGroupsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void Ad_accountsAd_account_idAd_groupsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // Getting the path params
    std::string adAccountId = request->get_path_parameter("ad_account_id", "");
    // Getting the query params
    std::string campaignIds_raw = request->get_query_parameter("campaignIds");
    std::vector<std::string> campaignIds;
    std::vector<std::string> campaignIds_temp;
    boost::split(campaignIds_temp, campaignIds_raw, boost::is_any_of(","));
    std::copy(campaignIds_temp.begin(), campaignIds_temp.end(), std::inserter(campaignIds, std::next(campaignIds.begin())));
    std::string adGroupIds_raw = request->get_query_parameter("adGroupIds");
    std::vector<std::string> adGroupIds;
    std::vector<std::string> adGroupIds_temp;
    boost::split(adGroupIds_temp, adGroupIds_raw, boost::is_any_of(","));
    std::copy(adGroupIds_temp.begin(), adGroupIds_temp.end(), std::inserter(adGroupIds, std::next(adGroupIds.begin())));
    std::string entityStatuses_raw = request->get_query_parameter("entityStatuses");
    std::vector<std::string> entityStatuses;
    std::vector<std::string> entityStatuses_temp;
    boost::split(entityStatuses_temp, entityStatuses_raw, boost::is_any_of(","));
    std::copy(entityStatuses_temp.begin(), entityStatuses_temp.end(), std::inserter(entityStatuses, std::next(entityStatuses.begin())));
    int32_t pageSize = request->get_query_parameter("pageSize", 25);
    std::string order = request->get_query_parameter("order", "");
    std::string bookmark = request->get_query_parameter("bookmark", "");
    bool translateInterestsToNames = request->get_query_parameter("translateInterestsToNames", false);
    
    int status_code = 500;
    Ad_groups_list_200_response resultObject = Ad_groups_list_200_response{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(adAccountId, campaignIds, adGroupIds, entityStatuses, pageSize, order, bookmark, translateInterestsToNames);
    }
    catch(const AdGroupsApiException& e) {
        std::tie(status_code, result) = handleAdGroupsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid ad account group parameters.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}
// x-extension
void Ad_accountsAd_account_idAd_groupsResource::handler_PATCH_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto adGroupUpdateRequest = extractJsonArrayBodyParam<AdGroupUpdateRequest>(bodyContent);
    // Getting the path params
    std::string adAccountId = request->get_path_parameter("ad_account_id", "");
    
    int status_code = 500;
    AdGroupArrayResponse resultObject = AdGroupArrayResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_PATCH(adAccountId, adGroupUpdateRequest);
    }
    catch(const AdGroupsApiException& e) {
        std::tie(status_code, result) = handleAdGroupsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, AdGroupArrayResponse> Ad_accountsAd_account_idAd_groupsResource::handler_POST(
        std::string & adAccountId, std::vector<AdGroupCreateRequest> & adGroupCreateRequest)
{
    return handler_POST_func(adAccountId, adGroupCreateRequest);
}

std::pair<int, Ad_groups_list_200_response> Ad_accountsAd_account_idAd_groupsResource::handler_GET(
    std::string & adAccountId, std::vector<std::string> & campaignIds, std::vector<std::string> & adGroupIds, std::vector<std::string> & entityStatuses, int32_t & pageSize, std::string & order, std::string & bookmark, bool & translateInterestsToNames)
{
    return handler_GET_func(adAccountId, campaignIds, adGroupIds, entityStatuses, pageSize, order, bookmark, translateInterestsToNames);
}
std::pair<int, AdGroupArrayResponse> Ad_accountsAd_account_idAd_groupsResource::handler_PATCH(
    std::string & adAccountId, std::vector<AdGroupUpdateRequest> & adGroupUpdateRequest)
{
    return handler_PATCH_func(adAccountId, adGroupUpdateRequest);
}

std::string Ad_accountsAd_account_idAd_groupsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string Ad_accountsAd_account_idAd_groupsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
Ad_accountsAd_account_idAd_groupsAd_group_idResource::Ad_accountsAd_account_idAd_groupsAd_group_idResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/ad_accounts/{ad_account_id: .*}/ad_groups/{ad_group_id: .*}");
	this->set_method_handler("GET",
		std::bind(&Ad_accountsAd_account_idAd_groupsAd_group_idResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> Ad_accountsAd_account_idAd_groupsAd_group_idResource::handleAdGroupsApiException(const AdGroupsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idAd_groupsAd_group_idResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idAd_groupsAd_group_idResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void Ad_accountsAd_account_idAd_groupsAd_group_idResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void Ad_accountsAd_account_idAd_groupsAd_group_idResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void Ad_accountsAd_account_idAd_groupsAd_group_idResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void Ad_accountsAd_account_idAd_groupsAd_group_idResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string adAccountId = request->get_path_parameter("ad_account_id", "");
    std::string adGroupId = request->get_path_parameter("ad_group_id", "");
    
    int status_code = 500;
    AdGroupResponse resultObject = AdGroupResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(adAccountId, adGroupId);
    }
    catch(const AdGroupsApiException& e) {
        std::tie(status_code, result) = handleAdGroupsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, AdGroupResponse> Ad_accountsAd_account_idAd_groupsAd_group_idResource::handler_GET(
        std::string & adAccountId, std::string & adGroupId)
{
    return handler_GET_func(adAccountId, adGroupId);
}


std::string Ad_accountsAd_account_idAd_groupsAd_group_idResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string Ad_accountsAd_account_idAd_groupsAd_group_idResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}

} /* namespace AdGroupsApiResources */

AdGroupsApi::AdGroupsApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

AdGroupsApi::~AdGroupsApi() {}

std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idBid_floorResource> AdGroupsApi::getAd_accountsAd_account_idBid_floorResource() {
    if (!m_spAd_accountsAd_account_idBid_floorResource) {
        setResource(std::make_shared<AdGroupsApiResources::Ad_accountsAd_account_idBid_floorResource>());
    }
    return m_spAd_accountsAd_account_idBid_floorResource;
}
std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource> AdGroupsApi::getAd_accountsAd_account_idAd_groupsTargeting_analyticsResource() {
    if (!m_spAd_accountsAd_account_idAd_groupsTargeting_analyticsResource) {
        setResource(std::make_shared<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource>());
    }
    return m_spAd_accountsAd_account_idAd_groupsTargeting_analyticsResource;
}
std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsAnalyticsResource> AdGroupsApi::getAd_accountsAd_account_idAd_groupsAnalyticsResource() {
    if (!m_spAd_accountsAd_account_idAd_groupsAnalyticsResource) {
        setResource(std::make_shared<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsAnalyticsResource>());
    }
    return m_spAd_accountsAd_account_idAd_groupsAnalyticsResource;
}
std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsAudience_sizingResource> AdGroupsApi::getAd_accountsAd_account_idAd_groupsAudience_sizingResource() {
    if (!m_spAd_accountsAd_account_idAd_groupsAudience_sizingResource) {
        setResource(std::make_shared<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsAudience_sizingResource>());
    }
    return m_spAd_accountsAd_account_idAd_groupsAudience_sizingResource;
}
std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsResource> AdGroupsApi::getAd_accountsAd_account_idAd_groupsResource() {
    if (!m_spAd_accountsAd_account_idAd_groupsResource) {
        setResource(std::make_shared<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsResource>());
    }
    return m_spAd_accountsAd_account_idAd_groupsResource;
}
std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsAd_group_idResource> AdGroupsApi::getAd_accountsAd_account_idAd_groupsAd_group_idResource() {
    if (!m_spAd_accountsAd_account_idAd_groupsAd_group_idResource) {
        setResource(std::make_shared<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsAd_group_idResource>());
    }
    return m_spAd_accountsAd_account_idAd_groupsAd_group_idResource;
}
void AdGroupsApi::setResource(std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idBid_floorResource> resource) {
    m_spAd_accountsAd_account_idBid_floorResource = resource;
    m_service->publish(m_spAd_accountsAd_account_idBid_floorResource);
}
void AdGroupsApi::setResource(std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource> resource) {
    m_spAd_accountsAd_account_idAd_groupsTargeting_analyticsResource = resource;
    m_service->publish(m_spAd_accountsAd_account_idAd_groupsTargeting_analyticsResource);
}
void AdGroupsApi::setResource(std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsAnalyticsResource> resource) {
    m_spAd_accountsAd_account_idAd_groupsAnalyticsResource = resource;
    m_service->publish(m_spAd_accountsAd_account_idAd_groupsAnalyticsResource);
}
void AdGroupsApi::setResource(std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsAudience_sizingResource> resource) {
    m_spAd_accountsAd_account_idAd_groupsAudience_sizingResource = resource;
    m_service->publish(m_spAd_accountsAd_account_idAd_groupsAudience_sizingResource);
}
void AdGroupsApi::setResource(std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsResource> resource) {
    m_spAd_accountsAd_account_idAd_groupsResource = resource;
    m_service->publish(m_spAd_accountsAd_account_idAd_groupsResource);
}
void AdGroupsApi::setResource(std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsAd_group_idResource> resource) {
    m_spAd_accountsAd_account_idAd_groupsAd_group_idResource = resource;
    m_service->publish(m_spAd_accountsAd_account_idAd_groupsAd_group_idResource);
}
void AdGroupsApi::setAdGroupsApiAd_accountsAd_account_idBid_floorResource(std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idBid_floorResource> spAd_accountsAd_account_idBid_floorResource) {
    m_spAd_accountsAd_account_idBid_floorResource = spAd_accountsAd_account_idBid_floorResource;
    m_service->publish(m_spAd_accountsAd_account_idBid_floorResource);
}
void AdGroupsApi::setAdGroupsApiAd_accountsAd_account_idAd_groupsTargeting_analyticsResource(std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource> spAd_accountsAd_account_idAd_groupsTargeting_analyticsResource) {
    m_spAd_accountsAd_account_idAd_groupsTargeting_analyticsResource = spAd_accountsAd_account_idAd_groupsTargeting_analyticsResource;
    m_service->publish(m_spAd_accountsAd_account_idAd_groupsTargeting_analyticsResource);
}
void AdGroupsApi::setAdGroupsApiAd_accountsAd_account_idAd_groupsAnalyticsResource(std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsAnalyticsResource> spAd_accountsAd_account_idAd_groupsAnalyticsResource) {
    m_spAd_accountsAd_account_idAd_groupsAnalyticsResource = spAd_accountsAd_account_idAd_groupsAnalyticsResource;
    m_service->publish(m_spAd_accountsAd_account_idAd_groupsAnalyticsResource);
}
void AdGroupsApi::setAdGroupsApiAd_accountsAd_account_idAd_groupsAudience_sizingResource(std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsAudience_sizingResource> spAd_accountsAd_account_idAd_groupsAudience_sizingResource) {
    m_spAd_accountsAd_account_idAd_groupsAudience_sizingResource = spAd_accountsAd_account_idAd_groupsAudience_sizingResource;
    m_service->publish(m_spAd_accountsAd_account_idAd_groupsAudience_sizingResource);
}
void AdGroupsApi::setAdGroupsApiAd_accountsAd_account_idAd_groupsResource(std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsResource> spAd_accountsAd_account_idAd_groupsResource) {
    m_spAd_accountsAd_account_idAd_groupsResource = spAd_accountsAd_account_idAd_groupsResource;
    m_service->publish(m_spAd_accountsAd_account_idAd_groupsResource);
}
void AdGroupsApi::setAdGroupsApiAd_accountsAd_account_idAd_groupsAd_group_idResource(std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsAd_group_idResource> spAd_accountsAd_account_idAd_groupsAd_group_idResource) {
    m_spAd_accountsAd_account_idAd_groupsAd_group_idResource = spAd_accountsAd_account_idAd_groupsAd_group_idResource;
    m_service->publish(m_spAd_accountsAd_account_idAd_groupsAd_group_idResource);
}


void AdGroupsApi::publishDefaultResources() {
    if (!m_spAd_accountsAd_account_idBid_floorResource) {
        setResource(std::make_shared<AdGroupsApiResources::Ad_accountsAd_account_idBid_floorResource>());
    }
    if (!m_spAd_accountsAd_account_idAd_groupsTargeting_analyticsResource) {
        setResource(std::make_shared<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource>());
    }
    if (!m_spAd_accountsAd_account_idAd_groupsAnalyticsResource) {
        setResource(std::make_shared<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsAnalyticsResource>());
    }
    if (!m_spAd_accountsAd_account_idAd_groupsAudience_sizingResource) {
        setResource(std::make_shared<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsAudience_sizingResource>());
    }
    if (!m_spAd_accountsAd_account_idAd_groupsResource) {
        setResource(std::make_shared<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsResource>());
    }
    if (!m_spAd_accountsAd_account_idAd_groupsAd_group_idResource) {
        setResource(std::make_shared<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsAd_group_idResource>());
    }
}

std::shared_ptr<restbed::Service> AdGroupsApi::service() {
    return m_service;
}


}
}
}
}

