/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OauthApi.h
 *
 * 
 */

#ifndef OauthApi_H_
#define OauthApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "Error.h"
#include "OauthAccessTokenResponse.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  OauthApiException: public std::exception
{
public:
    OauthApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace OauthApiResources {
/// <summary>
/// Generate OAuth access token
/// </summary>
/// <remarks>
/// Generate an OAuth access token by using an authorization code or a refresh token.  IMPORTANT: You need to start the OAuth flow via www.pinterest.com/oauth before calling this endpoint (or have an existing refresh token).  See &lt;a href&#x3D;&#39;/docs/getting-started/authentication-and-scopes/&#39;&gt;Authentication&lt;/a&gt; for more.  &lt;strong&gt;Parameter &lt;i&gt;refresh_on&lt;/i&gt; and its corresponding response type &lt;i&gt;everlasting_refresh&lt;/i&gt; are now available to all apps! Later this year, continuous refresh will become the default behavior (ie you will no longer need to send this parameter). &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  &lt;strong&gt;Grant type &lt;i&gt;client_credentials&lt;/i&gt; and its corresponding response type are not fully available. You will likely get a default error if you attempt to use this grant_type.&lt;/strong&gt;
/// </remarks>
class  OauthTokenResource: public restbed::Resource
{
public:
    OauthTokenResource(const std::string& context = "/v5");
    virtual ~OauthTokenResource() = default;

    OauthTokenResource(
        const OauthTokenResource& other) = default; // copy constructor
    OauthTokenResource(OauthTokenResource&& other) noexcept = default; // move constructor

    OauthTokenResource& operator=(const OauthTokenResource& other) = default; // copy assignment
    OauthTokenResource& operator=(OauthTokenResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, OauthAccessTokenResponse>(
        std::string & grantType)> handler_POST_func =
            [](std::string &) -> std::pair<int, OauthAccessTokenResponse>
                { throw OauthApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, OauthAccessTokenResponse> handler_POST(
        std::string & grantType);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleOauthApiException(const OauthApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace OauthApiResources */

using OauthApiOauthTokenResource [[deprecated]] = OauthApiResources::OauthTokenResource;

//
// The restbed service to actually implement the REST server
//
class  OauthApi
{
public:
    explicit OauthApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~OauthApi();

    std::shared_ptr<OauthApiResources::OauthTokenResource> getOauthTokenResource();

    void setResource(std::shared_ptr<OauthApiResources::OauthTokenResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setOauthApiOauthTokenResource(std::shared_ptr<OauthApiResources::OauthTokenResource> spOauthApiOauthTokenResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<OauthApiResources::OauthTokenResource> m_spOauthTokenResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* OauthApi_H_ */

