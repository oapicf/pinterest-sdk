/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SearchApi.h
 *
 * 
 */

#ifndef SearchApi_H_
#define SearchApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "Error.h"
#include "Pins_list_200_response.h"
#include "Search_partner_pins_200_response.h"
#include "Search_user_boards_get_200_response.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  SearchApiException: public std::exception
{
public:
    SearchApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace SearchApiResources {
/// <summary>
/// Search pins by a given search term
/// </summary>
/// <remarks>
/// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get the top 10 Pins by a given search term.
/// </remarks>
class  SearchPartnerPinsResource: public restbed::Resource
{
public:
    SearchPartnerPinsResource(const std::string& context = "/v5");
    virtual ~SearchPartnerPinsResource() = default;

    SearchPartnerPinsResource(
        const SearchPartnerPinsResource& other) = default; // copy constructor
    SearchPartnerPinsResource(SearchPartnerPinsResource&& other) noexcept = default; // move constructor

    SearchPartnerPinsResource& operator=(const SearchPartnerPinsResource& other) = default; // copy assignment
    SearchPartnerPinsResource& operator=(SearchPartnerPinsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Search_partner_pins_200_response>(
        std::string & term, std::string & countryCode, std::string & bookmark, std::string & locale, int32_t & limit)> handler_GET_func =
            [](std::string &, std::string &, std::string &, std::string &, int32_t &) -> std::pair<int, Search_partner_pins_200_response>
                { throw SearchApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Search_partner_pins_200_response> handler_GET(
        std::string & term, std::string & countryCode, std::string & bookmark, std::string & locale, int32_t & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleSearchApiException(const SearchApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Search user&#39;s boards
/// </summary>
/// <remarks>
/// Search for boards for the \&quot;operation user_account\&quot;. This includes boards of all board types. - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/getting-started/using-business-access/&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
/// </remarks>
class  SearchBoardsResource: public restbed::Resource
{
public:
    SearchBoardsResource(const std::string& context = "/v5");
    virtual ~SearchBoardsResource() = default;

    SearchBoardsResource(
        const SearchBoardsResource& other) = default; // copy constructor
    SearchBoardsResource(SearchBoardsResource&& other) noexcept = default; // move constructor

    SearchBoardsResource& operator=(const SearchBoardsResource& other) = default; // copy assignment
    SearchBoardsResource& operator=(SearchBoardsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Search_user_boards_get_200_response>(
        std::string & adAccountId, std::string & bookmark, int32_t & pageSize, std::string & query)> handler_GET_func =
            [](std::string &, std::string &, int32_t &, std::string &) -> std::pair<int, Search_user_boards_get_200_response>
                { throw SearchApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Search_user_boards_get_200_response> handler_GET(
        std::string & adAccountId, std::string & bookmark, int32_t & pageSize, std::string & query);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleSearchApiException(const SearchApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Search user&#39;s Pins
/// </summary>
/// <remarks>
/// Search for pins for the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/getting-started/using-business-access/&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
/// </remarks>
class  SearchPinsResource: public restbed::Resource
{
public:
    SearchPinsResource(const std::string& context = "/v5");
    virtual ~SearchPinsResource() = default;

    SearchPinsResource(
        const SearchPinsResource& other) = default; // copy constructor
    SearchPinsResource(SearchPinsResource&& other) noexcept = default; // move constructor

    SearchPinsResource& operator=(const SearchPinsResource& other) = default; // copy assignment
    SearchPinsResource& operator=(SearchPinsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Pins_list_200_response>(
        std::string & query, std::string & adAccountId, std::string & bookmark)> handler_GET_func =
            [](std::string &, std::string &, std::string &) -> std::pair<int, Pins_list_200_response>
                { throw SearchApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Pins_list_200_response> handler_GET(
        std::string & query, std::string & adAccountId, std::string & bookmark);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleSearchApiException(const SearchApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace SearchApiResources */

using SearchApiSearchPartnerPinsResource [[deprecated]] = SearchApiResources::SearchPartnerPinsResource;
using SearchApiSearchBoardsResource [[deprecated]] = SearchApiResources::SearchBoardsResource;
using SearchApiSearchPinsResource [[deprecated]] = SearchApiResources::SearchPinsResource;

//
// The restbed service to actually implement the REST server
//
class  SearchApi
{
public:
    explicit SearchApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~SearchApi();

    std::shared_ptr<SearchApiResources::SearchPartnerPinsResource> getSearchPartnerPinsResource();
    std::shared_ptr<SearchApiResources::SearchBoardsResource> getSearchBoardsResource();
    std::shared_ptr<SearchApiResources::SearchPinsResource> getSearchPinsResource();

    void setResource(std::shared_ptr<SearchApiResources::SearchPartnerPinsResource> resource);
    void setResource(std::shared_ptr<SearchApiResources::SearchBoardsResource> resource);
    void setResource(std::shared_ptr<SearchApiResources::SearchPinsResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setSearchApiSearchPartnerPinsResource(std::shared_ptr<SearchApiResources::SearchPartnerPinsResource> spSearchApiSearchPartnerPinsResource);
    [[deprecated("use setResource()")]]
    virtual void setSearchApiSearchBoardsResource(std::shared_ptr<SearchApiResources::SearchBoardsResource> spSearchApiSearchBoardsResource);
    [[deprecated("use setResource()")]]
    virtual void setSearchApiSearchPinsResource(std::shared_ptr<SearchApiResources::SearchPinsResource> spSearchApiSearchPinsResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<SearchApiResources::SearchPartnerPinsResource> m_spSearchPartnerPinsResource;
    std::shared_ptr<SearchApiResources::SearchBoardsResource> m_spSearchBoardsResource;
    std::shared_ptr<SearchApiResources::SearchPinsResource> m_spSearchPinsResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* SearchApi_H_ */

