/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BillingApi.h
 *
 * 
 */

#ifndef BillingApi_H_
#define BillingApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "AdsCreditRedeemRequest.h"
#include "AdsCreditRedeemResponse.h"
#include "Ads_credits_discounts_get_200_response.h"
#include "Billing_profiles_get_200_response.h"
#include "Error.h"
#include "SSIOAccountResponse.h"
#include "SSIOCreateInsertionOrderRequest.h"
#include "SSIOCreateInsertionOrderResponse.h"
#include "SSIOEditInsertionOrderRequest.h"
#include "SSIOEditInsertionOrderResponse.h"
#include "SSIOInsertionOrderStatusResponse.h"
#include "Ssio_insertion_orders_status_get_by_ad_account_200_response.h"
#include "Ssio_order_lines_get_by_ad_account_200_response.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  BillingApiException: public std::exception
{
public:
    BillingApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace BillingApiResources {
/// <summary>
/// Redeem ad credits
/// </summary>
/// <remarks>
/// Redeem ads credit on behalf of the ad account id and apply it towards billing.  &lt;strong&gt;This endpoint might not be available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;
/// </remarks>
class  Ad_accountsAd_account_idAds_creditRedeemResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idAds_creditRedeemResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idAds_creditRedeemResource() = default;

    Ad_accountsAd_account_idAds_creditRedeemResource(
        const Ad_accountsAd_account_idAds_creditRedeemResource& other) = default; // copy constructor
    Ad_accountsAd_account_idAds_creditRedeemResource(Ad_accountsAd_account_idAds_creditRedeemResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idAds_creditRedeemResource& operator=(const Ad_accountsAd_account_idAds_creditRedeemResource& other) = default; // copy assignment
    Ad_accountsAd_account_idAds_creditRedeemResource& operator=(Ad_accountsAd_account_idAds_creditRedeemResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, AdsCreditRedeemResponse>(
        std::string & adAccountId, AdsCreditRedeemRequest & adsCreditRedeemRequest)> handler_POST_func =
            [](std::string &, AdsCreditRedeemRequest &) -> std::pair<int, AdsCreditRedeemResponse>
                { throw BillingApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, AdsCreditRedeemResponse> handler_POST(
        std::string & adAccountId, AdsCreditRedeemRequest & adsCreditRedeemRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBillingApiException(const BillingApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get ads credit discounts
/// </summary>
/// <remarks>
/// Returns the list of discounts applied to the account.  &lt;strong&gt;This endpoint might not be available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;
/// </remarks>
class  Ad_accountsAd_account_idAds_creditDiscountsResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idAds_creditDiscountsResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idAds_creditDiscountsResource() = default;

    Ad_accountsAd_account_idAds_creditDiscountsResource(
        const Ad_accountsAd_account_idAds_creditDiscountsResource& other) = default; // copy constructor
    Ad_accountsAd_account_idAds_creditDiscountsResource(Ad_accountsAd_account_idAds_creditDiscountsResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idAds_creditDiscountsResource& operator=(const Ad_accountsAd_account_idAds_creditDiscountsResource& other) = default; // copy assignment
    Ad_accountsAd_account_idAds_creditDiscountsResource& operator=(Ad_accountsAd_account_idAds_creditDiscountsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Ads_credits_discounts_get_200_response>(
        std::string & adAccountId, std::string & bookmark, int32_t & pageSize)> handler_GET_func =
            [](std::string &, std::string &, int32_t &) -> std::pair<int, Ads_credits_discounts_get_200_response>
                { throw BillingApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Ads_credits_discounts_get_200_response> handler_GET(
        std::string & adAccountId, std::string & bookmark, int32_t & pageSize);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBillingApiException(const BillingApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get billing profiles
/// </summary>
/// <remarks>
/// Get billing profiles in the advertiser account.  &lt;strong&gt;This endpoint might not be available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;
/// </remarks>
class  Ad_accountsAd_account_idBilling_profilesResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idBilling_profilesResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idBilling_profilesResource() = default;

    Ad_accountsAd_account_idBilling_profilesResource(
        const Ad_accountsAd_account_idBilling_profilesResource& other) = default; // copy constructor
    Ad_accountsAd_account_idBilling_profilesResource(Ad_accountsAd_account_idBilling_profilesResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idBilling_profilesResource& operator=(const Ad_accountsAd_account_idBilling_profilesResource& other) = default; // copy assignment
    Ad_accountsAd_account_idBilling_profilesResource& operator=(Ad_accountsAd_account_idBilling_profilesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Billing_profiles_get_200_response>(
        std::string & adAccountId, bool & isActive, std::string & bookmark, int32_t & pageSize)> handler_GET_func =
            [](std::string &, bool &, std::string &, int32_t &) -> std::pair<int, Billing_profiles_get_200_response>
                { throw BillingApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Billing_profiles_get_200_response> handler_GET(
        std::string & adAccountId, bool & isActive, std::string & bookmark, int32_t & pageSize);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBillingApiException(const BillingApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get Salesforce account details including bill-to information.
/// </summary>
/// <remarks>
/// Get Salesforce account details including bill-to information to be used in insertion orders process for &lt;code&gt;ad_account_id&lt;/code&gt;. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Finance, Campaign.
/// </remarks>
class  Ad_accountsAd_account_idSsioAccountsResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idSsioAccountsResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idSsioAccountsResource() = default;

    Ad_accountsAd_account_idSsioAccountsResource(
        const Ad_accountsAd_account_idSsioAccountsResource& other) = default; // copy constructor
    Ad_accountsAd_account_idSsioAccountsResource(Ad_accountsAd_account_idSsioAccountsResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idSsioAccountsResource& operator=(const Ad_accountsAd_account_idSsioAccountsResource& other) = default; // copy assignment
    Ad_accountsAd_account_idSsioAccountsResource& operator=(Ad_accountsAd_account_idSsioAccountsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, SSIOAccountResponse>(
        std::string & adAccountId)> handler_GET_func =
            [](std::string &) -> std::pair<int, SSIOAccountResponse>
                { throw BillingApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, SSIOAccountResponse> handler_GET(
        std::string & adAccountId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBillingApiException(const BillingApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Create insertion order through SSIO.
/// </summary>
/// <remarks>
/// Create insertion order through SSIO for &lt;code&gt;ad_account_id&lt;/code&gt;. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Finance, Campaign.
/// </remarks>
class  Ad_accountsAd_account_idSsioInsertion_ordersResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idSsioInsertion_ordersResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idSsioInsertion_ordersResource() = default;

    Ad_accountsAd_account_idSsioInsertion_ordersResource(
        const Ad_accountsAd_account_idSsioInsertion_ordersResource& other) = default; // copy constructor
    Ad_accountsAd_account_idSsioInsertion_ordersResource(Ad_accountsAd_account_idSsioInsertion_ordersResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idSsioInsertion_ordersResource& operator=(const Ad_accountsAd_account_idSsioInsertion_ordersResource& other) = default; // copy assignment
    Ad_accountsAd_account_idSsioInsertion_ordersResource& operator=(Ad_accountsAd_account_idSsioInsertion_ordersResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, SSIOCreateInsertionOrderResponse>(
        std::string & adAccountId, SSIOCreateInsertionOrderRequest & sSIOCreateInsertionOrderRequest)> handler_POST_func =
            [](std::string &, SSIOCreateInsertionOrderRequest &) -> std::pair<int, SSIOCreateInsertionOrderResponse>
                { throw BillingApiException(501, "Not implemented"); };

    std::function<std::pair<int, SSIOEditInsertionOrderResponse>(
        std::string & adAccountId, SSIOEditInsertionOrderRequest & sSIOEditInsertionOrderRequest)> handler_PATCH_func =
            [](std::string &, SSIOEditInsertionOrderRequest &) -> std::pair<int, SSIOEditInsertionOrderResponse>
                { throw BillingApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, SSIOCreateInsertionOrderResponse> handler_POST(
        std::string & adAccountId, SSIOCreateInsertionOrderRequest & sSIOCreateInsertionOrderRequest);

    virtual std::pair<int, SSIOEditInsertionOrderResponse> handler_PATCH(
        std::string & adAccountId, SSIOEditInsertionOrderRequest & sSIOEditInsertionOrderRequest);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBillingApiException(const BillingApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PATCH_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get insertion order status by ad account id.
/// </summary>
/// <remarks>
/// Get insertion order status for account id &lt;code&gt;ad_account_id&lt;/code&gt;. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Finance, Campaign.
/// </remarks>
class  Ad_accountsAd_account_idSsioInsertion_ordersStatusResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idSsioInsertion_ordersStatusResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idSsioInsertion_ordersStatusResource() = default;

    Ad_accountsAd_account_idSsioInsertion_ordersStatusResource(
        const Ad_accountsAd_account_idSsioInsertion_ordersStatusResource& other) = default; // copy constructor
    Ad_accountsAd_account_idSsioInsertion_ordersStatusResource(Ad_accountsAd_account_idSsioInsertion_ordersStatusResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idSsioInsertion_ordersStatusResource& operator=(const Ad_accountsAd_account_idSsioInsertion_ordersStatusResource& other) = default; // copy assignment
    Ad_accountsAd_account_idSsioInsertion_ordersStatusResource& operator=(Ad_accountsAd_account_idSsioInsertion_ordersStatusResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Ssio_insertion_orders_status_get_by_ad_account_200_response>(
        std::string & adAccountId, std::string & bookmark, int32_t & pageSize)> handler_GET_func =
            [](std::string &, std::string &, int32_t &) -> std::pair<int, Ssio_insertion_orders_status_get_by_ad_account_200_response>
                { throw BillingApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Ssio_insertion_orders_status_get_by_ad_account_200_response> handler_GET(
        std::string & adAccountId, std::string & bookmark, int32_t & pageSize);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBillingApiException(const BillingApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get insertion order status by pin order id.
/// </summary>
/// <remarks>
/// Get insertion order status for pin order id &lt;code&gt;pin_order_id&lt;/code&gt;. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Finance, Campaign.
/// </remarks>
class  Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource() = default;

    Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource(
        const Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource& other) = default; // copy constructor
    Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource(Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource& operator=(const Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource& other) = default; // copy assignment
    Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource& operator=(Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, SSIOInsertionOrderStatusResponse>(
        std::string & adAccountId, std::string & pinOrderId)> handler_GET_func =
            [](std::string &, std::string &) -> std::pair<int, SSIOInsertionOrderStatusResponse>
                { throw BillingApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, SSIOInsertionOrderStatusResponse> handler_GET(
        std::string & adAccountId, std::string & pinOrderId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBillingApiException(const BillingApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get Salesforce order lines by ad account id.
/// </summary>
/// <remarks>
/// Get Salesforce order lines for account id &lt;code&gt;ad_account_id&lt;/code&gt;. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Finance, Campaign.
/// </remarks>
class  Ad_accountsAd_account_idSsioOrder_linesResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idSsioOrder_linesResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idSsioOrder_linesResource() = default;

    Ad_accountsAd_account_idSsioOrder_linesResource(
        const Ad_accountsAd_account_idSsioOrder_linesResource& other) = default; // copy constructor
    Ad_accountsAd_account_idSsioOrder_linesResource(Ad_accountsAd_account_idSsioOrder_linesResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idSsioOrder_linesResource& operator=(const Ad_accountsAd_account_idSsioOrder_linesResource& other) = default; // copy assignment
    Ad_accountsAd_account_idSsioOrder_linesResource& operator=(Ad_accountsAd_account_idSsioOrder_linesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Ssio_order_lines_get_by_ad_account_200_response>(
        std::string & adAccountId, std::string & bookmark, int32_t & pageSize, std::string & pinOrderId)> handler_GET_func =
            [](std::string &, std::string &, int32_t &, std::string &) -> std::pair<int, Ssio_order_lines_get_by_ad_account_200_response>
                { throw BillingApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Ssio_order_lines_get_by_ad_account_200_response> handler_GET(
        std::string & adAccountId, std::string & bookmark, int32_t & pageSize, std::string & pinOrderId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBillingApiException(const BillingApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace BillingApiResources */

using BillingApiAd_accountsAd_account_idAds_creditRedeemResource [[deprecated]] = BillingApiResources::Ad_accountsAd_account_idAds_creditRedeemResource;
using BillingApiAd_accountsAd_account_idAds_creditDiscountsResource [[deprecated]] = BillingApiResources::Ad_accountsAd_account_idAds_creditDiscountsResource;
using BillingApiAd_accountsAd_account_idBilling_profilesResource [[deprecated]] = BillingApiResources::Ad_accountsAd_account_idBilling_profilesResource;
using BillingApiAd_accountsAd_account_idSsioAccountsResource [[deprecated]] = BillingApiResources::Ad_accountsAd_account_idSsioAccountsResource;
using BillingApiAd_accountsAd_account_idSsioInsertion_ordersResource [[deprecated]] = BillingApiResources::Ad_accountsAd_account_idSsioInsertion_ordersResource;
using BillingApiAd_accountsAd_account_idSsioInsertion_ordersStatusResource [[deprecated]] = BillingApiResources::Ad_accountsAd_account_idSsioInsertion_ordersStatusResource;
using BillingApiAd_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource [[deprecated]] = BillingApiResources::Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource;
using BillingApiAd_accountsAd_account_idSsioOrder_linesResource [[deprecated]] = BillingApiResources::Ad_accountsAd_account_idSsioOrder_linesResource;

//
// The restbed service to actually implement the REST server
//
class  BillingApi
{
public:
    explicit BillingApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~BillingApi();

    std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idAds_creditRedeemResource> getAd_accountsAd_account_idAds_creditRedeemResource();
    std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idAds_creditDiscountsResource> getAd_accountsAd_account_idAds_creditDiscountsResource();
    std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idBilling_profilesResource> getAd_accountsAd_account_idBilling_profilesResource();
    std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioAccountsResource> getAd_accountsAd_account_idSsioAccountsResource();
    std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioInsertion_ordersResource> getAd_accountsAd_account_idSsioInsertion_ordersResource();
    std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioInsertion_ordersStatusResource> getAd_accountsAd_account_idSsioInsertion_ordersStatusResource();
    std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource> getAd_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource();
    std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioOrder_linesResource> getAd_accountsAd_account_idSsioOrder_linesResource();

    void setResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idAds_creditRedeemResource> resource);
    void setResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idAds_creditDiscountsResource> resource);
    void setResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idBilling_profilesResource> resource);
    void setResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioAccountsResource> resource);
    void setResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioInsertion_ordersResource> resource);
    void setResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioInsertion_ordersStatusResource> resource);
    void setResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource> resource);
    void setResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioOrder_linesResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setBillingApiAd_accountsAd_account_idAds_creditRedeemResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idAds_creditRedeemResource> spBillingApiAd_accountsAd_account_idAds_creditRedeemResource);
    [[deprecated("use setResource()")]]
    virtual void setBillingApiAd_accountsAd_account_idAds_creditDiscountsResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idAds_creditDiscountsResource> spBillingApiAd_accountsAd_account_idAds_creditDiscountsResource);
    [[deprecated("use setResource()")]]
    virtual void setBillingApiAd_accountsAd_account_idBilling_profilesResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idBilling_profilesResource> spBillingApiAd_accountsAd_account_idBilling_profilesResource);
    [[deprecated("use setResource()")]]
    virtual void setBillingApiAd_accountsAd_account_idSsioAccountsResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioAccountsResource> spBillingApiAd_accountsAd_account_idSsioAccountsResource);
    [[deprecated("use setResource()")]]
    virtual void setBillingApiAd_accountsAd_account_idSsioInsertion_ordersResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioInsertion_ordersResource> spBillingApiAd_accountsAd_account_idSsioInsertion_ordersResource);
    [[deprecated("use setResource()")]]
    virtual void setBillingApiAd_accountsAd_account_idSsioInsertion_ordersStatusResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioInsertion_ordersStatusResource> spBillingApiAd_accountsAd_account_idSsioInsertion_ordersStatusResource);
    [[deprecated("use setResource()")]]
    virtual void setBillingApiAd_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource> spBillingApiAd_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource);
    [[deprecated("use setResource()")]]
    virtual void setBillingApiAd_accountsAd_account_idSsioOrder_linesResource(std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioOrder_linesResource> spBillingApiAd_accountsAd_account_idSsioOrder_linesResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idAds_creditRedeemResource> m_spAd_accountsAd_account_idAds_creditRedeemResource;
    std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idAds_creditDiscountsResource> m_spAd_accountsAd_account_idAds_creditDiscountsResource;
    std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idBilling_profilesResource> m_spAd_accountsAd_account_idBilling_profilesResource;
    std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioAccountsResource> m_spAd_accountsAd_account_idSsioAccountsResource;
    std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioInsertion_ordersResource> m_spAd_accountsAd_account_idSsioInsertion_ordersResource;
    std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioInsertion_ordersStatusResource> m_spAd_accountsAd_account_idSsioInsertion_ordersStatusResource;
    std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource> m_spAd_accountsAd_account_idSsioInsertion_ordersPin_order_idStatusResource;
    std::shared_ptr<BillingApiResources::Ad_accountsAd_account_idSsioOrder_linesResource> m_spAd_accountsAd_account_idSsioOrder_linesResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* BillingApi_H_ */

