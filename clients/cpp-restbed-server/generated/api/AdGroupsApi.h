/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdGroupsApi.h
 *
 * 
 */

#ifndef AdGroupsApi_H_
#define AdGroupsApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "AdGroupArrayResponse.h"
#include "AdGroupAudienceSizingRequest.h"
#include "AdGroupAudienceSizingResponse.h"
#include "AdGroupCreateRequest.h"
#include "AdGroupResponse.h"
#include "AdGroupUpdateRequest.h"
#include "AdGroupsAnalyticsResponse_inner.h"
#include "Ad_groups_list_200_response.h"
#include "AdsAnalyticsTargetingType.h"
#include "BidFloor.h"
#include "BidFloorRequest.h"
#include "ConversionReportAttributionType.h"
#include "Error.h"
#include "Granularity.h"
#include "MetricsResponse.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  AdGroupsApiException: public std::exception
{
public:
    AdGroupsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace AdGroupsApiResources {
/// <summary>
/// Get bid floors
/// </summary>
/// <remarks>
/// List bid floors for your campaign configuration. Bid floors are given in microcurrency values based on the currency in the bid floor specification. &lt;p/&gt; &lt;p&gt;Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.&lt;/p&gt; &lt;p&gt;A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’ s profile.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Equivalency equations&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;$1 &#x3D; 1,000,000 microdollars&lt;/li&gt;   &lt;li&gt;1 microdollar &#x3D; $0.000001 &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;To convert between currency and microcurrency&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;To convert dollars to microdollars, mutiply dollars by 1,000,000&lt;/li&gt;   &lt;li&gt;To convert microdollars to dollars, divide microdollars by 1,000,000&lt;/li&gt;  &lt;/ul&gt; For more on bid floors see &lt;a class&#x3D;\&quot;reference external\&quot; href&#x3D;\&quot;https://help.pinterest.com/en/business/article/set-your-bid\&quot;&gt; Set your bid&lt;/a&gt;.
/// </remarks>
class  Ad_accountsAd_account_idBid_floorResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idBid_floorResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idBid_floorResource() = default;

    Ad_accountsAd_account_idBid_floorResource(
        const Ad_accountsAd_account_idBid_floorResource& other) = default; // copy constructor
    Ad_accountsAd_account_idBid_floorResource(Ad_accountsAd_account_idBid_floorResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idBid_floorResource& operator=(const Ad_accountsAd_account_idBid_floorResource& other) = default; // copy assignment
    Ad_accountsAd_account_idBid_floorResource& operator=(Ad_accountsAd_account_idBid_floorResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, BidFloor>(
        std::string & adAccountId, BidFloorRequest & bidFloorRequest)> handler_POST_func =
            [](std::string &, BidFloorRequest &) -> std::pair<int, BidFloor>
                { throw AdGroupsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, BidFloor> handler_POST(
        std::string & adAccountId, BidFloorRequest & bidFloorRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAdGroupsApiException(const AdGroupsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get targeting analytics for ad groups
/// </summary>
/// <remarks>
/// Get targeting analytics for one or more ad groups. For the requested ad group(s) and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \&quot;age_bucket\&quot;) for applicable values (e.g. \&quot;45-49\&quot;). &lt;p/&gt; - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
/// </remarks>
class  Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource() = default;

    Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource(
        const Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource& other) = default; // copy constructor
    Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource(Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource& operator=(const Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource& other) = default; // copy assignment
    Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource& operator=(Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, MetricsResponse>(
        std::string & adAccountId, std::vector<std::string> & adGroupIds, std::string & startDate, std::string & endDate, std::vector<AdsAnalyticsTargetingType> & targetingTypes, std::vector<std::string> & columns, Granularity & granularity, int32_t & clickWindowDays, int32_t & engagementWindowDays, int32_t & viewWindowDays, std::string & conversionReportTime, ConversionReportAttributionType & attributionTypes)> handler_GET_func =
            [](std::string &, std::vector<std::string> &, std::string &, std::string &, std::vector<AdsAnalyticsTargetingType> &, std::vector<std::string> &, Granularity &, int32_t &, int32_t &, int32_t &, std::string &, ConversionReportAttributionType &) -> std::pair<int, MetricsResponse>
                { throw AdGroupsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, MetricsResponse> handler_GET(
        std::string & adAccountId, std::vector<std::string> & adGroupIds, std::string & startDate, std::string & endDate, std::vector<AdsAnalyticsTargetingType> & targetingTypes, std::vector<std::string> & columns, Granularity & granularity, int32_t & clickWindowDays, int32_t & engagementWindowDays, int32_t & viewWindowDays, std::string & conversionReportTime, ConversionReportAttributionType & attributionTypes);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAdGroupsApiException(const AdGroupsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get ad group analytics
/// </summary>
/// <remarks>
/// Get analytics for the specified ad groups in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
/// </remarks>
class  Ad_accountsAd_account_idAd_groupsAnalyticsResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idAd_groupsAnalyticsResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idAd_groupsAnalyticsResource() = default;

    Ad_accountsAd_account_idAd_groupsAnalyticsResource(
        const Ad_accountsAd_account_idAd_groupsAnalyticsResource& other) = default; // copy constructor
    Ad_accountsAd_account_idAd_groupsAnalyticsResource(Ad_accountsAd_account_idAd_groupsAnalyticsResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idAd_groupsAnalyticsResource& operator=(const Ad_accountsAd_account_idAd_groupsAnalyticsResource& other) = default; // copy assignment
    Ad_accountsAd_account_idAd_groupsAnalyticsResource& operator=(Ad_accountsAd_account_idAd_groupsAnalyticsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::vector<AdGroupsAnalyticsResponse_inner>>(
        std::string & adAccountId, std::string & startDate, std::string & endDate, std::vector<std::string> & adGroupIds, std::vector<std::string> & columns, Granularity & granularity, int32_t & clickWindowDays, int32_t & engagementWindowDays, int32_t & viewWindowDays, std::string & conversionReportTime)> handler_GET_func =
            [](std::string &, std::string &, std::string &, std::vector<std::string> &, std::vector<std::string> &, Granularity &, int32_t &, int32_t &, int32_t &, std::string &) -> std::pair<int, std::vector<AdGroupsAnalyticsResponse_inner>>
                { throw AdGroupsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<AdGroupsAnalyticsResponse_inner>> handler_GET(
        std::string & adAccountId, std::string & startDate, std::string & endDate, std::vector<std::string> & adGroupIds, std::vector<std::string> & columns, Granularity & granularity, int32_t & clickWindowDays, int32_t & engagementWindowDays, int32_t & viewWindowDays, std::string & conversionReportTime);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAdGroupsApiException(const AdGroupsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get audience sizing
/// </summary>
/// <remarks>
/// Get potential audience size for an ad group with given targeting criteria.  Potential audience size estimates the number of people you may be able to reach per month with your campaign.  It is based on historical advertising data and the targeting criteria you select. It does not guarantee results or take into account factors such as bid, budget, schedule, seasonality or product experiments.
/// </remarks>
class  Ad_accountsAd_account_idAd_groupsAudience_sizingResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idAd_groupsAudience_sizingResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idAd_groupsAudience_sizingResource() = default;

    Ad_accountsAd_account_idAd_groupsAudience_sizingResource(
        const Ad_accountsAd_account_idAd_groupsAudience_sizingResource& other) = default; // copy constructor
    Ad_accountsAd_account_idAd_groupsAudience_sizingResource(Ad_accountsAd_account_idAd_groupsAudience_sizingResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idAd_groupsAudience_sizingResource& operator=(const Ad_accountsAd_account_idAd_groupsAudience_sizingResource& other) = default; // copy assignment
    Ad_accountsAd_account_idAd_groupsAudience_sizingResource& operator=(Ad_accountsAd_account_idAd_groupsAudience_sizingResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, AdGroupAudienceSizingResponse>(
        std::string & adAccountId, AdGroupAudienceSizingRequest & adGroupAudienceSizingRequest)> handler_POST_func =
            [](std::string &, AdGroupAudienceSizingRequest &) -> std::pair<int, AdGroupAudienceSizingResponse>
                { throw AdGroupsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, AdGroupAudienceSizingResponse> handler_POST(
        std::string & adAccountId, AdGroupAudienceSizingRequest & adGroupAudienceSizingRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAdGroupsApiException(const AdGroupsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Create ad groups
/// </summary>
/// <remarks>
/// Create multiple new ad groups. All ads in a given ad group will have the same budget, bid, run dates, targeting, and placement (search, browse, other). For more information, &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/campaign-structure\&quot; target&#x3D;\&quot;_blank\&quot;&gt; click here&lt;/a&gt;.&lt;/p&gt; &lt;strong&gt;Note:&lt;/strong&gt; - &#39;bid_in_micro_currency&#39; and &#39;budget_in_micro_currency&#39; should be expressed in microcurrency amounts based on the currency field set in the advertiser&#39;s profile.&lt;p/&gt; &lt;p&gt;Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.&lt;/p&gt; &lt;p&gt;A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’s profile.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Equivalency equations&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;$1 &#x3D; 1,000,000 microdollars&lt;/li&gt;   &lt;li&gt;1 microdollar &#x3D; $0.000001 &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;To convert between currency and microcurrency&lt;/strong&gt;, using dollars as an example currency:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;To convert dollars to microdollars, mutiply dollars by 1,000,000&lt;/li&gt;   &lt;li&gt;To convert microdollars to dollars, divide microdollars by 1,000,000&lt;/li&gt; &lt;/ul&gt; - Ad groups belong to ad campaigns. Some types of campaigns (e.g. budget optimization) have limits on the number of ad groups they can hold. If you exceed those limits, you will get an error message. - Start and end time cannot be set for ad groups that belong to CBO campaigns. Currently, campaigns with the following objective types: TRAFFIC, AWARENESS, WEB_CONVERSIONS, and CATALOG_SALES will default to CBO.
/// </remarks>
class  Ad_accountsAd_account_idAd_groupsResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idAd_groupsResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idAd_groupsResource() = default;

    Ad_accountsAd_account_idAd_groupsResource(
        const Ad_accountsAd_account_idAd_groupsResource& other) = default; // copy constructor
    Ad_accountsAd_account_idAd_groupsResource(Ad_accountsAd_account_idAd_groupsResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idAd_groupsResource& operator=(const Ad_accountsAd_account_idAd_groupsResource& other) = default; // copy assignment
    Ad_accountsAd_account_idAd_groupsResource& operator=(Ad_accountsAd_account_idAd_groupsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, AdGroupArrayResponse>(
        std::string & adAccountId, std::vector<AdGroupCreateRequest> & adGroupCreateRequest)> handler_POST_func =
            [](std::string &, std::vector<AdGroupCreateRequest> &) -> std::pair<int, AdGroupArrayResponse>
                { throw AdGroupsApiException(501, "Not implemented"); };

    std::function<std::pair<int, Ad_groups_list_200_response>(
        std::string & adAccountId, std::vector<std::string> & campaignIds, std::vector<std::string> & adGroupIds, std::vector<std::string> & entityStatuses, int32_t & pageSize, std::string & order, std::string & bookmark, bool & translateInterestsToNames)> handler_GET_func =
            [](std::string &, std::vector<std::string> &, std::vector<std::string> &, std::vector<std::string> &, int32_t &, std::string &, std::string &, bool &) -> std::pair<int, Ad_groups_list_200_response>
                { throw AdGroupsApiException(501, "Not implemented"); };

    std::function<std::pair<int, AdGroupArrayResponse>(
        std::string & adAccountId, std::vector<AdGroupUpdateRequest> & adGroupUpdateRequest)> handler_PATCH_func =
            [](std::string &, std::vector<AdGroupUpdateRequest> &) -> std::pair<int, AdGroupArrayResponse>
                { throw AdGroupsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, AdGroupArrayResponse> handler_POST(
        std::string & adAccountId, std::vector<AdGroupCreateRequest> & adGroupCreateRequest);

    virtual std::pair<int, Ad_groups_list_200_response> handler_GET(
        std::string & adAccountId, std::vector<std::string> & campaignIds, std::vector<std::string> & adGroupIds, std::vector<std::string> & entityStatuses, int32_t & pageSize, std::string & order, std::string & bookmark, bool & translateInterestsToNames);
    virtual std::pair<int, AdGroupArrayResponse> handler_PATCH(
        std::string & adAccountId, std::vector<AdGroupUpdateRequest> & adGroupUpdateRequest);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAdGroupsApiException(const AdGroupsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PATCH_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get ad group
/// </summary>
/// <remarks>
/// Get a specific ad given the ad ID. If your pin is rejected, rejected_reasons will contain additional information from the Ad Review process. For more information about our policies and rejection reasons see the &lt;a href&#x3D;\&quot;https://www.pinterest.com/_/_/policy/advertising-guidelines/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Pinterest advertising standards&lt;/a&gt;.
/// </remarks>
class  Ad_accountsAd_account_idAd_groupsAd_group_idResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idAd_groupsAd_group_idResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idAd_groupsAd_group_idResource() = default;

    Ad_accountsAd_account_idAd_groupsAd_group_idResource(
        const Ad_accountsAd_account_idAd_groupsAd_group_idResource& other) = default; // copy constructor
    Ad_accountsAd_account_idAd_groupsAd_group_idResource(Ad_accountsAd_account_idAd_groupsAd_group_idResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idAd_groupsAd_group_idResource& operator=(const Ad_accountsAd_account_idAd_groupsAd_group_idResource& other) = default; // copy assignment
    Ad_accountsAd_account_idAd_groupsAd_group_idResource& operator=(Ad_accountsAd_account_idAd_groupsAd_group_idResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, AdGroupResponse>(
        std::string & adAccountId, std::string & adGroupId)> handler_GET_func =
            [](std::string &, std::string &) -> std::pair<int, AdGroupResponse>
                { throw AdGroupsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, AdGroupResponse> handler_GET(
        std::string & adAccountId, std::string & adGroupId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAdGroupsApiException(const AdGroupsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace AdGroupsApiResources */

using AdGroupsApiAd_accountsAd_account_idBid_floorResource [[deprecated]] = AdGroupsApiResources::Ad_accountsAd_account_idBid_floorResource;
using AdGroupsApiAd_accountsAd_account_idAd_groupsTargeting_analyticsResource [[deprecated]] = AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource;
using AdGroupsApiAd_accountsAd_account_idAd_groupsAnalyticsResource [[deprecated]] = AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsAnalyticsResource;
using AdGroupsApiAd_accountsAd_account_idAd_groupsAudience_sizingResource [[deprecated]] = AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsAudience_sizingResource;
using AdGroupsApiAd_accountsAd_account_idAd_groupsResource [[deprecated]] = AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsResource;
using AdGroupsApiAd_accountsAd_account_idAd_groupsAd_group_idResource [[deprecated]] = AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsAd_group_idResource;

//
// The restbed service to actually implement the REST server
//
class  AdGroupsApi
{
public:
    explicit AdGroupsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~AdGroupsApi();

    std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idBid_floorResource> getAd_accountsAd_account_idBid_floorResource();
    std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource> getAd_accountsAd_account_idAd_groupsTargeting_analyticsResource();
    std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsAnalyticsResource> getAd_accountsAd_account_idAd_groupsAnalyticsResource();
    std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsAudience_sizingResource> getAd_accountsAd_account_idAd_groupsAudience_sizingResource();
    std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsResource> getAd_accountsAd_account_idAd_groupsResource();
    std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsAd_group_idResource> getAd_accountsAd_account_idAd_groupsAd_group_idResource();

    void setResource(std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idBid_floorResource> resource);
    void setResource(std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource> resource);
    void setResource(std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsAnalyticsResource> resource);
    void setResource(std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsAudience_sizingResource> resource);
    void setResource(std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsResource> resource);
    void setResource(std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsAd_group_idResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setAdGroupsApiAd_accountsAd_account_idBid_floorResource(std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idBid_floorResource> spAdGroupsApiAd_accountsAd_account_idBid_floorResource);
    [[deprecated("use setResource()")]]
    virtual void setAdGroupsApiAd_accountsAd_account_idAd_groupsTargeting_analyticsResource(std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource> spAdGroupsApiAd_accountsAd_account_idAd_groupsTargeting_analyticsResource);
    [[deprecated("use setResource()")]]
    virtual void setAdGroupsApiAd_accountsAd_account_idAd_groupsAnalyticsResource(std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsAnalyticsResource> spAdGroupsApiAd_accountsAd_account_idAd_groupsAnalyticsResource);
    [[deprecated("use setResource()")]]
    virtual void setAdGroupsApiAd_accountsAd_account_idAd_groupsAudience_sizingResource(std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsAudience_sizingResource> spAdGroupsApiAd_accountsAd_account_idAd_groupsAudience_sizingResource);
    [[deprecated("use setResource()")]]
    virtual void setAdGroupsApiAd_accountsAd_account_idAd_groupsResource(std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsResource> spAdGroupsApiAd_accountsAd_account_idAd_groupsResource);
    [[deprecated("use setResource()")]]
    virtual void setAdGroupsApiAd_accountsAd_account_idAd_groupsAd_group_idResource(std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsAd_group_idResource> spAdGroupsApiAd_accountsAd_account_idAd_groupsAd_group_idResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idBid_floorResource> m_spAd_accountsAd_account_idBid_floorResource;
    std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsTargeting_analyticsResource> m_spAd_accountsAd_account_idAd_groupsTargeting_analyticsResource;
    std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsAnalyticsResource> m_spAd_accountsAd_account_idAd_groupsAnalyticsResource;
    std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsAudience_sizingResource> m_spAd_accountsAd_account_idAd_groupsAudience_sizingResource;
    std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsResource> m_spAd_accountsAd_account_idAd_groupsResource;
    std::shared_ptr<AdGroupsApiResources::Ad_accountsAd_account_idAd_groupsAd_group_idResource> m_spAd_accountsAd_account_idAd_groupsAd_group_idResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* AdGroupsApi_H_ */

