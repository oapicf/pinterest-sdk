/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TargetingTemplateApi.h
 *
 * 
 */

#ifndef TargetingTemplateApi_H_
#define TargetingTemplateApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "Error.h"
#include "TargetingTemplateCreate.h"
#include "TargetingTemplateGetResponseData.h"
#include "TargetingTemplateUpdateRequest.h"
#include "Targeting_template_list_200_response.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  TargetingTemplateApiException: public std::exception
{
public:
    TargetingTemplateApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace TargetingTemplateApiResources {
/// <summary>
/// Create targeting templates
/// </summary>
/// <remarks>
/// &lt;p&gt;Targeting templates allow advertisers to save a set of targeting details including audience lists,  keywords &amp; interest, demographics, and placements to use more than once during the campaign creation process.&lt;/p&gt;  &lt;p&gt;Templates can be used to build out basic targeting criteria that you plan to use across campaigns and to reuse   performance targeting from prior campaigns for new campaigns.&lt;/p&gt;
/// </remarks>
class  Ad_accountsAd_account_idTargeting_templatesResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idTargeting_templatesResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idTargeting_templatesResource() = default;

    Ad_accountsAd_account_idTargeting_templatesResource(
        const Ad_accountsAd_account_idTargeting_templatesResource& other) = default; // copy constructor
    Ad_accountsAd_account_idTargeting_templatesResource(Ad_accountsAd_account_idTargeting_templatesResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idTargeting_templatesResource& operator=(const Ad_accountsAd_account_idTargeting_templatesResource& other) = default; // copy assignment
    Ad_accountsAd_account_idTargeting_templatesResource& operator=(Ad_accountsAd_account_idTargeting_templatesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, TargetingTemplateGetResponseData>(
        std::string & adAccountId, TargetingTemplateCreate & targetingTemplateCreate)> handler_POST_func =
            [](std::string &, TargetingTemplateCreate &) -> std::pair<int, TargetingTemplateGetResponseData>
                { throw TargetingTemplateApiException(501, "Not implemented"); };

    std::function<std::pair<int, Targeting_template_list_200_response>(
        std::string & adAccountId, std::string & order, bool & includeSizing, std::string & searchQuery, int32_t & pageSize, std::string & bookmark)> handler_GET_func =
            [](std::string &, std::string &, bool &, std::string &, int32_t &, std::string &) -> std::pair<int, Targeting_template_list_200_response>
                { throw TargetingTemplateApiException(501, "Not implemented"); };

    std::function<int(
        std::string & adAccountId, TargetingTemplateUpdateRequest & targetingTemplateUpdateRequest)> handler_PATCH_func =
            [](std::string &, TargetingTemplateUpdateRequest &) -> int
                { throw TargetingTemplateApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, TargetingTemplateGetResponseData> handler_POST(
        std::string & adAccountId, TargetingTemplateCreate & targetingTemplateCreate);

    virtual std::pair<int, Targeting_template_list_200_response> handler_GET(
        std::string & adAccountId, std::string & order, bool & includeSizing, std::string & searchQuery, int32_t & pageSize, std::string & bookmark);
    virtual int handler_PATCH(
        std::string & adAccountId, TargetingTemplateUpdateRequest & targetingTemplateUpdateRequest);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleTargetingTemplateApiException(const TargetingTemplateApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PATCH_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace TargetingTemplateApiResources */

using TargetingTemplateApiAd_accountsAd_account_idTargeting_templatesResource [[deprecated]] = TargetingTemplateApiResources::Ad_accountsAd_account_idTargeting_templatesResource;

//
// The restbed service to actually implement the REST server
//
class  TargetingTemplateApi
{
public:
    explicit TargetingTemplateApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~TargetingTemplateApi();

    std::shared_ptr<TargetingTemplateApiResources::Ad_accountsAd_account_idTargeting_templatesResource> getAd_accountsAd_account_idTargeting_templatesResource();

    void setResource(std::shared_ptr<TargetingTemplateApiResources::Ad_accountsAd_account_idTargeting_templatesResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setTargetingTemplateApiAd_accountsAd_account_idTargeting_templatesResource(std::shared_ptr<TargetingTemplateApiResources::Ad_accountsAd_account_idTargeting_templatesResource> spTargetingTemplateApiAd_accountsAd_account_idTargeting_templatesResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<TargetingTemplateApiResources::Ad_accountsAd_account_idTargeting_templatesResource> m_spAd_accountsAd_account_idTargeting_templatesResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* TargetingTemplateApi_H_ */

