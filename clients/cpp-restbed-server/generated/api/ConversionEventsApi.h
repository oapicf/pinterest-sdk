/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ConversionEventsApi.h
 *
 * 
 */

#ifndef ConversionEventsApi_H_
#define ConversionEventsApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ConversionApiResponse.h"
#include "ConversionEvents.h"
#include "DetailedError.h"
#include "Error.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  ConversionEventsApiException: public std::exception
{
public:
    ConversionEventsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace ConversionEventsApiResources {
/// <summary>
/// Send conversions
/// </summary>
/// <remarks>
/// The Pinterest API offers advertisers a way to send Pinterest their conversion information (including web conversions, in-app conversions, or even offline conversions) based on their &lt;code&gt;ad_account_id&lt;/code&gt;. The request body should be a JSON object. - This endpoint requires an &lt;code&gt;access_token&lt;/code&gt; be generated through Ads Manager. Review the &lt;a href&#x3D;\&quot;/docs/api-features/conversion-overview/\&quot;&gt;Conversions Guide&lt;/a&gt; for more details. (Note that the authorization header required is &lt;code&gt;Authorization: Bearer &amp;lt;access_token&amp;gt;&lt;/code&gt;). - The token&#39;s &lt;code&gt;user_account&lt;/code&gt; must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Audience, Campaign. (Note that the token can be used across multiple ad accounts under an user ID.) - This endpoint has a rate limit of 5,000 calls per minute per ad account. - If the merchant is submitting this information using both Pinterest conversion tags and the Pinterest API, Pinterest will remove duplicate information before reporting. (Note that events that took place offline cannot be deduplicated.)
/// </remarks>
class  Ad_accountsAd_account_idEventsResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idEventsResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idEventsResource() = default;

    Ad_accountsAd_account_idEventsResource(
        const Ad_accountsAd_account_idEventsResource& other) = default; // copy constructor
    Ad_accountsAd_account_idEventsResource(Ad_accountsAd_account_idEventsResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idEventsResource& operator=(const Ad_accountsAd_account_idEventsResource& other) = default; // copy assignment
    Ad_accountsAd_account_idEventsResource& operator=(Ad_accountsAd_account_idEventsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, ConversionApiResponse>(
        std::string & adAccountId, ConversionEvents & conversionEvents, bool & test)> handler_POST_func =
            [](std::string &, ConversionEvents &, bool &) -> std::pair<int, ConversionApiResponse>
                { throw ConversionEventsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, ConversionApiResponse> handler_POST(
        std::string & adAccountId, ConversionEvents & conversionEvents, bool & test);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleConversionEventsApiException(const ConversionEventsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace ConversionEventsApiResources */

using ConversionEventsApiAd_accountsAd_account_idEventsResource [[deprecated]] = ConversionEventsApiResources::Ad_accountsAd_account_idEventsResource;

//
// The restbed service to actually implement the REST server
//
class  ConversionEventsApi
{
public:
    explicit ConversionEventsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~ConversionEventsApi();

    std::shared_ptr<ConversionEventsApiResources::Ad_accountsAd_account_idEventsResource> getAd_accountsAd_account_idEventsResource();

    void setResource(std::shared_ptr<ConversionEventsApiResources::Ad_accountsAd_account_idEventsResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setConversionEventsApiAd_accountsAd_account_idEventsResource(std::shared_ptr<ConversionEventsApiResources::Ad_accountsAd_account_idEventsResource> spConversionEventsApiAd_accountsAd_account_idEventsResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<ConversionEventsApiResources::Ad_accountsAd_account_idEventsResource> m_spAd_accountsAd_account_idEventsResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* ConversionEventsApi_H_ */

