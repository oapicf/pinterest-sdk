/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ResourcesApi.h
 *
 * 
 */

#ifndef ResourcesApi_H_
#define ResourcesApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "AdAccountsCountryResponse.h"
#include "BookClosedResponse.h"
#include "DeliveryMetricsResponse.h"
#include "Error.h"
#include "SingleInterestTargetingOptionResponse.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  ResourcesApiException: public std::exception
{
public:
    ResourcesApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace ResourcesApiResources {
/// <summary>
/// Get ad accounts countries
/// </summary>
/// <remarks>
/// Get Ad Accounts countries
/// </remarks>
class  ResourcesAd_account_countriesResource: public restbed::Resource
{
public:
    ResourcesAd_account_countriesResource(const std::string& context = "/v5");
    virtual ~ResourcesAd_account_countriesResource() = default;

    ResourcesAd_account_countriesResource(
        const ResourcesAd_account_countriesResource& other) = default; // copy constructor
    ResourcesAd_account_countriesResource(ResourcesAd_account_countriesResource&& other) noexcept = default; // move constructor

    ResourcesAd_account_countriesResource& operator=(const ResourcesAd_account_countriesResource& other) = default; // copy assignment
    ResourcesAd_account_countriesResource& operator=(ResourcesAd_account_countriesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, AdAccountsCountryResponse>(
        )> handler_GET_func =
            []() -> std::pair<int, AdAccountsCountryResponse>
                { throw ResourcesApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, AdAccountsCountryResponse> handler_GET(
        );


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleResourcesApiException(const ResourcesApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get available metrics&#39; definitions
/// </summary>
/// <remarks>
/// Get the definitions for ads and organic metrics available across both synchronous and asynchronous report endpoints. The &#x60;display_name&#x60; attribute will match how the metric is named in our native tools like Ads Manager. See &lt;a href&#x3D;&#39;/docs/api-features/analytics-overview/&#39;&gt;Organic Analytics&lt;/a&gt; and &lt;a href&#x3D;&#39;/docs/api-features/ads-reporting/&#39;&gt;Ads Analytics&lt;/a&gt; for more information.
/// </remarks>
class  ResourcesDelivery_metricsResource: public restbed::Resource
{
public:
    ResourcesDelivery_metricsResource(const std::string& context = "/v5");
    virtual ~ResourcesDelivery_metricsResource() = default;

    ResourcesDelivery_metricsResource(
        const ResourcesDelivery_metricsResource& other) = default; // copy constructor
    ResourcesDelivery_metricsResource(ResourcesDelivery_metricsResource&& other) noexcept = default; // move constructor

    ResourcesDelivery_metricsResource& operator=(const ResourcesDelivery_metricsResource& other) = default; // copy assignment
    ResourcesDelivery_metricsResource& operator=(ResourcesDelivery_metricsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, DeliveryMetricsResponse>(
        std::string & reportType)> handler_GET_func =
            [](std::string &) -> std::pair<int, DeliveryMetricsResponse>
                { throw ResourcesApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, DeliveryMetricsResponse> handler_GET(
        std::string & reportType);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleResourcesApiException(const ResourcesApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get interest details
/// </summary>
/// <remarks>
/// &lt;p&gt;Get details of a specific interest given interest ID.&lt;/p&gt; &lt;p&gt;Click &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1HxL-0Z3p2fgxis9YBP2HWC3tvPrs1hAuHDRtH-NJTIM/edit#gid&#x3D;118370875\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt; for a spreadsheet listing interests and their IDs.&lt;/p&gt;
/// </remarks>
class  ResourcesTargetingInterestsInterest_idResource: public restbed::Resource
{
public:
    ResourcesTargetingInterestsInterest_idResource(const std::string& context = "/v5");
    virtual ~ResourcesTargetingInterestsInterest_idResource() = default;

    ResourcesTargetingInterestsInterest_idResource(
        const ResourcesTargetingInterestsInterest_idResource& other) = default; // copy constructor
    ResourcesTargetingInterestsInterest_idResource(ResourcesTargetingInterestsInterest_idResource&& other) noexcept = default; // move constructor

    ResourcesTargetingInterestsInterest_idResource& operator=(const ResourcesTargetingInterestsInterest_idResource& other) = default; // copy assignment
    ResourcesTargetingInterestsInterest_idResource& operator=(ResourcesTargetingInterestsInterest_idResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, SingleInterestTargetingOptionResponse>(
        std::string & interestId)> handler_GET_func =
            [](std::string &) -> std::pair<int, SingleInterestTargetingOptionResponse>
                { throw ResourcesApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, SingleInterestTargetingOptionResponse> handler_GET(
        std::string & interestId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleResourcesApiException(const ResourcesApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get lead form questions
/// </summary>
/// <remarks>
/// Get a list of all lead form question type names. Some questions might not be used.  &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;
/// </remarks>
class  ResourcesLead_form_questionsResource: public restbed::Resource
{
public:
    ResourcesLead_form_questionsResource(const std::string& context = "/v5");
    virtual ~ResourcesLead_form_questionsResource() = default;

    ResourcesLead_form_questionsResource(
        const ResourcesLead_form_questionsResource& other) = default; // copy constructor
    ResourcesLead_form_questionsResource(ResourcesLead_form_questionsResource&& other) noexcept = default; // move constructor

    ResourcesLead_form_questionsResource& operator=(const ResourcesLead_form_questionsResource& other) = default; // copy assignment
    ResourcesLead_form_questionsResource& operator=(ResourcesLead_form_questionsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<int(
        )> handler_GET_func =
            []() -> int
                { throw ResourcesApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_GET(
        );


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleResourcesApiException(const ResourcesApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get metrics ready state
/// </summary>
/// <remarks>
/// Learn whether conversion or non-conversion metrics are finalized and ready to query.
/// </remarks>
class  ResourcesMetrics_ready_stateResource: public restbed::Resource
{
public:
    ResourcesMetrics_ready_stateResource(const std::string& context = "/v5");
    virtual ~ResourcesMetrics_ready_stateResource() = default;

    ResourcesMetrics_ready_stateResource(
        const ResourcesMetrics_ready_stateResource& other) = default; // copy constructor
    ResourcesMetrics_ready_stateResource(ResourcesMetrics_ready_stateResource&& other) noexcept = default; // move constructor

    ResourcesMetrics_ready_stateResource& operator=(const ResourcesMetrics_ready_stateResource& other) = default; // copy assignment
    ResourcesMetrics_ready_stateResource& operator=(ResourcesMetrics_ready_stateResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, BookClosedResponse>(
        std::string & date)> handler_GET_func =
            [](std::string &) -> std::pair<int, BookClosedResponse>
                { throw ResourcesApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, BookClosedResponse> handler_GET(
        std::string & date);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleResourcesApiException(const ResourcesApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get targeting options
/// </summary>
/// <remarks>
/// &lt;p&gt;You can use targeting values in ads placement to define your intended audience. &lt;/p&gt; &lt;p&gt;Targeting metrics are organized around targeting specifications.&lt;/p&gt; &lt;p&gt;For more information on ads targeting, see &lt;a class&#x3D;\&quot;reference external\&quot; href&#x3D;\&quot;https://help.pinterest.com/en/business/article/audience-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Audience targeting&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Sample return:&lt;/b&gt;&lt;/p&gt; &lt;pre class&#x3D;\&quot;literal-block\&quot;&gt; [{&amp;quot;36313&amp;quot;: &amp;quot;Australia: Moreton Bay - North&amp;quot;, &amp;quot;124735&amp;quot;: &amp;quot;Canada: North Battleford&amp;quot;, &amp;quot;36109&amp;quot;: &amp;quot;Australia: Murray&amp;quot;, &amp;quot;36108&amp;quot;: &amp;quot;Australia: Mid North Coast&amp;quot;, &amp;quot;36101&amp;quot;: &amp;quot;Australia: Capital Region&amp;quot;, &amp;quot;811&amp;quot;: &amp;quot;U.S.: Reno&amp;quot;, &amp;quot;36103&amp;quot;: &amp;quot;Australia: Central West&amp;quot;, &amp;quot;36102&amp;quot;: &amp;quot;Australia: Central Coast&amp;quot;, &amp;quot;36105&amp;quot;: &amp;quot;Australia: Far West and Orana&amp;quot;, &amp;quot;36104&amp;quot;: &amp;quot;Australia: Coffs Harbour - Grafton&amp;quot;, &amp;quot;36107&amp;quot;: &amp;quot;Australia: Illawarra&amp;quot;, &amp;quot;36106&amp;quot;: &amp;quot;Australia: Hunter Valley Exc Newcastle&amp;quot;, &amp;quot;554017&amp;quot;: &amp;quot;New Zealand: Wanganui&amp;quot;, &amp;quot;554016&amp;quot;: &amp;quot;New Zealand: Marlborough&amp;quot;, &amp;quot;554015&amp;quot;: &amp;quot;New Zealand: Gisborne&amp;quot;, &amp;quot;554014&amp;quot;: &amp;quot;New Zealand: Tararua&amp;quot;, &amp;quot;554013&amp;quot;: &amp;quot;New Zealand: Invercargill&amp;quot;, &amp;quot;GR&amp;quot;: &amp;quot;Greece&amp;quot;, &amp;quot;554011&amp;quot;: &amp;quot;New Zealand: Whangarei&amp;quot;, &amp;quot;554010&amp;quot;: &amp;quot;New Zealand: Far North&amp;quot;, &amp;quot;717&amp;quot;: &amp;quot;U.S.: Quincy-Hannibal-Keokuk&amp;quot;, &amp;quot;716&amp;quot;: &amp;quot;U.S.: Baton Rouge&amp;quot;,...}] &lt;/pre&gt;
/// </remarks>
class  ResourcesTargetingTargeting_typeResource: public restbed::Resource
{
public:
    ResourcesTargetingTargeting_typeResource(const std::string& context = "/v5");
    virtual ~ResourcesTargetingTargeting_typeResource() = default;

    ResourcesTargetingTargeting_typeResource(
        const ResourcesTargetingTargeting_typeResource& other) = default; // copy constructor
    ResourcesTargetingTargeting_typeResource(ResourcesTargetingTargeting_typeResource&& other) noexcept = default; // move constructor

    ResourcesTargetingTargeting_typeResource& operator=(const ResourcesTargetingTargeting_typeResource& other) = default; // copy assignment
    ResourcesTargetingTargeting_typeResource& operator=(ResourcesTargetingTargeting_typeResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::vector<std::string>>(
        std::string & targetingType, std::string & clientId, std::string & oauthSignature, std::string & timestamp, std::string & adAccountId)> handler_GET_func =
            [](std::string &, std::string &, std::string &, std::string &, std::string &) -> std::pair<int, std::vector<std::string>>
                { throw ResourcesApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<std::string>> handler_GET(
        std::string & targetingType, std::string & clientId, std::string & oauthSignature, std::string & timestamp, std::string & adAccountId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleResourcesApiException(const ResourcesApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace ResourcesApiResources */

using ResourcesApiResourcesAd_account_countriesResource [[deprecated]] = ResourcesApiResources::ResourcesAd_account_countriesResource;
using ResourcesApiResourcesDelivery_metricsResource [[deprecated]] = ResourcesApiResources::ResourcesDelivery_metricsResource;
using ResourcesApiResourcesTargetingInterestsInterest_idResource [[deprecated]] = ResourcesApiResources::ResourcesTargetingInterestsInterest_idResource;
using ResourcesApiResourcesLead_form_questionsResource [[deprecated]] = ResourcesApiResources::ResourcesLead_form_questionsResource;
using ResourcesApiResourcesMetrics_ready_stateResource [[deprecated]] = ResourcesApiResources::ResourcesMetrics_ready_stateResource;
using ResourcesApiResourcesTargetingTargeting_typeResource [[deprecated]] = ResourcesApiResources::ResourcesTargetingTargeting_typeResource;

//
// The restbed service to actually implement the REST server
//
class  ResourcesApi
{
public:
    explicit ResourcesApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~ResourcesApi();

    std::shared_ptr<ResourcesApiResources::ResourcesAd_account_countriesResource> getResourcesAd_account_countriesResource();
    std::shared_ptr<ResourcesApiResources::ResourcesDelivery_metricsResource> getResourcesDelivery_metricsResource();
    std::shared_ptr<ResourcesApiResources::ResourcesTargetingInterestsInterest_idResource> getResourcesTargetingInterestsInterest_idResource();
    std::shared_ptr<ResourcesApiResources::ResourcesLead_form_questionsResource> getResourcesLead_form_questionsResource();
    std::shared_ptr<ResourcesApiResources::ResourcesMetrics_ready_stateResource> getResourcesMetrics_ready_stateResource();
    std::shared_ptr<ResourcesApiResources::ResourcesTargetingTargeting_typeResource> getResourcesTargetingTargeting_typeResource();

    void setResource(std::shared_ptr<ResourcesApiResources::ResourcesAd_account_countriesResource> resource);
    void setResource(std::shared_ptr<ResourcesApiResources::ResourcesDelivery_metricsResource> resource);
    void setResource(std::shared_ptr<ResourcesApiResources::ResourcesTargetingInterestsInterest_idResource> resource);
    void setResource(std::shared_ptr<ResourcesApiResources::ResourcesLead_form_questionsResource> resource);
    void setResource(std::shared_ptr<ResourcesApiResources::ResourcesMetrics_ready_stateResource> resource);
    void setResource(std::shared_ptr<ResourcesApiResources::ResourcesTargetingTargeting_typeResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setResourcesApiResourcesAd_account_countriesResource(std::shared_ptr<ResourcesApiResources::ResourcesAd_account_countriesResource> spResourcesApiResourcesAd_account_countriesResource);
    [[deprecated("use setResource()")]]
    virtual void setResourcesApiResourcesDelivery_metricsResource(std::shared_ptr<ResourcesApiResources::ResourcesDelivery_metricsResource> spResourcesApiResourcesDelivery_metricsResource);
    [[deprecated("use setResource()")]]
    virtual void setResourcesApiResourcesTargetingInterestsInterest_idResource(std::shared_ptr<ResourcesApiResources::ResourcesTargetingInterestsInterest_idResource> spResourcesApiResourcesTargetingInterestsInterest_idResource);
    [[deprecated("use setResource()")]]
    virtual void setResourcesApiResourcesLead_form_questionsResource(std::shared_ptr<ResourcesApiResources::ResourcesLead_form_questionsResource> spResourcesApiResourcesLead_form_questionsResource);
    [[deprecated("use setResource()")]]
    virtual void setResourcesApiResourcesMetrics_ready_stateResource(std::shared_ptr<ResourcesApiResources::ResourcesMetrics_ready_stateResource> spResourcesApiResourcesMetrics_ready_stateResource);
    [[deprecated("use setResource()")]]
    virtual void setResourcesApiResourcesTargetingTargeting_typeResource(std::shared_ptr<ResourcesApiResources::ResourcesTargetingTargeting_typeResource> spResourcesApiResourcesTargetingTargeting_typeResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<ResourcesApiResources::ResourcesAd_account_countriesResource> m_spResourcesAd_account_countriesResource;
    std::shared_ptr<ResourcesApiResources::ResourcesDelivery_metricsResource> m_spResourcesDelivery_metricsResource;
    std::shared_ptr<ResourcesApiResources::ResourcesTargetingInterestsInterest_idResource> m_spResourcesTargetingInterestsInterest_idResource;
    std::shared_ptr<ResourcesApiResources::ResourcesLead_form_questionsResource> m_spResourcesLead_form_questionsResource;
    std::shared_ptr<ResourcesApiResources::ResourcesMetrics_ready_stateResource> m_spResourcesMetrics_ready_stateResource;
    std::shared_ptr<ResourcesApiResources::ResourcesTargetingTargeting_typeResource> m_spResourcesTargetingTargeting_typeResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* ResourcesApi_H_ */

