/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CustomerListsApi.h
 *
 * 
 */

#ifndef CustomerListsApi_H_
#define CustomerListsApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "CustomerList.h"
#include "CustomerListRequest.h"
#include "CustomerListUpdateRequest.h"
#include "Customer_lists_list_200_response.h"
#include "Error.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  CustomerListsApiException: public std::exception
{
public:
    CustomerListsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace CustomerListsApiResources {
/// <summary>
/// Create customer lists
/// </summary>
/// <remarks>
/// &lt;p&gt;Create a customer list from your records(hashed or plain-text email addresses, or hashed MAIDs or IDFAs).&lt;/p&gt; &lt;p&gt;A customer list is one of the four types of Pinterest audiences: for more information, see &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/audience-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Audience targeting&lt;/a&gt; or the &lt;a href&#x3D;\&quot;/docs/api-features/targeting-overview/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Audiences&lt;/a&gt; section of the ads management guide.&lt;p/&gt;  &lt;p&gt;&lt;b&gt;Please review our &lt;u&gt;&lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/audience-targeting#section-13341\&quot; target&#x3D;\&quot;_blank\&quot;&gt;requirements&lt;/a&gt;&lt;/u&gt; for what type of information is allowed when uploading a customer list.&lt;/b&gt;&lt;/p&gt; &lt;p&gt;When you create a customer list, the system scans the list for existing Pinterest accounts; the list must include at least 100 Pinterest accounts. Your original list will be deleted when the matching process is complete. The filtered list – containing only the Pinterest accounts that were included in your starting list – is what will be used to create the audience.&lt;/p&gt; &lt;p&gt;Note that once you have created your customer list, you must convert it into an audience (of the “ CUSTOMER_LIST” type) using the &lt;a href&#x3D;\&quot;#operation/create_audience_handler\&quot;&gt;create audience endpoint&lt;/a&gt; before it can be used.&lt;/p&gt;
/// </remarks>
class  Ad_accountsAd_account_idCustomer_listsResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idCustomer_listsResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idCustomer_listsResource() = default;

    Ad_accountsAd_account_idCustomer_listsResource(
        const Ad_accountsAd_account_idCustomer_listsResource& other) = default; // copy constructor
    Ad_accountsAd_account_idCustomer_listsResource(Ad_accountsAd_account_idCustomer_listsResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idCustomer_listsResource& operator=(const Ad_accountsAd_account_idCustomer_listsResource& other) = default; // copy assignment
    Ad_accountsAd_account_idCustomer_listsResource& operator=(Ad_accountsAd_account_idCustomer_listsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, CustomerList>(
        std::string & adAccountId, CustomerListRequest & customerListRequest)> handler_POST_func =
            [](std::string &, CustomerListRequest &) -> std::pair<int, CustomerList>
                { throw CustomerListsApiException(501, "Not implemented"); };

    std::function<std::pair<int, Customer_lists_list_200_response>(
        std::string & adAccountId, int32_t & pageSize, std::string & order, std::string & bookmark)> handler_GET_func =
            [](std::string &, int32_t &, std::string &, std::string &) -> std::pair<int, Customer_lists_list_200_response>
                { throw CustomerListsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, CustomerList> handler_POST(
        std::string & adAccountId, CustomerListRequest & customerListRequest);

    virtual std::pair<int, Customer_lists_list_200_response> handler_GET(
        std::string & adAccountId, int32_t & pageSize, std::string & order, std::string & bookmark);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCustomerListsApiException(const CustomerListsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get customer list
/// </summary>
/// <remarks>
/// Gets a specific customer list given the customer list ID.
/// </remarks>
class  Ad_accountsAd_account_idCustomer_listsCustomer_list_idResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idCustomer_listsCustomer_list_idResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idCustomer_listsCustomer_list_idResource() = default;

    Ad_accountsAd_account_idCustomer_listsCustomer_list_idResource(
        const Ad_accountsAd_account_idCustomer_listsCustomer_list_idResource& other) = default; // copy constructor
    Ad_accountsAd_account_idCustomer_listsCustomer_list_idResource(Ad_accountsAd_account_idCustomer_listsCustomer_list_idResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idCustomer_listsCustomer_list_idResource& operator=(const Ad_accountsAd_account_idCustomer_listsCustomer_list_idResource& other) = default; // copy assignment
    Ad_accountsAd_account_idCustomer_listsCustomer_list_idResource& operator=(Ad_accountsAd_account_idCustomer_listsCustomer_list_idResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, CustomerList>(
        std::string & adAccountId, std::string & customerListId)> handler_GET_func =
            [](std::string &, std::string &) -> std::pair<int, CustomerList>
                { throw CustomerListsApiException(501, "Not implemented"); };

    std::function<std::pair<int, CustomerList>(
        std::string & adAccountId, std::string & customerListId, CustomerListUpdateRequest & customerListUpdateRequest)> handler_PATCH_func =
            [](std::string &, std::string &, CustomerListUpdateRequest &) -> std::pair<int, CustomerList>
                { throw CustomerListsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, CustomerList> handler_GET(
        std::string & adAccountId, std::string & customerListId);

    virtual std::pair<int, CustomerList> handler_PATCH(
        std::string & adAccountId, std::string & customerListId, CustomerListUpdateRequest & customerListUpdateRequest);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleCustomerListsApiException(const CustomerListsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PATCH_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace CustomerListsApiResources */

using CustomerListsApiAd_accountsAd_account_idCustomer_listsResource [[deprecated]] = CustomerListsApiResources::Ad_accountsAd_account_idCustomer_listsResource;
using CustomerListsApiAd_accountsAd_account_idCustomer_listsCustomer_list_idResource [[deprecated]] = CustomerListsApiResources::Ad_accountsAd_account_idCustomer_listsCustomer_list_idResource;

//
// The restbed service to actually implement the REST server
//
class  CustomerListsApi
{
public:
    explicit CustomerListsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~CustomerListsApi();

    std::shared_ptr<CustomerListsApiResources::Ad_accountsAd_account_idCustomer_listsResource> getAd_accountsAd_account_idCustomer_listsResource();
    std::shared_ptr<CustomerListsApiResources::Ad_accountsAd_account_idCustomer_listsCustomer_list_idResource> getAd_accountsAd_account_idCustomer_listsCustomer_list_idResource();

    void setResource(std::shared_ptr<CustomerListsApiResources::Ad_accountsAd_account_idCustomer_listsResource> resource);
    void setResource(std::shared_ptr<CustomerListsApiResources::Ad_accountsAd_account_idCustomer_listsCustomer_list_idResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setCustomerListsApiAd_accountsAd_account_idCustomer_listsResource(std::shared_ptr<CustomerListsApiResources::Ad_accountsAd_account_idCustomer_listsResource> spCustomerListsApiAd_accountsAd_account_idCustomer_listsResource);
    [[deprecated("use setResource()")]]
    virtual void setCustomerListsApiAd_accountsAd_account_idCustomer_listsCustomer_list_idResource(std::shared_ptr<CustomerListsApiResources::Ad_accountsAd_account_idCustomer_listsCustomer_list_idResource> spCustomerListsApiAd_accountsAd_account_idCustomer_listsCustomer_list_idResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<CustomerListsApiResources::Ad_accountsAd_account_idCustomer_listsResource> m_spAd_accountsAd_account_idCustomer_listsResource;
    std::shared_ptr<CustomerListsApiResources::Ad_accountsAd_account_idCustomer_listsCustomer_list_idResource> m_spAd_accountsAd_account_idCustomer_listsCustomer_list_idResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* CustomerListsApi_H_ */

