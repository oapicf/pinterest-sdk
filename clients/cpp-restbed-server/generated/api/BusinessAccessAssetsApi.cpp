/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "BusinessAccessAssetsApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

namespace {
[[maybe_unused]]
std::string selectPreferredContentType(const std::vector<std::string>& contentTypes) {
    if (contentTypes.size() == 0) {
        return "application/json";
    }

    if (contentTypes.size() == 1) {
        return contentTypes.at(0);
    }

    static const std::array<std::string, 2> preferredTypes = {"json", "xml"};
    for (const auto& preferredType: preferredTypes) {
        const auto ret = std::find_if(contentTypes.cbegin(),
        contentTypes.cend(),
        [preferredType](const std::string& str) {
            return str.find(preferredType) != std::string::npos;});
        if (ret != contentTypes.cend()) {
            return *ret;
        }
    }

    return contentTypes.at(0);
}
}

BusinessAccessAssetsApiException::BusinessAccessAssetsApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int BusinessAccessAssetsApiException::getStatus() const
{
    return m_status;
}
const char* BusinessAccessAssetsApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
MODEL_T extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = MODEL_T(pt);
    return model;
}

template<class MODEL_T>
std::vector<MODEL_T> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<MODEL_T>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(MODEL_T(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

namespace BusinessAccessAssetsApiResources {
BusinessesBusiness_idAsset_groupsResource::BusinessesBusiness_idAsset_groupsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/businesses/{business_id: .*}/asset_groups");
	this->set_method_handler("POST",
		std::bind(&BusinessesBusiness_idAsset_groupsResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("DELETE",
		std::bind(&BusinessesBusiness_idAsset_groupsResource::handler_DELETE_internal, this,
			std::placeholders::_1));
	this->set_method_handler("PATCH",
		std::bind(&BusinessesBusiness_idAsset_groupsResource::handler_PATCH_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BusinessesBusiness_idAsset_groupsResource::handleBusinessAccessAssetsApiException(const BusinessAccessAssetsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BusinessesBusiness_idAsset_groupsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BusinessesBusiness_idAsset_groupsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BusinessesBusiness_idAsset_groupsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BusinessesBusiness_idAsset_groupsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BusinessesBusiness_idAsset_groupsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BusinessesBusiness_idAsset_groupsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto createAssetGroupBody = extractJsonModelBodyParam<CreateAssetGroupBody>(bodyContent);
    // Getting the path params
    std::string businessId = request->get_path_parameter("business_id", "");
    
    int status_code = 500;
    CreateAssetGroupResponse resultObject = CreateAssetGroupResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(businessId, createAssetGroupBody);
    }
    catch(const BusinessAccessAssetsApiException& e) {
        std::tie(status_code, result) = handleBusinessAccessAssetsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid parameters.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void BusinessesBusiness_idAsset_groupsResource::handler_DELETE_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto deleteAssetGroupBody = extractJsonModelBodyParam<DeleteAssetGroupBody>(bodyContent);
    // Getting the path params
    std::string businessId = request->get_path_parameter("business_id", "");
    
    int status_code = 500;
    DeleteAssetGroupResponse resultObject = DeleteAssetGroupResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_DELETE(businessId, deleteAssetGroupBody);
    }
    catch(const BusinessAccessAssetsApiException& e) {
        std::tie(status_code, result) = handleBusinessAccessAssetsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid parameters.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}
// x-extension
void BusinessesBusiness_idAsset_groupsResource::handler_PATCH_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto updateAssetGroupBody = extractJsonModelBodyParam<UpdateAssetGroupBody>(bodyContent);
    // Getting the path params
    std::string businessId = request->get_path_parameter("business_id", "");
    
    int status_code = 500;
    UpdateAssetGroupResponse resultObject = UpdateAssetGroupResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_PATCH(businessId, updateAssetGroupBody);
    }
    catch(const BusinessAccessAssetsApiException& e) {
        std::tie(status_code, result) = handleBusinessAccessAssetsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid parameters.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, CreateAssetGroupResponse> BusinessesBusiness_idAsset_groupsResource::handler_POST(
        std::string & businessId, CreateAssetGroupBody & createAssetGroupBody)
{
    return handler_POST_func(businessId, createAssetGroupBody);
}

std::pair<int, DeleteAssetGroupResponse> BusinessesBusiness_idAsset_groupsResource::handler_DELETE(
    std::string & businessId, DeleteAssetGroupBody & deleteAssetGroupBody)
{
    return handler_DELETE_func(businessId, deleteAssetGroupBody);
}
std::pair<int, UpdateAssetGroupResponse> BusinessesBusiness_idAsset_groupsResource::handler_PATCH(
    std::string & businessId, UpdateAssetGroupBody & updateAssetGroupBody)
{
    return handler_PATCH_func(businessId, updateAssetGroupBody);
}

std::string BusinessesBusiness_idAsset_groupsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BusinessesBusiness_idAsset_groupsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BusinessesBusiness_idAssetsAsset_idMembersResource::BusinessesBusiness_idAssetsAsset_idMembersResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/businesses/{business_id: .*}/assets/{asset_id: .*}/members");
	this->set_method_handler("GET",
		std::bind(&BusinessesBusiness_idAssetsAsset_idMembersResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BusinessesBusiness_idAssetsAsset_idMembersResource::handleBusinessAccessAssetsApiException(const BusinessAccessAssetsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BusinessesBusiness_idAssetsAsset_idMembersResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BusinessesBusiness_idAssetsAsset_idMembersResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BusinessesBusiness_idAssetsAsset_idMembersResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BusinessesBusiness_idAssetsAsset_idMembersResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BusinessesBusiness_idAssetsAsset_idMembersResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BusinessesBusiness_idAssetsAsset_idMembersResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string businessId = request->get_path_parameter("business_id", "");
    std::string assetId = request->get_path_parameter("asset_id", "");
    // Getting the query params
    std::string bookmark = request->get_query_parameter("bookmark", "");
    int32_t pageSize = request->get_query_parameter("pageSize", 25);
    int32_t startIndex = request->get_query_parameter("startIndex", 0);
    
    int status_code = 500;
    Business_asset_members_get_200_response resultObject = Business_asset_members_get_200_response{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(businessId, assetId, bookmark, pageSize, startIndex);
    }
    catch(const BusinessAccessAssetsApiException& e) {
        std::tie(status_code, result) = handleBusinessAccessAssetsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, Business_asset_members_get_200_response> BusinessesBusiness_idAssetsAsset_idMembersResource::handler_GET(
        std::string & businessId, std::string & assetId, std::string & bookmark, int32_t & pageSize, int32_t & startIndex)
{
    return handler_GET_func(businessId, assetId, bookmark, pageSize, startIndex);
}


std::string BusinessesBusiness_idAssetsAsset_idMembersResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BusinessesBusiness_idAssetsAsset_idMembersResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BusinessesBusiness_idAssetsAsset_idPartnersResource::BusinessesBusiness_idAssetsAsset_idPartnersResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/businesses/{business_id: .*}/assets/{asset_id: .*}/partners");
	this->set_method_handler("GET",
		std::bind(&BusinessesBusiness_idAssetsAsset_idPartnersResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BusinessesBusiness_idAssetsAsset_idPartnersResource::handleBusinessAccessAssetsApiException(const BusinessAccessAssetsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BusinessesBusiness_idAssetsAsset_idPartnersResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BusinessesBusiness_idAssetsAsset_idPartnersResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BusinessesBusiness_idAssetsAsset_idPartnersResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BusinessesBusiness_idAssetsAsset_idPartnersResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BusinessesBusiness_idAssetsAsset_idPartnersResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BusinessesBusiness_idAssetsAsset_idPartnersResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string businessId = request->get_path_parameter("business_id", "");
    std::string assetId = request->get_path_parameter("asset_id", "");
    // Getting the query params
    int32_t startIndex = request->get_query_parameter("startIndex", 0);
    std::string bookmark = request->get_query_parameter("bookmark", "");
    int32_t pageSize = request->get_query_parameter("pageSize", 25);
    
    int status_code = 500;
    Business_asset_partners_get_200_response resultObject = Business_asset_partners_get_200_response{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(businessId, assetId, startIndex, bookmark, pageSize);
    }
    catch(const BusinessAccessAssetsApiException& e) {
        std::tie(status_code, result) = handleBusinessAccessAssetsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, Business_asset_partners_get_200_response> BusinessesBusiness_idAssetsAsset_idPartnersResource::handler_GET(
        std::string & businessId, std::string & assetId, int32_t & startIndex, std::string & bookmark, int32_t & pageSize)
{
    return handler_GET_func(businessId, assetId, startIndex, bookmark, pageSize);
}


std::string BusinessesBusiness_idAssetsAsset_idPartnersResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BusinessesBusiness_idAssetsAsset_idPartnersResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BusinessesBusiness_idAssetsResource::BusinessesBusiness_idAssetsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/businesses/{business_id: .*}/assets");
	this->set_method_handler("GET",
		std::bind(&BusinessesBusiness_idAssetsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BusinessesBusiness_idAssetsResource::handleBusinessAccessAssetsApiException(const BusinessAccessAssetsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BusinessesBusiness_idAssetsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BusinessesBusiness_idAssetsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BusinessesBusiness_idAssetsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BusinessesBusiness_idAssetsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BusinessesBusiness_idAssetsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BusinessesBusiness_idAssetsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string businessId = request->get_path_parameter("business_id", "");
    // Getting the query params
    std::string permissions_raw = request->get_query_parameter("permissions");
    std::vector<PermissionsWithOwner> permissions;
    std::vector<std::string> permissions_temp;
    boost::split(permissions_temp, permissions_raw, boost::is_any_of(","));
    std::transform(permissions_temp.begin(), permissions_temp.end(), std::back_inserter(permissions), [](const auto& i){ PermissionsWithOwner ret; ret.fromString(i); return ret;});
    std::string childAssetId = request->get_query_parameter("childAssetId", "");
    std::string assetGroupId = request->get_query_parameter("assetGroupId", "");
    std::string assetType = request->get_query_parameter("assetType", "AD_ACCOUNT");
    int32_t startIndex = request->get_query_parameter("startIndex", 0);
    std::string bookmark = request->get_query_parameter("bookmark", "");
    int32_t pageSize = request->get_query_parameter("pageSize", 25);
    
    int status_code = 500;
    Business_assets_get_200_response resultObject = Business_assets_get_200_response{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(businessId, permissions, childAssetId, assetGroupId, assetType, startIndex, bookmark, pageSize);
    }
    catch(const BusinessAccessAssetsApiException& e) {
        std::tie(status_code, result) = handleBusinessAccessAssetsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, Business_assets_get_200_response> BusinessesBusiness_idAssetsResource::handler_GET(
        std::string & businessId, std::vector<PermissionsWithOwner> & permissions, std::string & childAssetId, std::string & assetGroupId, std::string & assetType, int32_t & startIndex, std::string & bookmark, int32_t & pageSize)
{
    return handler_GET_func(businessId, permissions, childAssetId, assetGroupId, assetType, startIndex, bookmark, pageSize);
}


std::string BusinessesBusiness_idAssetsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BusinessesBusiness_idAssetsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BusinessesBusiness_idMembersMember_idAssetsResource::BusinessesBusiness_idMembersMember_idAssetsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/businesses/{business_id: .*}/members/{member_id: .*}/assets");
	this->set_method_handler("GET",
		std::bind(&BusinessesBusiness_idMembersMember_idAssetsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BusinessesBusiness_idMembersMember_idAssetsResource::handleBusinessAccessAssetsApiException(const BusinessAccessAssetsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BusinessesBusiness_idMembersMember_idAssetsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BusinessesBusiness_idMembersMember_idAssetsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BusinessesBusiness_idMembersMember_idAssetsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BusinessesBusiness_idMembersMember_idAssetsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BusinessesBusiness_idMembersMember_idAssetsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BusinessesBusiness_idMembersMember_idAssetsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string businessId = request->get_path_parameter("business_id", "");
    std::string memberId = request->get_path_parameter("member_id", "");
    // Getting the query params
    std::string assetType = request->get_query_parameter("assetType", "AD_ACCOUNT");
    int32_t startIndex = request->get_query_parameter("startIndex", 0);
    std::string bookmark = request->get_query_parameter("bookmark", "");
    int32_t pageSize = request->get_query_parameter("pageSize", 25);
    
    int status_code = 500;
    Business_member_assets_get_200_response resultObject = Business_member_assets_get_200_response{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(businessId, memberId, assetType, startIndex, bookmark, pageSize);
    }
    catch(const BusinessAccessAssetsApiException& e) {
        std::tie(status_code, result) = handleBusinessAccessAssetsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, Business_member_assets_get_200_response> BusinessesBusiness_idMembersMember_idAssetsResource::handler_GET(
        std::string & businessId, std::string & memberId, std::string & assetType, int32_t & startIndex, std::string & bookmark, int32_t & pageSize)
{
    return handler_GET_func(businessId, memberId, assetType, startIndex, bookmark, pageSize);
}


std::string BusinessesBusiness_idMembersMember_idAssetsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BusinessesBusiness_idMembersMember_idAssetsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BusinessesBusiness_idMembersAssetsAccessResource::BusinessesBusiness_idMembersAssetsAccessResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/businesses/{business_id: .*}/members/assets/access");
	this->set_method_handler("DELETE",
		std::bind(&BusinessesBusiness_idMembersAssetsAccessResource::handler_DELETE_internal, this,
			std::placeholders::_1));
	this->set_method_handler("PATCH",
		std::bind(&BusinessesBusiness_idMembersAssetsAccessResource::handler_PATCH_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BusinessesBusiness_idMembersAssetsAccessResource::handleBusinessAccessAssetsApiException(const BusinessAccessAssetsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BusinessesBusiness_idMembersAssetsAccessResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BusinessesBusiness_idMembersAssetsAccessResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BusinessesBusiness_idMembersAssetsAccessResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BusinessesBusiness_idMembersAssetsAccessResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BusinessesBusiness_idMembersAssetsAccessResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BusinessesBusiness_idMembersAssetsAccessResource::handler_DELETE_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto businessMembersAssetAccessDeleteRequest = extractJsonModelBodyParam<Business_members_asset_access_delete_request>(bodyContent);
    // Getting the path params
    std::string businessId = request->get_path_parameter("business_id", "");
    
    int status_code = 500;
    DeleteMemberAccessResultsResponseArray resultObject = DeleteMemberAccessResultsResponseArray{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_DELETE(businessId, businessMembersAssetAccessDeleteRequest);
    }
    catch(const BusinessAccessAssetsApiException& e) {
        std::tie(status_code, result) = handleBusinessAccessAssetsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void BusinessesBusiness_idMembersAssetsAccessResource::handler_PATCH_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto updateMemberAssetAccessBody = extractJsonModelBodyParam<UpdateMemberAssetAccessBody>(bodyContent);
    // Getting the path params
    std::string businessId = request->get_path_parameter("business_id", "");
    
    int status_code = 500;
    UpdateMemberAssetsResultsResponseArray resultObject = UpdateMemberAssetsResultsResponseArray{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_PATCH(businessId, updateMemberAssetAccessBody);
    }
    catch(const BusinessAccessAssetsApiException& e) {
        std::tie(status_code, result) = handleBusinessAccessAssetsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, DeleteMemberAccessResultsResponseArray> BusinessesBusiness_idMembersAssetsAccessResource::handler_DELETE(
        std::string & businessId, Business_members_asset_access_delete_request & businessMembersAssetAccessDeleteRequest)
{
    return handler_DELETE_func(businessId, businessMembersAssetAccessDeleteRequest);
}

std::pair<int, UpdateMemberAssetsResultsResponseArray> BusinessesBusiness_idMembersAssetsAccessResource::handler_PATCH(
    std::string & businessId, UpdateMemberAssetAccessBody & updateMemberAssetAccessBody)
{
    return handler_PATCH_func(businessId, updateMemberAssetAccessBody);
}

std::string BusinessesBusiness_idMembersAssetsAccessResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BusinessesBusiness_idMembersAssetsAccessResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BusinessesBusiness_idPartnersPartner_idAssetsResource::BusinessesBusiness_idPartnersPartner_idAssetsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/businesses/{business_id: .*}/partners/{partner_id: .*}/assets");
	this->set_method_handler("GET",
		std::bind(&BusinessesBusiness_idPartnersPartner_idAssetsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BusinessesBusiness_idPartnersPartner_idAssetsResource::handleBusinessAccessAssetsApiException(const BusinessAccessAssetsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BusinessesBusiness_idPartnersPartner_idAssetsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BusinessesBusiness_idPartnersPartner_idAssetsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BusinessesBusiness_idPartnersPartner_idAssetsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BusinessesBusiness_idPartnersPartner_idAssetsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BusinessesBusiness_idPartnersPartner_idAssetsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BusinessesBusiness_idPartnersPartner_idAssetsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string businessId = request->get_path_parameter("business_id", "");
    std::string partnerId = request->get_path_parameter("partner_id", "");
    // Getting the query params
    std::string assetType = request->get_query_parameter("assetType", "AD_ACCOUNT");
    int32_t startIndex = request->get_query_parameter("startIndex", 0);
    int32_t pageSize = request->get_query_parameter("pageSize", 25);
    std::string bookmark = request->get_query_parameter("bookmark", "");
    
    int status_code = 500;
    Business_partner_asset_access_get_200_response resultObject = Business_partner_asset_access_get_200_response{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(businessId, partnerId, partnerType, assetType, startIndex, pageSize, bookmark);
    }
    catch(const BusinessAccessAssetsApiException& e) {
        std::tie(status_code, result) = handleBusinessAccessAssetsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, Business_partner_asset_access_get_200_response> BusinessesBusiness_idPartnersPartner_idAssetsResource::handler_GET(
        std::string & businessId, std::string & partnerId, PartnerType & partnerType, std::string & assetType, int32_t & startIndex, int32_t & pageSize, std::string & bookmark)
{
    return handler_GET_func(businessId, partnerId, partnerType, assetType, startIndex, pageSize, bookmark);
}


std::string BusinessesBusiness_idPartnersPartner_idAssetsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BusinessesBusiness_idPartnersPartner_idAssetsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BusinessesBusiness_idPartnersAssetsResource::BusinessesBusiness_idPartnersAssetsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/businesses/{business_id: .*}/partners/assets");
	this->set_method_handler("DELETE",
		std::bind(&BusinessesBusiness_idPartnersAssetsResource::handler_DELETE_internal, this,
			std::placeholders::_1));
	this->set_method_handler("PATCH",
		std::bind(&BusinessesBusiness_idPartnersAssetsResource::handler_PATCH_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BusinessesBusiness_idPartnersAssetsResource::handleBusinessAccessAssetsApiException(const BusinessAccessAssetsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BusinessesBusiness_idPartnersAssetsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BusinessesBusiness_idPartnersAssetsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BusinessesBusiness_idPartnersAssetsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BusinessesBusiness_idPartnersAssetsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BusinessesBusiness_idPartnersAssetsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BusinessesBusiness_idPartnersAssetsResource::handler_DELETE_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto deletePartnerAssetAccessBody = extractJsonModelBodyParam<DeletePartnerAssetAccessBody>(bodyContent);
    // Getting the path params
    std::string businessId = request->get_path_parameter("business_id", "");
    
    int status_code = 500;
    DeletePartnerAssetsResultsResponseArray resultObject = DeletePartnerAssetsResultsResponseArray{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_DELETE(businessId, deletePartnerAssetAccessBody);
    }
    catch(const BusinessAccessAssetsApiException& e) {
        std::tie(status_code, result) = handleBusinessAccessAssetsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void BusinessesBusiness_idPartnersAssetsResource::handler_PATCH_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto updatePartnerAssetAccessBody = extractJsonModelBodyParam<UpdatePartnerAssetAccessBody>(bodyContent);
    // Getting the path params
    std::string businessId = request->get_path_parameter("business_id", "");
    
    int status_code = 500;
    UpdatePartnerAssetsResultsResponseArray resultObject = UpdatePartnerAssetsResultsResponseArray{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_PATCH(businessId, updatePartnerAssetAccessBody);
    }
    catch(const BusinessAccessAssetsApiException& e) {
        std::tie(status_code, result) = handleBusinessAccessAssetsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, DeletePartnerAssetsResultsResponseArray> BusinessesBusiness_idPartnersAssetsResource::handler_DELETE(
        std::string & businessId, DeletePartnerAssetAccessBody & deletePartnerAssetAccessBody)
{
    return handler_DELETE_func(businessId, deletePartnerAssetAccessBody);
}

std::pair<int, UpdatePartnerAssetsResultsResponseArray> BusinessesBusiness_idPartnersAssetsResource::handler_PATCH(
    std::string & businessId, UpdatePartnerAssetAccessBody & updatePartnerAssetAccessBody)
{
    return handler_PATCH_func(businessId, updatePartnerAssetAccessBody);
}

std::string BusinessesBusiness_idPartnersAssetsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BusinessesBusiness_idPartnersAssetsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}

} /* namespace BusinessAccessAssetsApiResources */

BusinessAccessAssetsApi::BusinessAccessAssetsApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

BusinessAccessAssetsApi::~BusinessAccessAssetsApi() {}

std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idAsset_groupsResource> BusinessAccessAssetsApi::getBusinessesBusiness_idAsset_groupsResource() {
    if (!m_spBusinessesBusiness_idAsset_groupsResource) {
        setResource(std::make_shared<BusinessAccessAssetsApiResources::BusinessesBusiness_idAsset_groupsResource>());
    }
    return m_spBusinessesBusiness_idAsset_groupsResource;
}
std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idAssetsAsset_idMembersResource> BusinessAccessAssetsApi::getBusinessesBusiness_idAssetsAsset_idMembersResource() {
    if (!m_spBusinessesBusiness_idAssetsAsset_idMembersResource) {
        setResource(std::make_shared<BusinessAccessAssetsApiResources::BusinessesBusiness_idAssetsAsset_idMembersResource>());
    }
    return m_spBusinessesBusiness_idAssetsAsset_idMembersResource;
}
std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idAssetsAsset_idPartnersResource> BusinessAccessAssetsApi::getBusinessesBusiness_idAssetsAsset_idPartnersResource() {
    if (!m_spBusinessesBusiness_idAssetsAsset_idPartnersResource) {
        setResource(std::make_shared<BusinessAccessAssetsApiResources::BusinessesBusiness_idAssetsAsset_idPartnersResource>());
    }
    return m_spBusinessesBusiness_idAssetsAsset_idPartnersResource;
}
std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idAssetsResource> BusinessAccessAssetsApi::getBusinessesBusiness_idAssetsResource() {
    if (!m_spBusinessesBusiness_idAssetsResource) {
        setResource(std::make_shared<BusinessAccessAssetsApiResources::BusinessesBusiness_idAssetsResource>());
    }
    return m_spBusinessesBusiness_idAssetsResource;
}
std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idMembersMember_idAssetsResource> BusinessAccessAssetsApi::getBusinessesBusiness_idMembersMember_idAssetsResource() {
    if (!m_spBusinessesBusiness_idMembersMember_idAssetsResource) {
        setResource(std::make_shared<BusinessAccessAssetsApiResources::BusinessesBusiness_idMembersMember_idAssetsResource>());
    }
    return m_spBusinessesBusiness_idMembersMember_idAssetsResource;
}
std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idMembersAssetsAccessResource> BusinessAccessAssetsApi::getBusinessesBusiness_idMembersAssetsAccessResource() {
    if (!m_spBusinessesBusiness_idMembersAssetsAccessResource) {
        setResource(std::make_shared<BusinessAccessAssetsApiResources::BusinessesBusiness_idMembersAssetsAccessResource>());
    }
    return m_spBusinessesBusiness_idMembersAssetsAccessResource;
}
std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idPartnersPartner_idAssetsResource> BusinessAccessAssetsApi::getBusinessesBusiness_idPartnersPartner_idAssetsResource() {
    if (!m_spBusinessesBusiness_idPartnersPartner_idAssetsResource) {
        setResource(std::make_shared<BusinessAccessAssetsApiResources::BusinessesBusiness_idPartnersPartner_idAssetsResource>());
    }
    return m_spBusinessesBusiness_idPartnersPartner_idAssetsResource;
}
std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idPartnersAssetsResource> BusinessAccessAssetsApi::getBusinessesBusiness_idPartnersAssetsResource() {
    if (!m_spBusinessesBusiness_idPartnersAssetsResource) {
        setResource(std::make_shared<BusinessAccessAssetsApiResources::BusinessesBusiness_idPartnersAssetsResource>());
    }
    return m_spBusinessesBusiness_idPartnersAssetsResource;
}
void BusinessAccessAssetsApi::setResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idAsset_groupsResource> resource) {
    m_spBusinessesBusiness_idAsset_groupsResource = resource;
    m_service->publish(m_spBusinessesBusiness_idAsset_groupsResource);
}
void BusinessAccessAssetsApi::setResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idAssetsAsset_idMembersResource> resource) {
    m_spBusinessesBusiness_idAssetsAsset_idMembersResource = resource;
    m_service->publish(m_spBusinessesBusiness_idAssetsAsset_idMembersResource);
}
void BusinessAccessAssetsApi::setResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idAssetsAsset_idPartnersResource> resource) {
    m_spBusinessesBusiness_idAssetsAsset_idPartnersResource = resource;
    m_service->publish(m_spBusinessesBusiness_idAssetsAsset_idPartnersResource);
}
void BusinessAccessAssetsApi::setResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idAssetsResource> resource) {
    m_spBusinessesBusiness_idAssetsResource = resource;
    m_service->publish(m_spBusinessesBusiness_idAssetsResource);
}
void BusinessAccessAssetsApi::setResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idMembersMember_idAssetsResource> resource) {
    m_spBusinessesBusiness_idMembersMember_idAssetsResource = resource;
    m_service->publish(m_spBusinessesBusiness_idMembersMember_idAssetsResource);
}
void BusinessAccessAssetsApi::setResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idMembersAssetsAccessResource> resource) {
    m_spBusinessesBusiness_idMembersAssetsAccessResource = resource;
    m_service->publish(m_spBusinessesBusiness_idMembersAssetsAccessResource);
}
void BusinessAccessAssetsApi::setResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idPartnersPartner_idAssetsResource> resource) {
    m_spBusinessesBusiness_idPartnersPartner_idAssetsResource = resource;
    m_service->publish(m_spBusinessesBusiness_idPartnersPartner_idAssetsResource);
}
void BusinessAccessAssetsApi::setResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idPartnersAssetsResource> resource) {
    m_spBusinessesBusiness_idPartnersAssetsResource = resource;
    m_service->publish(m_spBusinessesBusiness_idPartnersAssetsResource);
}
void BusinessAccessAssetsApi::setBusinessAccessAssetsApiBusinessesBusiness_idAsset_groupsResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idAsset_groupsResource> spBusinessesBusiness_idAsset_groupsResource) {
    m_spBusinessesBusiness_idAsset_groupsResource = spBusinessesBusiness_idAsset_groupsResource;
    m_service->publish(m_spBusinessesBusiness_idAsset_groupsResource);
}
void BusinessAccessAssetsApi::setBusinessAccessAssetsApiBusinessesBusiness_idAssetsAsset_idMembersResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idAssetsAsset_idMembersResource> spBusinessesBusiness_idAssetsAsset_idMembersResource) {
    m_spBusinessesBusiness_idAssetsAsset_idMembersResource = spBusinessesBusiness_idAssetsAsset_idMembersResource;
    m_service->publish(m_spBusinessesBusiness_idAssetsAsset_idMembersResource);
}
void BusinessAccessAssetsApi::setBusinessAccessAssetsApiBusinessesBusiness_idAssetsAsset_idPartnersResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idAssetsAsset_idPartnersResource> spBusinessesBusiness_idAssetsAsset_idPartnersResource) {
    m_spBusinessesBusiness_idAssetsAsset_idPartnersResource = spBusinessesBusiness_idAssetsAsset_idPartnersResource;
    m_service->publish(m_spBusinessesBusiness_idAssetsAsset_idPartnersResource);
}
void BusinessAccessAssetsApi::setBusinessAccessAssetsApiBusinessesBusiness_idAssetsResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idAssetsResource> spBusinessesBusiness_idAssetsResource) {
    m_spBusinessesBusiness_idAssetsResource = spBusinessesBusiness_idAssetsResource;
    m_service->publish(m_spBusinessesBusiness_idAssetsResource);
}
void BusinessAccessAssetsApi::setBusinessAccessAssetsApiBusinessesBusiness_idMembersMember_idAssetsResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idMembersMember_idAssetsResource> spBusinessesBusiness_idMembersMember_idAssetsResource) {
    m_spBusinessesBusiness_idMembersMember_idAssetsResource = spBusinessesBusiness_idMembersMember_idAssetsResource;
    m_service->publish(m_spBusinessesBusiness_idMembersMember_idAssetsResource);
}
void BusinessAccessAssetsApi::setBusinessAccessAssetsApiBusinessesBusiness_idMembersAssetsAccessResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idMembersAssetsAccessResource> spBusinessesBusiness_idMembersAssetsAccessResource) {
    m_spBusinessesBusiness_idMembersAssetsAccessResource = spBusinessesBusiness_idMembersAssetsAccessResource;
    m_service->publish(m_spBusinessesBusiness_idMembersAssetsAccessResource);
}
void BusinessAccessAssetsApi::setBusinessAccessAssetsApiBusinessesBusiness_idPartnersPartner_idAssetsResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idPartnersPartner_idAssetsResource> spBusinessesBusiness_idPartnersPartner_idAssetsResource) {
    m_spBusinessesBusiness_idPartnersPartner_idAssetsResource = spBusinessesBusiness_idPartnersPartner_idAssetsResource;
    m_service->publish(m_spBusinessesBusiness_idPartnersPartner_idAssetsResource);
}
void BusinessAccessAssetsApi::setBusinessAccessAssetsApiBusinessesBusiness_idPartnersAssetsResource(std::shared_ptr<BusinessAccessAssetsApiResources::BusinessesBusiness_idPartnersAssetsResource> spBusinessesBusiness_idPartnersAssetsResource) {
    m_spBusinessesBusiness_idPartnersAssetsResource = spBusinessesBusiness_idPartnersAssetsResource;
    m_service->publish(m_spBusinessesBusiness_idPartnersAssetsResource);
}


void BusinessAccessAssetsApi::publishDefaultResources() {
    if (!m_spBusinessesBusiness_idAsset_groupsResource) {
        setResource(std::make_shared<BusinessAccessAssetsApiResources::BusinessesBusiness_idAsset_groupsResource>());
    }
    if (!m_spBusinessesBusiness_idAssetsAsset_idMembersResource) {
        setResource(std::make_shared<BusinessAccessAssetsApiResources::BusinessesBusiness_idAssetsAsset_idMembersResource>());
    }
    if (!m_spBusinessesBusiness_idAssetsAsset_idPartnersResource) {
        setResource(std::make_shared<BusinessAccessAssetsApiResources::BusinessesBusiness_idAssetsAsset_idPartnersResource>());
    }
    if (!m_spBusinessesBusiness_idAssetsResource) {
        setResource(std::make_shared<BusinessAccessAssetsApiResources::BusinessesBusiness_idAssetsResource>());
    }
    if (!m_spBusinessesBusiness_idMembersMember_idAssetsResource) {
        setResource(std::make_shared<BusinessAccessAssetsApiResources::BusinessesBusiness_idMembersMember_idAssetsResource>());
    }
    if (!m_spBusinessesBusiness_idMembersAssetsAccessResource) {
        setResource(std::make_shared<BusinessAccessAssetsApiResources::BusinessesBusiness_idMembersAssetsAccessResource>());
    }
    if (!m_spBusinessesBusiness_idPartnersPartner_idAssetsResource) {
        setResource(std::make_shared<BusinessAccessAssetsApiResources::BusinessesBusiness_idPartnersPartner_idAssetsResource>());
    }
    if (!m_spBusinessesBusiness_idPartnersAssetsResource) {
        setResource(std::make_shared<BusinessAccessAssetsApiResources::BusinessesBusiness_idPartnersAssetsResource>());
    }
}

std::shared_ptr<restbed::Service> BusinessAccessAssetsApi::service() {
    return m_service;
}


}
}
}
}

