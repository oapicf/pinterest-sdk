/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * LeadFormsApi.h
 *
 * 
 */

#ifndef LeadFormsApi_H_
#define LeadFormsApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "Error.h"
#include "LeadFormArrayResponse.h"
#include "LeadFormCreateRequest.h"
#include "LeadFormResponse.h"
#include "LeadFormTestRequest.h"
#include "LeadFormTestResponse.h"
#include "LeadFormUpdateRequest.h"
#include "Lead_forms_list_200_response.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  LeadFormsApiException: public std::exception
{
public:
    LeadFormsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace LeadFormsApiResources {
/// <summary>
/// Create lead form test data
/// </summary>
/// <remarks>
/// Create lead form test data based on the list of answers provided as part of the body. - List of answers should follow the questions creation order.  &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;
/// </remarks>
class  Ad_accountsAd_account_idLead_formsLead_form_idTestResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idLead_formsLead_form_idTestResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idLead_formsLead_form_idTestResource() = default;

    Ad_accountsAd_account_idLead_formsLead_form_idTestResource(
        const Ad_accountsAd_account_idLead_formsLead_form_idTestResource& other) = default; // copy constructor
    Ad_accountsAd_account_idLead_formsLead_form_idTestResource(Ad_accountsAd_account_idLead_formsLead_form_idTestResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idLead_formsLead_form_idTestResource& operator=(const Ad_accountsAd_account_idLead_formsLead_form_idTestResource& other) = default; // copy assignment
    Ad_accountsAd_account_idLead_formsLead_form_idTestResource& operator=(Ad_accountsAd_account_idLead_formsLead_form_idTestResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, LeadFormTestResponse>(
        std::string & adAccountId, std::string & leadFormId, LeadFormTestRequest & leadFormTestRequest)> handler_POST_func =
            [](std::string &, std::string &, LeadFormTestRequest &) -> std::pair<int, LeadFormTestResponse>
                { throw LeadFormsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, LeadFormTestResponse> handler_POST(
        std::string & adAccountId, std::string & leadFormId, LeadFormTestRequest & leadFormTestRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleLeadFormsApiException(const LeadFormsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get lead form by id
/// </summary>
/// <remarks>
/// &lt;strong&gt;This feature is currently in beta and not available to all apps, if you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.&lt;/strong&gt;  Gets a lead form given it&#39;s ID. It must also be associated with the provided ad account ID.  For more, see &lt;a class&#x3D;\&quot;reference external\&quot; href&#x3D;\&quot;https://help.pinterest.com/en/business/article/lead-ads\&quot;&gt;Lead ads&lt;/a&gt;.
/// </remarks>
class  Ad_accountsAd_account_idLead_formsLead_form_idResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idLead_formsLead_form_idResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idLead_formsLead_form_idResource() = default;

    Ad_accountsAd_account_idLead_formsLead_form_idResource(
        const Ad_accountsAd_account_idLead_formsLead_form_idResource& other) = default; // copy constructor
    Ad_accountsAd_account_idLead_formsLead_form_idResource(Ad_accountsAd_account_idLead_formsLead_form_idResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idLead_formsLead_form_idResource& operator=(const Ad_accountsAd_account_idLead_formsLead_form_idResource& other) = default; // copy assignment
    Ad_accountsAd_account_idLead_formsLead_form_idResource& operator=(Ad_accountsAd_account_idLead_formsLead_form_idResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, LeadFormResponse>(
        std::string & adAccountId, std::string & leadFormId)> handler_GET_func =
            [](std::string &, std::string &) -> std::pair<int, LeadFormResponse>
                { throw LeadFormsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, LeadFormResponse> handler_GET(
        std::string & adAccountId, std::string & leadFormId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleLeadFormsApiException(const LeadFormsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Create lead forms
/// </summary>
/// <remarks>
/// &lt;strong&gt;This feature is currently in beta and not available to all apps, if you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.&lt;/strong&gt;  Create lead forms. Lead forms are used in lead ads and allow you to control what text appears on the lead formâ€™ s description, questions and confirmation sections.  For more, see &lt;a class&#x3D;\&quot;reference external\&quot; href&#x3D;\&quot;https://help.pinterest.com/en/business/article/lead-ads\&quot;&gt;Lead ads&lt;/a&gt;.
/// </remarks>
class  Ad_accountsAd_account_idLead_formsResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idLead_formsResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idLead_formsResource() = default;

    Ad_accountsAd_account_idLead_formsResource(
        const Ad_accountsAd_account_idLead_formsResource& other) = default; // copy constructor
    Ad_accountsAd_account_idLead_formsResource(Ad_accountsAd_account_idLead_formsResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idLead_formsResource& operator=(const Ad_accountsAd_account_idLead_formsResource& other) = default; // copy assignment
    Ad_accountsAd_account_idLead_formsResource& operator=(Ad_accountsAd_account_idLead_formsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, LeadFormArrayResponse>(
        std::string & adAccountId, std::vector<LeadFormCreateRequest> & leadFormCreateRequest)> handler_POST_func =
            [](std::string &, std::vector<LeadFormCreateRequest> &) -> std::pair<int, LeadFormArrayResponse>
                { throw LeadFormsApiException(501, "Not implemented"); };

    std::function<std::pair<int, Lead_forms_list_200_response>(
        std::string & adAccountId, int32_t & pageSize, std::string & order, std::string & bookmark)> handler_GET_func =
            [](std::string &, int32_t &, std::string &, std::string &) -> std::pair<int, Lead_forms_list_200_response>
                { throw LeadFormsApiException(501, "Not implemented"); };

    std::function<std::pair<int, LeadFormArrayResponse>(
        std::string & adAccountId, std::vector<LeadFormUpdateRequest> & leadFormUpdateRequest)> handler_PATCH_func =
            [](std::string &, std::vector<LeadFormUpdateRequest> &) -> std::pair<int, LeadFormArrayResponse>
                { throw LeadFormsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, LeadFormArrayResponse> handler_POST(
        std::string & adAccountId, std::vector<LeadFormCreateRequest> & leadFormCreateRequest);

    virtual std::pair<int, Lead_forms_list_200_response> handler_GET(
        std::string & adAccountId, int32_t & pageSize, std::string & order, std::string & bookmark);
    virtual std::pair<int, LeadFormArrayResponse> handler_PATCH(
        std::string & adAccountId, std::vector<LeadFormUpdateRequest> & leadFormUpdateRequest);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleLeadFormsApiException(const LeadFormsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PATCH_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace LeadFormsApiResources */

using LeadFormsApiAd_accountsAd_account_idLead_formsLead_form_idTestResource [[deprecated]] = LeadFormsApiResources::Ad_accountsAd_account_idLead_formsLead_form_idTestResource;
using LeadFormsApiAd_accountsAd_account_idLead_formsLead_form_idResource [[deprecated]] = LeadFormsApiResources::Ad_accountsAd_account_idLead_formsLead_form_idResource;
using LeadFormsApiAd_accountsAd_account_idLead_formsResource [[deprecated]] = LeadFormsApiResources::Ad_accountsAd_account_idLead_formsResource;

//
// The restbed service to actually implement the REST server
//
class  LeadFormsApi
{
public:
    explicit LeadFormsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~LeadFormsApi();

    std::shared_ptr<LeadFormsApiResources::Ad_accountsAd_account_idLead_formsLead_form_idTestResource> getAd_accountsAd_account_idLead_formsLead_form_idTestResource();
    std::shared_ptr<LeadFormsApiResources::Ad_accountsAd_account_idLead_formsLead_form_idResource> getAd_accountsAd_account_idLead_formsLead_form_idResource();
    std::shared_ptr<LeadFormsApiResources::Ad_accountsAd_account_idLead_formsResource> getAd_accountsAd_account_idLead_formsResource();

    void setResource(std::shared_ptr<LeadFormsApiResources::Ad_accountsAd_account_idLead_formsLead_form_idTestResource> resource);
    void setResource(std::shared_ptr<LeadFormsApiResources::Ad_accountsAd_account_idLead_formsLead_form_idResource> resource);
    void setResource(std::shared_ptr<LeadFormsApiResources::Ad_accountsAd_account_idLead_formsResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setLeadFormsApiAd_accountsAd_account_idLead_formsLead_form_idTestResource(std::shared_ptr<LeadFormsApiResources::Ad_accountsAd_account_idLead_formsLead_form_idTestResource> spLeadFormsApiAd_accountsAd_account_idLead_formsLead_form_idTestResource);
    [[deprecated("use setResource()")]]
    virtual void setLeadFormsApiAd_accountsAd_account_idLead_formsLead_form_idResource(std::shared_ptr<LeadFormsApiResources::Ad_accountsAd_account_idLead_formsLead_form_idResource> spLeadFormsApiAd_accountsAd_account_idLead_formsLead_form_idResource);
    [[deprecated("use setResource()")]]
    virtual void setLeadFormsApiAd_accountsAd_account_idLead_formsResource(std::shared_ptr<LeadFormsApiResources::Ad_accountsAd_account_idLead_formsResource> spLeadFormsApiAd_accountsAd_account_idLead_formsResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<LeadFormsApiResources::Ad_accountsAd_account_idLead_formsLead_form_idTestResource> m_spAd_accountsAd_account_idLead_formsLead_form_idTestResource;
    std::shared_ptr<LeadFormsApiResources::Ad_accountsAd_account_idLead_formsLead_form_idResource> m_spAd_accountsAd_account_idLead_formsLead_form_idResource;
    std::shared_ptr<LeadFormsApiResources::Ad_accountsAd_account_idLead_formsResource> m_spAd_accountsAd_account_idLead_formsResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* LeadFormsApi_H_ */

