/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "ConversionTagsApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

namespace {
[[maybe_unused]]
std::string selectPreferredContentType(const std::vector<std::string>& contentTypes) {
    if (contentTypes.size() == 0) {
        return "application/json";
    }

    if (contentTypes.size() == 1) {
        return contentTypes.at(0);
    }

    static const std::array<std::string, 2> preferredTypes = {"json", "xml"};
    for (const auto& preferredType: preferredTypes) {
        const auto ret = std::find_if(contentTypes.cbegin(),
        contentTypes.cend(),
        [preferredType](const std::string& str) {
            return str.find(preferredType) != std::string::npos;});
        if (ret != contentTypes.cend()) {
            return *ret;
        }
    }

    return contentTypes.at(0);
}
}

ConversionTagsApiException::ConversionTagsApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int ConversionTagsApiException::getStatus() const
{
    return m_status;
}
const char* ConversionTagsApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
MODEL_T extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = MODEL_T(pt);
    return model;
}

template<class MODEL_T>
std::vector<MODEL_T> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<MODEL_T>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(MODEL_T(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

namespace ConversionTagsApiResources {
Ad_accountsAd_account_idConversion_tagsResource::Ad_accountsAd_account_idConversion_tagsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/ad_accounts/{ad_account_id: .*}/conversion_tags");
	this->set_method_handler("POST",
		std::bind(&Ad_accountsAd_account_idConversion_tagsResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&Ad_accountsAd_account_idConversion_tagsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> Ad_accountsAd_account_idConversion_tagsResource::handleConversionTagsApiException(const ConversionTagsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idConversion_tagsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idConversion_tagsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void Ad_accountsAd_account_idConversion_tagsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void Ad_accountsAd_account_idConversion_tagsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void Ad_accountsAd_account_idConversion_tagsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void Ad_accountsAd_account_idConversion_tagsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto conversionTagCreate = extractJsonModelBodyParam<ConversionTagCreate>(bodyContent);
    // Getting the path params
    std::string adAccountId = request->get_path_parameter("ad_account_id", "");
    
    int status_code = 500;
    ConversionTagResponse resultObject = ConversionTagResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(adAccountId, conversionTagCreate);
    }
    catch(const ConversionTagsApiException& e) {
        std::tie(status_code, result) = handleConversionTagsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void Ad_accountsAd_account_idConversion_tagsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // Getting the path params
    std::string adAccountId = request->get_path_parameter("ad_account_id", "");
    // Getting the query params
    bool filterDeleted = request->get_query_parameter("filterDeleted", false);
    
    int status_code = 500;
    ConversionTagListResponse resultObject = ConversionTagListResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(adAccountId, filterDeleted);
    }
    catch(const ConversionTagsApiException& e) {
        std::tie(status_code, result) = handleConversionTagsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, ConversionTagResponse> Ad_accountsAd_account_idConversion_tagsResource::handler_POST(
        std::string & adAccountId, ConversionTagCreate & conversionTagCreate)
{
    return handler_POST_func(adAccountId, conversionTagCreate);
}

std::pair<int, ConversionTagListResponse> Ad_accountsAd_account_idConversion_tagsResource::handler_GET(
    std::string & adAccountId, bool & filterDeleted)
{
    return handler_GET_func(adAccountId, filterDeleted);
}

std::string Ad_accountsAd_account_idConversion_tagsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string Ad_accountsAd_account_idConversion_tagsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
Ad_accountsAd_account_idConversion_tagsConversion_tag_idResource::Ad_accountsAd_account_idConversion_tagsConversion_tag_idResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/ad_accounts/{ad_account_id: .*}/conversion_tags/{conversion_tag_id: .*}");
	this->set_method_handler("GET",
		std::bind(&Ad_accountsAd_account_idConversion_tagsConversion_tag_idResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> Ad_accountsAd_account_idConversion_tagsConversion_tag_idResource::handleConversionTagsApiException(const ConversionTagsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idConversion_tagsConversion_tag_idResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idConversion_tagsConversion_tag_idResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void Ad_accountsAd_account_idConversion_tagsConversion_tag_idResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void Ad_accountsAd_account_idConversion_tagsConversion_tag_idResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void Ad_accountsAd_account_idConversion_tagsConversion_tag_idResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void Ad_accountsAd_account_idConversion_tagsConversion_tag_idResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string adAccountId = request->get_path_parameter("ad_account_id", "");
    std::string conversionTagId = request->get_path_parameter("conversion_tag_id", "");
    
    int status_code = 500;
    ConversionTagResponse resultObject = ConversionTagResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(adAccountId, conversionTagId);
    }
    catch(const ConversionTagsApiException& e) {
        std::tie(status_code, result) = handleConversionTagsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, ConversionTagResponse> Ad_accountsAd_account_idConversion_tagsConversion_tag_idResource::handler_GET(
        std::string & adAccountId, std::string & conversionTagId)
{
    return handler_GET_func(adAccountId, conversionTagId);
}


std::string Ad_accountsAd_account_idConversion_tagsConversion_tag_idResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string Ad_accountsAd_account_idConversion_tagsConversion_tag_idResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
Ad_accountsAd_account_idConversion_tagsOcpm_eligibleResource::Ad_accountsAd_account_idConversion_tagsOcpm_eligibleResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/ad_accounts/{ad_account_id: .*}/conversion_tags/ocpm_eligible");
	this->set_method_handler("GET",
		std::bind(&Ad_accountsAd_account_idConversion_tagsOcpm_eligibleResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> Ad_accountsAd_account_idConversion_tagsOcpm_eligibleResource::handleConversionTagsApiException(const ConversionTagsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idConversion_tagsOcpm_eligibleResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idConversion_tagsOcpm_eligibleResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void Ad_accountsAd_account_idConversion_tagsOcpm_eligibleResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void Ad_accountsAd_account_idConversion_tagsOcpm_eligibleResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void Ad_accountsAd_account_idConversion_tagsOcpm_eligibleResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void Ad_accountsAd_account_idConversion_tagsOcpm_eligibleResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string adAccountId = request->get_path_parameter("ad_account_id", "");
    
    int status_code = 500;
    std::map<std::string, std::vector<ConversionEventResponse>> resultObject = std::map<std::string, std::vector>();
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(adAccountId);
    }
    catch(const ConversionTagsApiException& e) {
        std::tie(status_code, result) = handleConversionTagsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = convertMapResponse(resultObject);
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected errors";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, std::map<std::string, std::vector<ConversionEventResponse>>> Ad_accountsAd_account_idConversion_tagsOcpm_eligibleResource::handler_GET(
        std::string & adAccountId)
{
    return handler_GET_func(adAccountId);
}


std::string Ad_accountsAd_account_idConversion_tagsOcpm_eligibleResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string Ad_accountsAd_account_idConversion_tagsOcpm_eligibleResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
Ad_accountsAd_account_idConversion_tagsPage_visitResource::Ad_accountsAd_account_idConversion_tagsPage_visitResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/ad_accounts/{ad_account_id: .*}/conversion_tags/page_visit");
	this->set_method_handler("GET",
		std::bind(&Ad_accountsAd_account_idConversion_tagsPage_visitResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> Ad_accountsAd_account_idConversion_tagsPage_visitResource::handleConversionTagsApiException(const ConversionTagsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idConversion_tagsPage_visitResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> Ad_accountsAd_account_idConversion_tagsPage_visitResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void Ad_accountsAd_account_idConversion_tagsPage_visitResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void Ad_accountsAd_account_idConversion_tagsPage_visitResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void Ad_accountsAd_account_idConversion_tagsPage_visitResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void Ad_accountsAd_account_idConversion_tagsPage_visitResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string adAccountId = request->get_path_parameter("ad_account_id", "");
    // Getting the query params
    int32_t pageSize = request->get_query_parameter("pageSize", 25);
    std::string order = request->get_query_parameter("order", "");
    std::string bookmark = request->get_query_parameter("bookmark", "");
    
    int status_code = 500;
    Page_visit_conversion_tags_get_200_response resultObject = Page_visit_conversion_tags_get_200_response{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(adAccountId, pageSize, order, bookmark);
    }
    catch(const ConversionTagsApiException& e) {
        std::tie(status_code, result) = handleConversionTagsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, Page_visit_conversion_tags_get_200_response> Ad_accountsAd_account_idConversion_tagsPage_visitResource::handler_GET(
        std::string & adAccountId, int32_t & pageSize, std::string & order, std::string & bookmark)
{
    return handler_GET_func(adAccountId, pageSize, order, bookmark);
}


std::string Ad_accountsAd_account_idConversion_tagsPage_visitResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string Ad_accountsAd_account_idConversion_tagsPage_visitResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}

} /* namespace ConversionTagsApiResources */

ConversionTagsApi::ConversionTagsApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

ConversionTagsApi::~ConversionTagsApi() {}

std::shared_ptr<ConversionTagsApiResources::Ad_accountsAd_account_idConversion_tagsResource> ConversionTagsApi::getAd_accountsAd_account_idConversion_tagsResource() {
    if (!m_spAd_accountsAd_account_idConversion_tagsResource) {
        setResource(std::make_shared<ConversionTagsApiResources::Ad_accountsAd_account_idConversion_tagsResource>());
    }
    return m_spAd_accountsAd_account_idConversion_tagsResource;
}
std::shared_ptr<ConversionTagsApiResources::Ad_accountsAd_account_idConversion_tagsConversion_tag_idResource> ConversionTagsApi::getAd_accountsAd_account_idConversion_tagsConversion_tag_idResource() {
    if (!m_spAd_accountsAd_account_idConversion_tagsConversion_tag_idResource) {
        setResource(std::make_shared<ConversionTagsApiResources::Ad_accountsAd_account_idConversion_tagsConversion_tag_idResource>());
    }
    return m_spAd_accountsAd_account_idConversion_tagsConversion_tag_idResource;
}
std::shared_ptr<ConversionTagsApiResources::Ad_accountsAd_account_idConversion_tagsOcpm_eligibleResource> ConversionTagsApi::getAd_accountsAd_account_idConversion_tagsOcpm_eligibleResource() {
    if (!m_spAd_accountsAd_account_idConversion_tagsOcpm_eligibleResource) {
        setResource(std::make_shared<ConversionTagsApiResources::Ad_accountsAd_account_idConversion_tagsOcpm_eligibleResource>());
    }
    return m_spAd_accountsAd_account_idConversion_tagsOcpm_eligibleResource;
}
std::shared_ptr<ConversionTagsApiResources::Ad_accountsAd_account_idConversion_tagsPage_visitResource> ConversionTagsApi::getAd_accountsAd_account_idConversion_tagsPage_visitResource() {
    if (!m_spAd_accountsAd_account_idConversion_tagsPage_visitResource) {
        setResource(std::make_shared<ConversionTagsApiResources::Ad_accountsAd_account_idConversion_tagsPage_visitResource>());
    }
    return m_spAd_accountsAd_account_idConversion_tagsPage_visitResource;
}
void ConversionTagsApi::setResource(std::shared_ptr<ConversionTagsApiResources::Ad_accountsAd_account_idConversion_tagsResource> resource) {
    m_spAd_accountsAd_account_idConversion_tagsResource = resource;
    m_service->publish(m_spAd_accountsAd_account_idConversion_tagsResource);
}
void ConversionTagsApi::setResource(std::shared_ptr<ConversionTagsApiResources::Ad_accountsAd_account_idConversion_tagsConversion_tag_idResource> resource) {
    m_spAd_accountsAd_account_idConversion_tagsConversion_tag_idResource = resource;
    m_service->publish(m_spAd_accountsAd_account_idConversion_tagsConversion_tag_idResource);
}
void ConversionTagsApi::setResource(std::shared_ptr<ConversionTagsApiResources::Ad_accountsAd_account_idConversion_tagsOcpm_eligibleResource> resource) {
    m_spAd_accountsAd_account_idConversion_tagsOcpm_eligibleResource = resource;
    m_service->publish(m_spAd_accountsAd_account_idConversion_tagsOcpm_eligibleResource);
}
void ConversionTagsApi::setResource(std::shared_ptr<ConversionTagsApiResources::Ad_accountsAd_account_idConversion_tagsPage_visitResource> resource) {
    m_spAd_accountsAd_account_idConversion_tagsPage_visitResource = resource;
    m_service->publish(m_spAd_accountsAd_account_idConversion_tagsPage_visitResource);
}
void ConversionTagsApi::setConversionTagsApiAd_accountsAd_account_idConversion_tagsResource(std::shared_ptr<ConversionTagsApiResources::Ad_accountsAd_account_idConversion_tagsResource> spAd_accountsAd_account_idConversion_tagsResource) {
    m_spAd_accountsAd_account_idConversion_tagsResource = spAd_accountsAd_account_idConversion_tagsResource;
    m_service->publish(m_spAd_accountsAd_account_idConversion_tagsResource);
}
void ConversionTagsApi::setConversionTagsApiAd_accountsAd_account_idConversion_tagsConversion_tag_idResource(std::shared_ptr<ConversionTagsApiResources::Ad_accountsAd_account_idConversion_tagsConversion_tag_idResource> spAd_accountsAd_account_idConversion_tagsConversion_tag_idResource) {
    m_spAd_accountsAd_account_idConversion_tagsConversion_tag_idResource = spAd_accountsAd_account_idConversion_tagsConversion_tag_idResource;
    m_service->publish(m_spAd_accountsAd_account_idConversion_tagsConversion_tag_idResource);
}
void ConversionTagsApi::setConversionTagsApiAd_accountsAd_account_idConversion_tagsOcpm_eligibleResource(std::shared_ptr<ConversionTagsApiResources::Ad_accountsAd_account_idConversion_tagsOcpm_eligibleResource> spAd_accountsAd_account_idConversion_tagsOcpm_eligibleResource) {
    m_spAd_accountsAd_account_idConversion_tagsOcpm_eligibleResource = spAd_accountsAd_account_idConversion_tagsOcpm_eligibleResource;
    m_service->publish(m_spAd_accountsAd_account_idConversion_tagsOcpm_eligibleResource);
}
void ConversionTagsApi::setConversionTagsApiAd_accountsAd_account_idConversion_tagsPage_visitResource(std::shared_ptr<ConversionTagsApiResources::Ad_accountsAd_account_idConversion_tagsPage_visitResource> spAd_accountsAd_account_idConversion_tagsPage_visitResource) {
    m_spAd_accountsAd_account_idConversion_tagsPage_visitResource = spAd_accountsAd_account_idConversion_tagsPage_visitResource;
    m_service->publish(m_spAd_accountsAd_account_idConversion_tagsPage_visitResource);
}


void ConversionTagsApi::publishDefaultResources() {
    if (!m_spAd_accountsAd_account_idConversion_tagsResource) {
        setResource(std::make_shared<ConversionTagsApiResources::Ad_accountsAd_account_idConversion_tagsResource>());
    }
    if (!m_spAd_accountsAd_account_idConversion_tagsConversion_tag_idResource) {
        setResource(std::make_shared<ConversionTagsApiResources::Ad_accountsAd_account_idConversion_tagsConversion_tag_idResource>());
    }
    if (!m_spAd_accountsAd_account_idConversion_tagsOcpm_eligibleResource) {
        setResource(std::make_shared<ConversionTagsApiResources::Ad_accountsAd_account_idConversion_tagsOcpm_eligibleResource>());
    }
    if (!m_spAd_accountsAd_account_idConversion_tagsPage_visitResource) {
        setResource(std::make_shared<ConversionTagsApiResources::Ad_accountsAd_account_idConversion_tagsPage_visitResource>());
    }
}

std::shared_ptr<restbed::Service> ConversionTagsApi::service() {
    return m_service;
}


}
}
}
}

