/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "BoardsApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

namespace {
[[maybe_unused]]
std::string selectPreferredContentType(const std::vector<std::string>& contentTypes) {
    if (contentTypes.size() == 0) {
        return "application/json";
    }

    if (contentTypes.size() == 1) {
        return contentTypes.at(0);
    }

    static const std::array<std::string, 2> preferredTypes = {"json", "xml"};
    for (const auto& preferredType: preferredTypes) {
        const auto ret = std::find_if(contentTypes.cbegin(),
        contentTypes.cend(),
        [preferredType](const std::string& str) {
            return str.find(preferredType) != std::string::npos;});
        if (ret != contentTypes.cend()) {
            return *ret;
        }
    }

    return contentTypes.at(0);
}
}

BoardsApiException::BoardsApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int BoardsApiException::getStatus() const
{
    return m_status;
}
const char* BoardsApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
MODEL_T extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = MODEL_T(pt);
    return model;
}

template<class MODEL_T>
std::vector<MODEL_T> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<MODEL_T>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(MODEL_T(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

namespace BoardsApiResources {
BoardsBoard_idSectionsResource::BoardsBoard_idSectionsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/boards/{board_id: .*}/sections");
	this->set_method_handler("POST",
		std::bind(&BoardsBoard_idSectionsResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&BoardsBoard_idSectionsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BoardsBoard_idSectionsResource::handleBoardsApiException(const BoardsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BoardsBoard_idSectionsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BoardsBoard_idSectionsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BoardsBoard_idSectionsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BoardsBoard_idSectionsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BoardsBoard_idSectionsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BoardsBoard_idSectionsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto boardSection = extractJsonModelBodyParam<BoardSection>(bodyContent);
    // Getting the path params
    std::string boardId = request->get_path_parameter("board_id", "");
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    BoardSection resultObject = BoardSection{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(boardId, boardSection, adAccountId);
    }
    catch(const BoardsApiException& e) {
        std::tie(status_code, result) = handleBoardsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 201) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 201, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid board section parameters.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Not authorized to create board sections.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 409) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Could not get exclusive access to the board to create a new section.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 409, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 500) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Could not create a new board section.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 500, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void BoardsBoard_idSectionsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // Getting the path params
    std::string boardId = request->get_path_parameter("board_id", "");
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    std::string bookmark = request->get_query_parameter("bookmark", "");
    int32_t pageSize = request->get_query_parameter("pageSize", 25);
    
    int status_code = 500;
    Board_sections_list_200_response resultObject = Board_sections_list_200_response{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(boardId, adAccountId, bookmark, pageSize);
    }
    catch(const BoardsApiException& e) {
        std::tie(status_code, result) = handleBoardsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, BoardSection> BoardsBoard_idSectionsResource::handler_POST(
        std::string & boardId, BoardSection & boardSection, std::string & adAccountId)
{
    return handler_POST_func(boardId, boardSection, adAccountId);
}

std::pair<int, Board_sections_list_200_response> BoardsBoard_idSectionsResource::handler_GET(
    std::string & boardId, std::string & adAccountId, std::string & bookmark, int32_t & pageSize)
{
    return handler_GET_func(boardId, adAccountId, bookmark, pageSize);
}

std::string BoardsBoard_idSectionsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BoardsBoard_idSectionsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BoardsBoard_idSectionsSection_idResource::BoardsBoard_idSectionsSection_idResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/boards/{board_id: .*}/sections/{section_id: .*}");
	this->set_method_handler("DELETE",
		std::bind(&BoardsBoard_idSectionsSection_idResource::handler_DELETE_internal, this,
			std::placeholders::_1));
	this->set_method_handler("PATCH",
		std::bind(&BoardsBoard_idSectionsSection_idResource::handler_PATCH_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BoardsBoard_idSectionsSection_idResource::handleBoardsApiException(const BoardsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BoardsBoard_idSectionsSection_idResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BoardsBoard_idSectionsSection_idResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BoardsBoard_idSectionsSection_idResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BoardsBoard_idSectionsSection_idResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BoardsBoard_idSectionsSection_idResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BoardsBoard_idSectionsSection_idResource::handler_DELETE_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string boardId = request->get_path_parameter("board_id", "");
    std::string sectionId = request->get_path_parameter("section_id", "");
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    std::string result = "";
    
    try {
        status_code =
            handler_DELETE(boardId, sectionId, adAccountId);
    }
    catch(const BoardsApiException& e) {
        std::tie(status_code, result) = handleBoardsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 204) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 204, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Not authorized to delete board section.";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Board section not found.";
    
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 409) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Board section conflict.";
    
        returnResponse(session, 409, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void BoardsBoard_idSectionsSection_idResource::handler_PATCH_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto boardSection = extractJsonModelBodyParam<BoardSection>(bodyContent);
    // Getting the path params
    std::string boardId = request->get_path_parameter("board_id", "");
    std::string sectionId = request->get_path_parameter("section_id", "");
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    BoardSection resultObject = BoardSection{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_PATCH(boardId, sectionId, boardSection, adAccountId);
    }
    catch(const BoardsApiException& e) {
        std::tie(status_code, result) = handleBoardsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid board section parameters.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Not authorized to update board section.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 409) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Board section conflict.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 409, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

int BoardsBoard_idSectionsSection_idResource::handler_DELETE(
        std::string & boardId, std::string & sectionId, std::string & adAccountId)
{
    return handler_DELETE_func(boardId, sectionId, adAccountId);
}

std::pair<int, BoardSection> BoardsBoard_idSectionsSection_idResource::handler_PATCH(
    std::string & boardId, std::string & sectionId, BoardSection & boardSection, std::string & adAccountId)
{
    return handler_PATCH_func(boardId, sectionId, boardSection, adAccountId);
}

std::string BoardsBoard_idSectionsSection_idResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BoardsBoard_idSectionsSection_idResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BoardsBoard_idSectionsSection_idPinsResource::BoardsBoard_idSectionsSection_idPinsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/boards/{board_id: .*}/sections/{section_id: .*}/pins");
	this->set_method_handler("GET",
		std::bind(&BoardsBoard_idSectionsSection_idPinsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BoardsBoard_idSectionsSection_idPinsResource::handleBoardsApiException(const BoardsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BoardsBoard_idSectionsSection_idPinsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BoardsBoard_idSectionsSection_idPinsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BoardsBoard_idSectionsSection_idPinsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BoardsBoard_idSectionsSection_idPinsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BoardsBoard_idSectionsSection_idPinsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BoardsBoard_idSectionsSection_idPinsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string boardId = request->get_path_parameter("board_id", "");
    std::string sectionId = request->get_path_parameter("section_id", "");
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    std::string bookmark = request->get_query_parameter("bookmark", "");
    int32_t pageSize = request->get_query_parameter("pageSize", 25);
    
    int status_code = 500;
    Boards_list_pins_200_response resultObject = Boards_list_pins_200_response{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(boardId, sectionId, adAccountId, bookmark, pageSize);
    }
    catch(const BoardsApiException& e) {
        std::tie(status_code, result) = handleBoardsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Not authorized to access Pins on board section.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Board or section not found.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 409) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Board section conflict.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 409, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, Boards_list_pins_200_response> BoardsBoard_idSectionsSection_idPinsResource::handler_GET(
        std::string & boardId, std::string & sectionId, std::string & adAccountId, std::string & bookmark, int32_t & pageSize)
{
    return handler_GET_func(boardId, sectionId, adAccountId, bookmark, pageSize);
}


std::string BoardsBoard_idSectionsSection_idPinsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BoardsBoard_idSectionsSection_idPinsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BoardsResource::BoardsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/boards");
	this->set_method_handler("POST",
		std::bind(&BoardsResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&BoardsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BoardsResource::handleBoardsApiException(const BoardsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BoardsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BoardsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BoardsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BoardsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BoardsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BoardsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto board = extractJsonModelBodyParam<Board>(bodyContent);
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    Board resultObject = Board{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(board, adAccountId);
    }
    catch(const BoardsApiException& e) {
        std::tie(status_code, result) = handleBoardsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 201) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 201, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "The board name is invalid or duplicated.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void BoardsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    std::string bookmark = request->get_query_parameter("bookmark", "");
    int32_t pageSize = request->get_query_parameter("pageSize", 25);
    std::string privacy = request->get_query_parameter("privacy", "");
    
    int status_code = 500;
    Boards_list_200_response resultObject = Boards_list_200_response{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(adAccountId, bookmark, pageSize, privacy);
    }
    catch(const BoardsApiException& e) {
        std::tie(status_code, result) = handleBoardsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, Board> BoardsResource::handler_POST(
        Board & board, std::string & adAccountId)
{
    return handler_POST_func(board, adAccountId);
}

std::pair<int, Boards_list_200_response> BoardsResource::handler_GET(
    std::string & adAccountId, std::string & bookmark, int32_t & pageSize, std::string & privacy)
{
    return handler_GET_func(adAccountId, bookmark, pageSize, privacy);
}

std::string BoardsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BoardsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BoardsBoard_idResource::BoardsBoard_idResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/boards/{board_id: .*}");
	this->set_method_handler("DELETE",
		std::bind(&BoardsBoard_idResource::handler_DELETE_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&BoardsBoard_idResource::handler_GET_internal, this,
			std::placeholders::_1));
	this->set_method_handler("PATCH",
		std::bind(&BoardsBoard_idResource::handler_PATCH_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BoardsBoard_idResource::handleBoardsApiException(const BoardsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BoardsBoard_idResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BoardsBoard_idResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BoardsBoard_idResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BoardsBoard_idResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BoardsBoard_idResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BoardsBoard_idResource::handler_DELETE_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string boardId = request->get_path_parameter("board_id", "");
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    std::string result = "";
    
    try {
        status_code =
            handler_DELETE(boardId, adAccountId);
    }
    catch(const BoardsApiException& e) {
        std::tie(status_code, result) = handleBoardsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 204) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 204, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Not authorized to delete the board.";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Board not found.";
    
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 409) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Could not get exclusive access to delete the board.";
    
        returnResponse(session, 409, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 429) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window.";
    
        returnResponse(session, 429, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void BoardsBoard_idResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // Getting the path params
    std::string boardId = request->get_path_parameter("board_id", "");
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    Board resultObject = Board{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(boardId, adAccountId);
    }
    catch(const BoardsApiException& e) {
        std::tie(status_code, result) = handleBoardsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Board not found.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}
// x-extension
void BoardsBoard_idResource::handler_PATCH_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto boardUpdate = extractJsonModelBodyParam<BoardUpdate>(bodyContent);
    // Getting the path params
    std::string boardId = request->get_path_parameter("board_id", "");
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    Board resultObject = Board{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_PATCH(boardId, boardUpdate, adAccountId);
    }
    catch(const BoardsApiException& e) {
        std::tie(status_code, result) = handleBoardsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid board parameters.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Not authorized to update the board.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 429) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 429, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

int BoardsBoard_idResource::handler_DELETE(
        std::string & boardId, std::string & adAccountId)
{
    return handler_DELETE_func(boardId, adAccountId);
}

std::pair<int, Board> BoardsBoard_idResource::handler_GET(
    std::string & boardId, std::string & adAccountId)
{
    return handler_GET_func(boardId, adAccountId);
}
std::pair<int, Board> BoardsBoard_idResource::handler_PATCH(
    std::string & boardId, BoardUpdate & boardUpdate, std::string & adAccountId)
{
    return handler_PATCH_func(boardId, boardUpdate, adAccountId);
}

std::string BoardsBoard_idResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BoardsBoard_idResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BoardsBoard_idPinsResource::BoardsBoard_idPinsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/boards/{board_id: .*}/pins");
	this->set_method_handler("GET",
		std::bind(&BoardsBoard_idPinsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BoardsBoard_idPinsResource::handleBoardsApiException(const BoardsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BoardsBoard_idPinsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BoardsBoard_idPinsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BoardsBoard_idPinsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BoardsBoard_idPinsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BoardsBoard_idPinsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BoardsBoard_idPinsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string boardId = request->get_path_parameter("board_id", "");
    // Getting the query params
    std::string bookmark = request->get_query_parameter("bookmark", "");
    int32_t pageSize = request->get_query_parameter("pageSize", 25);
    std::string creativeTypes_raw = request->get_query_parameter("creativeTypes");
    std::vector<std::string> creativeTypes;
    std::vector<std::string> creativeTypes_temp;
    boost::split(creativeTypes_temp, creativeTypes_raw, boost::is_any_of(","));
    std::copy(creativeTypes_temp.begin(), creativeTypes_temp.end(), std::inserter(creativeTypes, std::next(creativeTypes.begin())));
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    bool pinMetrics = request->get_query_parameter("pinMetrics", false);
    
    int status_code = 500;
    Boards_list_pins_200_response resultObject = Boards_list_pins_200_response{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(boardId, bookmark, pageSize, creativeTypes, adAccountId, pinMetrics);
    }
    catch(const BoardsApiException& e) {
        std::tie(status_code, result) = handleBoardsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Board not found.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, Boards_list_pins_200_response> BoardsBoard_idPinsResource::handler_GET(
        std::string & boardId, std::string & bookmark, int32_t & pageSize, std::vector<std::string> & creativeTypes, std::string & adAccountId, bool & pinMetrics)
{
    return handler_GET_func(boardId, bookmark, pageSize, creativeTypes, adAccountId, pinMetrics);
}


std::string BoardsBoard_idPinsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BoardsBoard_idPinsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}

} /* namespace BoardsApiResources */

BoardsApi::BoardsApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

BoardsApi::~BoardsApi() {}

std::shared_ptr<BoardsApiResources::BoardsBoard_idSectionsResource> BoardsApi::getBoardsBoard_idSectionsResource() {
    if (!m_spBoardsBoard_idSectionsResource) {
        setResource(std::make_shared<BoardsApiResources::BoardsBoard_idSectionsResource>());
    }
    return m_spBoardsBoard_idSectionsResource;
}
std::shared_ptr<BoardsApiResources::BoardsBoard_idSectionsSection_idResource> BoardsApi::getBoardsBoard_idSectionsSection_idResource() {
    if (!m_spBoardsBoard_idSectionsSection_idResource) {
        setResource(std::make_shared<BoardsApiResources::BoardsBoard_idSectionsSection_idResource>());
    }
    return m_spBoardsBoard_idSectionsSection_idResource;
}
std::shared_ptr<BoardsApiResources::BoardsBoard_idSectionsSection_idPinsResource> BoardsApi::getBoardsBoard_idSectionsSection_idPinsResource() {
    if (!m_spBoardsBoard_idSectionsSection_idPinsResource) {
        setResource(std::make_shared<BoardsApiResources::BoardsBoard_idSectionsSection_idPinsResource>());
    }
    return m_spBoardsBoard_idSectionsSection_idPinsResource;
}
std::shared_ptr<BoardsApiResources::BoardsResource> BoardsApi::getBoardsResource() {
    if (!m_spBoardsResource) {
        setResource(std::make_shared<BoardsApiResources::BoardsResource>());
    }
    return m_spBoardsResource;
}
std::shared_ptr<BoardsApiResources::BoardsBoard_idResource> BoardsApi::getBoardsBoard_idResource() {
    if (!m_spBoardsBoard_idResource) {
        setResource(std::make_shared<BoardsApiResources::BoardsBoard_idResource>());
    }
    return m_spBoardsBoard_idResource;
}
std::shared_ptr<BoardsApiResources::BoardsBoard_idPinsResource> BoardsApi::getBoardsBoard_idPinsResource() {
    if (!m_spBoardsBoard_idPinsResource) {
        setResource(std::make_shared<BoardsApiResources::BoardsBoard_idPinsResource>());
    }
    return m_spBoardsBoard_idPinsResource;
}
void BoardsApi::setResource(std::shared_ptr<BoardsApiResources::BoardsBoard_idSectionsResource> resource) {
    m_spBoardsBoard_idSectionsResource = resource;
    m_service->publish(m_spBoardsBoard_idSectionsResource);
}
void BoardsApi::setResource(std::shared_ptr<BoardsApiResources::BoardsBoard_idSectionsSection_idResource> resource) {
    m_spBoardsBoard_idSectionsSection_idResource = resource;
    m_service->publish(m_spBoardsBoard_idSectionsSection_idResource);
}
void BoardsApi::setResource(std::shared_ptr<BoardsApiResources::BoardsBoard_idSectionsSection_idPinsResource> resource) {
    m_spBoardsBoard_idSectionsSection_idPinsResource = resource;
    m_service->publish(m_spBoardsBoard_idSectionsSection_idPinsResource);
}
void BoardsApi::setResource(std::shared_ptr<BoardsApiResources::BoardsResource> resource) {
    m_spBoardsResource = resource;
    m_service->publish(m_spBoardsResource);
}
void BoardsApi::setResource(std::shared_ptr<BoardsApiResources::BoardsBoard_idResource> resource) {
    m_spBoardsBoard_idResource = resource;
    m_service->publish(m_spBoardsBoard_idResource);
}
void BoardsApi::setResource(std::shared_ptr<BoardsApiResources::BoardsBoard_idPinsResource> resource) {
    m_spBoardsBoard_idPinsResource = resource;
    m_service->publish(m_spBoardsBoard_idPinsResource);
}
void BoardsApi::setBoardsApiBoardsBoard_idSectionsResource(std::shared_ptr<BoardsApiResources::BoardsBoard_idSectionsResource> spBoardsBoard_idSectionsResource) {
    m_spBoardsBoard_idSectionsResource = spBoardsBoard_idSectionsResource;
    m_service->publish(m_spBoardsBoard_idSectionsResource);
}
void BoardsApi::setBoardsApiBoardsBoard_idSectionsSection_idResource(std::shared_ptr<BoardsApiResources::BoardsBoard_idSectionsSection_idResource> spBoardsBoard_idSectionsSection_idResource) {
    m_spBoardsBoard_idSectionsSection_idResource = spBoardsBoard_idSectionsSection_idResource;
    m_service->publish(m_spBoardsBoard_idSectionsSection_idResource);
}
void BoardsApi::setBoardsApiBoardsBoard_idSectionsSection_idPinsResource(std::shared_ptr<BoardsApiResources::BoardsBoard_idSectionsSection_idPinsResource> spBoardsBoard_idSectionsSection_idPinsResource) {
    m_spBoardsBoard_idSectionsSection_idPinsResource = spBoardsBoard_idSectionsSection_idPinsResource;
    m_service->publish(m_spBoardsBoard_idSectionsSection_idPinsResource);
}
void BoardsApi::setBoardsApiBoardsResource(std::shared_ptr<BoardsApiResources::BoardsResource> spBoardsResource) {
    m_spBoardsResource = spBoardsResource;
    m_service->publish(m_spBoardsResource);
}
void BoardsApi::setBoardsApiBoardsBoard_idResource(std::shared_ptr<BoardsApiResources::BoardsBoard_idResource> spBoardsBoard_idResource) {
    m_spBoardsBoard_idResource = spBoardsBoard_idResource;
    m_service->publish(m_spBoardsBoard_idResource);
}
void BoardsApi::setBoardsApiBoardsBoard_idPinsResource(std::shared_ptr<BoardsApiResources::BoardsBoard_idPinsResource> spBoardsBoard_idPinsResource) {
    m_spBoardsBoard_idPinsResource = spBoardsBoard_idPinsResource;
    m_service->publish(m_spBoardsBoard_idPinsResource);
}


void BoardsApi::publishDefaultResources() {
    if (!m_spBoardsBoard_idSectionsResource) {
        setResource(std::make_shared<BoardsApiResources::BoardsBoard_idSectionsResource>());
    }
    if (!m_spBoardsBoard_idSectionsSection_idResource) {
        setResource(std::make_shared<BoardsApiResources::BoardsBoard_idSectionsSection_idResource>());
    }
    if (!m_spBoardsBoard_idSectionsSection_idPinsResource) {
        setResource(std::make_shared<BoardsApiResources::BoardsBoard_idSectionsSection_idPinsResource>());
    }
    if (!m_spBoardsResource) {
        setResource(std::make_shared<BoardsApiResources::BoardsResource>());
    }
    if (!m_spBoardsBoard_idResource) {
        setResource(std::make_shared<BoardsApiResources::BoardsBoard_idResource>());
    }
    if (!m_spBoardsBoard_idPinsResource) {
        setResource(std::make_shared<BoardsApiResources::BoardsBoard_idPinsResource>());
    }
}

std::shared_ptr<restbed::Service> BoardsApi::service() {
    return m_service;
}


}
}
}
}

