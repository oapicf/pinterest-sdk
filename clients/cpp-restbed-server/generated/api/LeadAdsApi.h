/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * LeadAdsApi.h
 *
 * 
 */

#ifndef LeadAdsApi_H_
#define LeadAdsApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "AdAccountCreateSubscriptionRequest.h"
#include "AdAccountCreateSubscriptionResponse.h"
#include "AdAccountGetSubscriptionResponse.h"
#include "Ad_accounts_subscriptions_get_list_200_response.h"
#include "Error.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  LeadAdsApiException: public std::exception
{
public:
    LeadAdsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace LeadAdsApiResources {
/// <summary>
/// Delete lead ads subscription
/// </summary>
/// <remarks>
/// Delete an existing lead ads webhook subscription by ID. - Only requests for the OWNER or ADMIN of the ad_account will be allowed.  &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;
/// </remarks>
class  Ad_accountsAd_account_idLeadsSubscriptionsSubscription_idResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idLeadsSubscriptionsSubscription_idResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idLeadsSubscriptionsSubscription_idResource() = default;

    Ad_accountsAd_account_idLeadsSubscriptionsSubscription_idResource(
        const Ad_accountsAd_account_idLeadsSubscriptionsSubscription_idResource& other) = default; // copy constructor
    Ad_accountsAd_account_idLeadsSubscriptionsSubscription_idResource(Ad_accountsAd_account_idLeadsSubscriptionsSubscription_idResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idLeadsSubscriptionsSubscription_idResource& operator=(const Ad_accountsAd_account_idLeadsSubscriptionsSubscription_idResource& other) = default; // copy assignment
    Ad_accountsAd_account_idLeadsSubscriptionsSubscription_idResource& operator=(Ad_accountsAd_account_idLeadsSubscriptionsSubscription_idResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<int(
        std::string & adAccountId, std::string & subscriptionId)> handler_DELETE_func =
            [](std::string &, std::string &) -> int
                { throw LeadAdsApiException(501, "Not implemented"); };

    std::function<std::pair<int, AdAccountGetSubscriptionResponse>(
        std::string & adAccountId, std::string & subscriptionId)> handler_GET_func =
            [](std::string &, std::string &) -> std::pair<int, AdAccountGetSubscriptionResponse>
                { throw LeadAdsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_DELETE(
        std::string & adAccountId, std::string & subscriptionId);

    virtual std::pair<int, AdAccountGetSubscriptionResponse> handler_GET(
        std::string & adAccountId, std::string & subscriptionId);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleLeadAdsApiException(const LeadAdsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get lead ads subscriptions
/// </summary>
/// <remarks>
/// Get the advertiser&#39;s list of lead ads subscriptions. - Only requests for the OWNER or ADMIN of the ad_account will be allowed.  &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;
/// </remarks>
class  Ad_accountsAd_account_idLeadsSubscriptionsResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idLeadsSubscriptionsResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idLeadsSubscriptionsResource() = default;

    Ad_accountsAd_account_idLeadsSubscriptionsResource(
        const Ad_accountsAd_account_idLeadsSubscriptionsResource& other) = default; // copy constructor
    Ad_accountsAd_account_idLeadsSubscriptionsResource(Ad_accountsAd_account_idLeadsSubscriptionsResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idLeadsSubscriptionsResource& operator=(const Ad_accountsAd_account_idLeadsSubscriptionsResource& other) = default; // copy assignment
    Ad_accountsAd_account_idLeadsSubscriptionsResource& operator=(Ad_accountsAd_account_idLeadsSubscriptionsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Ad_accounts_subscriptions_get_list_200_response>(
        std::string & adAccountId, int32_t & pageSize, std::string & bookmark)> handler_GET_func =
            [](std::string &, int32_t &, std::string &) -> std::pair<int, Ad_accounts_subscriptions_get_list_200_response>
                { throw LeadAdsApiException(501, "Not implemented"); };

    std::function<std::pair<int, AdAccountCreateSubscriptionResponse>(
        std::string & adAccountId, AdAccountCreateSubscriptionRequest & adAccountCreateSubscriptionRequest)> handler_POST_func =
            [](std::string &, AdAccountCreateSubscriptionRequest &) -> std::pair<int, AdAccountCreateSubscriptionResponse>
                { throw LeadAdsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Ad_accounts_subscriptions_get_list_200_response> handler_GET(
        std::string & adAccountId, int32_t & pageSize, std::string & bookmark);

    virtual std::pair<int, AdAccountCreateSubscriptionResponse> handler_POST(
        std::string & adAccountId, AdAccountCreateSubscriptionRequest & adAccountCreateSubscriptionRequest);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleLeadAdsApiException(const LeadAdsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace LeadAdsApiResources */

using LeadAdsApiAd_accountsAd_account_idLeadsSubscriptionsSubscription_idResource [[deprecated]] = LeadAdsApiResources::Ad_accountsAd_account_idLeadsSubscriptionsSubscription_idResource;
using LeadAdsApiAd_accountsAd_account_idLeadsSubscriptionsResource [[deprecated]] = LeadAdsApiResources::Ad_accountsAd_account_idLeadsSubscriptionsResource;

//
// The restbed service to actually implement the REST server
//
class  LeadAdsApi
{
public:
    explicit LeadAdsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~LeadAdsApi();

    std::shared_ptr<LeadAdsApiResources::Ad_accountsAd_account_idLeadsSubscriptionsSubscription_idResource> getAd_accountsAd_account_idLeadsSubscriptionsSubscription_idResource();
    std::shared_ptr<LeadAdsApiResources::Ad_accountsAd_account_idLeadsSubscriptionsResource> getAd_accountsAd_account_idLeadsSubscriptionsResource();

    void setResource(std::shared_ptr<LeadAdsApiResources::Ad_accountsAd_account_idLeadsSubscriptionsSubscription_idResource> resource);
    void setResource(std::shared_ptr<LeadAdsApiResources::Ad_accountsAd_account_idLeadsSubscriptionsResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setLeadAdsApiAd_accountsAd_account_idLeadsSubscriptionsSubscription_idResource(std::shared_ptr<LeadAdsApiResources::Ad_accountsAd_account_idLeadsSubscriptionsSubscription_idResource> spLeadAdsApiAd_accountsAd_account_idLeadsSubscriptionsSubscription_idResource);
    [[deprecated("use setResource()")]]
    virtual void setLeadAdsApiAd_accountsAd_account_idLeadsSubscriptionsResource(std::shared_ptr<LeadAdsApiResources::Ad_accountsAd_account_idLeadsSubscriptionsResource> spLeadAdsApiAd_accountsAd_account_idLeadsSubscriptionsResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<LeadAdsApiResources::Ad_accountsAd_account_idLeadsSubscriptionsSubscription_idResource> m_spAd_accountsAd_account_idLeadsSubscriptionsSubscription_idResource;
    std::shared_ptr<LeadAdsApiResources::Ad_accountsAd_account_idLeadsSubscriptionsResource> m_spAd_accountsAd_account_idLeadsSubscriptionsResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* LeadAdsApi_H_ */

