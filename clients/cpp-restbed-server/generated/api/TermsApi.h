/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TermsApi.h
 *
 * 
 */

#ifndef TermsApi_H_
#define TermsApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "Error.h"
#include "RelatedTerms.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  TermsApiException: public std::exception
{
public:
    TermsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace TermsApiResources {
/// <summary>
/// List related terms
/// </summary>
/// <remarks>
/// Get a list of terms logically related to each input term. &lt;p/&gt; Example: the term &#39;workout&#39; would list related terms like &#39;one song workout&#39;, &#39;yoga workout&#39;, &#39;workout motivation&#39;, etc.
/// </remarks>
class  TermsRelatedResource: public restbed::Resource
{
public:
    TermsRelatedResource(const std::string& context = "/v5");
    virtual ~TermsRelatedResource() = default;

    TermsRelatedResource(
        const TermsRelatedResource& other) = default; // copy constructor
    TermsRelatedResource(TermsRelatedResource&& other) noexcept = default; // move constructor

    TermsRelatedResource& operator=(const TermsRelatedResource& other) = default; // copy assignment
    TermsRelatedResource& operator=(TermsRelatedResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, RelatedTerms>(
        std::vector<std::string> & terms)> handler_GET_func =
            [](std::vector<std::string> &) -> std::pair<int, RelatedTerms>
                { throw TermsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, RelatedTerms> handler_GET(
        std::vector<std::string> & terms);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleTermsApiException(const TermsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// List suggested terms
/// </summary>
/// <remarks>
/// Get popular search terms that begin with your input term. &lt;p/&gt; Example: &#39;sport&#39; would return popular terms like &#39;sports bar&#39; and &#39;sportswear&#39;, but not &#39;motor sports&#39; since the phrase does not begin with the given term.
/// </remarks>
class  TermsSuggestedResource: public restbed::Resource
{
public:
    TermsSuggestedResource(const std::string& context = "/v5");
    virtual ~TermsSuggestedResource() = default;

    TermsSuggestedResource(
        const TermsSuggestedResource& other) = default; // copy constructor
    TermsSuggestedResource(TermsSuggestedResource&& other) noexcept = default; // move constructor

    TermsSuggestedResource& operator=(const TermsSuggestedResource& other) = default; // copy assignment
    TermsSuggestedResource& operator=(TermsSuggestedResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::vector<std::string>>(
        std::string & term, int32_t & limit)> handler_GET_func =
            [](std::string &, int32_t &) -> std::pair<int, std::vector<std::string>>
                { throw TermsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<std::string>> handler_GET(
        std::string & term, int32_t & limit);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleTermsApiException(const TermsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace TermsApiResources */

using TermsApiTermsRelatedResource [[deprecated]] = TermsApiResources::TermsRelatedResource;
using TermsApiTermsSuggestedResource [[deprecated]] = TermsApiResources::TermsSuggestedResource;

//
// The restbed service to actually implement the REST server
//
class  TermsApi
{
public:
    explicit TermsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~TermsApi();

    std::shared_ptr<TermsApiResources::TermsRelatedResource> getTermsRelatedResource();
    std::shared_ptr<TermsApiResources::TermsSuggestedResource> getTermsSuggestedResource();

    void setResource(std::shared_ptr<TermsApiResources::TermsRelatedResource> resource);
    void setResource(std::shared_ptr<TermsApiResources::TermsSuggestedResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setTermsApiTermsRelatedResource(std::shared_ptr<TermsApiResources::TermsRelatedResource> spTermsApiTermsRelatedResource);
    [[deprecated("use setResource()")]]
    virtual void setTermsApiTermsSuggestedResource(std::shared_ptr<TermsApiResources::TermsSuggestedResource> spTermsApiTermsSuggestedResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<TermsApiResources::TermsRelatedResource> m_spTermsRelatedResource;
    std::shared_ptr<TermsApiResources::TermsSuggestedResource> m_spTermsSuggestedResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* TermsApi_H_ */

