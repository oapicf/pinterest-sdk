/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MediaApi.h
 *
 * 
 */

#ifndef MediaApi_H_
#define MediaApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "Error.h"
#include "MediaUpload.h"
#include "MediaUploadDetails.h"
#include "MediaUploadRequest.h"
#include "Media_list_200_response.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  MediaApiException: public std::exception
{
public:
    MediaApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace MediaApiResources {
/// <summary>
/// Register media upload
/// </summary>
/// <remarks>
/// Register your intent to upload media  The response includes all of the information needed to upload the media to Pinterest.  To upload the media, make an HTTP POST request (using &lt;tt&gt;curl&lt;/tt&gt;, for example) to &lt;tt&gt;upload_url&lt;/tt&gt; using the &lt;tt&gt;Content-Type&lt;/tt&gt; header value. Send the media file&#39;s contents as the request&#39;s &lt;tt&gt;file&lt;/tt&gt; parameter and also include all of the parameters from &lt;tt&gt;upload_parameters&lt;/tt&gt;.  &lt;strong&gt;&lt;a href&#x3D;&#39;/docs/api-features/creating-boards-and-pins/#creating-video-pins&#39;&gt;Learn more&lt;/a&gt;&lt;/strong&gt; about video Pin creation.
/// </remarks>
class  MediaResource: public restbed::Resource
{
public:
    MediaResource(const std::string& context = "/v5");
    virtual ~MediaResource() = default;

    MediaResource(
        const MediaResource& other) = default; // copy constructor
    MediaResource(MediaResource&& other) noexcept = default; // move constructor

    MediaResource& operator=(const MediaResource& other) = default; // copy assignment
    MediaResource& operator=(MediaResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, MediaUpload>(
        MediaUploadRequest & mediaUploadRequest)> handler_POST_func =
            [](MediaUploadRequest &) -> std::pair<int, MediaUpload>
                { throw MediaApiException(501, "Not implemented"); };

    std::function<std::pair<int, Media_list_200_response>(
        std::string & bookmark, int32_t & pageSize)> handler_GET_func =
            [](std::string &, int32_t &) -> std::pair<int, Media_list_200_response>
                { throw MediaApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, MediaUpload> handler_POST(
        MediaUploadRequest & mediaUploadRequest);

    virtual std::pair<int, Media_list_200_response> handler_GET(
        std::string & bookmark, int32_t & pageSize);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleMediaApiException(const MediaApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get media upload details
/// </summary>
/// <remarks>
/// Get details for a registered media upload, including its current status.  &lt;strong&gt;&lt;a href&#x3D;&#39;/docs/api-features/creating-boards-and-pins/#creating-video-pins&#39;&gt;Learn more&lt;/a&gt;&lt;/strong&gt; about video Pin creation.
/// </remarks>
class  MediaMedia_idResource: public restbed::Resource
{
public:
    MediaMedia_idResource(const std::string& context = "/v5");
    virtual ~MediaMedia_idResource() = default;

    MediaMedia_idResource(
        const MediaMedia_idResource& other) = default; // copy constructor
    MediaMedia_idResource(MediaMedia_idResource&& other) noexcept = default; // move constructor

    MediaMedia_idResource& operator=(const MediaMedia_idResource& other) = default; // copy assignment
    MediaMedia_idResource& operator=(MediaMedia_idResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, MediaUploadDetails>(
        std::string & mediaId)> handler_GET_func =
            [](std::string &) -> std::pair<int, MediaUploadDetails>
                { throw MediaApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, MediaUploadDetails> handler_GET(
        std::string & mediaId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleMediaApiException(const MediaApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace MediaApiResources */

using MediaApiMediaResource [[deprecated]] = MediaApiResources::MediaResource;
using MediaApiMediaMedia_idResource [[deprecated]] = MediaApiResources::MediaMedia_idResource;

//
// The restbed service to actually implement the REST server
//
class  MediaApi
{
public:
    explicit MediaApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~MediaApi();

    std::shared_ptr<MediaApiResources::MediaResource> getMediaResource();
    std::shared_ptr<MediaApiResources::MediaMedia_idResource> getMediaMedia_idResource();

    void setResource(std::shared_ptr<MediaApiResources::MediaResource> resource);
    void setResource(std::shared_ptr<MediaApiResources::MediaMedia_idResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setMediaApiMediaResource(std::shared_ptr<MediaApiResources::MediaResource> spMediaApiMediaResource);
    [[deprecated("use setResource()")]]
    virtual void setMediaApiMediaMedia_idResource(std::shared_ptr<MediaApiResources::MediaMedia_idResource> spMediaApiMediaMedia_idResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<MediaApiResources::MediaResource> m_spMediaResource;
    std::shared_ptr<MediaApiResources::MediaMedia_idResource> m_spMediaMedia_idResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* MediaApi_H_ */

