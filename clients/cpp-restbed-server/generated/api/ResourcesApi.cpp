/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "ResourcesApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

namespace {
[[maybe_unused]]
std::string selectPreferredContentType(const std::vector<std::string>& contentTypes) {
    if (contentTypes.size() == 0) {
        return "application/json";
    }

    if (contentTypes.size() == 1) {
        return contentTypes.at(0);
    }

    static const std::array<std::string, 2> preferredTypes = {"json", "xml"};
    for (const auto& preferredType: preferredTypes) {
        const auto ret = std::find_if(contentTypes.cbegin(),
        contentTypes.cend(),
        [preferredType](const std::string& str) {
            return str.find(preferredType) != std::string::npos;});
        if (ret != contentTypes.cend()) {
            return *ret;
        }
    }

    return contentTypes.at(0);
}
}

ResourcesApiException::ResourcesApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int ResourcesApiException::getStatus() const
{
    return m_status;
}
const char* ResourcesApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
MODEL_T extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = MODEL_T(pt);
    return model;
}

template<class MODEL_T>
std::vector<MODEL_T> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<MODEL_T>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(MODEL_T(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

namespace ResourcesApiResources {
ResourcesAd_account_countriesResource::ResourcesAd_account_countriesResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/resources/ad_account_countries");
	this->set_method_handler("GET",
		std::bind(&ResourcesAd_account_countriesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> ResourcesAd_account_countriesResource::handleResourcesApiException(const ResourcesApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ResourcesAd_account_countriesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ResourcesAd_account_countriesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ResourcesAd_account_countriesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ResourcesAd_account_countriesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void ResourcesAd_account_countriesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ResourcesAd_account_countriesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    
    int status_code = 500;
    AdAccountsCountryResponse resultObject = AdAccountsCountryResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET();
    }
    catch(const ResourcesApiException& e) {
        std::tie(status_code, result) = handleResourcesApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, AdAccountsCountryResponse> ResourcesAd_account_countriesResource::handler_GET(
        )
{
    return handler_GET_func();
}


std::string ResourcesAd_account_countriesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string ResourcesAd_account_countriesResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
ResourcesDelivery_metricsResource::ResourcesDelivery_metricsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/resources/delivery_metrics");
	this->set_method_handler("GET",
		std::bind(&ResourcesDelivery_metricsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> ResourcesDelivery_metricsResource::handleResourcesApiException(const ResourcesApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ResourcesDelivery_metricsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ResourcesDelivery_metricsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ResourcesDelivery_metricsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ResourcesDelivery_metricsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void ResourcesDelivery_metricsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ResourcesDelivery_metricsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the query params
    std::string reportType = request->get_query_parameter("reportType", "");
    
    int status_code = 500;
    DeliveryMetricsResponse resultObject = DeliveryMetricsResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(reportType);
    }
    catch(const ResourcesApiException& e) {
        std::tie(status_code, result) = handleResourcesApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, DeliveryMetricsResponse> ResourcesDelivery_metricsResource::handler_GET(
        std::string & reportType)
{
    return handler_GET_func(reportType);
}


std::string ResourcesDelivery_metricsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string ResourcesDelivery_metricsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
ResourcesTargetingInterestsInterest_idResource::ResourcesTargetingInterestsInterest_idResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/resources/targeting/interests/{interest_id: .*}");
	this->set_method_handler("GET",
		std::bind(&ResourcesTargetingInterestsInterest_idResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> ResourcesTargetingInterestsInterest_idResource::handleResourcesApiException(const ResourcesApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ResourcesTargetingInterestsInterest_idResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ResourcesTargetingInterestsInterest_idResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ResourcesTargetingInterestsInterest_idResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ResourcesTargetingInterestsInterest_idResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void ResourcesTargetingInterestsInterest_idResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ResourcesTargetingInterestsInterest_idResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string interestId = request->get_path_parameter("interest_id", "");
    
    int status_code = 500;
    SingleInterestTargetingOptionResponse resultObject = SingleInterestTargetingOptionResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(interestId);
    }
    catch(const ResourcesApiException& e) {
        std::tie(status_code, result) = handleResourcesApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, SingleInterestTargetingOptionResponse> ResourcesTargetingInterestsInterest_idResource::handler_GET(
        std::string & interestId)
{
    return handler_GET_func(interestId);
}


std::string ResourcesTargetingInterestsInterest_idResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string ResourcesTargetingInterestsInterest_idResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
ResourcesLead_form_questionsResource::ResourcesLead_form_questionsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/resources/lead_form_questions");
	this->set_method_handler("GET",
		std::bind(&ResourcesLead_form_questionsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> ResourcesLead_form_questionsResource::handleResourcesApiException(const ResourcesApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ResourcesLead_form_questionsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ResourcesLead_form_questionsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ResourcesLead_form_questionsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ResourcesLead_form_questionsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void ResourcesLead_form_questionsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ResourcesLead_form_questionsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    
    int status_code = 500;
    std::string result = "";
    
    try {
        status_code =
            handler_GET();
    }
    catch(const ResourcesApiException& e) {
        std::tie(status_code, result) = handleResourcesApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


int ResourcesLead_form_questionsResource::handler_GET(
        )
{
    return handler_GET_func();
}


std::string ResourcesLead_form_questionsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string ResourcesLead_form_questionsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
ResourcesMetrics_ready_stateResource::ResourcesMetrics_ready_stateResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/resources/metrics_ready_state");
	this->set_method_handler("GET",
		std::bind(&ResourcesMetrics_ready_stateResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> ResourcesMetrics_ready_stateResource::handleResourcesApiException(const ResourcesApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ResourcesMetrics_ready_stateResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ResourcesMetrics_ready_stateResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ResourcesMetrics_ready_stateResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ResourcesMetrics_ready_stateResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void ResourcesMetrics_ready_stateResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ResourcesMetrics_ready_stateResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the query params
    std::string date = request->get_query_parameter("date", "");
    
    int status_code = 500;
    BookClosedResponse resultObject = BookClosedResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(date);
    }
    catch(const ResourcesApiException& e) {
        std::tie(status_code, result) = handleResourcesApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, BookClosedResponse> ResourcesMetrics_ready_stateResource::handler_GET(
        std::string & date)
{
    return handler_GET_func(date);
}


std::string ResourcesMetrics_ready_stateResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string ResourcesMetrics_ready_stateResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
ResourcesTargetingTargeting_typeResource::ResourcesTargetingTargeting_typeResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/resources/targeting/{targeting_type: .*}");
	this->set_method_handler("GET",
		std::bind(&ResourcesTargetingTargeting_typeResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> ResourcesTargetingTargeting_typeResource::handleResourcesApiException(const ResourcesApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ResourcesTargetingTargeting_typeResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ResourcesTargetingTargeting_typeResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ResourcesTargetingTargeting_typeResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ResourcesTargetingTargeting_typeResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void ResourcesTargetingTargeting_typeResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ResourcesTargetingTargeting_typeResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string targetingType = request->get_path_parameter("targeting_type", "");
    // Getting the query params
    std::string clientId = request->get_query_parameter("clientId", "");
    std::string oauthSignature = request->get_query_parameter("oauthSignature", "");
    std::string timestamp = request->get_query_parameter("timestamp", "");
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    std::vector<std::string> resultObject = std::vector<std::string>();
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(targetingType, clientId, oauthSignature, timestamp, adAccountId);
    }
    catch(const ResourcesApiException& e) {
        std::tie(status_code, result) = handleResourcesApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, std::vector<std::string>> ResourcesTargetingTargeting_typeResource::handler_GET(
        std::string & targetingType, std::string & clientId, std::string & oauthSignature, std::string & timestamp, std::string & adAccountId)
{
    return handler_GET_func(targetingType, clientId, oauthSignature, timestamp, adAccountId);
}


std::string ResourcesTargetingTargeting_typeResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string ResourcesTargetingTargeting_typeResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}

} /* namespace ResourcesApiResources */

ResourcesApi::ResourcesApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

ResourcesApi::~ResourcesApi() {}

std::shared_ptr<ResourcesApiResources::ResourcesAd_account_countriesResource> ResourcesApi::getResourcesAd_account_countriesResource() {
    if (!m_spResourcesAd_account_countriesResource) {
        setResource(std::make_shared<ResourcesApiResources::ResourcesAd_account_countriesResource>());
    }
    return m_spResourcesAd_account_countriesResource;
}
std::shared_ptr<ResourcesApiResources::ResourcesDelivery_metricsResource> ResourcesApi::getResourcesDelivery_metricsResource() {
    if (!m_spResourcesDelivery_metricsResource) {
        setResource(std::make_shared<ResourcesApiResources::ResourcesDelivery_metricsResource>());
    }
    return m_spResourcesDelivery_metricsResource;
}
std::shared_ptr<ResourcesApiResources::ResourcesTargetingInterestsInterest_idResource> ResourcesApi::getResourcesTargetingInterestsInterest_idResource() {
    if (!m_spResourcesTargetingInterestsInterest_idResource) {
        setResource(std::make_shared<ResourcesApiResources::ResourcesTargetingInterestsInterest_idResource>());
    }
    return m_spResourcesTargetingInterestsInterest_idResource;
}
std::shared_ptr<ResourcesApiResources::ResourcesLead_form_questionsResource> ResourcesApi::getResourcesLead_form_questionsResource() {
    if (!m_spResourcesLead_form_questionsResource) {
        setResource(std::make_shared<ResourcesApiResources::ResourcesLead_form_questionsResource>());
    }
    return m_spResourcesLead_form_questionsResource;
}
std::shared_ptr<ResourcesApiResources::ResourcesMetrics_ready_stateResource> ResourcesApi::getResourcesMetrics_ready_stateResource() {
    if (!m_spResourcesMetrics_ready_stateResource) {
        setResource(std::make_shared<ResourcesApiResources::ResourcesMetrics_ready_stateResource>());
    }
    return m_spResourcesMetrics_ready_stateResource;
}
std::shared_ptr<ResourcesApiResources::ResourcesTargetingTargeting_typeResource> ResourcesApi::getResourcesTargetingTargeting_typeResource() {
    if (!m_spResourcesTargetingTargeting_typeResource) {
        setResource(std::make_shared<ResourcesApiResources::ResourcesTargetingTargeting_typeResource>());
    }
    return m_spResourcesTargetingTargeting_typeResource;
}
void ResourcesApi::setResource(std::shared_ptr<ResourcesApiResources::ResourcesAd_account_countriesResource> resource) {
    m_spResourcesAd_account_countriesResource = resource;
    m_service->publish(m_spResourcesAd_account_countriesResource);
}
void ResourcesApi::setResource(std::shared_ptr<ResourcesApiResources::ResourcesDelivery_metricsResource> resource) {
    m_spResourcesDelivery_metricsResource = resource;
    m_service->publish(m_spResourcesDelivery_metricsResource);
}
void ResourcesApi::setResource(std::shared_ptr<ResourcesApiResources::ResourcesTargetingInterestsInterest_idResource> resource) {
    m_spResourcesTargetingInterestsInterest_idResource = resource;
    m_service->publish(m_spResourcesTargetingInterestsInterest_idResource);
}
void ResourcesApi::setResource(std::shared_ptr<ResourcesApiResources::ResourcesLead_form_questionsResource> resource) {
    m_spResourcesLead_form_questionsResource = resource;
    m_service->publish(m_spResourcesLead_form_questionsResource);
}
void ResourcesApi::setResource(std::shared_ptr<ResourcesApiResources::ResourcesMetrics_ready_stateResource> resource) {
    m_spResourcesMetrics_ready_stateResource = resource;
    m_service->publish(m_spResourcesMetrics_ready_stateResource);
}
void ResourcesApi::setResource(std::shared_ptr<ResourcesApiResources::ResourcesTargetingTargeting_typeResource> resource) {
    m_spResourcesTargetingTargeting_typeResource = resource;
    m_service->publish(m_spResourcesTargetingTargeting_typeResource);
}
void ResourcesApi::setResourcesApiResourcesAd_account_countriesResource(std::shared_ptr<ResourcesApiResources::ResourcesAd_account_countriesResource> spResourcesAd_account_countriesResource) {
    m_spResourcesAd_account_countriesResource = spResourcesAd_account_countriesResource;
    m_service->publish(m_spResourcesAd_account_countriesResource);
}
void ResourcesApi::setResourcesApiResourcesDelivery_metricsResource(std::shared_ptr<ResourcesApiResources::ResourcesDelivery_metricsResource> spResourcesDelivery_metricsResource) {
    m_spResourcesDelivery_metricsResource = spResourcesDelivery_metricsResource;
    m_service->publish(m_spResourcesDelivery_metricsResource);
}
void ResourcesApi::setResourcesApiResourcesTargetingInterestsInterest_idResource(std::shared_ptr<ResourcesApiResources::ResourcesTargetingInterestsInterest_idResource> spResourcesTargetingInterestsInterest_idResource) {
    m_spResourcesTargetingInterestsInterest_idResource = spResourcesTargetingInterestsInterest_idResource;
    m_service->publish(m_spResourcesTargetingInterestsInterest_idResource);
}
void ResourcesApi::setResourcesApiResourcesLead_form_questionsResource(std::shared_ptr<ResourcesApiResources::ResourcesLead_form_questionsResource> spResourcesLead_form_questionsResource) {
    m_spResourcesLead_form_questionsResource = spResourcesLead_form_questionsResource;
    m_service->publish(m_spResourcesLead_form_questionsResource);
}
void ResourcesApi::setResourcesApiResourcesMetrics_ready_stateResource(std::shared_ptr<ResourcesApiResources::ResourcesMetrics_ready_stateResource> spResourcesMetrics_ready_stateResource) {
    m_spResourcesMetrics_ready_stateResource = spResourcesMetrics_ready_stateResource;
    m_service->publish(m_spResourcesMetrics_ready_stateResource);
}
void ResourcesApi::setResourcesApiResourcesTargetingTargeting_typeResource(std::shared_ptr<ResourcesApiResources::ResourcesTargetingTargeting_typeResource> spResourcesTargetingTargeting_typeResource) {
    m_spResourcesTargetingTargeting_typeResource = spResourcesTargetingTargeting_typeResource;
    m_service->publish(m_spResourcesTargetingTargeting_typeResource);
}


void ResourcesApi::publishDefaultResources() {
    if (!m_spResourcesAd_account_countriesResource) {
        setResource(std::make_shared<ResourcesApiResources::ResourcesAd_account_countriesResource>());
    }
    if (!m_spResourcesDelivery_metricsResource) {
        setResource(std::make_shared<ResourcesApiResources::ResourcesDelivery_metricsResource>());
    }
    if (!m_spResourcesTargetingInterestsInterest_idResource) {
        setResource(std::make_shared<ResourcesApiResources::ResourcesTargetingInterestsInterest_idResource>());
    }
    if (!m_spResourcesLead_form_questionsResource) {
        setResource(std::make_shared<ResourcesApiResources::ResourcesLead_form_questionsResource>());
    }
    if (!m_spResourcesMetrics_ready_stateResource) {
        setResource(std::make_shared<ResourcesApiResources::ResourcesMetrics_ready_stateResource>());
    }
    if (!m_spResourcesTargetingTargeting_typeResource) {
        setResource(std::make_shared<ResourcesApiResources::ResourcesTargetingTargeting_typeResource>());
    }
}

std::shared_ptr<restbed::Service> ResourcesApi::service() {
    return m_service;
}


}
}
}
}

