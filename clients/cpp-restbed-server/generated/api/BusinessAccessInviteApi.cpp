/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "BusinessAccessInviteApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

namespace {
[[maybe_unused]]
std::string selectPreferredContentType(const std::vector<std::string>& contentTypes) {
    if (contentTypes.size() == 0) {
        return "application/json";
    }

    if (contentTypes.size() == 1) {
        return contentTypes.at(0);
    }

    static const std::array<std::string, 2> preferredTypes = {"json", "xml"};
    for (const auto& preferredType: preferredTypes) {
        const auto ret = std::find_if(contentTypes.cbegin(),
        contentTypes.cend(),
        [preferredType](const std::string& str) {
            return str.find(preferredType) != std::string::npos;});
        if (ret != contentTypes.cend()) {
            return *ret;
        }
    }

    return contentTypes.at(0);
}
}

BusinessAccessInviteApiException::BusinessAccessInviteApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int BusinessAccessInviteApiException::getStatus() const
{
    return m_status;
}
const char* BusinessAccessInviteApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
MODEL_T extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = MODEL_T(pt);
    return model;
}

template<class MODEL_T>
std::vector<MODEL_T> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<MODEL_T>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(MODEL_T(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

namespace BusinessAccessInviteApiResources {
BusinessesBusiness_idRequestsAssetsAccessResource::BusinessesBusiness_idRequestsAssetsAccessResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/businesses/{business_id: .*}/requests/assets/access");
	this->set_method_handler("POST",
		std::bind(&BusinessesBusiness_idRequestsAssetsAccessResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BusinessesBusiness_idRequestsAssetsAccessResource::handleBusinessAccessInviteApiException(const BusinessAccessInviteApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BusinessesBusiness_idRequestsAssetsAccessResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BusinessesBusiness_idRequestsAssetsAccessResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BusinessesBusiness_idRequestsAssetsAccessResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BusinessesBusiness_idRequestsAssetsAccessResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BusinessesBusiness_idRequestsAssetsAccessResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BusinessesBusiness_idRequestsAssetsAccessResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto createAssetAccessRequestBody = extractJsonModelBodyParam<CreateAssetAccessRequestBody>(bodyContent);
    // Getting the path params
    std::string businessId = request->get_path_parameter("business_id", "");
    
    int status_code = 500;
    CreateAssetAccessRequestResponse resultObject = CreateAssetAccessRequestResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(businessId, createAssetAccessRequestBody);
    }
    catch(const BusinessAccessInviteApiException& e) {
        std::tie(status_code, result) = handleBusinessAccessInviteApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, CreateAssetAccessRequestResponse> BusinessesBusiness_idRequestsAssetsAccessResource::handler_POST(
        std::string & businessId, CreateAssetAccessRequestBody & createAssetAccessRequestBody)
{
    return handler_POST_func(businessId, createAssetAccessRequestBody);
}


std::string BusinessesBusiness_idRequestsAssetsAccessResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BusinessesBusiness_idRequestsAssetsAccessResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BusinessesBusiness_idInvitesResource::BusinessesBusiness_idInvitesResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/businesses/{business_id: .*}/invites");
	this->set_method_handler("DELETE",
		std::bind(&BusinessesBusiness_idInvitesResource::handler_DELETE_internal, this,
			std::placeholders::_1));
	this->set_method_handler("POST",
		std::bind(&BusinessesBusiness_idInvitesResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&BusinessesBusiness_idInvitesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BusinessesBusiness_idInvitesResource::handleBusinessAccessInviteApiException(const BusinessAccessInviteApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BusinessesBusiness_idInvitesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BusinessesBusiness_idInvitesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BusinessesBusiness_idInvitesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BusinessesBusiness_idInvitesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BusinessesBusiness_idInvitesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BusinessesBusiness_idInvitesResource::handler_DELETE_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto cancelInvitesBody = extractJsonModelBodyParam<CancelInvitesBody>(bodyContent);
    // Getting the path params
    std::string businessId = request->get_path_parameter("business_id", "");
    
    int status_code = 500;
    DeleteInvitesResultsResponseArray resultObject = DeleteInvitesResultsResponseArray{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_DELETE(businessId, cancelInvitesBody);
    }
    catch(const BusinessAccessInviteApiException& e) {
        std::tie(status_code, result) = handleBusinessAccessInviteApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void BusinessesBusiness_idInvitesResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto createMembershipOrPartnershipInvitesBody = extractJsonModelBodyParam<CreateMembershipOrPartnershipInvitesBody>(bodyContent);
    // Getting the path params
    std::string businessId = request->get_path_parameter("business_id", "");
    
    int status_code = 500;
    CreateInvitesResultsResponseArray resultObject = CreateInvitesResultsResponseArray{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(businessId, createMembershipOrPartnershipInvitesBody);
    }
    catch(const BusinessAccessInviteApiException& e) {
        std::tie(status_code, result) = handleBusinessAccessInviteApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}
// x-extension
void BusinessesBusiness_idInvitesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // Getting the path params
    std::string businessId = request->get_path_parameter("business_id", "");
    // Getting the query params
    bool isMember = request->get_query_parameter("isMember", true);
    std::string inviteStatus_raw = request->get_query_parameter("inviteStatus");
    std::vector<std::string> inviteStatus;
    std::vector<std::string> inviteStatus_temp;
    boost::split(inviteStatus_temp, inviteStatus_raw, boost::is_any_of(","));
    std::copy(inviteStatus_temp.begin(), inviteStatus_temp.end(), std::inserter(inviteStatus, std::next(inviteStatus.begin())));
    std::string bookmark = request->get_query_parameter("bookmark", "");
    int32_t pageSize = request->get_query_parameter("pageSize", 25);
    
    int status_code = 500;
    Get_invites_200_response resultObject = Get_invites_200_response{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(businessId, isMember, inviteStatus, inviteType, bookmark, pageSize);
    }
    catch(const BusinessAccessInviteApiException& e) {
        std::tie(status_code, result) = handleBusinessAccessInviteApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, DeleteInvitesResultsResponseArray> BusinessesBusiness_idInvitesResource::handler_DELETE(
        std::string & businessId, CancelInvitesBody & cancelInvitesBody)
{
    return handler_DELETE_func(businessId, cancelInvitesBody);
}

std::pair<int, CreateInvitesResultsResponseArray> BusinessesBusiness_idInvitesResource::handler_POST(
    std::string & businessId, CreateMembershipOrPartnershipInvitesBody & createMembershipOrPartnershipInvitesBody)
{
    return handler_POST_func(businessId, createMembershipOrPartnershipInvitesBody);
}
std::pair<int, Get_invites_200_response> BusinessesBusiness_idInvitesResource::handler_GET(
    std::string & businessId, bool & isMember, std::vector<std::string> & inviteStatus, InviteType & inviteType, std::string & bookmark, int32_t & pageSize)
{
    return handler_GET_func(businessId, isMember, inviteStatus, inviteType, bookmark, pageSize);
}

std::string BusinessesBusiness_idInvitesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BusinessesBusiness_idInvitesResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BusinessesBusiness_idInvitesAssetsAccessResource::BusinessesBusiness_idInvitesAssetsAccessResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/businesses/{business_id: .*}/invites/assets/access");
	this->set_method_handler("POST",
		std::bind(&BusinessesBusiness_idInvitesAssetsAccessResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BusinessesBusiness_idInvitesAssetsAccessResource::handleBusinessAccessInviteApiException(const BusinessAccessInviteApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BusinessesBusiness_idInvitesAssetsAccessResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BusinessesBusiness_idInvitesAssetsAccessResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BusinessesBusiness_idInvitesAssetsAccessResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BusinessesBusiness_idInvitesAssetsAccessResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BusinessesBusiness_idInvitesAssetsAccessResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BusinessesBusiness_idInvitesAssetsAccessResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto createAssetInvitesRequest = extractJsonModelBodyParam<CreateAssetInvitesRequest>(bodyContent);
    // Getting the path params
    std::string businessId = request->get_path_parameter("business_id", "");
    
    int status_code = 500;
    UpdateInvitesResultsResponseArray resultObject = UpdateInvitesResultsResponseArray{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(businessId, createAssetInvitesRequest);
    }
    catch(const BusinessAccessInviteApiException& e) {
        std::tie(status_code, result) = handleBusinessAccessInviteApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, UpdateInvitesResultsResponseArray> BusinessesBusiness_idInvitesAssetsAccessResource::handler_POST(
        std::string & businessId, CreateAssetInvitesRequest & createAssetInvitesRequest)
{
    return handler_POST_func(businessId, createAssetInvitesRequest);
}


std::string BusinessesBusiness_idInvitesAssetsAccessResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BusinessesBusiness_idInvitesAssetsAccessResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BusinessesInvitesResource::BusinessesInvitesResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/businesses/invites");
	this->set_method_handler("PATCH",
		std::bind(&BusinessesInvitesResource::handler_PATCH_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BusinessesInvitesResource::handleBusinessAccessInviteApiException(const BusinessAccessInviteApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BusinessesInvitesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BusinessesInvitesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BusinessesInvitesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BusinessesInvitesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BusinessesInvitesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BusinessesInvitesResource::handler_PATCH_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto authRespondInvitesBody = extractJsonModelBodyParam<AuthRespondInvitesBody>(bodyContent);
    
    int status_code = 500;
    RespondToInvitesResponseArray resultObject = RespondToInvitesResponseArray{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_PATCH(authRespondInvitesBody);
    }
    catch(const BusinessAccessInviteApiException& e) {
        std::tie(status_code, result) = handleBusinessAccessInviteApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, RespondToInvitesResponseArray> BusinessesInvitesResource::handler_PATCH(
        AuthRespondInvitesBody & authRespondInvitesBody)
{
    return handler_PATCH_func(authRespondInvitesBody);
}


std::string BusinessesInvitesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BusinessesInvitesResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}

} /* namespace BusinessAccessInviteApiResources */

BusinessAccessInviteApi::BusinessAccessInviteApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

BusinessAccessInviteApi::~BusinessAccessInviteApi() {}

std::shared_ptr<BusinessAccessInviteApiResources::BusinessesBusiness_idRequestsAssetsAccessResource> BusinessAccessInviteApi::getBusinessesBusiness_idRequestsAssetsAccessResource() {
    if (!m_spBusinessesBusiness_idRequestsAssetsAccessResource) {
        setResource(std::make_shared<BusinessAccessInviteApiResources::BusinessesBusiness_idRequestsAssetsAccessResource>());
    }
    return m_spBusinessesBusiness_idRequestsAssetsAccessResource;
}
std::shared_ptr<BusinessAccessInviteApiResources::BusinessesBusiness_idInvitesResource> BusinessAccessInviteApi::getBusinessesBusiness_idInvitesResource() {
    if (!m_spBusinessesBusiness_idInvitesResource) {
        setResource(std::make_shared<BusinessAccessInviteApiResources::BusinessesBusiness_idInvitesResource>());
    }
    return m_spBusinessesBusiness_idInvitesResource;
}
std::shared_ptr<BusinessAccessInviteApiResources::BusinessesBusiness_idInvitesAssetsAccessResource> BusinessAccessInviteApi::getBusinessesBusiness_idInvitesAssetsAccessResource() {
    if (!m_spBusinessesBusiness_idInvitesAssetsAccessResource) {
        setResource(std::make_shared<BusinessAccessInviteApiResources::BusinessesBusiness_idInvitesAssetsAccessResource>());
    }
    return m_spBusinessesBusiness_idInvitesAssetsAccessResource;
}
std::shared_ptr<BusinessAccessInviteApiResources::BusinessesInvitesResource> BusinessAccessInviteApi::getBusinessesInvitesResource() {
    if (!m_spBusinessesInvitesResource) {
        setResource(std::make_shared<BusinessAccessInviteApiResources::BusinessesInvitesResource>());
    }
    return m_spBusinessesInvitesResource;
}
void BusinessAccessInviteApi::setResource(std::shared_ptr<BusinessAccessInviteApiResources::BusinessesBusiness_idRequestsAssetsAccessResource> resource) {
    m_spBusinessesBusiness_idRequestsAssetsAccessResource = resource;
    m_service->publish(m_spBusinessesBusiness_idRequestsAssetsAccessResource);
}
void BusinessAccessInviteApi::setResource(std::shared_ptr<BusinessAccessInviteApiResources::BusinessesBusiness_idInvitesResource> resource) {
    m_spBusinessesBusiness_idInvitesResource = resource;
    m_service->publish(m_spBusinessesBusiness_idInvitesResource);
}
void BusinessAccessInviteApi::setResource(std::shared_ptr<BusinessAccessInviteApiResources::BusinessesBusiness_idInvitesAssetsAccessResource> resource) {
    m_spBusinessesBusiness_idInvitesAssetsAccessResource = resource;
    m_service->publish(m_spBusinessesBusiness_idInvitesAssetsAccessResource);
}
void BusinessAccessInviteApi::setResource(std::shared_ptr<BusinessAccessInviteApiResources::BusinessesInvitesResource> resource) {
    m_spBusinessesInvitesResource = resource;
    m_service->publish(m_spBusinessesInvitesResource);
}
void BusinessAccessInviteApi::setBusinessAccessInviteApiBusinessesBusiness_idRequestsAssetsAccessResource(std::shared_ptr<BusinessAccessInviteApiResources::BusinessesBusiness_idRequestsAssetsAccessResource> spBusinessesBusiness_idRequestsAssetsAccessResource) {
    m_spBusinessesBusiness_idRequestsAssetsAccessResource = spBusinessesBusiness_idRequestsAssetsAccessResource;
    m_service->publish(m_spBusinessesBusiness_idRequestsAssetsAccessResource);
}
void BusinessAccessInviteApi::setBusinessAccessInviteApiBusinessesBusiness_idInvitesResource(std::shared_ptr<BusinessAccessInviteApiResources::BusinessesBusiness_idInvitesResource> spBusinessesBusiness_idInvitesResource) {
    m_spBusinessesBusiness_idInvitesResource = spBusinessesBusiness_idInvitesResource;
    m_service->publish(m_spBusinessesBusiness_idInvitesResource);
}
void BusinessAccessInviteApi::setBusinessAccessInviteApiBusinessesBusiness_idInvitesAssetsAccessResource(std::shared_ptr<BusinessAccessInviteApiResources::BusinessesBusiness_idInvitesAssetsAccessResource> spBusinessesBusiness_idInvitesAssetsAccessResource) {
    m_spBusinessesBusiness_idInvitesAssetsAccessResource = spBusinessesBusiness_idInvitesAssetsAccessResource;
    m_service->publish(m_spBusinessesBusiness_idInvitesAssetsAccessResource);
}
void BusinessAccessInviteApi::setBusinessAccessInviteApiBusinessesInvitesResource(std::shared_ptr<BusinessAccessInviteApiResources::BusinessesInvitesResource> spBusinessesInvitesResource) {
    m_spBusinessesInvitesResource = spBusinessesInvitesResource;
    m_service->publish(m_spBusinessesInvitesResource);
}


void BusinessAccessInviteApi::publishDefaultResources() {
    if (!m_spBusinessesBusiness_idRequestsAssetsAccessResource) {
        setResource(std::make_shared<BusinessAccessInviteApiResources::BusinessesBusiness_idRequestsAssetsAccessResource>());
    }
    if (!m_spBusinessesBusiness_idInvitesResource) {
        setResource(std::make_shared<BusinessAccessInviteApiResources::BusinessesBusiness_idInvitesResource>());
    }
    if (!m_spBusinessesBusiness_idInvitesAssetsAccessResource) {
        setResource(std::make_shared<BusinessAccessInviteApiResources::BusinessesBusiness_idInvitesAssetsAccessResource>());
    }
    if (!m_spBusinessesInvitesResource) {
        setResource(std::make_shared<BusinessAccessInviteApiResources::BusinessesInvitesResource>());
    }
}

std::shared_ptr<restbed::Service> BusinessAccessInviteApi::service() {
    return m_service;
}


}
}
}
}

