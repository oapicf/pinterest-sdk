/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "PinsApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

namespace {
[[maybe_unused]]
std::string selectPreferredContentType(const std::vector<std::string>& contentTypes) {
    if (contentTypes.size() == 0) {
        return "application/json";
    }

    if (contentTypes.size() == 1) {
        return contentTypes.at(0);
    }

    static const std::array<std::string, 2> preferredTypes = {"json", "xml"};
    for (const auto& preferredType: preferredTypes) {
        const auto ret = std::find_if(contentTypes.cbegin(),
        contentTypes.cend(),
        [preferredType](const std::string& str) {
            return str.find(preferredType) != std::string::npos;});
        if (ret != contentTypes.cend()) {
            return *ret;
        }
    }

    return contentTypes.at(0);
}
}

PinsApiException::PinsApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int PinsApiException::getStatus() const
{
    return m_status;
}
const char* PinsApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
MODEL_T extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = MODEL_T(pt);
    return model;
}

template<class MODEL_T>
std::vector<MODEL_T> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<MODEL_T>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(MODEL_T(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

namespace PinsApiResources {
PinsAnalyticsResource::PinsAnalyticsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/pins/analytics");
	this->set_method_handler("GET",
		std::bind(&PinsAnalyticsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> PinsAnalyticsResource::handlePinsApiException(const PinsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> PinsAnalyticsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> PinsAnalyticsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void PinsAnalyticsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void PinsAnalyticsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void PinsAnalyticsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void PinsAnalyticsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the query params
    std::string pinIds_raw = request->get_query_parameter("pinIds");
    std::vector<std::string> pinIds;
    std::vector<std::string> pinIds_temp;
    boost::split(pinIds_temp, pinIds_raw, boost::is_any_of(","));
    std::copy(pinIds_temp.begin(), pinIds_temp.end(), std::inserter(pinIds, std::next(pinIds.begin())));
    std::string startDate = request->get_query_parameter("startDate", "");
    std::string endDate = request->get_query_parameter("endDate", "");
    std::string appTypes = request->get_query_parameter("appTypes", "ALL");
    std::string metricTypes_raw = request->get_query_parameter("metricTypes");
    std::vector<Pins_analytics_metric_types_parameter_inner> metricTypes;
    std::vector<std::string> metricTypes_temp;
    boost::split(metricTypes_temp, metricTypes_raw, boost::is_any_of(","));
    std::transform(metricTypes_temp.begin(), metricTypes_temp.end(), std::back_inserter(metricTypes), [](const auto& i){ Pins_analytics_metric_types_parameter_inner ret; ret.fromString(i); return ret;});
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    std::map<std::string, std::map> resultObject = std::map<std::string, std::map>();
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(pinIds, startDate, endDate, metricTypes, appTypes, adAccountId);
    }
    catch(const PinsApiException& e) {
        std::tie(status_code, result) = handlePinsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = convertMapResponse(resultObject);
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid pins analytics parameters.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Not authorized to access board or Pin.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Pin not found.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 429) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 429, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, std::map<std::string, std::map>> PinsAnalyticsResource::handler_GET(
        std::vector<std::string> & pinIds, std::string & startDate, std::string & endDate, std::vector<Pins_analytics_metric_types_parameter_inner> & metricTypes, std::string & appTypes, std::string & adAccountId)
{
    return handler_GET_func(pinIds, startDate, endDate, metricTypes, appTypes, adAccountId);
}


std::string PinsAnalyticsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string PinsAnalyticsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
PinsPin_idAnalyticsResource::PinsPin_idAnalyticsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/pins/{pin_id: .*}/analytics");
	this->set_method_handler("GET",
		std::bind(&PinsPin_idAnalyticsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> PinsPin_idAnalyticsResource::handlePinsApiException(const PinsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> PinsPin_idAnalyticsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> PinsPin_idAnalyticsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void PinsPin_idAnalyticsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void PinsPin_idAnalyticsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void PinsPin_idAnalyticsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void PinsPin_idAnalyticsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string pinId = request->get_path_parameter("pin_id", "");
    // Getting the query params
    std::string startDate = request->get_query_parameter("startDate", "");
    std::string endDate = request->get_query_parameter("endDate", "");
    std::string appTypes = request->get_query_parameter("appTypes", "ALL");
    std::string metricTypes_raw = request->get_query_parameter("metricTypes");
    std::vector<Pins_analytics_metric_types_parameter_inner> metricTypes;
    std::vector<std::string> metricTypes_temp;
    boost::split(metricTypes_temp, metricTypes_raw, boost::is_any_of(","));
    std::transform(metricTypes_temp.begin(), metricTypes_temp.end(), std::back_inserter(metricTypes), [](const auto& i){ Pins_analytics_metric_types_parameter_inner ret; ret.fromString(i); return ret;});
    std::string splitField = request->get_query_parameter("splitField", "NO_SPLIT");
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    std::map<std::string, PinAnalyticsMetricsResponse> resultObject = std::map<std::string, PinAnalyticsMetricsResponse>();
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(pinId, startDate, endDate, metricTypes, appTypes, splitField, adAccountId);
    }
    catch(const PinsApiException& e) {
        std::tie(status_code, result) = handlePinsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = convertMapResponse(resultObject);
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid pins analytics parameters.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Not authorized to access board or Pin.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Pin not found.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, std::map<std::string, PinAnalyticsMetricsResponse>> PinsPin_idAnalyticsResource::handler_GET(
        std::string & pinId, std::string & startDate, std::string & endDate, std::vector<Pins_analytics_metric_types_parameter_inner> & metricTypes, std::string & appTypes, std::string & splitField, std::string & adAccountId)
{
    return handler_GET_func(pinId, startDate, endDate, metricTypes, appTypes, splitField, adAccountId);
}


std::string PinsPin_idAnalyticsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string PinsPin_idAnalyticsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
PinsResource::PinsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/pins");
	this->set_method_handler("POST",
		std::bind(&PinsResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&PinsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> PinsResource::handlePinsApiException(const PinsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> PinsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> PinsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void PinsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void PinsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void PinsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void PinsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto pinCreate = extractJsonModelBodyParam<PinCreate>(bodyContent);
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    Pin resultObject = Pin{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(pinCreate, adAccountId);
    }
    catch(const PinsApiException& e) {
        std::tie(status_code, result) = handlePinsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 201) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 201, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid Pin parameters response";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "The Pin&#39;s image is too small, too large or is broken";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Board or section not found";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 429) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 429, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void PinsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // Getting the query params
    std::string bookmark = request->get_query_parameter("bookmark", "");
    int32_t pageSize = request->get_query_parameter("pageSize", 25);
    std::string pinFilter = request->get_query_parameter("pinFilter", "");
    bool includeProtectedPins = request->get_query_parameter("includeProtectedPins", false);
    std::string pinType = request->get_query_parameter("pinType", "");
    std::string creativeTypes_raw = request->get_query_parameter("creativeTypes");
    std::vector<std::string> creativeTypes;
    std::vector<std::string> creativeTypes_temp;
    boost::split(creativeTypes_temp, creativeTypes_raw, boost::is_any_of(","));
    std::copy(creativeTypes_temp.begin(), creativeTypes_temp.end(), std::inserter(creativeTypes, std::next(creativeTypes.begin())));
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    bool pinMetrics = request->get_query_parameter("pinMetrics", false);
    
    int status_code = 500;
    Pins_list_200_response resultObject = Pins_list_200_response{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(bookmark, pageSize, pinFilter, includeProtectedPins, pinType, creativeTypes, adAccountId, pinMetrics);
    }
    catch(const PinsApiException& e) {
        std::tie(status_code, result) = handlePinsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid pin filter value";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, Pin> PinsResource::handler_POST(
        PinCreate & pinCreate, std::string & adAccountId)
{
    return handler_POST_func(pinCreate, adAccountId);
}

std::pair<int, Pins_list_200_response> PinsResource::handler_GET(
    std::string & bookmark, int32_t & pageSize, std::string & pinFilter, bool & includeProtectedPins, std::string & pinType, std::vector<std::string> & creativeTypes, std::string & adAccountId, bool & pinMetrics)
{
    return handler_GET_func(bookmark, pageSize, pinFilter, includeProtectedPins, pinType, creativeTypes, adAccountId, pinMetrics);
}

std::string PinsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string PinsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
PinsPin_idResource::PinsPin_idResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/pins/{pin_id: .*}");
	this->set_method_handler("DELETE",
		std::bind(&PinsPin_idResource::handler_DELETE_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&PinsPin_idResource::handler_GET_internal, this,
			std::placeholders::_1));
	this->set_method_handler("PATCH",
		std::bind(&PinsPin_idResource::handler_PATCH_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> PinsPin_idResource::handlePinsApiException(const PinsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> PinsPin_idResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> PinsPin_idResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void PinsPin_idResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void PinsPin_idResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void PinsPin_idResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void PinsPin_idResource::handler_DELETE_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string pinId = request->get_path_parameter("pin_id", "");
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    std::string result = "";
    
    try {
        status_code =
            handler_DELETE(pinId, adAccountId);
    }
    catch(const PinsApiException& e) {
        std::tie(status_code, result) = handlePinsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 204) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 204, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Not authorized to access board or Pin.";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Pin not found.";
    
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void PinsPin_idResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // Getting the path params
    std::string pinId = request->get_path_parameter("pin_id", "");
    // Getting the query params
    bool pinMetrics = request->get_query_parameter("pinMetrics", false);
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    Pin resultObject = Pin{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(pinId, pinMetrics, adAccountId);
    }
    catch(const PinsApiException& e) {
        std::tie(status_code, result) = handlePinsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Not authorized to access board or Pin.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Pin not found.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}
// x-extension
void PinsPin_idResource::handler_PATCH_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto pinUpdate = extractJsonModelBodyParam<PinUpdate>(bodyContent);
    // Getting the path params
    std::string pinId = request->get_path_parameter("pin_id", "");
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    Pin resultObject = Pin{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_PATCH(pinId, pinUpdate, adAccountId);
    }
    catch(const PinsApiException& e) {
        std::tie(status_code, result) = handlePinsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Not authorized to update Pin.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Pin not found.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 429) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 429, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

int PinsPin_idResource::handler_DELETE(
        std::string & pinId, std::string & adAccountId)
{
    return handler_DELETE_func(pinId, adAccountId);
}

std::pair<int, Pin> PinsPin_idResource::handler_GET(
    std::string & pinId, bool & pinMetrics, std::string & adAccountId)
{
    return handler_GET_func(pinId, pinMetrics, adAccountId);
}
std::pair<int, Pin> PinsPin_idResource::handler_PATCH(
    std::string & pinId, PinUpdate & pinUpdate, std::string & adAccountId)
{
    return handler_PATCH_func(pinId, pinUpdate, adAccountId);
}

std::string PinsPin_idResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string PinsPin_idResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
PinsPin_idSaveResource::PinsPin_idSaveResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/pins/{pin_id: .*}/save");
	this->set_method_handler("POST",
		std::bind(&PinsPin_idSaveResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> PinsPin_idSaveResource::handlePinsApiException(const PinsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> PinsPin_idSaveResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> PinsPin_idSaveResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void PinsPin_idSaveResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void PinsPin_idSaveResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void PinsPin_idSaveResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void PinsPin_idSaveResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto pinsSaveRequest = extractJsonModelBodyParam<Pins_save_request>(bodyContent);
    // Getting the path params
    std::string pinId = request->get_path_parameter("pin_id", "");
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    Pin resultObject = Pin{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(pinId, pinsSaveRequest, adAccountId);
    }
    catch(const PinsApiException& e) {
        std::tie(status_code, result) = handlePinsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 201) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 201, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Not authorized to access Board or Pin.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Board or Pin not found.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, Pin> PinsPin_idSaveResource::handler_POST(
        std::string & pinId, Pins_save_request & pinsSaveRequest, std::string & adAccountId)
{
    return handler_POST_func(pinId, pinsSaveRequest, adAccountId);
}


std::string PinsPin_idSaveResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string PinsPin_idSaveResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}

} /* namespace PinsApiResources */

PinsApi::PinsApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

PinsApi::~PinsApi() {}

std::shared_ptr<PinsApiResources::PinsAnalyticsResource> PinsApi::getPinsAnalyticsResource() {
    if (!m_spPinsAnalyticsResource) {
        setResource(std::make_shared<PinsApiResources::PinsAnalyticsResource>());
    }
    return m_spPinsAnalyticsResource;
}
std::shared_ptr<PinsApiResources::PinsPin_idAnalyticsResource> PinsApi::getPinsPin_idAnalyticsResource() {
    if (!m_spPinsPin_idAnalyticsResource) {
        setResource(std::make_shared<PinsApiResources::PinsPin_idAnalyticsResource>());
    }
    return m_spPinsPin_idAnalyticsResource;
}
std::shared_ptr<PinsApiResources::PinsResource> PinsApi::getPinsResource() {
    if (!m_spPinsResource) {
        setResource(std::make_shared<PinsApiResources::PinsResource>());
    }
    return m_spPinsResource;
}
std::shared_ptr<PinsApiResources::PinsPin_idResource> PinsApi::getPinsPin_idResource() {
    if (!m_spPinsPin_idResource) {
        setResource(std::make_shared<PinsApiResources::PinsPin_idResource>());
    }
    return m_spPinsPin_idResource;
}
std::shared_ptr<PinsApiResources::PinsPin_idSaveResource> PinsApi::getPinsPin_idSaveResource() {
    if (!m_spPinsPin_idSaveResource) {
        setResource(std::make_shared<PinsApiResources::PinsPin_idSaveResource>());
    }
    return m_spPinsPin_idSaveResource;
}
void PinsApi::setResource(std::shared_ptr<PinsApiResources::PinsAnalyticsResource> resource) {
    m_spPinsAnalyticsResource = resource;
    m_service->publish(m_spPinsAnalyticsResource);
}
void PinsApi::setResource(std::shared_ptr<PinsApiResources::PinsPin_idAnalyticsResource> resource) {
    m_spPinsPin_idAnalyticsResource = resource;
    m_service->publish(m_spPinsPin_idAnalyticsResource);
}
void PinsApi::setResource(std::shared_ptr<PinsApiResources::PinsResource> resource) {
    m_spPinsResource = resource;
    m_service->publish(m_spPinsResource);
}
void PinsApi::setResource(std::shared_ptr<PinsApiResources::PinsPin_idResource> resource) {
    m_spPinsPin_idResource = resource;
    m_service->publish(m_spPinsPin_idResource);
}
void PinsApi::setResource(std::shared_ptr<PinsApiResources::PinsPin_idSaveResource> resource) {
    m_spPinsPin_idSaveResource = resource;
    m_service->publish(m_spPinsPin_idSaveResource);
}
void PinsApi::setPinsApiPinsAnalyticsResource(std::shared_ptr<PinsApiResources::PinsAnalyticsResource> spPinsAnalyticsResource) {
    m_spPinsAnalyticsResource = spPinsAnalyticsResource;
    m_service->publish(m_spPinsAnalyticsResource);
}
void PinsApi::setPinsApiPinsPin_idAnalyticsResource(std::shared_ptr<PinsApiResources::PinsPin_idAnalyticsResource> spPinsPin_idAnalyticsResource) {
    m_spPinsPin_idAnalyticsResource = spPinsPin_idAnalyticsResource;
    m_service->publish(m_spPinsPin_idAnalyticsResource);
}
void PinsApi::setPinsApiPinsResource(std::shared_ptr<PinsApiResources::PinsResource> spPinsResource) {
    m_spPinsResource = spPinsResource;
    m_service->publish(m_spPinsResource);
}
void PinsApi::setPinsApiPinsPin_idResource(std::shared_ptr<PinsApiResources::PinsPin_idResource> spPinsPin_idResource) {
    m_spPinsPin_idResource = spPinsPin_idResource;
    m_service->publish(m_spPinsPin_idResource);
}
void PinsApi::setPinsApiPinsPin_idSaveResource(std::shared_ptr<PinsApiResources::PinsPin_idSaveResource> spPinsPin_idSaveResource) {
    m_spPinsPin_idSaveResource = spPinsPin_idSaveResource;
    m_service->publish(m_spPinsPin_idSaveResource);
}


void PinsApi::publishDefaultResources() {
    if (!m_spPinsAnalyticsResource) {
        setResource(std::make_shared<PinsApiResources::PinsAnalyticsResource>());
    }
    if (!m_spPinsPin_idAnalyticsResource) {
        setResource(std::make_shared<PinsApiResources::PinsPin_idAnalyticsResource>());
    }
    if (!m_spPinsResource) {
        setResource(std::make_shared<PinsApiResources::PinsResource>());
    }
    if (!m_spPinsPin_idResource) {
        setResource(std::make_shared<PinsApiResources::PinsPin_idResource>());
    }
    if (!m_spPinsPin_idSaveResource) {
        setResource(std::make_shared<PinsApiResources::PinsPin_idSaveResource>());
    }
}

std::shared_ptr<restbed::Service> PinsApi::service() {
    return m_service;
}


}
}
}
}

