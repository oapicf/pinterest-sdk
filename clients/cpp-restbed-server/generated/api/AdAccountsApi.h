/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdAccountsApi.h
 *
 * 
 */

#ifndef AdAccountsApi_H_
#define AdAccountsApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "AdAccount.h"
#include "AdAccountAnalyticsResponse_inner.h"
#include "AdAccountCreateRequest.h"
#include "Ad_accounts_list_200_response.h"
#include "AdsAnalyticsCreateAsyncRequest.h"
#include "AdsAnalyticsCreateAsyncResponse.h"
#include "AdsAnalyticsGetAsyncResponse.h"
#include "AdsAnalyticsTargetingType.h"
#include "ConversionReportAttributionType.h"
#include "CreateMMMReportRequest.h"
#include "CreateMMMReportResponse.h"
#include "Error.h"
#include "GetMMMReportResponse.h"
#include "Granularity.h"
#include "MetricsResponse.h"
#include "Templates_list_200_response.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  AdAccountsApiException: public std::exception
{
public:
    AdAccountsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace AdAccountsApiResources {
/// <summary>
/// Get targeting analytics for an ad account
/// </summary>
/// <remarks>
/// Get targeting analytics for an ad account. For the requested account and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \&quot;age_bucket\&quot;) for applicable values (e.g. \&quot;45-49\&quot;). &lt;p/&gt; - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
/// </remarks>
class  Ad_accountsAd_account_idTargeting_analyticsResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idTargeting_analyticsResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idTargeting_analyticsResource() = default;

    Ad_accountsAd_account_idTargeting_analyticsResource(
        const Ad_accountsAd_account_idTargeting_analyticsResource& other) = default; // copy constructor
    Ad_accountsAd_account_idTargeting_analyticsResource(Ad_accountsAd_account_idTargeting_analyticsResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idTargeting_analyticsResource& operator=(const Ad_accountsAd_account_idTargeting_analyticsResource& other) = default; // copy assignment
    Ad_accountsAd_account_idTargeting_analyticsResource& operator=(Ad_accountsAd_account_idTargeting_analyticsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, MetricsResponse>(
        std::string & adAccountId, std::string & startDate, std::string & endDate, std::vector<AdsAnalyticsTargetingType> & targetingTypes, std::vector<std::string> & columns, Granularity & granularity, int32_t & clickWindowDays, int32_t & engagementWindowDays, int32_t & viewWindowDays, std::string & conversionReportTime, ConversionReportAttributionType & attributionTypes)> handler_GET_func =
            [](std::string &, std::string &, std::string &, std::vector<AdsAnalyticsTargetingType> &, std::vector<std::string> &, Granularity &, int32_t &, int32_t &, int32_t &, std::string &, ConversionReportAttributionType &) -> std::pair<int, MetricsResponse>
                { throw AdAccountsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, MetricsResponse> handler_GET(
        std::string & adAccountId, std::string & startDate, std::string & endDate, std::vector<AdsAnalyticsTargetingType> & targetingTypes, std::vector<std::string> & columns, Granularity & granularity, int32_t & clickWindowDays, int32_t & engagementWindowDays, int32_t & viewWindowDays, std::string & conversionReportTime, ConversionReportAttributionType & attributionTypes);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAdAccountsApiException(const AdAccountsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get ad account analytics
/// </summary>
/// <remarks>
/// Get analytics for the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time.
/// </remarks>
class  Ad_accountsAd_account_idAnalyticsResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idAnalyticsResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idAnalyticsResource() = default;

    Ad_accountsAd_account_idAnalyticsResource(
        const Ad_accountsAd_account_idAnalyticsResource& other) = default; // copy constructor
    Ad_accountsAd_account_idAnalyticsResource(Ad_accountsAd_account_idAnalyticsResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idAnalyticsResource& operator=(const Ad_accountsAd_account_idAnalyticsResource& other) = default; // copy assignment
    Ad_accountsAd_account_idAnalyticsResource& operator=(Ad_accountsAd_account_idAnalyticsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::vector<AdAccountAnalyticsResponse_inner>>(
        std::string & adAccountId, std::string & startDate, std::string & endDate, std::vector<std::string> & columns, Granularity & granularity, int32_t & clickWindowDays, int32_t & engagementWindowDays, int32_t & viewWindowDays, std::string & conversionReportTime)> handler_GET_func =
            [](std::string &, std::string &, std::string &, std::vector<std::string> &, Granularity &, int32_t &, int32_t &, int32_t &, std::string &) -> std::pair<int, std::vector<AdAccountAnalyticsResponse_inner>>
                { throw AdAccountsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<AdAccountAnalyticsResponse_inner>> handler_GET(
        std::string & adAccountId, std::string & startDate, std::string & endDate, std::vector<std::string> & columns, Granularity & granularity, int32_t & clickWindowDays, int32_t & engagementWindowDays, int32_t & viewWindowDays, std::string & conversionReportTime);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAdAccountsApiException(const AdAccountsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Create ad account
/// </summary>
/// <remarks>
/// Create a new ad account. Different ad accounts can support different currencies, payment methods, etc. An ad account is needed to create campaigns, ad groups, and ads; other accounts (your employees or partners) can be assigned business access and appropriate roles to access an ad account. &lt;p/&gt; You can set up up to 50 ad accounts per user. (The user must have a business account to create an ad account.) &lt;p/&gt; For more, see &lt;a class&#x3D;\&quot;reference external\&quot; href&#x3D;\&quot;https://help.pinterest.com/en/business/article/create-an-advertiser-account\&quot;&gt;Create an advertiser account&lt;/a&gt;.
/// </remarks>
class  Ad_accountsResource: public restbed::Resource
{
public:
    Ad_accountsResource(const std::string& context = "/v5");
    virtual ~Ad_accountsResource() = default;

    Ad_accountsResource(
        const Ad_accountsResource& other) = default; // copy constructor
    Ad_accountsResource(Ad_accountsResource&& other) noexcept = default; // move constructor

    Ad_accountsResource& operator=(const Ad_accountsResource& other) = default; // copy assignment
    Ad_accountsResource& operator=(Ad_accountsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, AdAccount>(
        AdAccountCreateRequest & adAccountCreateRequest)> handler_POST_func =
            [](AdAccountCreateRequest &) -> std::pair<int, AdAccount>
                { throw AdAccountsApiException(501, "Not implemented"); };

    std::function<std::pair<int, Ad_accounts_list_200_response>(
        std::string & bookmark, int32_t & pageSize, bool & includeSharedAccounts)> handler_GET_func =
            [](std::string &, int32_t &, bool &) -> std::pair<int, Ad_accounts_list_200_response>
                { throw AdAccountsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, AdAccount> handler_POST(
        AdAccountCreateRequest & adAccountCreateRequest);

    virtual std::pair<int, Ad_accounts_list_200_response> handler_GET(
        std::string & bookmark, int32_t & pageSize, bool & includeSharedAccounts);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAdAccountsApiException(const AdAccountsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get ad account
/// </summary>
/// <remarks>
/// Get an ad account
/// </remarks>
class  Ad_accountsAd_account_idResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idResource() = default;

    Ad_accountsAd_account_idResource(
        const Ad_accountsAd_account_idResource& other) = default; // copy constructor
    Ad_accountsAd_account_idResource(Ad_accountsAd_account_idResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idResource& operator=(const Ad_accountsAd_account_idResource& other) = default; // copy assignment
    Ad_accountsAd_account_idResource& operator=(Ad_accountsAd_account_idResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, AdAccount>(
        std::string & adAccountId)> handler_GET_func =
            [](std::string &) -> std::pair<int, AdAccount>
                { throw AdAccountsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, AdAccount> handler_GET(
        std::string & adAccountId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAdAccountsApiException(const AdAccountsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Create a request for a Marketing Mix Modeling (MMM) report
/// </summary>
/// <remarks>
/// This creates an asynchronous mmm report based on the given request. It returns a token that you can use to download the report when it is ready. NOTE: An additional limit of 5 queries per minute per advertiser applies to this endpoint while it&#39;s in beta release.
/// </remarks>
class  Ad_accountsAd_account_idMmm_reportsResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idMmm_reportsResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idMmm_reportsResource() = default;

    Ad_accountsAd_account_idMmm_reportsResource(
        const Ad_accountsAd_account_idMmm_reportsResource& other) = default; // copy constructor
    Ad_accountsAd_account_idMmm_reportsResource(Ad_accountsAd_account_idMmm_reportsResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idMmm_reportsResource& operator=(const Ad_accountsAd_account_idMmm_reportsResource& other) = default; // copy assignment
    Ad_accountsAd_account_idMmm_reportsResource& operator=(Ad_accountsAd_account_idMmm_reportsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, CreateMMMReportResponse>(
        std::string & adAccountId, CreateMMMReportRequest & createMMMReportRequest)> handler_POST_func =
            [](std::string &, CreateMMMReportRequest &) -> std::pair<int, CreateMMMReportResponse>
                { throw AdAccountsApiException(501, "Not implemented"); };

    std::function<std::pair<int, GetMMMReportResponse>(
        std::string & adAccountId, std::string & token)> handler_GET_func =
            [](std::string &, std::string &) -> std::pair<int, GetMMMReportResponse>
                { throw AdAccountsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, CreateMMMReportResponse> handler_POST(
        std::string & adAccountId, CreateMMMReportRequest & createMMMReportRequest);

    virtual std::pair<int, GetMMMReportResponse> handler_GET(
        std::string & adAccountId, std::string & token);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAdAccountsApiException(const AdAccountsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Create async request for an account analytics report
/// </summary>
/// <remarks>
/// This returns a token that you can use to download the report when it is ready. Note that this endpoint requires the parameters to be passed as JSON-formatted in the request body. This endpoint does not support URL query parameters. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 914 days before the current date in UTC time and the max time range supported is 186 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days. - If level is PRODUCT_ITEM, the furthest back you can are allowed to pull data is 92 days before the current date in UTC time and the max time range supported is 31 days. - If level is PRODUCT_ITEM, ad_ids and ad_statuses parameters are not allowed. Any columns related to pin promotion and ad is not allowed either.
/// </remarks>
class  Ad_accountsAd_account_idReportsResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idReportsResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idReportsResource() = default;

    Ad_accountsAd_account_idReportsResource(
        const Ad_accountsAd_account_idReportsResource& other) = default; // copy constructor
    Ad_accountsAd_account_idReportsResource(Ad_accountsAd_account_idReportsResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idReportsResource& operator=(const Ad_accountsAd_account_idReportsResource& other) = default; // copy assignment
    Ad_accountsAd_account_idReportsResource& operator=(Ad_accountsAd_account_idReportsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, AdsAnalyticsCreateAsyncResponse>(
        std::string & adAccountId, AdsAnalyticsCreateAsyncRequest & adsAnalyticsCreateAsyncRequest)> handler_POST_func =
            [](std::string &, AdsAnalyticsCreateAsyncRequest &) -> std::pair<int, AdsAnalyticsCreateAsyncResponse>
                { throw AdAccountsApiException(501, "Not implemented"); };

    std::function<std::pair<int, AdsAnalyticsGetAsyncResponse>(
        std::string & adAccountId, std::string & token)> handler_GET_func =
            [](std::string &, std::string &) -> std::pair<int, AdsAnalyticsGetAsyncResponse>
                { throw AdAccountsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, AdsAnalyticsCreateAsyncResponse> handler_POST(
        std::string & adAccountId, AdsAnalyticsCreateAsyncRequest & adsAnalyticsCreateAsyncRequest);

    virtual std::pair<int, AdsAnalyticsGetAsyncResponse> handler_GET(
        std::string & adAccountId, std::string & token);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAdAccountsApiException(const AdAccountsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Create async request for an analytics report using a template
/// </summary>
/// <remarks>
/// This takes a template ID and an optional custom timeframe and constructs an asynchronous report based on the template. It returns a token that you can use to download the report when it is ready.
/// </remarks>
class  Ad_accountsAd_account_idTemplatesTemplate_idReportsResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idTemplatesTemplate_idReportsResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idTemplatesTemplate_idReportsResource() = default;

    Ad_accountsAd_account_idTemplatesTemplate_idReportsResource(
        const Ad_accountsAd_account_idTemplatesTemplate_idReportsResource& other) = default; // copy constructor
    Ad_accountsAd_account_idTemplatesTemplate_idReportsResource(Ad_accountsAd_account_idTemplatesTemplate_idReportsResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idTemplatesTemplate_idReportsResource& operator=(const Ad_accountsAd_account_idTemplatesTemplate_idReportsResource& other) = default; // copy assignment
    Ad_accountsAd_account_idTemplatesTemplate_idReportsResource& operator=(Ad_accountsAd_account_idTemplatesTemplate_idReportsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, AdsAnalyticsCreateAsyncResponse>(
        std::string & adAccountId, std::string & templateId, std::string & startDate, std::string & endDate, Granularity & granularity)> handler_POST_func =
            [](std::string &, std::string &, std::string &, std::string &, Granularity &) -> std::pair<int, AdsAnalyticsCreateAsyncResponse>
                { throw AdAccountsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, AdsAnalyticsCreateAsyncResponse> handler_POST(
        std::string & adAccountId, std::string & templateId, std::string & startDate, std::string & endDate, Granularity & granularity);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAdAccountsApiException(const AdAccountsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Delete ads data for ad account in API Sandbox
/// </summary>
/// <remarks>
/// Delete an ad account and all the ads data associated with that account. A string message is returned indicating the status of the delete operation.  Note: This endpoint is only allowed in the Pinterest API Sandbox (https://api-sandbox.pinterest.com/v5). Go to /docs/developer-tools/sandbox/ for more information.
/// </remarks>
class  Ad_accountsAd_account_idSandboxResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idSandboxResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idSandboxResource() = default;

    Ad_accountsAd_account_idSandboxResource(
        const Ad_accountsAd_account_idSandboxResource& other) = default; // copy constructor
    Ad_accountsAd_account_idSandboxResource(Ad_accountsAd_account_idSandboxResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idSandboxResource& operator=(const Ad_accountsAd_account_idSandboxResource& other) = default; // copy assignment
    Ad_accountsAd_account_idSandboxResource& operator=(Ad_accountsAd_account_idSandboxResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::string>(
        std::string & adAccountId)> handler_DELETE_func =
            [](std::string &) -> std::pair<int, std::string>
                { throw AdAccountsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_DELETE(
        std::string & adAccountId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAdAccountsApiException(const AdAccountsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// List templates
/// </summary>
/// <remarks>
/// Gets all Templates associated with an ad account ID.
/// </remarks>
class  Ad_accountsAd_account_idTemplatesResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idTemplatesResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idTemplatesResource() = default;

    Ad_accountsAd_account_idTemplatesResource(
        const Ad_accountsAd_account_idTemplatesResource& other) = default; // copy constructor
    Ad_accountsAd_account_idTemplatesResource(Ad_accountsAd_account_idTemplatesResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idTemplatesResource& operator=(const Ad_accountsAd_account_idTemplatesResource& other) = default; // copy assignment
    Ad_accountsAd_account_idTemplatesResource& operator=(Ad_accountsAd_account_idTemplatesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Templates_list_200_response>(
        std::string & adAccountId, int32_t & pageSize, std::string & order, std::string & bookmark)> handler_GET_func =
            [](std::string &, int32_t &, std::string &, std::string &) -> std::pair<int, Templates_list_200_response>
                { throw AdAccountsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Templates_list_200_response> handler_GET(
        std::string & adAccountId, int32_t & pageSize, std::string & order, std::string & bookmark);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleAdAccountsApiException(const AdAccountsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace AdAccountsApiResources */

using AdAccountsApiAd_accountsAd_account_idTargeting_analyticsResource [[deprecated]] = AdAccountsApiResources::Ad_accountsAd_account_idTargeting_analyticsResource;
using AdAccountsApiAd_accountsAd_account_idAnalyticsResource [[deprecated]] = AdAccountsApiResources::Ad_accountsAd_account_idAnalyticsResource;
using AdAccountsApiAd_accountsResource [[deprecated]] = AdAccountsApiResources::Ad_accountsResource;
using AdAccountsApiAd_accountsAd_account_idResource [[deprecated]] = AdAccountsApiResources::Ad_accountsAd_account_idResource;
using AdAccountsApiAd_accountsAd_account_idMmm_reportsResource [[deprecated]] = AdAccountsApiResources::Ad_accountsAd_account_idMmm_reportsResource;
using AdAccountsApiAd_accountsAd_account_idReportsResource [[deprecated]] = AdAccountsApiResources::Ad_accountsAd_account_idReportsResource;
using AdAccountsApiAd_accountsAd_account_idTemplatesTemplate_idReportsResource [[deprecated]] = AdAccountsApiResources::Ad_accountsAd_account_idTemplatesTemplate_idReportsResource;
using AdAccountsApiAd_accountsAd_account_idSandboxResource [[deprecated]] = AdAccountsApiResources::Ad_accountsAd_account_idSandboxResource;
using AdAccountsApiAd_accountsAd_account_idTemplatesResource [[deprecated]] = AdAccountsApiResources::Ad_accountsAd_account_idTemplatesResource;

//
// The restbed service to actually implement the REST server
//
class  AdAccountsApi
{
public:
    explicit AdAccountsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~AdAccountsApi();

    std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idTargeting_analyticsResource> getAd_accountsAd_account_idTargeting_analyticsResource();
    std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idAnalyticsResource> getAd_accountsAd_account_idAnalyticsResource();
    std::shared_ptr<AdAccountsApiResources::Ad_accountsResource> getAd_accountsResource();
    std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idResource> getAd_accountsAd_account_idResource();
    std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idMmm_reportsResource> getAd_accountsAd_account_idMmm_reportsResource();
    std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idReportsResource> getAd_accountsAd_account_idReportsResource();
    std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idTemplatesTemplate_idReportsResource> getAd_accountsAd_account_idTemplatesTemplate_idReportsResource();
    std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idSandboxResource> getAd_accountsAd_account_idSandboxResource();
    std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idTemplatesResource> getAd_accountsAd_account_idTemplatesResource();

    void setResource(std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idTargeting_analyticsResource> resource);
    void setResource(std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idAnalyticsResource> resource);
    void setResource(std::shared_ptr<AdAccountsApiResources::Ad_accountsResource> resource);
    void setResource(std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idResource> resource);
    void setResource(std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idMmm_reportsResource> resource);
    void setResource(std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idReportsResource> resource);
    void setResource(std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idTemplatesTemplate_idReportsResource> resource);
    void setResource(std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idSandboxResource> resource);
    void setResource(std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idTemplatesResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setAdAccountsApiAd_accountsAd_account_idTargeting_analyticsResource(std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idTargeting_analyticsResource> spAdAccountsApiAd_accountsAd_account_idTargeting_analyticsResource);
    [[deprecated("use setResource()")]]
    virtual void setAdAccountsApiAd_accountsAd_account_idAnalyticsResource(std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idAnalyticsResource> spAdAccountsApiAd_accountsAd_account_idAnalyticsResource);
    [[deprecated("use setResource()")]]
    virtual void setAdAccountsApiAd_accountsResource(std::shared_ptr<AdAccountsApiResources::Ad_accountsResource> spAdAccountsApiAd_accountsResource);
    [[deprecated("use setResource()")]]
    virtual void setAdAccountsApiAd_accountsAd_account_idResource(std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idResource> spAdAccountsApiAd_accountsAd_account_idResource);
    [[deprecated("use setResource()")]]
    virtual void setAdAccountsApiAd_accountsAd_account_idMmm_reportsResource(std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idMmm_reportsResource> spAdAccountsApiAd_accountsAd_account_idMmm_reportsResource);
    [[deprecated("use setResource()")]]
    virtual void setAdAccountsApiAd_accountsAd_account_idReportsResource(std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idReportsResource> spAdAccountsApiAd_accountsAd_account_idReportsResource);
    [[deprecated("use setResource()")]]
    virtual void setAdAccountsApiAd_accountsAd_account_idTemplatesTemplate_idReportsResource(std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idTemplatesTemplate_idReportsResource> spAdAccountsApiAd_accountsAd_account_idTemplatesTemplate_idReportsResource);
    [[deprecated("use setResource()")]]
    virtual void setAdAccountsApiAd_accountsAd_account_idSandboxResource(std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idSandboxResource> spAdAccountsApiAd_accountsAd_account_idSandboxResource);
    [[deprecated("use setResource()")]]
    virtual void setAdAccountsApiAd_accountsAd_account_idTemplatesResource(std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idTemplatesResource> spAdAccountsApiAd_accountsAd_account_idTemplatesResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idTargeting_analyticsResource> m_spAd_accountsAd_account_idTargeting_analyticsResource;
    std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idAnalyticsResource> m_spAd_accountsAd_account_idAnalyticsResource;
    std::shared_ptr<AdAccountsApiResources::Ad_accountsResource> m_spAd_accountsResource;
    std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idResource> m_spAd_accountsAd_account_idResource;
    std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idMmm_reportsResource> m_spAd_accountsAd_account_idMmm_reportsResource;
    std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idReportsResource> m_spAd_accountsAd_account_idReportsResource;
    std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idTemplatesTemplate_idReportsResource> m_spAd_accountsAd_account_idTemplatesTemplate_idReportsResource;
    std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idSandboxResource> m_spAd_accountsAd_account_idSandboxResource;
    std::shared_ptr<AdAccountsApiResources::Ad_accountsAd_account_idTemplatesResource> m_spAd_accountsAd_account_idTemplatesResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* AdAccountsApi_H_ */

