/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * IntegrationsApi.h
 *
 * 
 */

#ifndef IntegrationsApi_H_
#define IntegrationsApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "DetailedError.h"
#include "Error.h"
#include "IntegrationLogsRequest.h"
#include "IntegrationLogsSuccessResponse.h"
#include "IntegrationMetadata.h"
#include "IntegrationRecord.h"
#include "IntegrationRequest.h"
#include "IntegrationRequestPatch.h"
#include "Integrations_get_list_200_response.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  IntegrationsApiException: public std::exception
{
public:
    IntegrationsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace IntegrationsApiResources {
/// <summary>
/// Delete commerce integration
/// </summary>
/// <remarks>
/// Delete commerce integration metadata for the given external business ID. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
/// </remarks>
class  IntegrationsCommerceExternal_business_idResource: public restbed::Resource
{
public:
    IntegrationsCommerceExternal_business_idResource(const std::string& context = "/v5");
    virtual ~IntegrationsCommerceExternal_business_idResource() = default;

    IntegrationsCommerceExternal_business_idResource(
        const IntegrationsCommerceExternal_business_idResource& other) = default; // copy constructor
    IntegrationsCommerceExternal_business_idResource(IntegrationsCommerceExternal_business_idResource&& other) noexcept = default; // move constructor

    IntegrationsCommerceExternal_business_idResource& operator=(const IntegrationsCommerceExternal_business_idResource& other) = default; // copy assignment
    IntegrationsCommerceExternal_business_idResource& operator=(IntegrationsCommerceExternal_business_idResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<int(
        std::string & externalBusinessId)> handler_DELETE_func =
            [](std::string &) -> int
                { throw IntegrationsApiException(501, "Not implemented"); };

    std::function<std::pair<int, IntegrationMetadata>(
        std::string & externalBusinessId)> handler_GET_func =
            [](std::string &) -> std::pair<int, IntegrationMetadata>
                { throw IntegrationsApiException(501, "Not implemented"); };

    std::function<std::pair<int, IntegrationMetadata>(
        std::string & externalBusinessId, IntegrationRequestPatch & integrationRequestPatch)> handler_PATCH_func =
            [](std::string &, IntegrationRequestPatch &) -> std::pair<int, IntegrationMetadata>
                { throw IntegrationsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_DELETE(
        std::string & externalBusinessId);

    virtual std::pair<int, IntegrationMetadata> handler_GET(
        std::string & externalBusinessId);
    virtual std::pair<int, IntegrationMetadata> handler_PATCH(
        std::string & externalBusinessId, IntegrationRequestPatch & integrationRequestPatch);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleIntegrationsApiException(const IntegrationsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PATCH_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Create commerce integration
/// </summary>
/// <remarks>
/// Create commerce integration metadata to link an external business ID with a Pinterest merchant &amp; ad account. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
/// </remarks>
class  IntegrationsCommerceResource: public restbed::Resource
{
public:
    IntegrationsCommerceResource(const std::string& context = "/v5");
    virtual ~IntegrationsCommerceResource() = default;

    IntegrationsCommerceResource(
        const IntegrationsCommerceResource& other) = default; // copy constructor
    IntegrationsCommerceResource(IntegrationsCommerceResource&& other) noexcept = default; // move constructor

    IntegrationsCommerceResource& operator=(const IntegrationsCommerceResource& other) = default; // copy assignment
    IntegrationsCommerceResource& operator=(IntegrationsCommerceResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, IntegrationMetadata>(
        IntegrationRequest & integrationRequest)> handler_POST_func =
            [](IntegrationRequest &) -> std::pair<int, IntegrationMetadata>
                { throw IntegrationsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, IntegrationMetadata> handler_POST(
        IntegrationRequest & integrationRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleIntegrationsApiException(const IntegrationsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Receives batched logs from integration applications.
/// </summary>
/// <remarks>
/// This endpoint receives batched logs from integration applications on partner platforms. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
/// </remarks>
class  IntegrationsLogsResource: public restbed::Resource
{
public:
    IntegrationsLogsResource(const std::string& context = "/v5");
    virtual ~IntegrationsLogsResource() = default;

    IntegrationsLogsResource(
        const IntegrationsLogsResource& other) = default; // copy constructor
    IntegrationsLogsResource(IntegrationsLogsResource&& other) noexcept = default; // move constructor

    IntegrationsLogsResource& operator=(const IntegrationsLogsResource& other) = default; // copy assignment
    IntegrationsLogsResource& operator=(IntegrationsLogsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, IntegrationLogsSuccessResponse>(
        IntegrationLogsRequest & integrationLogsRequest)> handler_POST_func =
            [](IntegrationLogsRequest &) -> std::pair<int, IntegrationLogsSuccessResponse>
                { throw IntegrationsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, IntegrationLogsSuccessResponse> handler_POST(
        IntegrationLogsRequest & integrationLogsRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleIntegrationsApiException(const IntegrationsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get integration metadata
/// </summary>
/// <remarks>
/// Get integration metadata by ID. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
/// </remarks>
class  IntegrationsIdResource: public restbed::Resource
{
public:
    IntegrationsIdResource(const std::string& context = "/v5");
    virtual ~IntegrationsIdResource() = default;

    IntegrationsIdResource(
        const IntegrationsIdResource& other) = default; // copy constructor
    IntegrationsIdResource(IntegrationsIdResource&& other) noexcept = default; // move constructor

    IntegrationsIdResource& operator=(const IntegrationsIdResource& other) = default; // copy assignment
    IntegrationsIdResource& operator=(IntegrationsIdResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, IntegrationRecord>(
        std::string & id)> handler_GET_func =
            [](std::string &) -> std::pair<int, IntegrationRecord>
                { throw IntegrationsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, IntegrationRecord> handler_GET(
        std::string & id);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleIntegrationsApiException(const IntegrationsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get integration metadata list
/// </summary>
/// <remarks>
/// Get integration metadata list. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
/// </remarks>
class  IntegrationsResource: public restbed::Resource
{
public:
    IntegrationsResource(const std::string& context = "/v5");
    virtual ~IntegrationsResource() = default;

    IntegrationsResource(
        const IntegrationsResource& other) = default; // copy constructor
    IntegrationsResource(IntegrationsResource&& other) noexcept = default; // move constructor

    IntegrationsResource& operator=(const IntegrationsResource& other) = default; // copy assignment
    IntegrationsResource& operator=(IntegrationsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Integrations_get_list_200_response>(
        std::string & bookmark, int32_t & pageSize)> handler_GET_func =
            [](std::string &, int32_t &) -> std::pair<int, Integrations_get_list_200_response>
                { throw IntegrationsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Integrations_get_list_200_response> handler_GET(
        std::string & bookmark, int32_t & pageSize);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleIntegrationsApiException(const IntegrationsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace IntegrationsApiResources */

using IntegrationsApiIntegrationsCommerceExternal_business_idResource [[deprecated]] = IntegrationsApiResources::IntegrationsCommerceExternal_business_idResource;
using IntegrationsApiIntegrationsCommerceResource [[deprecated]] = IntegrationsApiResources::IntegrationsCommerceResource;
using IntegrationsApiIntegrationsLogsResource [[deprecated]] = IntegrationsApiResources::IntegrationsLogsResource;
using IntegrationsApiIntegrationsIdResource [[deprecated]] = IntegrationsApiResources::IntegrationsIdResource;
using IntegrationsApiIntegrationsResource [[deprecated]] = IntegrationsApiResources::IntegrationsResource;

//
// The restbed service to actually implement the REST server
//
class  IntegrationsApi
{
public:
    explicit IntegrationsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~IntegrationsApi();

    std::shared_ptr<IntegrationsApiResources::IntegrationsCommerceExternal_business_idResource> getIntegrationsCommerceExternal_business_idResource();
    std::shared_ptr<IntegrationsApiResources::IntegrationsCommerceResource> getIntegrationsCommerceResource();
    std::shared_ptr<IntegrationsApiResources::IntegrationsLogsResource> getIntegrationsLogsResource();
    std::shared_ptr<IntegrationsApiResources::IntegrationsIdResource> getIntegrationsIdResource();
    std::shared_ptr<IntegrationsApiResources::IntegrationsResource> getIntegrationsResource();

    void setResource(std::shared_ptr<IntegrationsApiResources::IntegrationsCommerceExternal_business_idResource> resource);
    void setResource(std::shared_ptr<IntegrationsApiResources::IntegrationsCommerceResource> resource);
    void setResource(std::shared_ptr<IntegrationsApiResources::IntegrationsLogsResource> resource);
    void setResource(std::shared_ptr<IntegrationsApiResources::IntegrationsIdResource> resource);
    void setResource(std::shared_ptr<IntegrationsApiResources::IntegrationsResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setIntegrationsApiIntegrationsCommerceExternal_business_idResource(std::shared_ptr<IntegrationsApiResources::IntegrationsCommerceExternal_business_idResource> spIntegrationsApiIntegrationsCommerceExternal_business_idResource);
    [[deprecated("use setResource()")]]
    virtual void setIntegrationsApiIntegrationsCommerceResource(std::shared_ptr<IntegrationsApiResources::IntegrationsCommerceResource> spIntegrationsApiIntegrationsCommerceResource);
    [[deprecated("use setResource()")]]
    virtual void setIntegrationsApiIntegrationsLogsResource(std::shared_ptr<IntegrationsApiResources::IntegrationsLogsResource> spIntegrationsApiIntegrationsLogsResource);
    [[deprecated("use setResource()")]]
    virtual void setIntegrationsApiIntegrationsIdResource(std::shared_ptr<IntegrationsApiResources::IntegrationsIdResource> spIntegrationsApiIntegrationsIdResource);
    [[deprecated("use setResource()")]]
    virtual void setIntegrationsApiIntegrationsResource(std::shared_ptr<IntegrationsApiResources::IntegrationsResource> spIntegrationsApiIntegrationsResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<IntegrationsApiResources::IntegrationsCommerceExternal_business_idResource> m_spIntegrationsCommerceExternal_business_idResource;
    std::shared_ptr<IntegrationsApiResources::IntegrationsCommerceResource> m_spIntegrationsCommerceResource;
    std::shared_ptr<IntegrationsApiResources::IntegrationsLogsResource> m_spIntegrationsLogsResource;
    std::shared_ptr<IntegrationsApiResources::IntegrationsIdResource> m_spIntegrationsIdResource;
    std::shared_ptr<IntegrationsApiResources::IntegrationsResource> m_spIntegrationsResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* IntegrationsApi_H_ */

