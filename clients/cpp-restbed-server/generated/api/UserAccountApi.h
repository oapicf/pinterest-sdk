/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UserAccountApi.h
 *
 * 
 */

#ifndef UserAccountApi_H_
#define UserAccountApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "Account.h"
#include "AnalyticsMetricsResponse.h"
#include "Boards_user_follows_list_200_response.h"
#include "Error.h"
#include "FollowUserRequest.h"
#include "Followers_list_200_response.h"
#include "LinkedBusiness.h"
#include "TopPinsAnalyticsResponse.h"
#include "TopVideoPinsAnalyticsResponse.h"
#include "UserFollowingFeedType.h"
#include "UserSummary.h"
#include "UserWebsiteSummary.h"
#include "UserWebsiteVerificationCode.h"
#include "UserWebsiteVerifyRequest.h"
#include "User_account_followed_interests_200_response.h"
#include "User_following_get_200_response.h"
#include "User_websites_get_200_response.h"
#include <map>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  UserAccountApiException: public std::exception
{
public:
    UserAccountApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace UserAccountApiResources {
/// <summary>
/// List following boards
/// </summary>
/// <remarks>
/// Get a list of the boards a user follows. The request returns a board summary object array.
/// </remarks>
class  User_accountFollowingBoardsResource: public restbed::Resource
{
public:
    User_accountFollowingBoardsResource(const std::string& context = "/v5");
    virtual ~User_accountFollowingBoardsResource() = default;

    User_accountFollowingBoardsResource(
        const User_accountFollowingBoardsResource& other) = default; // copy constructor
    User_accountFollowingBoardsResource(User_accountFollowingBoardsResource&& other) noexcept = default; // move constructor

    User_accountFollowingBoardsResource& operator=(const User_accountFollowingBoardsResource& other) = default; // copy assignment
    User_accountFollowingBoardsResource& operator=(User_accountFollowingBoardsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Boards_user_follows_list_200_response>(
        std::string & bookmark, int32_t & pageSize, bool & explicitFollowing, std::string & adAccountId)> handler_GET_func =
            [](std::string &, int32_t &, bool &, std::string &) -> std::pair<int, Boards_user_follows_list_200_response>
                { throw UserAccountApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Boards_user_follows_list_200_response> handler_GET(
        std::string & bookmark, int32_t & pageSize, bool & explicitFollowing, std::string & adAccountId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleUserAccountApiException(const UserAccountApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Follow user
/// </summary>
/// <remarks>
/// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Use this request, as a signed-in user, to follow another user.
/// </remarks>
class  User_accountFollowingUsernameResource: public restbed::Resource
{
public:
    User_accountFollowingUsernameResource(const std::string& context = "/v5");
    virtual ~User_accountFollowingUsernameResource() = default;

    User_accountFollowingUsernameResource(
        const User_accountFollowingUsernameResource& other) = default; // copy constructor
    User_accountFollowingUsernameResource(User_accountFollowingUsernameResource&& other) noexcept = default; // move constructor

    User_accountFollowingUsernameResource& operator=(const User_accountFollowingUsernameResource& other) = default; // copy assignment
    User_accountFollowingUsernameResource& operator=(User_accountFollowingUsernameResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, UserSummary>(
        std::string & username, FollowUserRequest & followUserRequest)> handler_POST_func =
            [](std::string &, FollowUserRequest &) -> std::pair<int, UserSummary>
                { throw UserAccountApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, UserSummary> handler_POST(
        std::string & username, FollowUserRequest & followUserRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleUserAccountApiException(const UserAccountApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// List followers
/// </summary>
/// <remarks>
/// Get a list of your followers.
/// </remarks>
class  User_accountFollowersResource: public restbed::Resource
{
public:
    User_accountFollowersResource(const std::string& context = "/v5");
    virtual ~User_accountFollowersResource() = default;

    User_accountFollowersResource(
        const User_accountFollowersResource& other) = default; // copy constructor
    User_accountFollowersResource(User_accountFollowersResource&& other) noexcept = default; // move constructor

    User_accountFollowersResource& operator=(const User_accountFollowersResource& other) = default; // copy assignment
    User_accountFollowersResource& operator=(User_accountFollowersResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Followers_list_200_response>(
        std::string & bookmark, int32_t & pageSize)> handler_GET_func =
            [](std::string &, int32_t &) -> std::pair<int, Followers_list_200_response>
                { throw UserAccountApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Followers_list_200_response> handler_GET(
        std::string & bookmark, int32_t & pageSize);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleUserAccountApiException(const UserAccountApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// List linked businesses
/// </summary>
/// <remarks>
/// Get a list of your linked business accounts.
/// </remarks>
class  User_accountBusinessesResource: public restbed::Resource
{
public:
    User_accountBusinessesResource(const std::string& context = "/v5");
    virtual ~User_accountBusinessesResource() = default;

    User_accountBusinessesResource(
        const User_accountBusinessesResource& other) = default; // copy constructor
    User_accountBusinessesResource(User_accountBusinessesResource&& other) noexcept = default; // move constructor

    User_accountBusinessesResource& operator=(const User_accountBusinessesResource& other) = default; // copy assignment
    User_accountBusinessesResource& operator=(User_accountBusinessesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::vector<LinkedBusiness>>(
        )> handler_GET_func =
            []() -> std::pair<int, std::vector<LinkedBusiness>>
                { throw UserAccountApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<LinkedBusiness>> handler_GET(
        );


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleUserAccountApiException(const UserAccountApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Unverify website
/// </summary>
/// <remarks>
/// Unverifu a website verified by the signed-in user.
/// </remarks>
class  User_accountWebsitesResource: public restbed::Resource
{
public:
    User_accountWebsitesResource(const std::string& context = "/v5");
    virtual ~User_accountWebsitesResource() = default;

    User_accountWebsitesResource(
        const User_accountWebsitesResource& other) = default; // copy constructor
    User_accountWebsitesResource(User_accountWebsitesResource&& other) noexcept = default; // move constructor

    User_accountWebsitesResource& operator=(const User_accountWebsitesResource& other) = default; // copy assignment
    User_accountWebsitesResource& operator=(User_accountWebsitesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<int(
        std::string & website)> handler_DELETE_func =
            [](std::string &) -> int
                { throw UserAccountApiException(501, "Not implemented"); };

    std::function<std::pair<int, User_websites_get_200_response>(
        std::string & bookmark, int32_t & pageSize)> handler_GET_func =
            [](std::string &, int32_t &) -> std::pair<int, User_websites_get_200_response>
                { throw UserAccountApiException(501, "Not implemented"); };

    std::function<std::pair<int, UserWebsiteSummary>(
        UserWebsiteVerifyRequest & userWebsiteVerifyRequest, std::string & adAccountId)> handler_POST_func =
            [](UserWebsiteVerifyRequest &, std::string &) -> std::pair<int, UserWebsiteSummary>
                { throw UserAccountApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_DELETE(
        std::string & website);

    virtual std::pair<int, User_websites_get_200_response> handler_GET(
        std::string & bookmark, int32_t & pageSize);
    virtual std::pair<int, UserWebsiteSummary> handler_POST(
        UserWebsiteVerifyRequest & userWebsiteVerifyRequest, std::string & adAccountId);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleUserAccountApiException(const UserAccountApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get user account analytics
/// </summary>
/// <remarks>
/// Get analytics for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
/// </remarks>
class  User_accountAnalyticsResource: public restbed::Resource
{
public:
    User_accountAnalyticsResource(const std::string& context = "/v5");
    virtual ~User_accountAnalyticsResource() = default;

    User_accountAnalyticsResource(
        const User_accountAnalyticsResource& other) = default; // copy constructor
    User_accountAnalyticsResource(User_accountAnalyticsResource&& other) noexcept = default; // move constructor

    User_accountAnalyticsResource& operator=(const User_accountAnalyticsResource& other) = default; // copy assignment
    User_accountAnalyticsResource& operator=(User_accountAnalyticsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::map<std::string, AnalyticsMetricsResponse>>(
        std::string & startDate, std::string & endDate, std::string & fromClaimedContent, std::string & pinFormat, std::string & appTypes, std::string & contentType, std::string & source, std::vector<std::string> & metricTypes, std::string & splitField, std::string & adAccountId)> handler_GET_func =
            [](std::string &, std::string &, std::string &, std::string &, std::string &, std::string &, std::string &, std::vector<std::string> &, std::string &, std::string &) -> std::pair<int, std::map<std::string, AnalyticsMetricsResponse>>
                { throw UserAccountApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::map<std::string, AnalyticsMetricsResponse>> handler_GET(
        std::string & startDate, std::string & endDate, std::string & fromClaimedContent, std::string & pinFormat, std::string & appTypes, std::string & contentType, std::string & source, std::vector<std::string> & metricTypes, std::string & splitField, std::string & adAccountId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleUserAccountApiException(const UserAccountApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get user account top pins analytics
/// </summary>
/// <remarks>
/// Gets analytics data about a user&#39;s top pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
/// </remarks>
class  User_accountAnalyticsTop_pinsResource: public restbed::Resource
{
public:
    User_accountAnalyticsTop_pinsResource(const std::string& context = "/v5");
    virtual ~User_accountAnalyticsTop_pinsResource() = default;

    User_accountAnalyticsTop_pinsResource(
        const User_accountAnalyticsTop_pinsResource& other) = default; // copy constructor
    User_accountAnalyticsTop_pinsResource(User_accountAnalyticsTop_pinsResource&& other) noexcept = default; // move constructor

    User_accountAnalyticsTop_pinsResource& operator=(const User_accountAnalyticsTop_pinsResource& other) = default; // copy assignment
    User_accountAnalyticsTop_pinsResource& operator=(User_accountAnalyticsTop_pinsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, TopPinsAnalyticsResponse>(
        std::string & startDate, std::string & endDate, std::string & sortBy, std::string & fromClaimedContent, std::string & pinFormat, std::string & appTypes, std::string & contentType, std::string & source, std::vector<std::string> & metricTypes, int32_t & numOfPins, int32_t & createdInLastNDays, std::string & adAccountId)> handler_GET_func =
            [](std::string &, std::string &, std::string &, std::string &, std::string &, std::string &, std::string &, std::string &, std::vector<std::string> &, int32_t &, int32_t &, std::string &) -> std::pair<int, TopPinsAnalyticsResponse>
                { throw UserAccountApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, TopPinsAnalyticsResponse> handler_GET(
        std::string & startDate, std::string & endDate, std::string & sortBy, std::string & fromClaimedContent, std::string & pinFormat, std::string & appTypes, std::string & contentType, std::string & source, std::vector<std::string> & metricTypes, int32_t & numOfPins, int32_t & createdInLastNDays, std::string & adAccountId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleUserAccountApiException(const UserAccountApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get user account top video pins analytics
/// </summary>
/// <remarks>
/// Gets analytics data about a user&#39;s top video pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
/// </remarks>
class  User_accountAnalyticsTop_video_pinsResource: public restbed::Resource
{
public:
    User_accountAnalyticsTop_video_pinsResource(const std::string& context = "/v5");
    virtual ~User_accountAnalyticsTop_video_pinsResource() = default;

    User_accountAnalyticsTop_video_pinsResource(
        const User_accountAnalyticsTop_video_pinsResource& other) = default; // copy constructor
    User_accountAnalyticsTop_video_pinsResource(User_accountAnalyticsTop_video_pinsResource&& other) noexcept = default; // move constructor

    User_accountAnalyticsTop_video_pinsResource& operator=(const User_accountAnalyticsTop_video_pinsResource& other) = default; // copy assignment
    User_accountAnalyticsTop_video_pinsResource& operator=(User_accountAnalyticsTop_video_pinsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, TopVideoPinsAnalyticsResponse>(
        std::string & startDate, std::string & endDate, std::string & sortBy, std::string & fromClaimedContent, std::string & pinFormat, std::string & appTypes, std::string & contentType, std::string & source, std::vector<std::string> & metricTypes, int32_t & numOfPins, int32_t & createdInLastNDays, std::string & adAccountId)> handler_GET_func =
            [](std::string &, std::string &, std::string &, std::string &, std::string &, std::string &, std::string &, std::string &, std::vector<std::string> &, int32_t &, int32_t &, std::string &) -> std::pair<int, TopVideoPinsAnalyticsResponse>
                { throw UserAccountApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, TopVideoPinsAnalyticsResponse> handler_GET(
        std::string & startDate, std::string & endDate, std::string & sortBy, std::string & fromClaimedContent, std::string & pinFormat, std::string & appTypes, std::string & contentType, std::string & source, std::vector<std::string> & metricTypes, int32_t & numOfPins, int32_t & createdInLastNDays, std::string & adAccountId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleUserAccountApiException(const UserAccountApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// List following interests
/// </summary>
/// <remarks>
/// Get a list of a user&#39;s following interests in one place.
/// </remarks>
class  UsersUsernameInterestsFollowResource: public restbed::Resource
{
public:
    UsersUsernameInterestsFollowResource(const std::string& context = "/v5");
    virtual ~UsersUsernameInterestsFollowResource() = default;

    UsersUsernameInterestsFollowResource(
        const UsersUsernameInterestsFollowResource& other) = default; // copy constructor
    UsersUsernameInterestsFollowResource(UsersUsernameInterestsFollowResource&& other) noexcept = default; // move constructor

    UsersUsernameInterestsFollowResource& operator=(const UsersUsernameInterestsFollowResource& other) = default; // copy assignment
    UsersUsernameInterestsFollowResource& operator=(UsersUsernameInterestsFollowResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, User_account_followed_interests_200_response>(
        std::string & username, std::string & bookmark, int32_t & pageSize)> handler_GET_func =
            [](std::string &, std::string &, int32_t &) -> std::pair<int, User_account_followed_interests_200_response>
                { throw UserAccountApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, User_account_followed_interests_200_response> handler_GET(
        std::string & username, std::string & bookmark, int32_t & pageSize);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleUserAccountApiException(const UserAccountApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get user account
/// </summary>
/// <remarks>
/// Get account information for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/getting-started/using-business-access/&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
/// </remarks>
class  User_accountResource: public restbed::Resource
{
public:
    User_accountResource(const std::string& context = "/v5");
    virtual ~User_accountResource() = default;

    User_accountResource(
        const User_accountResource& other) = default; // copy constructor
    User_accountResource(User_accountResource&& other) noexcept = default; // move constructor

    User_accountResource& operator=(const User_accountResource& other) = default; // copy assignment
    User_accountResource& operator=(User_accountResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Account>(
        std::string & adAccountId)> handler_GET_func =
            [](std::string &) -> std::pair<int, Account>
                { throw UserAccountApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Account> handler_GET(
        std::string & adAccountId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleUserAccountApiException(const UserAccountApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// List following
/// </summary>
/// <remarks>
/// Get a list of who a certain user follows.
/// </remarks>
class  User_accountFollowingResource: public restbed::Resource
{
public:
    User_accountFollowingResource(const std::string& context = "/v5");
    virtual ~User_accountFollowingResource() = default;

    User_accountFollowingResource(
        const User_accountFollowingResource& other) = default; // copy constructor
    User_accountFollowingResource(User_accountFollowingResource&& other) noexcept = default; // move constructor

    User_accountFollowingResource& operator=(const User_accountFollowingResource& other) = default; // copy assignment
    User_accountFollowingResource& operator=(User_accountFollowingResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, User_following_get_200_response>(
        std::string & bookmark, int32_t & pageSize, UserFollowingFeedType & feedType, bool & explicitFollowing, std::string & adAccountId)> handler_GET_func =
            [](std::string &, int32_t &, UserFollowingFeedType &, bool &, std::string &) -> std::pair<int, User_following_get_200_response>
                { throw UserAccountApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, User_following_get_200_response> handler_GET(
        std::string & bookmark, int32_t & pageSize, UserFollowingFeedType & feedType, bool & explicitFollowing, std::string & adAccountId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleUserAccountApiException(const UserAccountApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get user verification code for website claiming
/// </summary>
/// <remarks>
/// Get verification code for user to install on the website to claim it.
/// </remarks>
class  User_accountWebsitesVerificationResource: public restbed::Resource
{
public:
    User_accountWebsitesVerificationResource(const std::string& context = "/v5");
    virtual ~User_accountWebsitesVerificationResource() = default;

    User_accountWebsitesVerificationResource(
        const User_accountWebsitesVerificationResource& other) = default; // copy constructor
    User_accountWebsitesVerificationResource(User_accountWebsitesVerificationResource&& other) noexcept = default; // move constructor

    User_accountWebsitesVerificationResource& operator=(const User_accountWebsitesVerificationResource& other) = default; // copy assignment
    User_accountWebsitesVerificationResource& operator=(User_accountWebsitesVerificationResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, UserWebsiteVerificationCode>(
        std::string & adAccountId)> handler_GET_func =
            [](std::string &) -> std::pair<int, UserWebsiteVerificationCode>
                { throw UserAccountApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, UserWebsiteVerificationCode> handler_GET(
        std::string & adAccountId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleUserAccountApiException(const UserAccountApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace UserAccountApiResources */

using UserAccountApiUser_accountFollowingBoardsResource [[deprecated]] = UserAccountApiResources::User_accountFollowingBoardsResource;
using UserAccountApiUser_accountFollowingUsernameResource [[deprecated]] = UserAccountApiResources::User_accountFollowingUsernameResource;
using UserAccountApiUser_accountFollowersResource [[deprecated]] = UserAccountApiResources::User_accountFollowersResource;
using UserAccountApiUser_accountBusinessesResource [[deprecated]] = UserAccountApiResources::User_accountBusinessesResource;
using UserAccountApiUser_accountWebsitesResource [[deprecated]] = UserAccountApiResources::User_accountWebsitesResource;
using UserAccountApiUser_accountAnalyticsResource [[deprecated]] = UserAccountApiResources::User_accountAnalyticsResource;
using UserAccountApiUser_accountAnalyticsTop_pinsResource [[deprecated]] = UserAccountApiResources::User_accountAnalyticsTop_pinsResource;
using UserAccountApiUser_accountAnalyticsTop_video_pinsResource [[deprecated]] = UserAccountApiResources::User_accountAnalyticsTop_video_pinsResource;
using UserAccountApiUsersUsernameInterestsFollowResource [[deprecated]] = UserAccountApiResources::UsersUsernameInterestsFollowResource;
using UserAccountApiUser_accountResource [[deprecated]] = UserAccountApiResources::User_accountResource;
using UserAccountApiUser_accountFollowingResource [[deprecated]] = UserAccountApiResources::User_accountFollowingResource;
using UserAccountApiUser_accountWebsitesVerificationResource [[deprecated]] = UserAccountApiResources::User_accountWebsitesVerificationResource;

//
// The restbed service to actually implement the REST server
//
class  UserAccountApi
{
public:
    explicit UserAccountApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~UserAccountApi();

    std::shared_ptr<UserAccountApiResources::User_accountFollowingBoardsResource> getUser_accountFollowingBoardsResource();
    std::shared_ptr<UserAccountApiResources::User_accountFollowingUsernameResource> getUser_accountFollowingUsernameResource();
    std::shared_ptr<UserAccountApiResources::User_accountFollowersResource> getUser_accountFollowersResource();
    std::shared_ptr<UserAccountApiResources::User_accountBusinessesResource> getUser_accountBusinessesResource();
    std::shared_ptr<UserAccountApiResources::User_accountWebsitesResource> getUser_accountWebsitesResource();
    std::shared_ptr<UserAccountApiResources::User_accountAnalyticsResource> getUser_accountAnalyticsResource();
    std::shared_ptr<UserAccountApiResources::User_accountAnalyticsTop_pinsResource> getUser_accountAnalyticsTop_pinsResource();
    std::shared_ptr<UserAccountApiResources::User_accountAnalyticsTop_video_pinsResource> getUser_accountAnalyticsTop_video_pinsResource();
    std::shared_ptr<UserAccountApiResources::UsersUsernameInterestsFollowResource> getUsersUsernameInterestsFollowResource();
    std::shared_ptr<UserAccountApiResources::User_accountResource> getUser_accountResource();
    std::shared_ptr<UserAccountApiResources::User_accountFollowingResource> getUser_accountFollowingResource();
    std::shared_ptr<UserAccountApiResources::User_accountWebsitesVerificationResource> getUser_accountWebsitesVerificationResource();

    void setResource(std::shared_ptr<UserAccountApiResources::User_accountFollowingBoardsResource> resource);
    void setResource(std::shared_ptr<UserAccountApiResources::User_accountFollowingUsernameResource> resource);
    void setResource(std::shared_ptr<UserAccountApiResources::User_accountFollowersResource> resource);
    void setResource(std::shared_ptr<UserAccountApiResources::User_accountBusinessesResource> resource);
    void setResource(std::shared_ptr<UserAccountApiResources::User_accountWebsitesResource> resource);
    void setResource(std::shared_ptr<UserAccountApiResources::User_accountAnalyticsResource> resource);
    void setResource(std::shared_ptr<UserAccountApiResources::User_accountAnalyticsTop_pinsResource> resource);
    void setResource(std::shared_ptr<UserAccountApiResources::User_accountAnalyticsTop_video_pinsResource> resource);
    void setResource(std::shared_ptr<UserAccountApiResources::UsersUsernameInterestsFollowResource> resource);
    void setResource(std::shared_ptr<UserAccountApiResources::User_accountResource> resource);
    void setResource(std::shared_ptr<UserAccountApiResources::User_accountFollowingResource> resource);
    void setResource(std::shared_ptr<UserAccountApiResources::User_accountWebsitesVerificationResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setUserAccountApiUser_accountFollowingBoardsResource(std::shared_ptr<UserAccountApiResources::User_accountFollowingBoardsResource> spUserAccountApiUser_accountFollowingBoardsResource);
    [[deprecated("use setResource()")]]
    virtual void setUserAccountApiUser_accountFollowingUsernameResource(std::shared_ptr<UserAccountApiResources::User_accountFollowingUsernameResource> spUserAccountApiUser_accountFollowingUsernameResource);
    [[deprecated("use setResource()")]]
    virtual void setUserAccountApiUser_accountFollowersResource(std::shared_ptr<UserAccountApiResources::User_accountFollowersResource> spUserAccountApiUser_accountFollowersResource);
    [[deprecated("use setResource()")]]
    virtual void setUserAccountApiUser_accountBusinessesResource(std::shared_ptr<UserAccountApiResources::User_accountBusinessesResource> spUserAccountApiUser_accountBusinessesResource);
    [[deprecated("use setResource()")]]
    virtual void setUserAccountApiUser_accountWebsitesResource(std::shared_ptr<UserAccountApiResources::User_accountWebsitesResource> spUserAccountApiUser_accountWebsitesResource);
    [[deprecated("use setResource()")]]
    virtual void setUserAccountApiUser_accountAnalyticsResource(std::shared_ptr<UserAccountApiResources::User_accountAnalyticsResource> spUserAccountApiUser_accountAnalyticsResource);
    [[deprecated("use setResource()")]]
    virtual void setUserAccountApiUser_accountAnalyticsTop_pinsResource(std::shared_ptr<UserAccountApiResources::User_accountAnalyticsTop_pinsResource> spUserAccountApiUser_accountAnalyticsTop_pinsResource);
    [[deprecated("use setResource()")]]
    virtual void setUserAccountApiUser_accountAnalyticsTop_video_pinsResource(std::shared_ptr<UserAccountApiResources::User_accountAnalyticsTop_video_pinsResource> spUserAccountApiUser_accountAnalyticsTop_video_pinsResource);
    [[deprecated("use setResource()")]]
    virtual void setUserAccountApiUsersUsernameInterestsFollowResource(std::shared_ptr<UserAccountApiResources::UsersUsernameInterestsFollowResource> spUserAccountApiUsersUsernameInterestsFollowResource);
    [[deprecated("use setResource()")]]
    virtual void setUserAccountApiUser_accountResource(std::shared_ptr<UserAccountApiResources::User_accountResource> spUserAccountApiUser_accountResource);
    [[deprecated("use setResource()")]]
    virtual void setUserAccountApiUser_accountFollowingResource(std::shared_ptr<UserAccountApiResources::User_accountFollowingResource> spUserAccountApiUser_accountFollowingResource);
    [[deprecated("use setResource()")]]
    virtual void setUserAccountApiUser_accountWebsitesVerificationResource(std::shared_ptr<UserAccountApiResources::User_accountWebsitesVerificationResource> spUserAccountApiUser_accountWebsitesVerificationResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<UserAccountApiResources::User_accountFollowingBoardsResource> m_spUser_accountFollowingBoardsResource;
    std::shared_ptr<UserAccountApiResources::User_accountFollowingUsernameResource> m_spUser_accountFollowingUsernameResource;
    std::shared_ptr<UserAccountApiResources::User_accountFollowersResource> m_spUser_accountFollowersResource;
    std::shared_ptr<UserAccountApiResources::User_accountBusinessesResource> m_spUser_accountBusinessesResource;
    std::shared_ptr<UserAccountApiResources::User_accountWebsitesResource> m_spUser_accountWebsitesResource;
    std::shared_ptr<UserAccountApiResources::User_accountAnalyticsResource> m_spUser_accountAnalyticsResource;
    std::shared_ptr<UserAccountApiResources::User_accountAnalyticsTop_pinsResource> m_spUser_accountAnalyticsTop_pinsResource;
    std::shared_ptr<UserAccountApiResources::User_accountAnalyticsTop_video_pinsResource> m_spUser_accountAnalyticsTop_video_pinsResource;
    std::shared_ptr<UserAccountApiResources::UsersUsernameInterestsFollowResource> m_spUsersUsernameInterestsFollowResource;
    std::shared_ptr<UserAccountApiResources::User_accountResource> m_spUser_accountResource;
    std::shared_ptr<UserAccountApiResources::User_accountFollowingResource> m_spUser_accountFollowingResource;
    std::shared_ptr<UserAccountApiResources::User_accountWebsitesVerificationResource> m_spUser_accountWebsitesVerificationResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* UserAccountApi_H_ */

