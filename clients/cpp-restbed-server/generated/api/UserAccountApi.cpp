/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "UserAccountApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

namespace {
[[maybe_unused]]
std::string selectPreferredContentType(const std::vector<std::string>& contentTypes) {
    if (contentTypes.size() == 0) {
        return "application/json";
    }

    if (contentTypes.size() == 1) {
        return contentTypes.at(0);
    }

    static const std::array<std::string, 2> preferredTypes = {"json", "xml"};
    for (const auto& preferredType: preferredTypes) {
        const auto ret = std::find_if(contentTypes.cbegin(),
        contentTypes.cend(),
        [preferredType](const std::string& str) {
            return str.find(preferredType) != std::string::npos;});
        if (ret != contentTypes.cend()) {
            return *ret;
        }
    }

    return contentTypes.at(0);
}
}

UserAccountApiException::UserAccountApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int UserAccountApiException::getStatus() const
{
    return m_status;
}
const char* UserAccountApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
MODEL_T extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = MODEL_T(pt);
    return model;
}

template<class MODEL_T>
std::vector<MODEL_T> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<MODEL_T>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(MODEL_T(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

namespace UserAccountApiResources {
User_accountFollowingBoardsResource::User_accountFollowingBoardsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/user_account/following/boards");
	this->set_method_handler("GET",
		std::bind(&User_accountFollowingBoardsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> User_accountFollowingBoardsResource::handleUserAccountApiException(const UserAccountApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> User_accountFollowingBoardsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> User_accountFollowingBoardsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void User_accountFollowingBoardsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void User_accountFollowingBoardsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void User_accountFollowingBoardsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void User_accountFollowingBoardsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the query params
    std::string bookmark = request->get_query_parameter("bookmark", "");
    int32_t pageSize = request->get_query_parameter("pageSize", 25);
    bool explicitFollowing = request->get_query_parameter("explicitFollowing", false);
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    Boards_user_follows_list_200_response resultObject = Boards_user_follows_list_200_response{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(bookmark, pageSize, explicitFollowing, adAccountId);
    }
    catch(const UserAccountApiException& e) {
        std::tie(status_code, result) = handleUserAccountApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid user id";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, Boards_user_follows_list_200_response> User_accountFollowingBoardsResource::handler_GET(
        std::string & bookmark, int32_t & pageSize, bool & explicitFollowing, std::string & adAccountId)
{
    return handler_GET_func(bookmark, pageSize, explicitFollowing, adAccountId);
}


std::string User_accountFollowingBoardsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string User_accountFollowingBoardsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
User_accountFollowingUsernameResource::User_accountFollowingUsernameResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/user_account/following/{username: .*}");
	this->set_method_handler("POST",
		std::bind(&User_accountFollowingUsernameResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> User_accountFollowingUsernameResource::handleUserAccountApiException(const UserAccountApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> User_accountFollowingUsernameResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> User_accountFollowingUsernameResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void User_accountFollowingUsernameResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void User_accountFollowingUsernameResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void User_accountFollowingUsernameResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void User_accountFollowingUsernameResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto followUserRequest = extractJsonModelBodyParam<FollowUserRequest>(bodyContent);
    // Getting the path params
    std::string username = request->get_path_parameter("username", "");
    
    int status_code = 500;
    UserSummary resultObject = UserSummary{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(username, followUserRequest);
    }
    catch(const UserAccountApiException& e) {
        std::tie(status_code, result) = handleUserAccountApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "User not found";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, UserSummary> User_accountFollowingUsernameResource::handler_POST(
        std::string & username, FollowUserRequest & followUserRequest)
{
    return handler_POST_func(username, followUserRequest);
}


std::string User_accountFollowingUsernameResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string User_accountFollowingUsernameResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
User_accountFollowersResource::User_accountFollowersResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/user_account/followers");
	this->set_method_handler("GET",
		std::bind(&User_accountFollowersResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> User_accountFollowersResource::handleUserAccountApiException(const UserAccountApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> User_accountFollowersResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> User_accountFollowersResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void User_accountFollowersResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void User_accountFollowersResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void User_accountFollowersResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void User_accountFollowersResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the query params
    std::string bookmark = request->get_query_parameter("bookmark", "");
    int32_t pageSize = request->get_query_parameter("pageSize", 25);
    
    int status_code = 500;
    Followers_list_200_response resultObject = Followers_list_200_response{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(bookmark, pageSize);
    }
    catch(const UserAccountApiException& e) {
        std::tie(status_code, result) = handleUserAccountApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid user id";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, Followers_list_200_response> User_accountFollowersResource::handler_GET(
        std::string & bookmark, int32_t & pageSize)
{
    return handler_GET_func(bookmark, pageSize);
}


std::string User_accountFollowersResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string User_accountFollowersResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
User_accountBusinessesResource::User_accountBusinessesResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/user_account/businesses");
	this->set_method_handler("GET",
		std::bind(&User_accountBusinessesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> User_accountBusinessesResource::handleUserAccountApiException(const UserAccountApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> User_accountBusinessesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> User_accountBusinessesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void User_accountBusinessesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void User_accountBusinessesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void User_accountBusinessesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void User_accountBusinessesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    
    int status_code = 500;
    std::vector<LinkedBusiness> resultObject = std::vector<LinkedBusiness>();
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET();
    }
    catch(const UserAccountApiException& e) {
        std::tie(status_code, result) = handleUserAccountApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, std::vector<LinkedBusiness>> User_accountBusinessesResource::handler_GET(
        )
{
    return handler_GET_func();
}


std::string User_accountBusinessesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string User_accountBusinessesResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
User_accountWebsitesResource::User_accountWebsitesResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/user_account/websites");
	this->set_method_handler("DELETE",
		std::bind(&User_accountWebsitesResource::handler_DELETE_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&User_accountWebsitesResource::handler_GET_internal, this,
			std::placeholders::_1));
	this->set_method_handler("POST",
		std::bind(&User_accountWebsitesResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> User_accountWebsitesResource::handleUserAccountApiException(const UserAccountApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> User_accountWebsitesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> User_accountWebsitesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void User_accountWebsitesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void User_accountWebsitesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void User_accountWebsitesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void User_accountWebsitesResource::handler_DELETE_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the query params
    std::string website = request->get_query_parameter("website", "");
    
    int status_code = 500;
    std::string result = "";
    
    try {
        status_code =
            handler_DELETE(website);
    }
    catch(const UserAccountApiException& e) {
        std::tie(status_code, result) = handleUserAccountApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 204) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 204, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Website not in user list.";
    
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void User_accountWebsitesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // Getting the query params
    std::string bookmark = request->get_query_parameter("bookmark", "");
    int32_t pageSize = request->get_query_parameter("pageSize", 25);
    
    int status_code = 500;
    User_websites_get_200_response resultObject = User_websites_get_200_response{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(bookmark, pageSize);
    }
    catch(const UserAccountApiException& e) {
        std::tie(status_code, result) = handleUserAccountApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Not authorized to access the user website list.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}
// x-extension
void User_accountWebsitesResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto userWebsiteVerifyRequest = extractJsonModelBodyParam<UserWebsiteVerifyRequest>(bodyContent);
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    UserWebsiteSummary resultObject = UserWebsiteSummary{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(userWebsiteVerifyRequest, adAccountId);
    }
    catch(const UserAccountApiException& e) {
        std::tie(status_code, result) = handleUserAccountApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

int User_accountWebsitesResource::handler_DELETE(
        std::string & website)
{
    return handler_DELETE_func(website);
}

std::pair<int, User_websites_get_200_response> User_accountWebsitesResource::handler_GET(
    std::string & bookmark, int32_t & pageSize)
{
    return handler_GET_func(bookmark, pageSize);
}
std::pair<int, UserWebsiteSummary> User_accountWebsitesResource::handler_POST(
    UserWebsiteVerifyRequest & userWebsiteVerifyRequest, std::string & adAccountId)
{
    return handler_POST_func(userWebsiteVerifyRequest, adAccountId);
}

std::string User_accountWebsitesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string User_accountWebsitesResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
User_accountAnalyticsResource::User_accountAnalyticsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/user_account/analytics");
	this->set_method_handler("GET",
		std::bind(&User_accountAnalyticsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> User_accountAnalyticsResource::handleUserAccountApiException(const UserAccountApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> User_accountAnalyticsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> User_accountAnalyticsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void User_accountAnalyticsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void User_accountAnalyticsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void User_accountAnalyticsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void User_accountAnalyticsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the query params
    std::string startDate = request->get_query_parameter("startDate", "");
    std::string endDate = request->get_query_parameter("endDate", "");
    std::string fromClaimedContent = request->get_query_parameter("fromClaimedContent", "BOTH");
    std::string pinFormat = request->get_query_parameter("pinFormat", "ALL");
    std::string appTypes = request->get_query_parameter("appTypes", "ALL");
    std::string contentType = request->get_query_parameter("contentType", "ALL");
    std::string source = request->get_query_parameter("source", "ALL");
    std::string metricTypes_raw = request->get_query_parameter("metricTypes");
    std::vector<std::string> metricTypes;
    std::vector<std::string> metricTypes_temp;
    boost::split(metricTypes_temp, metricTypes_raw, boost::is_any_of(","));
    std::copy(metricTypes_temp.begin(), metricTypes_temp.end(), std::inserter(metricTypes, std::next(metricTypes.begin())));
    std::string splitField = request->get_query_parameter("splitField", "NO_SPLIT");
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    std::map<std::string, AnalyticsMetricsResponse> resultObject = std::map<std::string, AnalyticsMetricsResponse>();
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(startDate, endDate, fromClaimedContent, pinFormat, appTypes, contentType, source, metricTypes, splitField, adAccountId);
    }
    catch(const UserAccountApiException& e) {
        std::tie(status_code, result) = handleUserAccountApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = convertMapResponse(resultObject);
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid user accounts analytics parameters.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Not authorized to access the user account analytics.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, std::map<std::string, AnalyticsMetricsResponse>> User_accountAnalyticsResource::handler_GET(
        std::string & startDate, std::string & endDate, std::string & fromClaimedContent, std::string & pinFormat, std::string & appTypes, std::string & contentType, std::string & source, std::vector<std::string> & metricTypes, std::string & splitField, std::string & adAccountId)
{
    return handler_GET_func(startDate, endDate, fromClaimedContent, pinFormat, appTypes, contentType, source, metricTypes, splitField, adAccountId);
}


std::string User_accountAnalyticsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string User_accountAnalyticsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
User_accountAnalyticsTop_pinsResource::User_accountAnalyticsTop_pinsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/user_account/analytics/top_pins");
	this->set_method_handler("GET",
		std::bind(&User_accountAnalyticsTop_pinsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> User_accountAnalyticsTop_pinsResource::handleUserAccountApiException(const UserAccountApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> User_accountAnalyticsTop_pinsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> User_accountAnalyticsTop_pinsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void User_accountAnalyticsTop_pinsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void User_accountAnalyticsTop_pinsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void User_accountAnalyticsTop_pinsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void User_accountAnalyticsTop_pinsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the query params
    std::string startDate = request->get_query_parameter("startDate", "");
    std::string endDate = request->get_query_parameter("endDate", "");
    std::string sortBy = request->get_query_parameter("sortBy", "");
    std::string fromClaimedContent = request->get_query_parameter("fromClaimedContent", "BOTH");
    std::string pinFormat = request->get_query_parameter("pinFormat", "ALL");
    std::string appTypes = request->get_query_parameter("appTypes", "ALL");
    std::string contentType = request->get_query_parameter("contentType", "ALL");
    std::string source = request->get_query_parameter("source", "ALL");
    std::string metricTypes_raw = request->get_query_parameter("metricTypes");
    std::vector<std::string> metricTypes;
    std::vector<std::string> metricTypes_temp;
    boost::split(metricTypes_temp, metricTypes_raw, boost::is_any_of(","));
    std::copy(metricTypes_temp.begin(), metricTypes_temp.end(), std::inserter(metricTypes, std::next(metricTypes.begin())));
    int32_t numOfPins = request->get_query_parameter("numOfPins", 10);
    int32_t createdInLastNDays = request->get_query_parameter("createdInLastNDays", 0);
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    TopPinsAnalyticsResponse resultObject = TopPinsAnalyticsResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(startDate, endDate, sortBy, fromClaimedContent, pinFormat, appTypes, contentType, source, metricTypes, numOfPins, createdInLastNDays, adAccountId);
    }
    catch(const UserAccountApiException& e) {
        std::tie(status_code, result) = handleUserAccountApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Not authorized to access the user account analytics.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, TopPinsAnalyticsResponse> User_accountAnalyticsTop_pinsResource::handler_GET(
        std::string & startDate, std::string & endDate, std::string & sortBy, std::string & fromClaimedContent, std::string & pinFormat, std::string & appTypes, std::string & contentType, std::string & source, std::vector<std::string> & metricTypes, int32_t & numOfPins, int32_t & createdInLastNDays, std::string & adAccountId)
{
    return handler_GET_func(startDate, endDate, sortBy, fromClaimedContent, pinFormat, appTypes, contentType, source, metricTypes, numOfPins, createdInLastNDays, adAccountId);
}


std::string User_accountAnalyticsTop_pinsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string User_accountAnalyticsTop_pinsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
User_accountAnalyticsTop_video_pinsResource::User_accountAnalyticsTop_video_pinsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/user_account/analytics/top_video_pins");
	this->set_method_handler("GET",
		std::bind(&User_accountAnalyticsTop_video_pinsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> User_accountAnalyticsTop_video_pinsResource::handleUserAccountApiException(const UserAccountApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> User_accountAnalyticsTop_video_pinsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> User_accountAnalyticsTop_video_pinsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void User_accountAnalyticsTop_video_pinsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void User_accountAnalyticsTop_video_pinsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void User_accountAnalyticsTop_video_pinsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void User_accountAnalyticsTop_video_pinsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the query params
    std::string startDate = request->get_query_parameter("startDate", "");
    std::string endDate = request->get_query_parameter("endDate", "");
    std::string sortBy = request->get_query_parameter("sortBy", "");
    std::string fromClaimedContent = request->get_query_parameter("fromClaimedContent", "BOTH");
    std::string pinFormat = request->get_query_parameter("pinFormat", "ALL");
    std::string appTypes = request->get_query_parameter("appTypes", "ALL");
    std::string contentType = request->get_query_parameter("contentType", "ALL");
    std::string source = request->get_query_parameter("source", "ALL");
    std::string metricTypes_raw = request->get_query_parameter("metricTypes");
    std::vector<std::string> metricTypes;
    std::vector<std::string> metricTypes_temp;
    boost::split(metricTypes_temp, metricTypes_raw, boost::is_any_of(","));
    std::copy(metricTypes_temp.begin(), metricTypes_temp.end(), std::inserter(metricTypes, std::next(metricTypes.begin())));
    int32_t numOfPins = request->get_query_parameter("numOfPins", 10);
    int32_t createdInLastNDays = request->get_query_parameter("createdInLastNDays", 0);
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    TopVideoPinsAnalyticsResponse resultObject = TopVideoPinsAnalyticsResponse{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(startDate, endDate, sortBy, fromClaimedContent, pinFormat, appTypes, contentType, source, metricTypes, numOfPins, createdInLastNDays, adAccountId);
    }
    catch(const UserAccountApiException& e) {
        std::tie(status_code, result) = handleUserAccountApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Not authorized to access the user account analytics.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, TopVideoPinsAnalyticsResponse> User_accountAnalyticsTop_video_pinsResource::handler_GET(
        std::string & startDate, std::string & endDate, std::string & sortBy, std::string & fromClaimedContent, std::string & pinFormat, std::string & appTypes, std::string & contentType, std::string & source, std::vector<std::string> & metricTypes, int32_t & numOfPins, int32_t & createdInLastNDays, std::string & adAccountId)
{
    return handler_GET_func(startDate, endDate, sortBy, fromClaimedContent, pinFormat, appTypes, contentType, source, metricTypes, numOfPins, createdInLastNDays, adAccountId);
}


std::string User_accountAnalyticsTop_video_pinsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string User_accountAnalyticsTop_video_pinsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
UsersUsernameInterestsFollowResource::UsersUsernameInterestsFollowResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/users/{username: .*}/interests/follow");
	this->set_method_handler("GET",
		std::bind(&UsersUsernameInterestsFollowResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> UsersUsernameInterestsFollowResource::handleUserAccountApiException(const UserAccountApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> UsersUsernameInterestsFollowResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> UsersUsernameInterestsFollowResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void UsersUsernameInterestsFollowResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void UsersUsernameInterestsFollowResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void UsersUsernameInterestsFollowResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void UsersUsernameInterestsFollowResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string username = request->get_path_parameter("username", "");
    // Getting the query params
    std::string bookmark = request->get_query_parameter("bookmark", "");
    int32_t pageSize = request->get_query_parameter("pageSize", 25);
    
    int status_code = 500;
    User_account_followed_interests_200_response resultObject = User_account_followed_interests_200_response{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(username, bookmark, pageSize);
    }
    catch(const UserAccountApiException& e) {
        std::tie(status_code, result) = handleUserAccountApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Invalid parameters";
    
        result = resultObject.toJsonString();
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authorization failed";
    
        result = resultObject.toJsonString();
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "User not found";
    
        result = resultObject.toJsonString();
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, User_account_followed_interests_200_response> UsersUsernameInterestsFollowResource::handler_GET(
        std::string & username, std::string & bookmark, int32_t & pageSize)
{
    return handler_GET_func(username, bookmark, pageSize);
}


std::string UsersUsernameInterestsFollowResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string UsersUsernameInterestsFollowResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
User_accountResource::User_accountResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/user_account");
	this->set_method_handler("GET",
		std::bind(&User_accountResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> User_accountResource::handleUserAccountApiException(const UserAccountApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> User_accountResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> User_accountResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void User_accountResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void User_accountResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void User_accountResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void User_accountResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    Account resultObject = Account{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(adAccountId);
    }
    catch(const UserAccountApiException& e) {
        std::tie(status_code, result) = handleUserAccountApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Not authorized to access the user account.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, Account> User_accountResource::handler_GET(
        std::string & adAccountId)
{
    return handler_GET_func(adAccountId);
}


std::string User_accountResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string User_accountResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
User_accountFollowingResource::User_accountFollowingResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/user_account/following");
	this->set_method_handler("GET",
		std::bind(&User_accountFollowingResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> User_accountFollowingResource::handleUserAccountApiException(const UserAccountApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> User_accountFollowingResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> User_accountFollowingResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void User_accountFollowingResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void User_accountFollowingResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void User_accountFollowingResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void User_accountFollowingResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the query params
    std::string bookmark = request->get_query_parameter("bookmark", "");
    int32_t pageSize = request->get_query_parameter("pageSize", 25);
    UserFollowingFeedType feedType = request->get_query_parameter("feedType", "");
    bool explicitFollowing = request->get_query_parameter("explicitFollowing", false);
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    User_following_get_200_response resultObject = User_following_get_200_response{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(bookmark, pageSize, feedType, explicitFollowing, adAccountId);
    }
    catch(const UserAccountApiException& e) {
        std::tie(status_code, result) = handleUserAccountApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, User_following_get_200_response> User_accountFollowingResource::handler_GET(
        std::string & bookmark, int32_t & pageSize, UserFollowingFeedType & feedType, bool & explicitFollowing, std::string & adAccountId)
{
    return handler_GET_func(bookmark, pageSize, feedType, explicitFollowing, adAccountId);
}


std::string User_accountFollowingResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string User_accountFollowingResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
User_accountWebsitesVerificationResource::User_accountWebsitesVerificationResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/user_account/websites/verification");
	this->set_method_handler("GET",
		std::bind(&User_accountWebsitesVerificationResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> User_accountWebsitesVerificationResource::handleUserAccountApiException(const UserAccountApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> User_accountWebsitesVerificationResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> User_accountWebsitesVerificationResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void User_accountWebsitesVerificationResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void User_accountWebsitesVerificationResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void User_accountWebsitesVerificationResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void User_accountWebsitesVerificationResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the query params
    std::string adAccountId = request->get_query_parameter("adAccountId", "");
    
    int status_code = 500;
    UserWebsiteVerificationCode resultObject = UserWebsiteVerificationCode{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(adAccountId);
    }
    catch(const UserAccountApiException& e) {
        std::tie(status_code, result) = handleUserAccountApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Not authorized to access the user verification code for website claiming.";
    
        result = resultObject.toJsonString();
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 0) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Unexpected error";
    
        result = resultObject.toJsonString();
        returnResponse(session, 0, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, UserWebsiteVerificationCode> User_accountWebsitesVerificationResource::handler_GET(
        std::string & adAccountId)
{
    return handler_GET_func(adAccountId);
}


std::string User_accountWebsitesVerificationResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string User_accountWebsitesVerificationResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}

} /* namespace UserAccountApiResources */

UserAccountApi::UserAccountApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

UserAccountApi::~UserAccountApi() {}

std::shared_ptr<UserAccountApiResources::User_accountFollowingBoardsResource> UserAccountApi::getUser_accountFollowingBoardsResource() {
    if (!m_spUser_accountFollowingBoardsResource) {
        setResource(std::make_shared<UserAccountApiResources::User_accountFollowingBoardsResource>());
    }
    return m_spUser_accountFollowingBoardsResource;
}
std::shared_ptr<UserAccountApiResources::User_accountFollowingUsernameResource> UserAccountApi::getUser_accountFollowingUsernameResource() {
    if (!m_spUser_accountFollowingUsernameResource) {
        setResource(std::make_shared<UserAccountApiResources::User_accountFollowingUsernameResource>());
    }
    return m_spUser_accountFollowingUsernameResource;
}
std::shared_ptr<UserAccountApiResources::User_accountFollowersResource> UserAccountApi::getUser_accountFollowersResource() {
    if (!m_spUser_accountFollowersResource) {
        setResource(std::make_shared<UserAccountApiResources::User_accountFollowersResource>());
    }
    return m_spUser_accountFollowersResource;
}
std::shared_ptr<UserAccountApiResources::User_accountBusinessesResource> UserAccountApi::getUser_accountBusinessesResource() {
    if (!m_spUser_accountBusinessesResource) {
        setResource(std::make_shared<UserAccountApiResources::User_accountBusinessesResource>());
    }
    return m_spUser_accountBusinessesResource;
}
std::shared_ptr<UserAccountApiResources::User_accountWebsitesResource> UserAccountApi::getUser_accountWebsitesResource() {
    if (!m_spUser_accountWebsitesResource) {
        setResource(std::make_shared<UserAccountApiResources::User_accountWebsitesResource>());
    }
    return m_spUser_accountWebsitesResource;
}
std::shared_ptr<UserAccountApiResources::User_accountAnalyticsResource> UserAccountApi::getUser_accountAnalyticsResource() {
    if (!m_spUser_accountAnalyticsResource) {
        setResource(std::make_shared<UserAccountApiResources::User_accountAnalyticsResource>());
    }
    return m_spUser_accountAnalyticsResource;
}
std::shared_ptr<UserAccountApiResources::User_accountAnalyticsTop_pinsResource> UserAccountApi::getUser_accountAnalyticsTop_pinsResource() {
    if (!m_spUser_accountAnalyticsTop_pinsResource) {
        setResource(std::make_shared<UserAccountApiResources::User_accountAnalyticsTop_pinsResource>());
    }
    return m_spUser_accountAnalyticsTop_pinsResource;
}
std::shared_ptr<UserAccountApiResources::User_accountAnalyticsTop_video_pinsResource> UserAccountApi::getUser_accountAnalyticsTop_video_pinsResource() {
    if (!m_spUser_accountAnalyticsTop_video_pinsResource) {
        setResource(std::make_shared<UserAccountApiResources::User_accountAnalyticsTop_video_pinsResource>());
    }
    return m_spUser_accountAnalyticsTop_video_pinsResource;
}
std::shared_ptr<UserAccountApiResources::UsersUsernameInterestsFollowResource> UserAccountApi::getUsersUsernameInterestsFollowResource() {
    if (!m_spUsersUsernameInterestsFollowResource) {
        setResource(std::make_shared<UserAccountApiResources::UsersUsernameInterestsFollowResource>());
    }
    return m_spUsersUsernameInterestsFollowResource;
}
std::shared_ptr<UserAccountApiResources::User_accountResource> UserAccountApi::getUser_accountResource() {
    if (!m_spUser_accountResource) {
        setResource(std::make_shared<UserAccountApiResources::User_accountResource>());
    }
    return m_spUser_accountResource;
}
std::shared_ptr<UserAccountApiResources::User_accountFollowingResource> UserAccountApi::getUser_accountFollowingResource() {
    if (!m_spUser_accountFollowingResource) {
        setResource(std::make_shared<UserAccountApiResources::User_accountFollowingResource>());
    }
    return m_spUser_accountFollowingResource;
}
std::shared_ptr<UserAccountApiResources::User_accountWebsitesVerificationResource> UserAccountApi::getUser_accountWebsitesVerificationResource() {
    if (!m_spUser_accountWebsitesVerificationResource) {
        setResource(std::make_shared<UserAccountApiResources::User_accountWebsitesVerificationResource>());
    }
    return m_spUser_accountWebsitesVerificationResource;
}
void UserAccountApi::setResource(std::shared_ptr<UserAccountApiResources::User_accountFollowingBoardsResource> resource) {
    m_spUser_accountFollowingBoardsResource = resource;
    m_service->publish(m_spUser_accountFollowingBoardsResource);
}
void UserAccountApi::setResource(std::shared_ptr<UserAccountApiResources::User_accountFollowingUsernameResource> resource) {
    m_spUser_accountFollowingUsernameResource = resource;
    m_service->publish(m_spUser_accountFollowingUsernameResource);
}
void UserAccountApi::setResource(std::shared_ptr<UserAccountApiResources::User_accountFollowersResource> resource) {
    m_spUser_accountFollowersResource = resource;
    m_service->publish(m_spUser_accountFollowersResource);
}
void UserAccountApi::setResource(std::shared_ptr<UserAccountApiResources::User_accountBusinessesResource> resource) {
    m_spUser_accountBusinessesResource = resource;
    m_service->publish(m_spUser_accountBusinessesResource);
}
void UserAccountApi::setResource(std::shared_ptr<UserAccountApiResources::User_accountWebsitesResource> resource) {
    m_spUser_accountWebsitesResource = resource;
    m_service->publish(m_spUser_accountWebsitesResource);
}
void UserAccountApi::setResource(std::shared_ptr<UserAccountApiResources::User_accountAnalyticsResource> resource) {
    m_spUser_accountAnalyticsResource = resource;
    m_service->publish(m_spUser_accountAnalyticsResource);
}
void UserAccountApi::setResource(std::shared_ptr<UserAccountApiResources::User_accountAnalyticsTop_pinsResource> resource) {
    m_spUser_accountAnalyticsTop_pinsResource = resource;
    m_service->publish(m_spUser_accountAnalyticsTop_pinsResource);
}
void UserAccountApi::setResource(std::shared_ptr<UserAccountApiResources::User_accountAnalyticsTop_video_pinsResource> resource) {
    m_spUser_accountAnalyticsTop_video_pinsResource = resource;
    m_service->publish(m_spUser_accountAnalyticsTop_video_pinsResource);
}
void UserAccountApi::setResource(std::shared_ptr<UserAccountApiResources::UsersUsernameInterestsFollowResource> resource) {
    m_spUsersUsernameInterestsFollowResource = resource;
    m_service->publish(m_spUsersUsernameInterestsFollowResource);
}
void UserAccountApi::setResource(std::shared_ptr<UserAccountApiResources::User_accountResource> resource) {
    m_spUser_accountResource = resource;
    m_service->publish(m_spUser_accountResource);
}
void UserAccountApi::setResource(std::shared_ptr<UserAccountApiResources::User_accountFollowingResource> resource) {
    m_spUser_accountFollowingResource = resource;
    m_service->publish(m_spUser_accountFollowingResource);
}
void UserAccountApi::setResource(std::shared_ptr<UserAccountApiResources::User_accountWebsitesVerificationResource> resource) {
    m_spUser_accountWebsitesVerificationResource = resource;
    m_service->publish(m_spUser_accountWebsitesVerificationResource);
}
void UserAccountApi::setUserAccountApiUser_accountFollowingBoardsResource(std::shared_ptr<UserAccountApiResources::User_accountFollowingBoardsResource> spUser_accountFollowingBoardsResource) {
    m_spUser_accountFollowingBoardsResource = spUser_accountFollowingBoardsResource;
    m_service->publish(m_spUser_accountFollowingBoardsResource);
}
void UserAccountApi::setUserAccountApiUser_accountFollowingUsernameResource(std::shared_ptr<UserAccountApiResources::User_accountFollowingUsernameResource> spUser_accountFollowingUsernameResource) {
    m_spUser_accountFollowingUsernameResource = spUser_accountFollowingUsernameResource;
    m_service->publish(m_spUser_accountFollowingUsernameResource);
}
void UserAccountApi::setUserAccountApiUser_accountFollowersResource(std::shared_ptr<UserAccountApiResources::User_accountFollowersResource> spUser_accountFollowersResource) {
    m_spUser_accountFollowersResource = spUser_accountFollowersResource;
    m_service->publish(m_spUser_accountFollowersResource);
}
void UserAccountApi::setUserAccountApiUser_accountBusinessesResource(std::shared_ptr<UserAccountApiResources::User_accountBusinessesResource> spUser_accountBusinessesResource) {
    m_spUser_accountBusinessesResource = spUser_accountBusinessesResource;
    m_service->publish(m_spUser_accountBusinessesResource);
}
void UserAccountApi::setUserAccountApiUser_accountWebsitesResource(std::shared_ptr<UserAccountApiResources::User_accountWebsitesResource> spUser_accountWebsitesResource) {
    m_spUser_accountWebsitesResource = spUser_accountWebsitesResource;
    m_service->publish(m_spUser_accountWebsitesResource);
}
void UserAccountApi::setUserAccountApiUser_accountAnalyticsResource(std::shared_ptr<UserAccountApiResources::User_accountAnalyticsResource> spUser_accountAnalyticsResource) {
    m_spUser_accountAnalyticsResource = spUser_accountAnalyticsResource;
    m_service->publish(m_spUser_accountAnalyticsResource);
}
void UserAccountApi::setUserAccountApiUser_accountAnalyticsTop_pinsResource(std::shared_ptr<UserAccountApiResources::User_accountAnalyticsTop_pinsResource> spUser_accountAnalyticsTop_pinsResource) {
    m_spUser_accountAnalyticsTop_pinsResource = spUser_accountAnalyticsTop_pinsResource;
    m_service->publish(m_spUser_accountAnalyticsTop_pinsResource);
}
void UserAccountApi::setUserAccountApiUser_accountAnalyticsTop_video_pinsResource(std::shared_ptr<UserAccountApiResources::User_accountAnalyticsTop_video_pinsResource> spUser_accountAnalyticsTop_video_pinsResource) {
    m_spUser_accountAnalyticsTop_video_pinsResource = spUser_accountAnalyticsTop_video_pinsResource;
    m_service->publish(m_spUser_accountAnalyticsTop_video_pinsResource);
}
void UserAccountApi::setUserAccountApiUsersUsernameInterestsFollowResource(std::shared_ptr<UserAccountApiResources::UsersUsernameInterestsFollowResource> spUsersUsernameInterestsFollowResource) {
    m_spUsersUsernameInterestsFollowResource = spUsersUsernameInterestsFollowResource;
    m_service->publish(m_spUsersUsernameInterestsFollowResource);
}
void UserAccountApi::setUserAccountApiUser_accountResource(std::shared_ptr<UserAccountApiResources::User_accountResource> spUser_accountResource) {
    m_spUser_accountResource = spUser_accountResource;
    m_service->publish(m_spUser_accountResource);
}
void UserAccountApi::setUserAccountApiUser_accountFollowingResource(std::shared_ptr<UserAccountApiResources::User_accountFollowingResource> spUser_accountFollowingResource) {
    m_spUser_accountFollowingResource = spUser_accountFollowingResource;
    m_service->publish(m_spUser_accountFollowingResource);
}
void UserAccountApi::setUserAccountApiUser_accountWebsitesVerificationResource(std::shared_ptr<UserAccountApiResources::User_accountWebsitesVerificationResource> spUser_accountWebsitesVerificationResource) {
    m_spUser_accountWebsitesVerificationResource = spUser_accountWebsitesVerificationResource;
    m_service->publish(m_spUser_accountWebsitesVerificationResource);
}


void UserAccountApi::publishDefaultResources() {
    if (!m_spUser_accountFollowingBoardsResource) {
        setResource(std::make_shared<UserAccountApiResources::User_accountFollowingBoardsResource>());
    }
    if (!m_spUser_accountFollowingUsernameResource) {
        setResource(std::make_shared<UserAccountApiResources::User_accountFollowingUsernameResource>());
    }
    if (!m_spUser_accountFollowersResource) {
        setResource(std::make_shared<UserAccountApiResources::User_accountFollowersResource>());
    }
    if (!m_spUser_accountBusinessesResource) {
        setResource(std::make_shared<UserAccountApiResources::User_accountBusinessesResource>());
    }
    if (!m_spUser_accountWebsitesResource) {
        setResource(std::make_shared<UserAccountApiResources::User_accountWebsitesResource>());
    }
    if (!m_spUser_accountAnalyticsResource) {
        setResource(std::make_shared<UserAccountApiResources::User_accountAnalyticsResource>());
    }
    if (!m_spUser_accountAnalyticsTop_pinsResource) {
        setResource(std::make_shared<UserAccountApiResources::User_accountAnalyticsTop_pinsResource>());
    }
    if (!m_spUser_accountAnalyticsTop_video_pinsResource) {
        setResource(std::make_shared<UserAccountApiResources::User_accountAnalyticsTop_video_pinsResource>());
    }
    if (!m_spUsersUsernameInterestsFollowResource) {
        setResource(std::make_shared<UserAccountApiResources::UsersUsernameInterestsFollowResource>());
    }
    if (!m_spUser_accountResource) {
        setResource(std::make_shared<UserAccountApiResources::User_accountResource>());
    }
    if (!m_spUser_accountFollowingResource) {
        setResource(std::make_shared<UserAccountApiResources::User_accountFollowingResource>());
    }
    if (!m_spUser_accountWebsitesVerificationResource) {
        setResource(std::make_shared<UserAccountApiResources::User_accountWebsitesVerificationResource>());
    }
}

std::shared_ptr<restbed::Service> UserAccountApi::service() {
    return m_service;
}


}
}
}
}

