/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BoardsApi.h
 *
 * 
 */

#ifndef BoardsApi_H_
#define BoardsApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "Board.h"
#include "BoardSection.h"
#include "BoardUpdate.h"
#include "Board_sections_list_200_response.h"
#include "Boards_list_200_response.h"
#include "Boards_list_pins_200_response.h"
#include "Error.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  BoardsApiException: public std::exception
{
public:
    BoardsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace BoardsApiResources {
/// <summary>
/// Create board section
/// </summary>
/// <remarks>
/// Create a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
/// </remarks>
class  BoardsBoard_idSectionsResource: public restbed::Resource
{
public:
    BoardsBoard_idSectionsResource(const std::string& context = "/v5");
    virtual ~BoardsBoard_idSectionsResource() = default;

    BoardsBoard_idSectionsResource(
        const BoardsBoard_idSectionsResource& other) = default; // copy constructor
    BoardsBoard_idSectionsResource(BoardsBoard_idSectionsResource&& other) noexcept = default; // move constructor

    BoardsBoard_idSectionsResource& operator=(const BoardsBoard_idSectionsResource& other) = default; // copy assignment
    BoardsBoard_idSectionsResource& operator=(BoardsBoard_idSectionsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, BoardSection>(
        std::string & boardId, BoardSection & boardSection, std::string & adAccountId)> handler_POST_func =
            [](std::string &, BoardSection &, std::string &) -> std::pair<int, BoardSection>
                { throw BoardsApiException(501, "Not implemented"); };

    std::function<std::pair<int, Board_sections_list_200_response>(
        std::string & boardId, std::string & adAccountId, std::string & bookmark, int32_t & pageSize)> handler_GET_func =
            [](std::string &, std::string &, std::string &, int32_t &) -> std::pair<int, Board_sections_list_200_response>
                { throw BoardsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, BoardSection> handler_POST(
        std::string & boardId, BoardSection & boardSection, std::string & adAccountId);

    virtual std::pair<int, Board_sections_list_200_response> handler_GET(
        std::string & boardId, std::string & adAccountId, std::string & bookmark, int32_t & pageSize);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBoardsApiException(const BoardsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Delete board section
/// </summary>
/// <remarks>
/// Delete a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
/// </remarks>
class  BoardsBoard_idSectionsSection_idResource: public restbed::Resource
{
public:
    BoardsBoard_idSectionsSection_idResource(const std::string& context = "/v5");
    virtual ~BoardsBoard_idSectionsSection_idResource() = default;

    BoardsBoard_idSectionsSection_idResource(
        const BoardsBoard_idSectionsSection_idResource& other) = default; // copy constructor
    BoardsBoard_idSectionsSection_idResource(BoardsBoard_idSectionsSection_idResource&& other) noexcept = default; // move constructor

    BoardsBoard_idSectionsSection_idResource& operator=(const BoardsBoard_idSectionsSection_idResource& other) = default; // copy assignment
    BoardsBoard_idSectionsSection_idResource& operator=(BoardsBoard_idSectionsSection_idResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<int(
        std::string & boardId, std::string & sectionId, std::string & adAccountId)> handler_DELETE_func =
            [](std::string &, std::string &, std::string &) -> int
                { throw BoardsApiException(501, "Not implemented"); };

    std::function<std::pair<int, BoardSection>(
        std::string & boardId, std::string & sectionId, BoardSection & boardSection, std::string & adAccountId)> handler_PATCH_func =
            [](std::string &, std::string &, BoardSection &, std::string &) -> std::pair<int, BoardSection>
                { throw BoardsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_DELETE(
        std::string & boardId, std::string & sectionId, std::string & adAccountId);

    virtual std::pair<int, BoardSection> handler_PATCH(
        std::string & boardId, std::string & sectionId, BoardSection & boardSection, std::string & adAccountId);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBoardsApiException(const BoardsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PATCH_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// List Pins on board section
/// </summary>
/// <remarks>
/// Get a list of the Pins on a board section of a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
/// </remarks>
class  BoardsBoard_idSectionsSection_idPinsResource: public restbed::Resource
{
public:
    BoardsBoard_idSectionsSection_idPinsResource(const std::string& context = "/v5");
    virtual ~BoardsBoard_idSectionsSection_idPinsResource() = default;

    BoardsBoard_idSectionsSection_idPinsResource(
        const BoardsBoard_idSectionsSection_idPinsResource& other) = default; // copy constructor
    BoardsBoard_idSectionsSection_idPinsResource(BoardsBoard_idSectionsSection_idPinsResource&& other) noexcept = default; // move constructor

    BoardsBoard_idSectionsSection_idPinsResource& operator=(const BoardsBoard_idSectionsSection_idPinsResource& other) = default; // copy assignment
    BoardsBoard_idSectionsSection_idPinsResource& operator=(BoardsBoard_idSectionsSection_idPinsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Boards_list_pins_200_response>(
        std::string & boardId, std::string & sectionId, std::string & adAccountId, std::string & bookmark, int32_t & pageSize)> handler_GET_func =
            [](std::string &, std::string &, std::string &, std::string &, int32_t &) -> std::pair<int, Boards_list_pins_200_response>
                { throw BoardsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Boards_list_pins_200_response> handler_GET(
        std::string & boardId, std::string & sectionId, std::string & adAccountId, std::string & bookmark, int32_t & pageSize);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBoardsApiException(const BoardsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Create board
/// </summary>
/// <remarks>
/// Create a board owned by the \&quot;operation user_account\&quot;. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
/// </remarks>
class  BoardsResource: public restbed::Resource
{
public:
    BoardsResource(const std::string& context = "/v5");
    virtual ~BoardsResource() = default;

    BoardsResource(
        const BoardsResource& other) = default; // copy constructor
    BoardsResource(BoardsResource&& other) noexcept = default; // move constructor

    BoardsResource& operator=(const BoardsResource& other) = default; // copy assignment
    BoardsResource& operator=(BoardsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Board>(
        Board & board, std::string & adAccountId)> handler_POST_func =
            [](Board &, std::string &) -> std::pair<int, Board>
                { throw BoardsApiException(501, "Not implemented"); };

    std::function<std::pair<int, Boards_list_200_response>(
        std::string & adAccountId, std::string & bookmark, int32_t & pageSize, std::string & privacy)> handler_GET_func =
            [](std::string &, std::string &, int32_t &, std::string &) -> std::pair<int, Boards_list_200_response>
                { throw BoardsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Board> handler_POST(
        Board & board, std::string & adAccountId);

    virtual std::pair<int, Boards_list_200_response> handler_GET(
        std::string & adAccountId, std::string & bookmark, int32_t & pageSize, std::string & privacy);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBoardsApiException(const BoardsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Delete board
/// </summary>
/// <remarks>
/// Delete a board owned by the \&quot;operation user_account\&quot;. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
/// </remarks>
class  BoardsBoard_idResource: public restbed::Resource
{
public:
    BoardsBoard_idResource(const std::string& context = "/v5");
    virtual ~BoardsBoard_idResource() = default;

    BoardsBoard_idResource(
        const BoardsBoard_idResource& other) = default; // copy constructor
    BoardsBoard_idResource(BoardsBoard_idResource&& other) noexcept = default; // move constructor

    BoardsBoard_idResource& operator=(const BoardsBoard_idResource& other) = default; // copy assignment
    BoardsBoard_idResource& operator=(BoardsBoard_idResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<int(
        std::string & boardId, std::string & adAccountId)> handler_DELETE_func =
            [](std::string &, std::string &) -> int
                { throw BoardsApiException(501, "Not implemented"); };

    std::function<std::pair<int, Board>(
        std::string & boardId, std::string & adAccountId)> handler_GET_func =
            [](std::string &, std::string &) -> std::pair<int, Board>
                { throw BoardsApiException(501, "Not implemented"); };

    std::function<std::pair<int, Board>(
        std::string & boardId, BoardUpdate & boardUpdate, std::string & adAccountId)> handler_PATCH_func =
            [](std::string &, BoardUpdate &, std::string &) -> std::pair<int, Board>
                { throw BoardsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_DELETE(
        std::string & boardId, std::string & adAccountId);

    virtual std::pair<int, Board> handler_GET(
        std::string & boardId, std::string & adAccountId);
    virtual std::pair<int, Board> handler_PATCH(
        std::string & boardId, BoardUpdate & boardUpdate, std::string & adAccountId);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBoardsApiException(const BoardsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PATCH_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// List Pins on board
/// </summary>
/// <remarks>
/// Get a list of the Pins on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
/// </remarks>
class  BoardsBoard_idPinsResource: public restbed::Resource
{
public:
    BoardsBoard_idPinsResource(const std::string& context = "/v5");
    virtual ~BoardsBoard_idPinsResource() = default;

    BoardsBoard_idPinsResource(
        const BoardsBoard_idPinsResource& other) = default; // copy constructor
    BoardsBoard_idPinsResource(BoardsBoard_idPinsResource&& other) noexcept = default; // move constructor

    BoardsBoard_idPinsResource& operator=(const BoardsBoard_idPinsResource& other) = default; // copy assignment
    BoardsBoard_idPinsResource& operator=(BoardsBoard_idPinsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Boards_list_pins_200_response>(
        std::string & boardId, std::string & bookmark, int32_t & pageSize, std::vector<std::string> & creativeTypes, std::string & adAccountId, bool & pinMetrics)> handler_GET_func =
            [](std::string &, std::string &, int32_t &, std::vector<std::string> &, std::string &, bool &) -> std::pair<int, Boards_list_pins_200_response>
                { throw BoardsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Boards_list_pins_200_response> handler_GET(
        std::string & boardId, std::string & bookmark, int32_t & pageSize, std::vector<std::string> & creativeTypes, std::string & adAccountId, bool & pinMetrics);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBoardsApiException(const BoardsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace BoardsApiResources */

using BoardsApiBoardsBoard_idSectionsResource [[deprecated]] = BoardsApiResources::BoardsBoard_idSectionsResource;
using BoardsApiBoardsBoard_idSectionsSection_idResource [[deprecated]] = BoardsApiResources::BoardsBoard_idSectionsSection_idResource;
using BoardsApiBoardsBoard_idSectionsSection_idPinsResource [[deprecated]] = BoardsApiResources::BoardsBoard_idSectionsSection_idPinsResource;
using BoardsApiBoardsResource [[deprecated]] = BoardsApiResources::BoardsResource;
using BoardsApiBoardsBoard_idResource [[deprecated]] = BoardsApiResources::BoardsBoard_idResource;
using BoardsApiBoardsBoard_idPinsResource [[deprecated]] = BoardsApiResources::BoardsBoard_idPinsResource;

//
// The restbed service to actually implement the REST server
//
class  BoardsApi
{
public:
    explicit BoardsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~BoardsApi();

    std::shared_ptr<BoardsApiResources::BoardsBoard_idSectionsResource> getBoardsBoard_idSectionsResource();
    std::shared_ptr<BoardsApiResources::BoardsBoard_idSectionsSection_idResource> getBoardsBoard_idSectionsSection_idResource();
    std::shared_ptr<BoardsApiResources::BoardsBoard_idSectionsSection_idPinsResource> getBoardsBoard_idSectionsSection_idPinsResource();
    std::shared_ptr<BoardsApiResources::BoardsResource> getBoardsResource();
    std::shared_ptr<BoardsApiResources::BoardsBoard_idResource> getBoardsBoard_idResource();
    std::shared_ptr<BoardsApiResources::BoardsBoard_idPinsResource> getBoardsBoard_idPinsResource();

    void setResource(std::shared_ptr<BoardsApiResources::BoardsBoard_idSectionsResource> resource);
    void setResource(std::shared_ptr<BoardsApiResources::BoardsBoard_idSectionsSection_idResource> resource);
    void setResource(std::shared_ptr<BoardsApiResources::BoardsBoard_idSectionsSection_idPinsResource> resource);
    void setResource(std::shared_ptr<BoardsApiResources::BoardsResource> resource);
    void setResource(std::shared_ptr<BoardsApiResources::BoardsBoard_idResource> resource);
    void setResource(std::shared_ptr<BoardsApiResources::BoardsBoard_idPinsResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setBoardsApiBoardsBoard_idSectionsResource(std::shared_ptr<BoardsApiResources::BoardsBoard_idSectionsResource> spBoardsApiBoardsBoard_idSectionsResource);
    [[deprecated("use setResource()")]]
    virtual void setBoardsApiBoardsBoard_idSectionsSection_idResource(std::shared_ptr<BoardsApiResources::BoardsBoard_idSectionsSection_idResource> spBoardsApiBoardsBoard_idSectionsSection_idResource);
    [[deprecated("use setResource()")]]
    virtual void setBoardsApiBoardsBoard_idSectionsSection_idPinsResource(std::shared_ptr<BoardsApiResources::BoardsBoard_idSectionsSection_idPinsResource> spBoardsApiBoardsBoard_idSectionsSection_idPinsResource);
    [[deprecated("use setResource()")]]
    virtual void setBoardsApiBoardsResource(std::shared_ptr<BoardsApiResources::BoardsResource> spBoardsApiBoardsResource);
    [[deprecated("use setResource()")]]
    virtual void setBoardsApiBoardsBoard_idResource(std::shared_ptr<BoardsApiResources::BoardsBoard_idResource> spBoardsApiBoardsBoard_idResource);
    [[deprecated("use setResource()")]]
    virtual void setBoardsApiBoardsBoard_idPinsResource(std::shared_ptr<BoardsApiResources::BoardsBoard_idPinsResource> spBoardsApiBoardsBoard_idPinsResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<BoardsApiResources::BoardsBoard_idSectionsResource> m_spBoardsBoard_idSectionsResource;
    std::shared_ptr<BoardsApiResources::BoardsBoard_idSectionsSection_idResource> m_spBoardsBoard_idSectionsSection_idResource;
    std::shared_ptr<BoardsApiResources::BoardsBoard_idSectionsSection_idPinsResource> m_spBoardsBoard_idSectionsSection_idPinsResource;
    std::shared_ptr<BoardsApiResources::BoardsResource> m_spBoardsResource;
    std::shared_ptr<BoardsApiResources::BoardsBoard_idResource> m_spBoardsBoard_idResource;
    std::shared_ptr<BoardsApiResources::BoardsBoard_idPinsResource> m_spBoardsBoard_idPinsResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* BoardsApi_H_ */

