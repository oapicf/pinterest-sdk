/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PinsApi.h
 *
 * 
 */

#ifndef PinsApi_H_
#define PinsApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "Error.h"
#include "Pin.h"
#include "PinAnalyticsMetricsResponse.h"
#include "PinCreate.h"
#include "PinUpdate.h"
#include "Pins_analytics_metric_types_parameter_inner.h"
#include "Pins_list_200_response.h"
#include "Pins_save_request.h"
#include <map>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  PinsApiException: public std::exception
{
public:
    PinsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace PinsApiResources {
/// <summary>
/// Get multiple Pin analytics
/// </summary>
/// <remarks>
/// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get analytics for multiple pins owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - The maximum number of pins supported in a single request is 100. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;\&quot;/docs/api/v5/#operation/ad_accounts/list\&quot;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account:  - For Pins on public or protected boards: Admin, Analyst. - For Pins on secret boards: Admin.  If Pin was created before &lt;code&gt;2023-03-20&lt;/code&gt; lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then.
/// </remarks>
class  PinsAnalyticsResource: public restbed::Resource
{
public:
    PinsAnalyticsResource(const std::string& context = "/v5");
    virtual ~PinsAnalyticsResource() = default;

    PinsAnalyticsResource(
        const PinsAnalyticsResource& other) = default; // copy constructor
    PinsAnalyticsResource(PinsAnalyticsResource&& other) noexcept = default; // move constructor

    PinsAnalyticsResource& operator=(const PinsAnalyticsResource& other) = default; // copy assignment
    PinsAnalyticsResource& operator=(PinsAnalyticsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::map<std::string, std::map>>(
        std::vector<std::string> & pinIds, std::string & startDate, std::string & endDate, std::vector<Pins_analytics_metric_types_parameter_inner> & metricTypes, std::string & appTypes, std::string & adAccountId)> handler_GET_func =
            [](std::vector<std::string> &, std::string &, std::string &, std::vector<Pins_analytics_metric_types_parameter_inner> &, std::string &, std::string &) -> std::pair<int, std::map<std::string, std::map>>
                { throw PinsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::map<std::string, std::map>> handler_GET(
        std::vector<std::string> & pinIds, std::string & startDate, std::string & endDate, std::vector<Pins_analytics_metric_types_parameter_inner> & metricTypes, std::string & appTypes, std::string & adAccountId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handlePinsApiException(const PinsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get Pin analytics
/// </summary>
/// <remarks>
/// Get analytics for a Pin owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;\&quot;/docs/api/v5/#operation/ad_accounts/list\&quot;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account:  - For Pins on public or protected boards: Admin, Analyst. - For Pins on secret boards: Admin.  If Pin was created before &lt;code&gt;2023-03-20&lt;/code&gt; lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then.
/// </remarks>
class  PinsPin_idAnalyticsResource: public restbed::Resource
{
public:
    PinsPin_idAnalyticsResource(const std::string& context = "/v5");
    virtual ~PinsPin_idAnalyticsResource() = default;

    PinsPin_idAnalyticsResource(
        const PinsPin_idAnalyticsResource& other) = default; // copy constructor
    PinsPin_idAnalyticsResource(PinsPin_idAnalyticsResource&& other) noexcept = default; // move constructor

    PinsPin_idAnalyticsResource& operator=(const PinsPin_idAnalyticsResource& other) = default; // copy assignment
    PinsPin_idAnalyticsResource& operator=(PinsPin_idAnalyticsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::map<std::string, PinAnalyticsMetricsResponse>>(
        std::string & pinId, std::string & startDate, std::string & endDate, std::vector<Pins_analytics_metric_types_parameter_inner> & metricTypes, std::string & appTypes, std::string & splitField, std::string & adAccountId)> handler_GET_func =
            [](std::string &, std::string &, std::string &, std::vector<Pins_analytics_metric_types_parameter_inner> &, std::string &, std::string &, std::string &) -> std::pair<int, std::map<std::string, PinAnalyticsMetricsResponse>>
                { throw PinsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::map<std::string, PinAnalyticsMetricsResponse>> handler_GET(
        std::string & pinId, std::string & startDate, std::string & endDate, std::vector<Pins_analytics_metric_types_parameter_inner> & metricTypes, std::string & appTypes, std::string & splitField, std::string & adAccountId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handlePinsApiException(const PinsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Create Pin
/// </summary>
/// <remarks>
/// Create a Pin on a board or board section owned by the \&quot;operation user_account\&quot;.  Note: If the current \&quot;operation user_account\&quot; (defined by the access token) has access to another user&#39;s Ad Accounts via Pinterest Business Access, you can modify your request to make use of the current operation_user_account&#39;s permissions to those Ad Accounts by including the ad_account_id in the path parameters for the request (e.g. .../?ad_account_id&#x3D;12345&amp;...).  - This function is intended solely for publishing new content created by the user. If you are interested in saving content created by others to your Pinterest boards, sometimes called &#39;curated content&#39;, please use our &lt;a href&#x3D;&#39;/docs/web-features/add-ons-overview/&#39;&gt;Save button&lt;/a&gt; instead. For more tips on creating fresh content for Pinterest, review our &lt;a href&#x3D;&#39;/docs/api-features/content-overview/&#39;&gt;Content App Solutions Guide&lt;/a&gt;.  &lt;strong&gt;&lt;a href&#x3D;&#39;/docs/api-features/creating-boards-and-pins/#creating-video-pins&#39;&gt;Learn more&lt;/a&gt;&lt;/strong&gt; about video Pin creation.
/// </remarks>
class  PinsResource: public restbed::Resource
{
public:
    PinsResource(const std::string& context = "/v5");
    virtual ~PinsResource() = default;

    PinsResource(
        const PinsResource& other) = default; // copy constructor
    PinsResource(PinsResource&& other) noexcept = default; // move constructor

    PinsResource& operator=(const PinsResource& other) = default; // copy assignment
    PinsResource& operator=(PinsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Pin>(
        PinCreate & pinCreate, std::string & adAccountId)> handler_POST_func =
            [](PinCreate &, std::string &) -> std::pair<int, Pin>
                { throw PinsApiException(501, "Not implemented"); };

    std::function<std::pair<int, Pins_list_200_response>(
        std::string & bookmark, int32_t & pageSize, std::string & pinFilter, bool & includeProtectedPins, std::string & pinType, std::vector<std::string> & creativeTypes, std::string & adAccountId, bool & pinMetrics)> handler_GET_func =
            [](std::string &, int32_t &, std::string &, bool &, std::string &, std::vector<std::string> &, std::string &, bool &) -> std::pair<int, Pins_list_200_response>
                { throw PinsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Pin> handler_POST(
        PinCreate & pinCreate, std::string & adAccountId);

    virtual std::pair<int, Pins_list_200_response> handler_GET(
        std::string & bookmark, int32_t & pageSize, std::string & pinFilter, bool & includeProtectedPins, std::string & pinType, std::vector<std::string> & creativeTypes, std::string & adAccountId, bool & pinMetrics);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handlePinsApiException(const PinsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Delete Pin
/// </summary>
/// <remarks>
/// Delete a Pins owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.
/// </remarks>
class  PinsPin_idResource: public restbed::Resource
{
public:
    PinsPin_idResource(const std::string& context = "/v5");
    virtual ~PinsPin_idResource() = default;

    PinsPin_idResource(
        const PinsPin_idResource& other) = default; // copy constructor
    PinsPin_idResource(PinsPin_idResource&& other) noexcept = default; // move constructor

    PinsPin_idResource& operator=(const PinsPin_idResource& other) = default; // copy assignment
    PinsPin_idResource& operator=(PinsPin_idResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<int(
        std::string & pinId, std::string & adAccountId)> handler_DELETE_func =
            [](std::string &, std::string &) -> int
                { throw PinsApiException(501, "Not implemented"); };

    std::function<std::pair<int, Pin>(
        std::string & pinId, bool & pinMetrics, std::string & adAccountId)> handler_GET_func =
            [](std::string &, bool &, std::string &) -> std::pair<int, Pin>
                { throw PinsApiException(501, "Not implemented"); };

    std::function<std::pair<int, Pin>(
        std::string & pinId, PinUpdate & pinUpdate, std::string & adAccountId)> handler_PATCH_func =
            [](std::string &, PinUpdate &, std::string &) -> std::pair<int, Pin>
                { throw PinsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_DELETE(
        std::string & pinId, std::string & adAccountId);

    virtual std::pair<int, Pin> handler_GET(
        std::string & pinId, bool & pinMetrics, std::string & adAccountId);
    virtual std::pair<int, Pin> handler_PATCH(
        std::string & pinId, PinUpdate & pinUpdate, std::string & adAccountId);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handlePinsApiException(const PinsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PATCH_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Save Pin
/// </summary>
/// <remarks>
/// Save a Pin on a board or board section owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account. Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.  - Any Pin type can be saved: image Pin, video Pin, Idea Pin, product Pin, etc. - Any public Pin can be saved given a pin ID.
/// </remarks>
class  PinsPin_idSaveResource: public restbed::Resource
{
public:
    PinsPin_idSaveResource(const std::string& context = "/v5");
    virtual ~PinsPin_idSaveResource() = default;

    PinsPin_idSaveResource(
        const PinsPin_idSaveResource& other) = default; // copy constructor
    PinsPin_idSaveResource(PinsPin_idSaveResource&& other) noexcept = default; // move constructor

    PinsPin_idSaveResource& operator=(const PinsPin_idSaveResource& other) = default; // copy assignment
    PinsPin_idSaveResource& operator=(PinsPin_idSaveResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Pin>(
        std::string & pinId, Pins_save_request & pinsSaveRequest, std::string & adAccountId)> handler_POST_func =
            [](std::string &, Pins_save_request &, std::string &) -> std::pair<int, Pin>
                { throw PinsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Pin> handler_POST(
        std::string & pinId, Pins_save_request & pinsSaveRequest, std::string & adAccountId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handlePinsApiException(const PinsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace PinsApiResources */

using PinsApiPinsAnalyticsResource [[deprecated]] = PinsApiResources::PinsAnalyticsResource;
using PinsApiPinsPin_idAnalyticsResource [[deprecated]] = PinsApiResources::PinsPin_idAnalyticsResource;
using PinsApiPinsResource [[deprecated]] = PinsApiResources::PinsResource;
using PinsApiPinsPin_idResource [[deprecated]] = PinsApiResources::PinsPin_idResource;
using PinsApiPinsPin_idSaveResource [[deprecated]] = PinsApiResources::PinsPin_idSaveResource;

//
// The restbed service to actually implement the REST server
//
class  PinsApi
{
public:
    explicit PinsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~PinsApi();

    std::shared_ptr<PinsApiResources::PinsAnalyticsResource> getPinsAnalyticsResource();
    std::shared_ptr<PinsApiResources::PinsPin_idAnalyticsResource> getPinsPin_idAnalyticsResource();
    std::shared_ptr<PinsApiResources::PinsResource> getPinsResource();
    std::shared_ptr<PinsApiResources::PinsPin_idResource> getPinsPin_idResource();
    std::shared_ptr<PinsApiResources::PinsPin_idSaveResource> getPinsPin_idSaveResource();

    void setResource(std::shared_ptr<PinsApiResources::PinsAnalyticsResource> resource);
    void setResource(std::shared_ptr<PinsApiResources::PinsPin_idAnalyticsResource> resource);
    void setResource(std::shared_ptr<PinsApiResources::PinsResource> resource);
    void setResource(std::shared_ptr<PinsApiResources::PinsPin_idResource> resource);
    void setResource(std::shared_ptr<PinsApiResources::PinsPin_idSaveResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setPinsApiPinsAnalyticsResource(std::shared_ptr<PinsApiResources::PinsAnalyticsResource> spPinsApiPinsAnalyticsResource);
    [[deprecated("use setResource()")]]
    virtual void setPinsApiPinsPin_idAnalyticsResource(std::shared_ptr<PinsApiResources::PinsPin_idAnalyticsResource> spPinsApiPinsPin_idAnalyticsResource);
    [[deprecated("use setResource()")]]
    virtual void setPinsApiPinsResource(std::shared_ptr<PinsApiResources::PinsResource> spPinsApiPinsResource);
    [[deprecated("use setResource()")]]
    virtual void setPinsApiPinsPin_idResource(std::shared_ptr<PinsApiResources::PinsPin_idResource> spPinsApiPinsPin_idResource);
    [[deprecated("use setResource()")]]
    virtual void setPinsApiPinsPin_idSaveResource(std::shared_ptr<PinsApiResources::PinsPin_idSaveResource> spPinsApiPinsPin_idSaveResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<PinsApiResources::PinsAnalyticsResource> m_spPinsAnalyticsResource;
    std::shared_ptr<PinsApiResources::PinsPin_idAnalyticsResource> m_spPinsPin_idAnalyticsResource;
    std::shared_ptr<PinsApiResources::PinsResource> m_spPinsResource;
    std::shared_ptr<PinsApiResources::PinsPin_idResource> m_spPinsPin_idResource;
    std::shared_ptr<PinsApiResources::PinsPin_idSaveResource> m_spPinsPin_idSaveResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* PinsApi_H_ */

