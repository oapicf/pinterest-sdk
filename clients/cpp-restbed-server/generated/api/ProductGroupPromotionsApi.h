/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ProductGroupPromotionsApi.h
 *
 * 
 */

#ifndef ProductGroupPromotionsApi_H_
#define ProductGroupPromotionsApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "Error.h"
#include "Granularity.h"
#include "ProductGroupAnalyticsResponse_inner.h"
#include "ProductGroupPromotionCreateRequest.h"
#include "ProductGroupPromotionResponse.h"
#include "ProductGroupPromotionUpdateRequest.h"
#include "Product_group_promotions_list_200_response.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  ProductGroupPromotionsApiException: public std::exception
{
public:
    ProductGroupPromotionsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace ProductGroupPromotionsApiResources {
/// <summary>
/// Create product group promotions
/// </summary>
/// <remarks>
/// Add one or more product groups from your catalog to an existing ad group. (Product groups added to an ad group are a &#39;product group promotion.&#39;)
/// </remarks>
class  Ad_accountsAd_account_idProduct_group_promotionsResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idProduct_group_promotionsResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idProduct_group_promotionsResource() = default;

    Ad_accountsAd_account_idProduct_group_promotionsResource(
        const Ad_accountsAd_account_idProduct_group_promotionsResource& other) = default; // copy constructor
    Ad_accountsAd_account_idProduct_group_promotionsResource(Ad_accountsAd_account_idProduct_group_promotionsResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idProduct_group_promotionsResource& operator=(const Ad_accountsAd_account_idProduct_group_promotionsResource& other) = default; // copy assignment
    Ad_accountsAd_account_idProduct_group_promotionsResource& operator=(Ad_accountsAd_account_idProduct_group_promotionsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, ProductGroupPromotionResponse>(
        std::string & adAccountId, ProductGroupPromotionCreateRequest & productGroupPromotionCreateRequest)> handler_POST_func =
            [](std::string &, ProductGroupPromotionCreateRequest &) -> std::pair<int, ProductGroupPromotionResponse>
                { throw ProductGroupPromotionsApiException(501, "Not implemented"); };

    std::function<std::pair<int, Product_group_promotions_list_200_response>(
        std::string & adAccountId, std::vector<std::string> & productGroupPromotionIds, std::vector<std::string> & entityStatuses, std::string & adGroupId, int32_t & pageSize, std::string & order, std::string & bookmark)> handler_GET_func =
            [](std::string &, std::vector<std::string> &, std::vector<std::string> &, std::string &, int32_t &, std::string &, std::string &) -> std::pair<int, Product_group_promotions_list_200_response>
                { throw ProductGroupPromotionsApiException(501, "Not implemented"); };

    std::function<std::pair<int, ProductGroupPromotionResponse>(
        std::string & adAccountId, ProductGroupPromotionUpdateRequest & productGroupPromotionUpdateRequest)> handler_PATCH_func =
            [](std::string &, ProductGroupPromotionUpdateRequest &) -> std::pair<int, ProductGroupPromotionResponse>
                { throw ProductGroupPromotionsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, ProductGroupPromotionResponse> handler_POST(
        std::string & adAccountId, ProductGroupPromotionCreateRequest & productGroupPromotionCreateRequest);

    virtual std::pair<int, Product_group_promotions_list_200_response> handler_GET(
        std::string & adAccountId, std::vector<std::string> & productGroupPromotionIds, std::vector<std::string> & entityStatuses, std::string & adGroupId, int32_t & pageSize, std::string & order, std::string & bookmark);
    virtual std::pair<int, ProductGroupPromotionResponse> handler_PATCH(
        std::string & adAccountId, ProductGroupPromotionUpdateRequest & productGroupPromotionUpdateRequest);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleProductGroupPromotionsApiException(const ProductGroupPromotionsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PATCH_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get a product group promotion by id
/// </summary>
/// <remarks>
/// Get a product group promotion by id
/// </remarks>
class  Ad_accountsAd_account_idProduct_group_promotionsProduct_group_promotion_idResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idProduct_group_promotionsProduct_group_promotion_idResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idProduct_group_promotionsProduct_group_promotion_idResource() = default;

    Ad_accountsAd_account_idProduct_group_promotionsProduct_group_promotion_idResource(
        const Ad_accountsAd_account_idProduct_group_promotionsProduct_group_promotion_idResource& other) = default; // copy constructor
    Ad_accountsAd_account_idProduct_group_promotionsProduct_group_promotion_idResource(Ad_accountsAd_account_idProduct_group_promotionsProduct_group_promotion_idResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idProduct_group_promotionsProduct_group_promotion_idResource& operator=(const Ad_accountsAd_account_idProduct_group_promotionsProduct_group_promotion_idResource& other) = default; // copy assignment
    Ad_accountsAd_account_idProduct_group_promotionsProduct_group_promotion_idResource& operator=(Ad_accountsAd_account_idProduct_group_promotionsProduct_group_promotion_idResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, ProductGroupPromotionResponse>(
        std::string & adAccountId, std::string & productGroupPromotionId)> handler_GET_func =
            [](std::string &, std::string &) -> std::pair<int, ProductGroupPromotionResponse>
                { throw ProductGroupPromotionsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, ProductGroupPromotionResponse> handler_GET(
        std::string & adAccountId, std::string & productGroupPromotionId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleProductGroupPromotionsApiException(const ProductGroupPromotionsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get product group analytics
/// </summary>
/// <remarks>
/// Get analytics for the specified product groups in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
/// </remarks>
class  Ad_accountsAd_account_idProduct_groupsAnalyticsResource: public restbed::Resource
{
public:
    Ad_accountsAd_account_idProduct_groupsAnalyticsResource(const std::string& context = "/v5");
    virtual ~Ad_accountsAd_account_idProduct_groupsAnalyticsResource() = default;

    Ad_accountsAd_account_idProduct_groupsAnalyticsResource(
        const Ad_accountsAd_account_idProduct_groupsAnalyticsResource& other) = default; // copy constructor
    Ad_accountsAd_account_idProduct_groupsAnalyticsResource(Ad_accountsAd_account_idProduct_groupsAnalyticsResource&& other) noexcept = default; // move constructor

    Ad_accountsAd_account_idProduct_groupsAnalyticsResource& operator=(const Ad_accountsAd_account_idProduct_groupsAnalyticsResource& other) = default; // copy assignment
    Ad_accountsAd_account_idProduct_groupsAnalyticsResource& operator=(Ad_accountsAd_account_idProduct_groupsAnalyticsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::vector<ProductGroupAnalyticsResponse_inner>>(
        std::string & adAccountId, std::string & startDate, std::string & endDate, std::vector<std::string> & productGroupIds, std::vector<std::string> & columns, Granularity & granularity, int32_t & clickWindowDays, int32_t & engagementWindowDays, int32_t & viewWindowDays, std::string & conversionReportTime)> handler_GET_func =
            [](std::string &, std::string &, std::string &, std::vector<std::string> &, std::vector<std::string> &, Granularity &, int32_t &, int32_t &, int32_t &, std::string &) -> std::pair<int, std::vector<ProductGroupAnalyticsResponse_inner>>
                { throw ProductGroupPromotionsApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<ProductGroupAnalyticsResponse_inner>> handler_GET(
        std::string & adAccountId, std::string & startDate, std::string & endDate, std::vector<std::string> & productGroupIds, std::vector<std::string> & columns, Granularity & granularity, int32_t & clickWindowDays, int32_t & engagementWindowDays, int32_t & viewWindowDays, std::string & conversionReportTime);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleProductGroupPromotionsApiException(const ProductGroupPromotionsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace ProductGroupPromotionsApiResources */

using ProductGroupPromotionsApiAd_accountsAd_account_idProduct_group_promotionsResource [[deprecated]] = ProductGroupPromotionsApiResources::Ad_accountsAd_account_idProduct_group_promotionsResource;
using ProductGroupPromotionsApiAd_accountsAd_account_idProduct_group_promotionsProduct_group_promotion_idResource [[deprecated]] = ProductGroupPromotionsApiResources::Ad_accountsAd_account_idProduct_group_promotionsProduct_group_promotion_idResource;
using ProductGroupPromotionsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource [[deprecated]] = ProductGroupPromotionsApiResources::Ad_accountsAd_account_idProduct_groupsAnalyticsResource;

//
// The restbed service to actually implement the REST server
//
class  ProductGroupPromotionsApi
{
public:
    explicit ProductGroupPromotionsApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~ProductGroupPromotionsApi();

    std::shared_ptr<ProductGroupPromotionsApiResources::Ad_accountsAd_account_idProduct_group_promotionsResource> getAd_accountsAd_account_idProduct_group_promotionsResource();
    std::shared_ptr<ProductGroupPromotionsApiResources::Ad_accountsAd_account_idProduct_group_promotionsProduct_group_promotion_idResource> getAd_accountsAd_account_idProduct_group_promotionsProduct_group_promotion_idResource();
    std::shared_ptr<ProductGroupPromotionsApiResources::Ad_accountsAd_account_idProduct_groupsAnalyticsResource> getAd_accountsAd_account_idProduct_groupsAnalyticsResource();

    void setResource(std::shared_ptr<ProductGroupPromotionsApiResources::Ad_accountsAd_account_idProduct_group_promotionsResource> resource);
    void setResource(std::shared_ptr<ProductGroupPromotionsApiResources::Ad_accountsAd_account_idProduct_group_promotionsProduct_group_promotion_idResource> resource);
    void setResource(std::shared_ptr<ProductGroupPromotionsApiResources::Ad_accountsAd_account_idProduct_groupsAnalyticsResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setProductGroupPromotionsApiAd_accountsAd_account_idProduct_group_promotionsResource(std::shared_ptr<ProductGroupPromotionsApiResources::Ad_accountsAd_account_idProduct_group_promotionsResource> spProductGroupPromotionsApiAd_accountsAd_account_idProduct_group_promotionsResource);
    [[deprecated("use setResource()")]]
    virtual void setProductGroupPromotionsApiAd_accountsAd_account_idProduct_group_promotionsProduct_group_promotion_idResource(std::shared_ptr<ProductGroupPromotionsApiResources::Ad_accountsAd_account_idProduct_group_promotionsProduct_group_promotion_idResource> spProductGroupPromotionsApiAd_accountsAd_account_idProduct_group_promotionsProduct_group_promotion_idResource);
    [[deprecated("use setResource()")]]
    virtual void setProductGroupPromotionsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource(std::shared_ptr<ProductGroupPromotionsApiResources::Ad_accountsAd_account_idProduct_groupsAnalyticsResource> spProductGroupPromotionsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<ProductGroupPromotionsApiResources::Ad_accountsAd_account_idProduct_group_promotionsResource> m_spAd_accountsAd_account_idProduct_group_promotionsResource;
    std::shared_ptr<ProductGroupPromotionsApiResources::Ad_accountsAd_account_idProduct_group_promotionsProduct_group_promotion_idResource> m_spAd_accountsAd_account_idProduct_group_promotionsProduct_group_promotion_idResource;
    std::shared_ptr<ProductGroupPromotionsApiResources::Ad_accountsAd_account_idProduct_groupsAnalyticsResource> m_spAd_accountsAd_account_idProduct_groupsAnalyticsResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* ProductGroupPromotionsApi_H_ */

