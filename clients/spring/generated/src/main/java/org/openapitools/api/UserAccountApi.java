/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Account;
import org.openapitools.model.AnalyticsMetricsResponse;
import org.openapitools.model.BoardsUserFollowsList200Response;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.model.Error;
import org.openapitools.model.FollowUserRequest;
import org.openapitools.model.FollowersList200Response;
import org.openapitools.model.LinkedBusiness;
import java.time.LocalDate;
import java.util.Map;
import org.openapitools.model.TopPinsAnalyticsResponse;
import org.openapitools.model.TopVideoPinsAnalyticsResponse;
import org.openapitools.model.UserFollowingFeedType;
import org.openapitools.model.UserFollowingGet200Response;
import org.openapitools.model.UserSummary;
import org.openapitools.model.UserWebsiteSummary;
import org.openapitools.model.UserWebsiteVerificationCode;
import org.openapitools.model.UserWebsiteVerifyRequest;
import org.openapitools.model.UserWebsitesGet200Response;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-05T03:06:09.428113339Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "user_account", description = "View user accounts associated with a given access token.")
public interface UserAccountApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /user_account/following/boards : List following boards
     * Get a list of the boards a user follows. The request returns a board summary object array.
     *
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param explicitFollowing Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional, default to false)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Success (status code 200)
     *         or Invalid user id (status code 400)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "boardsUserFollowsList",
        summary = "List following boards",
        description = "Get a list of the boards a user follows. The request returns a board summary object array.",
        tags = { "user_account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BoardsUserFollowsList200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid user id", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "user_accounts:read" }),
            @SecurityRequirement(name = "client_credentials", scopes={ "user_accounts:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user_account/following/boards",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BoardsUserFollowsList200Response> boardsUserFollowsList(
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", in = ParameterIn.QUERY) @Valid @RequestParam(value = "bookmark", required = false) String bookmark,
        @Min(1) @Max(250) @Parameter(name = "page_size", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "25") Integer pageSize,
        @Parameter(name = "explicit_following", description = "Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "explicit_following", required = false, defaultValue = "false") Boolean explicitFollowing,
        @Pattern(regexp = "^\\d+$") @Size(max = 18) @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"bookmark\" : \"bookmark\", \"items\" : [ { \"owner\" : \"{}\", \"board_pins_modified_at\" : \"2020-01-01T20:10:40Z\", \"name\" : \"Summer Recipes\", \"pin_count\" : 5, \"created_at\" : \"2020-01-01T20:10:40Z\", \"description\" : \"My favorite summer recipes\", \"collaborator_count\" : 17, \"privacy\" : \"PUBLIC\", \"id\" : \"549755885175\", \"media\" : { \"pin_thumbnail_urls\" : [ \"https://i.pinimg.com/150x150/b4/57/10/b45710f1ede96af55230f4b43935c4af.jpg\", \"https://i.pinimg.com/150x150/dd/ff/46/ddff4616e39c1935cd05738794fa860e.jpg\", \"https://i.pinimg.com/150x150/84/ac/59/84ac59b670ccb5b903dace480a98930c.jpg\", \"https://i.pinimg.com/150x150/4c/54/6f/4c546f521be85e30838fb742bfff6936.jpg\" ], \"image_cover_url\" : \"https://i.pinimg.com/400x300/fd/cd/d5/fdcdd5a6d8a80824add0d054125cd957.jpg\" }, \"follower_count\" : 13 }, { \"owner\" : \"{}\", \"board_pins_modified_at\" : \"2020-01-01T20:10:40Z\", \"name\" : \"Summer Recipes\", \"pin_count\" : 5, \"created_at\" : \"2020-01-01T20:10:40Z\", \"description\" : \"My favorite summer recipes\", \"collaborator_count\" : 17, \"privacy\" : \"PUBLIC\", \"id\" : \"549755885175\", \"media\" : { \"pin_thumbnail_urls\" : [ \"https://i.pinimg.com/150x150/b4/57/10/b45710f1ede96af55230f4b43935c4af.jpg\", \"https://i.pinimg.com/150x150/dd/ff/46/ddff4616e39c1935cd05738794fa860e.jpg\", \"https://i.pinimg.com/150x150/84/ac/59/84ac59b670ccb5b903dace480a98930c.jpg\", \"https://i.pinimg.com/150x150/4c/54/6f/4c546f521be85e30838fb742bfff6936.jpg\" ], \"image_cover_url\" : \"https://i.pinimg.com/400x300/fd/cd/d5/fdcdd5a6d8a80824add0d054125cd957.jpg\" }, \"follower_count\" : 13 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /user_account/following/{username} : Follow user
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Use this request, as a signed-in user, to follow another user.
     *
     * @param username A valid username (required)
     * @param followUserRequest Follow a user. (required)
     * @return Success (status code 200)
     *         or User not found (status code 404)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "followUserUpdate",
        summary = "Follow user",
        description = "<strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/getting-started/beta-and-advanced-access/'>Learn more</a>.</strong>  Use this request, as a signed-in user, to follow another user.",
        tags = { "user_account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserSummary.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "user_accounts:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user_account/following/{username}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UserSummary> followUserUpdate(
        @Pattern(regexp = "(?!^\\d+$)^.+$") @Parameter(name = "username", description = "A valid username", required = true, in = ParameterIn.PATH) @PathVariable("username") String username,
        @Parameter(name = "FollowUserRequest", description = "Follow a user.", required = true) @Valid @RequestBody FollowUserRequest followUserRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"type\" : \"user\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user_account/followers : List followers
     * Get a list of your followers.
     *
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return Success (status code 200)
     *         or Invalid user id (status code 400)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "followersList",
        summary = "List followers",
        description = "Get a list of your followers.",
        tags = { "user_account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FollowersList200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid user id", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "user_accounts:read" }),
            @SecurityRequirement(name = "client_credentials", scopes={ "user_accounts:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user_account/followers",
        produces = { "application/json" }
    )
    
    default ResponseEntity<FollowersList200Response> followersList(
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", in = ParameterIn.QUERY) @Valid @RequestParam(value = "bookmark", required = false) String bookmark,
        @Min(1) @Max(250) @Parameter(name = "page_size", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "25") Integer pageSize
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"bookmark\" : \"bookmark\", \"items\" : [ { \"type\" : \"user\", \"username\" : \"username\" }, { \"type\" : \"user\", \"username\" : \"username\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user_account/businesses : List linked businesses
     * Get a list of your linked business accounts.
     *
     * @return Success (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "linkedBusinessAccountsGet",
        summary = "List linked businesses",
        description = "Get a list of your linked business accounts.",
        tags = { "user_account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = LinkedBusiness.class)))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "user_accounts:read" }),
            @SecurityRequirement(name = "client_credentials", scopes={ "user_accounts:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user_account/businesses",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<LinkedBusiness>> linkedBusinessAccountsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"image_large_url\" : \"https://www.example.com/dj23454f53dfk2324.jpg\", \"image_medium_url\" : \"https://www.example.com/dj23454f53dfk2324.jpg\", \"image_xlarge_url\" : \"https://www.example.com/dj23454f53dfk2324.jpg\", \"username\" : \"username\", \"image_small_url\" : \"https://www.example.com/dj23454f53dfk2324.jpg\" }, { \"image_large_url\" : \"https://www.example.com/dj23454f53dfk2324.jpg\", \"image_medium_url\" : \"https://www.example.com/dj23454f53dfk2324.jpg\", \"image_xlarge_url\" : \"https://www.example.com/dj23454f53dfk2324.jpg\", \"username\" : \"username\", \"image_small_url\" : \"https://www.example.com/dj23454f53dfk2324.jpg\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /user_account/websites : Unverify website
     * Unverifu a website verified by the signed-in user.
     *
     * @param website Website with path or domain only (required)
     * @return Successfully unverified website (status code 204)
     *         or Website not in user list. (status code 404)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "unverifyWebsiteDelete",
        summary = "Unverify website",
        description = "Unverifu a website verified by the signed-in user.",
        tags = { "user_account" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successfully unverified website"),
            @ApiResponse(responseCode = "404", description = "Website not in user list.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "user_accounts:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/user_account/websites",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> unverifyWebsiteDelete(
        @NotNull @Parameter(name = "website", description = "Website with path or domain only", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "website", required = true) String website
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user_account/analytics : Get user account analytics
     * Get analytics for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
     *
     * @param startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today. (required)
     * @param endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date. (required)
     * @param fromClaimedContent Filter on Pins that match your claimed domain. (optional, default to BOTH)
     * @param pinFormat Pin formats to get data for, default is all. (optional, default to ALL)
     * @param appTypes Apps or devices to get data for, default is all. (optional, default to ALL)
     * @param contentType Filter to paid or organic data. Default is all. (optional, default to ALL)
     * @param source Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)
     * @param metricTypes Metric types to get data for, default is all.  (optional)
     * @param splitField How to split the data into groups. Not including this param means data won&#39;t be split. (optional, default to NO_SPLIT)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Success (status code 200)
     *         or Invalid user accounts analytics parameters. (status code 400)
     *         or Not authorized to access the user account analytics. (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "userAccountAnalytics",
        summary = "Get user account analytics",
        description = "Get analytics for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".",
        tags = { "user_account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AnalyticsMetricsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid user accounts analytics parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Not authorized to access the user account analytics.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "user_accounts:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user_account/analytics",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Map<String, AnalyticsMetricsResponse>> userAccountAnalytics(
        @NotNull @Parameter(name = "start_date", description = "Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "start_date", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
        @NotNull @Parameter(name = "end_date", description = "Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "end_date", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate,
        @Parameter(name = "from_claimed_content", description = "Filter on Pins that match your claimed domain.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "from_claimed_content", required = false, defaultValue = "BOTH") String fromClaimedContent,
        @Parameter(name = "pin_format", description = "Pin formats to get data for, default is all.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pin_format", required = false, defaultValue = "ALL") String pinFormat,
        @Parameter(name = "app_types", description = "Apps or devices to get data for, default is all.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "app_types", required = false, defaultValue = "ALL") String appTypes,
        @Parameter(name = "content_type", description = "Filter to paid or organic data. Default is all.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "content_type", required = false, defaultValue = "ALL") String contentType,
        @Parameter(name = "source", description = "Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts", in = ParameterIn.QUERY) @Valid @RequestParam(value = "source", required = false, defaultValue = "ALL") String source,
        @Parameter(name = "metric_types", description = "Metric types to get data for, default is all. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "metric_types", required = false) List<String> metricTypes,
        @Parameter(name = "split_field", description = "How to split the data into groups. Not including this param means data won't be split.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "split_field", required = false, defaultValue = "NO_SPLIT") String splitField,
        @Pattern(regexp = "^\\d+$") @Size(max = 18) @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user_account/analytics/top_pins : Get user account top pins analytics
     * Gets analytics data about a user&#39;s top pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
     *
     * @param startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today. (required)
     * @param endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date. (required)
     * @param sortBy Specify sorting order for metrics (required)
     * @param fromClaimedContent Filter on Pins that match your claimed domain. (optional, default to BOTH)
     * @param pinFormat Pin formats to get data for, default is all. (optional, default to ALL)
     * @param appTypes Apps or devices to get data for, default is all. (optional, default to ALL)
     * @param contentType Filter to paid or organic data. Default is all. (optional, default to ALL)
     * @param source Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)
     * @param metricTypes Metric types to get data for, default is all.  (optional)
     * @param numOfPins Number of pins to include, default is 10. Max is 50. (optional, default to 10)
     * @param createdInLastNDays Get metrics for pins created in the last \&quot;n\&quot; days. (optional)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Success (status code 200)
     *         or Not authorized to access the user account analytics. (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "userAccountAnalyticsTopPins",
        summary = "Get user account top pins analytics",
        description = "Gets analytics data about a user's top pins (limited to the top 50). - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".",
        tags = { "user_account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TopPinsAnalyticsResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Not authorized to access the user account analytics.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "pins:read", "user_accounts:read" }),
            @SecurityRequirement(name = "client_credentials", scopes={ "pins:read", "user_accounts:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user_account/analytics/top_pins",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TopPinsAnalyticsResponse> userAccountAnalyticsTopPins(
        @NotNull @Parameter(name = "start_date", description = "Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "start_date", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
        @NotNull @Parameter(name = "end_date", description = "Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "end_date", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate,
        @NotNull @Parameter(name = "sort_by", description = "Specify sorting order for metrics", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort_by", required = true) String sortBy,
        @Parameter(name = "from_claimed_content", description = "Filter on Pins that match your claimed domain.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "from_claimed_content", required = false, defaultValue = "BOTH") String fromClaimedContent,
        @Parameter(name = "pin_format", description = "Pin formats to get data for, default is all.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pin_format", required = false, defaultValue = "ALL") String pinFormat,
        @Parameter(name = "app_types", description = "Apps or devices to get data for, default is all.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "app_types", required = false, defaultValue = "ALL") String appTypes,
        @Parameter(name = "content_type", description = "Filter to paid or organic data. Default is all.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "content_type", required = false, defaultValue = "ALL") String contentType,
        @Parameter(name = "source", description = "Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts", in = ParameterIn.QUERY) @Valid @RequestParam(value = "source", required = false, defaultValue = "ALL") String source,
        @Parameter(name = "metric_types", description = "Metric types to get data for, default is all. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "metric_types", required = false) List<String> metricTypes,
        @Min(1) @Max(50) @Parameter(name = "num_of_pins", description = "Number of pins to include, default is 10. Max is 50.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "num_of_pins", required = false, defaultValue = "10") Integer numOfPins,
        @Parameter(name = "created_in_last_n_days", description = "Get metrics for pins created in the last \"n\" days.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "created_in_last_n_days", required = false) Integer createdInLastNDays,
        @Pattern(regexp = "^\\d+$") @Size(max = 18) @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date_availability\" : { \"latest_available_timestamp\" : 1649116799000, \"is_realtime\" : false }, \"pins\" : [ { \"metrics\" : { \"CLOSEUP\" : 1, \"CLOSEUP_RATE\" : 0, \"ENGAGEMENT\" : 1, \"ENGAGEMENT_RATE\" : 0, \"IMPRESSION\" : 240, \"OUTBOUND_CLICK\" : 20, \"OUTBOUND_CLICK_RATE\" : 0.08, \"PIN_CLICK\" : 37, \"PIN_CLICK_RATE\" : 0.15, \"QUARTILE_95_PERCENT_VIEW\" : 8, \"SAVE\" : 20, \"SAVE_RATE\" : 0.18, \"VIDEO_10S_VIEW\" : 2, \"VIDEO_AVG_WATCH_TIME\" : 2507.75, \"VIDEO_MRC_VIEW\" : 20, \"VIDEO_START\" : 29, \"VIDEO_V50_WATCH_TIME\" : 10031 }, \"data_status\" : { \"key\" : \"READY\" }, \"pin_id\" : \"642396334344813594\" }, { \"metrics\" : { \"CLOSEUP\" : 1, \"CLOSEUP_RATE\" : 0, \"ENGAGEMENT\" : 1, \"ENGAGEMENT_RATE\" : 0, \"IMPRESSION\" : 240, \"OUTBOUND_CLICK\" : 20, \"OUTBOUND_CLICK_RATE\" : 0.08, \"PIN_CLICK\" : 37, \"PIN_CLICK_RATE\" : 0.15, \"QUARTILE_95_PERCENT_VIEW\" : 8, \"SAVE\" : 20, \"SAVE_RATE\" : 0.18, \"VIDEO_10S_VIEW\" : 2, \"VIDEO_AVG_WATCH_TIME\" : 2507.75, \"VIDEO_MRC_VIEW\" : 20, \"VIDEO_START\" : 29, \"VIDEO_V50_WATCH_TIME\" : 10031 }, \"data_status\" : { \"key\" : \"READY\" }, \"pin_id\" : \"642396334344813594\" } ], \"sort_by\" : \"IMPRESSION\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user_account/analytics/top_video_pins : Get user account top video pins analytics
     * Gets analytics data about a user&#39;s top video pins (limited to the top 50). - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
     *
     * @param startDate Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today. (required)
     * @param endDate Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date. (required)
     * @param sortBy Specify sorting order for video metrics (required)
     * @param fromClaimedContent Filter on Pins that match your claimed domain. (optional, default to BOTH)
     * @param pinFormat Pin formats to get data for, default is all. (optional, default to ALL)
     * @param appTypes Apps or devices to get data for, default is all. (optional, default to ALL)
     * @param contentType Filter to paid or organic data. Default is all. (optional, default to ALL)
     * @param source Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to ALL)
     * @param metricTypes Metric types to get video data for, default is all.  (optional)
     * @param numOfPins Number of pins to include, default is 10. Max is 50. (optional, default to 10)
     * @param createdInLastNDays Get metrics for pins created in the last \&quot;n\&quot; days. (optional)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Success (status code 200)
     *         or Not authorized to access the user account analytics. (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "userAccountAnalyticsTopVideoPins",
        summary = "Get user account top video pins analytics",
        description = "Gets analytics data about a user's top video pins (limited to the top 50). - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".",
        tags = { "user_account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TopVideoPinsAnalyticsResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Not authorized to access the user account analytics.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "pins:read", "user_accounts:read" }),
            @SecurityRequirement(name = "client_credentials", scopes={ "pins:read", "user_accounts:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user_account/analytics/top_video_pins",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TopVideoPinsAnalyticsResponse> userAccountAnalyticsTopVideoPins(
        @NotNull @Parameter(name = "start_date", description = "Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "start_date", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
        @NotNull @Parameter(name = "end_date", description = "Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "end_date", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate,
        @NotNull @Parameter(name = "sort_by", description = "Specify sorting order for video metrics", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort_by", required = true) String sortBy,
        @Parameter(name = "from_claimed_content", description = "Filter on Pins that match your claimed domain.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "from_claimed_content", required = false, defaultValue = "BOTH") String fromClaimedContent,
        @Parameter(name = "pin_format", description = "Pin formats to get data for, default is all.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pin_format", required = false, defaultValue = "ALL") String pinFormat,
        @Parameter(name = "app_types", description = "Apps or devices to get data for, default is all.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "app_types", required = false, defaultValue = "ALL") String appTypes,
        @Parameter(name = "content_type", description = "Filter to paid or organic data. Default is all.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "content_type", required = false, defaultValue = "ALL") String contentType,
        @Parameter(name = "source", description = "Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts", in = ParameterIn.QUERY) @Valid @RequestParam(value = "source", required = false, defaultValue = "ALL") String source,
        @Parameter(name = "metric_types", description = "Metric types to get video data for, default is all. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "metric_types", required = false) List<String> metricTypes,
        @Min(1) @Max(50) @Parameter(name = "num_of_pins", description = "Number of pins to include, default is 10. Max is 50.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "num_of_pins", required = false, defaultValue = "10") Integer numOfPins,
        @Parameter(name = "created_in_last_n_days", description = "Get metrics for pins created in the last \"n\" days.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "created_in_last_n_days", required = false) Integer createdInLastNDays,
        @Pattern(regexp = "^\\d+$") @Size(max = 18) @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date_availability\" : { \"latest_available_timestamp\" : 1649116799000, \"is_realtime\" : false }, \"pins\" : [ { \"metrics\" : { \"IMPRESSION\" : 7, \"QUARTILE_95_PERCENT_VIEW\" : 2, \"SAVE\" : 1, \"VIDEO_10S_VIEW\" : 5, \"VIDEO_AVG_WATCH_TIME\" : 86989, \"VIDEO_MRC_VIEW\" : 2, \"VIDEO_START\" : 2, \"VIDEO_V50_WATCH_TIME\" : 173979, \"OUTBOUND_CLICK\" : 2 }, \"data_status\" : { \"key\" : \"READY\" }, \"pin_id\" : \"642396334344813594\" }, { \"metrics\" : { \"IMPRESSION\" : 7, \"QUARTILE_95_PERCENT_VIEW\" : 2, \"SAVE\" : 1, \"VIDEO_10S_VIEW\" : 5, \"VIDEO_AVG_WATCH_TIME\" : 86989, \"VIDEO_MRC_VIEW\" : 2, \"VIDEO_START\" : 2, \"VIDEO_V50_WATCH_TIME\" : 173979, \"OUTBOUND_CLICK\" : 2 }, \"data_status\" : { \"key\" : \"READY\" }, \"pin_id\" : \"642396334344813594\" } ], \"sort_by\" : \"IMPRESSION\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user_account : Get user account
     * Get account information for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/getting-started/using-business-access/&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
     *
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return response (status code 200)
     *         or Not authorized to access the user account. (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "userAccountGet",
        summary = "Get user account",
        description = "Get account information for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". See <a href='/docs/getting-started/using-business-access/'>Understanding Business Access</a> for more information.",
        tags = { "user_account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Account.class))
            }),
            @ApiResponse(responseCode = "403", description = "Not authorized to access the user account.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "user_accounts:read" }),
            @SecurityRequirement(name = "client_credentials", scopes={ "user_accounts:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user_account",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Account> userAccountGet(
        @Pattern(regexp = "^\\d+$") @Size(max = 18) @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"business_name\" : \"business_name\", \"account_type\" : \"PINNER\", \"profile_image\" : \"profile_image\", \"website_url\" : \"website_url\", \"following_count\" : 347, \"about\" : \"about\", \"pin_count\" : 339, \"id\" : \"2783136121146311751\", \"monthly_views\" : 163, \"board_count\" : 14, \"follower_count\" : 10, \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user_account/following : List following
     * Get a list of who a certain user follows.
     *
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param feedType Thrift param specifying what type of followees will be kept. Default to include all followees. (optional, default to ALL)
     * @param explicitFollowing Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional, default to false)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return response (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "userFollowingGet",
        summary = "List following",
        description = "Get a list of who a certain user follows.",
        tags = { "user_account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserFollowingGet200Response.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "user_accounts:read" }),
            @SecurityRequirement(name = "client_credentials", scopes={ "user_accounts:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user_account/following",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UserFollowingGet200Response> userFollowingGet(
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", in = ParameterIn.QUERY) @Valid @RequestParam(value = "bookmark", required = false) String bookmark,
        @Min(1) @Max(250) @Parameter(name = "page_size", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "25") Integer pageSize,
        @Parameter(name = "feed_type", description = "Thrift param specifying what type of followees will be kept. Default to include all followees.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "feed_type", required = false, defaultValue = "ALL") UserFollowingFeedType feedType,
        @Parameter(name = "explicit_following", description = "Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "explicit_following", required = false, defaultValue = "false") Boolean explicitFollowing,
        @Pattern(regexp = "^\\d+$") @Size(max = 18) @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"bookmark\" : \"bookmark\", \"items\" : [ { \"type\" : \"user\", \"username\" : \"username\" }, { \"type\" : \"user\", \"username\" : \"username\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user_account/websites : Get user websites
     * Get user websites, claimed or not
     *
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return Success (status code 200)
     *         or Not authorized to access the user website list. (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "userWebsitesGet",
        summary = "Get user websites",
        description = "Get user websites, claimed or not",
        tags = { "user_account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserWebsitesGet200Response.class))
            }),
            @ApiResponse(responseCode = "403", description = "Not authorized to access the user website list.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "user_accounts:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user_account/websites",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UserWebsitesGet200Response> userWebsitesGet(
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", in = ParameterIn.QUERY) @Valid @RequestParam(value = "bookmark", required = false) String bookmark,
        @Min(1) @Max(250) @Parameter(name = "page_size", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "25") Integer pageSize
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"bookmark\" : \"bookmark\", \"items\" : [ { \"website\" : \"mysite.test\", \"verified_at\" : \"2022-12-14T21:03:01.602000\", \"status\" : \"success\" }, { \"website\" : \"mysite.test\", \"verified_at\" : \"2022-12-14T21:03:01.602000\", \"status\" : \"success\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /user_account/websites : Verify website
     * Verify a website as a signed-in user.
     *
     * @param userWebsiteVerifyRequest Verify a website. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Success (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "verifyWebsiteUpdate",
        summary = "Verify website",
        description = "Verify a website as a signed-in user.",
        tags = { "user_account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserWebsiteSummary.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "user_accounts:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user_account/websites",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UserWebsiteSummary> verifyWebsiteUpdate(
        @Parameter(name = "UserWebsiteVerifyRequest", description = "Verify a website.", required = true) @Valid @RequestBody UserWebsiteVerifyRequest userWebsiteVerifyRequest,
        @Pattern(regexp = "^\\d+$") @Size(max = 18) @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"website\" : \"mysite.test\", \"verified_at\" : \"2022-12-14T21:03:01.602000\", \"status\" : \"success\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user_account/websites/verification : Get user verification code for website claiming
     * Get verification code for user to install on the website to claim it.
     *
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Success (status code 200)
     *         or Not authorized to access the user verification code for website claiming. (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "websiteVerificationGet",
        summary = "Get user verification code for website claiming",
        description = "Get verification code for user to install on the website to claim it.",
        tags = { "user_account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserWebsiteVerificationCode.class))
            }),
            @ApiResponse(responseCode = "403", description = "Not authorized to access the user verification code for website claiming.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "user_accounts:read" }),
            @SecurityRequirement(name = "client_credentials", scopes={ "user_accounts:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user_account/websites/verification",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UserWebsiteVerificationCode> websiteVerificationGet(
        @Pattern(regexp = "^\\d+$") @Size(max = 18) @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"file_content\" : \"file_content\", \"dns_txt_record\" : \"pinterest-site-verification=e1edcc1a43976c646367e9c6c9a9b7b6\", \"filename\" : \"pinterest-e1edc.html\", \"metatag\" : \"<meta name=\\"p:domain_verify\\" content=\\"e1edcc1a43976c646367e9c6c9a9b7b6\\"/>\", \"verification_code\" : \"e1edcc1a43976c646367e9c6c9a9b7b6\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
