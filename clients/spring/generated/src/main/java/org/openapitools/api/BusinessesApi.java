/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AdAccountsAudiencesSharedAccountsList200Response;
import org.openapitools.model.AudienceAccountType;
import org.openapitools.model.AudiencesList200Response;
import org.openapitools.model.AuthRespondInvitesBody;
import org.openapitools.model.BusinessAssetMembersGet200Response;
import org.openapitools.model.BusinessAssetPartnersGet200Response;
import org.openapitools.model.BusinessAssetsGet200Response;
import org.openapitools.model.BusinessMemberAssetsGet200Response;
import org.openapitools.model.BusinessMembersAssetAccessDeleteRequest;
import org.openapitools.model.BusinessPartnerAssetAccessGet200Response;
import org.openapitools.model.BusinessSharedAudience;
import org.openapitools.model.BusinessSharedAudienceResponse;
import org.openapitools.model.CancelInvitesBody;
import org.openapitools.model.CreateAssetAccessRequestBody;
import org.openapitools.model.CreateAssetAccessRequestResponse;
import org.openapitools.model.CreateAssetGroupBody;
import org.openapitools.model.CreateAssetGroupResponse;
import org.openapitools.model.CreateAssetInvitesRequest;
import org.openapitools.model.CreateInvitesResultsResponseArray;
import org.openapitools.model.CreateMembershipOrPartnershipInvitesBody;
import org.openapitools.model.DeleteAssetGroupBody;
import org.openapitools.model.DeleteAssetGroupResponse;
import org.openapitools.model.DeleteInvitesResultsResponseArray;
import org.openapitools.model.DeleteMemberAccessResultsResponseArray;
import org.openapitools.model.DeletePartnerAssetAccessBody;
import org.openapitools.model.DeletePartnerAssetsResultsResponseArray;
import org.openapitools.model.DeletePartnersRequest;
import org.openapitools.model.DeletePartnersResponse;
import org.openapitools.model.DeletedMembersResponse;
import org.openapitools.model.Error;
import org.openapitools.model.GetBusinessEmployers200Response;
import org.openapitools.model.GetBusinessMembers200Response;
import org.openapitools.model.GetBusinessPartners200Response;
import org.openapitools.model.GetInvites200Response;
import org.openapitools.model.InviteType;
import org.openapitools.model.MemberBusinessRole;
import org.openapitools.model.MembersToDeleteBody;
import org.openapitools.model.PartnerType;
import org.openapitools.model.PermissionsWithOwner;
import org.openapitools.model.RespondToInvitesResponseArray;
import org.openapitools.model.SharedAudience;
import org.openapitools.model.SharedAudienceResponse;
import org.openapitools.model.UpdateAssetGroupBody;
import org.openapitools.model.UpdateAssetGroupResponse;
import org.openapitools.model.UpdateInvitesResultsResponseArray;
import org.openapitools.model.UpdateMemberAssetAccessBody;
import org.openapitools.model.UpdateMemberAssetsResultsResponseArray;
import org.openapitools.model.UpdateMemberBusinessRoleBody;
import org.openapitools.model.UpdateMemberResultsResponseArray;
import org.openapitools.model.UpdatePartnerAssetAccessBody;
import org.openapitools.model.UpdatePartnerAssetsResultsResponseArray;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-05T03:06:09.428113339Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "business_access_invite", description = "the business_access_invite API")
public interface BusinessesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /businesses/{business_id}/requests/assets/access : Create a request to access an existing partner&#39;s assets.
     * Create a request to access an existing partner&#39;s assets with the specified permissions. The request will be sent to the partner for approval. The assets that can be requested are ad accounts and profiles.
     *
     * @param businessId Unique identifier of the requesting business. (required)
     * @param createAssetAccessRequestBody  (required)
     * @return Success (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "assetAccessRequestsCreate",
        summary = "Create a request to access an existing partner's assets.",
        description = "Create a request to access an existing partner's assets with the specified permissions. The request will be sent to the partner for approval. The assets that can be requested are ad accounts and profiles.",
        tags = { "business_access_invite" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateAssetAccessRequestResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "biz_access:read", "biz_access:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{business_id}/requests/assets/access",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CreateAssetAccessRequestResponse> assetAccessRequestsCreate(
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "business_id", description = "Unique identifier of the requesting business.", required = true, in = ParameterIn.PATH) @PathVariable("business_id") String businessId,
        @Parameter(name = "CreateAssetAccessRequestBody", description = "", required = true) @Valid @RequestBody CreateAssetAccessRequestBody createAssetAccessRequestBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"invites\" : { \"766456567741825556\" : \"5349280584552211583\", \"733242520489967216\" : \"5349280584552211845\" }, \"exceptions\" : [ { \"code\" : 2932, \"messages\" : [ \"Invalid asset id: 549760723247\", \"Invalid asset id: 546760723248\" ] }, { \"code\" : 2932, \"messages\" : [ \"Invalid asset id: 549760723247\", \"Invalid asset id: 546760723248\" ] } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{business_id}/asset_groups : Create a new asset group.
     * Create a new asset group with the specified parameters. - An &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/asset-groups\&quot;&gt;asset group&lt;/a&gt; is a custom group of assets based on how you’d like to manage your accounts.
     *
     * @param businessId Unique identifier of the requesting business. (required)
     * @param createAssetGroupBody  (required)
     * @return Success (status code 200)
     *         or Invalid parameters. (status code 400)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "assetGroupCreate",
        summary = "Create a new asset group.",
        description = "Create a new asset group with the specified parameters. - An <a href=\"https://help.pinterest.com/en/business/article/asset-groups\">asset group</a> is a custom group of assets based on how you’d like to manage your accounts.",
        tags = { "business_access_assets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateAssetGroupResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "biz_access:read", "biz_access:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{business_id}/asset_groups",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CreateAssetGroupResponse> assetGroupCreate(
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "business_id", description = "Unique identifier of the requesting business.", required = true, in = ParameterIn.PATH) @PathVariable("business_id") String businessId,
        @Parameter(name = "CreateAssetGroupBody", description = "", required = true) @Valid @RequestBody CreateAssetGroupBody createAssetGroupBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"asset_group\" : { \"profiles_ids\" : [ \"630433785246278264\" ], \"owner\" : \"{}\", \"created_time\" : 1646767577816, \"updated_time\" : 1646767577816, \"asset_group_types\" : [ \"LOCATION_OR_LANGUAGE\" ], \"ad_accounts_ids\" : [ \"549755885175\" ], \"asset_group_description\" : \"Asset group that has ad accounts used in Canada\", \"id\" : \"666791336903426391\", \"created_by\" : \"{}\", \"asset_group_name\" : \"Canada Ad Accounts\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /businesses/{business_id}/asset_groups : Delete asset groups.
     * Delete a batch of asset groups.
     *
     * @param businessId Unique identifier of the requesting business. (required)
     * @param deleteAssetGroupBody  (required)
     * @return Success (status code 200)
     *         or Invalid parameters. (status code 400)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "assetGroupDelete",
        summary = "Delete asset groups.",
        description = "Delete a batch of asset groups.",
        tags = { "business_access_assets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteAssetGroupResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "biz_access:read", "biz_access:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/businesses/{business_id}/asset_groups",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DeleteAssetGroupResponse> assetGroupDelete(
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "business_id", description = "Unique identifier of the requesting business.", required = true, in = ParameterIn.PATH) @PathVariable("business_id") String businessId,
        @Parameter(name = "DeleteAssetGroupBody", description = "", required = true) @Valid @RequestBody DeleteAssetGroupBody deleteAssetGroupBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"deleted_asset_groups\" : [ \"deleted_asset_groups\", \"deleted_asset_groups\" ], \"exceptions\" : [ { \"asset_group_id\" : \"666791336903426391\", \"code\" : 29, \"message\" : \"You are not permitted to access that resource.\" }, { \"asset_group_id\" : \"666791336903426391\", \"code\" : 29, \"message\" : \"You are not permitted to access that resource.\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /businesses/{business_id}/asset_groups : Update asset groups.
     * Update a batch of asset groups with the specified parameters.
     *
     * @param businessId Unique identifier of the requesting business. (required)
     * @param updateAssetGroupBody  (required)
     * @return Success (status code 200)
     *         or Invalid parameters. (status code 400)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "assetGroupUpdate",
        summary = "Update asset groups.",
        description = "Update a batch of asset groups with the specified parameters.",
        tags = { "business_access_assets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateAssetGroupResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "biz_access:read", "biz_access:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/businesses/{business_id}/asset_groups",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UpdateAssetGroupResponse> assetGroupUpdate(
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "business_id", description = "Unique identifier of the requesting business.", required = true, in = ParameterIn.PATH) @PathVariable("business_id") String businessId,
        @Parameter(name = "UpdateAssetGroupBody", description = "", required = true) @Valid @RequestBody UpdateAssetGroupBody updateAssetGroupBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"updated_asset_groups\" : [ { \"profiles_ids\" : [ \"630433785246278264\" ], \"owner\" : \"{}\", \"created_time\" : 1646767577816, \"updated_time\" : 1646767577816, \"asset_group_types\" : [ \"LOCATION_OR_LANGUAGE\" ], \"ad_accounts_ids\" : [ \"549755885175\" ], \"asset_group_description\" : \"Asset group that has ad accounts used in Canada\", \"id\" : \"666791336903426391\", \"created_by\" : \"{}\", \"asset_group_name\" : \"Canada Ad Accounts\" }, { \"profiles_ids\" : [ \"630433785246278264\" ], \"owner\" : \"{}\", \"created_time\" : 1646767577816, \"updated_time\" : 1646767577816, \"asset_group_types\" : [ \"LOCATION_OR_LANGUAGE\" ], \"ad_accounts_ids\" : [ \"549755885175\" ], \"asset_group_description\" : \"Asset group that has ad accounts used in Canada\", \"id\" : \"666791336903426391\", \"created_by\" : \"{}\", \"asset_group_name\" : \"Canada Ad Accounts\" } ], \"exceptions\" : [ { \"asset_group_id\" : \"666791336903426391\", \"code\" : 29, \"message\" : \"You are not permitted to access that resource.\" }, { \"asset_group_id\" : \"666791336903426391\", \"code\" : 29, \"message\" : \"You are not permitted to access that resource.\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /businesses/{business_id}/audiences/shared/accounts : List accounts with access to an audience owned by a business
     * List all ad accounts and/or businesses that have access to a specific audience. The audience must either be owned by an ad account in the requesting business, or it must have been shared with the requesting business. If the requesting business is not the owner of the audience, only ad accounts owned by the requesting business will be returned.
     *
     * @param businessId Unique identifier of the requesting business. (required)
     * @param audienceId Unique identifier of the audience to use to filter the results. (required)
     * @param accountType Filter accounts by account type. (required)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @return Success (status code 200)
     *         or Invalid business audiences shared accounts parameters. (status code 400)
     *         or Shared accounts not found. (status code 404)
     *         or Unexpected error. (status code 200)
     */
    @Operation(
        operationId = "businessAccountAudiencesSharedAccountsList",
        summary = "List accounts with access to an audience owned by a business",
        description = "List all ad accounts and/or businesses that have access to a specific audience. The audience must either be owned by an ad account in the requesting business, or it must have been shared with the requesting business. If the requesting business is not the owner of the audience, only ad accounts owned by the requesting business will be returned.",
        tags = { "audience_sharing" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AdAccountsAudiencesSharedAccountsList200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid business audiences shared accounts parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Shared accounts not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "biz_access:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/businesses/{business_id}/audiences/shared/accounts",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AdAccountsAudiencesSharedAccountsList200Response> businessAccountAudiencesSharedAccountsList(
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "business_id", description = "Unique identifier of the requesting business.", required = true, in = ParameterIn.PATH) @PathVariable("business_id") String businessId,
        @NotNull @Pattern(regexp = "^\\d+$") @Size(max = 18) @Parameter(name = "audience_id", description = "Unique identifier of the audience to use to filter the results.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "audience_id", required = true) String audienceId,
        @NotNull @Parameter(name = "account_type", description = "Filter accounts by account type.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "account_type", required = true, defaultValue = "AD_ACCOUNT") AudienceAccountType accountType,
        @Min(1) @Max(250) @Parameter(name = "page_size", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "25") Integer pageSize,
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", in = ParameterIn.QUERY) @Valid @RequestParam(value = "bookmark", required = false) String bookmark
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"bookmark\" : \"bookmark\", \"items\" : [ { \"account_type\" : \"AD_ACCOUNT\", \"account_id\" : \"549755885175\", \"account_name\" : \"Home Depot USA\", \"shared_on_timestamp\" : 1677003860 }, { \"account_type\" : \"AD_ACCOUNT\", \"account_id\" : \"549755885175\", \"account_name\" : \"Home Depot USA\", \"shared_on_timestamp\" : 1677003860 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /businesses/{business_id}/assets/{asset_id}/members : Get members with access to asset
     * Get all the members the requesting business has granted access to on the given asset.
     *
     * @param businessId Unique identifier of the requesting business. (required)
     * @param assetId Unique identifier of a business asset. (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @return Sucess (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "businessAssetMembersGet",
        summary = "Get members with access to asset",
        description = "Get all the members the requesting business has granted access to on the given asset.",
        tags = { "business_access_assets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sucess", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BusinessAssetMembersGet200Response.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "biz_access:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/businesses/{business_id}/assets/{asset_id}/members",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BusinessAssetMembersGet200Response> businessAssetMembersGet(
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "business_id", description = "Unique identifier of the requesting business.", required = true, in = ParameterIn.PATH) @PathVariable("business_id") String businessId,
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "asset_id", description = "Unique identifier of a business asset.", required = true, in = ParameterIn.PATH) @PathVariable("asset_id") String assetId,
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", in = ParameterIn.QUERY) @Valid @RequestParam(value = "bookmark", required = false) String bookmark,
        @Min(1) @Max(250) @Parameter(name = "page_size", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "25") Integer pageSize,
        @Min(0) @Parameter(name = "start_index", description = "An index to start fetching the results from. Only the results starting from this index will be returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "start_index", required = false, defaultValue = "0") Integer startIndex
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"bookmark\" : \"bookmark\", \"items\" : [ { \"permissions\" : [ \"FINANCE_MANAGER\", \"CATALOGS_MANAGER\", \"AUDIENCE_MANAGER\" ], \"user\" : { \"id\" : \"383791336903426391\", \"email\" : \"business0101@business.com\", \"username\" : \"business0101\" } }, { \"permissions\" : [ \"FINANCE_MANAGER\", \"CATALOGS_MANAGER\", \"AUDIENCE_MANAGER\" ], \"user\" : { \"id\" : \"383791336903426391\", \"email\" : \"business0101@business.com\", \"username\" : \"business0101\" } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /businesses/{business_id}/assets/{asset_id}/partners : Get partners with access to asset
     * Get all the partners the requesting business has granted access to on the given asset. Note: If the asset has been shared with you, an empty array will be returned. This is because an asset shared with you cannot be shared with a different partner.
     *
     * @param businessId Unique identifier of the requesting business. (required)
     * @param assetId Unique identifier of a business asset. (required)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return Sucess (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "businessAssetPartnersGet",
        summary = "Get partners with access to asset",
        description = "Get all the partners the requesting business has granted access to on the given asset. Note: If the asset has been shared with you, an empty array will be returned. This is because an asset shared with you cannot be shared with a different partner.",
        tags = { "business_access_assets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sucess", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BusinessAssetPartnersGet200Response.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "biz_access:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/businesses/{business_id}/assets/{asset_id}/partners",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BusinessAssetPartnersGet200Response> businessAssetPartnersGet(
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "business_id", description = "Unique identifier of the requesting business.", required = true, in = ParameterIn.PATH) @PathVariable("business_id") String businessId,
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "asset_id", description = "Unique identifier of a business asset.", required = true, in = ParameterIn.PATH) @PathVariable("asset_id") String assetId,
        @Min(0) @Parameter(name = "start_index", description = "An index to start fetching the results from. Only the results starting from this index will be returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "start_index", required = false, defaultValue = "0") Integer startIndex,
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", in = ParameterIn.QUERY) @Valid @RequestParam(value = "bookmark", required = false) String bookmark,
        @Min(1) @Max(250) @Parameter(name = "page_size", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "25") Integer pageSize
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"bookmark\" : \"bookmark\", \"items\" : [ { \"permissions\" : [ \"FINANCE_MANAGER\", \"CATALOGS_MANAGER\", \"AUDIENCE_MANAGER\" ], \"user\" : { \"id\" : \"383791336903426391\", \"email\" : \"business0101@business.com\", \"username\" : \"business0101\" } }, { \"permissions\" : [ \"FINANCE_MANAGER\", \"CATALOGS_MANAGER\", \"AUDIENCE_MANAGER\" ], \"user\" : { \"id\" : \"383791336903426391\", \"email\" : \"business0101@business.com\", \"username\" : \"business0101\" } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /businesses/{business_id}/assets : List business assets
     * Get all the assets the requesting business has access to. This includes assets the business owns and assets the business has access to through partnerships.
     *
     * @param businessId Unique identifier of the requesting business. (required)
     * @param permissions A list of asset permissions used to filter the assets. Only assets where the requesting business has at least one of the specified permissions will be returned. (optional)
     * @param childAssetId A child asset unique identifier. Used to fetch asset groups that contain the asset id as a child. (optional)
     * @param assetGroupId An asset group unique identifier. Used to fetch assets contained within the specified asset group. (optional)
     * @param assetType A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return Success (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "businessAssetsGet",
        summary = "List business assets",
        description = "Get all the assets the requesting business has access to. This includes assets the business owns and assets the business has access to through partnerships.",
        tags = { "business_access_assets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BusinessAssetsGet200Response.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "biz_access:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/businesses/{business_id}/assets",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BusinessAssetsGet200Response> businessAssetsGet(
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "business_id", description = "Unique identifier of the requesting business.", required = true, in = ParameterIn.PATH) @PathVariable("business_id") String businessId,
        @Parameter(name = "permissions", description = "A list of asset permissions used to filter the assets. Only assets where the requesting business has at least one of the specified permissions will be returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "permissions", required = false) List<PermissionsWithOwner> permissions,
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "child_asset_id", description = "A child asset unique identifier. Used to fetch asset groups that contain the asset id as a child.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "child_asset_id", required = false) String childAssetId,
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "asset_group_id", description = "An asset group unique identifier. Used to fetch assets contained within the specified asset group.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "asset_group_id", required = false) String assetGroupId,
        @Parameter(name = "asset_type", description = "A resource type to filter the assets by. Only assets of the specified type will be returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "asset_type", required = false, defaultValue = "AD_ACCOUNT") String assetType,
        @Min(0) @Parameter(name = "start_index", description = "An index to start fetching the results from. Only the results starting from this index will be returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "start_index", required = false, defaultValue = "0") Integer startIndex,
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", in = ParameterIn.QUERY) @Valid @RequestParam(value = "bookmark", required = false) String bookmark,
        @Min(1) @Max(250) @Parameter(name = "page_size", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "25") Integer pageSize
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"bookmark\" : \"bookmark\", \"items\" : [ { \"asset_type\" : \"AD_ACCOUNT\", \"asset_id\" : \"549755885175\", \"asset_group_info\" : { \"profiles_ids\" : [ \"630433785246278264\" ], \"owner\" : \"{}\", \"created_time\" : 1646767577816, \"updated_time\" : 1646767577816, \"asset_group_types\" : [ \"LOCATION_OR_LANGUAGE\" ], \"ad_accounts_ids\" : [ \"549755885175\" ], \"asset_group_description\" : \"Asset group that has ad accounts used in Canada\", \"id\" : \"666791336903426391\", \"created_by\" : \"{}\", \"asset_group_name\" : \"Canada Ad Accounts\" } }, { \"asset_type\" : \"AD_ACCOUNT\", \"asset_id\" : \"549755885175\", \"asset_group_info\" : { \"profiles_ids\" : [ \"630433785246278264\" ], \"owner\" : \"{}\", \"created_time\" : 1646767577816, \"updated_time\" : 1646767577816, \"asset_group_types\" : [ \"LOCATION_OR_LANGUAGE\" ], \"ad_accounts_ids\" : [ \"549755885175\" ], \"asset_group_description\" : \"Asset group that has ad accounts used in Canada\", \"id\" : \"666791336903426391\", \"created_by\" : \"{}\", \"asset_group_name\" : \"Canada Ad Accounts\" } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /businesses/{business_id}/members/{member_id}/assets : Get assets assigned to a member
     * Get assets on which you assigned asset permissions to the given member. Can be used to: - get all assets, regardless of asset type or - get assets of one asset type by using the asset_type query. The return response will include the permissions the member has to that asset and the asset type.
     *
     * @param businessId Unique identifier of the requesting business. (required)
     * @param memberId The member id to fetch assets for. (required)
     * @param assetType A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return Success (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "businessMemberAssetsGet",
        summary = "Get assets assigned to a member",
        description = "Get assets on which you assigned asset permissions to the given member. Can be used to: - get all assets, regardless of asset type or - get assets of one asset type by using the asset_type query. The return response will include the permissions the member has to that asset and the asset type.",
        tags = { "business_access_assets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BusinessMemberAssetsGet200Response.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "biz_access:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/businesses/{business_id}/members/{member_id}/assets",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BusinessMemberAssetsGet200Response> businessMemberAssetsGet(
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "business_id", description = "Unique identifier of the requesting business.", required = true, in = ParameterIn.PATH) @PathVariable("business_id") String businessId,
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "member_id", description = "The member id to fetch assets for.", required = true, in = ParameterIn.PATH) @PathVariable("member_id") String memberId,
        @Parameter(name = "asset_type", description = "A resource type to filter the assets by. Only assets of the specified type will be returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "asset_type", required = false, defaultValue = "AD_ACCOUNT") String assetType,
        @Min(0) @Parameter(name = "start_index", description = "An index to start fetching the results from. Only the results starting from this index will be returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "start_index", required = false, defaultValue = "0") Integer startIndex,
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", in = ParameterIn.QUERY) @Valid @RequestParam(value = "bookmark", required = false) String bookmark,
        @Min(1) @Max(250) @Parameter(name = "page_size", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "25") Integer pageSize
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"bookmark\" : \"bookmark\", \"items\" : [ { \"permissions\" : [ \"FINANCE_MANAGER\", \"CATALOGS_MANAGER\", \"AUDIENCE_MANAGER\" ], \"asset_type\" : \"AD_ACCOUNT\", \"asset_id\" : \"549755885175\", \"asset_group_info\" : { \"profiles_ids\" : [ \"630433785246278264\" ], \"owner\" : \"{}\", \"created_time\" : 1646767577816, \"updated_time\" : 1646767577816, \"asset_group_types\" : [ \"LOCATION_OR_LANGUAGE\" ], \"ad_accounts_ids\" : [ \"549755885175\" ], \"asset_group_description\" : \"Asset group that has ad accounts used in Canada\", \"id\" : \"666791336903426391\", \"created_by\" : \"{}\", \"asset_group_name\" : \"Canada Ad Accounts\" } }, { \"permissions\" : [ \"FINANCE_MANAGER\", \"CATALOGS_MANAGER\", \"AUDIENCE_MANAGER\" ], \"asset_type\" : \"AD_ACCOUNT\", \"asset_id\" : \"549755885175\", \"asset_group_info\" : { \"profiles_ids\" : [ \"630433785246278264\" ], \"owner\" : \"{}\", \"created_time\" : 1646767577816, \"updated_time\" : 1646767577816, \"asset_group_types\" : [ \"LOCATION_OR_LANGUAGE\" ], \"ad_accounts_ids\" : [ \"549755885175\" ], \"asset_group_description\" : \"Asset group that has ad accounts used in Canada\", \"id\" : \"666791336903426391\", \"created_by\" : \"{}\", \"asset_group_name\" : \"Canada Ad Accounts\" } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /businesses/{business_id}/members/assets/access : Delete member access to asset
     * Terminate multiple members&#39; access to an asset.
     *
     * @param businessId Unique identifier of the requesting business. (required)
     * @param businessMembersAssetAccessDeleteRequest List member assset permissions to delete. (required)
     * @return response (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "businessMembersAssetAccessDelete",
        summary = "Delete member access to asset",
        description = "Terminate multiple members' access to an asset.",
        tags = { "business_access_assets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteMemberAccessResultsResponseArray.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "biz_access:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/businesses/{business_id}/members/assets/access",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DeleteMemberAccessResultsResponseArray> businessMembersAssetAccessDelete(
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "business_id", description = "Unique identifier of the requesting business.", required = true, in = ParameterIn.PATH) @PathVariable("business_id") String businessId,
        @Parameter(name = "BusinessMembersAssetAccessDeleteRequest", description = "List member assset permissions to delete.", required = true) @Valid @RequestBody BusinessMembersAssetAccessDeleteRequest businessMembersAssetAccessDeleteRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"items\" : [ { \"member_id\" : \"140943737684417\", \"asset_id\" : \"549755885175\" }, { \"member_id\" : \"140943737684417\", \"asset_id\" : \"549755885175\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /businesses/{business_id}/members/assets/access : Assign/Update member asset permissions
     * Grant multiple members access to assets and/or update multiple member&#39;s exisiting permissions to an asset. Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE. 
     *
     * @param businessId Unique identifier of the requesting business. (required)
     * @param updateMemberAssetAccessBody List of member asset permissions to create or update. (required)
     * @return response (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "businessMembersAssetAccessUpdate",
        summary = "Assign/Update member asset permissions",
        description = "Grant multiple members access to assets and/or update multiple member's exisiting permissions to an asset. Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE. ",
        tags = { "business_access_assets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateMemberAssetsResultsResponseArray.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "biz_access:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/businesses/{business_id}/members/assets/access",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UpdateMemberAssetsResultsResponseArray> businessMembersAssetAccessUpdate(
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "business_id", description = "Unique identifier of the requesting business.", required = true, in = ParameterIn.PATH) @PathVariable("business_id") String businessId,
        @Parameter(name = "UpdateMemberAssetAccessBody", description = "List of member asset permissions to create or update.", required = true) @Valid @RequestBody UpdateMemberAssetAccessBody updateMemberAssetAccessBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"items\" : [ { \"response\" : { \"member_id\" : \"140943737684417\", \"permissions\" : [ \"FINANCE_MANAGER\", \"CATALOGS_MANAGER\", \"AUDIENCE_MANAGER\" ], \"asset_id\" : \"549755885175\" } }, { \"response\" : { \"member_id\" : \"140943737684417\", \"permissions\" : [ \"FINANCE_MANAGER\", \"CATALOGS_MANAGER\", \"AUDIENCE_MANAGER\" ], \"asset_id\" : \"549755885175\" } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /businesses/{business_id}/partners/{partner_id}/assets : Get assets assigned to a partner or assets assigned by a partner
     * Can be used to get the business assets your partner has granted you access to or the business assets you have granted your partner access to. If you specify: - partner_type&#x3D;INTERNAL, you will retrieve your business assets that the partner has access to. - partner_type&#x3D;EXTERNAL, you will retrieve the partner&#39;s business assets that the partner has granted you access to.
     *
     * @param businessId Unique identifier of the requesting business. (required)
     * @param partnerId The partner id to be bound to the Business (required)
     * @param partnerType Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset. (optional)
     * @param assetType A resource type to filter the assets by. Only assets of the specified type will be returned. (optional, default to AD_ACCOUNT)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @return Success (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "businessPartnerAssetAccessGet",
        summary = "Get assets assigned to a partner or assets assigned by a partner",
        description = "Can be used to get the business assets your partner has granted you access to or the business assets you have granted your partner access to. If you specify: - partner_type=INTERNAL, you will retrieve your business assets that the partner has access to. - partner_type=EXTERNAL, you will retrieve the partner's business assets that the partner has granted you access to.",
        tags = { "business_access_assets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BusinessPartnerAssetAccessGet200Response.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "biz_access:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/businesses/{business_id}/partners/{partner_id}/assets",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BusinessPartnerAssetAccessGet200Response> businessPartnerAssetAccessGet(
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "business_id", description = "Unique identifier of the requesting business.", required = true, in = ParameterIn.PATH) @PathVariable("business_id") String businessId,
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "partner_id", description = "The partner id to be bound to the Business", required = true, in = ParameterIn.PATH) @PathVariable("partner_id") String partnerId,
        @Parameter(name = "partner_type", description = "Specifies whether to fetch internal or external (shared) partners. If partner_type=INTERNAL, the asset being queried is for accesses the partner has to your business assets.<br> If partner_type=EXTERNAL, the asset being queried is for the accesses you have to the partner's business asset.", in = ParameterIn.QUERY) @Valid PartnerType partnerType,
        @Parameter(name = "asset_type", description = "A resource type to filter the assets by. Only assets of the specified type will be returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "asset_type", required = false, defaultValue = "AD_ACCOUNT") String assetType,
        @Min(0) @Parameter(name = "start_index", description = "An index to start fetching the results from. Only the results starting from this index will be returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "start_index", required = false, defaultValue = "0") Integer startIndex,
        @Min(1) @Max(250) @Parameter(name = "page_size", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "25") Integer pageSize,
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", in = ParameterIn.QUERY) @Valid @RequestParam(value = "bookmark", required = false) String bookmark
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"bookmark\" : \"bookmark\", \"items\" : [ { \"permissions\" : [ \"FINANCE_MANAGER\", \"CATALOGS_MANAGER\", \"AUDIENCE_MANAGER\" ], \"asset_type\" : \"AD_ACCOUNT\", \"asset_id\" : \"549755885175\", \"asset_group_info\" : { \"profiles_ids\" : [ \"630433785246278264\" ], \"owner\" : \"{}\", \"created_time\" : 1646767577816, \"updated_time\" : 1646767577816, \"asset_group_types\" : [ \"LOCATION_OR_LANGUAGE\" ], \"ad_accounts_ids\" : [ \"549755885175\" ], \"asset_group_description\" : \"Asset group that has ad accounts used in Canada\", \"id\" : \"666791336903426391\", \"created_by\" : \"{}\", \"asset_group_name\" : \"Canada Ad Accounts\" } }, { \"permissions\" : [ \"FINANCE_MANAGER\", \"CATALOGS_MANAGER\", \"AUDIENCE_MANAGER\" ], \"asset_type\" : \"AD_ACCOUNT\", \"asset_id\" : \"549755885175\", \"asset_group_info\" : { \"profiles_ids\" : [ \"630433785246278264\" ], \"owner\" : \"{}\", \"created_time\" : 1646767577816, \"updated_time\" : 1646767577816, \"asset_group_types\" : [ \"LOCATION_OR_LANGUAGE\" ], \"ad_accounts_ids\" : [ \"549755885175\" ], \"asset_group_description\" : \"Asset group that has ad accounts used in Canada\", \"id\" : \"666791336903426391\", \"created_by\" : \"{}\", \"asset_group_name\" : \"Canada Ad Accounts\" } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /businesses/{business_id}/invites : Cancel invites/requests
     * Cancel membership/partnership invites and/or requests.
     *
     * @param businessId Business id (required)
     * @param cancelInvitesBody A list with invite ids (required)
     * @return Success (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "cancelInvitesOrRequests",
        summary = "Cancel invites/requests",
        description = "Cancel membership/partnership invites and/or requests.",
        tags = { "business_access_invite" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteInvitesResultsResponseArray.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "biz_access:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/businesses/{business_id}/invites",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DeleteInvitesResultsResponseArray> cancelInvitesOrRequests(
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "business_id", description = "Business id", required = true, in = ParameterIn.PATH) @PathVariable("business_id") String businessId,
        @Parameter(name = "CancelInvitesBody", description = "A list with invite ids", required = true) @Valid @RequestBody CancelInvitesBody cancelInvitesBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"items\" : [ { \"exception\" : { \"invite_id\" : \"invite_id\", \"message\" : \"Business Invite request cannot be performed on current invitation status.\" }, \"invite\" : { \"invite_data\" : { \"invite_type\" : \"MEMBER_INVITE\", \"sent_at\" : 1646767577816, \"last_updated_time\" : 1646767577816, \"invite_expiration\" : 1709748104775, \"invite_status\" : \"PENDING\" }, \"id\" : \"383791336903426391\", \"user\" : \"{}\", \"is_received_invite\" : true } }, { \"exception\" : { \"invite_id\" : \"invite_id\", \"message\" : \"Business Invite request cannot be performed on current invitation status.\" }, \"invite\" : { \"invite_data\" : { \"invite_type\" : \"MEMBER_INVITE\", \"sent_at\" : 1646767577816, \"last_updated_time\" : 1646767577816, \"invite_expiration\" : 1709748104775, \"invite_status\" : \"PENDING\" }, \"id\" : \"383791336903426391\", \"user\" : \"{}\", \"is_received_invite\" : true } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{business_id}/invites/assets/access : Update invite/request with an asset permission
     * Assign asset permissions information to an existing invite/request. Can be used to: - Request access to a partner&#39;s asset. Note: This is only for when no existing partnership exists. If an existing   partnership exists, use \&quot;Create a request to access an existing partner&#39;s assets\&quot; to request access to your   partner&#39;s assets.     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot; - Invite a partner to access your business assets. Note: This is only for when there is no existing partnership.   If there is an existing partnership, use \&quot;Assign/Update partner asset permissions\&quot; to assign a partner access to   new assets.     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot; - Invite a member to access your business assets. Note: This is only for when there is no existing membership.   If there is an existing membership, use \&quot;Assign/Update member asset permissions\&quot; to assign a member access to new   assets.     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;  To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview.
     *
     * @param businessId Unique identifier of the requesting business. (required)
     * @param createAssetInvitesRequest A list of invites/requests together with the asset permissions to be assigned to the invite/request.  (required)
     * @return Success (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "createAssetInvites",
        summary = "Update invite/request with an asset permission",
        description = "Assign asset permissions information to an existing invite/request. Can be used to: - Request access to a partner's asset. Note: This is only for when no existing partnership exists. If an existing   partnership exists, use \"Create a request to access an existing partner's assets\" to request access to your   partner's assets.     - invite_type=\"PARTNER_REQUEST\" - Invite a partner to access your business assets. Note: This is only for when there is no existing partnership.   If there is an existing partnership, use \"Assign/Update partner asset permissions\" to assign a partner access to   new assets.     - invite_type=\"PARTNER_INVITE\" - Invite a member to access your business assets. Note: This is only for when there is no existing membership.   If there is an existing membership, use \"Assign/Update member asset permissions\" to assign a member access to new   assets.     - invite_type=\"MEMBER_INVITE\"  To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview.",
        tags = { "business_access_invite" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateInvitesResultsResponseArray.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "biz_access:read", "biz_access:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{business_id}/invites/assets/access",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UpdateInvitesResultsResponseArray> createAssetInvites(
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "business_id", description = "Unique identifier of the requesting business.", required = true, in = ParameterIn.PATH) @PathVariable("business_id") String businessId,
        @Parameter(name = "CreateAssetInvitesRequest", description = "A list of invites/requests together with the asset permissions to be assigned to the invite/request. ", required = true) @Valid @RequestBody CreateAssetInvitesRequest createAssetInvitesRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"items\" : [ { \"exception\" : { \"code\" : 403, \"users_or_partner_ids\" : [ \"businessMember0101\", \"business+member@business.com\" ], \"invite_or_request_id\" : \"383791336903426391\", \"message\" : \"You hit the maximum number of pending invites allowed.\" }, \"invite\" : { \"created_by_business_id\" : \"1234567890123\", \"created_by_user_id\" : \"1234567890123\", \"user\" : \"{}\" } }, { \"exception\" : { \"code\" : 403, \"users_or_partner_ids\" : [ \"businessMember0101\", \"business+member@business.com\" ], \"invite_or_request_id\" : \"383791336903426391\", \"message\" : \"You hit the maximum number of pending invites allowed.\" }, \"invite\" : { \"created_by_business_id\" : \"1234567890123\", \"created_by_user_id\" : \"1234567890123\", \"user\" : \"{}\" } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{business_id}/invites : Create invites or requests
     * Create batch invites or requests. Can create batch invites or requests as described below. - Invite members to join the business. This would required specifying the following:     - invite_type&#x3D;\&quot;MEMBER_INVITE\&quot;     - business_role&#x3D;\&quot;EMPLOYEE\&quot; OR business_role&#x3D;\&quot;BIZ_ADMIN\&quot; (To learn more about business roles, visit     https://help.pinterest.com/en/business/article/profile-permissions-in-business-access.)     - members - Invite partners to access your business assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_INVITE\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners - Request to be a partner so you can access their assets. This would require specifying the following:     - invite_type&#x3D;\&quot;PARTNER_REQUEST\&quot;     - business_role&#x3D;\&quot;PARTNER\&quot;     - partners
     *
     * @param businessId Business id (required)
     * @param createMembershipOrPartnershipInvitesBody An object with the properties: invite_type, partners, members, business_role (required)
     * @return Success (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "createMembershipOrPartnershipInvites",
        summary = "Create invites or requests",
        description = "Create batch invites or requests. Can create batch invites or requests as described below. - Invite members to join the business. This would required specifying the following:     - invite_type=\"MEMBER_INVITE\"     - business_role=\"EMPLOYEE\" OR business_role=\"BIZ_ADMIN\" (To learn more about business roles, visit     https://help.pinterest.com/en/business/article/profile-permissions-in-business-access.)     - members - Invite partners to access your business assets. This would require specifying the following:     - invite_type=\"PARTNER_INVITE\"     - business_role=\"PARTNER\"     - partners - Request to be a partner so you can access their assets. This would require specifying the following:     - invite_type=\"PARTNER_REQUEST\"     - business_role=\"PARTNER\"     - partners",
        tags = { "business_access_invite" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateInvitesResultsResponseArray.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "biz_access:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{business_id}/invites",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CreateInvitesResultsResponseArray> createMembershipOrPartnershipInvites(
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "business_id", description = "Business id", required = true, in = ParameterIn.PATH) @PathVariable("business_id") String businessId,
        @Parameter(name = "CreateMembershipOrPartnershipInvitesBody", description = "An object with the properties: invite_type, partners, members, business_role", required = true) @Valid @RequestBody CreateMembershipOrPartnershipInvitesBody createMembershipOrPartnershipInvitesBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"items\" : [ { \"exception\" : { \"code\" : 403, \"users_or_partner_ids\" : [ \"businessMember0101\", \"business+member@business.com\" ], \"invite_or_request_id\" : \"383791336903426391\", \"message\" : \"You hit the maximum number of pending invites allowed.\" }, \"invite\" : { \"id\" : \"383791336903426391\", \"user\" : \"{}\" } }, { \"exception\" : { \"code\" : 403, \"users_or_partner_ids\" : [ \"businessMember0101\", \"business+member@business.com\" ], \"invite_or_request_id\" : \"383791336903426391\", \"message\" : \"You hit the maximum number of pending invites allowed.\" }, \"invite\" : { \"id\" : \"383791336903426391\", \"user\" : \"{}\" } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /businesses/{business_id}/members : Terminate business memberships
     * Terminate memberships between the specified members and your business.
     *
     * @param businessId Business id (required)
     * @param membersToDeleteBody List of members with role to delete. (required)
     * @return Success (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "deleteBusinessMembership",
        summary = "Terminate business memberships",
        description = "Terminate memberships between the specified members and your business.",
        tags = { "business_access_relationships" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeletedMembersResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "biz_access:read", "biz_access:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/businesses/{business_id}/members",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DeletedMembersResponse> deleteBusinessMembership(
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "business_id", description = "Business id", required = true, in = ParameterIn.PATH) @PathVariable("business_id") String businessId,
        @Parameter(name = "MembersToDeleteBody", description = "List of members with role to delete.", required = true) @Valid @RequestBody MembersToDeleteBody membersToDeleteBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"deleted_members\" : [ \"809944451643622187\", \"383791336903426391\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /businesses/{business_id}/partners : Terminate business partnerships
     * Terminate partnerships between the specified partners and your business. Note: You may only batch terminate partners of the same partner type.
     *
     * @param businessId Unique identifier of the requesting business. (required)
     * @param deletePartnersRequest An object containing a \&quot;partner_ids\&quot; property composed of a list of partner IDs and a \&quot;partners_type\&quot; property specifying the type of partners to delete.  (required)
     * @return Success (status code 200)
     *         or A supplied partner id doesn&#39;t exist (status code 404)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "deleteBusinessPartners",
        summary = "Terminate business partnerships",
        description = "Terminate partnerships between the specified partners and your business. Note: You may only batch terminate partners of the same partner type.",
        tags = { "business_access_relationships" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeletePartnersResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "A supplied partner id doesn't exist", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "biz_access:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/businesses/{business_id}/partners",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DeletePartnersResponse> deleteBusinessPartners(
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "business_id", description = "Unique identifier of the requesting business.", required = true, in = ParameterIn.PATH) @PathVariable("business_id") String businessId,
        @Parameter(name = "DeletePartnersRequest", description = "An object containing a \"partner_ids\" property composed of a list of partner IDs and a \"partners_type\" property specifying the type of partners to delete. ", required = true) @Valid @RequestBody DeletePartnersRequest deletePartnersRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"deleted_partners\" : [ \"809944451643622187\", \"383791336903426391\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /businesses/{business_id}/partners/assets : Delete partner access to asset
     * Terminate multiple partners&#39; access to an asset. If - partner_type&#x3D;INTERNAL: You will terminate a partner&#39;s asset access to your business assets. - partner_type&#x3D;EXTERNAL: You will terminate your own access to your partner&#39;s business assets.
     *
     * @param businessId Unique identifier of the requesting business. (required)
     * @param deletePartnerAssetAccessBody  (required)
     * @return Success (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "deletePartnerAssetAccessHandlerImpl",
        summary = "Delete partner access to asset",
        description = "Terminate multiple partners' access to an asset. If - partner_type=INTERNAL: You will terminate a partner's asset access to your business assets. - partner_type=EXTERNAL: You will terminate your own access to your partner's business assets.",
        tags = { "business_access_assets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeletePartnerAssetsResultsResponseArray.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "biz_access:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/businesses/{business_id}/partners/assets",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DeletePartnerAssetsResultsResponseArray> deletePartnerAssetAccessHandlerImpl(
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "business_id", description = "Unique identifier of the requesting business.", required = true, in = ParameterIn.PATH) @PathVariable("business_id") String businessId,
        @Parameter(name = "DeletePartnerAssetAccessBody", description = "", required = true) @Valid @RequestBody DeletePartnerAssetAccessBody deletePartnerAssetAccessBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"items\" : [ { \"partner_id\" : \"140943737684417\", \"permissions\" : [ \"FINANCE_MANAGER\", \"CATALOGS_MANAGER\", \"AUDIENCE_MANAGER\" ], \"is_shared_partner\" : false, \"asset_type\" : \"AD_ACCOUNT\", \"asset_id\" : \"549755885175\" }, { \"partner_id\" : \"140943737684417\", \"permissions\" : [ \"FINANCE_MANAGER\", \"CATALOGS_MANAGER\", \"AUDIENCE_MANAGER\" ], \"is_shared_partner\" : false, \"asset_type\" : \"AD_ACCOUNT\", \"asset_id\" : \"549755885175\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /businesses/employers : List business employers for user
     * Get all of the viewing user&#39;s business employers.
     *
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @return Success (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getBusinessEmployers",
        summary = "List business employers for user",
        description = "Get all of the viewing user's business employers.",
        tags = { "business_access_relationships" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetBusinessEmployers200Response.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "biz_access:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/businesses/employers",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GetBusinessEmployers200Response> getBusinessEmployers(
        @Min(1) @Max(250) @Parameter(name = "page_size", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "25") Integer pageSize,
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", in = ParameterIn.QUERY) @Valid @RequestParam(value = "bookmark", required = false) String bookmark
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"bookmark\" : \"bookmark\", \"items\" : [ { \"created_time\" : 1646767577816, \"assets_summary\" : \"{}\", \"business_roles\" : [ \"BIZ_ADMIN\" ], \"is_shared_partner\" : false, \"created_by_business\" : \"{}\", \"id\" : \"383791336903426391\", \"user\" : \"{}\", \"created_by_user\" : \"{}\" }, { \"created_time\" : 1646767577816, \"assets_summary\" : \"{}\", \"business_roles\" : [ \"BIZ_ADMIN\" ], \"is_shared_partner\" : false, \"created_by_business\" : \"{}\", \"id\" : \"383791336903426391\", \"user\" : \"{}\", \"created_by_user\" : \"{}\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /businesses/{business_id}/members : Get business members
     * Get all members of the specified business. The return response will include the member&#39;s business_role and assets they have access to if assets_summary&#x3D;TRUE
     *
     * @param businessId Unique identifier of the requesting business. (required)
     * @param assetsSummary Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are (optional, default to false)
     * @param businessRoles A list of business roles to filter the members by. Only members whose roles are in the specified roles will be returned. (optional)
     * @param memberIds A list of business members ids separated by comma. (optional)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return Success (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getBusinessMembers",
        summary = "Get business members",
        description = "Get all members of the specified business. The return response will include the member's business_role and assets they have access to if assets_summary=TRUE",
        tags = { "business_access_relationships" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetBusinessMembers200Response.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "biz_access:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/businesses/{business_id}/members",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GetBusinessMembers200Response> getBusinessMembers(
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "business_id", description = "Unique identifier of the requesting business.", required = true, in = ParameterIn.PATH) @PathVariable("business_id") String businessId,
        @Parameter(name = "assets_summary", description = "Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are", in = ParameterIn.QUERY) @Valid @RequestParam(value = "assets_summary", required = false, defaultValue = "false") Boolean assetsSummary,
        @Parameter(name = "business_roles", description = "A list of business roles to filter the members by. Only members whose roles are in the specified roles will be returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "business_roles", required = false) List<MemberBusinessRole> businessRoles,
        @Size(max = 500) @Parameter(name = "member_ids", description = "A list of business members ids separated by comma.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "member_ids", required = false) String memberIds,
        @Min(0) @Parameter(name = "start_index", description = "An index to start fetching the results from. Only the results starting from this index will be returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "start_index", required = false, defaultValue = "0") Integer startIndex,
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", in = ParameterIn.QUERY) @Valid @RequestParam(value = "bookmark", required = false) String bookmark,
        @Min(1) @Max(250) @Parameter(name = "page_size", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "25") Integer pageSize
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"bookmark\" : \"bookmark\", \"items\" : [ { \"created_time\" : 1646767577816, \"assets_summary\" : \"{}\", \"business_roles\" : [ \"BIZ_ADMIN\" ], \"is_shared_partner\" : false, \"created_by_business\" : \"{}\", \"id\" : \"383791336903426391\", \"user\" : \"{}\", \"created_by_user\" : \"{}\" }, { \"created_time\" : 1646767577816, \"assets_summary\" : \"{}\", \"business_roles\" : [ \"BIZ_ADMIN\" ], \"is_shared_partner\" : false, \"created_by_business\" : \"{}\", \"id\" : \"383791336903426391\", \"user\" : \"{}\", \"created_by_user\" : \"{}\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /businesses/{business_id}/partners : Get business partners
     * Get all partners of the specified business.  If the assets_summary&#x3D;TRUE and: - partner_type&#x3D;INTERNAL, the business assets returned are your business assets the partner has access to. - partner_type&#x3D;EXTERNAL, the business assets returned are your partner&#39;s business assets the partner has granted you   access to.
     *
     * @param businessId Unique identifier of the requesting business. (required)
     * @param assetsSummary Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are (optional, default to false)
     * @param partnerType Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset. (optional)
     * @param partnerIds A list of business partner ids separated by commas used to filter the results. Only partners with the specified ids will be returned. (optional)
     * @param startIndex An index to start fetching the results from. Only the results starting from this index will be returned. (optional, default to 0)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @return Success (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getBusinessPartners",
        summary = "Get business partners",
        description = "Get all partners of the specified business.  If the assets_summary=TRUE and: - partner_type=INTERNAL, the business assets returned are your business assets the partner has access to. - partner_type=EXTERNAL, the business assets returned are your partner's business assets the partner has granted you   access to.",
        tags = { "business_access_relationships" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetBusinessPartners200Response.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "biz_access:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/businesses/{business_id}/partners",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GetBusinessPartners200Response> getBusinessPartners(
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "business_id", description = "Unique identifier of the requesting business.", required = true, in = ParameterIn.PATH) @PathVariable("business_id") String businessId,
        @Parameter(name = "assets_summary", description = "Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are", in = ParameterIn.QUERY) @Valid @RequestParam(value = "assets_summary", required = false, defaultValue = "false") Boolean assetsSummary,
        @Parameter(name = "partner_type", description = "Specifies whether to fetch internal or external (shared) partners. If partner_type=INTERNAL, the asset being queried is for accesses the partner has to your business assets.<br> If partner_type=EXTERNAL, the asset being queried is for the accesses you have to the partner's business asset.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "partner_type", required = false) PartnerType partnerType,
        @Size(max = 500) @Parameter(name = "partner_ids", description = "A list of business partner ids separated by commas used to filter the results. Only partners with the specified ids will be returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "partner_ids", required = false) String partnerIds,
        @Min(0) @Parameter(name = "start_index", description = "An index to start fetching the results from. Only the results starting from this index will be returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "start_index", required = false, defaultValue = "0") Integer startIndex,
        @Min(1) @Max(250) @Parameter(name = "page_size", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "25") Integer pageSize,
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", in = ParameterIn.QUERY) @Valid @RequestParam(value = "bookmark", required = false) String bookmark
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"bookmark\" : \"bookmark\", \"items\" : [ { \"created_time\" : 1646767577816, \"assets_summary\" : \"{}\", \"business_roles\" : [ \"BIZ_ADMIN\" ], \"is_shared_partner\" : false, \"created_by_business\" : \"{}\", \"id\" : \"383791336903426391\", \"user\" : \"{}\", \"created_by_user\" : \"{}\" }, { \"created_time\" : 1646767577816, \"assets_summary\" : \"{}\", \"business_roles\" : [ \"BIZ_ADMIN\" ], \"is_shared_partner\" : false, \"created_by_business\" : \"{}\", \"id\" : \"383791336903426391\", \"user\" : \"{}\", \"created_by_user\" : \"{}\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /businesses/{business_id}/invites : Get invites/requests
     * Get the membership/partnership invites and/or requests for the authorized user.
     *
     * @param businessId Unique identifier of the requesting business. (required)
     * @param isMember A boolean field to indicate whether the invite is to create a partnership or a membership. (optional, default to true)
     * @param inviteStatus A list of invite statuses to filter invites by. Only invites whose status is in the provided statuses will be returned. (optional)
     * @param inviteType Invite type to filter invites by. Only invites of the specified type will be returned. (optional)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return Success (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getInvites",
        summary = "Get invites/requests",
        description = "Get the membership/partnership invites and/or requests for the authorized user.",
        tags = { "business_access_invite" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetInvites200Response.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "biz_access:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/businesses/{business_id}/invites",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GetInvites200Response> getInvites(
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "business_id", description = "Unique identifier of the requesting business.", required = true, in = ParameterIn.PATH) @PathVariable("business_id") String businessId,
        @Parameter(name = "is_member", description = "A boolean field to indicate whether the invite is to create a partnership or a membership.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "is_member", required = false, defaultValue = "true") Boolean isMember,
        @Size(min = 1) @Parameter(name = "invite_status", description = "A list of invite statuses to filter invites by. Only invites whose status is in the provided statuses will be returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "invite_status", required = false) List<String> inviteStatus,
        @Parameter(name = "invite_type", description = "Invite type to filter invites by. Only invites of the specified type will be returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "invite_type", required = false) InviteType inviteType,
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", in = ParameterIn.QUERY) @Valid @RequestParam(value = "bookmark", required = false) String bookmark,
        @Min(1) @Max(250) @Parameter(name = "page_size", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "25") Integer pageSize
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"bookmark\" : \"bookmark\", \"items\" : [ { \"created_time\" : 1646767577816, \"assets_summary\" : { \"ad_accounts\" : [ { \"permissions\" : [ \"FINANCE_MANAGER\", \"CATALOGS_MANAGER\", \"AUDIENCE_MANAGER\" ], \"id\" : \"549755885175\" }, { \"permissions\" : [ \"FINANCE_MANAGER\", \"CATALOGS_MANAGER\", \"AUDIENCE_MANAGER\" ], \"id\" : \"549755885175\" } ], \"profiles\" : [ { \"permissions\" : [ \"FINANCE_MANAGER\", \"CATALOGS_MANAGER\", \"AUDIENCE_MANAGER\" ], \"id\" : \"383791336903426391\" }, { \"permissions\" : [ \"FINANCE_MANAGER\", \"CATALOGS_MANAGER\", \"AUDIENCE_MANAGER\" ], \"id\" : \"383791336903426391\" } ] }, \"business_roles\" : [ \"BIZ_ADMIN\" ], \"created_by_business\" : \"{}\", \"created_by_user\" : \"{}\" }, { \"created_time\" : 1646767577816, \"assets_summary\" : { \"ad_accounts\" : [ { \"permissions\" : [ \"FINANCE_MANAGER\", \"CATALOGS_MANAGER\", \"AUDIENCE_MANAGER\" ], \"id\" : \"549755885175\" }, { \"permissions\" : [ \"FINANCE_MANAGER\", \"CATALOGS_MANAGER\", \"AUDIENCE_MANAGER\" ], \"id\" : \"549755885175\" } ], \"profiles\" : [ { \"permissions\" : [ \"FINANCE_MANAGER\", \"CATALOGS_MANAGER\", \"AUDIENCE_MANAGER\" ], \"id\" : \"383791336903426391\" }, { \"permissions\" : [ \"FINANCE_MANAGER\", \"CATALOGS_MANAGER\", \"AUDIENCE_MANAGER\" ], \"id\" : \"383791336903426391\" } ] }, \"business_roles\" : [ \"BIZ_ADMIN\" ], \"created_by_business\" : \"{}\", \"created_by_user\" : \"{}\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /businesses/invites : Accept or decline an invite/request
     * Accept or decline invites or requests.
     *
     * @param authRespondInvitesBody  (required)
     * @return Success (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "respondBusinessAccessInvites",
        summary = "Accept or decline an invite/request",
        description = "Accept or decline invites or requests.",
        tags = { "business_access_invite" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RespondToInvitesResponseArray.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "biz_access:read", "biz_access:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/businesses/invites",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<RespondToInvitesResponseArray> respondBusinessAccessInvites(
        @Parameter(name = "AuthRespondInvitesBody", description = "", required = true) @Valid @RequestBody AuthRespondInvitesBody authRespondInvitesBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"items\" : [ { \"exception\" : { \"code\" : 403, \"users_or_partner_ids\" : [ \"businessMember0101\", \"business+member@business.com\" ], \"invite_or_request_id\" : \"383791336903426391\", \"message\" : \"You hit the maximum number of pending invites allowed.\" }, \"invite\" : { \"invite_data\" : { \"invite_type\" : \"MEMBER_INVITE\", \"sent_at\" : 1646767577816, \"last_updated_time\" : 1646767577816, \"invite_expiration\" : 1709748104775, \"invite_status\" : \"PENDING\" }, \"id\" : \"383791336903426391\", \"user\" : \"{}\", \"is_received_invite\" : true } }, { \"exception\" : { \"code\" : 403, \"users_or_partner_ids\" : [ \"businessMember0101\", \"business+member@business.com\" ], \"invite_or_request_id\" : \"383791336903426391\", \"message\" : \"You hit the maximum number of pending invites allowed.\" }, \"invite\" : { \"invite_data\" : { \"invite_type\" : \"MEMBER_INVITE\", \"sent_at\" : 1646767577816, \"last_updated_time\" : 1646767577816, \"invite_expiration\" : 1709748104775, \"invite_status\" : \"PENDING\" }, \"id\" : \"383791336903426391\", \"user\" : \"{}\", \"is_received_invite\" : true } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /businesses/{business_id}/audiences : List received audiences for a business
     * Get a list of received audiences for the given business.
     *
     * @param businessId Unique identifier of the requesting business. (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return Success (status code 200)
     *         or Invalid parameters. (status code 400)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "sharedAudiencesForBusinessList",
        summary = "List received audiences for a business",
        description = "Get a list of received audiences for the given business.",
        tags = { "audience_sharing" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AudiencesList200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "biz_access:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/businesses/{business_id}/audiences",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AudiencesList200Response> sharedAudiencesForBusinessList(
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "business_id", description = "Unique identifier of the requesting business.", required = true, in = ParameterIn.PATH) @PathVariable("business_id") String businessId,
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", in = ParameterIn.QUERY) @Valid @RequestParam(value = "bookmark", required = false) String bookmark,
        @Parameter(name = "order", description = "The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "order", required = false) String order,
        @Min(1) @Max(250) @Parameter(name = "page_size", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "25") Integer pageSize
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"bookmark\" : \"bookmark\", \"items\" : [ { \"size\" : 1000, \"audience_type\" : \"audience_type\", \"updated_timestamp\" : 1451431341, \"name\" : \"ACME Tools\", \"description\" : \"People who love making quilts.\", \"rule\" : { \"country\" : \"US\", \"visitor_source_id\" : \"549755885175\", \"prefill\" : true, \"customer_list_id\" : \"5497558859876\", \"event_source\" : { \"=\" : [ \"web\", \"mobile\" ] }, \"objective_type\" : [ \"AWARENESS\" ], \"event_data\" : { \"video_title\" : \"How to style your Parker Boots\", \"page_name\" : \"Our Favorite Pins on Pinterest.\", \"order_quantity\" : 1, \"property\" : \"Athleta\", \"currency\" : \"USD\", \"lead_type\" : \"Newsletter\", \"promo_code\" : \"WINTER10\", \"line_items\" : { \"product_id\" : 1414, \"product_variant\" : \"Red\", \"product_brand\" : \"Parker\", \"product_price\" : \"99.99\", \"product_variant_id\" : \"1414-34832\", \"product_name\" : \"Parker Boots\", \"product_category\" : \"Shoes\", \"product_quantity\" : 2 }, \"search_query\" : \"boots\", \"order_id\" : \"X-151481\", \"value\" : \"199.98\" }, \"seed_id\" : [ \"2542620639259\", \"2542620639261\" ], \"url\" : [ \"url\", \"url\" ], \"ad_account_id\" : \"549755885175\", \"ingestion_source\" : { \"=\" : [ \"tag\" ] }, \"ad_id\" : [ \"687201361754\" ], \"retention_days\" : 30, \"engager_type\" : 1, \"engagement_type\" : \"click\", \"percentage\" : 3, \"engagement_domain\" : [ \"www.somedomain.com\" ], \"event\" : \"checkout\", \"pin_id\" : [ \"34567\" ], \"campaign_id\" : [ \"626744528398\" ] }, \"created_timestamp\" : 1451431341, \"id\" : \"1234\", \"type\" : \"audience\", \"ad_account_id\" : \"549755885175\", \"status\" : \"status\" }, { \"size\" : 1000, \"audience_type\" : \"audience_type\", \"updated_timestamp\" : 1451431341, \"name\" : \"ACME Tools\", \"description\" : \"People who love making quilts.\", \"rule\" : { \"country\" : \"US\", \"visitor_source_id\" : \"549755885175\", \"prefill\" : true, \"customer_list_id\" : \"5497558859876\", \"event_source\" : { \"=\" : [ \"web\", \"mobile\" ] }, \"objective_type\" : [ \"AWARENESS\" ], \"event_data\" : { \"video_title\" : \"How to style your Parker Boots\", \"page_name\" : \"Our Favorite Pins on Pinterest.\", \"order_quantity\" : 1, \"property\" : \"Athleta\", \"currency\" : \"USD\", \"lead_type\" : \"Newsletter\", \"promo_code\" : \"WINTER10\", \"line_items\" : { \"product_id\" : 1414, \"product_variant\" : \"Red\", \"product_brand\" : \"Parker\", \"product_price\" : \"99.99\", \"product_variant_id\" : \"1414-34832\", \"product_name\" : \"Parker Boots\", \"product_category\" : \"Shoes\", \"product_quantity\" : 2 }, \"search_query\" : \"boots\", \"order_id\" : \"X-151481\", \"value\" : \"199.98\" }, \"seed_id\" : [ \"2542620639259\", \"2542620639261\" ], \"url\" : [ \"url\", \"url\" ], \"ad_account_id\" : \"549755885175\", \"ingestion_source\" : { \"=\" : [ \"tag\" ] }, \"ad_id\" : [ \"687201361754\" ], \"retention_days\" : 30, \"engager_type\" : 1, \"engagement_type\" : \"click\", \"percentage\" : 3, \"engagement_domain\" : [ \"www.somedomain.com\" ], \"event\" : \"checkout\", \"pin_id\" : [ \"34567\" ], \"campaign_id\" : [ \"626744528398\" ] }, \"created_timestamp\" : 1451431341, \"id\" : \"1234\", \"type\" : \"audience\", \"ad_account_id\" : \"549755885175\", \"status\" : \"status\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /businesses/{business_id}/members : Update member&#39;s business role
     * Update a member&#39;s business role within the business.
     *
     * @param businessId Business id (required)
     * @param updateMemberBusinessRoleBody List of objects with the member id and the business_role. (required)
     * @return response (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "updateBusinessMemberships",
        summary = "Update member's business role",
        description = "Update a member's business role within the business.",
        tags = { "business_access_relationships" },
        responses = {
            @ApiResponse(responseCode = "200", description = "response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateMemberResultsResponseArray.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "biz_access:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/businesses/{business_id}/members",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UpdateMemberResultsResponseArray> updateBusinessMemberships(
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "business_id", description = "Business id", required = true, in = ParameterIn.PATH) @PathVariable("business_id") String businessId,
        @Parameter(name = "UpdateMemberBusinessRoleBody", description = "List of objects with the member id and the business_role.", required = true) @Valid@Size(min = 1)  @RequestBody List<@Valid UpdateMemberBusinessRoleBody> updateMemberBusinessRoleBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"items\" : [ { \"member_id\" : \"140943737684417\", \"business_role\" : \"EMPLOYEE\" }, { \"member_id\" : \"140943737684417\", \"business_role\" : \"EMPLOYEE\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /businesses/{business_id}/audiences/ad_accounts/shared : Update audience sharing from a business to ad accounts
     * From a business, share a specific audience with other ad account(s), or revoke access to a previously shared audience. &lt;ul&gt; &lt;li&gt;If the business is the owner of the audience, it can share with any ad account within the same business hierarchy.&lt;/li&gt; &lt;li&gt;If the business is the recipient of the audience, it can share with any of its owned ad accounts.&lt;/li&gt; &lt;/ul&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
     *
     * @param businessId Unique identifier of the requesting business. (required)
     * @param sharedAudience  (required)
     * @return Success (status code 200)
     *         or Invalid parameters. (status code 400)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "updateBusinessToAdAccountSharedAudience",
        summary = "Update audience sharing from a business to ad accounts",
        description = "From a business, share a specific audience with other ad account(s), or revoke access to a previously shared audience. <ul> <li>If the business is the owner of the audience, it can share with any ad account within the same business hierarchy.</li> <li>If the business is the recipient of the audience, it can share with any of its owned ad accounts.</li> </ul> This endpoint is not available to all apps.<a href='/docs/getting-started/beta-and-advanced-access/'>Learn more</a>.",
        tags = { "audience_sharing" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SharedAudienceResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "biz_access:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/businesses/{business_id}/audiences/ad_accounts/shared",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<SharedAudienceResponse> updateBusinessToAdAccountSharedAudience(
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "business_id", description = "Unique identifier of the requesting business.", required = true, in = ParameterIn.PATH) @PathVariable("business_id") String businessId,
        @Parameter(name = "SharedAudience", description = "", required = true) @Valid @RequestBody SharedAudience sharedAudience
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"recipient_account_ids\" : [ \"549755885175\" ], \"permissions\" : [ \"RESOURCE_PINNER_LIST_READER\", \"RESOURCE_PINNER_LIST_OWNER\" ], \"audience_id\" : \"2542621871096\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /businesses/{business_id}/audiences/businesses/shared : Update audience sharing between businesses
     * From a business, share a specific audience with another business account, or revoke access to a previously shared audience. Only the audience owner can share the audience with other businesses, and the recipient business must be within the same business hierarchy.&lt;br&gt; This endpoint is not available to all apps.&lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.
     *
     * @param businessId Unique identifier of the requesting business. (required)
     * @param businessSharedAudience  (required)
     * @return Success (status code 200)
     *         or Invalid parameters. (status code 400)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "updateBusinessToBusinessSharedAudience",
        summary = "Update audience sharing between businesses",
        description = "From a business, share a specific audience with another business account, or revoke access to a previously shared audience. Only the audience owner can share the audience with other businesses, and the recipient business must be within the same business hierarchy.<br> This endpoint is not available to all apps.<a href='/docs/getting-started/beta-and-advanced-access/'>Learn more</a>.",
        tags = { "audience_sharing" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BusinessSharedAudienceResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "biz_access:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/businesses/{business_id}/audiences/businesses/shared",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<BusinessSharedAudienceResponse> updateBusinessToBusinessSharedAudience(
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "business_id", description = "Unique identifier of the requesting business.", required = true, in = ParameterIn.PATH) @PathVariable("business_id") String businessId,
        @Parameter(name = "BusinessSharedAudience", description = "", required = true) @Valid @RequestBody BusinessSharedAudience businessSharedAudience
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"recipient_business_ids\" : [ \"549755885175\" ], \"permissions\" : [ \"RESOURCE_PINNER_LIST_READER\", \"RESOURCE_PINNER_LIST_OWNER\" ], \"audience_id\" : \"2542621871096\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /businesses/{business_id}/partners/assets : Assign/Update partner asset permissions
     * Grant multiple partners access to assets and/or update multiple partner&#39;s exisiting permissions to an asset. If your partner already had permissions on the asset, they will be overriden with the new permissions you assign to them. To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview  Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE.
     *
     * @param businessId Unique identifier of the requesting business. (required)
     * @param updatePartnerAssetAccessBody A list of assets and permissions to assign to your partners. (required)
     * @return Success (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "updatePartnerAssetAccessHandlerImpl",
        summary = "Assign/Update partner asset permissions",
        description = "Grant multiple partners access to assets and/or update multiple partner's exisiting permissions to an asset. If your partner already had permissions on the asset, they will be overriden with the new permissions you assign to them. To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview  Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE.",
        tags = { "business_access_assets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdatePartnerAssetsResultsResponseArray.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "biz_access:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/businesses/{business_id}/partners/assets",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UpdatePartnerAssetsResultsResponseArray> updatePartnerAssetAccessHandlerImpl(
        @Pattern(regexp = "^\\d+$") @Size(min = 1, max = 20) @Parameter(name = "business_id", description = "Unique identifier of the requesting business.", required = true, in = ParameterIn.PATH) @PathVariable("business_id") String businessId,
        @Parameter(name = "UpdatePartnerAssetAccessBody", description = "A list of assets and permissions to assign to your partners.", required = true) @Valid @RequestBody UpdatePartnerAssetAccessBody updatePartnerAssetAccessBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"items\" : [ { \"partner_id\" : \"140943737684417\", \"permissions\" : [ \"FINANCE_MANAGER\", \"CATALOGS_MANAGER\", \"AUDIENCE_MANAGER\" ], \"asset_type\" : \"AD_ACCOUNT\", \"asset_id\" : \"549755885175\" }, { \"partner_id\" : \"140943737684417\", \"permissions\" : [ \"FINANCE_MANAGER\", \"CATALOGS_MANAGER\", \"AUDIENCE_MANAGER\" ], \"asset_type\" : \"AD_ACCOUNT\", \"asset_id\" : \"549755885175\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
