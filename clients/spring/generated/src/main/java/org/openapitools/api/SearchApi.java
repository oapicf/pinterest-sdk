/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Error;
import org.openapitools.model.PinsList200Response;
import org.openapitools.model.SearchPartnerPins200Response;
import org.openapitools.model.SearchUserBoardsGet200Response;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-05T03:06:09.428113339Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "search", description = "Search for Pins and boards owned by the current user.")
public interface SearchApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /search/partner/pins : Search pins by a given search term
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/getting-started/beta-and-advanced-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get the top 10 Pins by a given search term.
     *
     * @param term Search term to look up pins. (required)
     * @param countryCode Two letter country code (ISO 3166-1 alpha-2) (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param locale Search locale. (optional)
     * @param limit Max search result size (optional, default to 10)
     * @return Success (status code 200)
     *         or Invalid pins (status code 400)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "searchPartnerPins",
        summary = "Search pins by a given search term",
        description = "<strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/getting-started/beta-and-advanced-access/'>Learn more</a>.</strong>  Get the top 10 Pins by a given search term.",
        tags = { "search" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SearchPartnerPins200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid pins", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "boards:read", "pins:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/search/partner/pins",
        produces = { "application/json" }
    )
    
    default ResponseEntity<SearchPartnerPins200Response> searchPartnerPins(
        @NotNull @Parameter(name = "term", description = "Search term to look up pins.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "term", required = true) String term,
        @NotNull @Parameter(name = "country_code", description = "Two letter country code (ISO 3166-1 alpha-2)", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "country_code", required = true) String countryCode,
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", in = ParameterIn.QUERY) @Valid @RequestParam(value = "bookmark", required = false) String bookmark,
        @Parameter(name = "locale", description = "Search locale.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "locale", required = false) String locale,
        @Min(1) @Max(50) @Parameter(name = "limit", description = "Max search result size", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "10") Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"bookmark\" : \"bookmark\", \"items\" : [ { \"alt_text\" : \"alt_text\", \"link\" : \"https://www.pinterest.com/\", \"description\" : \"description\", \"media\" : \"{}\", \"title\" : \"title\" }, { \"alt_text\" : \"alt_text\", \"link\" : \"https://www.pinterest.com/\", \"description\" : \"description\", \"media\" : \"{}\", \"title\" : \"title\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /search/boards : Search user&#39;s boards
     * Search for boards for the \&quot;operation user_account\&quot;. This includes boards of all board types. - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/getting-started/using-business-access/&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
     *
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param query Search query. Can contain pin description keywords or comma-separated pin IDs. (optional)
     * @return response (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "searchUserBoardsGet",
        summary = "Search user's boards",
        description = "Search for boards for the \"operation user_account\". This includes boards of all board types. - By default, the \"operation user_account\" is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". See <a href='/docs/getting-started/using-business-access/'>Understanding Business Access</a> for more information.",
        tags = { "search" },
        responses = {
            @ApiResponse(responseCode = "200", description = "response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SearchUserBoardsGet200Response.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "boards:read", "boards:read_secret" }),
            @SecurityRequirement(name = "client_credentials", scopes={ "boards:read", "boards:read_secret" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/search/boards",
        produces = { "application/json" }
    )
    
    default ResponseEntity<SearchUserBoardsGet200Response> searchUserBoardsGet(
        @Pattern(regexp = "^\\d+$") @Size(max = 18) @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId,
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", in = ParameterIn.QUERY) @Valid @RequestParam(value = "bookmark", required = false) String bookmark,
        @Min(1) @Max(250) @Parameter(name = "page_size", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "25") Integer pageSize,
        @Parameter(name = "query", description = "Search query. Can contain pin description keywords or comma-separated pin IDs.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "query", required = false) String query
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"bookmark\" : \"bookmark\", \"items\" : [ { \"owner\" : \"{}\", \"board_pins_modified_at\" : \"2020-01-01T20:10:40Z\", \"name\" : \"Summer Recipes\", \"pin_count\" : 5, \"created_at\" : \"2020-01-01T20:10:40Z\", \"description\" : \"My favorite summer recipes\", \"collaborator_count\" : 17, \"privacy\" : \"PUBLIC\", \"id\" : \"549755885175\", \"media\" : { \"pin_thumbnail_urls\" : [ \"https://i.pinimg.com/150x150/b4/57/10/b45710f1ede96af55230f4b43935c4af.jpg\", \"https://i.pinimg.com/150x150/dd/ff/46/ddff4616e39c1935cd05738794fa860e.jpg\", \"https://i.pinimg.com/150x150/84/ac/59/84ac59b670ccb5b903dace480a98930c.jpg\", \"https://i.pinimg.com/150x150/4c/54/6f/4c546f521be85e30838fb742bfff6936.jpg\" ], \"image_cover_url\" : \"https://i.pinimg.com/400x300/fd/cd/d5/fdcdd5a6d8a80824add0d054125cd957.jpg\" }, \"follower_count\" : 13 }, { \"owner\" : \"{}\", \"board_pins_modified_at\" : \"2020-01-01T20:10:40Z\", \"name\" : \"Summer Recipes\", \"pin_count\" : 5, \"created_at\" : \"2020-01-01T20:10:40Z\", \"description\" : \"My favorite summer recipes\", \"collaborator_count\" : 17, \"privacy\" : \"PUBLIC\", \"id\" : \"549755885175\", \"media\" : { \"pin_thumbnail_urls\" : [ \"https://i.pinimg.com/150x150/b4/57/10/b45710f1ede96af55230f4b43935c4af.jpg\", \"https://i.pinimg.com/150x150/dd/ff/46/ddff4616e39c1935cd05738794fa860e.jpg\", \"https://i.pinimg.com/150x150/84/ac/59/84ac59b670ccb5b903dace480a98930c.jpg\", \"https://i.pinimg.com/150x150/4c/54/6f/4c546f521be85e30838fb742bfff6936.jpg\" ], \"image_cover_url\" : \"https://i.pinimg.com/400x300/fd/cd/d5/fdcdd5a6d8a80824add0d054125cd957.jpg\" }, \"follower_count\" : 13 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /search/pins : Search user&#39;s Pins
     * Search for pins for the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/getting-started/using-business-access/&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
     *
     * @param query Search query. Can contain pin description keywords or comma-separated pin IDs. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @return Success (status code 200)
     *         or User not found (status code 404)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "searchUserPinsList",
        summary = "Search user's Pins",
        description = "Search for pins for the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". See <a href='/docs/getting-started/using-business-access/'>Understanding Business Access</a> for more information.",
        tags = { "search" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PinsList200Response.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "boards:read", "boards:read_secret", "pins:read", "pins:read_secret" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/search/pins",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PinsList200Response> searchUserPinsList(
        @NotNull @Parameter(name = "query", description = "Search query. Can contain pin description keywords or comma-separated pin IDs.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "query", required = true) String query,
        @Pattern(regexp = "^\\d+$") @Size(max = 18) @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId,
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", in = ParameterIn.QUERY) @Valid @RequestParam(value = "bookmark", required = false) String bookmark
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"bookmark\" : \"bookmark\", \"items\" : [ { \"note\" : \"note\", \"board_owner\" : \"{}\", \"media_source\" : \"{}\", \"pin_metrics\" : { \"90d\" : { \"pin_click\" : 7, \"impression\" : 2, \"clickthrough\" : 3 }, \"lifetime_metrics\" : { \"pin_click\" : 7, \"impression\" : 2, \"clickthrough\" : 3, \"reaction\" : 10, \"comment\" : 2 } }, \"is_owner\" : true, \"link\" : \"https://www.pinterest.com/\", \"created_at\" : \"2020-01-01T20:10:40Z\", \"description\" : \"description\", \"has_been_promoted\" : true, \"media\" : \"{}\", \"title\" : \"title\", \"board_section_id\" : \"board_section_id\", \"dominant_color\" : \"#6E7874\", \"alt_text\" : \"alt_text\", \"board_id\" : \"board_id\", \"creative_type\" : \"creative_type\", \"parent_pin_id\" : \"parent_pin_id\", \"id\" : \"813744226420795884\", \"is_standard\" : true }, { \"note\" : \"note\", \"board_owner\" : \"{}\", \"media_source\" : \"{}\", \"pin_metrics\" : { \"90d\" : { \"pin_click\" : 7, \"impression\" : 2, \"clickthrough\" : 3 }, \"lifetime_metrics\" : { \"pin_click\" : 7, \"impression\" : 2, \"clickthrough\" : 3, \"reaction\" : 10, \"comment\" : 2 } }, \"is_owner\" : true, \"link\" : \"https://www.pinterest.com/\", \"created_at\" : \"2020-01-01T20:10:40Z\", \"description\" : \"description\", \"has_been_promoted\" : true, \"media\" : \"{}\", \"title\" : \"title\", \"board_section_id\" : \"board_section_id\", \"dominant_color\" : \"#6E7874\", \"alt_text\" : \"alt_text\", \"board_id\" : \"board_id\", \"creative_type\" : \"creative_type\", \"parent_pin_id\" : \"parent_pin_id\", \"id\" : \"813744226420795884\", \"is_standard\" : true } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
