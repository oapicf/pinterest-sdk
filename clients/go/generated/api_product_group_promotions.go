/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ProductGroupPromotionsAPIService ProductGroupPromotionsAPI service
type ProductGroupPromotionsAPIService service

type ApiProductGroupPromotionsCreateRequest struct {
	ctx context.Context
	ApiService *ProductGroupPromotionsAPIService
	adAccountId string
	productGroupPromotionCreateRequest *ProductGroupPromotionCreateRequest
}

// List of Product Group Promotions to create, size limit [1, 30].
func (r ApiProductGroupPromotionsCreateRequest) ProductGroupPromotionCreateRequest(productGroupPromotionCreateRequest ProductGroupPromotionCreateRequest) ApiProductGroupPromotionsCreateRequest {
	r.productGroupPromotionCreateRequest = &productGroupPromotionCreateRequest
	return r
}

func (r ApiProductGroupPromotionsCreateRequest) Execute() (*ProductGroupPromotionResponse, *http.Response, error) {
	return r.ApiService.ProductGroupPromotionsCreateExecute(r)
}

/*
ProductGroupPromotionsCreate Create product group promotions

Add one or more product groups from your catalog to an existing ad group. (Product groups added to an ad group are a 'product group promotion.')

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param adAccountId Unique identifier of an ad account.
 @return ApiProductGroupPromotionsCreateRequest
*/
func (a *ProductGroupPromotionsAPIService) ProductGroupPromotionsCreate(ctx context.Context, adAccountId string) ApiProductGroupPromotionsCreateRequest {
	return ApiProductGroupPromotionsCreateRequest{
		ApiService: a,
		ctx: ctx,
		adAccountId: adAccountId,
	}
}

// Execute executes the request
//  @return ProductGroupPromotionResponse
func (a *ProductGroupPromotionsAPIService) ProductGroupPromotionsCreateExecute(r ApiProductGroupPromotionsCreateRequest) (*ProductGroupPromotionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProductGroupPromotionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductGroupPromotionsAPIService.ProductGroupPromotionsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ad_accounts/{ad_account_id}/product_group_promotions"
	localVarPath = strings.Replace(localVarPath, "{"+"ad_account_id"+"}", url.PathEscape(parameterValueToString(r.adAccountId, "adAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.adAccountId) > 18 {
		return localVarReturnValue, nil, reportError("adAccountId must have less than 18 elements")
	}
	if r.productGroupPromotionCreateRequest == nil {
		return localVarReturnValue, nil, reportError("productGroupPromotionCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.productGroupPromotionCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProductGroupPromotionsGetRequest struct {
	ctx context.Context
	ApiService *ProductGroupPromotionsAPIService
	adAccountId string
	productGroupPromotionId string
}

func (r ApiProductGroupPromotionsGetRequest) Execute() (*ProductGroupPromotionResponse, *http.Response, error) {
	return r.ApiService.ProductGroupPromotionsGetExecute(r)
}

/*
ProductGroupPromotionsGet Get a product group promotion by id

Get a product group promotion by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param adAccountId Unique identifier of an ad account.
 @param productGroupPromotionId Unique identifier of a product group promotion
 @return ApiProductGroupPromotionsGetRequest
*/
func (a *ProductGroupPromotionsAPIService) ProductGroupPromotionsGet(ctx context.Context, adAccountId string, productGroupPromotionId string) ApiProductGroupPromotionsGetRequest {
	return ApiProductGroupPromotionsGetRequest{
		ApiService: a,
		ctx: ctx,
		adAccountId: adAccountId,
		productGroupPromotionId: productGroupPromotionId,
	}
}

// Execute executes the request
//  @return ProductGroupPromotionResponse
func (a *ProductGroupPromotionsAPIService) ProductGroupPromotionsGetExecute(r ApiProductGroupPromotionsGetRequest) (*ProductGroupPromotionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProductGroupPromotionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductGroupPromotionsAPIService.ProductGroupPromotionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ad_accounts/{ad_account_id}/product_group_promotions/{product_group_promotion_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"ad_account_id"+"}", url.PathEscape(parameterValueToString(r.adAccountId, "adAccountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"product_group_promotion_id"+"}", url.PathEscape(parameterValueToString(r.productGroupPromotionId, "productGroupPromotionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.adAccountId) > 18 {
		return localVarReturnValue, nil, reportError("adAccountId must have less than 18 elements")
	}
	if strlen(r.productGroupPromotionId) > 18 {
		return localVarReturnValue, nil, reportError("productGroupPromotionId must have less than 18 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProductGroupPromotionsListRequest struct {
	ctx context.Context
	ApiService *ProductGroupPromotionsAPIService
	adAccountId string
	productGroupPromotionIds *[]string
	entityStatuses *[]string
	adGroupId *string
	pageSize *int32
	order *string
	bookmark *string
}

// List of Product group promotion Ids.
func (r ApiProductGroupPromotionsListRequest) ProductGroupPromotionIds(productGroupPromotionIds []string) ApiProductGroupPromotionsListRequest {
	r.productGroupPromotionIds = &productGroupPromotionIds
	return r
}

// Entity status
func (r ApiProductGroupPromotionsListRequest) EntityStatuses(entityStatuses []string) ApiProductGroupPromotionsListRequest {
	r.entityStatuses = &entityStatuses
	return r
}

// Ad group Id.
func (r ApiProductGroupPromotionsListRequest) AdGroupId(adGroupId string) ApiProductGroupPromotionsListRequest {
	r.adGroupId = &adGroupId
	return r
}

// Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
func (r ApiProductGroupPromotionsListRequest) PageSize(pageSize int32) ApiProductGroupPromotionsListRequest {
	r.pageSize = &pageSize
	return r
}

// The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
func (r ApiProductGroupPromotionsListRequest) Order(order string) ApiProductGroupPromotionsListRequest {
	r.order = &order
	return r
}

// Cursor used to fetch the next page of items
func (r ApiProductGroupPromotionsListRequest) Bookmark(bookmark string) ApiProductGroupPromotionsListRequest {
	r.bookmark = &bookmark
	return r
}

func (r ApiProductGroupPromotionsListRequest) Execute() (*ProductGroupPromotionsList200Response, *http.Response, error) {
	return r.ApiService.ProductGroupPromotionsListExecute(r)
}

/*
ProductGroupPromotionsList Get product group promotions

List existing product group promotions associated with an ad account.

Include either ad_group_id or product_group_promotion_ids in your request.

<b>Note:</b> ad_group_ids and product_group_promotion_ids are mutually exclusive parameters.
Only provide one. If multiple options are provided, product_group_promotion_ids takes precedence over ad_group_ids. If none are provided, the endpoint returns an error.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param adAccountId Unique identifier of an ad account.
 @return ApiProductGroupPromotionsListRequest
*/
func (a *ProductGroupPromotionsAPIService) ProductGroupPromotionsList(ctx context.Context, adAccountId string) ApiProductGroupPromotionsListRequest {
	return ApiProductGroupPromotionsListRequest{
		ApiService: a,
		ctx: ctx,
		adAccountId: adAccountId,
	}
}

// Execute executes the request
//  @return ProductGroupPromotionsList200Response
func (a *ProductGroupPromotionsAPIService) ProductGroupPromotionsListExecute(r ApiProductGroupPromotionsListRequest) (*ProductGroupPromotionsList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProductGroupPromotionsList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductGroupPromotionsAPIService.ProductGroupPromotionsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ad_accounts/{ad_account_id}/product_group_promotions"
	localVarPath = strings.Replace(localVarPath, "{"+"ad_account_id"+"}", url.PathEscape(parameterValueToString(r.adAccountId, "adAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.adAccountId) > 18 {
		return localVarReturnValue, nil, reportError("adAccountId must have less than 18 elements")
	}

	if r.productGroupPromotionIds != nil {
		t := *r.productGroupPromotionIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "product_group_promotion_ids", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "product_group_promotion_ids", t, "form", "multi")
		}
	}
	if r.entityStatuses != nil {
		t := *r.entityStatuses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "entity_statuses", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "entity_statuses", t, "form", "multi")
		}
	} else {
		var defaultValue []string = ["ACTIVE","PAUSED"]
		r.entityStatuses = &defaultValue
	}
	if r.adGroupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ad_group_id", r.adGroupId, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 25
		r.pageSize = &defaultValue
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "form", "")
	}
	if r.bookmark != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bookmark", r.bookmark, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProductGroupPromotionsUpdateRequest struct {
	ctx context.Context
	ApiService *ProductGroupPromotionsAPIService
	adAccountId string
	productGroupPromotionUpdateRequest *ProductGroupPromotionUpdateRequest
}

// Parameters to update Product group promotions
func (r ApiProductGroupPromotionsUpdateRequest) ProductGroupPromotionUpdateRequest(productGroupPromotionUpdateRequest ProductGroupPromotionUpdateRequest) ApiProductGroupPromotionsUpdateRequest {
	r.productGroupPromotionUpdateRequest = &productGroupPromotionUpdateRequest
	return r
}

func (r ApiProductGroupPromotionsUpdateRequest) Execute() (*ProductGroupPromotionResponse, *http.Response, error) {
	return r.ApiService.ProductGroupPromotionsUpdateExecute(r)
}

/*
ProductGroupPromotionsUpdate Update product group promotions

Update multiple existing Product Group Promotions (by product_group_id)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param adAccountId Unique identifier of an ad account.
 @return ApiProductGroupPromotionsUpdateRequest
*/
func (a *ProductGroupPromotionsAPIService) ProductGroupPromotionsUpdate(ctx context.Context, adAccountId string) ApiProductGroupPromotionsUpdateRequest {
	return ApiProductGroupPromotionsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		adAccountId: adAccountId,
	}
}

// Execute executes the request
//  @return ProductGroupPromotionResponse
func (a *ProductGroupPromotionsAPIService) ProductGroupPromotionsUpdateExecute(r ApiProductGroupPromotionsUpdateRequest) (*ProductGroupPromotionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProductGroupPromotionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductGroupPromotionsAPIService.ProductGroupPromotionsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ad_accounts/{ad_account_id}/product_group_promotions"
	localVarPath = strings.Replace(localVarPath, "{"+"ad_account_id"+"}", url.PathEscape(parameterValueToString(r.adAccountId, "adAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.adAccountId) > 18 {
		return localVarReturnValue, nil, reportError("adAccountId must have less than 18 elements")
	}
	if r.productGroupPromotionUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("productGroupPromotionUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.productGroupPromotionUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProductGroupsAnalyticsRequest struct {
	ctx context.Context
	ApiService *ProductGroupPromotionsAPIService
	adAccountId string
	startDate *string
	endDate *string
	productGroupIds *[]string
	columns *[]string
	granularity *Granularity
	clickWindowDays *int32
	engagementWindowDays *int32
	viewWindowDays *int32
	conversionReportTime *string
}

// Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
func (r ApiProductGroupsAnalyticsRequest) StartDate(startDate string) ApiProductGroupsAnalyticsRequest {
	r.startDate = &startDate
	return r
}

// Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
func (r ApiProductGroupsAnalyticsRequest) EndDate(endDate string) ApiProductGroupsAnalyticsRequest {
	r.endDate = &endDate
	return r
}

// List of Product group Ids to use to filter the results.
func (r ApiProductGroupsAnalyticsRequest) ProductGroupIds(productGroupIds []string) ApiProductGroupsAnalyticsRequest {
	r.productGroupIds = &productGroupIds
	return r
}

// Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
func (r ApiProductGroupsAnalyticsRequest) Columns(columns []string) ApiProductGroupsAnalyticsRequest {
	r.columns = &columns
	return r
}

// TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
func (r ApiProductGroupsAnalyticsRequest) Granularity(granularity Granularity) ApiProductGroupsAnalyticsRequest {
	r.granularity = &granularity
	return r
}

// Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
func (r ApiProductGroupsAnalyticsRequest) ClickWindowDays(clickWindowDays int32) ApiProductGroupsAnalyticsRequest {
	r.clickWindowDays = &clickWindowDays
	return r
}

// Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
func (r ApiProductGroupsAnalyticsRequest) EngagementWindowDays(engagementWindowDays int32) ApiProductGroupsAnalyticsRequest {
	r.engagementWindowDays = &engagementWindowDays
	return r
}

// Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
func (r ApiProductGroupsAnalyticsRequest) ViewWindowDays(viewWindowDays int32) ApiProductGroupsAnalyticsRequest {
	r.viewWindowDays = &viewWindowDays
	return r
}

// The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
func (r ApiProductGroupsAnalyticsRequest) ConversionReportTime(conversionReportTime string) ApiProductGroupsAnalyticsRequest {
	r.conversionReportTime = &conversionReportTime
	return r
}

func (r ApiProductGroupsAnalyticsRequest) Execute() ([]ProductGroupAnalyticsResponseInner, *http.Response, error) {
	return r.ApiService.ProductGroupsAnalyticsExecute(r)
}

/*
ProductGroupsAnalytics Get product group analytics

Get analytics for the specified product groups in the specified <code>ad_account_id</code>, filtered by the specified options.
- The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href="https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts">Business Access</a>: Admin, Analyst, Campaign Manager.
- If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days.
- If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param adAccountId Unique identifier of an ad account.
 @return ApiProductGroupsAnalyticsRequest
*/
func (a *ProductGroupPromotionsAPIService) ProductGroupsAnalytics(ctx context.Context, adAccountId string) ApiProductGroupsAnalyticsRequest {
	return ApiProductGroupsAnalyticsRequest{
		ApiService: a,
		ctx: ctx,
		adAccountId: adAccountId,
	}
}

// Execute executes the request
//  @return []ProductGroupAnalyticsResponseInner
func (a *ProductGroupPromotionsAPIService) ProductGroupsAnalyticsExecute(r ApiProductGroupsAnalyticsRequest) ([]ProductGroupAnalyticsResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProductGroupAnalyticsResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductGroupPromotionsAPIService.ProductGroupsAnalytics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ad_accounts/{ad_account_id}/product_groups/analytics"
	localVarPath = strings.Replace(localVarPath, "{"+"ad_account_id"+"}", url.PathEscape(parameterValueToString(r.adAccountId, "adAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.adAccountId) > 18 {
		return localVarReturnValue, nil, reportError("adAccountId must have less than 18 elements")
	}
	if r.startDate == nil {
		return localVarReturnValue, nil, reportError("startDate is required and must be specified")
	}
	if r.endDate == nil {
		return localVarReturnValue, nil, reportError("endDate is required and must be specified")
	}
	if r.productGroupIds == nil {
		return localVarReturnValue, nil, reportError("productGroupIds is required and must be specified")
	}
	if len(*r.productGroupIds) < 1 {
		return localVarReturnValue, nil, reportError("productGroupIds must have at least 1 elements")
	}
	if len(*r.productGroupIds) > 100 {
		return localVarReturnValue, nil, reportError("productGroupIds must have less than 100 elements")
	}
	if r.columns == nil {
		return localVarReturnValue, nil, reportError("columns is required and must be specified")
	}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "start_date", r.startDate, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "end_date", r.endDate, "form", "")
	{
		t := *r.productGroupIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "product_group_ids", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "product_group_ids", t, "form", "multi")
		}
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "form", "csv")
	parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "form", "")
	if r.clickWindowDays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "click_window_days", r.clickWindowDays, "form", "")
	} else {
		var defaultValue int32 = 30
		r.clickWindowDays = &defaultValue
	}
	if r.engagementWindowDays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "engagement_window_days", r.engagementWindowDays, "form", "")
	} else {
		var defaultValue int32 = 30
		r.engagementWindowDays = &defaultValue
	}
	if r.viewWindowDays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "view_window_days", r.viewWindowDays, "form", "")
	} else {
		var defaultValue int32 = 1
		r.viewWindowDays = &defaultValue
	}
	if r.conversionReportTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conversion_report_time", r.conversionReportTime, "form", "")
	} else {
		var defaultValue string = "TIME_OF_AD_ACTION"
		r.conversionReportTime = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
