/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CreativeType Ad creative type enum. For update, only draft ads may update creative type. </p><strong>Note:</strong> SHOP_THE_PIN has been deprecated. Please use COLLECTION instead.
type CreativeType string

// List of CreativeType
const (
	REGULAR CreativeType = "REGULAR"
	VIDEO CreativeType = "VIDEO"
	SHOPPING CreativeType = "SHOPPING"
	CAROUSEL CreativeType = "CAROUSEL"
	MAX_VIDEO CreativeType = "MAX_VIDEO"
	SHOP_THE_PIN CreativeType = "SHOP_THE_PIN"
	COLLECTION CreativeType = "COLLECTION"
	IDEA CreativeType = "IDEA"
	SHOWCASE CreativeType = "SHOWCASE"
	QUIZ CreativeType = "QUIZ"
)

// All allowed values of CreativeType enum
var AllowedCreativeTypeEnumValues = []CreativeType{
	"REGULAR",
	"VIDEO",
	"SHOPPING",
	"CAROUSEL",
	"MAX_VIDEO",
	"SHOP_THE_PIN",
	"COLLECTION",
	"IDEA",
	"SHOWCASE",
	"QUIZ",
}

func (v *CreativeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CreativeType(value)
	for _, existing := range AllowedCreativeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CreativeType", value)
}

// NewCreativeTypeFromValue returns a pointer to a valid CreativeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCreativeTypeFromValue(v string) (*CreativeType, error) {
	ev := CreativeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CreativeType: valid values are %v", v, AllowedCreativeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CreativeType) IsValid() bool {
	for _, existing := range AllowedCreativeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CreativeType value
func (v CreativeType) Ptr() *CreativeType {
	return &v
}

type NullableCreativeType struct {
	value *CreativeType
	isSet bool
}

func (v NullableCreativeType) Get() *CreativeType {
	return v.value
}

func (v *NullableCreativeType) Set(val *CreativeType) {
	v.value = val
	v.isSet = true
}

func (v NullableCreativeType) IsSet() bool {
	return v.isSet
}

func (v *NullableCreativeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreativeType(val *CreativeType) *NullableCreativeType {
	return &NullableCreativeType{value: val, isSet: true}
}

func (v NullableCreativeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreativeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

