/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogsCreativeAssetsBatchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogsCreativeAssetsBatchRequest{}

// CatalogsCreativeAssetsBatchRequest Request object to update catalogs creative assets items
type CatalogsCreativeAssetsBatchRequest struct {
	CatalogType string `json:"catalog_type"`
	Country Country `json:"country"`
	Language CatalogsItemsRequestLanguage `json:"language"`
	// Array with creative assets item operations
	Items []CatalogsCreativeAssetsBatchItem `json:"items"`
	// Catalog id pertaining to the creative assets item. If not provided, default to oldest creative assets catalog
	CatalogId *string `json:"catalog_id,omitempty" validate:"regexp=^\\\\d+$"`
}

type _CatalogsCreativeAssetsBatchRequest CatalogsCreativeAssetsBatchRequest

// NewCatalogsCreativeAssetsBatchRequest instantiates a new CatalogsCreativeAssetsBatchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogsCreativeAssetsBatchRequest(catalogType string, country Country, language CatalogsItemsRequestLanguage, items []CatalogsCreativeAssetsBatchItem) *CatalogsCreativeAssetsBatchRequest {
	this := CatalogsCreativeAssetsBatchRequest{}
	this.CatalogType = catalogType
	this.Country = country
	this.Language = language
	this.Items = items
	return &this
}

// NewCatalogsCreativeAssetsBatchRequestWithDefaults instantiates a new CatalogsCreativeAssetsBatchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogsCreativeAssetsBatchRequestWithDefaults() *CatalogsCreativeAssetsBatchRequest {
	this := CatalogsCreativeAssetsBatchRequest{}
	return &this
}

// GetCatalogType returns the CatalogType field value
func (o *CatalogsCreativeAssetsBatchRequest) GetCatalogType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CatalogType
}

// GetCatalogTypeOk returns a tuple with the CatalogType field value
// and a boolean to check if the value has been set.
func (o *CatalogsCreativeAssetsBatchRequest) GetCatalogTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CatalogType, true
}

// SetCatalogType sets field value
func (o *CatalogsCreativeAssetsBatchRequest) SetCatalogType(v string) {
	o.CatalogType = v
}

// GetCountry returns the Country field value
func (o *CatalogsCreativeAssetsBatchRequest) GetCountry() Country {
	if o == nil {
		var ret Country
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *CatalogsCreativeAssetsBatchRequest) GetCountryOk() (*Country, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *CatalogsCreativeAssetsBatchRequest) SetCountry(v Country) {
	o.Country = v
}

// GetLanguage returns the Language field value
func (o *CatalogsCreativeAssetsBatchRequest) GetLanguage() CatalogsItemsRequestLanguage {
	if o == nil {
		var ret CatalogsItemsRequestLanguage
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *CatalogsCreativeAssetsBatchRequest) GetLanguageOk() (*CatalogsItemsRequestLanguage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *CatalogsCreativeAssetsBatchRequest) SetLanguage(v CatalogsItemsRequestLanguage) {
	o.Language = v
}

// GetItems returns the Items field value
func (o *CatalogsCreativeAssetsBatchRequest) GetItems() []CatalogsCreativeAssetsBatchItem {
	if o == nil {
		var ret []CatalogsCreativeAssetsBatchItem
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *CatalogsCreativeAssetsBatchRequest) GetItemsOk() ([]CatalogsCreativeAssetsBatchItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *CatalogsCreativeAssetsBatchRequest) SetItems(v []CatalogsCreativeAssetsBatchItem) {
	o.Items = v
}

// GetCatalogId returns the CatalogId field value if set, zero value otherwise.
func (o *CatalogsCreativeAssetsBatchRequest) GetCatalogId() string {
	if o == nil || IsNil(o.CatalogId) {
		var ret string
		return ret
	}
	return *o.CatalogId
}

// GetCatalogIdOk returns a tuple with the CatalogId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsCreativeAssetsBatchRequest) GetCatalogIdOk() (*string, bool) {
	if o == nil || IsNil(o.CatalogId) {
		return nil, false
	}
	return o.CatalogId, true
}

// HasCatalogId returns a boolean if a field has been set.
func (o *CatalogsCreativeAssetsBatchRequest) HasCatalogId() bool {
	if o != nil && !IsNil(o.CatalogId) {
		return true
	}

	return false
}

// SetCatalogId gets a reference to the given string and assigns it to the CatalogId field.
func (o *CatalogsCreativeAssetsBatchRequest) SetCatalogId(v string) {
	o.CatalogId = &v
}

func (o CatalogsCreativeAssetsBatchRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogsCreativeAssetsBatchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["catalog_type"] = o.CatalogType
	toSerialize["country"] = o.Country
	toSerialize["language"] = o.Language
	toSerialize["items"] = o.Items
	if !IsNil(o.CatalogId) {
		toSerialize["catalog_id"] = o.CatalogId
	}
	return toSerialize, nil
}

func (o *CatalogsCreativeAssetsBatchRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"catalog_type",
		"country",
		"language",
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogsCreativeAssetsBatchRequest := _CatalogsCreativeAssetsBatchRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogsCreativeAssetsBatchRequest)

	if err != nil {
		return err
	}

	*o = CatalogsCreativeAssetsBatchRequest(varCatalogsCreativeAssetsBatchRequest)

	return err
}

type NullableCatalogsCreativeAssetsBatchRequest struct {
	value *CatalogsCreativeAssetsBatchRequest
	isSet bool
}

func (v NullableCatalogsCreativeAssetsBatchRequest) Get() *CatalogsCreativeAssetsBatchRequest {
	return v.value
}

func (v *NullableCatalogsCreativeAssetsBatchRequest) Set(val *CatalogsCreativeAssetsBatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogsCreativeAssetsBatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogsCreativeAssetsBatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogsCreativeAssetsBatchRequest(val *CatalogsCreativeAssetsBatchRequest) *NullableCatalogsCreativeAssetsBatchRequest {
	return &NullableCatalogsCreativeAssetsBatchRequest{value: val, isSet: true}
}

func (v NullableCatalogsCreativeAssetsBatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogsCreativeAssetsBatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


