/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SharedAudience type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SharedAudience{}

// SharedAudience struct for SharedAudience
type SharedAudience struct {
	// Unique identifier of an audience
	AudienceId string `json:"audience_id" validate:"regexp=^\\\\d+$"`
	OperationType OperationType `json:"operation_type"`
	// List of ad account IDs to share with or revoke from.
	RecipientAccountIds []string `json:"recipient_account_ids"`
}

type _SharedAudience SharedAudience

// NewSharedAudience instantiates a new SharedAudience object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharedAudience(audienceId string, operationType OperationType, recipientAccountIds []string) *SharedAudience {
	this := SharedAudience{}
	this.AudienceId = audienceId
	this.OperationType = operationType
	this.RecipientAccountIds = recipientAccountIds
	return &this
}

// NewSharedAudienceWithDefaults instantiates a new SharedAudience object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharedAudienceWithDefaults() *SharedAudience {
	this := SharedAudience{}
	return &this
}

// GetAudienceId returns the AudienceId field value
func (o *SharedAudience) GetAudienceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AudienceId
}

// GetAudienceIdOk returns a tuple with the AudienceId field value
// and a boolean to check if the value has been set.
func (o *SharedAudience) GetAudienceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AudienceId, true
}

// SetAudienceId sets field value
func (o *SharedAudience) SetAudienceId(v string) {
	o.AudienceId = v
}

// GetOperationType returns the OperationType field value
func (o *SharedAudience) GetOperationType() OperationType {
	if o == nil {
		var ret OperationType
		return ret
	}

	return o.OperationType
}

// GetOperationTypeOk returns a tuple with the OperationType field value
// and a boolean to check if the value has been set.
func (o *SharedAudience) GetOperationTypeOk() (*OperationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OperationType, true
}

// SetOperationType sets field value
func (o *SharedAudience) SetOperationType(v OperationType) {
	o.OperationType = v
}

// GetRecipientAccountIds returns the RecipientAccountIds field value
func (o *SharedAudience) GetRecipientAccountIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RecipientAccountIds
}

// GetRecipientAccountIdsOk returns a tuple with the RecipientAccountIds field value
// and a boolean to check if the value has been set.
func (o *SharedAudience) GetRecipientAccountIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecipientAccountIds, true
}

// SetRecipientAccountIds sets field value
func (o *SharedAudience) SetRecipientAccountIds(v []string) {
	o.RecipientAccountIds = v
}

func (o SharedAudience) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharedAudience) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["audience_id"] = o.AudienceId
	toSerialize["operation_type"] = o.OperationType
	toSerialize["recipient_account_ids"] = o.RecipientAccountIds
	return toSerialize, nil
}

func (o *SharedAudience) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"audience_id",
		"operation_type",
		"recipient_account_ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSharedAudience := _SharedAudience{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSharedAudience)

	if err != nil {
		return err
	}

	*o = SharedAudience(varSharedAudience)

	return err
}

type NullableSharedAudience struct {
	value *SharedAudience
	isSet bool
}

func (v NullableSharedAudience) Get() *SharedAudience {
	return v.value
}

func (v *NullableSharedAudience) Set(val *SharedAudience) {
	v.value = val
	v.isSet = true
}

func (v NullableSharedAudience) IsSet() bool {
	return v.isSet
}

func (v *NullableSharedAudience) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharedAudience(val *SharedAudience) *NullableSharedAudience {
	return &NullableSharedAudience{value: val, isSet: true}
}

func (v NullableSharedAudience) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharedAudience) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


