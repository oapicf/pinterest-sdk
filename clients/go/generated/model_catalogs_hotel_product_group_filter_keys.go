/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)


// CatalogsHotelProductGroupFilterKeys struct for CatalogsHotelProductGroupFilterKeys
type CatalogsHotelProductGroupFilterKeys struct {
	BrandFilter *BrandFilter
	CountryFilter *CountryFilter
	CustomLabel0Filter *CustomLabel0Filter
	CustomLabel1Filter *CustomLabel1Filter
	CustomLabel2Filter *CustomLabel2Filter
	CustomLabel3Filter *CustomLabel3Filter
	CustomLabel4Filter *CustomLabel4Filter
	HotelIdFilter *HotelIdFilter
	PriceFilter *PriceFilter
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *CatalogsHotelProductGroupFilterKeys) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into BrandFilter
	err = json.Unmarshal(data, &dst.BrandFilter);
	if err == nil {
		jsonBrandFilter, _ := json.Marshal(dst.BrandFilter)
		if string(jsonBrandFilter) == "{}" { // empty struct
			dst.BrandFilter = nil
		} else {
			return nil // data stored in dst.BrandFilter, return on the first match
		}
	} else {
		dst.BrandFilter = nil
	}

	// try to unmarshal JSON data into CountryFilter
	err = json.Unmarshal(data, &dst.CountryFilter);
	if err == nil {
		jsonCountryFilter, _ := json.Marshal(dst.CountryFilter)
		if string(jsonCountryFilter) == "{}" { // empty struct
			dst.CountryFilter = nil
		} else {
			return nil // data stored in dst.CountryFilter, return on the first match
		}
	} else {
		dst.CountryFilter = nil
	}

	// try to unmarshal JSON data into CustomLabel0Filter
	err = json.Unmarshal(data, &dst.CustomLabel0Filter);
	if err == nil {
		jsonCustomLabel0Filter, _ := json.Marshal(dst.CustomLabel0Filter)
		if string(jsonCustomLabel0Filter) == "{}" { // empty struct
			dst.CustomLabel0Filter = nil
		} else {
			return nil // data stored in dst.CustomLabel0Filter, return on the first match
		}
	} else {
		dst.CustomLabel0Filter = nil
	}

	// try to unmarshal JSON data into CustomLabel1Filter
	err = json.Unmarshal(data, &dst.CustomLabel1Filter);
	if err == nil {
		jsonCustomLabel1Filter, _ := json.Marshal(dst.CustomLabel1Filter)
		if string(jsonCustomLabel1Filter) == "{}" { // empty struct
			dst.CustomLabel1Filter = nil
		} else {
			return nil // data stored in dst.CustomLabel1Filter, return on the first match
		}
	} else {
		dst.CustomLabel1Filter = nil
	}

	// try to unmarshal JSON data into CustomLabel2Filter
	err = json.Unmarshal(data, &dst.CustomLabel2Filter);
	if err == nil {
		jsonCustomLabel2Filter, _ := json.Marshal(dst.CustomLabel2Filter)
		if string(jsonCustomLabel2Filter) == "{}" { // empty struct
			dst.CustomLabel2Filter = nil
		} else {
			return nil // data stored in dst.CustomLabel2Filter, return on the first match
		}
	} else {
		dst.CustomLabel2Filter = nil
	}

	// try to unmarshal JSON data into CustomLabel3Filter
	err = json.Unmarshal(data, &dst.CustomLabel3Filter);
	if err == nil {
		jsonCustomLabel3Filter, _ := json.Marshal(dst.CustomLabel3Filter)
		if string(jsonCustomLabel3Filter) == "{}" { // empty struct
			dst.CustomLabel3Filter = nil
		} else {
			return nil // data stored in dst.CustomLabel3Filter, return on the first match
		}
	} else {
		dst.CustomLabel3Filter = nil
	}

	// try to unmarshal JSON data into CustomLabel4Filter
	err = json.Unmarshal(data, &dst.CustomLabel4Filter);
	if err == nil {
		jsonCustomLabel4Filter, _ := json.Marshal(dst.CustomLabel4Filter)
		if string(jsonCustomLabel4Filter) == "{}" { // empty struct
			dst.CustomLabel4Filter = nil
		} else {
			return nil // data stored in dst.CustomLabel4Filter, return on the first match
		}
	} else {
		dst.CustomLabel4Filter = nil
	}

	// try to unmarshal JSON data into HotelIdFilter
	err = json.Unmarshal(data, &dst.HotelIdFilter);
	if err == nil {
		jsonHotelIdFilter, _ := json.Marshal(dst.HotelIdFilter)
		if string(jsonHotelIdFilter) == "{}" { // empty struct
			dst.HotelIdFilter = nil
		} else {
			return nil // data stored in dst.HotelIdFilter, return on the first match
		}
	} else {
		dst.HotelIdFilter = nil
	}

	// try to unmarshal JSON data into PriceFilter
	err = json.Unmarshal(data, &dst.PriceFilter);
	if err == nil {
		jsonPriceFilter, _ := json.Marshal(dst.PriceFilter)
		if string(jsonPriceFilter) == "{}" { // empty struct
			dst.PriceFilter = nil
		} else {
			return nil // data stored in dst.PriceFilter, return on the first match
		}
	} else {
		dst.PriceFilter = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(CatalogsHotelProductGroupFilterKeys)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *CatalogsHotelProductGroupFilterKeys) MarshalJSON() ([]byte, error) {
	if src.BrandFilter != nil {
		return json.Marshal(&src.BrandFilter)
	}

	if src.CountryFilter != nil {
		return json.Marshal(&src.CountryFilter)
	}

	if src.CustomLabel0Filter != nil {
		return json.Marshal(&src.CustomLabel0Filter)
	}

	if src.CustomLabel1Filter != nil {
		return json.Marshal(&src.CustomLabel1Filter)
	}

	if src.CustomLabel2Filter != nil {
		return json.Marshal(&src.CustomLabel2Filter)
	}

	if src.CustomLabel3Filter != nil {
		return json.Marshal(&src.CustomLabel3Filter)
	}

	if src.CustomLabel4Filter != nil {
		return json.Marshal(&src.CustomLabel4Filter)
	}

	if src.HotelIdFilter != nil {
		return json.Marshal(&src.HotelIdFilter)
	}

	if src.PriceFilter != nil {
		return json.Marshal(&src.PriceFilter)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableCatalogsHotelProductGroupFilterKeys struct {
	value *CatalogsHotelProductGroupFilterKeys
	isSet bool
}

func (v NullableCatalogsHotelProductGroupFilterKeys) Get() *CatalogsHotelProductGroupFilterKeys {
	return v.value
}

func (v *NullableCatalogsHotelProductGroupFilterKeys) Set(val *CatalogsHotelProductGroupFilterKeys) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogsHotelProductGroupFilterKeys) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogsHotelProductGroupFilterKeys) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogsHotelProductGroupFilterKeys(val *CatalogsHotelProductGroupFilterKeys) *NullableCatalogsHotelProductGroupFilterKeys {
	return &NullableCatalogsHotelProductGroupFilterKeys{value: val, isSet: true}
}

func (v NullableCatalogsHotelProductGroupFilterKeys) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogsHotelProductGroupFilterKeys) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


