/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// BusinessAccessAssetsAPIService BusinessAccessAssetsAPI service
type BusinessAccessAssetsAPIService service

type ApiAssetGroupCreateRequest struct {
	ctx context.Context
	ApiService *BusinessAccessAssetsAPIService
	businessId string
	createAssetGroupBody *CreateAssetGroupBody
}

func (r ApiAssetGroupCreateRequest) CreateAssetGroupBody(createAssetGroupBody CreateAssetGroupBody) ApiAssetGroupCreateRequest {
	r.createAssetGroupBody = &createAssetGroupBody
	return r
}

func (r ApiAssetGroupCreateRequest) Execute() (*CreateAssetGroupResponse, *http.Response, error) {
	return r.ApiService.AssetGroupCreateExecute(r)
}

/*
AssetGroupCreate Create a new asset group.

Create a new asset group with the specified parameters.
- An <a href="https://help.pinterest.com/en/business/article/asset-groups">asset group</a> is a custom group of assets based on how youâ€™d like to manage your accounts.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param businessId Unique identifier of the requesting business.
 @return ApiAssetGroupCreateRequest
*/
func (a *BusinessAccessAssetsAPIService) AssetGroupCreate(ctx context.Context, businessId string) ApiAssetGroupCreateRequest {
	return ApiAssetGroupCreateRequest{
		ApiService: a,
		ctx: ctx,
		businessId: businessId,
	}
}

// Execute executes the request
//  @return CreateAssetGroupResponse
func (a *BusinessAccessAssetsAPIService) AssetGroupCreateExecute(r ApiAssetGroupCreateRequest) (*CreateAssetGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateAssetGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BusinessAccessAssetsAPIService.AssetGroupCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/businesses/{business_id}/asset_groups"
	localVarPath = strings.Replace(localVarPath, "{"+"business_id"+"}", url.PathEscape(parameterValueToString(r.businessId, "businessId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.businessId) < 1 {
		return localVarReturnValue, nil, reportError("businessId must have at least 1 elements")
	}
	if strlen(r.businessId) > 20 {
		return localVarReturnValue, nil, reportError("businessId must have less than 20 elements")
	}
	if r.createAssetGroupBody == nil {
		return localVarReturnValue, nil, reportError("createAssetGroupBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createAssetGroupBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAssetGroupDeleteRequest struct {
	ctx context.Context
	ApiService *BusinessAccessAssetsAPIService
	businessId string
	deleteAssetGroupBody *DeleteAssetGroupBody
}

func (r ApiAssetGroupDeleteRequest) DeleteAssetGroupBody(deleteAssetGroupBody DeleteAssetGroupBody) ApiAssetGroupDeleteRequest {
	r.deleteAssetGroupBody = &deleteAssetGroupBody
	return r
}

func (r ApiAssetGroupDeleteRequest) Execute() (*DeleteAssetGroupResponse, *http.Response, error) {
	return r.ApiService.AssetGroupDeleteExecute(r)
}

/*
AssetGroupDelete Delete asset groups.

Delete a batch of asset groups.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param businessId Unique identifier of the requesting business.
 @return ApiAssetGroupDeleteRequest
*/
func (a *BusinessAccessAssetsAPIService) AssetGroupDelete(ctx context.Context, businessId string) ApiAssetGroupDeleteRequest {
	return ApiAssetGroupDeleteRequest{
		ApiService: a,
		ctx: ctx,
		businessId: businessId,
	}
}

// Execute executes the request
//  @return DeleteAssetGroupResponse
func (a *BusinessAccessAssetsAPIService) AssetGroupDeleteExecute(r ApiAssetGroupDeleteRequest) (*DeleteAssetGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteAssetGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BusinessAccessAssetsAPIService.AssetGroupDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/businesses/{business_id}/asset_groups"
	localVarPath = strings.Replace(localVarPath, "{"+"business_id"+"}", url.PathEscape(parameterValueToString(r.businessId, "businessId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.businessId) < 1 {
		return localVarReturnValue, nil, reportError("businessId must have at least 1 elements")
	}
	if strlen(r.businessId) > 20 {
		return localVarReturnValue, nil, reportError("businessId must have less than 20 elements")
	}
	if r.deleteAssetGroupBody == nil {
		return localVarReturnValue, nil, reportError("deleteAssetGroupBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deleteAssetGroupBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAssetGroupUpdateRequest struct {
	ctx context.Context
	ApiService *BusinessAccessAssetsAPIService
	businessId string
	updateAssetGroupBody *UpdateAssetGroupBody
}

func (r ApiAssetGroupUpdateRequest) UpdateAssetGroupBody(updateAssetGroupBody UpdateAssetGroupBody) ApiAssetGroupUpdateRequest {
	r.updateAssetGroupBody = &updateAssetGroupBody
	return r
}

func (r ApiAssetGroupUpdateRequest) Execute() (*UpdateAssetGroupResponse, *http.Response, error) {
	return r.ApiService.AssetGroupUpdateExecute(r)
}

/*
AssetGroupUpdate Update asset groups.

Update a batch of asset groups with the specified parameters.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param businessId Unique identifier of the requesting business.
 @return ApiAssetGroupUpdateRequest
*/
func (a *BusinessAccessAssetsAPIService) AssetGroupUpdate(ctx context.Context, businessId string) ApiAssetGroupUpdateRequest {
	return ApiAssetGroupUpdateRequest{
		ApiService: a,
		ctx: ctx,
		businessId: businessId,
	}
}

// Execute executes the request
//  @return UpdateAssetGroupResponse
func (a *BusinessAccessAssetsAPIService) AssetGroupUpdateExecute(r ApiAssetGroupUpdateRequest) (*UpdateAssetGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateAssetGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BusinessAccessAssetsAPIService.AssetGroupUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/businesses/{business_id}/asset_groups"
	localVarPath = strings.Replace(localVarPath, "{"+"business_id"+"}", url.PathEscape(parameterValueToString(r.businessId, "businessId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.businessId) < 1 {
		return localVarReturnValue, nil, reportError("businessId must have at least 1 elements")
	}
	if strlen(r.businessId) > 20 {
		return localVarReturnValue, nil, reportError("businessId must have less than 20 elements")
	}
	if r.updateAssetGroupBody == nil {
		return localVarReturnValue, nil, reportError("updateAssetGroupBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateAssetGroupBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBusinessAssetMembersGetRequest struct {
	ctx context.Context
	ApiService *BusinessAccessAssetsAPIService
	businessId string
	assetId string
	bookmark *string
	pageSize *int32
	startIndex *int32
}

// Cursor used to fetch the next page of items
func (r ApiBusinessAssetMembersGetRequest) Bookmark(bookmark string) ApiBusinessAssetMembersGetRequest {
	r.bookmark = &bookmark
	return r
}

// Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
func (r ApiBusinessAssetMembersGetRequest) PageSize(pageSize int32) ApiBusinessAssetMembersGetRequest {
	r.pageSize = &pageSize
	return r
}

// An index to start fetching the results from. Only the results starting from this index will be returned.
func (r ApiBusinessAssetMembersGetRequest) StartIndex(startIndex int32) ApiBusinessAssetMembersGetRequest {
	r.startIndex = &startIndex
	return r
}

func (r ApiBusinessAssetMembersGetRequest) Execute() (*BusinessAssetMembersGet200Response, *http.Response, error) {
	return r.ApiService.BusinessAssetMembersGetExecute(r)
}

/*
BusinessAssetMembersGet Get members with access to asset

Get all the members the requesting business has granted access to on the given asset.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param businessId Unique identifier of the requesting business.
 @param assetId Unique identifier of a business asset.
 @return ApiBusinessAssetMembersGetRequest
*/
func (a *BusinessAccessAssetsAPIService) BusinessAssetMembersGet(ctx context.Context, businessId string, assetId string) ApiBusinessAssetMembersGetRequest {
	return ApiBusinessAssetMembersGetRequest{
		ApiService: a,
		ctx: ctx,
		businessId: businessId,
		assetId: assetId,
	}
}

// Execute executes the request
//  @return BusinessAssetMembersGet200Response
func (a *BusinessAccessAssetsAPIService) BusinessAssetMembersGetExecute(r ApiBusinessAssetMembersGetRequest) (*BusinessAssetMembersGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BusinessAssetMembersGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BusinessAccessAssetsAPIService.BusinessAssetMembersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/businesses/{business_id}/assets/{asset_id}/members"
	localVarPath = strings.Replace(localVarPath, "{"+"business_id"+"}", url.PathEscape(parameterValueToString(r.businessId, "businessId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"asset_id"+"}", url.PathEscape(parameterValueToString(r.assetId, "assetId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.businessId) < 1 {
		return localVarReturnValue, nil, reportError("businessId must have at least 1 elements")
	}
	if strlen(r.businessId) > 20 {
		return localVarReturnValue, nil, reportError("businessId must have less than 20 elements")
	}
	if strlen(r.assetId) < 1 {
		return localVarReturnValue, nil, reportError("assetId must have at least 1 elements")
	}
	if strlen(r.assetId) > 20 {
		return localVarReturnValue, nil, reportError("assetId must have less than 20 elements")
	}

	if r.bookmark != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bookmark", r.bookmark, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 25
		r.pageSize = &defaultValue
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "form", "")
	} else {
		var defaultValue int32 = 0
		r.startIndex = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBusinessAssetPartnersGetRequest struct {
	ctx context.Context
	ApiService *BusinessAccessAssetsAPIService
	businessId string
	assetId string
	startIndex *int32
	bookmark *string
	pageSize *int32
}

// An index to start fetching the results from. Only the results starting from this index will be returned.
func (r ApiBusinessAssetPartnersGetRequest) StartIndex(startIndex int32) ApiBusinessAssetPartnersGetRequest {
	r.startIndex = &startIndex
	return r
}

// Cursor used to fetch the next page of items
func (r ApiBusinessAssetPartnersGetRequest) Bookmark(bookmark string) ApiBusinessAssetPartnersGetRequest {
	r.bookmark = &bookmark
	return r
}

// Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
func (r ApiBusinessAssetPartnersGetRequest) PageSize(pageSize int32) ApiBusinessAssetPartnersGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiBusinessAssetPartnersGetRequest) Execute() (*BusinessAssetPartnersGet200Response, *http.Response, error) {
	return r.ApiService.BusinessAssetPartnersGetExecute(r)
}

/*
BusinessAssetPartnersGet Get partners with access to asset

Get all the partners the requesting business has granted access to on the given asset.
Note: If the asset has been shared with you, an empty array will be returned. This is because an asset shared with
you cannot be shared with a different partner.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param businessId Unique identifier of the requesting business.
 @param assetId Unique identifier of a business asset.
 @return ApiBusinessAssetPartnersGetRequest
*/
func (a *BusinessAccessAssetsAPIService) BusinessAssetPartnersGet(ctx context.Context, businessId string, assetId string) ApiBusinessAssetPartnersGetRequest {
	return ApiBusinessAssetPartnersGetRequest{
		ApiService: a,
		ctx: ctx,
		businessId: businessId,
		assetId: assetId,
	}
}

// Execute executes the request
//  @return BusinessAssetPartnersGet200Response
func (a *BusinessAccessAssetsAPIService) BusinessAssetPartnersGetExecute(r ApiBusinessAssetPartnersGetRequest) (*BusinessAssetPartnersGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BusinessAssetPartnersGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BusinessAccessAssetsAPIService.BusinessAssetPartnersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/businesses/{business_id}/assets/{asset_id}/partners"
	localVarPath = strings.Replace(localVarPath, "{"+"business_id"+"}", url.PathEscape(parameterValueToString(r.businessId, "businessId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"asset_id"+"}", url.PathEscape(parameterValueToString(r.assetId, "assetId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.businessId) < 1 {
		return localVarReturnValue, nil, reportError("businessId must have at least 1 elements")
	}
	if strlen(r.businessId) > 20 {
		return localVarReturnValue, nil, reportError("businessId must have less than 20 elements")
	}
	if strlen(r.assetId) < 1 {
		return localVarReturnValue, nil, reportError("assetId must have at least 1 elements")
	}
	if strlen(r.assetId) > 20 {
		return localVarReturnValue, nil, reportError("assetId must have less than 20 elements")
	}

	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "form", "")
	} else {
		var defaultValue int32 = 0
		r.startIndex = &defaultValue
	}
	if r.bookmark != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bookmark", r.bookmark, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 25
		r.pageSize = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBusinessAssetsGetRequest struct {
	ctx context.Context
	ApiService *BusinessAccessAssetsAPIService
	businessId string
	permissions *[]PermissionsWithOwner
	childAssetId *string
	assetGroupId *string
	assetType *string
	startIndex *int32
	bookmark *string
	pageSize *int32
}

// A list of asset permissions used to filter the assets. Only assets where the requesting business has at least one of the specified permissions will be returned.
func (r ApiBusinessAssetsGetRequest) Permissions(permissions []PermissionsWithOwner) ApiBusinessAssetsGetRequest {
	r.permissions = &permissions
	return r
}

// A child asset unique identifier. Used to fetch asset groups that contain the asset id as a child.
func (r ApiBusinessAssetsGetRequest) ChildAssetId(childAssetId string) ApiBusinessAssetsGetRequest {
	r.childAssetId = &childAssetId
	return r
}

// An asset group unique identifier. Used to fetch assets contained within the specified asset group.
func (r ApiBusinessAssetsGetRequest) AssetGroupId(assetGroupId string) ApiBusinessAssetsGetRequest {
	r.assetGroupId = &assetGroupId
	return r
}

// A resource type to filter the assets by. Only assets of the specified type will be returned.
func (r ApiBusinessAssetsGetRequest) AssetType(assetType string) ApiBusinessAssetsGetRequest {
	r.assetType = &assetType
	return r
}

// An index to start fetching the results from. Only the results starting from this index will be returned.
func (r ApiBusinessAssetsGetRequest) StartIndex(startIndex int32) ApiBusinessAssetsGetRequest {
	r.startIndex = &startIndex
	return r
}

// Cursor used to fetch the next page of items
func (r ApiBusinessAssetsGetRequest) Bookmark(bookmark string) ApiBusinessAssetsGetRequest {
	r.bookmark = &bookmark
	return r
}

// Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
func (r ApiBusinessAssetsGetRequest) PageSize(pageSize int32) ApiBusinessAssetsGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiBusinessAssetsGetRequest) Execute() (*BusinessAssetsGet200Response, *http.Response, error) {
	return r.ApiService.BusinessAssetsGetExecute(r)
}

/*
BusinessAssetsGet List business assets

Get all the assets the requesting business has access to. This includes assets the business owns and assets the business has access to through partnerships.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param businessId Unique identifier of the requesting business.
 @return ApiBusinessAssetsGetRequest
*/
func (a *BusinessAccessAssetsAPIService) BusinessAssetsGet(ctx context.Context, businessId string) ApiBusinessAssetsGetRequest {
	return ApiBusinessAssetsGetRequest{
		ApiService: a,
		ctx: ctx,
		businessId: businessId,
	}
}

// Execute executes the request
//  @return BusinessAssetsGet200Response
func (a *BusinessAccessAssetsAPIService) BusinessAssetsGetExecute(r ApiBusinessAssetsGetRequest) (*BusinessAssetsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BusinessAssetsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BusinessAccessAssetsAPIService.BusinessAssetsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/businesses/{business_id}/assets"
	localVarPath = strings.Replace(localVarPath, "{"+"business_id"+"}", url.PathEscape(parameterValueToString(r.businessId, "businessId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.businessId) < 1 {
		return localVarReturnValue, nil, reportError("businessId must have at least 1 elements")
	}
	if strlen(r.businessId) > 20 {
		return localVarReturnValue, nil, reportError("businessId must have less than 20 elements")
	}

	if r.permissions != nil {
		t := *r.permissions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "permissions", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "permissions", t, "form", "multi")
		}
	}
	if r.childAssetId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "child_asset_id", r.childAssetId, "form", "")
	}
	if r.assetGroupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "asset_group_id", r.assetGroupId, "form", "")
	}
	if r.assetType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "asset_type", r.assetType, "form", "")
	} else {
		var defaultValue string = "AD_ACCOUNT"
		r.assetType = &defaultValue
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "form", "")
	} else {
		var defaultValue int32 = 0
		r.startIndex = &defaultValue
	}
	if r.bookmark != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bookmark", r.bookmark, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 25
		r.pageSize = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBusinessMemberAssetsGetRequest struct {
	ctx context.Context
	ApiService *BusinessAccessAssetsAPIService
	businessId string
	memberId string
	assetType *string
	startIndex *int32
	bookmark *string
	pageSize *int32
}

// A resource type to filter the assets by. Only assets of the specified type will be returned.
func (r ApiBusinessMemberAssetsGetRequest) AssetType(assetType string) ApiBusinessMemberAssetsGetRequest {
	r.assetType = &assetType
	return r
}

// An index to start fetching the results from. Only the results starting from this index will be returned.
func (r ApiBusinessMemberAssetsGetRequest) StartIndex(startIndex int32) ApiBusinessMemberAssetsGetRequest {
	r.startIndex = &startIndex
	return r
}

// Cursor used to fetch the next page of items
func (r ApiBusinessMemberAssetsGetRequest) Bookmark(bookmark string) ApiBusinessMemberAssetsGetRequest {
	r.bookmark = &bookmark
	return r
}

// Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
func (r ApiBusinessMemberAssetsGetRequest) PageSize(pageSize int32) ApiBusinessMemberAssetsGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiBusinessMemberAssetsGetRequest) Execute() (*BusinessMemberAssetsGet200Response, *http.Response, error) {
	return r.ApiService.BusinessMemberAssetsGetExecute(r)
}

/*
BusinessMemberAssetsGet Get assets assigned to a member

Get assets on which you assigned asset permissions to the given member. Can be used to:
- get all assets, regardless of asset type or
- get assets of one asset type by using the asset_type query.
The return response will include the permissions the member has to that asset and the asset type.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param businessId Unique identifier of the requesting business.
 @param memberId The member id to fetch assets for.
 @return ApiBusinessMemberAssetsGetRequest
*/
func (a *BusinessAccessAssetsAPIService) BusinessMemberAssetsGet(ctx context.Context, businessId string, memberId string) ApiBusinessMemberAssetsGetRequest {
	return ApiBusinessMemberAssetsGetRequest{
		ApiService: a,
		ctx: ctx,
		businessId: businessId,
		memberId: memberId,
	}
}

// Execute executes the request
//  @return BusinessMemberAssetsGet200Response
func (a *BusinessAccessAssetsAPIService) BusinessMemberAssetsGetExecute(r ApiBusinessMemberAssetsGetRequest) (*BusinessMemberAssetsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BusinessMemberAssetsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BusinessAccessAssetsAPIService.BusinessMemberAssetsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/businesses/{business_id}/members/{member_id}/assets"
	localVarPath = strings.Replace(localVarPath, "{"+"business_id"+"}", url.PathEscape(parameterValueToString(r.businessId, "businessId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"member_id"+"}", url.PathEscape(parameterValueToString(r.memberId, "memberId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.businessId) < 1 {
		return localVarReturnValue, nil, reportError("businessId must have at least 1 elements")
	}
	if strlen(r.businessId) > 20 {
		return localVarReturnValue, nil, reportError("businessId must have less than 20 elements")
	}
	if strlen(r.memberId) < 1 {
		return localVarReturnValue, nil, reportError("memberId must have at least 1 elements")
	}
	if strlen(r.memberId) > 20 {
		return localVarReturnValue, nil, reportError("memberId must have less than 20 elements")
	}

	if r.assetType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "asset_type", r.assetType, "form", "")
	} else {
		var defaultValue string = "AD_ACCOUNT"
		r.assetType = &defaultValue
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "form", "")
	} else {
		var defaultValue int32 = 0
		r.startIndex = &defaultValue
	}
	if r.bookmark != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bookmark", r.bookmark, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 25
		r.pageSize = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBusinessMembersAssetAccessDeleteRequest struct {
	ctx context.Context
	ApiService *BusinessAccessAssetsAPIService
	businessId string
	businessMembersAssetAccessDeleteRequest *BusinessMembersAssetAccessDeleteRequest
}

// List member assset permissions to delete.
func (r ApiBusinessMembersAssetAccessDeleteRequest) BusinessMembersAssetAccessDeleteRequest(businessMembersAssetAccessDeleteRequest BusinessMembersAssetAccessDeleteRequest) ApiBusinessMembersAssetAccessDeleteRequest {
	r.businessMembersAssetAccessDeleteRequest = &businessMembersAssetAccessDeleteRequest
	return r
}

func (r ApiBusinessMembersAssetAccessDeleteRequest) Execute() (*DeleteMemberAccessResultsResponseArray, *http.Response, error) {
	return r.ApiService.BusinessMembersAssetAccessDeleteExecute(r)
}

/*
BusinessMembersAssetAccessDelete Delete member access to asset

Terminate multiple members' access to an asset.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param businessId Unique identifier of the requesting business.
 @return ApiBusinessMembersAssetAccessDeleteRequest
*/
func (a *BusinessAccessAssetsAPIService) BusinessMembersAssetAccessDelete(ctx context.Context, businessId string) ApiBusinessMembersAssetAccessDeleteRequest {
	return ApiBusinessMembersAssetAccessDeleteRequest{
		ApiService: a,
		ctx: ctx,
		businessId: businessId,
	}
}

// Execute executes the request
//  @return DeleteMemberAccessResultsResponseArray
func (a *BusinessAccessAssetsAPIService) BusinessMembersAssetAccessDeleteExecute(r ApiBusinessMembersAssetAccessDeleteRequest) (*DeleteMemberAccessResultsResponseArray, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteMemberAccessResultsResponseArray
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BusinessAccessAssetsAPIService.BusinessMembersAssetAccessDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/businesses/{business_id}/members/assets/access"
	localVarPath = strings.Replace(localVarPath, "{"+"business_id"+"}", url.PathEscape(parameterValueToString(r.businessId, "businessId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.businessId) < 1 {
		return localVarReturnValue, nil, reportError("businessId must have at least 1 elements")
	}
	if strlen(r.businessId) > 20 {
		return localVarReturnValue, nil, reportError("businessId must have less than 20 elements")
	}
	if r.businessMembersAssetAccessDeleteRequest == nil {
		return localVarReturnValue, nil, reportError("businessMembersAssetAccessDeleteRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.businessMembersAssetAccessDeleteRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBusinessMembersAssetAccessUpdateRequest struct {
	ctx context.Context
	ApiService *BusinessAccessAssetsAPIService
	businessId string
	updateMemberAssetAccessBody *UpdateMemberAssetAccessBody
}

// List of member asset permissions to create or update.
func (r ApiBusinessMembersAssetAccessUpdateRequest) UpdateMemberAssetAccessBody(updateMemberAssetAccessBody UpdateMemberAssetAccessBody) ApiBusinessMembersAssetAccessUpdateRequest {
	r.updateMemberAssetAccessBody = &updateMemberAssetAccessBody
	return r
}

func (r ApiBusinessMembersAssetAccessUpdateRequest) Execute() (*UpdateMemberAssetsResultsResponseArray, *http.Response, error) {
	return r.ApiService.BusinessMembersAssetAccessUpdateExecute(r)
}

/*
BusinessMembersAssetAccessUpdate Assign/Update member asset permissions

Grant multiple members access to assets and/or update multiple member's exisiting permissions to an asset.
Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of the type PROFILE.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param businessId Unique identifier of the requesting business.
 @return ApiBusinessMembersAssetAccessUpdateRequest
*/
func (a *BusinessAccessAssetsAPIService) BusinessMembersAssetAccessUpdate(ctx context.Context, businessId string) ApiBusinessMembersAssetAccessUpdateRequest {
	return ApiBusinessMembersAssetAccessUpdateRequest{
		ApiService: a,
		ctx: ctx,
		businessId: businessId,
	}
}

// Execute executes the request
//  @return UpdateMemberAssetsResultsResponseArray
func (a *BusinessAccessAssetsAPIService) BusinessMembersAssetAccessUpdateExecute(r ApiBusinessMembersAssetAccessUpdateRequest) (*UpdateMemberAssetsResultsResponseArray, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateMemberAssetsResultsResponseArray
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BusinessAccessAssetsAPIService.BusinessMembersAssetAccessUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/businesses/{business_id}/members/assets/access"
	localVarPath = strings.Replace(localVarPath, "{"+"business_id"+"}", url.PathEscape(parameterValueToString(r.businessId, "businessId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.businessId) < 1 {
		return localVarReturnValue, nil, reportError("businessId must have at least 1 elements")
	}
	if strlen(r.businessId) > 20 {
		return localVarReturnValue, nil, reportError("businessId must have less than 20 elements")
	}
	if r.updateMemberAssetAccessBody == nil {
		return localVarReturnValue, nil, reportError("updateMemberAssetAccessBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateMemberAssetAccessBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBusinessPartnerAssetAccessGetRequest struct {
	ctx context.Context
	ApiService *BusinessAccessAssetsAPIService
	businessId string
	partnerId string
	partnerType *PartnerType
	assetType *string
	startIndex *int32
	pageSize *int32
	bookmark *string
}

// Specifies whether to fetch internal or external (shared) partners. If partner_type&#x3D;INTERNAL, the asset being queried is for accesses the partner has to your business assets.&lt;br&gt; If partner_type&#x3D;EXTERNAL, the asset being queried is for the accesses you have to the partner&#39;s business asset.
func (r ApiBusinessPartnerAssetAccessGetRequest) PartnerType(partnerType PartnerType) ApiBusinessPartnerAssetAccessGetRequest {
	r.partnerType = &partnerType
	return r
}

// A resource type to filter the assets by. Only assets of the specified type will be returned.
func (r ApiBusinessPartnerAssetAccessGetRequest) AssetType(assetType string) ApiBusinessPartnerAssetAccessGetRequest {
	r.assetType = &assetType
	return r
}

// An index to start fetching the results from. Only the results starting from this index will be returned.
func (r ApiBusinessPartnerAssetAccessGetRequest) StartIndex(startIndex int32) ApiBusinessPartnerAssetAccessGetRequest {
	r.startIndex = &startIndex
	return r
}

// Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
func (r ApiBusinessPartnerAssetAccessGetRequest) PageSize(pageSize int32) ApiBusinessPartnerAssetAccessGetRequest {
	r.pageSize = &pageSize
	return r
}

// Cursor used to fetch the next page of items
func (r ApiBusinessPartnerAssetAccessGetRequest) Bookmark(bookmark string) ApiBusinessPartnerAssetAccessGetRequest {
	r.bookmark = &bookmark
	return r
}

func (r ApiBusinessPartnerAssetAccessGetRequest) Execute() (*BusinessPartnerAssetAccessGet200Response, *http.Response, error) {
	return r.ApiService.BusinessPartnerAssetAccessGetExecute(r)
}

/*
BusinessPartnerAssetAccessGet Get assets assigned to a partner or assets assigned by a partner

Can be used to get the business assets your partner has granted you access to or the business assets you have
granted your partner access to. If you specify:
- partner_type=INTERNAL, you will retrieve your business assets that the partner has access to.
- partner_type=EXTERNAL, you will retrieve the partner's business assets that the partner has granted you access to.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param businessId Unique identifier of the requesting business.
 @param partnerId The partner id to be bound to the Business
 @return ApiBusinessPartnerAssetAccessGetRequest
*/
func (a *BusinessAccessAssetsAPIService) BusinessPartnerAssetAccessGet(ctx context.Context, businessId string, partnerId string) ApiBusinessPartnerAssetAccessGetRequest {
	return ApiBusinessPartnerAssetAccessGetRequest{
		ApiService: a,
		ctx: ctx,
		businessId: businessId,
		partnerId: partnerId,
	}
}

// Execute executes the request
//  @return BusinessPartnerAssetAccessGet200Response
func (a *BusinessAccessAssetsAPIService) BusinessPartnerAssetAccessGetExecute(r ApiBusinessPartnerAssetAccessGetRequest) (*BusinessPartnerAssetAccessGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BusinessPartnerAssetAccessGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BusinessAccessAssetsAPIService.BusinessPartnerAssetAccessGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/businesses/{business_id}/partners/{partner_id}/assets"
	localVarPath = strings.Replace(localVarPath, "{"+"business_id"+"}", url.PathEscape(parameterValueToString(r.businessId, "businessId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"partner_id"+"}", url.PathEscape(parameterValueToString(r.partnerId, "partnerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.businessId) < 1 {
		return localVarReturnValue, nil, reportError("businessId must have at least 1 elements")
	}
	if strlen(r.businessId) > 20 {
		return localVarReturnValue, nil, reportError("businessId must have less than 20 elements")
	}
	if strlen(r.partnerId) < 1 {
		return localVarReturnValue, nil, reportError("partnerId must have at least 1 elements")
	}
	if strlen(r.partnerId) > 20 {
		return localVarReturnValue, nil, reportError("partnerId must have less than 20 elements")
	}

	if r.partnerType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "partner_type", r.partnerType, "form", "")
	}
	if r.assetType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "asset_type", r.assetType, "form", "")
	} else {
		var defaultValue string = "AD_ACCOUNT"
		r.assetType = &defaultValue
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "form", "")
	} else {
		var defaultValue int32 = 0
		r.startIndex = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 25
		r.pageSize = &defaultValue
	}
	if r.bookmark != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bookmark", r.bookmark, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeletePartnerAssetAccessHandlerImplRequest struct {
	ctx context.Context
	ApiService *BusinessAccessAssetsAPIService
	businessId string
	deletePartnerAssetAccessBody *DeletePartnerAssetAccessBody
}

func (r ApiDeletePartnerAssetAccessHandlerImplRequest) DeletePartnerAssetAccessBody(deletePartnerAssetAccessBody DeletePartnerAssetAccessBody) ApiDeletePartnerAssetAccessHandlerImplRequest {
	r.deletePartnerAssetAccessBody = &deletePartnerAssetAccessBody
	return r
}

func (r ApiDeletePartnerAssetAccessHandlerImplRequest) Execute() (*DeletePartnerAssetsResultsResponseArray, *http.Response, error) {
	return r.ApiService.DeletePartnerAssetAccessHandlerImplExecute(r)
}

/*
DeletePartnerAssetAccessHandlerImpl Delete partner access to asset

Terminate multiple partners' access to an asset. If
- partner_type=INTERNAL: You will terminate a partner's asset access to your business assets.
- partner_type=EXTERNAL: You will terminate your own access to your partner's business assets.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param businessId Unique identifier of the requesting business.
 @return ApiDeletePartnerAssetAccessHandlerImplRequest
*/
func (a *BusinessAccessAssetsAPIService) DeletePartnerAssetAccessHandlerImpl(ctx context.Context, businessId string) ApiDeletePartnerAssetAccessHandlerImplRequest {
	return ApiDeletePartnerAssetAccessHandlerImplRequest{
		ApiService: a,
		ctx: ctx,
		businessId: businessId,
	}
}

// Execute executes the request
//  @return DeletePartnerAssetsResultsResponseArray
func (a *BusinessAccessAssetsAPIService) DeletePartnerAssetAccessHandlerImplExecute(r ApiDeletePartnerAssetAccessHandlerImplRequest) (*DeletePartnerAssetsResultsResponseArray, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeletePartnerAssetsResultsResponseArray
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BusinessAccessAssetsAPIService.DeletePartnerAssetAccessHandlerImpl")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/businesses/{business_id}/partners/assets"
	localVarPath = strings.Replace(localVarPath, "{"+"business_id"+"}", url.PathEscape(parameterValueToString(r.businessId, "businessId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.businessId) < 1 {
		return localVarReturnValue, nil, reportError("businessId must have at least 1 elements")
	}
	if strlen(r.businessId) > 20 {
		return localVarReturnValue, nil, reportError("businessId must have less than 20 elements")
	}
	if r.deletePartnerAssetAccessBody == nil {
		return localVarReturnValue, nil, reportError("deletePartnerAssetAccessBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deletePartnerAssetAccessBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdatePartnerAssetAccessHandlerImplRequest struct {
	ctx context.Context
	ApiService *BusinessAccessAssetsAPIService
	businessId string
	updatePartnerAssetAccessBody *UpdatePartnerAssetAccessBody
}

// A list of assets and permissions to assign to your partners.
func (r ApiUpdatePartnerAssetAccessHandlerImplRequest) UpdatePartnerAssetAccessBody(updatePartnerAssetAccessBody UpdatePartnerAssetAccessBody) ApiUpdatePartnerAssetAccessHandlerImplRequest {
	r.updatePartnerAssetAccessBody = &updatePartnerAssetAccessBody
	return r
}

func (r ApiUpdatePartnerAssetAccessHandlerImplRequest) Execute() (*UpdatePartnerAssetsResultsResponseArray, *http.Response, error) {
	return r.ApiService.UpdatePartnerAssetAccessHandlerImplExecute(r)
}

/*
UpdatePartnerAssetAccessHandlerImpl Assign/Update partner asset permissions

Grant multiple partners access to assets and/or update multiple partner's exisiting permissions to an asset.
If your partner already had permissions on the asset, they will be overriden with the new permissions you assign to them.
To learn more about permission levels, visit https://help.pinterest.com/en/business/article/business-manager-overview

Note: Not all listed permissions are applicable to each asset type. For example, PROFILE_PUBLISHER would not be
applicable to an asset of type AD_ACCOUNT. The permission level PROFILE_PUBLISHER is only available to an asset of
the type PROFILE.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param businessId Unique identifier of the requesting business.
 @return ApiUpdatePartnerAssetAccessHandlerImplRequest
*/
func (a *BusinessAccessAssetsAPIService) UpdatePartnerAssetAccessHandlerImpl(ctx context.Context, businessId string) ApiUpdatePartnerAssetAccessHandlerImplRequest {
	return ApiUpdatePartnerAssetAccessHandlerImplRequest{
		ApiService: a,
		ctx: ctx,
		businessId: businessId,
	}
}

// Execute executes the request
//  @return UpdatePartnerAssetsResultsResponseArray
func (a *BusinessAccessAssetsAPIService) UpdatePartnerAssetAccessHandlerImplExecute(r ApiUpdatePartnerAssetAccessHandlerImplRequest) (*UpdatePartnerAssetsResultsResponseArray, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdatePartnerAssetsResultsResponseArray
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BusinessAccessAssetsAPIService.UpdatePartnerAssetAccessHandlerImpl")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/businesses/{business_id}/partners/assets"
	localVarPath = strings.Replace(localVarPath, "{"+"business_id"+"}", url.PathEscape(parameterValueToString(r.businessId, "businessId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.businessId) < 1 {
		return localVarReturnValue, nil, reportError("businessId must have at least 1 elements")
	}
	if strlen(r.businessId) > 20 {
		return localVarReturnValue, nil, reportError("businessId must have less than 20 elements")
	}
	if r.updatePartnerAssetAccessBody == nil {
		return localVarReturnValue, nil, reportError("updatePartnerAssetAccessBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updatePartnerAssetAccessBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
