/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PinMediaSourceImagesURL type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PinMediaSourceImagesURL{}

// PinMediaSourceImagesURL Multiple images urls-based media source
type PinMediaSourceImagesURL struct {
	SourceType *string `json:"source_type,omitempty"`
	// Array with image objects.
	Items []PinMediaSourceImagesURLItemsInner `json:"items"`
	Index *int32 `json:"index,omitempty"`
}

type _PinMediaSourceImagesURL PinMediaSourceImagesURL

// NewPinMediaSourceImagesURL instantiates a new PinMediaSourceImagesURL object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPinMediaSourceImagesURL(items []PinMediaSourceImagesURLItemsInner) *PinMediaSourceImagesURL {
	this := PinMediaSourceImagesURL{}
	this.Items = items
	return &this
}

// NewPinMediaSourceImagesURLWithDefaults instantiates a new PinMediaSourceImagesURL object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPinMediaSourceImagesURLWithDefaults() *PinMediaSourceImagesURL {
	this := PinMediaSourceImagesURL{}
	return &this
}

// GetSourceType returns the SourceType field value if set, zero value otherwise.
func (o *PinMediaSourceImagesURL) GetSourceType() string {
	if o == nil || IsNil(o.SourceType) {
		var ret string
		return ret
	}
	return *o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PinMediaSourceImagesURL) GetSourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SourceType) {
		return nil, false
	}
	return o.SourceType, true
}

// HasSourceType returns a boolean if a field has been set.
func (o *PinMediaSourceImagesURL) HasSourceType() bool {
	if o != nil && !IsNil(o.SourceType) {
		return true
	}

	return false
}

// SetSourceType gets a reference to the given string and assigns it to the SourceType field.
func (o *PinMediaSourceImagesURL) SetSourceType(v string) {
	o.SourceType = &v
}

// GetItems returns the Items field value
func (o *PinMediaSourceImagesURL) GetItems() []PinMediaSourceImagesURLItemsInner {
	if o == nil {
		var ret []PinMediaSourceImagesURLItemsInner
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *PinMediaSourceImagesURL) GetItemsOk() ([]PinMediaSourceImagesURLItemsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *PinMediaSourceImagesURL) SetItems(v []PinMediaSourceImagesURLItemsInner) {
	o.Items = v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *PinMediaSourceImagesURL) GetIndex() int32 {
	if o == nil || IsNil(o.Index) {
		var ret int32
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PinMediaSourceImagesURL) GetIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *PinMediaSourceImagesURL) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int32 and assigns it to the Index field.
func (o *PinMediaSourceImagesURL) SetIndex(v int32) {
	o.Index = &v
}

func (o PinMediaSourceImagesURL) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PinMediaSourceImagesURL) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SourceType) {
		toSerialize["source_type"] = o.SourceType
	}
	toSerialize["items"] = o.Items
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	return toSerialize, nil
}

func (o *PinMediaSourceImagesURL) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPinMediaSourceImagesURL := _PinMediaSourceImagesURL{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPinMediaSourceImagesURL)

	if err != nil {
		return err
	}

	*o = PinMediaSourceImagesURL(varPinMediaSourceImagesURL)

	return err
}

type NullablePinMediaSourceImagesURL struct {
	value *PinMediaSourceImagesURL
	isSet bool
}

func (v NullablePinMediaSourceImagesURL) Get() *PinMediaSourceImagesURL {
	return v.value
}

func (v *NullablePinMediaSourceImagesURL) Set(val *PinMediaSourceImagesURL) {
	v.value = val
	v.isSet = true
}

func (v NullablePinMediaSourceImagesURL) IsSet() bool {
	return v.isSet
}

func (v *NullablePinMediaSourceImagesURL) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePinMediaSourceImagesURL(val *PinMediaSourceImagesURL) *NullablePinMediaSourceImagesURL {
	return &NullablePinMediaSourceImagesURL{value: val, isSet: true}
}

func (v NullablePinMediaSourceImagesURL) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePinMediaSourceImagesURL) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


