/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConversionEventsUserDataAnyOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConversionEventsUserDataAnyOf2{}

// ConversionEventsUserDataAnyOf2 struct for ConversionEventsUserDataAnyOf2
type ConversionEventsUserDataAnyOf2 struct {
	// Sha256 hashes of lowercase version of user's email addresses. Used for matching. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
	Em []string `json:"em,omitempty"`
	// Sha256 hashes of user's \"Google Advertising IDs\" (GAIDs) or \"Apple's Identifier for Advertisers\" (IDFAs). Used for matching. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format.
	HashedMaids []string `json:"hashed_maids,omitempty"`
	// The user's IP address, which can be either in IPv4 or IPv6 format. Used for matching. We highly recommend this for all events. It may improve reporting performance such as ROAS/CPA.
	ClientIpAddress string `json:"client_ip_address"`
	// The user agent string of the user's web browser. We highly recommend this for all events. It may improve reporting performance such as ROAS/CPA.
	ClientUserAgent string `json:"client_user_agent"`
}

type _ConversionEventsUserDataAnyOf2 ConversionEventsUserDataAnyOf2

// NewConversionEventsUserDataAnyOf2 instantiates a new ConversionEventsUserDataAnyOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConversionEventsUserDataAnyOf2(clientIpAddress string, clientUserAgent string) *ConversionEventsUserDataAnyOf2 {
	this := ConversionEventsUserDataAnyOf2{}
	this.ClientIpAddress = clientIpAddress
	this.ClientUserAgent = clientUserAgent
	return &this
}

// NewConversionEventsUserDataAnyOf2WithDefaults instantiates a new ConversionEventsUserDataAnyOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConversionEventsUserDataAnyOf2WithDefaults() *ConversionEventsUserDataAnyOf2 {
	this := ConversionEventsUserDataAnyOf2{}
	return &this
}

// GetEm returns the Em field value if set, zero value otherwise.
func (o *ConversionEventsUserDataAnyOf2) GetEm() []string {
	if o == nil || IsNil(o.Em) {
		var ret []string
		return ret
	}
	return o.Em
}

// GetEmOk returns a tuple with the Em field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionEventsUserDataAnyOf2) GetEmOk() ([]string, bool) {
	if o == nil || IsNil(o.Em) {
		return nil, false
	}
	return o.Em, true
}

// HasEm returns a boolean if a field has been set.
func (o *ConversionEventsUserDataAnyOf2) HasEm() bool {
	if o != nil && !IsNil(o.Em) {
		return true
	}

	return false
}

// SetEm gets a reference to the given []string and assigns it to the Em field.
func (o *ConversionEventsUserDataAnyOf2) SetEm(v []string) {
	o.Em = v
}

// GetHashedMaids returns the HashedMaids field value if set, zero value otherwise.
func (o *ConversionEventsUserDataAnyOf2) GetHashedMaids() []string {
	if o == nil || IsNil(o.HashedMaids) {
		var ret []string
		return ret
	}
	return o.HashedMaids
}

// GetHashedMaidsOk returns a tuple with the HashedMaids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionEventsUserDataAnyOf2) GetHashedMaidsOk() ([]string, bool) {
	if o == nil || IsNil(o.HashedMaids) {
		return nil, false
	}
	return o.HashedMaids, true
}

// HasHashedMaids returns a boolean if a field has been set.
func (o *ConversionEventsUserDataAnyOf2) HasHashedMaids() bool {
	if o != nil && !IsNil(o.HashedMaids) {
		return true
	}

	return false
}

// SetHashedMaids gets a reference to the given []string and assigns it to the HashedMaids field.
func (o *ConversionEventsUserDataAnyOf2) SetHashedMaids(v []string) {
	o.HashedMaids = v
}

// GetClientIpAddress returns the ClientIpAddress field value
func (o *ConversionEventsUserDataAnyOf2) GetClientIpAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientIpAddress
}

// GetClientIpAddressOk returns a tuple with the ClientIpAddress field value
// and a boolean to check if the value has been set.
func (o *ConversionEventsUserDataAnyOf2) GetClientIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientIpAddress, true
}

// SetClientIpAddress sets field value
func (o *ConversionEventsUserDataAnyOf2) SetClientIpAddress(v string) {
	o.ClientIpAddress = v
}

// GetClientUserAgent returns the ClientUserAgent field value
func (o *ConversionEventsUserDataAnyOf2) GetClientUserAgent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientUserAgent
}

// GetClientUserAgentOk returns a tuple with the ClientUserAgent field value
// and a boolean to check if the value has been set.
func (o *ConversionEventsUserDataAnyOf2) GetClientUserAgentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientUserAgent, true
}

// SetClientUserAgent sets field value
func (o *ConversionEventsUserDataAnyOf2) SetClientUserAgent(v string) {
	o.ClientUserAgent = v
}

func (o ConversionEventsUserDataAnyOf2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConversionEventsUserDataAnyOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Em) {
		toSerialize["em"] = o.Em
	}
	if !IsNil(o.HashedMaids) {
		toSerialize["hashed_maids"] = o.HashedMaids
	}
	toSerialize["client_ip_address"] = o.ClientIpAddress
	toSerialize["client_user_agent"] = o.ClientUserAgent
	return toSerialize, nil
}

func (o *ConversionEventsUserDataAnyOf2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"client_ip_address",
		"client_user_agent",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConversionEventsUserDataAnyOf2 := _ConversionEventsUserDataAnyOf2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConversionEventsUserDataAnyOf2)

	if err != nil {
		return err
	}

	*o = ConversionEventsUserDataAnyOf2(varConversionEventsUserDataAnyOf2)

	return err
}

type NullableConversionEventsUserDataAnyOf2 struct {
	value *ConversionEventsUserDataAnyOf2
	isSet bool
}

func (v NullableConversionEventsUserDataAnyOf2) Get() *ConversionEventsUserDataAnyOf2 {
	return v.value
}

func (v *NullableConversionEventsUserDataAnyOf2) Set(val *ConversionEventsUserDataAnyOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableConversionEventsUserDataAnyOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableConversionEventsUserDataAnyOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversionEventsUserDataAnyOf2(val *ConversionEventsUserDataAnyOf2) *NullableConversionEventsUserDataAnyOf2 {
	return &NullableConversionEventsUserDataAnyOf2{value: val, isSet: true}
}

func (v NullableConversionEventsUserDataAnyOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversionEventsUserDataAnyOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


