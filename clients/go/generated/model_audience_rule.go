/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AudienceRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AudienceRule{}

// AudienceRule JSON object defining targeted audience users. Example rule formats per audience type:<br>CUSTOMER_LIST: { \"customer_list_id\": \"&lt;customer list ID&gt;\"}<br>ACTALIKE: { \"seed_id\": [\"&lt;audience ID&gt;\"], \"country\": \"US\", \"percentage\": \"10\" }<br>(Valid countries include: \"US\", \"CA\", and \"GB\". Percentage should be 1-10.<br>The targeted audience should be this % size across Pinterest.)<br>VISITOR: { \"visitor_source_id\": [\"&lt;conversion tag ID&gt;\"], \"retention_days\": \"180\", \"event_source\": {\"=\": [\"web\", \"mobile\"]}, \"ingestion_source\": {\"=\": [\"tag\"]}}<br>(Retention days should be 1-540. Retention applies to specific customers.)<br>ENGAGEMENT: {\"engagement_domain\": [\"www.entomi.com\"], \"engager_type\": 1}<br>For more details on engagement audiences, see <a href=\"/docs/redoc/adtech_ads_v4/#section/November-2021\" target=\"_blank\">November 2021 changelog</a>.
type AudienceRule struct {
	// Valid countries include: \"US\", \"CA\", and \"GB\".
	Country *string `json:"country,omitempty"`
	// Customer list ID. For CUSTOMER_LIST `audience_type`.
	CustomerListId *string `json:"customer_list_id,omitempty" validate:"regexp=^\\\\d+$"`
	// The audience account's verified domain. **Required** for ENGAGEMENT `audience_type`.
	EngagementDomain []string `json:"engagement_domain,omitempty"`
	// Engagement type enum. Optional for ENGAGEMENT `audience_type`. Supported values are `click`, `save`, `closeup`, `comment` and `like`. All engagements are included if this field is not set. 
	EngagementType *string `json:"engagement_type,omitempty"`
	// A Pinterest tag event. Optional for VISITOR `audience_type`. Possible values are `pagevisit`, `signup`, `checkout`, `viewcategory`, `search`, `addtocart`, `watchvideo`, `lead`, and `custom`. This field also accepts a partner-defined Pinterest tag event.
	Event *string `json:"event,omitempty"`
	EventData *PinterestTagEventData `json:"event_data,omitempty"`
	// Percentage should be 1-10. The targeted audience should be this % size across Pinterest.
	Percentage *int32 `json:"percentage,omitempty"`
	// IDs of engaged organic pins. Optional for ENGAGEMENT `audience_type`. For example, \"pin_id:\": [\"34567\"]
	PinId []string `json:"pin_id,omitempty"`
	// Optional for VISITOR `audience_type`. If `true`, the specified rule on existing engagement data is applied to pre-populate the audience. If `false`, the audience is empty at creation time. The default is `true`.
	Prefill *bool `json:"prefill,omitempty"`
	// Number of days a Pinterest user remains in the audience. Optional for ENGAGEMENT and VISITOR `audience_type`. Accepted range is 1-540. Defaults to 180 if not specified.
	RetentionDays *int32 `json:"retention_days,omitempty"`
	// Audience ID(s). For ACTALIKE `audience_type`. 
	SeedId []string `json:"seed_id,omitempty"`
	// Optional for ENGAGEMENT or VISITOR `audience_type`. For ENGAGEMENT, it is the engaged pin's URL. For VISITOR, you can use it as a string or a {operator: value} object for filtering visitors based on conversion tag event URLs. Supported operators are [ =, !=, contains, not_contains].<br>Example 1:  \"url\": \"http://www.myonlinestore123.com/view_item/shoe\"<br>Example 2: \"url\": {\"contains\": \"/view_item/shoe\"}
	Url []string `json:"url,omitempty"`
	// The conversion tag ID, or the Pinterest tag ID, that you use on your website. For VISITOR `audience_type`.
	VisitorSourceId *string `json:"visitor_source_id,omitempty" validate:"regexp=^\\\\d+$"`
	// Optional for VISITOR. You can use it as a {'=': [value]}. Supported values are: web, mobile, offline
	EventSource map[string]interface{} `json:"event_source,omitempty"`
	// Optional for VISITOR. You can use it as a {'=': [value]}. Supported values are: tag, mmp, file_upload, conversions_api
	IngestionSource map[string]interface{} `json:"ingestion_source,omitempty"`
	// Optional for ENGAGEMENT. Engager type value should be 1-2.
	EngagerType *int32 `json:"engager_type,omitempty"`
	// Campaign ID for engagement audience filter.
	CampaignId []string `json:"campaign_id,omitempty"`
	// Ad ID for engagement audience filter.
	AdId []string `json:"ad_id,omitempty"`
	// Objective for engagement audience filter.
	ObjectiveType []ObjectiveType `json:"objective_type,omitempty"`
	// Ad account ID.
	AdAccountId *string `json:"ad_account_id,omitempty" validate:"regexp=^\\\\d+$"`
}

// NewAudienceRule instantiates a new AudienceRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAudienceRule() *AudienceRule {
	this := AudienceRule{}
	return &this
}

// NewAudienceRuleWithDefaults instantiates a new AudienceRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAudienceRuleWithDefaults() *AudienceRule {
	this := AudienceRule{}
	return &this
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *AudienceRule) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceRule) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *AudienceRule) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *AudienceRule) SetCountry(v string) {
	o.Country = &v
}

// GetCustomerListId returns the CustomerListId field value if set, zero value otherwise.
func (o *AudienceRule) GetCustomerListId() string {
	if o == nil || IsNil(o.CustomerListId) {
		var ret string
		return ret
	}
	return *o.CustomerListId
}

// GetCustomerListIdOk returns a tuple with the CustomerListId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceRule) GetCustomerListIdOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerListId) {
		return nil, false
	}
	return o.CustomerListId, true
}

// HasCustomerListId returns a boolean if a field has been set.
func (o *AudienceRule) HasCustomerListId() bool {
	if o != nil && !IsNil(o.CustomerListId) {
		return true
	}

	return false
}

// SetCustomerListId gets a reference to the given string and assigns it to the CustomerListId field.
func (o *AudienceRule) SetCustomerListId(v string) {
	o.CustomerListId = &v
}

// GetEngagementDomain returns the EngagementDomain field value if set, zero value otherwise.
func (o *AudienceRule) GetEngagementDomain() []string {
	if o == nil || IsNil(o.EngagementDomain) {
		var ret []string
		return ret
	}
	return o.EngagementDomain
}

// GetEngagementDomainOk returns a tuple with the EngagementDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceRule) GetEngagementDomainOk() ([]string, bool) {
	if o == nil || IsNil(o.EngagementDomain) {
		return nil, false
	}
	return o.EngagementDomain, true
}

// HasEngagementDomain returns a boolean if a field has been set.
func (o *AudienceRule) HasEngagementDomain() bool {
	if o != nil && !IsNil(o.EngagementDomain) {
		return true
	}

	return false
}

// SetEngagementDomain gets a reference to the given []string and assigns it to the EngagementDomain field.
func (o *AudienceRule) SetEngagementDomain(v []string) {
	o.EngagementDomain = v
}

// GetEngagementType returns the EngagementType field value if set, zero value otherwise.
func (o *AudienceRule) GetEngagementType() string {
	if o == nil || IsNil(o.EngagementType) {
		var ret string
		return ret
	}
	return *o.EngagementType
}

// GetEngagementTypeOk returns a tuple with the EngagementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceRule) GetEngagementTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EngagementType) {
		return nil, false
	}
	return o.EngagementType, true
}

// HasEngagementType returns a boolean if a field has been set.
func (o *AudienceRule) HasEngagementType() bool {
	if o != nil && !IsNil(o.EngagementType) {
		return true
	}

	return false
}

// SetEngagementType gets a reference to the given string and assigns it to the EngagementType field.
func (o *AudienceRule) SetEngagementType(v string) {
	o.EngagementType = &v
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *AudienceRule) GetEvent() string {
	if o == nil || IsNil(o.Event) {
		var ret string
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceRule) GetEventOk() (*string, bool) {
	if o == nil || IsNil(o.Event) {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *AudienceRule) HasEvent() bool {
	if o != nil && !IsNil(o.Event) {
		return true
	}

	return false
}

// SetEvent gets a reference to the given string and assigns it to the Event field.
func (o *AudienceRule) SetEvent(v string) {
	o.Event = &v
}

// GetEventData returns the EventData field value if set, zero value otherwise.
func (o *AudienceRule) GetEventData() PinterestTagEventData {
	if o == nil || IsNil(o.EventData) {
		var ret PinterestTagEventData
		return ret
	}
	return *o.EventData
}

// GetEventDataOk returns a tuple with the EventData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceRule) GetEventDataOk() (*PinterestTagEventData, bool) {
	if o == nil || IsNil(o.EventData) {
		return nil, false
	}
	return o.EventData, true
}

// HasEventData returns a boolean if a field has been set.
func (o *AudienceRule) HasEventData() bool {
	if o != nil && !IsNil(o.EventData) {
		return true
	}

	return false
}

// SetEventData gets a reference to the given PinterestTagEventData and assigns it to the EventData field.
func (o *AudienceRule) SetEventData(v PinterestTagEventData) {
	o.EventData = &v
}

// GetPercentage returns the Percentage field value if set, zero value otherwise.
func (o *AudienceRule) GetPercentage() int32 {
	if o == nil || IsNil(o.Percentage) {
		var ret int32
		return ret
	}
	return *o.Percentage
}

// GetPercentageOk returns a tuple with the Percentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceRule) GetPercentageOk() (*int32, bool) {
	if o == nil || IsNil(o.Percentage) {
		return nil, false
	}
	return o.Percentage, true
}

// HasPercentage returns a boolean if a field has been set.
func (o *AudienceRule) HasPercentage() bool {
	if o != nil && !IsNil(o.Percentage) {
		return true
	}

	return false
}

// SetPercentage gets a reference to the given int32 and assigns it to the Percentage field.
func (o *AudienceRule) SetPercentage(v int32) {
	o.Percentage = &v
}

// GetPinId returns the PinId field value if set, zero value otherwise.
func (o *AudienceRule) GetPinId() []string {
	if o == nil || IsNil(o.PinId) {
		var ret []string
		return ret
	}
	return o.PinId
}

// GetPinIdOk returns a tuple with the PinId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceRule) GetPinIdOk() ([]string, bool) {
	if o == nil || IsNil(o.PinId) {
		return nil, false
	}
	return o.PinId, true
}

// HasPinId returns a boolean if a field has been set.
func (o *AudienceRule) HasPinId() bool {
	if o != nil && !IsNil(o.PinId) {
		return true
	}

	return false
}

// SetPinId gets a reference to the given []string and assigns it to the PinId field.
func (o *AudienceRule) SetPinId(v []string) {
	o.PinId = v
}

// GetPrefill returns the Prefill field value if set, zero value otherwise.
func (o *AudienceRule) GetPrefill() bool {
	if o == nil || IsNil(o.Prefill) {
		var ret bool
		return ret
	}
	return *o.Prefill
}

// GetPrefillOk returns a tuple with the Prefill field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceRule) GetPrefillOk() (*bool, bool) {
	if o == nil || IsNil(o.Prefill) {
		return nil, false
	}
	return o.Prefill, true
}

// HasPrefill returns a boolean if a field has been set.
func (o *AudienceRule) HasPrefill() bool {
	if o != nil && !IsNil(o.Prefill) {
		return true
	}

	return false
}

// SetPrefill gets a reference to the given bool and assigns it to the Prefill field.
func (o *AudienceRule) SetPrefill(v bool) {
	o.Prefill = &v
}

// GetRetentionDays returns the RetentionDays field value if set, zero value otherwise.
func (o *AudienceRule) GetRetentionDays() int32 {
	if o == nil || IsNil(o.RetentionDays) {
		var ret int32
		return ret
	}
	return *o.RetentionDays
}

// GetRetentionDaysOk returns a tuple with the RetentionDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceRule) GetRetentionDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.RetentionDays) {
		return nil, false
	}
	return o.RetentionDays, true
}

// HasRetentionDays returns a boolean if a field has been set.
func (o *AudienceRule) HasRetentionDays() bool {
	if o != nil && !IsNil(o.RetentionDays) {
		return true
	}

	return false
}

// SetRetentionDays gets a reference to the given int32 and assigns it to the RetentionDays field.
func (o *AudienceRule) SetRetentionDays(v int32) {
	o.RetentionDays = &v
}

// GetSeedId returns the SeedId field value if set, zero value otherwise.
func (o *AudienceRule) GetSeedId() []string {
	if o == nil || IsNil(o.SeedId) {
		var ret []string
		return ret
	}
	return o.SeedId
}

// GetSeedIdOk returns a tuple with the SeedId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceRule) GetSeedIdOk() ([]string, bool) {
	if o == nil || IsNil(o.SeedId) {
		return nil, false
	}
	return o.SeedId, true
}

// HasSeedId returns a boolean if a field has been set.
func (o *AudienceRule) HasSeedId() bool {
	if o != nil && !IsNil(o.SeedId) {
		return true
	}

	return false
}

// SetSeedId gets a reference to the given []string and assigns it to the SeedId field.
func (o *AudienceRule) SetSeedId(v []string) {
	o.SeedId = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *AudienceRule) GetUrl() []string {
	if o == nil || IsNil(o.Url) {
		var ret []string
		return ret
	}
	return o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceRule) GetUrlOk() ([]string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *AudienceRule) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given []string and assigns it to the Url field.
func (o *AudienceRule) SetUrl(v []string) {
	o.Url = v
}

// GetVisitorSourceId returns the VisitorSourceId field value if set, zero value otherwise.
func (o *AudienceRule) GetVisitorSourceId() string {
	if o == nil || IsNil(o.VisitorSourceId) {
		var ret string
		return ret
	}
	return *o.VisitorSourceId
}

// GetVisitorSourceIdOk returns a tuple with the VisitorSourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceRule) GetVisitorSourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.VisitorSourceId) {
		return nil, false
	}
	return o.VisitorSourceId, true
}

// HasVisitorSourceId returns a boolean if a field has been set.
func (o *AudienceRule) HasVisitorSourceId() bool {
	if o != nil && !IsNil(o.VisitorSourceId) {
		return true
	}

	return false
}

// SetVisitorSourceId gets a reference to the given string and assigns it to the VisitorSourceId field.
func (o *AudienceRule) SetVisitorSourceId(v string) {
	o.VisitorSourceId = &v
}

// GetEventSource returns the EventSource field value if set, zero value otherwise.
func (o *AudienceRule) GetEventSource() map[string]interface{} {
	if o == nil || IsNil(o.EventSource) {
		var ret map[string]interface{}
		return ret
	}
	return o.EventSource
}

// GetEventSourceOk returns a tuple with the EventSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceRule) GetEventSourceOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.EventSource) {
		return map[string]interface{}{}, false
	}
	return o.EventSource, true
}

// HasEventSource returns a boolean if a field has been set.
func (o *AudienceRule) HasEventSource() bool {
	if o != nil && !IsNil(o.EventSource) {
		return true
	}

	return false
}

// SetEventSource gets a reference to the given map[string]interface{} and assigns it to the EventSource field.
func (o *AudienceRule) SetEventSource(v map[string]interface{}) {
	o.EventSource = v
}

// GetIngestionSource returns the IngestionSource field value if set, zero value otherwise.
func (o *AudienceRule) GetIngestionSource() map[string]interface{} {
	if o == nil || IsNil(o.IngestionSource) {
		var ret map[string]interface{}
		return ret
	}
	return o.IngestionSource
}

// GetIngestionSourceOk returns a tuple with the IngestionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceRule) GetIngestionSourceOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.IngestionSource) {
		return map[string]interface{}{}, false
	}
	return o.IngestionSource, true
}

// HasIngestionSource returns a boolean if a field has been set.
func (o *AudienceRule) HasIngestionSource() bool {
	if o != nil && !IsNil(o.IngestionSource) {
		return true
	}

	return false
}

// SetIngestionSource gets a reference to the given map[string]interface{} and assigns it to the IngestionSource field.
func (o *AudienceRule) SetIngestionSource(v map[string]interface{}) {
	o.IngestionSource = v
}

// GetEngagerType returns the EngagerType field value if set, zero value otherwise.
func (o *AudienceRule) GetEngagerType() int32 {
	if o == nil || IsNil(o.EngagerType) {
		var ret int32
		return ret
	}
	return *o.EngagerType
}

// GetEngagerTypeOk returns a tuple with the EngagerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceRule) GetEngagerTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.EngagerType) {
		return nil, false
	}
	return o.EngagerType, true
}

// HasEngagerType returns a boolean if a field has been set.
func (o *AudienceRule) HasEngagerType() bool {
	if o != nil && !IsNil(o.EngagerType) {
		return true
	}

	return false
}

// SetEngagerType gets a reference to the given int32 and assigns it to the EngagerType field.
func (o *AudienceRule) SetEngagerType(v int32) {
	o.EngagerType = &v
}

// GetCampaignId returns the CampaignId field value if set, zero value otherwise.
func (o *AudienceRule) GetCampaignId() []string {
	if o == nil || IsNil(o.CampaignId) {
		var ret []string
		return ret
	}
	return o.CampaignId
}

// GetCampaignIdOk returns a tuple with the CampaignId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceRule) GetCampaignIdOk() ([]string, bool) {
	if o == nil || IsNil(o.CampaignId) {
		return nil, false
	}
	return o.CampaignId, true
}

// HasCampaignId returns a boolean if a field has been set.
func (o *AudienceRule) HasCampaignId() bool {
	if o != nil && !IsNil(o.CampaignId) {
		return true
	}

	return false
}

// SetCampaignId gets a reference to the given []string and assigns it to the CampaignId field.
func (o *AudienceRule) SetCampaignId(v []string) {
	o.CampaignId = v
}

// GetAdId returns the AdId field value if set, zero value otherwise.
func (o *AudienceRule) GetAdId() []string {
	if o == nil || IsNil(o.AdId) {
		var ret []string
		return ret
	}
	return o.AdId
}

// GetAdIdOk returns a tuple with the AdId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceRule) GetAdIdOk() ([]string, bool) {
	if o == nil || IsNil(o.AdId) {
		return nil, false
	}
	return o.AdId, true
}

// HasAdId returns a boolean if a field has been set.
func (o *AudienceRule) HasAdId() bool {
	if o != nil && !IsNil(o.AdId) {
		return true
	}

	return false
}

// SetAdId gets a reference to the given []string and assigns it to the AdId field.
func (o *AudienceRule) SetAdId(v []string) {
	o.AdId = v
}

// GetObjectiveType returns the ObjectiveType field value if set, zero value otherwise.
func (o *AudienceRule) GetObjectiveType() []ObjectiveType {
	if o == nil || IsNil(o.ObjectiveType) {
		var ret []ObjectiveType
		return ret
	}
	return o.ObjectiveType
}

// GetObjectiveTypeOk returns a tuple with the ObjectiveType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceRule) GetObjectiveTypeOk() ([]ObjectiveType, bool) {
	if o == nil || IsNil(o.ObjectiveType) {
		return nil, false
	}
	return o.ObjectiveType, true
}

// HasObjectiveType returns a boolean if a field has been set.
func (o *AudienceRule) HasObjectiveType() bool {
	if o != nil && !IsNil(o.ObjectiveType) {
		return true
	}

	return false
}

// SetObjectiveType gets a reference to the given []ObjectiveType and assigns it to the ObjectiveType field.
func (o *AudienceRule) SetObjectiveType(v []ObjectiveType) {
	o.ObjectiveType = v
}

// GetAdAccountId returns the AdAccountId field value if set, zero value otherwise.
func (o *AudienceRule) GetAdAccountId() string {
	if o == nil || IsNil(o.AdAccountId) {
		var ret string
		return ret
	}
	return *o.AdAccountId
}

// GetAdAccountIdOk returns a tuple with the AdAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceRule) GetAdAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AdAccountId) {
		return nil, false
	}
	return o.AdAccountId, true
}

// HasAdAccountId returns a boolean if a field has been set.
func (o *AudienceRule) HasAdAccountId() bool {
	if o != nil && !IsNil(o.AdAccountId) {
		return true
	}

	return false
}

// SetAdAccountId gets a reference to the given string and assigns it to the AdAccountId field.
func (o *AudienceRule) SetAdAccountId(v string) {
	o.AdAccountId = &v
}

func (o AudienceRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AudienceRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.CustomerListId) {
		toSerialize["customer_list_id"] = o.CustomerListId
	}
	if !IsNil(o.EngagementDomain) {
		toSerialize["engagement_domain"] = o.EngagementDomain
	}
	if !IsNil(o.EngagementType) {
		toSerialize["engagement_type"] = o.EngagementType
	}
	if !IsNil(o.Event) {
		toSerialize["event"] = o.Event
	}
	if !IsNil(o.EventData) {
		toSerialize["event_data"] = o.EventData
	}
	if !IsNil(o.Percentage) {
		toSerialize["percentage"] = o.Percentage
	}
	if !IsNil(o.PinId) {
		toSerialize["pin_id"] = o.PinId
	}
	if !IsNil(o.Prefill) {
		toSerialize["prefill"] = o.Prefill
	}
	if !IsNil(o.RetentionDays) {
		toSerialize["retention_days"] = o.RetentionDays
	}
	if !IsNil(o.SeedId) {
		toSerialize["seed_id"] = o.SeedId
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.VisitorSourceId) {
		toSerialize["visitor_source_id"] = o.VisitorSourceId
	}
	if !IsNil(o.EventSource) {
		toSerialize["event_source"] = o.EventSource
	}
	if !IsNil(o.IngestionSource) {
		toSerialize["ingestion_source"] = o.IngestionSource
	}
	if !IsNil(o.EngagerType) {
		toSerialize["engager_type"] = o.EngagerType
	}
	if !IsNil(o.CampaignId) {
		toSerialize["campaign_id"] = o.CampaignId
	}
	if !IsNil(o.AdId) {
		toSerialize["ad_id"] = o.AdId
	}
	if !IsNil(o.ObjectiveType) {
		toSerialize["objective_type"] = o.ObjectiveType
	}
	if !IsNil(o.AdAccountId) {
		toSerialize["ad_account_id"] = o.AdAccountId
	}
	return toSerialize, nil
}

type NullableAudienceRule struct {
	value *AudienceRule
	isSet bool
}

func (v NullableAudienceRule) Get() *AudienceRule {
	return v.value
}

func (v *NullableAudienceRule) Set(val *AudienceRule) {
	v.value = val
	v.isSet = true
}

func (v NullableAudienceRule) IsSet() bool {
	return v.isSet
}

func (v *NullableAudienceRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudienceRule(val *AudienceRule) *NullableAudienceRule {
	return &NullableAudienceRule{value: val, isSet: true}
}

func (v NullableAudienceRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudienceRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


