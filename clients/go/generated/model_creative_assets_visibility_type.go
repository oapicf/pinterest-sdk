/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CreativeAssetsVisibilityType Creative assets visibility.
type CreativeAssetsVisibilityType string

// List of CreativeAssetsVisibilityType
const (
	VISIBLE CreativeAssetsVisibilityType = "VISIBLE"
	HIDDEN CreativeAssetsVisibilityType = "HIDDEN"
)

// All allowed values of CreativeAssetsVisibilityType enum
var AllowedCreativeAssetsVisibilityTypeEnumValues = []CreativeAssetsVisibilityType{
	"VISIBLE",
	"HIDDEN",
}

func (v *CreativeAssetsVisibilityType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CreativeAssetsVisibilityType(value)
	for _, existing := range AllowedCreativeAssetsVisibilityTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CreativeAssetsVisibilityType", value)
}

// NewCreativeAssetsVisibilityTypeFromValue returns a pointer to a valid CreativeAssetsVisibilityType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCreativeAssetsVisibilityTypeFromValue(v string) (*CreativeAssetsVisibilityType, error) {
	ev := CreativeAssetsVisibilityType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CreativeAssetsVisibilityType: valid values are %v", v, AllowedCreativeAssetsVisibilityTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CreativeAssetsVisibilityType) IsValid() bool {
	for _, existing := range AllowedCreativeAssetsVisibilityTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CreativeAssetsVisibilityType value
func (v CreativeAssetsVisibilityType) Ptr() *CreativeAssetsVisibilityType {
	return &v
}

type NullableCreativeAssetsVisibilityType struct {
	value *CreativeAssetsVisibilityType
	isSet bool
}

func (v NullableCreativeAssetsVisibilityType) Get() *CreativeAssetsVisibilityType {
	return v.value
}

func (v *NullableCreativeAssetsVisibilityType) Set(val *CreativeAssetsVisibilityType) {
	v.value = val
	v.isSet = true
}

func (v NullableCreativeAssetsVisibilityType) IsSet() bool {
	return v.isSet
}

func (v *NullableCreativeAssetsVisibilityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreativeAssetsVisibilityType(val *CreativeAssetsVisibilityType) *NullableCreativeAssetsVisibilityType {
	return &NullableCreativeAssetsVisibilityType{value: val, isSet: true}
}

func (v NullableCreativeAssetsVisibilityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreativeAssetsVisibilityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

