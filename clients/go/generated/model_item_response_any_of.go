/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// ItemResponseAnyOf - struct for ItemResponseAnyOf
type ItemResponseAnyOf struct {
	CatalogsCreativeAssetsItemResponse *CatalogsCreativeAssetsItemResponse
	CatalogsHotelItemResponse *CatalogsHotelItemResponse
	CatalogsRetailItemResponse *CatalogsRetailItemResponse
}

// CatalogsCreativeAssetsItemResponseAsItemResponseAnyOf is a convenience function that returns CatalogsCreativeAssetsItemResponse wrapped in ItemResponseAnyOf
func CatalogsCreativeAssetsItemResponseAsItemResponseAnyOf(v *CatalogsCreativeAssetsItemResponse) ItemResponseAnyOf {
	return ItemResponseAnyOf{
		CatalogsCreativeAssetsItemResponse: v,
	}
}

// CatalogsHotelItemResponseAsItemResponseAnyOf is a convenience function that returns CatalogsHotelItemResponse wrapped in ItemResponseAnyOf
func CatalogsHotelItemResponseAsItemResponseAnyOf(v *CatalogsHotelItemResponse) ItemResponseAnyOf {
	return ItemResponseAnyOf{
		CatalogsHotelItemResponse: v,
	}
}

// CatalogsRetailItemResponseAsItemResponseAnyOf is a convenience function that returns CatalogsRetailItemResponse wrapped in ItemResponseAnyOf
func CatalogsRetailItemResponseAsItemResponseAnyOf(v *CatalogsRetailItemResponse) ItemResponseAnyOf {
	return ItemResponseAnyOf{
		CatalogsRetailItemResponse: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ItemResponseAnyOf) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CatalogsCreativeAssetsItemResponse
	err = newStrictDecoder(data).Decode(&dst.CatalogsCreativeAssetsItemResponse)
	if err == nil {
		jsonCatalogsCreativeAssetsItemResponse, _ := json.Marshal(dst.CatalogsCreativeAssetsItemResponse)
		if string(jsonCatalogsCreativeAssetsItemResponse) == "{}" { // empty struct
			dst.CatalogsCreativeAssetsItemResponse = nil
		} else {
			if err = validator.Validate(dst.CatalogsCreativeAssetsItemResponse); err != nil {
				dst.CatalogsCreativeAssetsItemResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogsCreativeAssetsItemResponse = nil
	}

	// try to unmarshal data into CatalogsHotelItemResponse
	err = newStrictDecoder(data).Decode(&dst.CatalogsHotelItemResponse)
	if err == nil {
		jsonCatalogsHotelItemResponse, _ := json.Marshal(dst.CatalogsHotelItemResponse)
		if string(jsonCatalogsHotelItemResponse) == "{}" { // empty struct
			dst.CatalogsHotelItemResponse = nil
		} else {
			if err = validator.Validate(dst.CatalogsHotelItemResponse); err != nil {
				dst.CatalogsHotelItemResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogsHotelItemResponse = nil
	}

	// try to unmarshal data into CatalogsRetailItemResponse
	err = newStrictDecoder(data).Decode(&dst.CatalogsRetailItemResponse)
	if err == nil {
		jsonCatalogsRetailItemResponse, _ := json.Marshal(dst.CatalogsRetailItemResponse)
		if string(jsonCatalogsRetailItemResponse) == "{}" { // empty struct
			dst.CatalogsRetailItemResponse = nil
		} else {
			if err = validator.Validate(dst.CatalogsRetailItemResponse); err != nil {
				dst.CatalogsRetailItemResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogsRetailItemResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CatalogsCreativeAssetsItemResponse = nil
		dst.CatalogsHotelItemResponse = nil
		dst.CatalogsRetailItemResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ItemResponseAnyOf)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ItemResponseAnyOf)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ItemResponseAnyOf) MarshalJSON() ([]byte, error) {
	if src.CatalogsCreativeAssetsItemResponse != nil {
		return json.Marshal(&src.CatalogsCreativeAssetsItemResponse)
	}

	if src.CatalogsHotelItemResponse != nil {
		return json.Marshal(&src.CatalogsHotelItemResponse)
	}

	if src.CatalogsRetailItemResponse != nil {
		return json.Marshal(&src.CatalogsRetailItemResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ItemResponseAnyOf) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CatalogsCreativeAssetsItemResponse != nil {
		return obj.CatalogsCreativeAssetsItemResponse
	}

	if obj.CatalogsHotelItemResponse != nil {
		return obj.CatalogsHotelItemResponse
	}

	if obj.CatalogsRetailItemResponse != nil {
		return obj.CatalogsRetailItemResponse
	}

	// all schemas are nil
	return nil
}

type NullableItemResponseAnyOf struct {
	value *ItemResponseAnyOf
	isSet bool
}

func (v NullableItemResponseAnyOf) Get() *ItemResponseAnyOf {
	return v.value
}

func (v *NullableItemResponseAnyOf) Set(val *ItemResponseAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableItemResponseAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableItemResponseAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemResponseAnyOf(val *ItemResponseAnyOf) *NullableItemResponseAnyOf {
	return &NullableItemResponseAnyOf{value: val, isSet: true}
}

func (v NullableItemResponseAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemResponseAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


