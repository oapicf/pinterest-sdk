/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GenderFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GenderFilter{}

// GenderFilter struct for GenderFilter
type GenderFilter struct {
	GENDER CatalogsProductGroupMultipleGenderCriteria `json:"GENDER"`
}

type _GenderFilter GenderFilter

// NewGenderFilter instantiates a new GenderFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenderFilter(gENDER CatalogsProductGroupMultipleGenderCriteria) *GenderFilter {
	this := GenderFilter{}
	this.GENDER = gENDER
	return &this
}

// NewGenderFilterWithDefaults instantiates a new GenderFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenderFilterWithDefaults() *GenderFilter {
	this := GenderFilter{}
	return &this
}

// GetGENDER returns the GENDER field value
func (o *GenderFilter) GetGENDER() CatalogsProductGroupMultipleGenderCriteria {
	if o == nil {
		var ret CatalogsProductGroupMultipleGenderCriteria
		return ret
	}

	return o.GENDER
}

// GetGENDEROk returns a tuple with the GENDER field value
// and a boolean to check if the value has been set.
func (o *GenderFilter) GetGENDEROk() (CatalogsProductGroupMultipleGenderCriteria, bool) {
	if o == nil {
		return CatalogsProductGroupMultipleGenderCriteria{}, false
	}
	return o.GENDER, true
}

// SetGENDER sets field value
func (o *GenderFilter) SetGENDER(v CatalogsProductGroupMultipleGenderCriteria) {
	o.GENDER = v
}

func (o GenderFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GenderFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["GENDER"] = o.GENDER
	return toSerialize, nil
}

func (o *GenderFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"GENDER",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGenderFilter := _GenderFilter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGenderFilter)

	if err != nil {
		return err
	}

	*o = GenderFilter(varGenderFilter)

	return err
}

type NullableGenderFilter struct {
	value *GenderFilter
	isSet bool
}

func (v NullableGenderFilter) Get() *GenderFilter {
	return v.value
}

func (v *NullableGenderFilter) Set(val *GenderFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableGenderFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableGenderFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenderFilter(val *GenderFilter) *NullableGenderFilter {
	return &NullableGenderFilter{value: val, isSet: true}
}

func (v NullableGenderFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenderFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


