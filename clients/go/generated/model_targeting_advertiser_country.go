/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TargetingAdvertiserCountry Advertiser's ISO two character country code.
type TargetingAdvertiserCountry string

// List of TargetingAdvertiserCountry
const (
	US TargetingAdvertiserCountry = "US"
	GB TargetingAdvertiserCountry = "GB"
	CA TargetingAdvertiserCountry = "CA"
	IE TargetingAdvertiserCountry = "IE"
	AU TargetingAdvertiserCountry = "AU"
	NZ TargetingAdvertiserCountry = "NZ"
	FR TargetingAdvertiserCountry = "FR"
	SE TargetingAdvertiserCountry = "SE"
	IL TargetingAdvertiserCountry = "IL"
	DE TargetingAdvertiserCountry = "DE"
	AT TargetingAdvertiserCountry = "AT"
	IT TargetingAdvertiserCountry = "IT"
	ES TargetingAdvertiserCountry = "ES"
	NL TargetingAdvertiserCountry = "NL"
	BE TargetingAdvertiserCountry = "BE"
	PT TargetingAdvertiserCountry = "PT"
	CH TargetingAdvertiserCountry = "CH"
	HK TargetingAdvertiserCountry = "HK"
	JP TargetingAdvertiserCountry = "JP"
	KR TargetingAdvertiserCountry = "KR"
	SG TargetingAdvertiserCountry = "SG"
	NO TargetingAdvertiserCountry = "NO"
	DK TargetingAdvertiserCountry = "DK"
	FI TargetingAdvertiserCountry = "FI"
	CY TargetingAdvertiserCountry = "CY"
	LU TargetingAdvertiserCountry = "LU"
	MT TargetingAdvertiserCountry = "MT"
	PL TargetingAdvertiserCountry = "PL"
	RO TargetingAdvertiserCountry = "RO"
	HU TargetingAdvertiserCountry = "HU"
	CZ TargetingAdvertiserCountry = "CZ"
	GR TargetingAdvertiserCountry = "GR"
	SK TargetingAdvertiserCountry = "SK"
	BR TargetingAdvertiserCountry = "BR"
	MX TargetingAdvertiserCountry = "MX"
	AR TargetingAdvertiserCountry = "AR"
	CL TargetingAdvertiserCountry = "CL"
	CO TargetingAdvertiserCountry = "CO"
)

// All allowed values of TargetingAdvertiserCountry enum
var AllowedTargetingAdvertiserCountryEnumValues = []TargetingAdvertiserCountry{
	"US",
	"GB",
	"CA",
	"IE",
	"AU",
	"NZ",
	"FR",
	"SE",
	"IL",
	"DE",
	"AT",
	"IT",
	"ES",
	"NL",
	"BE",
	"PT",
	"CH",
	"HK",
	"JP",
	"KR",
	"SG",
	"NO",
	"DK",
	"FI",
	"CY",
	"LU",
	"MT",
	"PL",
	"RO",
	"HU",
	"CZ",
	"GR",
	"SK",
	"BR",
	"MX",
	"AR",
	"CL",
	"CO",
}

func (v *TargetingAdvertiserCountry) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TargetingAdvertiserCountry(value)
	for _, existing := range AllowedTargetingAdvertiserCountryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TargetingAdvertiserCountry", value)
}

// NewTargetingAdvertiserCountryFromValue returns a pointer to a valid TargetingAdvertiserCountry
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTargetingAdvertiserCountryFromValue(v string) (*TargetingAdvertiserCountry, error) {
	ev := TargetingAdvertiserCountry(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TargetingAdvertiserCountry: valid values are %v", v, AllowedTargetingAdvertiserCountryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TargetingAdvertiserCountry) IsValid() bool {
	for _, existing := range AllowedTargetingAdvertiserCountryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TargetingAdvertiserCountry value
func (v TargetingAdvertiserCountry) Ptr() *TargetingAdvertiserCountry {
	return &v
}

type NullableTargetingAdvertiserCountry struct {
	value *TargetingAdvertiserCountry
	isSet bool
}

func (v NullableTargetingAdvertiserCountry) Get() *TargetingAdvertiserCountry {
	return v.value
}

func (v *NullableTargetingAdvertiserCountry) Set(val *TargetingAdvertiserCountry) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetingAdvertiserCountry) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetingAdvertiserCountry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetingAdvertiserCountry(val *TargetingAdvertiserCountry) *NullableTargetingAdvertiserCountry {
	return &NullableTargetingAdvertiserCountry{value: val, isSet: true}
}

func (v NullableTargetingAdvertiserCountry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetingAdvertiserCountry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

