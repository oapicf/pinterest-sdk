/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// FeedsCreateRequest - struct for FeedsCreateRequest
type FeedsCreateRequest struct {
	CatalogsFeedsCreateRequest *CatalogsFeedsCreateRequest
	CatalogsVerticalFeedsCreateRequest *CatalogsVerticalFeedsCreateRequest
}

// CatalogsFeedsCreateRequestAsFeedsCreateRequest is a convenience function that returns CatalogsFeedsCreateRequest wrapped in FeedsCreateRequest
func CatalogsFeedsCreateRequestAsFeedsCreateRequest(v *CatalogsFeedsCreateRequest) FeedsCreateRequest {
	return FeedsCreateRequest{
		CatalogsFeedsCreateRequest: v,
	}
}

// CatalogsVerticalFeedsCreateRequestAsFeedsCreateRequest is a convenience function that returns CatalogsVerticalFeedsCreateRequest wrapped in FeedsCreateRequest
func CatalogsVerticalFeedsCreateRequestAsFeedsCreateRequest(v *CatalogsVerticalFeedsCreateRequest) FeedsCreateRequest {
	return FeedsCreateRequest{
		CatalogsVerticalFeedsCreateRequest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *FeedsCreateRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CatalogsFeedsCreateRequest
	err = newStrictDecoder(data).Decode(&dst.CatalogsFeedsCreateRequest)
	if err == nil {
		jsonCatalogsFeedsCreateRequest, _ := json.Marshal(dst.CatalogsFeedsCreateRequest)
		if string(jsonCatalogsFeedsCreateRequest) == "{}" { // empty struct
			dst.CatalogsFeedsCreateRequest = nil
		} else {
			if err = validator.Validate(dst.CatalogsFeedsCreateRequest); err != nil {
				dst.CatalogsFeedsCreateRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogsFeedsCreateRequest = nil
	}

	// try to unmarshal data into CatalogsVerticalFeedsCreateRequest
	err = newStrictDecoder(data).Decode(&dst.CatalogsVerticalFeedsCreateRequest)
	if err == nil {
		jsonCatalogsVerticalFeedsCreateRequest, _ := json.Marshal(dst.CatalogsVerticalFeedsCreateRequest)
		if string(jsonCatalogsVerticalFeedsCreateRequest) == "{}" { // empty struct
			dst.CatalogsVerticalFeedsCreateRequest = nil
		} else {
			if err = validator.Validate(dst.CatalogsVerticalFeedsCreateRequest); err != nil {
				dst.CatalogsVerticalFeedsCreateRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogsVerticalFeedsCreateRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CatalogsFeedsCreateRequest = nil
		dst.CatalogsVerticalFeedsCreateRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FeedsCreateRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FeedsCreateRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FeedsCreateRequest) MarshalJSON() ([]byte, error) {
	if src.CatalogsFeedsCreateRequest != nil {
		return json.Marshal(&src.CatalogsFeedsCreateRequest)
	}

	if src.CatalogsVerticalFeedsCreateRequest != nil {
		return json.Marshal(&src.CatalogsVerticalFeedsCreateRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FeedsCreateRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CatalogsFeedsCreateRequest != nil {
		return obj.CatalogsFeedsCreateRequest
	}

	if obj.CatalogsVerticalFeedsCreateRequest != nil {
		return obj.CatalogsVerticalFeedsCreateRequest
	}

	// all schemas are nil
	return nil
}

type NullableFeedsCreateRequest struct {
	value *FeedsCreateRequest
	isSet bool
}

func (v NullableFeedsCreateRequest) Get() *FeedsCreateRequest {
	return v.value
}

func (v *NullableFeedsCreateRequest) Set(val *FeedsCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFeedsCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFeedsCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeedsCreateRequest(val *FeedsCreateRequest) *NullableFeedsCreateRequest {
	return &NullableFeedsCreateRequest{value: val, isSet: true}
}

func (v NullableFeedsCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeedsCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


