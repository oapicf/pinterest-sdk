/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KeywordsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeywordsRequest{}

// KeywordsRequest struct for KeywordsRequest
type KeywordsRequest struct {
	// Keyword JSON array. Each array element has 3 fields
	Keywords []KeywordsCommon `json:"keywords"`
	// Keyword parent entity ID (advertiser, campaign, ad group).
	ParentId string `json:"parent_id" validate:"regexp=^((AG)|C)?\\\\d+$"`
}

type _KeywordsRequest KeywordsRequest

// NewKeywordsRequest instantiates a new KeywordsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeywordsRequest(keywords []KeywordsCommon, parentId string) *KeywordsRequest {
	this := KeywordsRequest{}
	this.Keywords = keywords
	this.ParentId = parentId
	return &this
}

// NewKeywordsRequestWithDefaults instantiates a new KeywordsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeywordsRequestWithDefaults() *KeywordsRequest {
	this := KeywordsRequest{}
	return &this
}

// GetKeywords returns the Keywords field value
func (o *KeywordsRequest) GetKeywords() []KeywordsCommon {
	if o == nil {
		var ret []KeywordsCommon
		return ret
	}

	return o.Keywords
}

// GetKeywordsOk returns a tuple with the Keywords field value
// and a boolean to check if the value has been set.
func (o *KeywordsRequest) GetKeywordsOk() ([]KeywordsCommon, bool) {
	if o == nil {
		return nil, false
	}
	return o.Keywords, true
}

// SetKeywords sets field value
func (o *KeywordsRequest) SetKeywords(v []KeywordsCommon) {
	o.Keywords = v
}

// GetParentId returns the ParentId field value
func (o *KeywordsRequest) GetParentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value
// and a boolean to check if the value has been set.
func (o *KeywordsRequest) GetParentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentId, true
}

// SetParentId sets field value
func (o *KeywordsRequest) SetParentId(v string) {
	o.ParentId = v
}

func (o KeywordsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeywordsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["keywords"] = o.Keywords
	toSerialize["parent_id"] = o.ParentId
	return toSerialize, nil
}

func (o *KeywordsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"keywords",
		"parent_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKeywordsRequest := _KeywordsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKeywordsRequest)

	if err != nil {
		return err
	}

	*o = KeywordsRequest(varKeywordsRequest)

	return err
}

type NullableKeywordsRequest struct {
	value *KeywordsRequest
	isSet bool
}

func (v NullableKeywordsRequest) Get() *KeywordsRequest {
	return v.value
}

func (v *NullableKeywordsRequest) Set(val *KeywordsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableKeywordsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableKeywordsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeywordsRequest(val *KeywordsRequest) *NullableKeywordsRequest {
	return &NullableKeywordsRequest{value: val, isSet: true}
}

func (v NullableKeywordsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeywordsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


