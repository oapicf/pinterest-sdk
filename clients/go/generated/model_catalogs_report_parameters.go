/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CatalogsReportParameters - Report parameters
type CatalogsReportParameters struct {
	CatalogsHotelReportParameters *CatalogsHotelReportParameters
	CatalogsRetailReportParameters *CatalogsRetailReportParameters
}

// CatalogsHotelReportParametersAsCatalogsReportParameters is a convenience function that returns CatalogsHotelReportParameters wrapped in CatalogsReportParameters
func CatalogsHotelReportParametersAsCatalogsReportParameters(v *CatalogsHotelReportParameters) CatalogsReportParameters {
	return CatalogsReportParameters{
		CatalogsHotelReportParameters: v,
	}
}

// CatalogsRetailReportParametersAsCatalogsReportParameters is a convenience function that returns CatalogsRetailReportParameters wrapped in CatalogsReportParameters
func CatalogsRetailReportParametersAsCatalogsReportParameters(v *CatalogsRetailReportParameters) CatalogsReportParameters {
	return CatalogsReportParameters{
		CatalogsRetailReportParameters: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CatalogsReportParameters) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CatalogsHotelReportParameters
	err = newStrictDecoder(data).Decode(&dst.CatalogsHotelReportParameters)
	if err == nil {
		jsonCatalogsHotelReportParameters, _ := json.Marshal(dst.CatalogsHotelReportParameters)
		if string(jsonCatalogsHotelReportParameters) == "{}" { // empty struct
			dst.CatalogsHotelReportParameters = nil
		} else {
			if err = validator.Validate(dst.CatalogsHotelReportParameters); err != nil {
				dst.CatalogsHotelReportParameters = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogsHotelReportParameters = nil
	}

	// try to unmarshal data into CatalogsRetailReportParameters
	err = newStrictDecoder(data).Decode(&dst.CatalogsRetailReportParameters)
	if err == nil {
		jsonCatalogsRetailReportParameters, _ := json.Marshal(dst.CatalogsRetailReportParameters)
		if string(jsonCatalogsRetailReportParameters) == "{}" { // empty struct
			dst.CatalogsRetailReportParameters = nil
		} else {
			if err = validator.Validate(dst.CatalogsRetailReportParameters); err != nil {
				dst.CatalogsRetailReportParameters = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogsRetailReportParameters = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CatalogsHotelReportParameters = nil
		dst.CatalogsRetailReportParameters = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CatalogsReportParameters)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CatalogsReportParameters)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CatalogsReportParameters) MarshalJSON() ([]byte, error) {
	if src.CatalogsHotelReportParameters != nil {
		return json.Marshal(&src.CatalogsHotelReportParameters)
	}

	if src.CatalogsRetailReportParameters != nil {
		return json.Marshal(&src.CatalogsRetailReportParameters)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CatalogsReportParameters) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CatalogsHotelReportParameters != nil {
		return obj.CatalogsHotelReportParameters
	}

	if obj.CatalogsRetailReportParameters != nil {
		return obj.CatalogsRetailReportParameters
	}

	// all schemas are nil
	return nil
}

type NullableCatalogsReportParameters struct {
	value *CatalogsReportParameters
	isSet bool
}

func (v NullableCatalogsReportParameters) Get() *CatalogsReportParameters {
	return v.value
}

func (v *NullableCatalogsReportParameters) Set(val *CatalogsReportParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogsReportParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogsReportParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogsReportParameters(val *CatalogsReportParameters) *NullableCatalogsReportParameters {
	return &NullableCatalogsReportParameters{value: val, isSet: true}
}

func (v NullableCatalogsReportParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogsReportParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


