/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// PinMediaSource - Pin media source.
type PinMediaSource struct {
	PinMediaSourceImageBase64 *PinMediaSourceImageBase64
	PinMediaSourceImageURL *PinMediaSourceImageURL
	PinMediaSourceImagesBase64 *PinMediaSourceImagesBase64
	PinMediaSourceImagesURL *PinMediaSourceImagesURL
	PinMediaSourcePinURL *PinMediaSourcePinURL
	PinMediaSourceVideoID *PinMediaSourceVideoID
}

// PinMediaSourceImageBase64AsPinMediaSource is a convenience function that returns PinMediaSourceImageBase64 wrapped in PinMediaSource
func PinMediaSourceImageBase64AsPinMediaSource(v *PinMediaSourceImageBase64) PinMediaSource {
	return PinMediaSource{
		PinMediaSourceImageBase64: v,
	}
}

// PinMediaSourceImageURLAsPinMediaSource is a convenience function that returns PinMediaSourceImageURL wrapped in PinMediaSource
func PinMediaSourceImageURLAsPinMediaSource(v *PinMediaSourceImageURL) PinMediaSource {
	return PinMediaSource{
		PinMediaSourceImageURL: v,
	}
}

// PinMediaSourceImagesBase64AsPinMediaSource is a convenience function that returns PinMediaSourceImagesBase64 wrapped in PinMediaSource
func PinMediaSourceImagesBase64AsPinMediaSource(v *PinMediaSourceImagesBase64) PinMediaSource {
	return PinMediaSource{
		PinMediaSourceImagesBase64: v,
	}
}

// PinMediaSourceImagesURLAsPinMediaSource is a convenience function that returns PinMediaSourceImagesURL wrapped in PinMediaSource
func PinMediaSourceImagesURLAsPinMediaSource(v *PinMediaSourceImagesURL) PinMediaSource {
	return PinMediaSource{
		PinMediaSourceImagesURL: v,
	}
}

// PinMediaSourcePinURLAsPinMediaSource is a convenience function that returns PinMediaSourcePinURL wrapped in PinMediaSource
func PinMediaSourcePinURLAsPinMediaSource(v *PinMediaSourcePinURL) PinMediaSource {
	return PinMediaSource{
		PinMediaSourcePinURL: v,
	}
}

// PinMediaSourceVideoIDAsPinMediaSource is a convenience function that returns PinMediaSourceVideoID wrapped in PinMediaSource
func PinMediaSourceVideoIDAsPinMediaSource(v *PinMediaSourceVideoID) PinMediaSource {
	return PinMediaSource{
		PinMediaSourceVideoID: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PinMediaSource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PinMediaSourceImageBase64
	err = newStrictDecoder(data).Decode(&dst.PinMediaSourceImageBase64)
	if err == nil {
		jsonPinMediaSourceImageBase64, _ := json.Marshal(dst.PinMediaSourceImageBase64)
		if string(jsonPinMediaSourceImageBase64) == "{}" { // empty struct
			dst.PinMediaSourceImageBase64 = nil
		} else {
			if err = validator.Validate(dst.PinMediaSourceImageBase64); err != nil {
				dst.PinMediaSourceImageBase64 = nil
			} else {
				match++
			}
		}
	} else {
		dst.PinMediaSourceImageBase64 = nil
	}

	// try to unmarshal data into PinMediaSourceImageURL
	err = newStrictDecoder(data).Decode(&dst.PinMediaSourceImageURL)
	if err == nil {
		jsonPinMediaSourceImageURL, _ := json.Marshal(dst.PinMediaSourceImageURL)
		if string(jsonPinMediaSourceImageURL) == "{}" { // empty struct
			dst.PinMediaSourceImageURL = nil
		} else {
			if err = validator.Validate(dst.PinMediaSourceImageURL); err != nil {
				dst.PinMediaSourceImageURL = nil
			} else {
				match++
			}
		}
	} else {
		dst.PinMediaSourceImageURL = nil
	}

	// try to unmarshal data into PinMediaSourceImagesBase64
	err = newStrictDecoder(data).Decode(&dst.PinMediaSourceImagesBase64)
	if err == nil {
		jsonPinMediaSourceImagesBase64, _ := json.Marshal(dst.PinMediaSourceImagesBase64)
		if string(jsonPinMediaSourceImagesBase64) == "{}" { // empty struct
			dst.PinMediaSourceImagesBase64 = nil
		} else {
			if err = validator.Validate(dst.PinMediaSourceImagesBase64); err != nil {
				dst.PinMediaSourceImagesBase64 = nil
			} else {
				match++
			}
		}
	} else {
		dst.PinMediaSourceImagesBase64 = nil
	}

	// try to unmarshal data into PinMediaSourceImagesURL
	err = newStrictDecoder(data).Decode(&dst.PinMediaSourceImagesURL)
	if err == nil {
		jsonPinMediaSourceImagesURL, _ := json.Marshal(dst.PinMediaSourceImagesURL)
		if string(jsonPinMediaSourceImagesURL) == "{}" { // empty struct
			dst.PinMediaSourceImagesURL = nil
		} else {
			if err = validator.Validate(dst.PinMediaSourceImagesURL); err != nil {
				dst.PinMediaSourceImagesURL = nil
			} else {
				match++
			}
		}
	} else {
		dst.PinMediaSourceImagesURL = nil
	}

	// try to unmarshal data into PinMediaSourcePinURL
	err = newStrictDecoder(data).Decode(&dst.PinMediaSourcePinURL)
	if err == nil {
		jsonPinMediaSourcePinURL, _ := json.Marshal(dst.PinMediaSourcePinURL)
		if string(jsonPinMediaSourcePinURL) == "{}" { // empty struct
			dst.PinMediaSourcePinURL = nil
		} else {
			if err = validator.Validate(dst.PinMediaSourcePinURL); err != nil {
				dst.PinMediaSourcePinURL = nil
			} else {
				match++
			}
		}
	} else {
		dst.PinMediaSourcePinURL = nil
	}

	// try to unmarshal data into PinMediaSourceVideoID
	err = newStrictDecoder(data).Decode(&dst.PinMediaSourceVideoID)
	if err == nil {
		jsonPinMediaSourceVideoID, _ := json.Marshal(dst.PinMediaSourceVideoID)
		if string(jsonPinMediaSourceVideoID) == "{}" { // empty struct
			dst.PinMediaSourceVideoID = nil
		} else {
			if err = validator.Validate(dst.PinMediaSourceVideoID); err != nil {
				dst.PinMediaSourceVideoID = nil
			} else {
				match++
			}
		}
	} else {
		dst.PinMediaSourceVideoID = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PinMediaSourceImageBase64 = nil
		dst.PinMediaSourceImageURL = nil
		dst.PinMediaSourceImagesBase64 = nil
		dst.PinMediaSourceImagesURL = nil
		dst.PinMediaSourcePinURL = nil
		dst.PinMediaSourceVideoID = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PinMediaSource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PinMediaSource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PinMediaSource) MarshalJSON() ([]byte, error) {
	if src.PinMediaSourceImageBase64 != nil {
		return json.Marshal(&src.PinMediaSourceImageBase64)
	}

	if src.PinMediaSourceImageURL != nil {
		return json.Marshal(&src.PinMediaSourceImageURL)
	}

	if src.PinMediaSourceImagesBase64 != nil {
		return json.Marshal(&src.PinMediaSourceImagesBase64)
	}

	if src.PinMediaSourceImagesURL != nil {
		return json.Marshal(&src.PinMediaSourceImagesURL)
	}

	if src.PinMediaSourcePinURL != nil {
		return json.Marshal(&src.PinMediaSourcePinURL)
	}

	if src.PinMediaSourceVideoID != nil {
		return json.Marshal(&src.PinMediaSourceVideoID)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PinMediaSource) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PinMediaSourceImageBase64 != nil {
		return obj.PinMediaSourceImageBase64
	}

	if obj.PinMediaSourceImageURL != nil {
		return obj.PinMediaSourceImageURL
	}

	if obj.PinMediaSourceImagesBase64 != nil {
		return obj.PinMediaSourceImagesBase64
	}

	if obj.PinMediaSourceImagesURL != nil {
		return obj.PinMediaSourceImagesURL
	}

	if obj.PinMediaSourcePinURL != nil {
		return obj.PinMediaSourcePinURL
	}

	if obj.PinMediaSourceVideoID != nil {
		return obj.PinMediaSourceVideoID
	}

	// all schemas are nil
	return nil
}

type NullablePinMediaSource struct {
	value *PinMediaSource
	isSet bool
}

func (v NullablePinMediaSource) Get() *PinMediaSource {
	return v.value
}

func (v *NullablePinMediaSource) Set(val *PinMediaSource) {
	v.value = val
	v.isSet = true
}

func (v NullablePinMediaSource) IsSet() bool {
	return v.isSet
}

func (v *NullablePinMediaSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePinMediaSource(val *PinMediaSource) *NullablePinMediaSource {
	return &NullablePinMediaSource{value: val, isSet: true}
}

func (v NullablePinMediaSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePinMediaSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


