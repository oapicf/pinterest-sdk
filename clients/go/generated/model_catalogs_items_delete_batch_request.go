/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogsItemsDeleteBatchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogsItemsDeleteBatchRequest{}

// CatalogsItemsDeleteBatchRequest Request object to delete catalogs items
type CatalogsItemsDeleteBatchRequest struct {
	Country Country `json:"country"`
	Language CatalogsItemsRequestLanguage `json:"language"`
	Operation BatchOperation `json:"operation"`
	// Array with catalogs items
	Items []ItemDeleteBatchRecord `json:"items"`
}

type _CatalogsItemsDeleteBatchRequest CatalogsItemsDeleteBatchRequest

// NewCatalogsItemsDeleteBatchRequest instantiates a new CatalogsItemsDeleteBatchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogsItemsDeleteBatchRequest(country Country, language CatalogsItemsRequestLanguage, operation BatchOperation, items []ItemDeleteBatchRecord) *CatalogsItemsDeleteBatchRequest {
	this := CatalogsItemsDeleteBatchRequest{}
	this.Country = country
	this.Language = language
	this.Operation = operation
	this.Items = items
	return &this
}

// NewCatalogsItemsDeleteBatchRequestWithDefaults instantiates a new CatalogsItemsDeleteBatchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogsItemsDeleteBatchRequestWithDefaults() *CatalogsItemsDeleteBatchRequest {
	this := CatalogsItemsDeleteBatchRequest{}
	return &this
}

// GetCountry returns the Country field value
func (o *CatalogsItemsDeleteBatchRequest) GetCountry() Country {
	if o == nil {
		var ret Country
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *CatalogsItemsDeleteBatchRequest) GetCountryOk() (*Country, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *CatalogsItemsDeleteBatchRequest) SetCountry(v Country) {
	o.Country = v
}

// GetLanguage returns the Language field value
func (o *CatalogsItemsDeleteBatchRequest) GetLanguage() CatalogsItemsRequestLanguage {
	if o == nil {
		var ret CatalogsItemsRequestLanguage
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *CatalogsItemsDeleteBatchRequest) GetLanguageOk() (*CatalogsItemsRequestLanguage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *CatalogsItemsDeleteBatchRequest) SetLanguage(v CatalogsItemsRequestLanguage) {
	o.Language = v
}

// GetOperation returns the Operation field value
func (o *CatalogsItemsDeleteBatchRequest) GetOperation() BatchOperation {
	if o == nil {
		var ret BatchOperation
		return ret
	}

	return o.Operation
}

// GetOperationOk returns a tuple with the Operation field value
// and a boolean to check if the value has been set.
func (o *CatalogsItemsDeleteBatchRequest) GetOperationOk() (*BatchOperation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operation, true
}

// SetOperation sets field value
func (o *CatalogsItemsDeleteBatchRequest) SetOperation(v BatchOperation) {
	o.Operation = v
}

// GetItems returns the Items field value
func (o *CatalogsItemsDeleteBatchRequest) GetItems() []ItemDeleteBatchRecord {
	if o == nil {
		var ret []ItemDeleteBatchRecord
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *CatalogsItemsDeleteBatchRequest) GetItemsOk() ([]ItemDeleteBatchRecord, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *CatalogsItemsDeleteBatchRequest) SetItems(v []ItemDeleteBatchRecord) {
	o.Items = v
}

func (o CatalogsItemsDeleteBatchRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogsItemsDeleteBatchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["country"] = o.Country
	toSerialize["language"] = o.Language
	toSerialize["operation"] = o.Operation
	toSerialize["items"] = o.Items
	return toSerialize, nil
}

func (o *CatalogsItemsDeleteBatchRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"country",
		"language",
		"operation",
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogsItemsDeleteBatchRequest := _CatalogsItemsDeleteBatchRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogsItemsDeleteBatchRequest)

	if err != nil {
		return err
	}

	*o = CatalogsItemsDeleteBatchRequest(varCatalogsItemsDeleteBatchRequest)

	return err
}

type NullableCatalogsItemsDeleteBatchRequest struct {
	value *CatalogsItemsDeleteBatchRequest
	isSet bool
}

func (v NullableCatalogsItemsDeleteBatchRequest) Get() *CatalogsItemsDeleteBatchRequest {
	return v.value
}

func (v *NullableCatalogsItemsDeleteBatchRequest) Set(val *CatalogsItemsDeleteBatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogsItemsDeleteBatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogsItemsDeleteBatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogsItemsDeleteBatchRequest(val *CatalogsItemsDeleteBatchRequest) *NullableCatalogsItemsDeleteBatchRequest {
	return &NullableCatalogsItemsDeleteBatchRequest{value: val, isSet: true}
}

func (v NullableCatalogsItemsDeleteBatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogsItemsDeleteBatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


