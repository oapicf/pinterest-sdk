/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MediaUploadRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaUploadRequest{}

// MediaUploadRequest Media upload request
type MediaUploadRequest struct {
	MediaType MediaUploadType `json:"media_type"`
}

type _MediaUploadRequest MediaUploadRequest

// NewMediaUploadRequest instantiates a new MediaUploadRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaUploadRequest(mediaType MediaUploadType) *MediaUploadRequest {
	this := MediaUploadRequest{}
	this.MediaType = mediaType
	return &this
}

// NewMediaUploadRequestWithDefaults instantiates a new MediaUploadRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaUploadRequestWithDefaults() *MediaUploadRequest {
	this := MediaUploadRequest{}
	return &this
}

// GetMediaType returns the MediaType field value
func (o *MediaUploadRequest) GetMediaType() MediaUploadType {
	if o == nil {
		var ret MediaUploadType
		return ret
	}

	return o.MediaType
}

// GetMediaTypeOk returns a tuple with the MediaType field value
// and a boolean to check if the value has been set.
func (o *MediaUploadRequest) GetMediaTypeOk() (*MediaUploadType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MediaType, true
}

// SetMediaType sets field value
func (o *MediaUploadRequest) SetMediaType(v MediaUploadType) {
	o.MediaType = v
}

func (o MediaUploadRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaUploadRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["media_type"] = o.MediaType
	return toSerialize, nil
}

func (o *MediaUploadRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"media_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMediaUploadRequest := _MediaUploadRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMediaUploadRequest)

	if err != nil {
		return err
	}

	*o = MediaUploadRequest(varMediaUploadRequest)

	return err
}

type NullableMediaUploadRequest struct {
	value *MediaUploadRequest
	isSet bool
}

func (v NullableMediaUploadRequest) Get() *MediaUploadRequest {
	return v.value
}

func (v *NullableMediaUploadRequest) Set(val *MediaUploadRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaUploadRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaUploadRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaUploadRequest(val *MediaUploadRequest) *NullableMediaUploadRequest {
	return &NullableMediaUploadRequest{value: val, isSet: true}
}

func (v NullableMediaUploadRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaUploadRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


