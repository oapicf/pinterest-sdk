/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// LeadFormQuestionType Lead form question type
type LeadFormQuestionType string

// List of LeadFormQuestionType
const (
	CUSTOM LeadFormQuestionType = "CUSTOM"
	FULL_NAME LeadFormQuestionType = "FULL_NAME"
	FIRST_NAME LeadFormQuestionType = "FIRST_NAME"
	LAST_NAME LeadFormQuestionType = "LAST_NAME"
	EMAIL LeadFormQuestionType = "EMAIL"
	PHONE_NUMBER LeadFormQuestionType = "PHONE_NUMBER"
	ZIP_CODE LeadFormQuestionType = "ZIP_CODE"
	GENDER LeadFormQuestionType = "GENDER"
	CITY LeadFormQuestionType = "CITY"
	COUNTRY LeadFormQuestionType = "COUNTRY"
	STATE_PROVINCE LeadFormQuestionType = "STATE_PROVINCE"
	ADDRESS LeadFormQuestionType = "ADDRESS"
	DATE_OF_BIRTH LeadFormQuestionType = "DATE_OF_BIRTH"
	AGE LeadFormQuestionType = "AGE"
)

// All allowed values of LeadFormQuestionType enum
var AllowedLeadFormQuestionTypeEnumValues = []LeadFormQuestionType{
	"CUSTOM",
	"FULL_NAME",
	"FIRST_NAME",
	"LAST_NAME",
	"EMAIL",
	"PHONE_NUMBER",
	"ZIP_CODE",
	"GENDER",
	"CITY",
	"COUNTRY",
	"STATE_PROVINCE",
	"ADDRESS",
	"DATE_OF_BIRTH",
	"AGE",
}

func (v *LeadFormQuestionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LeadFormQuestionType(value)
	for _, existing := range AllowedLeadFormQuestionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LeadFormQuestionType", value)
}

// NewLeadFormQuestionTypeFromValue returns a pointer to a valid LeadFormQuestionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLeadFormQuestionTypeFromValue(v string) (*LeadFormQuestionType, error) {
	ev := LeadFormQuestionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LeadFormQuestionType: valid values are %v", v, AllowedLeadFormQuestionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LeadFormQuestionType) IsValid() bool {
	for _, existing := range AllowedLeadFormQuestionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LeadFormQuestionType value
func (v LeadFormQuestionType) Ptr() *LeadFormQuestionType {
	return &v
}

type NullableLeadFormQuestionType struct {
	value *LeadFormQuestionType
	isSet bool
}

func (v NullableLeadFormQuestionType) Get() *LeadFormQuestionType {
	return v.value
}

func (v *NullableLeadFormQuestionType) Set(val *LeadFormQuestionType) {
	v.value = val
	v.isSet = true
}

func (v NullableLeadFormQuestionType) IsSet() bool {
	return v.isSet
}

func (v *NullableLeadFormQuestionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLeadFormQuestionType(val *LeadFormQuestionType) *NullableLeadFormQuestionType {
	return &NullableLeadFormQuestionType{value: val, isSet: true}
}

func (v NullableLeadFormQuestionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLeadFormQuestionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

