/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AudienceShareType the model 'AudienceShareType'
type AudienceShareType string

// List of AudienceShareType
const (
	SHARED AudienceShareType = "SHARED"
	RECEIVED AudienceShareType = "RECEIVED"
)

// All allowed values of AudienceShareType enum
var AllowedAudienceShareTypeEnumValues = []AudienceShareType{
	"SHARED",
	"RECEIVED",
}

func (v *AudienceShareType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AudienceShareType(value)
	for _, existing := range AllowedAudienceShareTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AudienceShareType", value)
}

// NewAudienceShareTypeFromValue returns a pointer to a valid AudienceShareType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAudienceShareTypeFromValue(v string) (*AudienceShareType, error) {
	ev := AudienceShareType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AudienceShareType: valid values are %v", v, AllowedAudienceShareTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AudienceShareType) IsValid() bool {
	for _, existing := range AllowedAudienceShareTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AudienceShareType value
func (v AudienceShareType) Ptr() *AudienceShareType {
	return &v
}

type NullableAudienceShareType struct {
	value *AudienceShareType
	isSet bool
}

func (v NullableAudienceShareType) Get() *AudienceShareType {
	return v.value
}

func (v *NullableAudienceShareType) Set(val *AudienceShareType) {
	v.value = val
	v.isSet = true
}

func (v NullableAudienceShareType) IsSet() bool {
	return v.isSet
}

func (v *NullableAudienceShareType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudienceShareType(val *AudienceShareType) *NullableAudienceShareType {
	return &NullableAudienceShareType{value: val, isSet: true}
}

func (v NullableAudienceShareType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudienceShareType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

