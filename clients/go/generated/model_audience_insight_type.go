/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AudienceInsightType the model 'AudienceInsightType'
type AudienceInsightType string

// List of AudienceInsightType
const (
	YOUR_TOTAL_AUDIENCE AudienceInsightType = "YOUR_TOTAL_AUDIENCE"
	YOUR_ENGAGED_AUDIENCE AudienceInsightType = "YOUR_ENGAGED_AUDIENCE"
	PINTEREST_TOTAL_AUDIENCE AudienceInsightType = "PINTEREST_TOTAL_AUDIENCE"
)

// All allowed values of AudienceInsightType enum
var AllowedAudienceInsightTypeEnumValues = []AudienceInsightType{
	"YOUR_TOTAL_AUDIENCE",
	"YOUR_ENGAGED_AUDIENCE",
	"PINTEREST_TOTAL_AUDIENCE",
}

func (v *AudienceInsightType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AudienceInsightType(value)
	for _, existing := range AllowedAudienceInsightTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AudienceInsightType", value)
}

// NewAudienceInsightTypeFromValue returns a pointer to a valid AudienceInsightType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAudienceInsightTypeFromValue(v string) (*AudienceInsightType, error) {
	ev := AudienceInsightType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AudienceInsightType: valid values are %v", v, AllowedAudienceInsightTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AudienceInsightType) IsValid() bool {
	for _, existing := range AllowedAudienceInsightTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AudienceInsightType value
func (v AudienceInsightType) Ptr() *AudienceInsightType {
	return &v
}

type NullableAudienceInsightType struct {
	value *AudienceInsightType
	isSet bool
}

func (v NullableAudienceInsightType) Get() *AudienceInsightType {
	return v.value
}

func (v *NullableAudienceInsightType) Set(val *AudienceInsightType) {
	v.value = val
	v.isSet = true
}

func (v NullableAudienceInsightType) IsSet() bool {
	return v.isSet
}

func (v *NullableAudienceInsightType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudienceInsightType(val *AudienceInsightType) *NullableAudienceInsightType {
	return &NullableAudienceInsightType{value: val, isSet: true}
}

func (v NullableAudienceInsightType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudienceInsightType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

