/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// UserListOperationType User list operation type (add or remove)
type UserListOperationType string

// List of UserListOperationType
const (
	ADD UserListOperationType = "ADD"
	REMOVE UserListOperationType = "REMOVE"
)

// All allowed values of UserListOperationType enum
var AllowedUserListOperationTypeEnumValues = []UserListOperationType{
	"ADD",
	"REMOVE",
}

func (v *UserListOperationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserListOperationType(value)
	for _, existing := range AllowedUserListOperationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserListOperationType", value)
}

// NewUserListOperationTypeFromValue returns a pointer to a valid UserListOperationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserListOperationTypeFromValue(v string) (*UserListOperationType, error) {
	ev := UserListOperationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserListOperationType: valid values are %v", v, AllowedUserListOperationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserListOperationType) IsValid() bool {
	for _, existing := range AllowedUserListOperationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserListOperationType value
func (v UserListOperationType) Ptr() *UserListOperationType {
	return &v
}

type NullableUserListOperationType struct {
	value *UserListOperationType
	isSet bool
}

func (v NullableUserListOperationType) Get() *UserListOperationType {
	return v.value
}

func (v *NullableUserListOperationType) Set(val *UserListOperationType) {
	v.value = val
	v.isSet = true
}

func (v NullableUserListOperationType) IsSet() bool {
	return v.isSet
}

func (v *NullableUserListOperationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserListOperationType(val *UserListOperationType) *NullableUserListOperationType {
	return &NullableUserListOperationType{value: val, isSet: true}
}

func (v NullableUserListOperationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserListOperationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

