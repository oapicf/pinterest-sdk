/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TargetingSpecAppType the model 'TargetingSpecAppType'
type TargetingSpecAppType string

// List of TargetingSpecAppType
const (
	ANDROID_MOBILE TargetingSpecAppType = "android_mobile"
	ANDROID_TABLET TargetingSpecAppType = "android_tablet"
	IPAD TargetingSpecAppType = "ipad"
	IPHONE TargetingSpecAppType = "iphone"
	WEB TargetingSpecAppType = "web"
	WEB_MOBILE TargetingSpecAppType = "web_mobile"
)

// All allowed values of TargetingSpecAppType enum
var AllowedTargetingSpecAppTypeEnumValues = []TargetingSpecAppType{
	"android_mobile",
	"android_tablet",
	"ipad",
	"iphone",
	"web",
	"web_mobile",
}

func (v *TargetingSpecAppType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TargetingSpecAppType(value)
	for _, existing := range AllowedTargetingSpecAppTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TargetingSpecAppType", value)
}

// NewTargetingSpecAppTypeFromValue returns a pointer to a valid TargetingSpecAppType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTargetingSpecAppTypeFromValue(v string) (*TargetingSpecAppType, error) {
	ev := TargetingSpecAppType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TargetingSpecAppType: valid values are %v", v, AllowedTargetingSpecAppTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TargetingSpecAppType) IsValid() bool {
	for _, existing := range AllowedTargetingSpecAppTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TargetingSpecAppType value
func (v TargetingSpecAppType) Ptr() *TargetingSpecAppType {
	return &v
}

type NullableTargetingSpecAppType struct {
	value *TargetingSpecAppType
	isSet bool
}

func (v NullableTargetingSpecAppType) Get() *TargetingSpecAppType {
	return v.value
}

func (v *NullableTargetingSpecAppType) Set(val *TargetingSpecAppType) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetingSpecAppType) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetingSpecAppType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetingSpecAppType(val *TargetingSpecAppType) *NullableTargetingSpecAppType {
	return &NullableTargetingSpecAppType{value: val, isSet: true}
}

func (v NullableTargetingSpecAppType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetingSpecAppType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

