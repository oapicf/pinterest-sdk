/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PinMediaSourceVideoID type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PinMediaSourceVideoID{}

// PinMediaSourceVideoID Video ID-based media source
type PinMediaSourceVideoID struct {
	SourceType string `json:"source_type"`
	// Cover image url.
	CoverImageUrl *string `json:"cover_image_url,omitempty"`
	// Content type for cover image Base64.
	CoverImageContentType *string `json:"cover_image_content_type,omitempty"`
	// Cover image Base64.
	CoverImageData *string `json:"cover_image_data,omitempty"`
	MediaId string `json:"media_id" validate:"regexp=^\\\\d+$"`
	// Set the parameter to false to create the new simplified Pin instead of the standard pin. Currently the field is only available to a list of beta users.
	IsStandard *bool `json:"is_standard,omitempty"`
}

type _PinMediaSourceVideoID PinMediaSourceVideoID

// NewPinMediaSourceVideoID instantiates a new PinMediaSourceVideoID object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPinMediaSourceVideoID(sourceType string, mediaId string) *PinMediaSourceVideoID {
	this := PinMediaSourceVideoID{}
	this.SourceType = sourceType
	this.MediaId = mediaId
	var isStandard bool = true
	this.IsStandard = &isStandard
	return &this
}

// NewPinMediaSourceVideoIDWithDefaults instantiates a new PinMediaSourceVideoID object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPinMediaSourceVideoIDWithDefaults() *PinMediaSourceVideoID {
	this := PinMediaSourceVideoID{}
	var isStandard bool = true
	this.IsStandard = &isStandard
	return &this
}

// GetSourceType returns the SourceType field value
func (o *PinMediaSourceVideoID) GetSourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value
// and a boolean to check if the value has been set.
func (o *PinMediaSourceVideoID) GetSourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceType, true
}

// SetSourceType sets field value
func (o *PinMediaSourceVideoID) SetSourceType(v string) {
	o.SourceType = v
}

// GetCoverImageUrl returns the CoverImageUrl field value if set, zero value otherwise.
func (o *PinMediaSourceVideoID) GetCoverImageUrl() string {
	if o == nil || IsNil(o.CoverImageUrl) {
		var ret string
		return ret
	}
	return *o.CoverImageUrl
}

// GetCoverImageUrlOk returns a tuple with the CoverImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PinMediaSourceVideoID) GetCoverImageUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CoverImageUrl) {
		return nil, false
	}
	return o.CoverImageUrl, true
}

// HasCoverImageUrl returns a boolean if a field has been set.
func (o *PinMediaSourceVideoID) HasCoverImageUrl() bool {
	if o != nil && !IsNil(o.CoverImageUrl) {
		return true
	}

	return false
}

// SetCoverImageUrl gets a reference to the given string and assigns it to the CoverImageUrl field.
func (o *PinMediaSourceVideoID) SetCoverImageUrl(v string) {
	o.CoverImageUrl = &v
}

// GetCoverImageContentType returns the CoverImageContentType field value if set, zero value otherwise.
func (o *PinMediaSourceVideoID) GetCoverImageContentType() string {
	if o == nil || IsNil(o.CoverImageContentType) {
		var ret string
		return ret
	}
	return *o.CoverImageContentType
}

// GetCoverImageContentTypeOk returns a tuple with the CoverImageContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PinMediaSourceVideoID) GetCoverImageContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CoverImageContentType) {
		return nil, false
	}
	return o.CoverImageContentType, true
}

// HasCoverImageContentType returns a boolean if a field has been set.
func (o *PinMediaSourceVideoID) HasCoverImageContentType() bool {
	if o != nil && !IsNil(o.CoverImageContentType) {
		return true
	}

	return false
}

// SetCoverImageContentType gets a reference to the given string and assigns it to the CoverImageContentType field.
func (o *PinMediaSourceVideoID) SetCoverImageContentType(v string) {
	o.CoverImageContentType = &v
}

// GetCoverImageData returns the CoverImageData field value if set, zero value otherwise.
func (o *PinMediaSourceVideoID) GetCoverImageData() string {
	if o == nil || IsNil(o.CoverImageData) {
		var ret string
		return ret
	}
	return *o.CoverImageData
}

// GetCoverImageDataOk returns a tuple with the CoverImageData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PinMediaSourceVideoID) GetCoverImageDataOk() (*string, bool) {
	if o == nil || IsNil(o.CoverImageData) {
		return nil, false
	}
	return o.CoverImageData, true
}

// HasCoverImageData returns a boolean if a field has been set.
func (o *PinMediaSourceVideoID) HasCoverImageData() bool {
	if o != nil && !IsNil(o.CoverImageData) {
		return true
	}

	return false
}

// SetCoverImageData gets a reference to the given string and assigns it to the CoverImageData field.
func (o *PinMediaSourceVideoID) SetCoverImageData(v string) {
	o.CoverImageData = &v
}

// GetMediaId returns the MediaId field value
func (o *PinMediaSourceVideoID) GetMediaId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MediaId
}

// GetMediaIdOk returns a tuple with the MediaId field value
// and a boolean to check if the value has been set.
func (o *PinMediaSourceVideoID) GetMediaIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MediaId, true
}

// SetMediaId sets field value
func (o *PinMediaSourceVideoID) SetMediaId(v string) {
	o.MediaId = v
}

// GetIsStandard returns the IsStandard field value if set, zero value otherwise.
func (o *PinMediaSourceVideoID) GetIsStandard() bool {
	if o == nil || IsNil(o.IsStandard) {
		var ret bool
		return ret
	}
	return *o.IsStandard
}

// GetIsStandardOk returns a tuple with the IsStandard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PinMediaSourceVideoID) GetIsStandardOk() (*bool, bool) {
	if o == nil || IsNil(o.IsStandard) {
		return nil, false
	}
	return o.IsStandard, true
}

// HasIsStandard returns a boolean if a field has been set.
func (o *PinMediaSourceVideoID) HasIsStandard() bool {
	if o != nil && !IsNil(o.IsStandard) {
		return true
	}

	return false
}

// SetIsStandard gets a reference to the given bool and assigns it to the IsStandard field.
func (o *PinMediaSourceVideoID) SetIsStandard(v bool) {
	o.IsStandard = &v
}

func (o PinMediaSourceVideoID) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PinMediaSourceVideoID) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source_type"] = o.SourceType
	if !IsNil(o.CoverImageUrl) {
		toSerialize["cover_image_url"] = o.CoverImageUrl
	}
	if !IsNil(o.CoverImageContentType) {
		toSerialize["cover_image_content_type"] = o.CoverImageContentType
	}
	if !IsNil(o.CoverImageData) {
		toSerialize["cover_image_data"] = o.CoverImageData
	}
	toSerialize["media_id"] = o.MediaId
	if !IsNil(o.IsStandard) {
		toSerialize["is_standard"] = o.IsStandard
	}
	return toSerialize, nil
}

func (o *PinMediaSourceVideoID) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source_type",
		"media_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPinMediaSourceVideoID := _PinMediaSourceVideoID{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPinMediaSourceVideoID)

	if err != nil {
		return err
	}

	*o = PinMediaSourceVideoID(varPinMediaSourceVideoID)

	return err
}

type NullablePinMediaSourceVideoID struct {
	value *PinMediaSourceVideoID
	isSet bool
}

func (v NullablePinMediaSourceVideoID) Get() *PinMediaSourceVideoID {
	return v.value
}

func (v *NullablePinMediaSourceVideoID) Set(val *PinMediaSourceVideoID) {
	v.value = val
	v.isSet = true
}

func (v NullablePinMediaSourceVideoID) IsSet() bool {
	return v.isSet
}

func (v *NullablePinMediaSourceVideoID) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePinMediaSourceVideoID(val *PinMediaSourceVideoID) *NullablePinMediaSourceVideoID {
	return &NullablePinMediaSourceVideoID{value: val, isSet: true}
}

func (v NullablePinMediaSourceVideoID) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePinMediaSourceVideoID) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


