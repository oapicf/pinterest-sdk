/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CatalogsReportStats - Diagnostics aggregated numbers
type CatalogsReportStats struct {
	CatalogsReportDistributionStats *CatalogsReportDistributionStats
	CatalogsReportFeedIngestionStats *CatalogsReportFeedIngestionStats
}

// CatalogsReportDistributionStatsAsCatalogsReportStats is a convenience function that returns CatalogsReportDistributionStats wrapped in CatalogsReportStats
func CatalogsReportDistributionStatsAsCatalogsReportStats(v *CatalogsReportDistributionStats) CatalogsReportStats {
	return CatalogsReportStats{
		CatalogsReportDistributionStats: v,
	}
}

// CatalogsReportFeedIngestionStatsAsCatalogsReportStats is a convenience function that returns CatalogsReportFeedIngestionStats wrapped in CatalogsReportStats
func CatalogsReportFeedIngestionStatsAsCatalogsReportStats(v *CatalogsReportFeedIngestionStats) CatalogsReportStats {
	return CatalogsReportStats{
		CatalogsReportFeedIngestionStats: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CatalogsReportStats) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CatalogsReportDistributionStats
	err = newStrictDecoder(data).Decode(&dst.CatalogsReportDistributionStats)
	if err == nil {
		jsonCatalogsReportDistributionStats, _ := json.Marshal(dst.CatalogsReportDistributionStats)
		if string(jsonCatalogsReportDistributionStats) == "{}" { // empty struct
			dst.CatalogsReportDistributionStats = nil
		} else {
			if err = validator.Validate(dst.CatalogsReportDistributionStats); err != nil {
				dst.CatalogsReportDistributionStats = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogsReportDistributionStats = nil
	}

	// try to unmarshal data into CatalogsReportFeedIngestionStats
	err = newStrictDecoder(data).Decode(&dst.CatalogsReportFeedIngestionStats)
	if err == nil {
		jsonCatalogsReportFeedIngestionStats, _ := json.Marshal(dst.CatalogsReportFeedIngestionStats)
		if string(jsonCatalogsReportFeedIngestionStats) == "{}" { // empty struct
			dst.CatalogsReportFeedIngestionStats = nil
		} else {
			if err = validator.Validate(dst.CatalogsReportFeedIngestionStats); err != nil {
				dst.CatalogsReportFeedIngestionStats = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogsReportFeedIngestionStats = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CatalogsReportDistributionStats = nil
		dst.CatalogsReportFeedIngestionStats = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CatalogsReportStats)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CatalogsReportStats)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CatalogsReportStats) MarshalJSON() ([]byte, error) {
	if src.CatalogsReportDistributionStats != nil {
		return json.Marshal(&src.CatalogsReportDistributionStats)
	}

	if src.CatalogsReportFeedIngestionStats != nil {
		return json.Marshal(&src.CatalogsReportFeedIngestionStats)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CatalogsReportStats) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CatalogsReportDistributionStats != nil {
		return obj.CatalogsReportDistributionStats
	}

	if obj.CatalogsReportFeedIngestionStats != nil {
		return obj.CatalogsReportFeedIngestionStats
	}

	// all schemas are nil
	return nil
}

type NullableCatalogsReportStats struct {
	value *CatalogsReportStats
	isSet bool
}

func (v NullableCatalogsReportStats) Get() *CatalogsReportStats {
	return v.value
}

func (v *NullableCatalogsReportStats) Set(val *CatalogsReportStats) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogsReportStats) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogsReportStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogsReportStats(val *CatalogsReportStats) *NullableCatalogsReportStats {
	return &NullableCatalogsReportStats{value: val, isSet: true}
}

func (v NullableCatalogsReportStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogsReportStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


