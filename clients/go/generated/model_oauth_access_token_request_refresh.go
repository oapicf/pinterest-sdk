/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OauthAccessTokenRequestRefresh type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OauthAccessTokenRequestRefresh{}

// OauthAccessTokenRequestRefresh A request to exchange a refresh token for a new access token.
type OauthAccessTokenRequestRefresh struct {
	GrantType string `json:"grant_type"`
	RefreshToken string `json:"refresh_token"`
	Scope *string `json:"scope,omitempty"`
	// Setting this field to <code>true</code> will add a new refresh token to your 200 response, as well as the refresh_token_expires_in and refresh_token_expires_at fields. To see the structure of this payload, set the 200 response_type to \"everlasting_refresh\".
	RefreshOn *bool `json:"refresh_on,omitempty"`
}

type _OauthAccessTokenRequestRefresh OauthAccessTokenRequestRefresh

// NewOauthAccessTokenRequestRefresh instantiates a new OauthAccessTokenRequestRefresh object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOauthAccessTokenRequestRefresh(grantType string, refreshToken string) *OauthAccessTokenRequestRefresh {
	this := OauthAccessTokenRequestRefresh{}
	this.RefreshToken = refreshToken
	return &this
}

// NewOauthAccessTokenRequestRefreshWithDefaults instantiates a new OauthAccessTokenRequestRefresh object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOauthAccessTokenRequestRefreshWithDefaults() *OauthAccessTokenRequestRefresh {
	this := OauthAccessTokenRequestRefresh{}
	return &this
}

// GetGrantType returns the GrantType field value
func (o *OauthAccessTokenRequestRefresh) GetGrantType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GrantType
}

// GetGrantTypeOk returns a tuple with the GrantType field value
// and a boolean to check if the value has been set.
func (o *OauthAccessTokenRequestRefresh) GetGrantTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GrantType, true
}

// SetGrantType sets field value
func (o *OauthAccessTokenRequestRefresh) SetGrantType(v string) {
	o.GrantType = v
}

// GetRefreshToken returns the RefreshToken field value
func (o *OauthAccessTokenRequestRefresh) GetRefreshToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RefreshToken
}

// GetRefreshTokenOk returns a tuple with the RefreshToken field value
// and a boolean to check if the value has been set.
func (o *OauthAccessTokenRequestRefresh) GetRefreshTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefreshToken, true
}

// SetRefreshToken sets field value
func (o *OauthAccessTokenRequestRefresh) SetRefreshToken(v string) {
	o.RefreshToken = v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *OauthAccessTokenRequestRefresh) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OauthAccessTokenRequestRefresh) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *OauthAccessTokenRequestRefresh) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *OauthAccessTokenRequestRefresh) SetScope(v string) {
	o.Scope = &v
}

// GetRefreshOn returns the RefreshOn field value if set, zero value otherwise.
func (o *OauthAccessTokenRequestRefresh) GetRefreshOn() bool {
	if o == nil || IsNil(o.RefreshOn) {
		var ret bool
		return ret
	}
	return *o.RefreshOn
}

// GetRefreshOnOk returns a tuple with the RefreshOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OauthAccessTokenRequestRefresh) GetRefreshOnOk() (*bool, bool) {
	if o == nil || IsNil(o.RefreshOn) {
		return nil, false
	}
	return o.RefreshOn, true
}

// HasRefreshOn returns a boolean if a field has been set.
func (o *OauthAccessTokenRequestRefresh) HasRefreshOn() bool {
	if o != nil && !IsNil(o.RefreshOn) {
		return true
	}

	return false
}

// SetRefreshOn gets a reference to the given bool and assigns it to the RefreshOn field.
func (o *OauthAccessTokenRequestRefresh) SetRefreshOn(v bool) {
	o.RefreshOn = &v
}

func (o OauthAccessTokenRequestRefresh) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OauthAccessTokenRequestRefresh) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["grant_type"] = o.GrantType
	toSerialize["refresh_token"] = o.RefreshToken
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.RefreshOn) {
		toSerialize["refresh_on"] = o.RefreshOn
	}
	return toSerialize, nil
}

func (o *OauthAccessTokenRequestRefresh) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"grant_type",
		"refresh_token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOauthAccessTokenRequestRefresh := _OauthAccessTokenRequestRefresh{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOauthAccessTokenRequestRefresh)

	if err != nil {
		return err
	}

	*o = OauthAccessTokenRequestRefresh(varOauthAccessTokenRequestRefresh)

	return err
}

type NullableOauthAccessTokenRequestRefresh struct {
	value *OauthAccessTokenRequestRefresh
	isSet bool
}

func (v NullableOauthAccessTokenRequestRefresh) Get() *OauthAccessTokenRequestRefresh {
	return v.value
}

func (v *NullableOauthAccessTokenRequestRefresh) Set(val *OauthAccessTokenRequestRefresh) {
	v.value = val
	v.isSet = true
}

func (v NullableOauthAccessTokenRequestRefresh) IsSet() bool {
	return v.isSet
}

func (v *NullableOauthAccessTokenRequestRefresh) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOauthAccessTokenRequestRefresh(val *OauthAccessTokenRequestRefresh) *NullableOauthAccessTokenRequestRefresh {
	return &NullableOauthAccessTokenRequestRefresh{value: val, isSet: true}
}

func (v NullableOauthAccessTokenRequestRefresh) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOauthAccessTokenRequestRefresh) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


