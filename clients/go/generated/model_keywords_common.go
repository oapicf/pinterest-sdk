/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KeywordsCommon type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeywordsCommon{}

// KeywordsCommon struct for KeywordsCommon
type KeywordsCommon struct {
	// </p><strong>Note:</strong> bid field has been deprecated. Input will not be set and field will return null. Keyword custom bid in microcurrency - null if inherited from parent ad group.
	Bid NullableInt32 `json:"bid,omitempty"`
	MatchType NullableMatchTypeResponse `json:"match_type"`
	// Keyword value (120 chars max).
	Value string `json:"value"`
}

type _KeywordsCommon KeywordsCommon

// NewKeywordsCommon instantiates a new KeywordsCommon object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeywordsCommon(matchType NullableMatchTypeResponse, value string) *KeywordsCommon {
	this := KeywordsCommon{}
	this.MatchType = matchType
	this.Value = value
	return &this
}

// NewKeywordsCommonWithDefaults instantiates a new KeywordsCommon object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeywordsCommonWithDefaults() *KeywordsCommon {
	this := KeywordsCommon{}
	return &this
}

// GetBid returns the Bid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeywordsCommon) GetBid() int32 {
	if o == nil || IsNil(o.Bid.Get()) {
		var ret int32
		return ret
	}
	return *o.Bid.Get()
}

// GetBidOk returns a tuple with the Bid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeywordsCommon) GetBidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bid.Get(), o.Bid.IsSet()
}

// HasBid returns a boolean if a field has been set.
func (o *KeywordsCommon) HasBid() bool {
	if o != nil && o.Bid.IsSet() {
		return true
	}

	return false
}

// SetBid gets a reference to the given NullableInt32 and assigns it to the Bid field.
func (o *KeywordsCommon) SetBid(v int32) {
	o.Bid.Set(&v)
}
// SetBidNil sets the value for Bid to be an explicit nil
func (o *KeywordsCommon) SetBidNil() {
	o.Bid.Set(nil)
}

// UnsetBid ensures that no value is present for Bid, not even an explicit nil
func (o *KeywordsCommon) UnsetBid() {
	o.Bid.Unset()
}

// GetMatchType returns the MatchType field value
// If the value is explicit nil, the zero value for MatchTypeResponse will be returned
func (o *KeywordsCommon) GetMatchType() MatchTypeResponse {
	if o == nil || o.MatchType.Get() == nil {
		var ret MatchTypeResponse
		return ret
	}

	return *o.MatchType.Get()
}

// GetMatchTypeOk returns a tuple with the MatchType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeywordsCommon) GetMatchTypeOk() (*MatchTypeResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.MatchType.Get(), o.MatchType.IsSet()
}

// SetMatchType sets field value
func (o *KeywordsCommon) SetMatchType(v MatchTypeResponse) {
	o.MatchType.Set(&v)
}

// GetValue returns the Value field value
func (o *KeywordsCommon) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *KeywordsCommon) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *KeywordsCommon) SetValue(v string) {
	o.Value = v
}

func (o KeywordsCommon) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeywordsCommon) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Bid.IsSet() {
		toSerialize["bid"] = o.Bid.Get()
	}
	toSerialize["match_type"] = o.MatchType.Get()
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *KeywordsCommon) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"match_type",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKeywordsCommon := _KeywordsCommon{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKeywordsCommon)

	if err != nil {
		return err
	}

	*o = KeywordsCommon(varKeywordsCommon)

	return err
}

type NullableKeywordsCommon struct {
	value *KeywordsCommon
	isSet bool
}

func (v NullableKeywordsCommon) Get() *KeywordsCommon {
	return v.value
}

func (v *NullableKeywordsCommon) Set(val *KeywordsCommon) {
	v.value = val
	v.isSet = true
}

func (v NullableKeywordsCommon) IsSet() bool {
	return v.isSet
}

func (v *NullableKeywordsCommon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeywordsCommon(val *KeywordsCommon) *NullableKeywordsCommon {
	return &NullableKeywordsCommon{value: val, isSet: true}
}

func (v NullableKeywordsCommon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeywordsCommon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


