/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MediaUploadStatus Media upload status
type MediaUploadStatus string

// List of MediaUploadStatus
const (
	REGISTERED MediaUploadStatus = "registered"
	PROCESSING MediaUploadStatus = "processing"
	SUCCEEDED MediaUploadStatus = "succeeded"
	FAILED MediaUploadStatus = "failed"
)

// All allowed values of MediaUploadStatus enum
var AllowedMediaUploadStatusEnumValues = []MediaUploadStatus{
	"registered",
	"processing",
	"succeeded",
	"failed",
}

func (v *MediaUploadStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MediaUploadStatus(value)
	for _, existing := range AllowedMediaUploadStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MediaUploadStatus", value)
}

// NewMediaUploadStatusFromValue returns a pointer to a valid MediaUploadStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMediaUploadStatusFromValue(v string) (*MediaUploadStatus, error) {
	ev := MediaUploadStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MediaUploadStatus: valid values are %v", v, AllowedMediaUploadStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MediaUploadStatus) IsValid() bool {
	for _, existing := range AllowedMediaUploadStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MediaUploadStatus value
func (v MediaUploadStatus) Ptr() *MediaUploadStatus {
	return &v
}

type NullableMediaUploadStatus struct {
	value *MediaUploadStatus
	isSet bool
}

func (v NullableMediaUploadStatus) Get() *MediaUploadStatus {
	return v.value
}

func (v *NullableMediaUploadStatus) Set(val *MediaUploadStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaUploadStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaUploadStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaUploadStatus(val *MediaUploadStatus) *NullableMediaUploadStatus {
	return &NullableMediaUploadStatus{value: val, isSet: true}
}

func (v NullableMediaUploadStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaUploadStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

