/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// AdvancedAuctionItemsSubmitRecord - Object describing an item bid option operation
type AdvancedAuctionItemsSubmitRecord struct {
	AdvancedAuctionItemsSubmitDeleteRecord *AdvancedAuctionItemsSubmitDeleteRecord
	AdvancedAuctionItemsSubmitUpsertRecord *AdvancedAuctionItemsSubmitUpsertRecord
}

// AdvancedAuctionItemsSubmitDeleteRecordAsAdvancedAuctionItemsSubmitRecord is a convenience function that returns AdvancedAuctionItemsSubmitDeleteRecord wrapped in AdvancedAuctionItemsSubmitRecord
func AdvancedAuctionItemsSubmitDeleteRecordAsAdvancedAuctionItemsSubmitRecord(v *AdvancedAuctionItemsSubmitDeleteRecord) AdvancedAuctionItemsSubmitRecord {
	return AdvancedAuctionItemsSubmitRecord{
		AdvancedAuctionItemsSubmitDeleteRecord: v,
	}
}

// AdvancedAuctionItemsSubmitUpsertRecordAsAdvancedAuctionItemsSubmitRecord is a convenience function that returns AdvancedAuctionItemsSubmitUpsertRecord wrapped in AdvancedAuctionItemsSubmitRecord
func AdvancedAuctionItemsSubmitUpsertRecordAsAdvancedAuctionItemsSubmitRecord(v *AdvancedAuctionItemsSubmitUpsertRecord) AdvancedAuctionItemsSubmitRecord {
	return AdvancedAuctionItemsSubmitRecord{
		AdvancedAuctionItemsSubmitUpsertRecord: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AdvancedAuctionItemsSubmitRecord) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AdvancedAuctionItemsSubmitDeleteRecord
	err = newStrictDecoder(data).Decode(&dst.AdvancedAuctionItemsSubmitDeleteRecord)
	if err == nil {
		jsonAdvancedAuctionItemsSubmitDeleteRecord, _ := json.Marshal(dst.AdvancedAuctionItemsSubmitDeleteRecord)
		if string(jsonAdvancedAuctionItemsSubmitDeleteRecord) == "{}" { // empty struct
			dst.AdvancedAuctionItemsSubmitDeleteRecord = nil
		} else {
			if err = validator.Validate(dst.AdvancedAuctionItemsSubmitDeleteRecord); err != nil {
				dst.AdvancedAuctionItemsSubmitDeleteRecord = nil
			} else {
				match++
			}
		}
	} else {
		dst.AdvancedAuctionItemsSubmitDeleteRecord = nil
	}

	// try to unmarshal data into AdvancedAuctionItemsSubmitUpsertRecord
	err = newStrictDecoder(data).Decode(&dst.AdvancedAuctionItemsSubmitUpsertRecord)
	if err == nil {
		jsonAdvancedAuctionItemsSubmitUpsertRecord, _ := json.Marshal(dst.AdvancedAuctionItemsSubmitUpsertRecord)
		if string(jsonAdvancedAuctionItemsSubmitUpsertRecord) == "{}" { // empty struct
			dst.AdvancedAuctionItemsSubmitUpsertRecord = nil
		} else {
			if err = validator.Validate(dst.AdvancedAuctionItemsSubmitUpsertRecord); err != nil {
				dst.AdvancedAuctionItemsSubmitUpsertRecord = nil
			} else {
				match++
			}
		}
	} else {
		dst.AdvancedAuctionItemsSubmitUpsertRecord = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AdvancedAuctionItemsSubmitDeleteRecord = nil
		dst.AdvancedAuctionItemsSubmitUpsertRecord = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AdvancedAuctionItemsSubmitRecord)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AdvancedAuctionItemsSubmitRecord)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AdvancedAuctionItemsSubmitRecord) MarshalJSON() ([]byte, error) {
	if src.AdvancedAuctionItemsSubmitDeleteRecord != nil {
		return json.Marshal(&src.AdvancedAuctionItemsSubmitDeleteRecord)
	}

	if src.AdvancedAuctionItemsSubmitUpsertRecord != nil {
		return json.Marshal(&src.AdvancedAuctionItemsSubmitUpsertRecord)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AdvancedAuctionItemsSubmitRecord) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AdvancedAuctionItemsSubmitDeleteRecord != nil {
		return obj.AdvancedAuctionItemsSubmitDeleteRecord
	}

	if obj.AdvancedAuctionItemsSubmitUpsertRecord != nil {
		return obj.AdvancedAuctionItemsSubmitUpsertRecord
	}

	// all schemas are nil
	return nil
}

type NullableAdvancedAuctionItemsSubmitRecord struct {
	value *AdvancedAuctionItemsSubmitRecord
	isSet bool
}

func (v NullableAdvancedAuctionItemsSubmitRecord) Get() *AdvancedAuctionItemsSubmitRecord {
	return v.value
}

func (v *NullableAdvancedAuctionItemsSubmitRecord) Set(val *AdvancedAuctionItemsSubmitRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvancedAuctionItemsSubmitRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvancedAuctionItemsSubmitRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvancedAuctionItemsSubmitRecord(val *AdvancedAuctionItemsSubmitRecord) *NullableAdvancedAuctionItemsSubmitRecord {
	return &NullableAdvancedAuctionItemsSubmitRecord{value: val, isSet: true}
}

func (v NullableAdvancedAuctionItemsSubmitRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvancedAuctionItemsSubmitRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


