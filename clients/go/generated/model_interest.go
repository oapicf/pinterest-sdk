/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Interest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Interest{}

// Interest struct for Interest
type Interest struct {
	CanonicalUrl *string `json:"canonical_url,omitempty"`
	Id *string `json:"id,omitempty" validate:"regexp=^\\\\d+$"`
	Key *string `json:"key,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewInterest instantiates a new Interest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterest() *Interest {
	this := Interest{}
	return &this
}

// NewInterestWithDefaults instantiates a new Interest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterestWithDefaults() *Interest {
	this := Interest{}
	return &this
}

// GetCanonicalUrl returns the CanonicalUrl field value if set, zero value otherwise.
func (o *Interest) GetCanonicalUrl() string {
	if o == nil || IsNil(o.CanonicalUrl) {
		var ret string
		return ret
	}
	return *o.CanonicalUrl
}

// GetCanonicalUrlOk returns a tuple with the CanonicalUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interest) GetCanonicalUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CanonicalUrl) {
		return nil, false
	}
	return o.CanonicalUrl, true
}

// HasCanonicalUrl returns a boolean if a field has been set.
func (o *Interest) HasCanonicalUrl() bool {
	if o != nil && !IsNil(o.CanonicalUrl) {
		return true
	}

	return false
}

// SetCanonicalUrl gets a reference to the given string and assigns it to the CanonicalUrl field.
func (o *Interest) SetCanonicalUrl(v string) {
	o.CanonicalUrl = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Interest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Interest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Interest) SetId(v string) {
	o.Id = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *Interest) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interest) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *Interest) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *Interest) SetKey(v string) {
	o.Key = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Interest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Interest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Interest) SetName(v string) {
	o.Name = &v
}

func (o Interest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Interest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CanonicalUrl) {
		toSerialize["canonical_url"] = o.CanonicalUrl
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableInterest struct {
	value *Interest
	isSet bool
}

func (v NullableInterest) Get() *Interest {
	return v.value
}

func (v *NullableInterest) Set(val *Interest) {
	v.value = val
	v.isSet = true
}

func (v NullableInterest) IsSet() bool {
	return v.isSet
}

func (v *NullableInterest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterest(val *Interest) *NullableInterest {
	return &NullableInterest{value: val, isSet: true}
}

func (v NullableInterest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


