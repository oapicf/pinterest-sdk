/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// ItemsBatchPostRequest - struct for ItemsBatchPostRequest
type ItemsBatchPostRequest struct {
	CatalogsItemsBatchRequest *CatalogsItemsBatchRequest
	CatalogsVerticalBatchRequest *CatalogsVerticalBatchRequest
}

// CatalogsItemsBatchRequestAsItemsBatchPostRequest is a convenience function that returns CatalogsItemsBatchRequest wrapped in ItemsBatchPostRequest
func CatalogsItemsBatchRequestAsItemsBatchPostRequest(v *CatalogsItemsBatchRequest) ItemsBatchPostRequest {
	return ItemsBatchPostRequest{
		CatalogsItemsBatchRequest: v,
	}
}

// CatalogsVerticalBatchRequestAsItemsBatchPostRequest is a convenience function that returns CatalogsVerticalBatchRequest wrapped in ItemsBatchPostRequest
func CatalogsVerticalBatchRequestAsItemsBatchPostRequest(v *CatalogsVerticalBatchRequest) ItemsBatchPostRequest {
	return ItemsBatchPostRequest{
		CatalogsVerticalBatchRequest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ItemsBatchPostRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CatalogsItemsBatchRequest
	err = newStrictDecoder(data).Decode(&dst.CatalogsItemsBatchRequest)
	if err == nil {
		jsonCatalogsItemsBatchRequest, _ := json.Marshal(dst.CatalogsItemsBatchRequest)
		if string(jsonCatalogsItemsBatchRequest) == "{}" { // empty struct
			dst.CatalogsItemsBatchRequest = nil
		} else {
			if err = validator.Validate(dst.CatalogsItemsBatchRequest); err != nil {
				dst.CatalogsItemsBatchRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogsItemsBatchRequest = nil
	}

	// try to unmarshal data into CatalogsVerticalBatchRequest
	err = newStrictDecoder(data).Decode(&dst.CatalogsVerticalBatchRequest)
	if err == nil {
		jsonCatalogsVerticalBatchRequest, _ := json.Marshal(dst.CatalogsVerticalBatchRequest)
		if string(jsonCatalogsVerticalBatchRequest) == "{}" { // empty struct
			dst.CatalogsVerticalBatchRequest = nil
		} else {
			if err = validator.Validate(dst.CatalogsVerticalBatchRequest); err != nil {
				dst.CatalogsVerticalBatchRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogsVerticalBatchRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CatalogsItemsBatchRequest = nil
		dst.CatalogsVerticalBatchRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ItemsBatchPostRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ItemsBatchPostRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ItemsBatchPostRequest) MarshalJSON() ([]byte, error) {
	if src.CatalogsItemsBatchRequest != nil {
		return json.Marshal(&src.CatalogsItemsBatchRequest)
	}

	if src.CatalogsVerticalBatchRequest != nil {
		return json.Marshal(&src.CatalogsVerticalBatchRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ItemsBatchPostRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CatalogsItemsBatchRequest != nil {
		return obj.CatalogsItemsBatchRequest
	}

	if obj.CatalogsVerticalBatchRequest != nil {
		return obj.CatalogsVerticalBatchRequest
	}

	// all schemas are nil
	return nil
}

type NullableItemsBatchPostRequest struct {
	value *ItemsBatchPostRequest
	isSet bool
}

func (v NullableItemsBatchPostRequest) Get() *ItemsBatchPostRequest {
	return v.value
}

func (v *NullableItemsBatchPostRequest) Set(val *ItemsBatchPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableItemsBatchPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableItemsBatchPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemsBatchPostRequest(val *ItemsBatchPostRequest) *NullableItemsBatchPostRequest {
	return &NullableItemsBatchPostRequest{value: val, isSet: true}
}

func (v NullableItemsBatchPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemsBatchPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


