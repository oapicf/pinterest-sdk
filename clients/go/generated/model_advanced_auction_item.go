/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AdvancedAuctionItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvancedAuctionItem{}

// AdvancedAuctionItem struct for AdvancedAuctionItem
type AdvancedAuctionItem struct {
	// The catalog retail item id in the merchant namespace
	ItemId string `json:"item_id"`
	Country Country `json:"country"`
	Language Language `json:"language"`
	BidOptions AdvancedAuctionBidOptions `json:"bid_options"`
}

type _AdvancedAuctionItem AdvancedAuctionItem

// NewAdvancedAuctionItem instantiates a new AdvancedAuctionItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvancedAuctionItem(itemId string, country Country, language Language, bidOptions AdvancedAuctionBidOptions) *AdvancedAuctionItem {
	this := AdvancedAuctionItem{}
	this.ItemId = itemId
	this.Country = country
	this.Language = language
	this.BidOptions = bidOptions
	return &this
}

// NewAdvancedAuctionItemWithDefaults instantiates a new AdvancedAuctionItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvancedAuctionItemWithDefaults() *AdvancedAuctionItem {
	this := AdvancedAuctionItem{}
	return &this
}

// GetItemId returns the ItemId field value
func (o *AdvancedAuctionItem) GetItemId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value
// and a boolean to check if the value has been set.
func (o *AdvancedAuctionItem) GetItemIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemId, true
}

// SetItemId sets field value
func (o *AdvancedAuctionItem) SetItemId(v string) {
	o.ItemId = v
}

// GetCountry returns the Country field value
func (o *AdvancedAuctionItem) GetCountry() Country {
	if o == nil {
		var ret Country
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *AdvancedAuctionItem) GetCountryOk() (*Country, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *AdvancedAuctionItem) SetCountry(v Country) {
	o.Country = v
}

// GetLanguage returns the Language field value
func (o *AdvancedAuctionItem) GetLanguage() Language {
	if o == nil {
		var ret Language
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *AdvancedAuctionItem) GetLanguageOk() (*Language, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *AdvancedAuctionItem) SetLanguage(v Language) {
	o.Language = v
}

// GetBidOptions returns the BidOptions field value
func (o *AdvancedAuctionItem) GetBidOptions() AdvancedAuctionBidOptions {
	if o == nil {
		var ret AdvancedAuctionBidOptions
		return ret
	}

	return o.BidOptions
}

// GetBidOptionsOk returns a tuple with the BidOptions field value
// and a boolean to check if the value has been set.
func (o *AdvancedAuctionItem) GetBidOptionsOk() (*AdvancedAuctionBidOptions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BidOptions, true
}

// SetBidOptions sets field value
func (o *AdvancedAuctionItem) SetBidOptions(v AdvancedAuctionBidOptions) {
	o.BidOptions = v
}

func (o AdvancedAuctionItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvancedAuctionItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["item_id"] = o.ItemId
	toSerialize["country"] = o.Country
	toSerialize["language"] = o.Language
	toSerialize["bid_options"] = o.BidOptions
	return toSerialize, nil
}

func (o *AdvancedAuctionItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"item_id",
		"country",
		"language",
		"bid_options",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAdvancedAuctionItem := _AdvancedAuctionItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAdvancedAuctionItem)

	if err != nil {
		return err
	}

	*o = AdvancedAuctionItem(varAdvancedAuctionItem)

	return err
}

type NullableAdvancedAuctionItem struct {
	value *AdvancedAuctionItem
	isSet bool
}

func (v NullableAdvancedAuctionItem) Get() *AdvancedAuctionItem {
	return v.value
}

func (v *NullableAdvancedAuctionItem) Set(val *AdvancedAuctionItem) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvancedAuctionItem) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvancedAuctionItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvancedAuctionItem(val *AdvancedAuctionItem) *NullableAdvancedAuctionItem {
	return &NullableAdvancedAuctionItem{value: val, isSet: true}
}

func (v NullableAdvancedAuctionItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvancedAuctionItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


