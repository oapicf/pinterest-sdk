/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogsHotelProductGroupProductCounts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogsHotelProductGroupProductCounts{}

// CatalogsHotelProductGroupProductCounts Product counts for a Hotel CatalogsProductGroup
type CatalogsHotelProductGroupProductCounts struct {
	CatalogType string `json:"catalog_type"`
	Total float32 `json:"total"`
}

type _CatalogsHotelProductGroupProductCounts CatalogsHotelProductGroupProductCounts

// NewCatalogsHotelProductGroupProductCounts instantiates a new CatalogsHotelProductGroupProductCounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogsHotelProductGroupProductCounts(catalogType string, total float32) *CatalogsHotelProductGroupProductCounts {
	this := CatalogsHotelProductGroupProductCounts{}
	this.CatalogType = catalogType
	this.Total = total
	return &this
}

// NewCatalogsHotelProductGroupProductCountsWithDefaults instantiates a new CatalogsHotelProductGroupProductCounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogsHotelProductGroupProductCountsWithDefaults() *CatalogsHotelProductGroupProductCounts {
	this := CatalogsHotelProductGroupProductCounts{}
	return &this
}

// GetCatalogType returns the CatalogType field value
func (o *CatalogsHotelProductGroupProductCounts) GetCatalogType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CatalogType
}

// GetCatalogTypeOk returns a tuple with the CatalogType field value
// and a boolean to check if the value has been set.
func (o *CatalogsHotelProductGroupProductCounts) GetCatalogTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CatalogType, true
}

// SetCatalogType sets field value
func (o *CatalogsHotelProductGroupProductCounts) SetCatalogType(v string) {
	o.CatalogType = v
}

// GetTotal returns the Total field value
func (o *CatalogsHotelProductGroupProductCounts) GetTotal() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *CatalogsHotelProductGroupProductCounts) GetTotalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *CatalogsHotelProductGroupProductCounts) SetTotal(v float32) {
	o.Total = v
}

func (o CatalogsHotelProductGroupProductCounts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogsHotelProductGroupProductCounts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["catalog_type"] = o.CatalogType
	toSerialize["total"] = o.Total
	return toSerialize, nil
}

func (o *CatalogsHotelProductGroupProductCounts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"catalog_type",
		"total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogsHotelProductGroupProductCounts := _CatalogsHotelProductGroupProductCounts{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogsHotelProductGroupProductCounts)

	if err != nil {
		return err
	}

	*o = CatalogsHotelProductGroupProductCounts(varCatalogsHotelProductGroupProductCounts)

	return err
}

type NullableCatalogsHotelProductGroupProductCounts struct {
	value *CatalogsHotelProductGroupProductCounts
	isSet bool
}

func (v NullableCatalogsHotelProductGroupProductCounts) Get() *CatalogsHotelProductGroupProductCounts {
	return v.value
}

func (v *NullableCatalogsHotelProductGroupProductCounts) Set(val *CatalogsHotelProductGroupProductCounts) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogsHotelProductGroupProductCounts) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogsHotelProductGroupProductCounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogsHotelProductGroupProductCounts(val *CatalogsHotelProductGroupProductCounts) *NullableCatalogsHotelProductGroupProductCounts {
	return &NullableCatalogsHotelProductGroupProductCounts{value: val, isSet: true}
}

func (v NullableCatalogsHotelProductGroupProductCounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogsHotelProductGroupProductCounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


