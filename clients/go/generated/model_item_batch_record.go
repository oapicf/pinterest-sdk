/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// ItemBatchRecord - Object describing an item batch record
type ItemBatchRecord struct {
	ItemCreateBatchRecord *ItemCreateBatchRecord
	ItemDeleteBatchRecord *ItemDeleteBatchRecord
	ItemDeleteDiscontinuedBatchRecord *ItemDeleteDiscontinuedBatchRecord
	ItemUpdateBatchRecord *ItemUpdateBatchRecord
	ItemUpsertBatchRecord *ItemUpsertBatchRecord
}

// ItemCreateBatchRecordAsItemBatchRecord is a convenience function that returns ItemCreateBatchRecord wrapped in ItemBatchRecord
func ItemCreateBatchRecordAsItemBatchRecord(v *ItemCreateBatchRecord) ItemBatchRecord {
	return ItemBatchRecord{
		ItemCreateBatchRecord: v,
	}
}

// ItemDeleteBatchRecordAsItemBatchRecord is a convenience function that returns ItemDeleteBatchRecord wrapped in ItemBatchRecord
func ItemDeleteBatchRecordAsItemBatchRecord(v *ItemDeleteBatchRecord) ItemBatchRecord {
	return ItemBatchRecord{
		ItemDeleteBatchRecord: v,
	}
}

// ItemDeleteDiscontinuedBatchRecordAsItemBatchRecord is a convenience function that returns ItemDeleteDiscontinuedBatchRecord wrapped in ItemBatchRecord
func ItemDeleteDiscontinuedBatchRecordAsItemBatchRecord(v *ItemDeleteDiscontinuedBatchRecord) ItemBatchRecord {
	return ItemBatchRecord{
		ItemDeleteDiscontinuedBatchRecord: v,
	}
}

// ItemUpdateBatchRecordAsItemBatchRecord is a convenience function that returns ItemUpdateBatchRecord wrapped in ItemBatchRecord
func ItemUpdateBatchRecordAsItemBatchRecord(v *ItemUpdateBatchRecord) ItemBatchRecord {
	return ItemBatchRecord{
		ItemUpdateBatchRecord: v,
	}
}

// ItemUpsertBatchRecordAsItemBatchRecord is a convenience function that returns ItemUpsertBatchRecord wrapped in ItemBatchRecord
func ItemUpsertBatchRecordAsItemBatchRecord(v *ItemUpsertBatchRecord) ItemBatchRecord {
	return ItemBatchRecord{
		ItemUpsertBatchRecord: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ItemBatchRecord) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ItemCreateBatchRecord
	err = newStrictDecoder(data).Decode(&dst.ItemCreateBatchRecord)
	if err == nil {
		jsonItemCreateBatchRecord, _ := json.Marshal(dst.ItemCreateBatchRecord)
		if string(jsonItemCreateBatchRecord) == "{}" { // empty struct
			dst.ItemCreateBatchRecord = nil
		} else {
			if err = validator.Validate(dst.ItemCreateBatchRecord); err != nil {
				dst.ItemCreateBatchRecord = nil
			} else {
				match++
			}
		}
	} else {
		dst.ItemCreateBatchRecord = nil
	}

	// try to unmarshal data into ItemDeleteBatchRecord
	err = newStrictDecoder(data).Decode(&dst.ItemDeleteBatchRecord)
	if err == nil {
		jsonItemDeleteBatchRecord, _ := json.Marshal(dst.ItemDeleteBatchRecord)
		if string(jsonItemDeleteBatchRecord) == "{}" { // empty struct
			dst.ItemDeleteBatchRecord = nil
		} else {
			if err = validator.Validate(dst.ItemDeleteBatchRecord); err != nil {
				dst.ItemDeleteBatchRecord = nil
			} else {
				match++
			}
		}
	} else {
		dst.ItemDeleteBatchRecord = nil
	}

	// try to unmarshal data into ItemDeleteDiscontinuedBatchRecord
	err = newStrictDecoder(data).Decode(&dst.ItemDeleteDiscontinuedBatchRecord)
	if err == nil {
		jsonItemDeleteDiscontinuedBatchRecord, _ := json.Marshal(dst.ItemDeleteDiscontinuedBatchRecord)
		if string(jsonItemDeleteDiscontinuedBatchRecord) == "{}" { // empty struct
			dst.ItemDeleteDiscontinuedBatchRecord = nil
		} else {
			if err = validator.Validate(dst.ItemDeleteDiscontinuedBatchRecord); err != nil {
				dst.ItemDeleteDiscontinuedBatchRecord = nil
			} else {
				match++
			}
		}
	} else {
		dst.ItemDeleteDiscontinuedBatchRecord = nil
	}

	// try to unmarshal data into ItemUpdateBatchRecord
	err = newStrictDecoder(data).Decode(&dst.ItemUpdateBatchRecord)
	if err == nil {
		jsonItemUpdateBatchRecord, _ := json.Marshal(dst.ItemUpdateBatchRecord)
		if string(jsonItemUpdateBatchRecord) == "{}" { // empty struct
			dst.ItemUpdateBatchRecord = nil
		} else {
			if err = validator.Validate(dst.ItemUpdateBatchRecord); err != nil {
				dst.ItemUpdateBatchRecord = nil
			} else {
				match++
			}
		}
	} else {
		dst.ItemUpdateBatchRecord = nil
	}

	// try to unmarshal data into ItemUpsertBatchRecord
	err = newStrictDecoder(data).Decode(&dst.ItemUpsertBatchRecord)
	if err == nil {
		jsonItemUpsertBatchRecord, _ := json.Marshal(dst.ItemUpsertBatchRecord)
		if string(jsonItemUpsertBatchRecord) == "{}" { // empty struct
			dst.ItemUpsertBatchRecord = nil
		} else {
			if err = validator.Validate(dst.ItemUpsertBatchRecord); err != nil {
				dst.ItemUpsertBatchRecord = nil
			} else {
				match++
			}
		}
	} else {
		dst.ItemUpsertBatchRecord = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ItemCreateBatchRecord = nil
		dst.ItemDeleteBatchRecord = nil
		dst.ItemDeleteDiscontinuedBatchRecord = nil
		dst.ItemUpdateBatchRecord = nil
		dst.ItemUpsertBatchRecord = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ItemBatchRecord)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ItemBatchRecord)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ItemBatchRecord) MarshalJSON() ([]byte, error) {
	if src.ItemCreateBatchRecord != nil {
		return json.Marshal(&src.ItemCreateBatchRecord)
	}

	if src.ItemDeleteBatchRecord != nil {
		return json.Marshal(&src.ItemDeleteBatchRecord)
	}

	if src.ItemDeleteDiscontinuedBatchRecord != nil {
		return json.Marshal(&src.ItemDeleteDiscontinuedBatchRecord)
	}

	if src.ItemUpdateBatchRecord != nil {
		return json.Marshal(&src.ItemUpdateBatchRecord)
	}

	if src.ItemUpsertBatchRecord != nil {
		return json.Marshal(&src.ItemUpsertBatchRecord)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ItemBatchRecord) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ItemCreateBatchRecord != nil {
		return obj.ItemCreateBatchRecord
	}

	if obj.ItemDeleteBatchRecord != nil {
		return obj.ItemDeleteBatchRecord
	}

	if obj.ItemDeleteDiscontinuedBatchRecord != nil {
		return obj.ItemDeleteDiscontinuedBatchRecord
	}

	if obj.ItemUpdateBatchRecord != nil {
		return obj.ItemUpdateBatchRecord
	}

	if obj.ItemUpsertBatchRecord != nil {
		return obj.ItemUpsertBatchRecord
	}

	// all schemas are nil
	return nil
}

type NullableItemBatchRecord struct {
	value *ItemBatchRecord
	isSet bool
}

func (v NullableItemBatchRecord) Get() *ItemBatchRecord {
	return v.value
}

func (v *NullableItemBatchRecord) Set(val *ItemBatchRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableItemBatchRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableItemBatchRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemBatchRecord(val *ItemBatchRecord) *NullableItemBatchRecord {
	return &NullableItemBatchRecord{value: val, isSet: true}
}

func (v NullableItemBatchRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemBatchRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


