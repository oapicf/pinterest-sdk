/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MediaUploadType the model 'MediaUploadType'
type MediaUploadType string

// List of MediaUploadType
const (
	VIDEO MediaUploadType = "video"
)

// All allowed values of MediaUploadType enum
var AllowedMediaUploadTypeEnumValues = []MediaUploadType{
	"video",
}

func (v *MediaUploadType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MediaUploadType(value)
	for _, existing := range AllowedMediaUploadTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MediaUploadType", value)
}

// NewMediaUploadTypeFromValue returns a pointer to a valid MediaUploadType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMediaUploadTypeFromValue(v string) (*MediaUploadType, error) {
	ev := MediaUploadType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MediaUploadType: valid values are %v", v, AllowedMediaUploadTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MediaUploadType) IsValid() bool {
	for _, existing := range AllowedMediaUploadTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MediaUploadType value
func (v MediaUploadType) Ptr() *MediaUploadType {
	return &v
}

type NullableMediaUploadType struct {
	value *MediaUploadType
	isSet bool
}

func (v NullableMediaUploadType) Get() *MediaUploadType {
	return v.value
}

func (v *NullableMediaUploadType) Set(val *MediaUploadType) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaUploadType) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaUploadType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaUploadType(val *MediaUploadType) *NullableMediaUploadType {
	return &NullableMediaUploadType{value: val, isSet: true}
}

func (v NullableMediaUploadType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaUploadType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

