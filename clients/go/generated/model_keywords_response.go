/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the KeywordsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeywordsResponse{}

// KeywordsResponse struct for KeywordsResponse
type KeywordsResponse struct {
	Errors []KeywordError `json:"errors,omitempty"`
	Keywords []Keyword `json:"keywords,omitempty"`
}

// NewKeywordsResponse instantiates a new KeywordsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeywordsResponse() *KeywordsResponse {
	this := KeywordsResponse{}
	return &this
}

// NewKeywordsResponseWithDefaults instantiates a new KeywordsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeywordsResponseWithDefaults() *KeywordsResponse {
	this := KeywordsResponse{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *KeywordsResponse) GetErrors() []KeywordError {
	if o == nil || IsNil(o.Errors) {
		var ret []KeywordError
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeywordsResponse) GetErrorsOk() ([]KeywordError, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *KeywordsResponse) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []KeywordError and assigns it to the Errors field.
func (o *KeywordsResponse) SetErrors(v []KeywordError) {
	o.Errors = v
}

// GetKeywords returns the Keywords field value if set, zero value otherwise.
func (o *KeywordsResponse) GetKeywords() []Keyword {
	if o == nil || IsNil(o.Keywords) {
		var ret []Keyword
		return ret
	}
	return o.Keywords
}

// GetKeywordsOk returns a tuple with the Keywords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeywordsResponse) GetKeywordsOk() ([]Keyword, bool) {
	if o == nil || IsNil(o.Keywords) {
		return nil, false
	}
	return o.Keywords, true
}

// HasKeywords returns a boolean if a field has been set.
func (o *KeywordsResponse) HasKeywords() bool {
	if o != nil && !IsNil(o.Keywords) {
		return true
	}

	return false
}

// SetKeywords gets a reference to the given []Keyword and assigns it to the Keywords field.
func (o *KeywordsResponse) SetKeywords(v []Keyword) {
	o.Keywords = v
}

func (o KeywordsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeywordsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.Keywords) {
		toSerialize["keywords"] = o.Keywords
	}
	return toSerialize, nil
}

type NullableKeywordsResponse struct {
	value *KeywordsResponse
	isSet bool
}

func (v NullableKeywordsResponse) Get() *KeywordsResponse {
	return v.value
}

func (v *NullableKeywordsResponse) Set(val *KeywordsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableKeywordsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableKeywordsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeywordsResponse(val *KeywordsResponse) *NullableKeywordsResponse {
	return &NullableKeywordsResponse{value: val, isSet: true}
}

func (v NullableKeywordsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeywordsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


