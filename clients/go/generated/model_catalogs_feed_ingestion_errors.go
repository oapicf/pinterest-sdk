/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CatalogsFeedIngestionErrors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogsFeedIngestionErrors{}

// CatalogsFeedIngestionErrors struct for CatalogsFeedIngestionErrors
type CatalogsFeedIngestionErrors struct {
	// We experienced a technical difficulty and were unable to ingest this some items. The next ingestion will happen in 24 hours.
	LINE_LEVEL_INTERNAL_ERROR *int32 `json:"LINE_LEVEL_INTERNAL_ERROR,omitempty"`
	// The product count has decreased by more than 99% compared to the last successful ingestion.
	LARGE_PRODUCT_COUNT_DECREASE *int32 `json:"LARGE_PRODUCT_COUNT_DECREASE,omitempty"`
	// We detected an issue with your account and are not currently ingesting your items. Please review our policies at policy.pinterest.com/community-guidelines#section-spam or contact us at help.pinterest.com/contact for more information.
	ACCOUNT_FLAGGED *int32 `json:"ACCOUNT_FLAGGED,omitempty"`
	// We experienced a technical difficulty and were unable to download some images. The next download attempt will happen in 24 hours.
	IMAGE_LEVEL_INTERNAL_ERROR *int32 `json:"IMAGE_LEVEL_INTERNAL_ERROR,omitempty"`
	// Image files are unreadable. Please upload new files to continue.
	IMAGE_FILE_NOT_ACCESSIBLE *int32 `json:"IMAGE_FILE_NOT_ACCESSIBLE,omitempty"`
	// Image files are unreadable. Please check your link and upload new files to continue.
	IMAGE_MALFORMED_URL *int32 `json:"IMAGE_MALFORMED_URL,omitempty"`
	// Image files are unreadable. Please upload new files to continue.
	IMAGE_FILE_NOT_FOUND *int32 `json:"IMAGE_FILE_NOT_FOUND,omitempty"`
	// Image files are unreadable. Please upload new files to continue.
	IMAGE_INVALID_FILE *int32 `json:"IMAGE_INVALID_FILE,omitempty"`
}

// NewCatalogsFeedIngestionErrors instantiates a new CatalogsFeedIngestionErrors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogsFeedIngestionErrors() *CatalogsFeedIngestionErrors {
	this := CatalogsFeedIngestionErrors{}
	return &this
}

// NewCatalogsFeedIngestionErrorsWithDefaults instantiates a new CatalogsFeedIngestionErrors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogsFeedIngestionErrorsWithDefaults() *CatalogsFeedIngestionErrors {
	this := CatalogsFeedIngestionErrors{}
	return &this
}

// GetLINE_LEVEL_INTERNAL_ERROR returns the LINE_LEVEL_INTERNAL_ERROR field value if set, zero value otherwise.
func (o *CatalogsFeedIngestionErrors) GetLINE_LEVEL_INTERNAL_ERROR() int32 {
	if o == nil || IsNil(o.LINE_LEVEL_INTERNAL_ERROR) {
		var ret int32
		return ret
	}
	return *o.LINE_LEVEL_INTERNAL_ERROR
}

// GetLINE_LEVEL_INTERNAL_ERROROk returns a tuple with the LINE_LEVEL_INTERNAL_ERROR field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedIngestionErrors) GetLINE_LEVEL_INTERNAL_ERROROk() (*int32, bool) {
	if o == nil || IsNil(o.LINE_LEVEL_INTERNAL_ERROR) {
		return nil, false
	}
	return o.LINE_LEVEL_INTERNAL_ERROR, true
}

// HasLINE_LEVEL_INTERNAL_ERROR returns a boolean if a field has been set.
func (o *CatalogsFeedIngestionErrors) HasLINE_LEVEL_INTERNAL_ERROR() bool {
	if o != nil && !IsNil(o.LINE_LEVEL_INTERNAL_ERROR) {
		return true
	}

	return false
}

// SetLINE_LEVEL_INTERNAL_ERROR gets a reference to the given int32 and assigns it to the LINE_LEVEL_INTERNAL_ERROR field.
func (o *CatalogsFeedIngestionErrors) SetLINE_LEVEL_INTERNAL_ERROR(v int32) {
	o.LINE_LEVEL_INTERNAL_ERROR = &v
}

// GetLARGE_PRODUCT_COUNT_DECREASE returns the LARGE_PRODUCT_COUNT_DECREASE field value if set, zero value otherwise.
func (o *CatalogsFeedIngestionErrors) GetLARGE_PRODUCT_COUNT_DECREASE() int32 {
	if o == nil || IsNil(o.LARGE_PRODUCT_COUNT_DECREASE) {
		var ret int32
		return ret
	}
	return *o.LARGE_PRODUCT_COUNT_DECREASE
}

// GetLARGE_PRODUCT_COUNT_DECREASEOk returns a tuple with the LARGE_PRODUCT_COUNT_DECREASE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedIngestionErrors) GetLARGE_PRODUCT_COUNT_DECREASEOk() (*int32, bool) {
	if o == nil || IsNil(o.LARGE_PRODUCT_COUNT_DECREASE) {
		return nil, false
	}
	return o.LARGE_PRODUCT_COUNT_DECREASE, true
}

// HasLARGE_PRODUCT_COUNT_DECREASE returns a boolean if a field has been set.
func (o *CatalogsFeedIngestionErrors) HasLARGE_PRODUCT_COUNT_DECREASE() bool {
	if o != nil && !IsNil(o.LARGE_PRODUCT_COUNT_DECREASE) {
		return true
	}

	return false
}

// SetLARGE_PRODUCT_COUNT_DECREASE gets a reference to the given int32 and assigns it to the LARGE_PRODUCT_COUNT_DECREASE field.
func (o *CatalogsFeedIngestionErrors) SetLARGE_PRODUCT_COUNT_DECREASE(v int32) {
	o.LARGE_PRODUCT_COUNT_DECREASE = &v
}

// GetACCOUNT_FLAGGED returns the ACCOUNT_FLAGGED field value if set, zero value otherwise.
func (o *CatalogsFeedIngestionErrors) GetACCOUNT_FLAGGED() int32 {
	if o == nil || IsNil(o.ACCOUNT_FLAGGED) {
		var ret int32
		return ret
	}
	return *o.ACCOUNT_FLAGGED
}

// GetACCOUNT_FLAGGEDOk returns a tuple with the ACCOUNT_FLAGGED field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedIngestionErrors) GetACCOUNT_FLAGGEDOk() (*int32, bool) {
	if o == nil || IsNil(o.ACCOUNT_FLAGGED) {
		return nil, false
	}
	return o.ACCOUNT_FLAGGED, true
}

// HasACCOUNT_FLAGGED returns a boolean if a field has been set.
func (o *CatalogsFeedIngestionErrors) HasACCOUNT_FLAGGED() bool {
	if o != nil && !IsNil(o.ACCOUNT_FLAGGED) {
		return true
	}

	return false
}

// SetACCOUNT_FLAGGED gets a reference to the given int32 and assigns it to the ACCOUNT_FLAGGED field.
func (o *CatalogsFeedIngestionErrors) SetACCOUNT_FLAGGED(v int32) {
	o.ACCOUNT_FLAGGED = &v
}

// GetIMAGE_LEVEL_INTERNAL_ERROR returns the IMAGE_LEVEL_INTERNAL_ERROR field value if set, zero value otherwise.
func (o *CatalogsFeedIngestionErrors) GetIMAGE_LEVEL_INTERNAL_ERROR() int32 {
	if o == nil || IsNil(o.IMAGE_LEVEL_INTERNAL_ERROR) {
		var ret int32
		return ret
	}
	return *o.IMAGE_LEVEL_INTERNAL_ERROR
}

// GetIMAGE_LEVEL_INTERNAL_ERROROk returns a tuple with the IMAGE_LEVEL_INTERNAL_ERROR field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedIngestionErrors) GetIMAGE_LEVEL_INTERNAL_ERROROk() (*int32, bool) {
	if o == nil || IsNil(o.IMAGE_LEVEL_INTERNAL_ERROR) {
		return nil, false
	}
	return o.IMAGE_LEVEL_INTERNAL_ERROR, true
}

// HasIMAGE_LEVEL_INTERNAL_ERROR returns a boolean if a field has been set.
func (o *CatalogsFeedIngestionErrors) HasIMAGE_LEVEL_INTERNAL_ERROR() bool {
	if o != nil && !IsNil(o.IMAGE_LEVEL_INTERNAL_ERROR) {
		return true
	}

	return false
}

// SetIMAGE_LEVEL_INTERNAL_ERROR gets a reference to the given int32 and assigns it to the IMAGE_LEVEL_INTERNAL_ERROR field.
func (o *CatalogsFeedIngestionErrors) SetIMAGE_LEVEL_INTERNAL_ERROR(v int32) {
	o.IMAGE_LEVEL_INTERNAL_ERROR = &v
}

// GetIMAGE_FILE_NOT_ACCESSIBLE returns the IMAGE_FILE_NOT_ACCESSIBLE field value if set, zero value otherwise.
func (o *CatalogsFeedIngestionErrors) GetIMAGE_FILE_NOT_ACCESSIBLE() int32 {
	if o == nil || IsNil(o.IMAGE_FILE_NOT_ACCESSIBLE) {
		var ret int32
		return ret
	}
	return *o.IMAGE_FILE_NOT_ACCESSIBLE
}

// GetIMAGE_FILE_NOT_ACCESSIBLEOk returns a tuple with the IMAGE_FILE_NOT_ACCESSIBLE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedIngestionErrors) GetIMAGE_FILE_NOT_ACCESSIBLEOk() (*int32, bool) {
	if o == nil || IsNil(o.IMAGE_FILE_NOT_ACCESSIBLE) {
		return nil, false
	}
	return o.IMAGE_FILE_NOT_ACCESSIBLE, true
}

// HasIMAGE_FILE_NOT_ACCESSIBLE returns a boolean if a field has been set.
func (o *CatalogsFeedIngestionErrors) HasIMAGE_FILE_NOT_ACCESSIBLE() bool {
	if o != nil && !IsNil(o.IMAGE_FILE_NOT_ACCESSIBLE) {
		return true
	}

	return false
}

// SetIMAGE_FILE_NOT_ACCESSIBLE gets a reference to the given int32 and assigns it to the IMAGE_FILE_NOT_ACCESSIBLE field.
func (o *CatalogsFeedIngestionErrors) SetIMAGE_FILE_NOT_ACCESSIBLE(v int32) {
	o.IMAGE_FILE_NOT_ACCESSIBLE = &v
}

// GetIMAGE_MALFORMED_URL returns the IMAGE_MALFORMED_URL field value if set, zero value otherwise.
func (o *CatalogsFeedIngestionErrors) GetIMAGE_MALFORMED_URL() int32 {
	if o == nil || IsNil(o.IMAGE_MALFORMED_URL) {
		var ret int32
		return ret
	}
	return *o.IMAGE_MALFORMED_URL
}

// GetIMAGE_MALFORMED_URLOk returns a tuple with the IMAGE_MALFORMED_URL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedIngestionErrors) GetIMAGE_MALFORMED_URLOk() (*int32, bool) {
	if o == nil || IsNil(o.IMAGE_MALFORMED_URL) {
		return nil, false
	}
	return o.IMAGE_MALFORMED_URL, true
}

// HasIMAGE_MALFORMED_URL returns a boolean if a field has been set.
func (o *CatalogsFeedIngestionErrors) HasIMAGE_MALFORMED_URL() bool {
	if o != nil && !IsNil(o.IMAGE_MALFORMED_URL) {
		return true
	}

	return false
}

// SetIMAGE_MALFORMED_URL gets a reference to the given int32 and assigns it to the IMAGE_MALFORMED_URL field.
func (o *CatalogsFeedIngestionErrors) SetIMAGE_MALFORMED_URL(v int32) {
	o.IMAGE_MALFORMED_URL = &v
}

// GetIMAGE_FILE_NOT_FOUND returns the IMAGE_FILE_NOT_FOUND field value if set, zero value otherwise.
func (o *CatalogsFeedIngestionErrors) GetIMAGE_FILE_NOT_FOUND() int32 {
	if o == nil || IsNil(o.IMAGE_FILE_NOT_FOUND) {
		var ret int32
		return ret
	}
	return *o.IMAGE_FILE_NOT_FOUND
}

// GetIMAGE_FILE_NOT_FOUNDOk returns a tuple with the IMAGE_FILE_NOT_FOUND field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedIngestionErrors) GetIMAGE_FILE_NOT_FOUNDOk() (*int32, bool) {
	if o == nil || IsNil(o.IMAGE_FILE_NOT_FOUND) {
		return nil, false
	}
	return o.IMAGE_FILE_NOT_FOUND, true
}

// HasIMAGE_FILE_NOT_FOUND returns a boolean if a field has been set.
func (o *CatalogsFeedIngestionErrors) HasIMAGE_FILE_NOT_FOUND() bool {
	if o != nil && !IsNil(o.IMAGE_FILE_NOT_FOUND) {
		return true
	}

	return false
}

// SetIMAGE_FILE_NOT_FOUND gets a reference to the given int32 and assigns it to the IMAGE_FILE_NOT_FOUND field.
func (o *CatalogsFeedIngestionErrors) SetIMAGE_FILE_NOT_FOUND(v int32) {
	o.IMAGE_FILE_NOT_FOUND = &v
}

// GetIMAGE_INVALID_FILE returns the IMAGE_INVALID_FILE field value if set, zero value otherwise.
func (o *CatalogsFeedIngestionErrors) GetIMAGE_INVALID_FILE() int32 {
	if o == nil || IsNil(o.IMAGE_INVALID_FILE) {
		var ret int32
		return ret
	}
	return *o.IMAGE_INVALID_FILE
}

// GetIMAGE_INVALID_FILEOk returns a tuple with the IMAGE_INVALID_FILE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedIngestionErrors) GetIMAGE_INVALID_FILEOk() (*int32, bool) {
	if o == nil || IsNil(o.IMAGE_INVALID_FILE) {
		return nil, false
	}
	return o.IMAGE_INVALID_FILE, true
}

// HasIMAGE_INVALID_FILE returns a boolean if a field has been set.
func (o *CatalogsFeedIngestionErrors) HasIMAGE_INVALID_FILE() bool {
	if o != nil && !IsNil(o.IMAGE_INVALID_FILE) {
		return true
	}

	return false
}

// SetIMAGE_INVALID_FILE gets a reference to the given int32 and assigns it to the IMAGE_INVALID_FILE field.
func (o *CatalogsFeedIngestionErrors) SetIMAGE_INVALID_FILE(v int32) {
	o.IMAGE_INVALID_FILE = &v
}

func (o CatalogsFeedIngestionErrors) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogsFeedIngestionErrors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LINE_LEVEL_INTERNAL_ERROR) {
		toSerialize["LINE_LEVEL_INTERNAL_ERROR"] = o.LINE_LEVEL_INTERNAL_ERROR
	}
	if !IsNil(o.LARGE_PRODUCT_COUNT_DECREASE) {
		toSerialize["LARGE_PRODUCT_COUNT_DECREASE"] = o.LARGE_PRODUCT_COUNT_DECREASE
	}
	if !IsNil(o.ACCOUNT_FLAGGED) {
		toSerialize["ACCOUNT_FLAGGED"] = o.ACCOUNT_FLAGGED
	}
	if !IsNil(o.IMAGE_LEVEL_INTERNAL_ERROR) {
		toSerialize["IMAGE_LEVEL_INTERNAL_ERROR"] = o.IMAGE_LEVEL_INTERNAL_ERROR
	}
	if !IsNil(o.IMAGE_FILE_NOT_ACCESSIBLE) {
		toSerialize["IMAGE_FILE_NOT_ACCESSIBLE"] = o.IMAGE_FILE_NOT_ACCESSIBLE
	}
	if !IsNil(o.IMAGE_MALFORMED_URL) {
		toSerialize["IMAGE_MALFORMED_URL"] = o.IMAGE_MALFORMED_URL
	}
	if !IsNil(o.IMAGE_FILE_NOT_FOUND) {
		toSerialize["IMAGE_FILE_NOT_FOUND"] = o.IMAGE_FILE_NOT_FOUND
	}
	if !IsNil(o.IMAGE_INVALID_FILE) {
		toSerialize["IMAGE_INVALID_FILE"] = o.IMAGE_INVALID_FILE
	}
	return toSerialize, nil
}

type NullableCatalogsFeedIngestionErrors struct {
	value *CatalogsFeedIngestionErrors
	isSet bool
}

func (v NullableCatalogsFeedIngestionErrors) Get() *CatalogsFeedIngestionErrors {
	return v.value
}

func (v *NullableCatalogsFeedIngestionErrors) Set(val *CatalogsFeedIngestionErrors) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogsFeedIngestionErrors) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogsFeedIngestionErrors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogsFeedIngestionErrors(val *CatalogsFeedIngestionErrors) *NullableCatalogsFeedIngestionErrors {
	return &NullableCatalogsFeedIngestionErrors{value: val, isSet: true}
}

func (v NullableCatalogsFeedIngestionErrors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogsFeedIngestionErrors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


