/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MembersToDeleteBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MembersToDeleteBody{}

// MembersToDeleteBody struct for MembersToDeleteBody
type MembersToDeleteBody struct {
	Members []MembersToDeleteBodyMembersInner `json:"members"`
}

type _MembersToDeleteBody MembersToDeleteBody

// NewMembersToDeleteBody instantiates a new MembersToDeleteBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMembersToDeleteBody(members []MembersToDeleteBodyMembersInner) *MembersToDeleteBody {
	this := MembersToDeleteBody{}
	this.Members = members
	return &this
}

// NewMembersToDeleteBodyWithDefaults instantiates a new MembersToDeleteBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMembersToDeleteBodyWithDefaults() *MembersToDeleteBody {
	this := MembersToDeleteBody{}
	return &this
}

// GetMembers returns the Members field value
func (o *MembersToDeleteBody) GetMembers() []MembersToDeleteBodyMembersInner {
	if o == nil {
		var ret []MembersToDeleteBodyMembersInner
		return ret
	}

	return o.Members
}

// GetMembersOk returns a tuple with the Members field value
// and a boolean to check if the value has been set.
func (o *MembersToDeleteBody) GetMembersOk() ([]MembersToDeleteBodyMembersInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Members, true
}

// SetMembers sets field value
func (o *MembersToDeleteBody) SetMembers(v []MembersToDeleteBodyMembersInner) {
	o.Members = v
}

func (o MembersToDeleteBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MembersToDeleteBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["members"] = o.Members
	return toSerialize, nil
}

func (o *MembersToDeleteBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"members",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMembersToDeleteBody := _MembersToDeleteBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMembersToDeleteBody)

	if err != nil {
		return err
	}

	*o = MembersToDeleteBody(varMembersToDeleteBody)

	return err
}

type NullableMembersToDeleteBody struct {
	value *MembersToDeleteBody
	isSet bool
}

func (v NullableMembersToDeleteBody) Get() *MembersToDeleteBody {
	return v.value
}

func (v *NullableMembersToDeleteBody) Set(val *MembersToDeleteBody) {
	v.value = val
	v.isSet = true
}

func (v NullableMembersToDeleteBody) IsSet() bool {
	return v.isSet
}

func (v *NullableMembersToDeleteBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembersToDeleteBody(val *MembersToDeleteBody) *NullableMembersToDeleteBody {
	return &NullableMembersToDeleteBody{value: val, isSet: true}
}

func (v NullableMembersToDeleteBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembersToDeleteBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


