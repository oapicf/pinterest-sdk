/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BulkAPIService BulkAPI service
type BulkAPIService service

type ApiBulkDownloadCreateRequest struct {
	ctx context.Context
	ApiService *BulkAPIService
	adAccountId string
	bulkDownloadRequest *BulkDownloadRequest
}

// Parameters to get ad entities in bulk
func (r ApiBulkDownloadCreateRequest) BulkDownloadRequest(bulkDownloadRequest BulkDownloadRequest) ApiBulkDownloadCreateRequest {
	r.bulkDownloadRequest = &bulkDownloadRequest
	return r
}

func (r ApiBulkDownloadCreateRequest) Execute() (*BulkDownloadResponse, *http.Response, error) {
	return r.ApiService.BulkDownloadCreateExecute(r)
}

/*
BulkDownloadCreate Get advertiser entities in bulk

Create an asynchronous report that may include information on campaigns, ad groups, product groups, ads,
and/or keywords; can filter by campaigns. Though the entities may be active, archived, or paused,
only active entities will return data.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param adAccountId Unique identifier of an ad account.
 @return ApiBulkDownloadCreateRequest
*/
func (a *BulkAPIService) BulkDownloadCreate(ctx context.Context, adAccountId string) ApiBulkDownloadCreateRequest {
	return ApiBulkDownloadCreateRequest{
		ApiService: a,
		ctx: ctx,
		adAccountId: adAccountId,
	}
}

// Execute executes the request
//  @return BulkDownloadResponse
func (a *BulkAPIService) BulkDownloadCreateExecute(r ApiBulkDownloadCreateRequest) (*BulkDownloadResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BulkDownloadResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkAPIService.BulkDownloadCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ad_accounts/{ad_account_id}/bulk/download"
	localVarPath = strings.Replace(localVarPath, "{"+"ad_account_id"+"}", url.PathEscape(parameterValueToString(r.adAccountId, "adAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.adAccountId) > 18 {
		return localVarReturnValue, nil, reportError("adAccountId must have less than 18 elements")
	}
	if r.bulkDownloadRequest == nil {
		return localVarReturnValue, nil, reportError("bulkDownloadRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkDownloadRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBulkRequestGetRequest struct {
	ctx context.Context
	ApiService *BulkAPIService
	adAccountId string
	bulkRequestId string
	includeDetails *bool
}

// if set to True then attach the errors/details to all the requests
func (r ApiBulkRequestGetRequest) IncludeDetails(includeDetails bool) ApiBulkRequestGetRequest {
	r.includeDetails = &includeDetails
	return r
}

func (r ApiBulkRequestGetRequest) Execute() (*BulkUpsertStatusResponse, *http.Response, error) {
	return r.ApiService.BulkRequestGetExecute(r)
}

/*
BulkRequestGet Download advertiser entities in bulk

Get the status of a bulk request by <code>request_id</code>, along with a download URL that will allow you to download the
new or updated entity data (campaigns, ad groups, product groups, ads, or keywords).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param adAccountId Unique identifier of an ad account.
 @param bulkRequestId Unique identifier of a bulk upsert request.
 @return ApiBulkRequestGetRequest
*/
func (a *BulkAPIService) BulkRequestGet(ctx context.Context, adAccountId string, bulkRequestId string) ApiBulkRequestGetRequest {
	return ApiBulkRequestGetRequest{
		ApiService: a,
		ctx: ctx,
		adAccountId: adAccountId,
		bulkRequestId: bulkRequestId,
	}
}

// Execute executes the request
//  @return BulkUpsertStatusResponse
func (a *BulkAPIService) BulkRequestGetExecute(r ApiBulkRequestGetRequest) (*BulkUpsertStatusResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BulkUpsertStatusResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkAPIService.BulkRequestGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ad_accounts/{ad_account_id}/bulk/{bulk_request_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"ad_account_id"+"}", url.PathEscape(parameterValueToString(r.adAccountId, "adAccountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bulk_request_id"+"}", url.PathEscape(parameterValueToString(r.bulkRequestId, "bulkRequestId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.adAccountId) > 18 {
		return localVarReturnValue, nil, reportError("adAccountId must have less than 18 elements")
	}

	if r.includeDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_details", r.includeDetails, "form", "")
	} else {
		var defaultValue bool = false
		r.includeDetails = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBulkUpsertCreateRequest struct {
	ctx context.Context
	ApiService *BulkAPIService
	adAccountId string
	bulkUpsertRequest *BulkUpsertRequest
}

// Parameters to get create/update ad entities in bulk
func (r ApiBulkUpsertCreateRequest) BulkUpsertRequest(bulkUpsertRequest BulkUpsertRequest) ApiBulkUpsertCreateRequest {
	r.bulkUpsertRequest = &bulkUpsertRequest
	return r
}

func (r ApiBulkUpsertCreateRequest) Execute() (*BulkUpsertResponse, *http.Response, error) {
	return r.ApiService.BulkUpsertCreateExecute(r)
}

/*
BulkUpsertCreate Create/update ad entities in bulk

Either create or update any combination of campaigns, ad groups, product groups, ads, or keywords.
Note that this request will be processed asynchronously; the response will include a <code>request_id</code>
that can be used to obtain the status of the request.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param adAccountId Unique identifier of an ad account.
 @return ApiBulkUpsertCreateRequest
*/
func (a *BulkAPIService) BulkUpsertCreate(ctx context.Context, adAccountId string) ApiBulkUpsertCreateRequest {
	return ApiBulkUpsertCreateRequest{
		ApiService: a,
		ctx: ctx,
		adAccountId: adAccountId,
	}
}

// Execute executes the request
//  @return BulkUpsertResponse
func (a *BulkAPIService) BulkUpsertCreateExecute(r ApiBulkUpsertCreateRequest) (*BulkUpsertResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BulkUpsertResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkAPIService.BulkUpsertCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ad_accounts/{ad_account_id}/bulk/upsert"
	localVarPath = strings.Replace(localVarPath, "{"+"ad_account_id"+"}", url.PathEscape(parameterValueToString(r.adAccountId, "adAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.adAccountId) > 18 {
		return localVarReturnValue, nil, reportError("adAccountId must have less than 18 elements")
	}
	if r.bulkUpsertRequest == nil {
		return localVarReturnValue, nil, reportError("bulkUpsertRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkUpsertRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
