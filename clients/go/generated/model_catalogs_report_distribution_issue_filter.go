/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogsReportDistributionIssueFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogsReportDistributionIssueFilter{}

// CatalogsReportDistributionIssueFilter struct for CatalogsReportDistributionIssueFilter
type CatalogsReportDistributionIssueFilter struct {
	ReportType string `json:"report_type"`
	// Unique identifier of a catalog. If not given, oldest catalog will be used
	CatalogId *string `json:"catalog_id,omitempty" validate:"regexp=^\\\\d+$"`
}

type _CatalogsReportDistributionIssueFilter CatalogsReportDistributionIssueFilter

// NewCatalogsReportDistributionIssueFilter instantiates a new CatalogsReportDistributionIssueFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogsReportDistributionIssueFilter(reportType string) *CatalogsReportDistributionIssueFilter {
	this := CatalogsReportDistributionIssueFilter{}
	this.ReportType = reportType
	return &this
}

// NewCatalogsReportDistributionIssueFilterWithDefaults instantiates a new CatalogsReportDistributionIssueFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogsReportDistributionIssueFilterWithDefaults() *CatalogsReportDistributionIssueFilter {
	this := CatalogsReportDistributionIssueFilter{}
	return &this
}

// GetReportType returns the ReportType field value
func (o *CatalogsReportDistributionIssueFilter) GetReportType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReportType
}

// GetReportTypeOk returns a tuple with the ReportType field value
// and a boolean to check if the value has been set.
func (o *CatalogsReportDistributionIssueFilter) GetReportTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReportType, true
}

// SetReportType sets field value
func (o *CatalogsReportDistributionIssueFilter) SetReportType(v string) {
	o.ReportType = v
}

// GetCatalogId returns the CatalogId field value if set, zero value otherwise.
func (o *CatalogsReportDistributionIssueFilter) GetCatalogId() string {
	if o == nil || IsNil(o.CatalogId) {
		var ret string
		return ret
	}
	return *o.CatalogId
}

// GetCatalogIdOk returns a tuple with the CatalogId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsReportDistributionIssueFilter) GetCatalogIdOk() (*string, bool) {
	if o == nil || IsNil(o.CatalogId) {
		return nil, false
	}
	return o.CatalogId, true
}

// HasCatalogId returns a boolean if a field has been set.
func (o *CatalogsReportDistributionIssueFilter) HasCatalogId() bool {
	if o != nil && !IsNil(o.CatalogId) {
		return true
	}

	return false
}

// SetCatalogId gets a reference to the given string and assigns it to the CatalogId field.
func (o *CatalogsReportDistributionIssueFilter) SetCatalogId(v string) {
	o.CatalogId = &v
}

func (o CatalogsReportDistributionIssueFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogsReportDistributionIssueFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["report_type"] = o.ReportType
	if !IsNil(o.CatalogId) {
		toSerialize["catalog_id"] = o.CatalogId
	}
	return toSerialize, nil
}

func (o *CatalogsReportDistributionIssueFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"report_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogsReportDistributionIssueFilter := _CatalogsReportDistributionIssueFilter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogsReportDistributionIssueFilter)

	if err != nil {
		return err
	}

	*o = CatalogsReportDistributionIssueFilter(varCatalogsReportDistributionIssueFilter)

	return err
}

type NullableCatalogsReportDistributionIssueFilter struct {
	value *CatalogsReportDistributionIssueFilter
	isSet bool
}

func (v NullableCatalogsReportDistributionIssueFilter) Get() *CatalogsReportDistributionIssueFilter {
	return v.value
}

func (v *NullableCatalogsReportDistributionIssueFilter) Set(val *CatalogsReportDistributionIssueFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogsReportDistributionIssueFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogsReportDistributionIssueFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogsReportDistributionIssueFilter(val *CatalogsReportDistributionIssueFilter) *NullableCatalogsReportDistributionIssueFilter {
	return &NullableCatalogsReportDistributionIssueFilter{value: val, isSet: true}
}

func (v NullableCatalogsReportDistributionIssueFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogsReportDistributionIssueFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


