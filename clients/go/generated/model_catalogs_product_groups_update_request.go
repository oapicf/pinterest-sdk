/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CatalogsProductGroupsUpdateRequest - struct for CatalogsProductGroupsUpdateRequest
type CatalogsProductGroupsUpdateRequest struct {
	CatalogsProductGroupUpdateRequest *CatalogsProductGroupUpdateRequest
	CatalogsVerticalProductGroupUpdateRequest *CatalogsVerticalProductGroupUpdateRequest
}

// CatalogsProductGroupUpdateRequestAsCatalogsProductGroupsUpdateRequest is a convenience function that returns CatalogsProductGroupUpdateRequest wrapped in CatalogsProductGroupsUpdateRequest
func CatalogsProductGroupUpdateRequestAsCatalogsProductGroupsUpdateRequest(v *CatalogsProductGroupUpdateRequest) CatalogsProductGroupsUpdateRequest {
	return CatalogsProductGroupsUpdateRequest{
		CatalogsProductGroupUpdateRequest: v,
	}
}

// CatalogsVerticalProductGroupUpdateRequestAsCatalogsProductGroupsUpdateRequest is a convenience function that returns CatalogsVerticalProductGroupUpdateRequest wrapped in CatalogsProductGroupsUpdateRequest
func CatalogsVerticalProductGroupUpdateRequestAsCatalogsProductGroupsUpdateRequest(v *CatalogsVerticalProductGroupUpdateRequest) CatalogsProductGroupsUpdateRequest {
	return CatalogsProductGroupsUpdateRequest{
		CatalogsVerticalProductGroupUpdateRequest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CatalogsProductGroupsUpdateRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CatalogsProductGroupUpdateRequest
	err = newStrictDecoder(data).Decode(&dst.CatalogsProductGroupUpdateRequest)
	if err == nil {
		jsonCatalogsProductGroupUpdateRequest, _ := json.Marshal(dst.CatalogsProductGroupUpdateRequest)
		if string(jsonCatalogsProductGroupUpdateRequest) == "{}" { // empty struct
			dst.CatalogsProductGroupUpdateRequest = nil
		} else {
			if err = validator.Validate(dst.CatalogsProductGroupUpdateRequest); err != nil {
				dst.CatalogsProductGroupUpdateRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogsProductGroupUpdateRequest = nil
	}

	// try to unmarshal data into CatalogsVerticalProductGroupUpdateRequest
	err = newStrictDecoder(data).Decode(&dst.CatalogsVerticalProductGroupUpdateRequest)
	if err == nil {
		jsonCatalogsVerticalProductGroupUpdateRequest, _ := json.Marshal(dst.CatalogsVerticalProductGroupUpdateRequest)
		if string(jsonCatalogsVerticalProductGroupUpdateRequest) == "{}" { // empty struct
			dst.CatalogsVerticalProductGroupUpdateRequest = nil
		} else {
			if err = validator.Validate(dst.CatalogsVerticalProductGroupUpdateRequest); err != nil {
				dst.CatalogsVerticalProductGroupUpdateRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogsVerticalProductGroupUpdateRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CatalogsProductGroupUpdateRequest = nil
		dst.CatalogsVerticalProductGroupUpdateRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CatalogsProductGroupsUpdateRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CatalogsProductGroupsUpdateRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CatalogsProductGroupsUpdateRequest) MarshalJSON() ([]byte, error) {
	if src.CatalogsProductGroupUpdateRequest != nil {
		return json.Marshal(&src.CatalogsProductGroupUpdateRequest)
	}

	if src.CatalogsVerticalProductGroupUpdateRequest != nil {
		return json.Marshal(&src.CatalogsVerticalProductGroupUpdateRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CatalogsProductGroupsUpdateRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CatalogsProductGroupUpdateRequest != nil {
		return obj.CatalogsProductGroupUpdateRequest
	}

	if obj.CatalogsVerticalProductGroupUpdateRequest != nil {
		return obj.CatalogsVerticalProductGroupUpdateRequest
	}

	// all schemas are nil
	return nil
}

type NullableCatalogsProductGroupsUpdateRequest struct {
	value *CatalogsProductGroupsUpdateRequest
	isSet bool
}

func (v NullableCatalogsProductGroupsUpdateRequest) Get() *CatalogsProductGroupsUpdateRequest {
	return v.value
}

func (v *NullableCatalogsProductGroupsUpdateRequest) Set(val *CatalogsProductGroupsUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogsProductGroupsUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogsProductGroupsUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogsProductGroupsUpdateRequest(val *CatalogsProductGroupsUpdateRequest) *NullableCatalogsProductGroupsUpdateRequest {
	return &NullableCatalogsProductGroupsUpdateRequest{value: val, isSet: true}
}

func (v NullableCatalogsProductGroupsUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogsProductGroupsUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


