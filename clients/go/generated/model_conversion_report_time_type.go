/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ConversionReportTimeType Conversion report time type
type ConversionReportTimeType string

// List of ConversionReportTimeType
const (
	AD_ACTION ConversionReportTimeType = "TIME_OF_AD_ACTION"
	CONVERSION ConversionReportTimeType = "TIME_OF_CONVERSION"
)

// All allowed values of ConversionReportTimeType enum
var AllowedConversionReportTimeTypeEnumValues = []ConversionReportTimeType{
	"TIME_OF_AD_ACTION",
	"TIME_OF_CONVERSION",
}

func (v *ConversionReportTimeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConversionReportTimeType(value)
	for _, existing := range AllowedConversionReportTimeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConversionReportTimeType", value)
}

// NewConversionReportTimeTypeFromValue returns a pointer to a valid ConversionReportTimeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConversionReportTimeTypeFromValue(v string) (*ConversionReportTimeType, error) {
	ev := ConversionReportTimeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConversionReportTimeType: valid values are %v", v, AllowedConversionReportTimeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConversionReportTimeType) IsValid() bool {
	for _, existing := range AllowedConversionReportTimeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConversionReportTimeType value
func (v ConversionReportTimeType) Ptr() *ConversionReportTimeType {
	return &v
}

type NullableConversionReportTimeType struct {
	value *ConversionReportTimeType
	isSet bool
}

func (v NullableConversionReportTimeType) Get() *ConversionReportTimeType {
	return v.value
}

func (v *NullableConversionReportTimeType) Set(val *ConversionReportTimeType) {
	v.value = val
	v.isSet = true
}

func (v NullableConversionReportTimeType) IsSet() bool {
	return v.isSet
}

func (v *NullableConversionReportTimeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversionReportTimeType(val *ConversionReportTimeType) *NullableConversionReportTimeType {
	return &NullableConversionReportTimeType{value: val, isSet: true}
}

func (v NullableConversionReportTimeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversionReportTimeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

