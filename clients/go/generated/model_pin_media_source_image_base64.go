/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PinMediaSourceImageBase64 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PinMediaSourceImageBase64{}

// PinMediaSourceImageBase64 Base64-encoded image media source
type PinMediaSourceImageBase64 struct {
	SourceType string `json:"source_type"`
	ContentType string `json:"content_type"`
	Data string `json:"data" validate:"regexp=[a-zA-Z0-9+\\/=]+"`
	// Set the parameter to false to create the new simplified Pin instead of the standard pin. Currently the field is only available to a list of beta users.
	IsStandard *bool `json:"is_standard,omitempty"`
}

type _PinMediaSourceImageBase64 PinMediaSourceImageBase64

// NewPinMediaSourceImageBase64 instantiates a new PinMediaSourceImageBase64 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPinMediaSourceImageBase64(sourceType string, contentType string, data string) *PinMediaSourceImageBase64 {
	this := PinMediaSourceImageBase64{}
	this.SourceType = sourceType
	this.ContentType = contentType
	this.Data = data
	var isStandard bool = true
	this.IsStandard = &isStandard
	return &this
}

// NewPinMediaSourceImageBase64WithDefaults instantiates a new PinMediaSourceImageBase64 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPinMediaSourceImageBase64WithDefaults() *PinMediaSourceImageBase64 {
	this := PinMediaSourceImageBase64{}
	var isStandard bool = true
	this.IsStandard = &isStandard
	return &this
}

// GetSourceType returns the SourceType field value
func (o *PinMediaSourceImageBase64) GetSourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value
// and a boolean to check if the value has been set.
func (o *PinMediaSourceImageBase64) GetSourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceType, true
}

// SetSourceType sets field value
func (o *PinMediaSourceImageBase64) SetSourceType(v string) {
	o.SourceType = v
}

// GetContentType returns the ContentType field value
func (o *PinMediaSourceImageBase64) GetContentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value
// and a boolean to check if the value has been set.
func (o *PinMediaSourceImageBase64) GetContentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentType, true
}

// SetContentType sets field value
func (o *PinMediaSourceImageBase64) SetContentType(v string) {
	o.ContentType = v
}

// GetData returns the Data field value
func (o *PinMediaSourceImageBase64) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *PinMediaSourceImageBase64) GetDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *PinMediaSourceImageBase64) SetData(v string) {
	o.Data = v
}

// GetIsStandard returns the IsStandard field value if set, zero value otherwise.
func (o *PinMediaSourceImageBase64) GetIsStandard() bool {
	if o == nil || IsNil(o.IsStandard) {
		var ret bool
		return ret
	}
	return *o.IsStandard
}

// GetIsStandardOk returns a tuple with the IsStandard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PinMediaSourceImageBase64) GetIsStandardOk() (*bool, bool) {
	if o == nil || IsNil(o.IsStandard) {
		return nil, false
	}
	return o.IsStandard, true
}

// HasIsStandard returns a boolean if a field has been set.
func (o *PinMediaSourceImageBase64) HasIsStandard() bool {
	if o != nil && !IsNil(o.IsStandard) {
		return true
	}

	return false
}

// SetIsStandard gets a reference to the given bool and assigns it to the IsStandard field.
func (o *PinMediaSourceImageBase64) SetIsStandard(v bool) {
	o.IsStandard = &v
}

func (o PinMediaSourceImageBase64) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PinMediaSourceImageBase64) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source_type"] = o.SourceType
	toSerialize["content_type"] = o.ContentType
	toSerialize["data"] = o.Data
	if !IsNil(o.IsStandard) {
		toSerialize["is_standard"] = o.IsStandard
	}
	return toSerialize, nil
}

func (o *PinMediaSourceImageBase64) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source_type",
		"content_type",
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPinMediaSourceImageBase64 := _PinMediaSourceImageBase64{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPinMediaSourceImageBase64)

	if err != nil {
		return err
	}

	*o = PinMediaSourceImageBase64(varPinMediaSourceImageBase64)

	return err
}

type NullablePinMediaSourceImageBase64 struct {
	value *PinMediaSourceImageBase64
	isSet bool
}

func (v NullablePinMediaSourceImageBase64) Get() *PinMediaSourceImageBase64 {
	return v.value
}

func (v *NullablePinMediaSourceImageBase64) Set(val *PinMediaSourceImageBase64) {
	v.value = val
	v.isSet = true
}

func (v NullablePinMediaSourceImageBase64) IsSet() bool {
	return v.isSet
}

func (v *NullablePinMediaSourceImageBase64) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePinMediaSourceImageBase64(val *PinMediaSourceImageBase64) *NullablePinMediaSourceImageBase64 {
	return &NullablePinMediaSourceImageBase64{value: val, isSet: true}
}

func (v NullablePinMediaSourceImageBase64) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePinMediaSourceImageBase64) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


