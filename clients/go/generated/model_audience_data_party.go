/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AudienceDataParty Whether the data is owned by the partner (1p) or by the data provider (3p)
type AudienceDataParty string

// List of AudienceDataParty
const (
	_1P AudienceDataParty = "1p"
	_3P AudienceDataParty = "3p"
)

// All allowed values of AudienceDataParty enum
var AllowedAudienceDataPartyEnumValues = []AudienceDataParty{
	"1p",
	"3p",
}

func (v *AudienceDataParty) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AudienceDataParty(value)
	for _, existing := range AllowedAudienceDataPartyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AudienceDataParty", value)
}

// NewAudienceDataPartyFromValue returns a pointer to a valid AudienceDataParty
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAudienceDataPartyFromValue(v string) (*AudienceDataParty, error) {
	ev := AudienceDataParty(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AudienceDataParty: valid values are %v", v, AllowedAudienceDataPartyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AudienceDataParty) IsValid() bool {
	for _, existing := range AllowedAudienceDataPartyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AudienceDataParty value
func (v AudienceDataParty) Ptr() *AudienceDataParty {
	return &v
}

type NullableAudienceDataParty struct {
	value *AudienceDataParty
	isSet bool
}

func (v NullableAudienceDataParty) Get() *AudienceDataParty {
	return v.value
}

func (v *NullableAudienceDataParty) Set(val *AudienceDataParty) {
	v.value = val
	v.isSet = true
}

func (v NullableAudienceDataParty) IsSet() bool {
	return v.isSet
}

func (v *NullableAudienceDataParty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudienceDataParty(val *AudienceDataParty) *NullableAudienceDataParty {
	return &NullableAudienceDataParty{value: val, isSet: true}
}

func (v NullableAudienceDataParty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudienceDataParty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

