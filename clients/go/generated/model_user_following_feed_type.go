/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// UserFollowingFeedType Specifies the type of followees to be kept when filtering them.
type UserFollowingFeedType string

// List of UserFollowingFeedType
const (
	ALL UserFollowingFeedType = "ALL"
	RANKED UserFollowingFeedType = "RANKED"
	CREATOR_ONLY UserFollowingFeedType = "CREATOR_ONLY"
	RANKED_CREATOR_ONLY UserFollowingFeedType = "RANKED_CREATOR_ONLY"
)

// All allowed values of UserFollowingFeedType enum
var AllowedUserFollowingFeedTypeEnumValues = []UserFollowingFeedType{
	"ALL",
	"RANKED",
	"CREATOR_ONLY",
	"RANKED_CREATOR_ONLY",
}

func (v *UserFollowingFeedType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserFollowingFeedType(value)
	for _, existing := range AllowedUserFollowingFeedTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserFollowingFeedType", value)
}

// NewUserFollowingFeedTypeFromValue returns a pointer to a valid UserFollowingFeedType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserFollowingFeedTypeFromValue(v string) (*UserFollowingFeedType, error) {
	ev := UserFollowingFeedType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserFollowingFeedType: valid values are %v", v, AllowedUserFollowingFeedTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserFollowingFeedType) IsValid() bool {
	for _, existing := range AllowedUserFollowingFeedTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserFollowingFeedType value
func (v UserFollowingFeedType) Ptr() *UserFollowingFeedType {
	return &v
}

type NullableUserFollowingFeedType struct {
	value *UserFollowingFeedType
	isSet bool
}

func (v NullableUserFollowingFeedType) Get() *UserFollowingFeedType {
	return v.value
}

func (v *NullableUserFollowingFeedType) Set(val *UserFollowingFeedType) {
	v.value = val
	v.isSet = true
}

func (v NullableUserFollowingFeedType) IsSet() bool {
	return v.isSet
}

func (v *NullableUserFollowingFeedType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserFollowingFeedType(val *UserFollowingFeedType) *NullableUserFollowingFeedType {
	return &NullableUserFollowingFeedType{value: val, isSet: true}
}

func (v NullableUserFollowingFeedType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserFollowingFeedType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

