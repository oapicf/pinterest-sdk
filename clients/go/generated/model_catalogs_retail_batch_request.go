/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogsRetailBatchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogsRetailBatchRequest{}

// CatalogsRetailBatchRequest A request object that can have multiple operations on a single retail batch
type CatalogsRetailBatchRequest struct {
	CatalogType string `json:"catalog_type"`
	Country Country `json:"country"`
	Language CatalogsItemsRequestLanguage `json:"language"`
	// Array with catalogs item operations
	Items []CatalogsRetailBatchRequestItemsInner `json:"items"`
}

type _CatalogsRetailBatchRequest CatalogsRetailBatchRequest

// NewCatalogsRetailBatchRequest instantiates a new CatalogsRetailBatchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogsRetailBatchRequest(catalogType string, country Country, language CatalogsItemsRequestLanguage, items []CatalogsRetailBatchRequestItemsInner) *CatalogsRetailBatchRequest {
	this := CatalogsRetailBatchRequest{}
	this.CatalogType = catalogType
	this.Country = country
	this.Language = language
	this.Items = items
	return &this
}

// NewCatalogsRetailBatchRequestWithDefaults instantiates a new CatalogsRetailBatchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogsRetailBatchRequestWithDefaults() *CatalogsRetailBatchRequest {
	this := CatalogsRetailBatchRequest{}
	return &this
}

// GetCatalogType returns the CatalogType field value
func (o *CatalogsRetailBatchRequest) GetCatalogType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CatalogType
}

// GetCatalogTypeOk returns a tuple with the CatalogType field value
// and a boolean to check if the value has been set.
func (o *CatalogsRetailBatchRequest) GetCatalogTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CatalogType, true
}

// SetCatalogType sets field value
func (o *CatalogsRetailBatchRequest) SetCatalogType(v string) {
	o.CatalogType = v
}

// GetCountry returns the Country field value
func (o *CatalogsRetailBatchRequest) GetCountry() Country {
	if o == nil {
		var ret Country
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *CatalogsRetailBatchRequest) GetCountryOk() (*Country, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *CatalogsRetailBatchRequest) SetCountry(v Country) {
	o.Country = v
}

// GetLanguage returns the Language field value
func (o *CatalogsRetailBatchRequest) GetLanguage() CatalogsItemsRequestLanguage {
	if o == nil {
		var ret CatalogsItemsRequestLanguage
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *CatalogsRetailBatchRequest) GetLanguageOk() (*CatalogsItemsRequestLanguage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *CatalogsRetailBatchRequest) SetLanguage(v CatalogsItemsRequestLanguage) {
	o.Language = v
}

// GetItems returns the Items field value
func (o *CatalogsRetailBatchRequest) GetItems() []CatalogsRetailBatchRequestItemsInner {
	if o == nil {
		var ret []CatalogsRetailBatchRequestItemsInner
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *CatalogsRetailBatchRequest) GetItemsOk() ([]CatalogsRetailBatchRequestItemsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *CatalogsRetailBatchRequest) SetItems(v []CatalogsRetailBatchRequestItemsInner) {
	o.Items = v
}

func (o CatalogsRetailBatchRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogsRetailBatchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["catalog_type"] = o.CatalogType
	toSerialize["country"] = o.Country
	toSerialize["language"] = o.Language
	toSerialize["items"] = o.Items
	return toSerialize, nil
}

func (o *CatalogsRetailBatchRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"catalog_type",
		"country",
		"language",
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogsRetailBatchRequest := _CatalogsRetailBatchRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogsRetailBatchRequest)

	if err != nil {
		return err
	}

	*o = CatalogsRetailBatchRequest(varCatalogsRetailBatchRequest)

	return err
}

type NullableCatalogsRetailBatchRequest struct {
	value *CatalogsRetailBatchRequest
	isSet bool
}

func (v NullableCatalogsRetailBatchRequest) Get() *CatalogsRetailBatchRequest {
	return v.value
}

func (v *NullableCatalogsRetailBatchRequest) Set(val *CatalogsRetailBatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogsRetailBatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogsRetailBatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogsRetailBatchRequest(val *CatalogsRetailBatchRequest) *NullableCatalogsRetailBatchRequest {
	return &NullableCatalogsRetailBatchRequest{value: val, isSet: true}
}

func (v NullableCatalogsRetailBatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogsRetailBatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


