/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AdsAnalyticsCampaignTargetingType Reporting targeting type for campaigns
type AdsAnalyticsCampaignTargetingType string

// List of AdsAnalyticsCampaignTargetingType
const (
	KEYWORD AdsAnalyticsCampaignTargetingType = "KEYWORD"
	APPTYPE AdsAnalyticsCampaignTargetingType = "APPTYPE"
	GENDER AdsAnalyticsCampaignTargetingType = "GENDER"
	LOCATION AdsAnalyticsCampaignTargetingType = "LOCATION"
	PLACEMENT AdsAnalyticsCampaignTargetingType = "PLACEMENT"
	COUNTRY AdsAnalyticsCampaignTargetingType = "COUNTRY"
	TARGETED_INTEREST AdsAnalyticsCampaignTargetingType = "TARGETED_INTEREST"
	PINNER_INTEREST AdsAnalyticsCampaignTargetingType = "PINNER_INTEREST"
	AUDIENCE_INCLUDE AdsAnalyticsCampaignTargetingType = "AUDIENCE_INCLUDE"
	GEO AdsAnalyticsCampaignTargetingType = "GEO"
	AGE_BUCKET AdsAnalyticsCampaignTargetingType = "AGE_BUCKET"
	REGION AdsAnalyticsCampaignTargetingType = "REGION"
	CREATIVE_TYPE AdsAnalyticsCampaignTargetingType = "CREATIVE_TYPE"
	AGE_BUCKET_AND_GENDER AdsAnalyticsCampaignTargetingType = "AGE_BUCKET_AND_GENDER"
)

// All allowed values of AdsAnalyticsCampaignTargetingType enum
var AllowedAdsAnalyticsCampaignTargetingTypeEnumValues = []AdsAnalyticsCampaignTargetingType{
	"KEYWORD",
	"APPTYPE",
	"GENDER",
	"LOCATION",
	"PLACEMENT",
	"COUNTRY",
	"TARGETED_INTEREST",
	"PINNER_INTEREST",
	"AUDIENCE_INCLUDE",
	"GEO",
	"AGE_BUCKET",
	"REGION",
	"CREATIVE_TYPE",
	"AGE_BUCKET_AND_GENDER",
}

func (v *AdsAnalyticsCampaignTargetingType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AdsAnalyticsCampaignTargetingType(value)
	for _, existing := range AllowedAdsAnalyticsCampaignTargetingTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AdsAnalyticsCampaignTargetingType", value)
}

// NewAdsAnalyticsCampaignTargetingTypeFromValue returns a pointer to a valid AdsAnalyticsCampaignTargetingType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAdsAnalyticsCampaignTargetingTypeFromValue(v string) (*AdsAnalyticsCampaignTargetingType, error) {
	ev := AdsAnalyticsCampaignTargetingType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AdsAnalyticsCampaignTargetingType: valid values are %v", v, AllowedAdsAnalyticsCampaignTargetingTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AdsAnalyticsCampaignTargetingType) IsValid() bool {
	for _, existing := range AllowedAdsAnalyticsCampaignTargetingTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AdsAnalyticsCampaignTargetingType value
func (v AdsAnalyticsCampaignTargetingType) Ptr() *AdsAnalyticsCampaignTargetingType {
	return &v
}

type NullableAdsAnalyticsCampaignTargetingType struct {
	value *AdsAnalyticsCampaignTargetingType
	isSet bool
}

func (v NullableAdsAnalyticsCampaignTargetingType) Get() *AdsAnalyticsCampaignTargetingType {
	return v.value
}

func (v *NullableAdsAnalyticsCampaignTargetingType) Set(val *AdsAnalyticsCampaignTargetingType) {
	v.value = val
	v.isSet = true
}

func (v NullableAdsAnalyticsCampaignTargetingType) IsSet() bool {
	return v.isSet
}

func (v *NullableAdsAnalyticsCampaignTargetingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdsAnalyticsCampaignTargetingType(val *AdsAnalyticsCampaignTargetingType) *NullableAdsAnalyticsCampaignTargetingType {
	return &NullableAdsAnalyticsCampaignTargetingType{value: val, isSet: true}
}

func (v NullableAdsAnalyticsCampaignTargetingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdsAnalyticsCampaignTargetingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

