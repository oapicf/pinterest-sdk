/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TermsOfServiceAPIService TermsOfServiceAPI service
type TermsOfServiceAPIService service

type ApiTermsOfServiceGetRequest struct {
	ctx context.Context
	ApiService *TermsOfServiceAPIService
	adAccountId string
	includeHtml *bool
	tosType *string
}

// Return HTML in TOS text.
func (r ApiTermsOfServiceGetRequest) IncludeHtml(includeHtml bool) ApiTermsOfServiceGetRequest {
	r.includeHtml = &includeHtml
	return r
}

// Request type.
func (r ApiTermsOfServiceGetRequest) TosType(tosType string) ApiTermsOfServiceGetRequest {
	r.tosType = &tosType
	return r
}

func (r ApiTermsOfServiceGetRequest) Execute() (*TermsOfService, *http.Response, error) {
	return r.ApiService.TermsOfServiceGetExecute(r)
}

/*
TermsOfServiceGet Get terms of service

Get the text of the terms of service and see whether the advertiser has accepted the terms of service.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param adAccountId Unique identifier of an ad account.
 @return ApiTermsOfServiceGetRequest
*/
func (a *TermsOfServiceAPIService) TermsOfServiceGet(ctx context.Context, adAccountId string) ApiTermsOfServiceGetRequest {
	return ApiTermsOfServiceGetRequest{
		ApiService: a,
		ctx: ctx,
		adAccountId: adAccountId,
	}
}

// Execute executes the request
//  @return TermsOfService
func (a *TermsOfServiceAPIService) TermsOfServiceGetExecute(r ApiTermsOfServiceGetRequest) (*TermsOfService, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TermsOfService
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TermsOfServiceAPIService.TermsOfServiceGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ad_accounts/{ad_account_id}/terms_of_service"
	localVarPath = strings.Replace(localVarPath, "{"+"ad_account_id"+"}", url.PathEscape(parameterValueToString(r.adAccountId, "adAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.adAccountId) > 18 {
		return localVarReturnValue, nil, reportError("adAccountId must have less than 18 elements")
	}

	if r.includeHtml != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_html", r.includeHtml, "form", "")
	} else {
		var defaultValue bool = false
		r.includeHtml = &defaultValue
	}
	if r.tosType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tos_type", r.tosType, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
