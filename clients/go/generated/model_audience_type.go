/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AudienceType Audience type
type AudienceType string

// List of AudienceType
const (
	CUSTOMER_LIST AudienceType = "CUSTOMER_LIST"
	VISITOR AudienceType = "VISITOR"
	ENGAGEMENT AudienceType = "ENGAGEMENT"
	ACTALIKE AudienceType = "ACTALIKE"
	PERSONA AudienceType = "PERSONA"
)

// All allowed values of AudienceType enum
var AllowedAudienceTypeEnumValues = []AudienceType{
	"CUSTOMER_LIST",
	"VISITOR",
	"ENGAGEMENT",
	"ACTALIKE",
	"PERSONA",
}

func (v *AudienceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AudienceType(value)
	for _, existing := range AllowedAudienceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AudienceType", value)
}

// NewAudienceTypeFromValue returns a pointer to a valid AudienceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAudienceTypeFromValue(v string) (*AudienceType, error) {
	ev := AudienceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AudienceType: valid values are %v", v, AllowedAudienceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AudienceType) IsValid() bool {
	for _, existing := range AllowedAudienceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AudienceType value
func (v AudienceType) Ptr() *AudienceType {
	return &v
}

type NullableAudienceType struct {
	value *AudienceType
	isSet bool
}

func (v NullableAudienceType) Get() *AudienceType {
	return v.value
}

func (v *NullableAudienceType) Set(val *AudienceType) {
	v.value = val
	v.isSet = true
}

func (v NullableAudienceType) IsSet() bool {
	return v.isSet
}

func (v *NullableAudienceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudienceType(val *AudienceType) *NullableAudienceType {
	return &NullableAudienceType{value: val, isSet: true}
}

func (v NullableAudienceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudienceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

