/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogsHotelReportParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogsHotelReportParameters{}

// CatalogsHotelReportParameters Parameters for hotel report
type CatalogsHotelReportParameters struct {
	CatalogType string `json:"catalog_type"`
	Report CatalogsHotelReportParametersReport `json:"report"`
}

type _CatalogsHotelReportParameters CatalogsHotelReportParameters

// NewCatalogsHotelReportParameters instantiates a new CatalogsHotelReportParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogsHotelReportParameters(catalogType string, report CatalogsHotelReportParametersReport) *CatalogsHotelReportParameters {
	this := CatalogsHotelReportParameters{}
	this.CatalogType = catalogType
	this.Report = report
	return &this
}

// NewCatalogsHotelReportParametersWithDefaults instantiates a new CatalogsHotelReportParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogsHotelReportParametersWithDefaults() *CatalogsHotelReportParameters {
	this := CatalogsHotelReportParameters{}
	return &this
}

// GetCatalogType returns the CatalogType field value
func (o *CatalogsHotelReportParameters) GetCatalogType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CatalogType
}

// GetCatalogTypeOk returns a tuple with the CatalogType field value
// and a boolean to check if the value has been set.
func (o *CatalogsHotelReportParameters) GetCatalogTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CatalogType, true
}

// SetCatalogType sets field value
func (o *CatalogsHotelReportParameters) SetCatalogType(v string) {
	o.CatalogType = v
}

// GetReport returns the Report field value
func (o *CatalogsHotelReportParameters) GetReport() CatalogsHotelReportParametersReport {
	if o == nil {
		var ret CatalogsHotelReportParametersReport
		return ret
	}

	return o.Report
}

// GetReportOk returns a tuple with the Report field value
// and a boolean to check if the value has been set.
func (o *CatalogsHotelReportParameters) GetReportOk() (*CatalogsHotelReportParametersReport, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Report, true
}

// SetReport sets field value
func (o *CatalogsHotelReportParameters) SetReport(v CatalogsHotelReportParametersReport) {
	o.Report = v
}

func (o CatalogsHotelReportParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogsHotelReportParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["catalog_type"] = o.CatalogType
	toSerialize["report"] = o.Report
	return toSerialize, nil
}

func (o *CatalogsHotelReportParameters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"catalog_type",
		"report",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogsHotelReportParameters := _CatalogsHotelReportParameters{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogsHotelReportParameters)

	if err != nil {
		return err
	}

	*o = CatalogsHotelReportParameters(varCatalogsHotelReportParameters)

	return err
}

type NullableCatalogsHotelReportParameters struct {
	value *CatalogsHotelReportParameters
	isSet bool
}

func (v NullableCatalogsHotelReportParameters) Get() *CatalogsHotelReportParameters {
	return v.value
}

func (v *NullableCatalogsHotelReportParameters) Set(val *CatalogsHotelReportParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogsHotelReportParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogsHotelReportParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogsHotelReportParameters(val *CatalogsHotelReportParameters) *NullableCatalogsHotelReportParameters {
	return &NullableCatalogsHotelReportParameters{value: val, isSet: true}
}

func (v NullableCatalogsHotelReportParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogsHotelReportParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


