/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Permissions the model 'Permissions'
type Permissions string

// List of Permissions
const (
	ADMIN Permissions = "ADMIN"
	ANALYST Permissions = "ANALYST"
	FINANCE_MANAGER Permissions = "FINANCE_MANAGER"
	AUDIENCE_MANAGER Permissions = "AUDIENCE_MANAGER"
	CAMPAIGN_MANAGER Permissions = "CAMPAIGN_MANAGER"
	CATALOGS_MANAGER Permissions = "CATALOGS_MANAGER"
	PROFILE_PUBLISHER Permissions = "PROFILE_PUBLISHER"
)

// All allowed values of Permissions enum
var AllowedPermissionsEnumValues = []Permissions{
	"ADMIN",
	"ANALYST",
	"FINANCE_MANAGER",
	"AUDIENCE_MANAGER",
	"CAMPAIGN_MANAGER",
	"CATALOGS_MANAGER",
	"PROFILE_PUBLISHER",
}

func (v *Permissions) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Permissions(value)
	for _, existing := range AllowedPermissionsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Permissions", value)
}

// NewPermissionsFromValue returns a pointer to a valid Permissions
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPermissionsFromValue(v string) (*Permissions, error) {
	ev := Permissions(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Permissions: valid values are %v", v, AllowedPermissionsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Permissions) IsValid() bool {
	for _, existing := range AllowedPermissionsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Permissions value
func (v Permissions) Ptr() *Permissions {
	return &v
}

type NullablePermissions struct {
	value *Permissions
	isSet bool
}

func (v NullablePermissions) Get() *Permissions {
	return v.value
}

func (v *NullablePermissions) Set(val *Permissions) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissions) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissions(val *Permissions) *NullablePermissions {
	return &NullablePermissions{value: val, isSet: true}
}

func (v NullablePermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

