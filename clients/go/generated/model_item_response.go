/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ItemResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ItemResponse{}

// ItemResponse Object describing an item record
type ItemResponse struct {
	ItemResponseAnyOf *ItemResponseAnyOf
	ItemResponseAnyOf1 *ItemResponseAnyOf1
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ItemResponse) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'CREATIVE_ASSETS'
	if jsonDict["catalog_type"] == "CREATIVE_ASSETS" {
		// try to unmarshal JSON data into CatalogsCreativeAssetsItemErrorResponse
		err = json.Unmarshal(data, &dst.CatalogsCreativeAssetsItemErrorResponse);
		if err == nil {
			jsonCatalogsCreativeAssetsItemErrorResponse, _ := json.Marshal(dst.CatalogsCreativeAssetsItemErrorResponse)
			if string(jsonCatalogsCreativeAssetsItemErrorResponse) == "{}" { // empty struct
				dst.CatalogsCreativeAssetsItemErrorResponse = nil
			} else {
				return nil // data stored in dst.CatalogsCreativeAssetsItemErrorResponse, return on the first match
			}
		} else {
			dst.CatalogsCreativeAssetsItemErrorResponse = nil
		}
	}

	// check if the discriminator value is 'HOTEL'
	if jsonDict["catalog_type"] == "HOTEL" {
		// try to unmarshal JSON data into CatalogsHotelItemErrorResponse
		err = json.Unmarshal(data, &dst.CatalogsHotelItemErrorResponse);
		if err == nil {
			jsonCatalogsHotelItemErrorResponse, _ := json.Marshal(dst.CatalogsHotelItemErrorResponse)
			if string(jsonCatalogsHotelItemErrorResponse) == "{}" { // empty struct
				dst.CatalogsHotelItemErrorResponse = nil
			} else {
				return nil // data stored in dst.CatalogsHotelItemErrorResponse, return on the first match
			}
		} else {
			dst.CatalogsHotelItemErrorResponse = nil
		}
	}

	// check if the discriminator value is 'RETAIL'
	if jsonDict["catalog_type"] == "RETAIL" {
		// try to unmarshal JSON data into CatalogsRetailItemErrorResponse
		err = json.Unmarshal(data, &dst.CatalogsRetailItemErrorResponse);
		if err == nil {
			jsonCatalogsRetailItemErrorResponse, _ := json.Marshal(dst.CatalogsRetailItemErrorResponse)
			if string(jsonCatalogsRetailItemErrorResponse) == "{}" { // empty struct
				dst.CatalogsRetailItemErrorResponse = nil
			} else {
				return nil // data stored in dst.CatalogsRetailItemErrorResponse, return on the first match
			}
		} else {
			dst.CatalogsRetailItemErrorResponse = nil
		}
	}

	// check if the discriminator value is 'ItemResponse_anyOf'
	if jsonDict["catalog_type"] == "ItemResponse_anyOf" {
		// try to unmarshal JSON data into ItemResponseAnyOf
		err = json.Unmarshal(data, &dst.ItemResponseAnyOf);
		if err == nil {
			jsonItemResponseAnyOf, _ := json.Marshal(dst.ItemResponseAnyOf)
			if string(jsonItemResponseAnyOf) == "{}" { // empty struct
				dst.ItemResponseAnyOf = nil
			} else {
				return nil // data stored in dst.ItemResponseAnyOf, return on the first match
			}
		} else {
			dst.ItemResponseAnyOf = nil
		}
	}

	// check if the discriminator value is 'ItemResponse_anyOf_1'
	if jsonDict["catalog_type"] == "ItemResponse_anyOf_1" {
		// try to unmarshal JSON data into ItemResponseAnyOf1
		err = json.Unmarshal(data, &dst.ItemResponseAnyOf1);
		if err == nil {
			jsonItemResponseAnyOf1, _ := json.Marshal(dst.ItemResponseAnyOf1)
			if string(jsonItemResponseAnyOf1) == "{}" { // empty struct
				dst.ItemResponseAnyOf1 = nil
			} else {
				return nil // data stored in dst.ItemResponseAnyOf1, return on the first match
			}
		} else {
			dst.ItemResponseAnyOf1 = nil
		}
	}

	// try to unmarshal JSON data into ItemResponseAnyOf
	err = json.Unmarshal(data, &dst.ItemResponseAnyOf);
	if err == nil {
		jsonItemResponseAnyOf, _ := json.Marshal(dst.ItemResponseAnyOf)
		if string(jsonItemResponseAnyOf) == "{}" { // empty struct
			dst.ItemResponseAnyOf = nil
		} else {
			return nil // data stored in dst.ItemResponseAnyOf, return on the first match
		}
	} else {
		dst.ItemResponseAnyOf = nil
	}

	// try to unmarshal JSON data into ItemResponseAnyOf1
	err = json.Unmarshal(data, &dst.ItemResponseAnyOf1);
	if err == nil {
		jsonItemResponseAnyOf1, _ := json.Marshal(dst.ItemResponseAnyOf1)
		if string(jsonItemResponseAnyOf1) == "{}" { // empty struct
			dst.ItemResponseAnyOf1 = nil
		} else {
			return nil // data stored in dst.ItemResponseAnyOf1, return on the first match
		}
	} else {
		dst.ItemResponseAnyOf1 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ItemResponse)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *ItemResponse) MarshalJSON() ([]byte, error) {
	if src.ItemResponseAnyOf != nil {
		return json.Marshal(&src.ItemResponseAnyOf)
	}

	if src.ItemResponseAnyOf1 != nil {
		return json.Marshal(&src.ItemResponseAnyOf1)
	}

	return nil, nil // no data in anyOf schemas
}

func (src ItemResponse) ToMap() (map[string]interface{}, error) {
	if src.ItemResponseAnyOf != nil {
		return src.ItemResponseAnyOf.ToMap()
	}

	if src.ItemResponseAnyOf1 != nil {
		return src.ItemResponseAnyOf1.ToMap()
	}

    return nil, nil // no data in anyOf schemas
}

type NullableItemResponse struct {
	value *ItemResponse
	isSet bool
}

func (v NullableItemResponse) Get() *ItemResponse {
	return v.value
}

func (v *NullableItemResponse) Set(val *ItemResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableItemResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableItemResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemResponse(val *ItemResponse) *NullableItemResponse {
	return &NullableItemResponse{value: val, isSet: true}
}

func (v NullableItemResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


