/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RespondToInvitesResponseArrayItemsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RespondToInvitesResponseArrayItemsInner{}

// RespondToInvitesResponseArrayItemsInner struct for RespondToInvitesResponseArrayItemsInner
type RespondToInvitesResponseArrayItemsInner struct {
	Exception NullableInviteExceptionResponse `json:"exception,omitempty"`
	Invite NullableBaseInviteDataResponse `json:"invite,omitempty"`
}

// NewRespondToInvitesResponseArrayItemsInner instantiates a new RespondToInvitesResponseArrayItemsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRespondToInvitesResponseArrayItemsInner() *RespondToInvitesResponseArrayItemsInner {
	this := RespondToInvitesResponseArrayItemsInner{}
	return &this
}

// NewRespondToInvitesResponseArrayItemsInnerWithDefaults instantiates a new RespondToInvitesResponseArrayItemsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRespondToInvitesResponseArrayItemsInnerWithDefaults() *RespondToInvitesResponseArrayItemsInner {
	this := RespondToInvitesResponseArrayItemsInner{}
	return &this
}

// GetException returns the Exception field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RespondToInvitesResponseArrayItemsInner) GetException() InviteExceptionResponse {
	if o == nil || IsNil(o.Exception.Get()) {
		var ret InviteExceptionResponse
		return ret
	}
	return *o.Exception.Get()
}

// GetExceptionOk returns a tuple with the Exception field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RespondToInvitesResponseArrayItemsInner) GetExceptionOk() (*InviteExceptionResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Exception.Get(), o.Exception.IsSet()
}

// HasException returns a boolean if a field has been set.
func (o *RespondToInvitesResponseArrayItemsInner) HasException() bool {
	if o != nil && o.Exception.IsSet() {
		return true
	}

	return false
}

// SetException gets a reference to the given NullableInviteExceptionResponse and assigns it to the Exception field.
func (o *RespondToInvitesResponseArrayItemsInner) SetException(v InviteExceptionResponse) {
	o.Exception.Set(&v)
}
// SetExceptionNil sets the value for Exception to be an explicit nil
func (o *RespondToInvitesResponseArrayItemsInner) SetExceptionNil() {
	o.Exception.Set(nil)
}

// UnsetException ensures that no value is present for Exception, not even an explicit nil
func (o *RespondToInvitesResponseArrayItemsInner) UnsetException() {
	o.Exception.Unset()
}

// GetInvite returns the Invite field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RespondToInvitesResponseArrayItemsInner) GetInvite() BaseInviteDataResponse {
	if o == nil || IsNil(o.Invite.Get()) {
		var ret BaseInviteDataResponse
		return ret
	}
	return *o.Invite.Get()
}

// GetInviteOk returns a tuple with the Invite field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RespondToInvitesResponseArrayItemsInner) GetInviteOk() (*BaseInviteDataResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Invite.Get(), o.Invite.IsSet()
}

// HasInvite returns a boolean if a field has been set.
func (o *RespondToInvitesResponseArrayItemsInner) HasInvite() bool {
	if o != nil && o.Invite.IsSet() {
		return true
	}

	return false
}

// SetInvite gets a reference to the given NullableBaseInviteDataResponse and assigns it to the Invite field.
func (o *RespondToInvitesResponseArrayItemsInner) SetInvite(v BaseInviteDataResponse) {
	o.Invite.Set(&v)
}
// SetInviteNil sets the value for Invite to be an explicit nil
func (o *RespondToInvitesResponseArrayItemsInner) SetInviteNil() {
	o.Invite.Set(nil)
}

// UnsetInvite ensures that no value is present for Invite, not even an explicit nil
func (o *RespondToInvitesResponseArrayItemsInner) UnsetInvite() {
	o.Invite.Unset()
}

func (o RespondToInvitesResponseArrayItemsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RespondToInvitesResponseArrayItemsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Exception.IsSet() {
		toSerialize["exception"] = o.Exception.Get()
	}
	if o.Invite.IsSet() {
		toSerialize["invite"] = o.Invite.Get()
	}
	return toSerialize, nil
}

type NullableRespondToInvitesResponseArrayItemsInner struct {
	value *RespondToInvitesResponseArrayItemsInner
	isSet bool
}

func (v NullableRespondToInvitesResponseArrayItemsInner) Get() *RespondToInvitesResponseArrayItemsInner {
	return v.value
}

func (v *NullableRespondToInvitesResponseArrayItemsInner) Set(val *RespondToInvitesResponseArrayItemsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableRespondToInvitesResponseArrayItemsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableRespondToInvitesResponseArrayItemsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRespondToInvitesResponseArrayItemsInner(val *RespondToInvitesResponseArrayItemsInner) *NullableRespondToInvitesResponseArrayItemsInner {
	return &NullableRespondToInvitesResponseArrayItemsInner{value: val, isSet: true}
}

func (v NullableRespondToInvitesResponseArrayItemsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRespondToInvitesResponseArrayItemsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


