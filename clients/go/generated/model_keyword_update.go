/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KeywordUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeywordUpdate{}

// KeywordUpdate struct for KeywordUpdate
type KeywordUpdate struct {
	// Keyword ID.
	Id string `json:"id" validate:"regexp=^\\\\d+$"`
	// Is keyword archived?
	Archived *bool `json:"archived,omitempty"`
	// </p><strong>Note:</strong> bid field has been deprecated. Input will not be set and field will return null. Keyword custom bid in microcurrency - null if inherited from parent ad group.
	Bid NullableInt32 `json:"bid,omitempty"`
}

type _KeywordUpdate KeywordUpdate

// NewKeywordUpdate instantiates a new KeywordUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeywordUpdate(id string) *KeywordUpdate {
	this := KeywordUpdate{}
	this.Id = id
	return &this
}

// NewKeywordUpdateWithDefaults instantiates a new KeywordUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeywordUpdateWithDefaults() *KeywordUpdate {
	this := KeywordUpdate{}
	return &this
}

// GetId returns the Id field value
func (o *KeywordUpdate) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *KeywordUpdate) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *KeywordUpdate) SetId(v string) {
	o.Id = v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *KeywordUpdate) GetArchived() bool {
	if o == nil || IsNil(o.Archived) {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeywordUpdate) GetArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *KeywordUpdate) HasArchived() bool {
	if o != nil && !IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *KeywordUpdate) SetArchived(v bool) {
	o.Archived = &v
}

// GetBid returns the Bid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeywordUpdate) GetBid() int32 {
	if o == nil || IsNil(o.Bid.Get()) {
		var ret int32
		return ret
	}
	return *o.Bid.Get()
}

// GetBidOk returns a tuple with the Bid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeywordUpdate) GetBidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bid.Get(), o.Bid.IsSet()
}

// HasBid returns a boolean if a field has been set.
func (o *KeywordUpdate) HasBid() bool {
	if o != nil && o.Bid.IsSet() {
		return true
	}

	return false
}

// SetBid gets a reference to the given NullableInt32 and assigns it to the Bid field.
func (o *KeywordUpdate) SetBid(v int32) {
	o.Bid.Set(&v)
}
// SetBidNil sets the value for Bid to be an explicit nil
func (o *KeywordUpdate) SetBidNil() {
	o.Bid.Set(nil)
}

// UnsetBid ensures that no value is present for Bid, not even an explicit nil
func (o *KeywordUpdate) UnsetBid() {
	o.Bid.Unset()
}

func (o KeywordUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeywordUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	if o.Bid.IsSet() {
		toSerialize["bid"] = o.Bid.Get()
	}
	return toSerialize, nil
}

func (o *KeywordUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKeywordUpdate := _KeywordUpdate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKeywordUpdate)

	if err != nil {
		return err
	}

	*o = KeywordUpdate(varKeywordUpdate)

	return err
}

type NullableKeywordUpdate struct {
	value *KeywordUpdate
	isSet bool
}

func (v NullableKeywordUpdate) Get() *KeywordUpdate {
	return v.value
}

func (v *NullableKeywordUpdate) Set(val *KeywordUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableKeywordUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableKeywordUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeywordUpdate(val *KeywordUpdate) *NullableKeywordUpdate {
	return &NullableKeywordUpdate{value: val, isSet: true}
}

func (v NullableKeywordUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeywordUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


