/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CatalogsItemsBatch - Object describing the catalogs items batch
type CatalogsItemsBatch struct {
	CatalogsCreativeAssetsItemsBatch *CatalogsCreativeAssetsItemsBatch
	CatalogsHotelItemsBatch *CatalogsHotelItemsBatch
	CatalogsRetailItemsBatch *CatalogsRetailItemsBatch
}

// CatalogsCreativeAssetsItemsBatchAsCatalogsItemsBatch is a convenience function that returns CatalogsCreativeAssetsItemsBatch wrapped in CatalogsItemsBatch
func CatalogsCreativeAssetsItemsBatchAsCatalogsItemsBatch(v *CatalogsCreativeAssetsItemsBatch) CatalogsItemsBatch {
	return CatalogsItemsBatch{
		CatalogsCreativeAssetsItemsBatch: v,
	}
}

// CatalogsHotelItemsBatchAsCatalogsItemsBatch is a convenience function that returns CatalogsHotelItemsBatch wrapped in CatalogsItemsBatch
func CatalogsHotelItemsBatchAsCatalogsItemsBatch(v *CatalogsHotelItemsBatch) CatalogsItemsBatch {
	return CatalogsItemsBatch{
		CatalogsHotelItemsBatch: v,
	}
}

// CatalogsRetailItemsBatchAsCatalogsItemsBatch is a convenience function that returns CatalogsRetailItemsBatch wrapped in CatalogsItemsBatch
func CatalogsRetailItemsBatchAsCatalogsItemsBatch(v *CatalogsRetailItemsBatch) CatalogsItemsBatch {
	return CatalogsItemsBatch{
		CatalogsRetailItemsBatch: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CatalogsItemsBatch) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CatalogsCreativeAssetsItemsBatch
	err = newStrictDecoder(data).Decode(&dst.CatalogsCreativeAssetsItemsBatch)
	if err == nil {
		jsonCatalogsCreativeAssetsItemsBatch, _ := json.Marshal(dst.CatalogsCreativeAssetsItemsBatch)
		if string(jsonCatalogsCreativeAssetsItemsBatch) == "{}" { // empty struct
			dst.CatalogsCreativeAssetsItemsBatch = nil
		} else {
			if err = validator.Validate(dst.CatalogsCreativeAssetsItemsBatch); err != nil {
				dst.CatalogsCreativeAssetsItemsBatch = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogsCreativeAssetsItemsBatch = nil
	}

	// try to unmarshal data into CatalogsHotelItemsBatch
	err = newStrictDecoder(data).Decode(&dst.CatalogsHotelItemsBatch)
	if err == nil {
		jsonCatalogsHotelItemsBatch, _ := json.Marshal(dst.CatalogsHotelItemsBatch)
		if string(jsonCatalogsHotelItemsBatch) == "{}" { // empty struct
			dst.CatalogsHotelItemsBatch = nil
		} else {
			if err = validator.Validate(dst.CatalogsHotelItemsBatch); err != nil {
				dst.CatalogsHotelItemsBatch = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogsHotelItemsBatch = nil
	}

	// try to unmarshal data into CatalogsRetailItemsBatch
	err = newStrictDecoder(data).Decode(&dst.CatalogsRetailItemsBatch)
	if err == nil {
		jsonCatalogsRetailItemsBatch, _ := json.Marshal(dst.CatalogsRetailItemsBatch)
		if string(jsonCatalogsRetailItemsBatch) == "{}" { // empty struct
			dst.CatalogsRetailItemsBatch = nil
		} else {
			if err = validator.Validate(dst.CatalogsRetailItemsBatch); err != nil {
				dst.CatalogsRetailItemsBatch = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogsRetailItemsBatch = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CatalogsCreativeAssetsItemsBatch = nil
		dst.CatalogsHotelItemsBatch = nil
		dst.CatalogsRetailItemsBatch = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CatalogsItemsBatch)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CatalogsItemsBatch)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CatalogsItemsBatch) MarshalJSON() ([]byte, error) {
	if src.CatalogsCreativeAssetsItemsBatch != nil {
		return json.Marshal(&src.CatalogsCreativeAssetsItemsBatch)
	}

	if src.CatalogsHotelItemsBatch != nil {
		return json.Marshal(&src.CatalogsHotelItemsBatch)
	}

	if src.CatalogsRetailItemsBatch != nil {
		return json.Marshal(&src.CatalogsRetailItemsBatch)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CatalogsItemsBatch) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CatalogsCreativeAssetsItemsBatch != nil {
		return obj.CatalogsCreativeAssetsItemsBatch
	}

	if obj.CatalogsHotelItemsBatch != nil {
		return obj.CatalogsHotelItemsBatch
	}

	if obj.CatalogsRetailItemsBatch != nil {
		return obj.CatalogsRetailItemsBatch
	}

	// all schemas are nil
	return nil
}

type NullableCatalogsItemsBatch struct {
	value *CatalogsItemsBatch
	isSet bool
}

func (v NullableCatalogsItemsBatch) Get() *CatalogsItemsBatch {
	return v.value
}

func (v *NullableCatalogsItemsBatch) Set(val *CatalogsItemsBatch) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogsItemsBatch) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogsItemsBatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogsItemsBatch(val *CatalogsItemsBatch) *NullableCatalogsItemsBatch {
	return &NullableCatalogsItemsBatch{value: val, isSet: true}
}

func (v NullableCatalogsItemsBatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogsItemsBatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


