/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CatalogsItemsBatchRequest - Request object of catalogs items batch
type CatalogsItemsBatchRequest struct {
	CatalogsItemsCreateBatchRequest *CatalogsItemsCreateBatchRequest
	CatalogsItemsDeleteBatchRequest *CatalogsItemsDeleteBatchRequest
	CatalogsItemsDeleteDiscontinuedBatchRequest *CatalogsItemsDeleteDiscontinuedBatchRequest
	CatalogsItemsUpdateBatchRequest *CatalogsItemsUpdateBatchRequest
	CatalogsItemsUpsertBatchRequest *CatalogsItemsUpsertBatchRequest
}

// CatalogsItemsCreateBatchRequestAsCatalogsItemsBatchRequest is a convenience function that returns CatalogsItemsCreateBatchRequest wrapped in CatalogsItemsBatchRequest
func CatalogsItemsCreateBatchRequestAsCatalogsItemsBatchRequest(v *CatalogsItemsCreateBatchRequest) CatalogsItemsBatchRequest {
	return CatalogsItemsBatchRequest{
		CatalogsItemsCreateBatchRequest: v,
	}
}

// CatalogsItemsDeleteBatchRequestAsCatalogsItemsBatchRequest is a convenience function that returns CatalogsItemsDeleteBatchRequest wrapped in CatalogsItemsBatchRequest
func CatalogsItemsDeleteBatchRequestAsCatalogsItemsBatchRequest(v *CatalogsItemsDeleteBatchRequest) CatalogsItemsBatchRequest {
	return CatalogsItemsBatchRequest{
		CatalogsItemsDeleteBatchRequest: v,
	}
}

// CatalogsItemsDeleteDiscontinuedBatchRequestAsCatalogsItemsBatchRequest is a convenience function that returns CatalogsItemsDeleteDiscontinuedBatchRequest wrapped in CatalogsItemsBatchRequest
func CatalogsItemsDeleteDiscontinuedBatchRequestAsCatalogsItemsBatchRequest(v *CatalogsItemsDeleteDiscontinuedBatchRequest) CatalogsItemsBatchRequest {
	return CatalogsItemsBatchRequest{
		CatalogsItemsDeleteDiscontinuedBatchRequest: v,
	}
}

// CatalogsItemsUpdateBatchRequestAsCatalogsItemsBatchRequest is a convenience function that returns CatalogsItemsUpdateBatchRequest wrapped in CatalogsItemsBatchRequest
func CatalogsItemsUpdateBatchRequestAsCatalogsItemsBatchRequest(v *CatalogsItemsUpdateBatchRequest) CatalogsItemsBatchRequest {
	return CatalogsItemsBatchRequest{
		CatalogsItemsUpdateBatchRequest: v,
	}
}

// CatalogsItemsUpsertBatchRequestAsCatalogsItemsBatchRequest is a convenience function that returns CatalogsItemsUpsertBatchRequest wrapped in CatalogsItemsBatchRequest
func CatalogsItemsUpsertBatchRequestAsCatalogsItemsBatchRequest(v *CatalogsItemsUpsertBatchRequest) CatalogsItemsBatchRequest {
	return CatalogsItemsBatchRequest{
		CatalogsItemsUpsertBatchRequest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CatalogsItemsBatchRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CatalogsItemsCreateBatchRequest
	err = newStrictDecoder(data).Decode(&dst.CatalogsItemsCreateBatchRequest)
	if err == nil {
		jsonCatalogsItemsCreateBatchRequest, _ := json.Marshal(dst.CatalogsItemsCreateBatchRequest)
		if string(jsonCatalogsItemsCreateBatchRequest) == "{}" { // empty struct
			dst.CatalogsItemsCreateBatchRequest = nil
		} else {
			if err = validator.Validate(dst.CatalogsItemsCreateBatchRequest); err != nil {
				dst.CatalogsItemsCreateBatchRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogsItemsCreateBatchRequest = nil
	}

	// try to unmarshal data into CatalogsItemsDeleteBatchRequest
	err = newStrictDecoder(data).Decode(&dst.CatalogsItemsDeleteBatchRequest)
	if err == nil {
		jsonCatalogsItemsDeleteBatchRequest, _ := json.Marshal(dst.CatalogsItemsDeleteBatchRequest)
		if string(jsonCatalogsItemsDeleteBatchRequest) == "{}" { // empty struct
			dst.CatalogsItemsDeleteBatchRequest = nil
		} else {
			if err = validator.Validate(dst.CatalogsItemsDeleteBatchRequest); err != nil {
				dst.CatalogsItemsDeleteBatchRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogsItemsDeleteBatchRequest = nil
	}

	// try to unmarshal data into CatalogsItemsDeleteDiscontinuedBatchRequest
	err = newStrictDecoder(data).Decode(&dst.CatalogsItemsDeleteDiscontinuedBatchRequest)
	if err == nil {
		jsonCatalogsItemsDeleteDiscontinuedBatchRequest, _ := json.Marshal(dst.CatalogsItemsDeleteDiscontinuedBatchRequest)
		if string(jsonCatalogsItemsDeleteDiscontinuedBatchRequest) == "{}" { // empty struct
			dst.CatalogsItemsDeleteDiscontinuedBatchRequest = nil
		} else {
			if err = validator.Validate(dst.CatalogsItemsDeleteDiscontinuedBatchRequest); err != nil {
				dst.CatalogsItemsDeleteDiscontinuedBatchRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogsItemsDeleteDiscontinuedBatchRequest = nil
	}

	// try to unmarshal data into CatalogsItemsUpdateBatchRequest
	err = newStrictDecoder(data).Decode(&dst.CatalogsItemsUpdateBatchRequest)
	if err == nil {
		jsonCatalogsItemsUpdateBatchRequest, _ := json.Marshal(dst.CatalogsItemsUpdateBatchRequest)
		if string(jsonCatalogsItemsUpdateBatchRequest) == "{}" { // empty struct
			dst.CatalogsItemsUpdateBatchRequest = nil
		} else {
			if err = validator.Validate(dst.CatalogsItemsUpdateBatchRequest); err != nil {
				dst.CatalogsItemsUpdateBatchRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogsItemsUpdateBatchRequest = nil
	}

	// try to unmarshal data into CatalogsItemsUpsertBatchRequest
	err = newStrictDecoder(data).Decode(&dst.CatalogsItemsUpsertBatchRequest)
	if err == nil {
		jsonCatalogsItemsUpsertBatchRequest, _ := json.Marshal(dst.CatalogsItemsUpsertBatchRequest)
		if string(jsonCatalogsItemsUpsertBatchRequest) == "{}" { // empty struct
			dst.CatalogsItemsUpsertBatchRequest = nil
		} else {
			if err = validator.Validate(dst.CatalogsItemsUpsertBatchRequest); err != nil {
				dst.CatalogsItemsUpsertBatchRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogsItemsUpsertBatchRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CatalogsItemsCreateBatchRequest = nil
		dst.CatalogsItemsDeleteBatchRequest = nil
		dst.CatalogsItemsDeleteDiscontinuedBatchRequest = nil
		dst.CatalogsItemsUpdateBatchRequest = nil
		dst.CatalogsItemsUpsertBatchRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CatalogsItemsBatchRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CatalogsItemsBatchRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CatalogsItemsBatchRequest) MarshalJSON() ([]byte, error) {
	if src.CatalogsItemsCreateBatchRequest != nil {
		return json.Marshal(&src.CatalogsItemsCreateBatchRequest)
	}

	if src.CatalogsItemsDeleteBatchRequest != nil {
		return json.Marshal(&src.CatalogsItemsDeleteBatchRequest)
	}

	if src.CatalogsItemsDeleteDiscontinuedBatchRequest != nil {
		return json.Marshal(&src.CatalogsItemsDeleteDiscontinuedBatchRequest)
	}

	if src.CatalogsItemsUpdateBatchRequest != nil {
		return json.Marshal(&src.CatalogsItemsUpdateBatchRequest)
	}

	if src.CatalogsItemsUpsertBatchRequest != nil {
		return json.Marshal(&src.CatalogsItemsUpsertBatchRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CatalogsItemsBatchRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CatalogsItemsCreateBatchRequest != nil {
		return obj.CatalogsItemsCreateBatchRequest
	}

	if obj.CatalogsItemsDeleteBatchRequest != nil {
		return obj.CatalogsItemsDeleteBatchRequest
	}

	if obj.CatalogsItemsDeleteDiscontinuedBatchRequest != nil {
		return obj.CatalogsItemsDeleteDiscontinuedBatchRequest
	}

	if obj.CatalogsItemsUpdateBatchRequest != nil {
		return obj.CatalogsItemsUpdateBatchRequest
	}

	if obj.CatalogsItemsUpsertBatchRequest != nil {
		return obj.CatalogsItemsUpsertBatchRequest
	}

	// all schemas are nil
	return nil
}

type NullableCatalogsItemsBatchRequest struct {
	value *CatalogsItemsBatchRequest
	isSet bool
}

func (v NullableCatalogsItemsBatchRequest) Get() *CatalogsItemsBatchRequest {
	return v.value
}

func (v *NullableCatalogsItemsBatchRequest) Set(val *CatalogsItemsBatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogsItemsBatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogsItemsBatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogsItemsBatchRequest(val *CatalogsItemsBatchRequest) *NullableCatalogsItemsBatchRequest {
	return &NullableCatalogsItemsBatchRequest{value: val, isSet: true}
}

func (v NullableCatalogsItemsBatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogsItemsBatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


