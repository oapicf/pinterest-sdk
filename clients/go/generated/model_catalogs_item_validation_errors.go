/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CatalogsItemValidationErrors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogsItemValidationErrors{}

// CatalogsItemValidationErrors struct for CatalogsItemValidationErrors
type CatalogsItemValidationErrors struct {
	ADULT_INVALID *CatalogsItemValidationDetails `json:"ADULT_INVALID,omitempty"`
	ADWORDS_FORMAT_INVALID *CatalogsItemValidationDetails `json:"ADWORDS_FORMAT_INVALID,omitempty"`
	AVAILABILITY_INVALID *CatalogsItemValidationDetails `json:"AVAILABILITY_INVALID,omitempty"`
	BLOCKLISTED_IMAGE_SIGNATURE *CatalogsItemValidationDetails `json:"BLOCKLISTED_IMAGE_SIGNATURE,omitempty"`
	DESCRIPTION_MISSING *CatalogsItemValidationDetails `json:"DESCRIPTION_MISSING,omitempty"`
	DUPLICATE_PRODUCTS *CatalogsItemValidationDetails `json:"DUPLICATE_PRODUCTS,omitempty"`
	IMAGE_LINK_INVALID *CatalogsItemValidationDetails `json:"IMAGE_LINK_INVALID,omitempty"`
	IMAGE_LINK_LENGTH_TOO_LONG *CatalogsItemValidationDetails `json:"IMAGE_LINK_LENGTH_TOO_LONG,omitempty"`
	IMAGE_LINK_MISSING *CatalogsItemValidationDetails `json:"IMAGE_LINK_MISSING,omitempty"`
	INVALID_DOMAIN *CatalogsItemValidationDetails `json:"INVALID_DOMAIN,omitempty"`
	ITEMID_MISSING *CatalogsItemValidationDetails `json:"ITEMID_MISSING,omitempty"`
	ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE *CatalogsItemValidationDetails `json:"ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE,omitempty"`
	LINK_FORMAT_INVALID *CatalogsItemValidationDetails `json:"LINK_FORMAT_INVALID,omitempty"`
	LINK_LENGTH_TOO_LONG *CatalogsItemValidationDetails `json:"LINK_LENGTH_TOO_LONG,omitempty"`
	LIST_PRICE_INVALID *CatalogsItemValidationDetails `json:"LIST_PRICE_INVALID,omitempty"`
	MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED *CatalogsItemValidationDetails `json:"MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED,omitempty"`
	PARSE_LINE_ERROR *CatalogsItemValidationDetails `json:"PARSE_LINE_ERROR,omitempty"`
	PINJOIN_CONTENT_UNSAFE *CatalogsItemValidationDetails `json:"PINJOIN_CONTENT_UNSAFE,omitempty"`
	PRICE_CANNOT_BE_DETERMINED *CatalogsItemValidationDetails `json:"PRICE_CANNOT_BE_DETERMINED,omitempty"`
	PRICE_MISSING *CatalogsItemValidationDetails `json:"PRICE_MISSING,omitempty"`
	PRODUCT_LINK_MISSING *CatalogsItemValidationDetails `json:"PRODUCT_LINK_MISSING,omitempty"`
	PRODUCT_PRICE_INVALID *CatalogsItemValidationDetails `json:"PRODUCT_PRICE_INVALID,omitempty"`
	TITLE_MISSING *CatalogsItemValidationDetails `json:"TITLE_MISSING,omitempty"`
}

// NewCatalogsItemValidationErrors instantiates a new CatalogsItemValidationErrors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogsItemValidationErrors() *CatalogsItemValidationErrors {
	this := CatalogsItemValidationErrors{}
	return &this
}

// NewCatalogsItemValidationErrorsWithDefaults instantiates a new CatalogsItemValidationErrors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogsItemValidationErrorsWithDefaults() *CatalogsItemValidationErrors {
	this := CatalogsItemValidationErrors{}
	return &this
}

// GetADULT_INVALID returns the ADULT_INVALID field value if set, zero value otherwise.
func (o *CatalogsItemValidationErrors) GetADULT_INVALID() CatalogsItemValidationDetails {
	if o == nil || IsNil(o.ADULT_INVALID) {
		var ret CatalogsItemValidationDetails
		return ret
	}
	return *o.ADULT_INVALID
}

// GetADULT_INVALIDOk returns a tuple with the ADULT_INVALID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsItemValidationErrors) GetADULT_INVALIDOk() (*CatalogsItemValidationDetails, bool) {
	if o == nil || IsNil(o.ADULT_INVALID) {
		return nil, false
	}
	return o.ADULT_INVALID, true
}

// HasADULT_INVALID returns a boolean if a field has been set.
func (o *CatalogsItemValidationErrors) HasADULT_INVALID() bool {
	if o != nil && !IsNil(o.ADULT_INVALID) {
		return true
	}

	return false
}

// SetADULT_INVALID gets a reference to the given CatalogsItemValidationDetails and assigns it to the ADULT_INVALID field.
func (o *CatalogsItemValidationErrors) SetADULT_INVALID(v CatalogsItemValidationDetails) {
	o.ADULT_INVALID = &v
}

// GetADWORDS_FORMAT_INVALID returns the ADWORDS_FORMAT_INVALID field value if set, zero value otherwise.
func (o *CatalogsItemValidationErrors) GetADWORDS_FORMAT_INVALID() CatalogsItemValidationDetails {
	if o == nil || IsNil(o.ADWORDS_FORMAT_INVALID) {
		var ret CatalogsItemValidationDetails
		return ret
	}
	return *o.ADWORDS_FORMAT_INVALID
}

// GetADWORDS_FORMAT_INVALIDOk returns a tuple with the ADWORDS_FORMAT_INVALID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsItemValidationErrors) GetADWORDS_FORMAT_INVALIDOk() (*CatalogsItemValidationDetails, bool) {
	if o == nil || IsNil(o.ADWORDS_FORMAT_INVALID) {
		return nil, false
	}
	return o.ADWORDS_FORMAT_INVALID, true
}

// HasADWORDS_FORMAT_INVALID returns a boolean if a field has been set.
func (o *CatalogsItemValidationErrors) HasADWORDS_FORMAT_INVALID() bool {
	if o != nil && !IsNil(o.ADWORDS_FORMAT_INVALID) {
		return true
	}

	return false
}

// SetADWORDS_FORMAT_INVALID gets a reference to the given CatalogsItemValidationDetails and assigns it to the ADWORDS_FORMAT_INVALID field.
func (o *CatalogsItemValidationErrors) SetADWORDS_FORMAT_INVALID(v CatalogsItemValidationDetails) {
	o.ADWORDS_FORMAT_INVALID = &v
}

// GetAVAILABILITY_INVALID returns the AVAILABILITY_INVALID field value if set, zero value otherwise.
func (o *CatalogsItemValidationErrors) GetAVAILABILITY_INVALID() CatalogsItemValidationDetails {
	if o == nil || IsNil(o.AVAILABILITY_INVALID) {
		var ret CatalogsItemValidationDetails
		return ret
	}
	return *o.AVAILABILITY_INVALID
}

// GetAVAILABILITY_INVALIDOk returns a tuple with the AVAILABILITY_INVALID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsItemValidationErrors) GetAVAILABILITY_INVALIDOk() (*CatalogsItemValidationDetails, bool) {
	if o == nil || IsNil(o.AVAILABILITY_INVALID) {
		return nil, false
	}
	return o.AVAILABILITY_INVALID, true
}

// HasAVAILABILITY_INVALID returns a boolean if a field has been set.
func (o *CatalogsItemValidationErrors) HasAVAILABILITY_INVALID() bool {
	if o != nil && !IsNil(o.AVAILABILITY_INVALID) {
		return true
	}

	return false
}

// SetAVAILABILITY_INVALID gets a reference to the given CatalogsItemValidationDetails and assigns it to the AVAILABILITY_INVALID field.
func (o *CatalogsItemValidationErrors) SetAVAILABILITY_INVALID(v CatalogsItemValidationDetails) {
	o.AVAILABILITY_INVALID = &v
}

// GetBLOCKLISTED_IMAGE_SIGNATURE returns the BLOCKLISTED_IMAGE_SIGNATURE field value if set, zero value otherwise.
func (o *CatalogsItemValidationErrors) GetBLOCKLISTED_IMAGE_SIGNATURE() CatalogsItemValidationDetails {
	if o == nil || IsNil(o.BLOCKLISTED_IMAGE_SIGNATURE) {
		var ret CatalogsItemValidationDetails
		return ret
	}
	return *o.BLOCKLISTED_IMAGE_SIGNATURE
}

// GetBLOCKLISTED_IMAGE_SIGNATUREOk returns a tuple with the BLOCKLISTED_IMAGE_SIGNATURE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsItemValidationErrors) GetBLOCKLISTED_IMAGE_SIGNATUREOk() (*CatalogsItemValidationDetails, bool) {
	if o == nil || IsNil(o.BLOCKLISTED_IMAGE_SIGNATURE) {
		return nil, false
	}
	return o.BLOCKLISTED_IMAGE_SIGNATURE, true
}

// HasBLOCKLISTED_IMAGE_SIGNATURE returns a boolean if a field has been set.
func (o *CatalogsItemValidationErrors) HasBLOCKLISTED_IMAGE_SIGNATURE() bool {
	if o != nil && !IsNil(o.BLOCKLISTED_IMAGE_SIGNATURE) {
		return true
	}

	return false
}

// SetBLOCKLISTED_IMAGE_SIGNATURE gets a reference to the given CatalogsItemValidationDetails and assigns it to the BLOCKLISTED_IMAGE_SIGNATURE field.
func (o *CatalogsItemValidationErrors) SetBLOCKLISTED_IMAGE_SIGNATURE(v CatalogsItemValidationDetails) {
	o.BLOCKLISTED_IMAGE_SIGNATURE = &v
}

// GetDESCRIPTION_MISSING returns the DESCRIPTION_MISSING field value if set, zero value otherwise.
func (o *CatalogsItemValidationErrors) GetDESCRIPTION_MISSING() CatalogsItemValidationDetails {
	if o == nil || IsNil(o.DESCRIPTION_MISSING) {
		var ret CatalogsItemValidationDetails
		return ret
	}
	return *o.DESCRIPTION_MISSING
}

// GetDESCRIPTION_MISSINGOk returns a tuple with the DESCRIPTION_MISSING field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsItemValidationErrors) GetDESCRIPTION_MISSINGOk() (*CatalogsItemValidationDetails, bool) {
	if o == nil || IsNil(o.DESCRIPTION_MISSING) {
		return nil, false
	}
	return o.DESCRIPTION_MISSING, true
}

// HasDESCRIPTION_MISSING returns a boolean if a field has been set.
func (o *CatalogsItemValidationErrors) HasDESCRIPTION_MISSING() bool {
	if o != nil && !IsNil(o.DESCRIPTION_MISSING) {
		return true
	}

	return false
}

// SetDESCRIPTION_MISSING gets a reference to the given CatalogsItemValidationDetails and assigns it to the DESCRIPTION_MISSING field.
func (o *CatalogsItemValidationErrors) SetDESCRIPTION_MISSING(v CatalogsItemValidationDetails) {
	o.DESCRIPTION_MISSING = &v
}

// GetDUPLICATE_PRODUCTS returns the DUPLICATE_PRODUCTS field value if set, zero value otherwise.
func (o *CatalogsItemValidationErrors) GetDUPLICATE_PRODUCTS() CatalogsItemValidationDetails {
	if o == nil || IsNil(o.DUPLICATE_PRODUCTS) {
		var ret CatalogsItemValidationDetails
		return ret
	}
	return *o.DUPLICATE_PRODUCTS
}

// GetDUPLICATE_PRODUCTSOk returns a tuple with the DUPLICATE_PRODUCTS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsItemValidationErrors) GetDUPLICATE_PRODUCTSOk() (*CatalogsItemValidationDetails, bool) {
	if o == nil || IsNil(o.DUPLICATE_PRODUCTS) {
		return nil, false
	}
	return o.DUPLICATE_PRODUCTS, true
}

// HasDUPLICATE_PRODUCTS returns a boolean if a field has been set.
func (o *CatalogsItemValidationErrors) HasDUPLICATE_PRODUCTS() bool {
	if o != nil && !IsNil(o.DUPLICATE_PRODUCTS) {
		return true
	}

	return false
}

// SetDUPLICATE_PRODUCTS gets a reference to the given CatalogsItemValidationDetails and assigns it to the DUPLICATE_PRODUCTS field.
func (o *CatalogsItemValidationErrors) SetDUPLICATE_PRODUCTS(v CatalogsItemValidationDetails) {
	o.DUPLICATE_PRODUCTS = &v
}

// GetIMAGE_LINK_INVALID returns the IMAGE_LINK_INVALID field value if set, zero value otherwise.
func (o *CatalogsItemValidationErrors) GetIMAGE_LINK_INVALID() CatalogsItemValidationDetails {
	if o == nil || IsNil(o.IMAGE_LINK_INVALID) {
		var ret CatalogsItemValidationDetails
		return ret
	}
	return *o.IMAGE_LINK_INVALID
}

// GetIMAGE_LINK_INVALIDOk returns a tuple with the IMAGE_LINK_INVALID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsItemValidationErrors) GetIMAGE_LINK_INVALIDOk() (*CatalogsItemValidationDetails, bool) {
	if o == nil || IsNil(o.IMAGE_LINK_INVALID) {
		return nil, false
	}
	return o.IMAGE_LINK_INVALID, true
}

// HasIMAGE_LINK_INVALID returns a boolean if a field has been set.
func (o *CatalogsItemValidationErrors) HasIMAGE_LINK_INVALID() bool {
	if o != nil && !IsNil(o.IMAGE_LINK_INVALID) {
		return true
	}

	return false
}

// SetIMAGE_LINK_INVALID gets a reference to the given CatalogsItemValidationDetails and assigns it to the IMAGE_LINK_INVALID field.
func (o *CatalogsItemValidationErrors) SetIMAGE_LINK_INVALID(v CatalogsItemValidationDetails) {
	o.IMAGE_LINK_INVALID = &v
}

// GetIMAGE_LINK_LENGTH_TOO_LONG returns the IMAGE_LINK_LENGTH_TOO_LONG field value if set, zero value otherwise.
func (o *CatalogsItemValidationErrors) GetIMAGE_LINK_LENGTH_TOO_LONG() CatalogsItemValidationDetails {
	if o == nil || IsNil(o.IMAGE_LINK_LENGTH_TOO_LONG) {
		var ret CatalogsItemValidationDetails
		return ret
	}
	return *o.IMAGE_LINK_LENGTH_TOO_LONG
}

// GetIMAGE_LINK_LENGTH_TOO_LONGOk returns a tuple with the IMAGE_LINK_LENGTH_TOO_LONG field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsItemValidationErrors) GetIMAGE_LINK_LENGTH_TOO_LONGOk() (*CatalogsItemValidationDetails, bool) {
	if o == nil || IsNil(o.IMAGE_LINK_LENGTH_TOO_LONG) {
		return nil, false
	}
	return o.IMAGE_LINK_LENGTH_TOO_LONG, true
}

// HasIMAGE_LINK_LENGTH_TOO_LONG returns a boolean if a field has been set.
func (o *CatalogsItemValidationErrors) HasIMAGE_LINK_LENGTH_TOO_LONG() bool {
	if o != nil && !IsNil(o.IMAGE_LINK_LENGTH_TOO_LONG) {
		return true
	}

	return false
}

// SetIMAGE_LINK_LENGTH_TOO_LONG gets a reference to the given CatalogsItemValidationDetails and assigns it to the IMAGE_LINK_LENGTH_TOO_LONG field.
func (o *CatalogsItemValidationErrors) SetIMAGE_LINK_LENGTH_TOO_LONG(v CatalogsItemValidationDetails) {
	o.IMAGE_LINK_LENGTH_TOO_LONG = &v
}

// GetIMAGE_LINK_MISSING returns the IMAGE_LINK_MISSING field value if set, zero value otherwise.
func (o *CatalogsItemValidationErrors) GetIMAGE_LINK_MISSING() CatalogsItemValidationDetails {
	if o == nil || IsNil(o.IMAGE_LINK_MISSING) {
		var ret CatalogsItemValidationDetails
		return ret
	}
	return *o.IMAGE_LINK_MISSING
}

// GetIMAGE_LINK_MISSINGOk returns a tuple with the IMAGE_LINK_MISSING field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsItemValidationErrors) GetIMAGE_LINK_MISSINGOk() (*CatalogsItemValidationDetails, bool) {
	if o == nil || IsNil(o.IMAGE_LINK_MISSING) {
		return nil, false
	}
	return o.IMAGE_LINK_MISSING, true
}

// HasIMAGE_LINK_MISSING returns a boolean if a field has been set.
func (o *CatalogsItemValidationErrors) HasIMAGE_LINK_MISSING() bool {
	if o != nil && !IsNil(o.IMAGE_LINK_MISSING) {
		return true
	}

	return false
}

// SetIMAGE_LINK_MISSING gets a reference to the given CatalogsItemValidationDetails and assigns it to the IMAGE_LINK_MISSING field.
func (o *CatalogsItemValidationErrors) SetIMAGE_LINK_MISSING(v CatalogsItemValidationDetails) {
	o.IMAGE_LINK_MISSING = &v
}

// GetINVALID_DOMAIN returns the INVALID_DOMAIN field value if set, zero value otherwise.
func (o *CatalogsItemValidationErrors) GetINVALID_DOMAIN() CatalogsItemValidationDetails {
	if o == nil || IsNil(o.INVALID_DOMAIN) {
		var ret CatalogsItemValidationDetails
		return ret
	}
	return *o.INVALID_DOMAIN
}

// GetINVALID_DOMAINOk returns a tuple with the INVALID_DOMAIN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsItemValidationErrors) GetINVALID_DOMAINOk() (*CatalogsItemValidationDetails, bool) {
	if o == nil || IsNil(o.INVALID_DOMAIN) {
		return nil, false
	}
	return o.INVALID_DOMAIN, true
}

// HasINVALID_DOMAIN returns a boolean if a field has been set.
func (o *CatalogsItemValidationErrors) HasINVALID_DOMAIN() bool {
	if o != nil && !IsNil(o.INVALID_DOMAIN) {
		return true
	}

	return false
}

// SetINVALID_DOMAIN gets a reference to the given CatalogsItemValidationDetails and assigns it to the INVALID_DOMAIN field.
func (o *CatalogsItemValidationErrors) SetINVALID_DOMAIN(v CatalogsItemValidationDetails) {
	o.INVALID_DOMAIN = &v
}

// GetITEMID_MISSING returns the ITEMID_MISSING field value if set, zero value otherwise.
func (o *CatalogsItemValidationErrors) GetITEMID_MISSING() CatalogsItemValidationDetails {
	if o == nil || IsNil(o.ITEMID_MISSING) {
		var ret CatalogsItemValidationDetails
		return ret
	}
	return *o.ITEMID_MISSING
}

// GetITEMID_MISSINGOk returns a tuple with the ITEMID_MISSING field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsItemValidationErrors) GetITEMID_MISSINGOk() (*CatalogsItemValidationDetails, bool) {
	if o == nil || IsNil(o.ITEMID_MISSING) {
		return nil, false
	}
	return o.ITEMID_MISSING, true
}

// HasITEMID_MISSING returns a boolean if a field has been set.
func (o *CatalogsItemValidationErrors) HasITEMID_MISSING() bool {
	if o != nil && !IsNil(o.ITEMID_MISSING) {
		return true
	}

	return false
}

// SetITEMID_MISSING gets a reference to the given CatalogsItemValidationDetails and assigns it to the ITEMID_MISSING field.
func (o *CatalogsItemValidationErrors) SetITEMID_MISSING(v CatalogsItemValidationDetails) {
	o.ITEMID_MISSING = &v
}

// GetITEM_MAIN_IMAGE_DOWNLOAD_FAILURE returns the ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE field value if set, zero value otherwise.
func (o *CatalogsItemValidationErrors) GetITEM_MAIN_IMAGE_DOWNLOAD_FAILURE() CatalogsItemValidationDetails {
	if o == nil || IsNil(o.ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE) {
		var ret CatalogsItemValidationDetails
		return ret
	}
	return *o.ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE
}

// GetITEM_MAIN_IMAGE_DOWNLOAD_FAILUREOk returns a tuple with the ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsItemValidationErrors) GetITEM_MAIN_IMAGE_DOWNLOAD_FAILUREOk() (*CatalogsItemValidationDetails, bool) {
	if o == nil || IsNil(o.ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE) {
		return nil, false
	}
	return o.ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE, true
}

// HasITEM_MAIN_IMAGE_DOWNLOAD_FAILURE returns a boolean if a field has been set.
func (o *CatalogsItemValidationErrors) HasITEM_MAIN_IMAGE_DOWNLOAD_FAILURE() bool {
	if o != nil && !IsNil(o.ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE) {
		return true
	}

	return false
}

// SetITEM_MAIN_IMAGE_DOWNLOAD_FAILURE gets a reference to the given CatalogsItemValidationDetails and assigns it to the ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE field.
func (o *CatalogsItemValidationErrors) SetITEM_MAIN_IMAGE_DOWNLOAD_FAILURE(v CatalogsItemValidationDetails) {
	o.ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE = &v
}

// GetLINK_FORMAT_INVALID returns the LINK_FORMAT_INVALID field value if set, zero value otherwise.
func (o *CatalogsItemValidationErrors) GetLINK_FORMAT_INVALID() CatalogsItemValidationDetails {
	if o == nil || IsNil(o.LINK_FORMAT_INVALID) {
		var ret CatalogsItemValidationDetails
		return ret
	}
	return *o.LINK_FORMAT_INVALID
}

// GetLINK_FORMAT_INVALIDOk returns a tuple with the LINK_FORMAT_INVALID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsItemValidationErrors) GetLINK_FORMAT_INVALIDOk() (*CatalogsItemValidationDetails, bool) {
	if o == nil || IsNil(o.LINK_FORMAT_INVALID) {
		return nil, false
	}
	return o.LINK_FORMAT_INVALID, true
}

// HasLINK_FORMAT_INVALID returns a boolean if a field has been set.
func (o *CatalogsItemValidationErrors) HasLINK_FORMAT_INVALID() bool {
	if o != nil && !IsNil(o.LINK_FORMAT_INVALID) {
		return true
	}

	return false
}

// SetLINK_FORMAT_INVALID gets a reference to the given CatalogsItemValidationDetails and assigns it to the LINK_FORMAT_INVALID field.
func (o *CatalogsItemValidationErrors) SetLINK_FORMAT_INVALID(v CatalogsItemValidationDetails) {
	o.LINK_FORMAT_INVALID = &v
}

// GetLINK_LENGTH_TOO_LONG returns the LINK_LENGTH_TOO_LONG field value if set, zero value otherwise.
func (o *CatalogsItemValidationErrors) GetLINK_LENGTH_TOO_LONG() CatalogsItemValidationDetails {
	if o == nil || IsNil(o.LINK_LENGTH_TOO_LONG) {
		var ret CatalogsItemValidationDetails
		return ret
	}
	return *o.LINK_LENGTH_TOO_LONG
}

// GetLINK_LENGTH_TOO_LONGOk returns a tuple with the LINK_LENGTH_TOO_LONG field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsItemValidationErrors) GetLINK_LENGTH_TOO_LONGOk() (*CatalogsItemValidationDetails, bool) {
	if o == nil || IsNil(o.LINK_LENGTH_TOO_LONG) {
		return nil, false
	}
	return o.LINK_LENGTH_TOO_LONG, true
}

// HasLINK_LENGTH_TOO_LONG returns a boolean if a field has been set.
func (o *CatalogsItemValidationErrors) HasLINK_LENGTH_TOO_LONG() bool {
	if o != nil && !IsNil(o.LINK_LENGTH_TOO_LONG) {
		return true
	}

	return false
}

// SetLINK_LENGTH_TOO_LONG gets a reference to the given CatalogsItemValidationDetails and assigns it to the LINK_LENGTH_TOO_LONG field.
func (o *CatalogsItemValidationErrors) SetLINK_LENGTH_TOO_LONG(v CatalogsItemValidationDetails) {
	o.LINK_LENGTH_TOO_LONG = &v
}

// GetLIST_PRICE_INVALID returns the LIST_PRICE_INVALID field value if set, zero value otherwise.
func (o *CatalogsItemValidationErrors) GetLIST_PRICE_INVALID() CatalogsItemValidationDetails {
	if o == nil || IsNil(o.LIST_PRICE_INVALID) {
		var ret CatalogsItemValidationDetails
		return ret
	}
	return *o.LIST_PRICE_INVALID
}

// GetLIST_PRICE_INVALIDOk returns a tuple with the LIST_PRICE_INVALID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsItemValidationErrors) GetLIST_PRICE_INVALIDOk() (*CatalogsItemValidationDetails, bool) {
	if o == nil || IsNil(o.LIST_PRICE_INVALID) {
		return nil, false
	}
	return o.LIST_PRICE_INVALID, true
}

// HasLIST_PRICE_INVALID returns a boolean if a field has been set.
func (o *CatalogsItemValidationErrors) HasLIST_PRICE_INVALID() bool {
	if o != nil && !IsNil(o.LIST_PRICE_INVALID) {
		return true
	}

	return false
}

// SetLIST_PRICE_INVALID gets a reference to the given CatalogsItemValidationDetails and assigns it to the LIST_PRICE_INVALID field.
func (o *CatalogsItemValidationErrors) SetLIST_PRICE_INVALID(v CatalogsItemValidationDetails) {
	o.LIST_PRICE_INVALID = &v
}

// GetMAX_ITEMS_PER_ITEM_GROUP_EXCEEDED returns the MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED field value if set, zero value otherwise.
func (o *CatalogsItemValidationErrors) GetMAX_ITEMS_PER_ITEM_GROUP_EXCEEDED() CatalogsItemValidationDetails {
	if o == nil || IsNil(o.MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED) {
		var ret CatalogsItemValidationDetails
		return ret
	}
	return *o.MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED
}

// GetMAX_ITEMS_PER_ITEM_GROUP_EXCEEDEDOk returns a tuple with the MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsItemValidationErrors) GetMAX_ITEMS_PER_ITEM_GROUP_EXCEEDEDOk() (*CatalogsItemValidationDetails, bool) {
	if o == nil || IsNil(o.MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED) {
		return nil, false
	}
	return o.MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED, true
}

// HasMAX_ITEMS_PER_ITEM_GROUP_EXCEEDED returns a boolean if a field has been set.
func (o *CatalogsItemValidationErrors) HasMAX_ITEMS_PER_ITEM_GROUP_EXCEEDED() bool {
	if o != nil && !IsNil(o.MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED) {
		return true
	}

	return false
}

// SetMAX_ITEMS_PER_ITEM_GROUP_EXCEEDED gets a reference to the given CatalogsItemValidationDetails and assigns it to the MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED field.
func (o *CatalogsItemValidationErrors) SetMAX_ITEMS_PER_ITEM_GROUP_EXCEEDED(v CatalogsItemValidationDetails) {
	o.MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED = &v
}

// GetPARSE_LINE_ERROR returns the PARSE_LINE_ERROR field value if set, zero value otherwise.
func (o *CatalogsItemValidationErrors) GetPARSE_LINE_ERROR() CatalogsItemValidationDetails {
	if o == nil || IsNil(o.PARSE_LINE_ERROR) {
		var ret CatalogsItemValidationDetails
		return ret
	}
	return *o.PARSE_LINE_ERROR
}

// GetPARSE_LINE_ERROROk returns a tuple with the PARSE_LINE_ERROR field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsItemValidationErrors) GetPARSE_LINE_ERROROk() (*CatalogsItemValidationDetails, bool) {
	if o == nil || IsNil(o.PARSE_LINE_ERROR) {
		return nil, false
	}
	return o.PARSE_LINE_ERROR, true
}

// HasPARSE_LINE_ERROR returns a boolean if a field has been set.
func (o *CatalogsItemValidationErrors) HasPARSE_LINE_ERROR() bool {
	if o != nil && !IsNil(o.PARSE_LINE_ERROR) {
		return true
	}

	return false
}

// SetPARSE_LINE_ERROR gets a reference to the given CatalogsItemValidationDetails and assigns it to the PARSE_LINE_ERROR field.
func (o *CatalogsItemValidationErrors) SetPARSE_LINE_ERROR(v CatalogsItemValidationDetails) {
	o.PARSE_LINE_ERROR = &v
}

// GetPINJOIN_CONTENT_UNSAFE returns the PINJOIN_CONTENT_UNSAFE field value if set, zero value otherwise.
func (o *CatalogsItemValidationErrors) GetPINJOIN_CONTENT_UNSAFE() CatalogsItemValidationDetails {
	if o == nil || IsNil(o.PINJOIN_CONTENT_UNSAFE) {
		var ret CatalogsItemValidationDetails
		return ret
	}
	return *o.PINJOIN_CONTENT_UNSAFE
}

// GetPINJOIN_CONTENT_UNSAFEOk returns a tuple with the PINJOIN_CONTENT_UNSAFE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsItemValidationErrors) GetPINJOIN_CONTENT_UNSAFEOk() (*CatalogsItemValidationDetails, bool) {
	if o == nil || IsNil(o.PINJOIN_CONTENT_UNSAFE) {
		return nil, false
	}
	return o.PINJOIN_CONTENT_UNSAFE, true
}

// HasPINJOIN_CONTENT_UNSAFE returns a boolean if a field has been set.
func (o *CatalogsItemValidationErrors) HasPINJOIN_CONTENT_UNSAFE() bool {
	if o != nil && !IsNil(o.PINJOIN_CONTENT_UNSAFE) {
		return true
	}

	return false
}

// SetPINJOIN_CONTENT_UNSAFE gets a reference to the given CatalogsItemValidationDetails and assigns it to the PINJOIN_CONTENT_UNSAFE field.
func (o *CatalogsItemValidationErrors) SetPINJOIN_CONTENT_UNSAFE(v CatalogsItemValidationDetails) {
	o.PINJOIN_CONTENT_UNSAFE = &v
}

// GetPRICE_CANNOT_BE_DETERMINED returns the PRICE_CANNOT_BE_DETERMINED field value if set, zero value otherwise.
func (o *CatalogsItemValidationErrors) GetPRICE_CANNOT_BE_DETERMINED() CatalogsItemValidationDetails {
	if o == nil || IsNil(o.PRICE_CANNOT_BE_DETERMINED) {
		var ret CatalogsItemValidationDetails
		return ret
	}
	return *o.PRICE_CANNOT_BE_DETERMINED
}

// GetPRICE_CANNOT_BE_DETERMINEDOk returns a tuple with the PRICE_CANNOT_BE_DETERMINED field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsItemValidationErrors) GetPRICE_CANNOT_BE_DETERMINEDOk() (*CatalogsItemValidationDetails, bool) {
	if o == nil || IsNil(o.PRICE_CANNOT_BE_DETERMINED) {
		return nil, false
	}
	return o.PRICE_CANNOT_BE_DETERMINED, true
}

// HasPRICE_CANNOT_BE_DETERMINED returns a boolean if a field has been set.
func (o *CatalogsItemValidationErrors) HasPRICE_CANNOT_BE_DETERMINED() bool {
	if o != nil && !IsNil(o.PRICE_CANNOT_BE_DETERMINED) {
		return true
	}

	return false
}

// SetPRICE_CANNOT_BE_DETERMINED gets a reference to the given CatalogsItemValidationDetails and assigns it to the PRICE_CANNOT_BE_DETERMINED field.
func (o *CatalogsItemValidationErrors) SetPRICE_CANNOT_BE_DETERMINED(v CatalogsItemValidationDetails) {
	o.PRICE_CANNOT_BE_DETERMINED = &v
}

// GetPRICE_MISSING returns the PRICE_MISSING field value if set, zero value otherwise.
func (o *CatalogsItemValidationErrors) GetPRICE_MISSING() CatalogsItemValidationDetails {
	if o == nil || IsNil(o.PRICE_MISSING) {
		var ret CatalogsItemValidationDetails
		return ret
	}
	return *o.PRICE_MISSING
}

// GetPRICE_MISSINGOk returns a tuple with the PRICE_MISSING field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsItemValidationErrors) GetPRICE_MISSINGOk() (*CatalogsItemValidationDetails, bool) {
	if o == nil || IsNil(o.PRICE_MISSING) {
		return nil, false
	}
	return o.PRICE_MISSING, true
}

// HasPRICE_MISSING returns a boolean if a field has been set.
func (o *CatalogsItemValidationErrors) HasPRICE_MISSING() bool {
	if o != nil && !IsNil(o.PRICE_MISSING) {
		return true
	}

	return false
}

// SetPRICE_MISSING gets a reference to the given CatalogsItemValidationDetails and assigns it to the PRICE_MISSING field.
func (o *CatalogsItemValidationErrors) SetPRICE_MISSING(v CatalogsItemValidationDetails) {
	o.PRICE_MISSING = &v
}

// GetPRODUCT_LINK_MISSING returns the PRODUCT_LINK_MISSING field value if set, zero value otherwise.
func (o *CatalogsItemValidationErrors) GetPRODUCT_LINK_MISSING() CatalogsItemValidationDetails {
	if o == nil || IsNil(o.PRODUCT_LINK_MISSING) {
		var ret CatalogsItemValidationDetails
		return ret
	}
	return *o.PRODUCT_LINK_MISSING
}

// GetPRODUCT_LINK_MISSINGOk returns a tuple with the PRODUCT_LINK_MISSING field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsItemValidationErrors) GetPRODUCT_LINK_MISSINGOk() (*CatalogsItemValidationDetails, bool) {
	if o == nil || IsNil(o.PRODUCT_LINK_MISSING) {
		return nil, false
	}
	return o.PRODUCT_LINK_MISSING, true
}

// HasPRODUCT_LINK_MISSING returns a boolean if a field has been set.
func (o *CatalogsItemValidationErrors) HasPRODUCT_LINK_MISSING() bool {
	if o != nil && !IsNil(o.PRODUCT_LINK_MISSING) {
		return true
	}

	return false
}

// SetPRODUCT_LINK_MISSING gets a reference to the given CatalogsItemValidationDetails and assigns it to the PRODUCT_LINK_MISSING field.
func (o *CatalogsItemValidationErrors) SetPRODUCT_LINK_MISSING(v CatalogsItemValidationDetails) {
	o.PRODUCT_LINK_MISSING = &v
}

// GetPRODUCT_PRICE_INVALID returns the PRODUCT_PRICE_INVALID field value if set, zero value otherwise.
func (o *CatalogsItemValidationErrors) GetPRODUCT_PRICE_INVALID() CatalogsItemValidationDetails {
	if o == nil || IsNil(o.PRODUCT_PRICE_INVALID) {
		var ret CatalogsItemValidationDetails
		return ret
	}
	return *o.PRODUCT_PRICE_INVALID
}

// GetPRODUCT_PRICE_INVALIDOk returns a tuple with the PRODUCT_PRICE_INVALID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsItemValidationErrors) GetPRODUCT_PRICE_INVALIDOk() (*CatalogsItemValidationDetails, bool) {
	if o == nil || IsNil(o.PRODUCT_PRICE_INVALID) {
		return nil, false
	}
	return o.PRODUCT_PRICE_INVALID, true
}

// HasPRODUCT_PRICE_INVALID returns a boolean if a field has been set.
func (o *CatalogsItemValidationErrors) HasPRODUCT_PRICE_INVALID() bool {
	if o != nil && !IsNil(o.PRODUCT_PRICE_INVALID) {
		return true
	}

	return false
}

// SetPRODUCT_PRICE_INVALID gets a reference to the given CatalogsItemValidationDetails and assigns it to the PRODUCT_PRICE_INVALID field.
func (o *CatalogsItemValidationErrors) SetPRODUCT_PRICE_INVALID(v CatalogsItemValidationDetails) {
	o.PRODUCT_PRICE_INVALID = &v
}

// GetTITLE_MISSING returns the TITLE_MISSING field value if set, zero value otherwise.
func (o *CatalogsItemValidationErrors) GetTITLE_MISSING() CatalogsItemValidationDetails {
	if o == nil || IsNil(o.TITLE_MISSING) {
		var ret CatalogsItemValidationDetails
		return ret
	}
	return *o.TITLE_MISSING
}

// GetTITLE_MISSINGOk returns a tuple with the TITLE_MISSING field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsItemValidationErrors) GetTITLE_MISSINGOk() (*CatalogsItemValidationDetails, bool) {
	if o == nil || IsNil(o.TITLE_MISSING) {
		return nil, false
	}
	return o.TITLE_MISSING, true
}

// HasTITLE_MISSING returns a boolean if a field has been set.
func (o *CatalogsItemValidationErrors) HasTITLE_MISSING() bool {
	if o != nil && !IsNil(o.TITLE_MISSING) {
		return true
	}

	return false
}

// SetTITLE_MISSING gets a reference to the given CatalogsItemValidationDetails and assigns it to the TITLE_MISSING field.
func (o *CatalogsItemValidationErrors) SetTITLE_MISSING(v CatalogsItemValidationDetails) {
	o.TITLE_MISSING = &v
}

func (o CatalogsItemValidationErrors) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogsItemValidationErrors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ADULT_INVALID) {
		toSerialize["ADULT_INVALID"] = o.ADULT_INVALID
	}
	if !IsNil(o.ADWORDS_FORMAT_INVALID) {
		toSerialize["ADWORDS_FORMAT_INVALID"] = o.ADWORDS_FORMAT_INVALID
	}
	if !IsNil(o.AVAILABILITY_INVALID) {
		toSerialize["AVAILABILITY_INVALID"] = o.AVAILABILITY_INVALID
	}
	if !IsNil(o.BLOCKLISTED_IMAGE_SIGNATURE) {
		toSerialize["BLOCKLISTED_IMAGE_SIGNATURE"] = o.BLOCKLISTED_IMAGE_SIGNATURE
	}
	if !IsNil(o.DESCRIPTION_MISSING) {
		toSerialize["DESCRIPTION_MISSING"] = o.DESCRIPTION_MISSING
	}
	if !IsNil(o.DUPLICATE_PRODUCTS) {
		toSerialize["DUPLICATE_PRODUCTS"] = o.DUPLICATE_PRODUCTS
	}
	if !IsNil(o.IMAGE_LINK_INVALID) {
		toSerialize["IMAGE_LINK_INVALID"] = o.IMAGE_LINK_INVALID
	}
	if !IsNil(o.IMAGE_LINK_LENGTH_TOO_LONG) {
		toSerialize["IMAGE_LINK_LENGTH_TOO_LONG"] = o.IMAGE_LINK_LENGTH_TOO_LONG
	}
	if !IsNil(o.IMAGE_LINK_MISSING) {
		toSerialize["IMAGE_LINK_MISSING"] = o.IMAGE_LINK_MISSING
	}
	if !IsNil(o.INVALID_DOMAIN) {
		toSerialize["INVALID_DOMAIN"] = o.INVALID_DOMAIN
	}
	if !IsNil(o.ITEMID_MISSING) {
		toSerialize["ITEMID_MISSING"] = o.ITEMID_MISSING
	}
	if !IsNil(o.ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE) {
		toSerialize["ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE"] = o.ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE
	}
	if !IsNil(o.LINK_FORMAT_INVALID) {
		toSerialize["LINK_FORMAT_INVALID"] = o.LINK_FORMAT_INVALID
	}
	if !IsNil(o.LINK_LENGTH_TOO_LONG) {
		toSerialize["LINK_LENGTH_TOO_LONG"] = o.LINK_LENGTH_TOO_LONG
	}
	if !IsNil(o.LIST_PRICE_INVALID) {
		toSerialize["LIST_PRICE_INVALID"] = o.LIST_PRICE_INVALID
	}
	if !IsNil(o.MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED) {
		toSerialize["MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED"] = o.MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED
	}
	if !IsNil(o.PARSE_LINE_ERROR) {
		toSerialize["PARSE_LINE_ERROR"] = o.PARSE_LINE_ERROR
	}
	if !IsNil(o.PINJOIN_CONTENT_UNSAFE) {
		toSerialize["PINJOIN_CONTENT_UNSAFE"] = o.PINJOIN_CONTENT_UNSAFE
	}
	if !IsNil(o.PRICE_CANNOT_BE_DETERMINED) {
		toSerialize["PRICE_CANNOT_BE_DETERMINED"] = o.PRICE_CANNOT_BE_DETERMINED
	}
	if !IsNil(o.PRICE_MISSING) {
		toSerialize["PRICE_MISSING"] = o.PRICE_MISSING
	}
	if !IsNil(o.PRODUCT_LINK_MISSING) {
		toSerialize["PRODUCT_LINK_MISSING"] = o.PRODUCT_LINK_MISSING
	}
	if !IsNil(o.PRODUCT_PRICE_INVALID) {
		toSerialize["PRODUCT_PRICE_INVALID"] = o.PRODUCT_PRICE_INVALID
	}
	if !IsNil(o.TITLE_MISSING) {
		toSerialize["TITLE_MISSING"] = o.TITLE_MISSING
	}
	return toSerialize, nil
}

type NullableCatalogsItemValidationErrors struct {
	value *CatalogsItemValidationErrors
	isSet bool
}

func (v NullableCatalogsItemValidationErrors) Get() *CatalogsItemValidationErrors {
	return v.value
}

func (v *NullableCatalogsItemValidationErrors) Set(val *CatalogsItemValidationErrors) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogsItemValidationErrors) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogsItemValidationErrors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogsItemValidationErrors(val *CatalogsItemValidationErrors) *NullableCatalogsItemValidationErrors {
	return &NullableCatalogsItemValidationErrors{value: val, isSet: true}
}

func (v NullableCatalogsItemValidationErrors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogsItemValidationErrors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


