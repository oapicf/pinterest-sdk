/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeletePartnersRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeletePartnersRequest{}

// DeletePartnersRequest struct for DeletePartnersRequest
type DeletePartnersRequest struct {
	PartnerIds []string `json:"partner_ids"`
	PartnerType NullableString `json:"partner_type,omitempty"`
}

type _DeletePartnersRequest DeletePartnersRequest

// NewDeletePartnersRequest instantiates a new DeletePartnersRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeletePartnersRequest(partnerIds []string) *DeletePartnersRequest {
	this := DeletePartnersRequest{}
	this.PartnerIds = partnerIds
	return &this
}

// NewDeletePartnersRequestWithDefaults instantiates a new DeletePartnersRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeletePartnersRequestWithDefaults() *DeletePartnersRequest {
	this := DeletePartnersRequest{}
	return &this
}

// GetPartnerIds returns the PartnerIds field value
func (o *DeletePartnersRequest) GetPartnerIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.PartnerIds
}

// GetPartnerIdsOk returns a tuple with the PartnerIds field value
// and a boolean to check if the value has been set.
func (o *DeletePartnersRequest) GetPartnerIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PartnerIds, true
}

// SetPartnerIds sets field value
func (o *DeletePartnersRequest) SetPartnerIds(v []string) {
	o.PartnerIds = v
}

// GetPartnerType returns the PartnerType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeletePartnersRequest) GetPartnerType() string {
	if o == nil || IsNil(o.PartnerType.Get()) {
		var ret string
		return ret
	}
	return *o.PartnerType.Get()
}

// GetPartnerTypeOk returns a tuple with the PartnerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeletePartnersRequest) GetPartnerTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PartnerType.Get(), o.PartnerType.IsSet()
}

// HasPartnerType returns a boolean if a field has been set.
func (o *DeletePartnersRequest) HasPartnerType() bool {
	if o != nil && o.PartnerType.IsSet() {
		return true
	}

	return false
}

// SetPartnerType gets a reference to the given NullableString and assigns it to the PartnerType field.
func (o *DeletePartnersRequest) SetPartnerType(v string) {
	o.PartnerType.Set(&v)
}
// SetPartnerTypeNil sets the value for PartnerType to be an explicit nil
func (o *DeletePartnersRequest) SetPartnerTypeNil() {
	o.PartnerType.Set(nil)
}

// UnsetPartnerType ensures that no value is present for PartnerType, not even an explicit nil
func (o *DeletePartnersRequest) UnsetPartnerType() {
	o.PartnerType.Unset()
}

func (o DeletePartnersRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeletePartnersRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["partner_ids"] = o.PartnerIds
	if o.PartnerType.IsSet() {
		toSerialize["partner_type"] = o.PartnerType.Get()
	}
	return toSerialize, nil
}

func (o *DeletePartnersRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"partner_ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeletePartnersRequest := _DeletePartnersRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeletePartnersRequest)

	if err != nil {
		return err
	}

	*o = DeletePartnersRequest(varDeletePartnersRequest)

	return err
}

type NullableDeletePartnersRequest struct {
	value *DeletePartnersRequest
	isSet bool
}

func (v NullableDeletePartnersRequest) Get() *DeletePartnersRequest {
	return v.value
}

func (v *NullableDeletePartnersRequest) Set(val *DeletePartnersRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeletePartnersRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeletePartnersRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeletePartnersRequest(val *DeletePartnersRequest) *NullableDeletePartnersRequest {
	return &NullableDeletePartnersRequest{value: val, isSet: true}
}

func (v NullableDeletePartnersRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeletePartnersRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


