/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// BusinessRole The access level a member/partner has to the business. Values are case-sensitive. <br> - EMPLOYEE: Can only view and access assets you assign to them. They cannot see details about other employees, partners, or other assets. <br> - BIZ_ADMIN: Have full control of roles and can add employees and partners as well as grant asset access. <br> - PARTNER: Can only view and access assets you assign them to/or they assign to you.
type BusinessRole string

// List of BusinessRole
const (
	EMPLOYEE BusinessRole = "EMPLOYEE"
	BIZ_ADMIN BusinessRole = "BIZ_ADMIN"
	PARTNER BusinessRole = "PARTNER"
)

// All allowed values of BusinessRole enum
var AllowedBusinessRoleEnumValues = []BusinessRole{
	"EMPLOYEE",
	"BIZ_ADMIN",
	"PARTNER",
}

func (v *BusinessRole) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BusinessRole(value)
	for _, existing := range AllowedBusinessRoleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BusinessRole", value)
}

// NewBusinessRoleFromValue returns a pointer to a valid BusinessRole
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBusinessRoleFromValue(v string) (*BusinessRole, error) {
	ev := BusinessRole(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BusinessRole: valid values are %v", v, AllowedBusinessRoleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BusinessRole) IsValid() bool {
	for _, existing := range AllowedBusinessRoleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BusinessRole value
func (v BusinessRole) Ptr() *BusinessRole {
	return &v
}

type NullableBusinessRole struct {
	value *BusinessRole
	isSet bool
}

func (v NullableBusinessRole) Get() *BusinessRole {
	return v.value
}

func (v *NullableBusinessRole) Set(val *BusinessRole) {
	v.value = val
	v.isSet = true
}

func (v NullableBusinessRole) IsSet() bool {
	return v.isSet
}

func (v *NullableBusinessRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBusinessRole(val *BusinessRole) *NullableBusinessRole {
	return &NullableBusinessRole{value: val, isSet: true}
}

func (v NullableBusinessRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBusinessRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

