/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// AdGroupsAPIService AdGroupsAPI service
type AdGroupsAPIService service

type ApiAdGroupsAnalyticsRequest struct {
	ctx context.Context
	ApiService *AdGroupsAPIService
	adAccountId string
	startDate *string
	endDate *string
	adGroupIds *[]string
	columns *[]string
	granularity *Granularity
	clickWindowDays *int32
	engagementWindowDays *int32
	viewWindowDays *int32
	conversionReportTime *string
}

// Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
func (r ApiAdGroupsAnalyticsRequest) StartDate(startDate string) ApiAdGroupsAnalyticsRequest {
	r.startDate = &startDate
	return r
}

// Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
func (r ApiAdGroupsAnalyticsRequest) EndDate(endDate string) ApiAdGroupsAnalyticsRequest {
	r.endDate = &endDate
	return r
}

// List of Ad group Ids to use to filter the results.
func (r ApiAdGroupsAnalyticsRequest) AdGroupIds(adGroupIds []string) ApiAdGroupsAnalyticsRequest {
	r.adGroupIds = &adGroupIds
	return r
}

// Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
func (r ApiAdGroupsAnalyticsRequest) Columns(columns []string) ApiAdGroupsAnalyticsRequest {
	r.columns = &columns
	return r
}

// TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
func (r ApiAdGroupsAnalyticsRequest) Granularity(granularity Granularity) ApiAdGroupsAnalyticsRequest {
	r.granularity = &granularity
	return r
}

// Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
func (r ApiAdGroupsAnalyticsRequest) ClickWindowDays(clickWindowDays int32) ApiAdGroupsAnalyticsRequest {
	r.clickWindowDays = &clickWindowDays
	return r
}

// Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
func (r ApiAdGroupsAnalyticsRequest) EngagementWindowDays(engagementWindowDays int32) ApiAdGroupsAnalyticsRequest {
	r.engagementWindowDays = &engagementWindowDays
	return r
}

// Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
func (r ApiAdGroupsAnalyticsRequest) ViewWindowDays(viewWindowDays int32) ApiAdGroupsAnalyticsRequest {
	r.viewWindowDays = &viewWindowDays
	return r
}

// The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
func (r ApiAdGroupsAnalyticsRequest) ConversionReportTime(conversionReportTime string) ApiAdGroupsAnalyticsRequest {
	r.conversionReportTime = &conversionReportTime
	return r
}

func (r ApiAdGroupsAnalyticsRequest) Execute() ([]AdGroupsAnalyticsResponseInner, *http.Response, error) {
	return r.ApiService.AdGroupsAnalyticsExecute(r)
}

/*
AdGroupsAnalytics Get ad group analytics

Get analytics for the specified ad groups in the specified <code>ad_account_id</code>, filtered by the specified options.
- The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href="https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts">Business Access</a>: Admin, Analyst, Campaign Manager.
- If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days.
- If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param adAccountId Unique identifier of an ad account.
 @return ApiAdGroupsAnalyticsRequest
*/
func (a *AdGroupsAPIService) AdGroupsAnalytics(ctx context.Context, adAccountId string) ApiAdGroupsAnalyticsRequest {
	return ApiAdGroupsAnalyticsRequest{
		ApiService: a,
		ctx: ctx,
		adAccountId: adAccountId,
	}
}

// Execute executes the request
//  @return []AdGroupsAnalyticsResponseInner
func (a *AdGroupsAPIService) AdGroupsAnalyticsExecute(r ApiAdGroupsAnalyticsRequest) ([]AdGroupsAnalyticsResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AdGroupsAnalyticsResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdGroupsAPIService.AdGroupsAnalytics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ad_accounts/{ad_account_id}/ad_groups/analytics"
	localVarPath = strings.Replace(localVarPath, "{"+"ad_account_id"+"}", url.PathEscape(parameterValueToString(r.adAccountId, "adAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.adAccountId) > 18 {
		return localVarReturnValue, nil, reportError("adAccountId must have less than 18 elements")
	}
	if r.startDate == nil {
		return localVarReturnValue, nil, reportError("startDate is required and must be specified")
	}
	if r.endDate == nil {
		return localVarReturnValue, nil, reportError("endDate is required and must be specified")
	}
	if r.adGroupIds == nil {
		return localVarReturnValue, nil, reportError("adGroupIds is required and must be specified")
	}
	if len(*r.adGroupIds) < 1 {
		return localVarReturnValue, nil, reportError("adGroupIds must have at least 1 elements")
	}
	if len(*r.adGroupIds) > 100 {
		return localVarReturnValue, nil, reportError("adGroupIds must have less than 100 elements")
	}
	if r.columns == nil {
		return localVarReturnValue, nil, reportError("columns is required and must be specified")
	}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "start_date", r.startDate, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "end_date", r.endDate, "form", "")
	{
		t := *r.adGroupIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ad_group_ids", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ad_group_ids", t, "form", "multi")
		}
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "form", "csv")
	parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "form", "")
	if r.clickWindowDays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "click_window_days", r.clickWindowDays, "form", "")
	} else {
		var defaultValue int32 = 30
		r.clickWindowDays = &defaultValue
	}
	if r.engagementWindowDays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "engagement_window_days", r.engagementWindowDays, "form", "")
	} else {
		var defaultValue int32 = 30
		r.engagementWindowDays = &defaultValue
	}
	if r.viewWindowDays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "view_window_days", r.viewWindowDays, "form", "")
	} else {
		var defaultValue int32 = 1
		r.viewWindowDays = &defaultValue
	}
	if r.conversionReportTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conversion_report_time", r.conversionReportTime, "form", "")
	} else {
		var defaultValue string = "TIME_OF_AD_ACTION"
		r.conversionReportTime = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdGroupsAudienceSizingRequest struct {
	ctx context.Context
	ApiService *AdGroupsAPIService
	adAccountId string
	adGroupAudienceSizingRequest *AdGroupAudienceSizingRequest
}

func (r ApiAdGroupsAudienceSizingRequest) AdGroupAudienceSizingRequest(adGroupAudienceSizingRequest AdGroupAudienceSizingRequest) ApiAdGroupsAudienceSizingRequest {
	r.adGroupAudienceSizingRequest = &adGroupAudienceSizingRequest
	return r
}

func (r ApiAdGroupsAudienceSizingRequest) Execute() (*AdGroupAudienceSizingResponse, *http.Response, error) {
	return r.ApiService.AdGroupsAudienceSizingExecute(r)
}

/*
AdGroupsAudienceSizing Get audience sizing

Get potential audience size for an ad group with given targeting criteria. 
Potential audience size estimates the number of people you may be able to reach per month with your campaign. 
It is based on historical advertising data and the targeting criteria you select.
It does not guarantee results or take into account factors such as bid, budget, schedule, seasonality or product experiments.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param adAccountId Unique identifier of an ad account.
 @return ApiAdGroupsAudienceSizingRequest
*/
func (a *AdGroupsAPIService) AdGroupsAudienceSizing(ctx context.Context, adAccountId string) ApiAdGroupsAudienceSizingRequest {
	return ApiAdGroupsAudienceSizingRequest{
		ApiService: a,
		ctx: ctx,
		adAccountId: adAccountId,
	}
}

// Execute executes the request
//  @return AdGroupAudienceSizingResponse
func (a *AdGroupsAPIService) AdGroupsAudienceSizingExecute(r ApiAdGroupsAudienceSizingRequest) (*AdGroupAudienceSizingResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AdGroupAudienceSizingResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdGroupsAPIService.AdGroupsAudienceSizing")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ad_accounts/{ad_account_id}/ad_groups/audience_sizing"
	localVarPath = strings.Replace(localVarPath, "{"+"ad_account_id"+"}", url.PathEscape(parameterValueToString(r.adAccountId, "adAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.adAccountId) > 18 {
		return localVarReturnValue, nil, reportError("adAccountId must have less than 18 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.adGroupAudienceSizingRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdGroupsBidFloorGetRequest struct {
	ctx context.Context
	ApiService *AdGroupsAPIService
	adAccountId string
	bidFloorRequest *BidFloorRequest
}

// Parameters to get bid_floor info
func (r ApiAdGroupsBidFloorGetRequest) BidFloorRequest(bidFloorRequest BidFloorRequest) ApiAdGroupsBidFloorGetRequest {
	r.bidFloorRequest = &bidFloorRequest
	return r
}

func (r ApiAdGroupsBidFloorGetRequest) Execute() (*BidFloor, *http.Response, error) {
	return r.ApiService.AdGroupsBidFloorGetExecute(r)
}

/*
AdGroupsBidFloorGet Get bid floors

List bid floors for your campaign configuration. Bid floors are given in microcurrency values based on the currency in the bid floor specification. <p/>
<p>Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.</p>
<p>A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’ s profile.</p>
<p><strong>Equivalency equations</strong>, using dollars as an example currency:</p>
<ul>
  <li>$1 = 1,000,000 microdollars</li>
  <li>1 microdollar = $0.000001 </li>
</ul>
<p><strong>To convert between currency and microcurrency</strong>, using dollars as an example currency:</p>
<ul>
  <li>To convert dollars to microdollars, mutiply dollars by 1,000,000</li>
  <li>To convert microdollars to dollars, divide microdollars by 1,000,000</li>
 </ul>
For more on bid floors see <a class="reference external" href="https://help.pinterest.com/en/business/article/set-your-bid"> Set your bid</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param adAccountId Unique identifier of an ad account.
 @return ApiAdGroupsBidFloorGetRequest
*/
func (a *AdGroupsAPIService) AdGroupsBidFloorGet(ctx context.Context, adAccountId string) ApiAdGroupsBidFloorGetRequest {
	return ApiAdGroupsBidFloorGetRequest{
		ApiService: a,
		ctx: ctx,
		adAccountId: adAccountId,
	}
}

// Execute executes the request
//  @return BidFloor
func (a *AdGroupsAPIService) AdGroupsBidFloorGetExecute(r ApiAdGroupsBidFloorGetRequest) (*BidFloor, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BidFloor
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdGroupsAPIService.AdGroupsBidFloorGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ad_accounts/{ad_account_id}/bid_floor"
	localVarPath = strings.Replace(localVarPath, "{"+"ad_account_id"+"}", url.PathEscape(parameterValueToString(r.adAccountId, "adAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.adAccountId) > 18 {
		return localVarReturnValue, nil, reportError("adAccountId must have less than 18 elements")
	}
	if r.bidFloorRequest == nil {
		return localVarReturnValue, nil, reportError("bidFloorRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bidFloorRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdGroupsCreateRequest struct {
	ctx context.Context
	ApiService *AdGroupsAPIService
	adAccountId string
	adGroupCreateRequest *[]AdGroupCreateRequest
}

// List of ad groups to create, size limit [1, 30].
func (r ApiAdGroupsCreateRequest) AdGroupCreateRequest(adGroupCreateRequest []AdGroupCreateRequest) ApiAdGroupsCreateRequest {
	r.adGroupCreateRequest = &adGroupCreateRequest
	return r
}

func (r ApiAdGroupsCreateRequest) Execute() (*AdGroupArrayResponse, *http.Response, error) {
	return r.ApiService.AdGroupsCreateExecute(r)
}

/*
AdGroupsCreate Create ad groups

Create multiple new ad groups. All ads in a given ad group will have the same budget, bid, run dates, targeting, and placement (search, browse, other). For more information, <a href="https://help.pinterest.com/en/business/article/campaign-structure" target="_blank"> click here</a>.</p>
<strong>Note:</strong>
- 'bid_in_micro_currency' and 'budget_in_micro_currency' should be expressed in microcurrency amounts based on the currency field set in the advertiser's profile.<p/>
<p>Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.</p>
<p>A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’s profile.</p>
 <p><strong>Equivalency equations</strong>, using dollars as an example currency:</p>
<ul>
  <li>$1 = 1,000,000 microdollars</li>
  <li>1 microdollar = $0.000001 </li>
</ul>
<p><strong>To convert between currency and microcurrency</strong>, using dollars as an example currency:</p>
<ul>
  <li>To convert dollars to microdollars, mutiply dollars by 1,000,000</li>
  <li>To convert microdollars to dollars, divide microdollars by 1,000,000</li>
</ul>
- Ad groups belong to ad campaigns. Some types of campaigns (e.g. budget optimization) have limits on the number of ad groups they can hold. If you exceed those limits, you will get an error message.
- Start and end time cannot be set for ad groups that belong to CBO campaigns. Currently, campaigns with the following objective types: TRAFFIC, AWARENESS, WEB_CONVERSIONS, and CATALOG_SALES will default to CBO.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param adAccountId Unique identifier of an ad account.
 @return ApiAdGroupsCreateRequest
*/
func (a *AdGroupsAPIService) AdGroupsCreate(ctx context.Context, adAccountId string) ApiAdGroupsCreateRequest {
	return ApiAdGroupsCreateRequest{
		ApiService: a,
		ctx: ctx,
		adAccountId: adAccountId,
	}
}

// Execute executes the request
//  @return AdGroupArrayResponse
func (a *AdGroupsAPIService) AdGroupsCreateExecute(r ApiAdGroupsCreateRequest) (*AdGroupArrayResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AdGroupArrayResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdGroupsAPIService.AdGroupsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ad_accounts/{ad_account_id}/ad_groups"
	localVarPath = strings.Replace(localVarPath, "{"+"ad_account_id"+"}", url.PathEscape(parameterValueToString(r.adAccountId, "adAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.adAccountId) > 18 {
		return localVarReturnValue, nil, reportError("adAccountId must have less than 18 elements")
	}
	if r.adGroupCreateRequest == nil {
		return localVarReturnValue, nil, reportError("adGroupCreateRequest is required and must be specified")
	}
	if len(*r.adGroupCreateRequest) < 1 {
		return localVarReturnValue, nil, reportError("adGroupCreateRequest must have at least 1 elements")
	}
	if len(*r.adGroupCreateRequest) > 30 {
		return localVarReturnValue, nil, reportError("adGroupCreateRequest must have less than 30 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.adGroupCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdGroupsGetRequest struct {
	ctx context.Context
	ApiService *AdGroupsAPIService
	adAccountId string
	adGroupId string
}

func (r ApiAdGroupsGetRequest) Execute() (*AdGroupResponse, *http.Response, error) {
	return r.ApiService.AdGroupsGetExecute(r)
}

/*
AdGroupsGet Get ad group

Get a specific ad given the ad ID. If your pin is rejected, rejected_reasons will
contain additional information from the Ad Review process.
For more information about our policies and rejection reasons see the <a href="https://www.pinterest.com/_/_/policy/advertising-guidelines/" target="_blank">Pinterest advertising standards</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param adAccountId Unique identifier of an ad account.
 @param adGroupId Unique identifier of an ad group.
 @return ApiAdGroupsGetRequest
*/
func (a *AdGroupsAPIService) AdGroupsGet(ctx context.Context, adAccountId string, adGroupId string) ApiAdGroupsGetRequest {
	return ApiAdGroupsGetRequest{
		ApiService: a,
		ctx: ctx,
		adAccountId: adAccountId,
		adGroupId: adGroupId,
	}
}

// Execute executes the request
//  @return AdGroupResponse
func (a *AdGroupsAPIService) AdGroupsGetExecute(r ApiAdGroupsGetRequest) (*AdGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AdGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdGroupsAPIService.AdGroupsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ad_accounts/{ad_account_id}/ad_groups/{ad_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"ad_account_id"+"}", url.PathEscape(parameterValueToString(r.adAccountId, "adAccountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ad_group_id"+"}", url.PathEscape(parameterValueToString(r.adGroupId, "adGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.adAccountId) > 18 {
		return localVarReturnValue, nil, reportError("adAccountId must have less than 18 elements")
	}
	if strlen(r.adGroupId) > 18 {
		return localVarReturnValue, nil, reportError("adGroupId must have less than 18 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdGroupsListRequest struct {
	ctx context.Context
	ApiService *AdGroupsAPIService
	adAccountId string
	campaignIds *[]string
	adGroupIds *[]string
	entityStatuses *[]string
	pageSize *int32
	order *string
	bookmark *string
	translateInterestsToNames *bool
}

// List of Campaign Ids to use to filter the results.
func (r ApiAdGroupsListRequest) CampaignIds(campaignIds []string) ApiAdGroupsListRequest {
	r.campaignIds = &campaignIds
	return r
}

// List of Ad group Ids to use to filter the results.
func (r ApiAdGroupsListRequest) AdGroupIds(adGroupIds []string) ApiAdGroupsListRequest {
	r.adGroupIds = &adGroupIds
	return r
}

// Entity status
func (r ApiAdGroupsListRequest) EntityStatuses(entityStatuses []string) ApiAdGroupsListRequest {
	r.entityStatuses = &entityStatuses
	return r
}

// Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information.
func (r ApiAdGroupsListRequest) PageSize(pageSize int32) ApiAdGroupsListRequest {
	r.pageSize = &pageSize
	return r
}

// The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
func (r ApiAdGroupsListRequest) Order(order string) ApiAdGroupsListRequest {
	r.order = &order
	return r
}

// Cursor used to fetch the next page of items
func (r ApiAdGroupsListRequest) Bookmark(bookmark string) ApiAdGroupsListRequest {
	r.bookmark = &bookmark
	return r
}

// Return interests as text names (if value is true) rather than topic IDs.
func (r ApiAdGroupsListRequest) TranslateInterestsToNames(translateInterestsToNames bool) ApiAdGroupsListRequest {
	r.translateInterestsToNames = &translateInterestsToNames
	return r
}

func (r ApiAdGroupsListRequest) Execute() (*AdGroupsList200Response, *http.Response, error) {
	return r.ApiService.AdGroupsListExecute(r)
}

/*
AdGroupsList List ad groups

List ad groups based on provided campaign IDs or ad group IDs.(campaign_ids or ad_group_ids). <p/>
<strong>Note:</strong><p/>
Provide only campaign_id or ad_group_id. Do not provide both.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param adAccountId Unique identifier of an ad account.
 @return ApiAdGroupsListRequest
*/
func (a *AdGroupsAPIService) AdGroupsList(ctx context.Context, adAccountId string) ApiAdGroupsListRequest {
	return ApiAdGroupsListRequest{
		ApiService: a,
		ctx: ctx,
		adAccountId: adAccountId,
	}
}

// Execute executes the request
//  @return AdGroupsList200Response
func (a *AdGroupsAPIService) AdGroupsListExecute(r ApiAdGroupsListRequest) (*AdGroupsList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AdGroupsList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdGroupsAPIService.AdGroupsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ad_accounts/{ad_account_id}/ad_groups"
	localVarPath = strings.Replace(localVarPath, "{"+"ad_account_id"+"}", url.PathEscape(parameterValueToString(r.adAccountId, "adAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.adAccountId) > 18 {
		return localVarReturnValue, nil, reportError("adAccountId must have less than 18 elements")
	}

	if r.campaignIds != nil {
		t := *r.campaignIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "campaign_ids", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "campaign_ids", t, "form", "multi")
		}
	}
	if r.adGroupIds != nil {
		t := *r.adGroupIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ad_group_ids", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ad_group_ids", t, "form", "multi")
		}
	}
	if r.entityStatuses != nil {
		t := *r.entityStatuses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "entity_statuses", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "entity_statuses", t, "form", "multi")
		}
	} else {
		var defaultValue []string = ["ACTIVE","PAUSED"]
		r.entityStatuses = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 25
		r.pageSize = &defaultValue
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "form", "")
	}
	if r.bookmark != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bookmark", r.bookmark, "form", "")
	}
	if r.translateInterestsToNames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "translate_interests_to_names", r.translateInterestsToNames, "form", "")
	} else {
		var defaultValue bool = false
		r.translateInterestsToNames = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdGroupsTargetingAnalyticsGetRequest struct {
	ctx context.Context
	ApiService *AdGroupsAPIService
	adAccountId string
	adGroupIds *[]string
	startDate *string
	endDate *string
	targetingTypes *[]AdsAnalyticsTargetingType
	columns *[]string
	granularity *Granularity
	clickWindowDays *int32
	engagementWindowDays *int32
	viewWindowDays *int32
	conversionReportTime *string
	attributionTypes *ConversionReportAttributionType
}

// List of Ad group Ids to use to filter the results.
func (r ApiAdGroupsTargetingAnalyticsGetRequest) AdGroupIds(adGroupIds []string) ApiAdGroupsTargetingAnalyticsGetRequest {
	r.adGroupIds = &adGroupIds
	return r
}

// Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
func (r ApiAdGroupsTargetingAnalyticsGetRequest) StartDate(startDate string) ApiAdGroupsTargetingAnalyticsGetRequest {
	r.startDate = &startDate
	return r
}

// Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
func (r ApiAdGroupsTargetingAnalyticsGetRequest) EndDate(endDate string) ApiAdGroupsTargetingAnalyticsGetRequest {
	r.endDate = &endDate
	return r
}

// Targeting type breakdowns for the report. The reporting per targeting type &lt;br&gt; is independent from each other. [\&quot;AGE_BUCKET_AND_GENDER\&quot;] is in BETA and not yet available to all users.
func (r ApiAdGroupsTargetingAnalyticsGetRequest) TargetingTypes(targetingTypes []AdsAnalyticsTargetingType) ApiAdGroupsTargetingAnalyticsGetRequest {
	r.targetingTypes = &targetingTypes
	return r
}

// Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
func (r ApiAdGroupsTargetingAnalyticsGetRequest) Columns(columns []string) ApiAdGroupsTargetingAnalyticsGetRequest {
	r.columns = &columns
	return r
}

// TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
func (r ApiAdGroupsTargetingAnalyticsGetRequest) Granularity(granularity Granularity) ApiAdGroupsTargetingAnalyticsGetRequest {
	r.granularity = &granularity
	return r
}

// Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
func (r ApiAdGroupsTargetingAnalyticsGetRequest) ClickWindowDays(clickWindowDays int32) ApiAdGroupsTargetingAnalyticsGetRequest {
	r.clickWindowDays = &clickWindowDays
	return r
}

// Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
func (r ApiAdGroupsTargetingAnalyticsGetRequest) EngagementWindowDays(engagementWindowDays int32) ApiAdGroupsTargetingAnalyticsGetRequest {
	r.engagementWindowDays = &engagementWindowDays
	return r
}

// Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
func (r ApiAdGroupsTargetingAnalyticsGetRequest) ViewWindowDays(viewWindowDays int32) ApiAdGroupsTargetingAnalyticsGetRequest {
	r.viewWindowDays = &viewWindowDays
	return r
}

// The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
func (r ApiAdGroupsTargetingAnalyticsGetRequest) ConversionReportTime(conversionReportTime string) ApiAdGroupsTargetingAnalyticsGetRequest {
	r.conversionReportTime = &conversionReportTime
	return r
}

// List of types of attribution for the conversion report
func (r ApiAdGroupsTargetingAnalyticsGetRequest) AttributionTypes(attributionTypes ConversionReportAttributionType) ApiAdGroupsTargetingAnalyticsGetRequest {
	r.attributionTypes = &attributionTypes
	return r
}

func (r ApiAdGroupsTargetingAnalyticsGetRequest) Execute() (*MetricsResponse, *http.Response, error) {
	return r.ApiService.AdGroupsTargetingAnalyticsGetExecute(r)
}

/*
AdGroupsTargetingAnalyticsGet Get targeting analytics for ad groups

Get targeting analytics for one or more ad groups.
For the requested ad group(s) and metrics, the response will include the requested metric information
(e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. "age_bucket") for applicable values (e.g. "45-49"). <p/>
- The token's user_account must either be the Owner of the specified ad account, or have one
of the necessary roles granted to them via
<a href="https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts">Business Access</a>: Admin, Analyst, Campaign Manager.
- If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days.
- If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param adAccountId Unique identifier of an ad account.
 @return ApiAdGroupsTargetingAnalyticsGetRequest
*/
func (a *AdGroupsAPIService) AdGroupsTargetingAnalyticsGet(ctx context.Context, adAccountId string) ApiAdGroupsTargetingAnalyticsGetRequest {
	return ApiAdGroupsTargetingAnalyticsGetRequest{
		ApiService: a,
		ctx: ctx,
		adAccountId: adAccountId,
	}
}

// Execute executes the request
//  @return MetricsResponse
func (a *AdGroupsAPIService) AdGroupsTargetingAnalyticsGetExecute(r ApiAdGroupsTargetingAnalyticsGetRequest) (*MetricsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MetricsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdGroupsAPIService.AdGroupsTargetingAnalyticsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ad_accounts/{ad_account_id}/ad_groups/targeting_analytics"
	localVarPath = strings.Replace(localVarPath, "{"+"ad_account_id"+"}", url.PathEscape(parameterValueToString(r.adAccountId, "adAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.adAccountId) > 18 {
		return localVarReturnValue, nil, reportError("adAccountId must have less than 18 elements")
	}
	if r.adGroupIds == nil {
		return localVarReturnValue, nil, reportError("adGroupIds is required and must be specified")
	}
	if len(*r.adGroupIds) < 1 {
		return localVarReturnValue, nil, reportError("adGroupIds must have at least 1 elements")
	}
	if len(*r.adGroupIds) > 100 {
		return localVarReturnValue, nil, reportError("adGroupIds must have less than 100 elements")
	}
	if r.startDate == nil {
		return localVarReturnValue, nil, reportError("startDate is required and must be specified")
	}
	if r.endDate == nil {
		return localVarReturnValue, nil, reportError("endDate is required and must be specified")
	}
	if r.targetingTypes == nil {
		return localVarReturnValue, nil, reportError("targetingTypes is required and must be specified")
	}
	if len(*r.targetingTypes) < 1 {
		return localVarReturnValue, nil, reportError("targetingTypes must have at least 1 elements")
	}
	if len(*r.targetingTypes) > 15 {
		return localVarReturnValue, nil, reportError("targetingTypes must have less than 15 elements")
	}
	if r.columns == nil {
		return localVarReturnValue, nil, reportError("columns is required and must be specified")
	}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	{
		t := *r.adGroupIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ad_group_ids", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ad_group_ids", t, "form", "multi")
		}
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "start_date", r.startDate, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "end_date", r.endDate, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "targeting_types", r.targetingTypes, "form", "csv")
	parameterAddToHeaderOrQuery(localVarQueryParams, "columns", r.columns, "form", "csv")
	parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "form", "")
	if r.clickWindowDays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "click_window_days", r.clickWindowDays, "form", "")
	} else {
		var defaultValue int32 = 30
		r.clickWindowDays = &defaultValue
	}
	if r.engagementWindowDays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "engagement_window_days", r.engagementWindowDays, "form", "")
	} else {
		var defaultValue int32 = 30
		r.engagementWindowDays = &defaultValue
	}
	if r.viewWindowDays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "view_window_days", r.viewWindowDays, "form", "")
	} else {
		var defaultValue int32 = 1
		r.viewWindowDays = &defaultValue
	}
	if r.conversionReportTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conversion_report_time", r.conversionReportTime, "form", "")
	} else {
		var defaultValue string = "TIME_OF_AD_ACTION"
		r.conversionReportTime = &defaultValue
	}
	if r.attributionTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "attribution_types", r.attributionTypes, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdGroupsUpdateRequest struct {
	ctx context.Context
	ApiService *AdGroupsAPIService
	adAccountId string
	adGroupUpdateRequest *[]AdGroupUpdateRequest
}

// List of ad groups to update, size limit [1, 30].
func (r ApiAdGroupsUpdateRequest) AdGroupUpdateRequest(adGroupUpdateRequest []AdGroupUpdateRequest) ApiAdGroupsUpdateRequest {
	r.adGroupUpdateRequest = &adGroupUpdateRequest
	return r
}

func (r ApiAdGroupsUpdateRequest) Execute() (*AdGroupArrayResponse, *http.Response, error) {
	return r.ApiService.AdGroupsUpdateExecute(r)
}

/*
AdGroupsUpdate Update ad groups

Update multiple existing ad groups.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param adAccountId Unique identifier of an ad account.
 @return ApiAdGroupsUpdateRequest
*/
func (a *AdGroupsAPIService) AdGroupsUpdate(ctx context.Context, adAccountId string) ApiAdGroupsUpdateRequest {
	return ApiAdGroupsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		adAccountId: adAccountId,
	}
}

// Execute executes the request
//  @return AdGroupArrayResponse
func (a *AdGroupsAPIService) AdGroupsUpdateExecute(r ApiAdGroupsUpdateRequest) (*AdGroupArrayResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AdGroupArrayResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdGroupsAPIService.AdGroupsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ad_accounts/{ad_account_id}/ad_groups"
	localVarPath = strings.Replace(localVarPath, "{"+"ad_account_id"+"}", url.PathEscape(parameterValueToString(r.adAccountId, "adAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.adAccountId) > 18 {
		return localVarReturnValue, nil, reportError("adAccountId must have less than 18 elements")
	}
	if r.adGroupUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("adGroupUpdateRequest is required and must be specified")
	}
	if len(*r.adGroupUpdateRequest) < 1 {
		return localVarReturnValue, nil, reportError("adGroupUpdateRequest must have at least 1 elements")
	}
	if len(*r.adGroupUpdateRequest) > 30 {
		return localVarReturnValue, nil, reportError("adGroupUpdateRequest must have less than 30 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.adGroupUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
