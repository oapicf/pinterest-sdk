/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ConversionTagType conversion tag type
type ConversionTagType string

// List of ConversionTagType
const (
	PAGE_LOAD ConversionTagType = "PAGE_LOAD"
	UNKNOWN ConversionTagType = "UNKNOWN"
	INITIALIZED ConversionTagType = "INITIALIZED"
	PAGE_VISIT ConversionTagType = "PAGE_VISIT"
	SIGNUP ConversionTagType = "SIGNUP"
	CHECKOUT ConversionTagType = "CHECKOUT"
	CUSTOM ConversionTagType = "CUSTOM"
	VIEW_CATEGORY ConversionTagType = "VIEW_CATEGORY"
	SEARCH ConversionTagType = "SEARCH"
	ADD_TO_CART ConversionTagType = "ADD_TO_CART"
	WATCH_VIDEO ConversionTagType = "WATCH_VIDEO"
	LEAD ConversionTagType = "LEAD"
	APP_INSTALL ConversionTagType = "APP_INSTALL"
	WEB_SESSION ConversionTagType = "WEB_SESSION"
	EXTERNAL_MEASUREMENT ConversionTagType = "EXTERNAL_MEASUREMENT"
)

// All allowed values of ConversionTagType enum
var AllowedConversionTagTypeEnumValues = []ConversionTagType{
	"PAGE_LOAD",
	"UNKNOWN",
	"INITIALIZED",
	"PAGE_VISIT",
	"SIGNUP",
	"CHECKOUT",
	"CUSTOM",
	"VIEW_CATEGORY",
	"SEARCH",
	"ADD_TO_CART",
	"WATCH_VIDEO",
	"LEAD",
	"APP_INSTALL",
	"WEB_SESSION",
	"EXTERNAL_MEASUREMENT",
}

func (v *ConversionTagType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConversionTagType(value)
	for _, existing := range AllowedConversionTagTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConversionTagType", value)
}

// NewConversionTagTypeFromValue returns a pointer to a valid ConversionTagType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConversionTagTypeFromValue(v string) (*ConversionTagType, error) {
	ev := ConversionTagType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConversionTagType: valid values are %v", v, AllowedConversionTagTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConversionTagType) IsValid() bool {
	for _, existing := range AllowedConversionTagTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConversionTagType value
func (v ConversionTagType) Ptr() *ConversionTagType {
	return &v
}

type NullableConversionTagType struct {
	value *ConversionTagType
	isSet bool
}

func (v NullableConversionTagType) Get() *ConversionTagType {
	return v.value
}

func (v *NullableConversionTagType) Set(val *ConversionTagType) {
	v.value = val
	v.isSet = true
}

func (v NullableConversionTagType) IsSet() bool {
	return v.isSet
}

func (v *NullableConversionTagType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversionTagType(val *ConversionTagType) *NullableConversionTagType {
	return &NullableConversionTagType{value: val, isSet: true}
}

func (v NullableConversionTagType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversionTagType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

