/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MatchTypeResponse Keyword match type
type MatchTypeResponse string

// List of MatchTypeResponse
const (
	BROAD MatchTypeResponse = "BROAD"
	PHRASE MatchTypeResponse = "PHRASE"
	EXACT MatchTypeResponse = "EXACT"
	EXACT_NEGATIVE MatchTypeResponse = "EXACT_NEGATIVE"
	PHRASE_NEGATIVE MatchTypeResponse = "PHRASE_NEGATIVE"
)

// All allowed values of MatchTypeResponse enum
var AllowedMatchTypeResponseEnumValues = []MatchTypeResponse{
	"BROAD",
	"PHRASE",
	"EXACT",
	"EXACT_NEGATIVE",
	"PHRASE_NEGATIVE",
}

func (v *MatchTypeResponse) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MatchTypeResponse(value)
	for _, existing := range AllowedMatchTypeResponseEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MatchTypeResponse", value)
}

// NewMatchTypeResponseFromValue returns a pointer to a valid MatchTypeResponse
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMatchTypeResponseFromValue(v string) (*MatchTypeResponse, error) {
	ev := MatchTypeResponse(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MatchTypeResponse: valid values are %v", v, AllowedMatchTypeResponseEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MatchTypeResponse) IsValid() bool {
	for _, existing := range AllowedMatchTypeResponseEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MatchTypeResponse value
func (v MatchTypeResponse) Ptr() *MatchTypeResponse {
	return &v
}

type NullableMatchTypeResponse struct {
	value *MatchTypeResponse
	isSet bool
}

func (v NullableMatchTypeResponse) Get() *MatchTypeResponse {
	return v.value
}

func (v *NullableMatchTypeResponse) Set(val *MatchTypeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchTypeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchTypeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchTypeResponse(val *MatchTypeResponse) *NullableMatchTypeResponse {
	return &NullableMatchTypeResponse{value: val, isSet: true}
}

func (v NullableMatchTypeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchTypeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

