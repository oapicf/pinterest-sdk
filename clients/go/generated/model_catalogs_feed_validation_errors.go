/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CatalogsFeedValidationErrors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogsFeedValidationErrors{}

// CatalogsFeedValidationErrors struct for CatalogsFeedValidationErrors
type CatalogsFeedValidationErrors struct {
	// Pinterest couldn't download your feed.
	FETCH_ERROR *int32 `json:"FETCH_ERROR,omitempty"`
	// Your feed wasn't ingested because it hasnâ€™t changed in the previous 90 days.
	FETCH_INACTIVE_FEED_ERROR *int32 `json:"FETCH_INACTIVE_FEED_ERROR,omitempty"`
	// Your feed includes data with an unsupported encoding format.
	ENCODING_ERROR *int32 `json:"ENCODING_ERROR,omitempty"`
	// Your feed includes data with formatting errors.
	DELIMITER_ERROR *int32 `json:"DELIMITER_ERROR,omitempty"`
	// Your feed is missing some required column headers.
	REQUIRED_COLUMNS_MISSING *int32 `json:"REQUIRED_COLUMNS_MISSING,omitempty"`
	// Some products are duplicated.
	DUPLICATE_PRODUCTS *int32 `json:"DUPLICATE_PRODUCTS,omitempty"`
	// Some image links are formatted incorrectly.
	IMAGE_LINK_INVALID *int32 `json:"IMAGE_LINK_INVALID,omitempty"`
	// Some items are missing an item id in their product metadata, those items will not be published.
	ITEMID_MISSING *int32 `json:"ITEMID_MISSING,omitempty"`
	// Some items are missing a title in their product metadata, those items will not be published.
	TITLE_MISSING *int32 `json:"TITLE_MISSING,omitempty"`
	// Some items are missing a description in their product metadata, those items will not be published.
	DESCRIPTION_MISSING *int32 `json:"DESCRIPTION_MISSING,omitempty"`
	// Some items are missing a link URL in their product metadata, those items will not be published.
	PRODUCT_LINK_MISSING *int32 `json:"PRODUCT_LINK_MISSING,omitempty"`
	// Some items are missing an image link URL in their product metadata, those items will not be published.
	IMAGE_LINK_MISSING *int32 `json:"IMAGE_LINK_MISSING,omitempty"`
	// Some items are missing an availability value in their product metadata, those items will not be published.
	AVAILABILITY_INVALID *int32 `json:"AVAILABILITY_INVALID,omitempty"`
	// Some items have price formatting errors in their product metadata, those items will not be published.
	PRODUCT_PRICE_INVALID *int32 `json:"PRODUCT_PRICE_INVALID,omitempty"`
	// Some link values are formatted incorrectly.
	LINK_FORMAT_INVALID *int32 `json:"LINK_FORMAT_INVALID,omitempty"`
	// Your feed contains formatting errors for some items.
	PARSE_LINE_ERROR *int32 `json:"PARSE_LINE_ERROR,omitempty"`
	// Some adwords links contain too many characters.
	ADWORDS_FORMAT_INVALID *int32 `json:"ADWORDS_FORMAT_INVALID,omitempty"`
	// We experienced a technical difficulty and were unable to ingest your feed. The next ingestion will happen in 24 hours.
	INTERNAL_SERVICE_ERROR *int32 `json:"INTERNAL_SERVICE_ERROR,omitempty"`
	// Your merchant domain needs to be claimed.
	NO_VERIFIED_DOMAIN *int32 `json:"NO_VERIFIED_DOMAIN,omitempty"`
	// Some items have invalid adult values.
	ADULT_INVALID *int32 `json:"ADULT_INVALID,omitempty"`
	// Some items have image_link URLs that contain too many characters, so those items will not be published.
	IMAGE_LINK_LENGTH_TOO_LONG *int32 `json:"IMAGE_LINK_LENGTH_TOO_LONG,omitempty"`
	// Some of your product link values don't match the verified domain associated with this account.
	INVALID_DOMAIN *int32 `json:"INVALID_DOMAIN,omitempty"`
	// Your feed contains too many items, some items will not be published.
	FEED_LENGTH_TOO_LONG *int32 `json:"FEED_LENGTH_TOO_LONG,omitempty"`
	// Some product links contain too many characters, those items will not be published.
	LINK_LENGTH_TOO_LONG *int32 `json:"LINK_LENGTH_TOO_LONG,omitempty"`
	// Your feed couldn't be validated because the xml file is formatted incorrectly.
	MALFORMED_XML *int32 `json:"MALFORMED_XML,omitempty"`
	// Some products are missing a price, those items will not be published.
	PRICE_MISSING *int32 `json:"PRICE_MISSING,omitempty"`
	// Your feed couldn't be validated because the file doesn't contain the minimum number of lines required.
	FEED_TOO_SMALL *int32 `json:"FEED_TOO_SMALL,omitempty"`
	// Some items exceed the maximum number of items per item group, those items will not be published.
	MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED *int32 `json:"MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED,omitempty"`
	// Some items' main images can't be found.
	ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE *int32 `json:"ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE,omitempty"`
	// Some items were not published because they don't meet Pinterest's Merchant Guidelines.
	PINJOIN_CONTENT_UNSAFE *int32 `json:"PINJOIN_CONTENT_UNSAFE,omitempty"`
	// Some items were not published because they don't meet Pinterest's Merchant Guidelines.
	BLOCKLISTED_IMAGE_SIGNATURE *int32 `json:"BLOCKLISTED_IMAGE_SIGNATURE,omitempty"`
	// Some items have list price formatting errors in their product metadata, those items will not be published.
	LIST_PRICE_INVALID *int32 `json:"LIST_PRICE_INVALID,omitempty"`
	// Some items were not published because price cannot be determined. The price, list price, and sale price are all different, so those items will not be published.
	PRICE_CANNOT_BE_DETERMINED *int32 `json:"PRICE_CANNOT_BE_DETERMINED,omitempty"`
}

// NewCatalogsFeedValidationErrors instantiates a new CatalogsFeedValidationErrors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogsFeedValidationErrors() *CatalogsFeedValidationErrors {
	this := CatalogsFeedValidationErrors{}
	return &this
}

// NewCatalogsFeedValidationErrorsWithDefaults instantiates a new CatalogsFeedValidationErrors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogsFeedValidationErrorsWithDefaults() *CatalogsFeedValidationErrors {
	this := CatalogsFeedValidationErrors{}
	return &this
}

// GetFETCH_ERROR returns the FETCH_ERROR field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetFETCH_ERROR() int32 {
	if o == nil || IsNil(o.FETCH_ERROR) {
		var ret int32
		return ret
	}
	return *o.FETCH_ERROR
}

// GetFETCH_ERROROk returns a tuple with the FETCH_ERROR field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetFETCH_ERROROk() (*int32, bool) {
	if o == nil || IsNil(o.FETCH_ERROR) {
		return nil, false
	}
	return o.FETCH_ERROR, true
}

// HasFETCH_ERROR returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasFETCH_ERROR() bool {
	if o != nil && !IsNil(o.FETCH_ERROR) {
		return true
	}

	return false
}

// SetFETCH_ERROR gets a reference to the given int32 and assigns it to the FETCH_ERROR field.
func (o *CatalogsFeedValidationErrors) SetFETCH_ERROR(v int32) {
	o.FETCH_ERROR = &v
}

// GetFETCH_INACTIVE_FEED_ERROR returns the FETCH_INACTIVE_FEED_ERROR field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetFETCH_INACTIVE_FEED_ERROR() int32 {
	if o == nil || IsNil(o.FETCH_INACTIVE_FEED_ERROR) {
		var ret int32
		return ret
	}
	return *o.FETCH_INACTIVE_FEED_ERROR
}

// GetFETCH_INACTIVE_FEED_ERROROk returns a tuple with the FETCH_INACTIVE_FEED_ERROR field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetFETCH_INACTIVE_FEED_ERROROk() (*int32, bool) {
	if o == nil || IsNil(o.FETCH_INACTIVE_FEED_ERROR) {
		return nil, false
	}
	return o.FETCH_INACTIVE_FEED_ERROR, true
}

// HasFETCH_INACTIVE_FEED_ERROR returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasFETCH_INACTIVE_FEED_ERROR() bool {
	if o != nil && !IsNil(o.FETCH_INACTIVE_FEED_ERROR) {
		return true
	}

	return false
}

// SetFETCH_INACTIVE_FEED_ERROR gets a reference to the given int32 and assigns it to the FETCH_INACTIVE_FEED_ERROR field.
func (o *CatalogsFeedValidationErrors) SetFETCH_INACTIVE_FEED_ERROR(v int32) {
	o.FETCH_INACTIVE_FEED_ERROR = &v
}

// GetENCODING_ERROR returns the ENCODING_ERROR field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetENCODING_ERROR() int32 {
	if o == nil || IsNil(o.ENCODING_ERROR) {
		var ret int32
		return ret
	}
	return *o.ENCODING_ERROR
}

// GetENCODING_ERROROk returns a tuple with the ENCODING_ERROR field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetENCODING_ERROROk() (*int32, bool) {
	if o == nil || IsNil(o.ENCODING_ERROR) {
		return nil, false
	}
	return o.ENCODING_ERROR, true
}

// HasENCODING_ERROR returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasENCODING_ERROR() bool {
	if o != nil && !IsNil(o.ENCODING_ERROR) {
		return true
	}

	return false
}

// SetENCODING_ERROR gets a reference to the given int32 and assigns it to the ENCODING_ERROR field.
func (o *CatalogsFeedValidationErrors) SetENCODING_ERROR(v int32) {
	o.ENCODING_ERROR = &v
}

// GetDELIMITER_ERROR returns the DELIMITER_ERROR field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetDELIMITER_ERROR() int32 {
	if o == nil || IsNil(o.DELIMITER_ERROR) {
		var ret int32
		return ret
	}
	return *o.DELIMITER_ERROR
}

// GetDELIMITER_ERROROk returns a tuple with the DELIMITER_ERROR field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetDELIMITER_ERROROk() (*int32, bool) {
	if o == nil || IsNil(o.DELIMITER_ERROR) {
		return nil, false
	}
	return o.DELIMITER_ERROR, true
}

// HasDELIMITER_ERROR returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasDELIMITER_ERROR() bool {
	if o != nil && !IsNil(o.DELIMITER_ERROR) {
		return true
	}

	return false
}

// SetDELIMITER_ERROR gets a reference to the given int32 and assigns it to the DELIMITER_ERROR field.
func (o *CatalogsFeedValidationErrors) SetDELIMITER_ERROR(v int32) {
	o.DELIMITER_ERROR = &v
}

// GetREQUIRED_COLUMNS_MISSING returns the REQUIRED_COLUMNS_MISSING field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetREQUIRED_COLUMNS_MISSING() int32 {
	if o == nil || IsNil(o.REQUIRED_COLUMNS_MISSING) {
		var ret int32
		return ret
	}
	return *o.REQUIRED_COLUMNS_MISSING
}

// GetREQUIRED_COLUMNS_MISSINGOk returns a tuple with the REQUIRED_COLUMNS_MISSING field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetREQUIRED_COLUMNS_MISSINGOk() (*int32, bool) {
	if o == nil || IsNil(o.REQUIRED_COLUMNS_MISSING) {
		return nil, false
	}
	return o.REQUIRED_COLUMNS_MISSING, true
}

// HasREQUIRED_COLUMNS_MISSING returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasREQUIRED_COLUMNS_MISSING() bool {
	if o != nil && !IsNil(o.REQUIRED_COLUMNS_MISSING) {
		return true
	}

	return false
}

// SetREQUIRED_COLUMNS_MISSING gets a reference to the given int32 and assigns it to the REQUIRED_COLUMNS_MISSING field.
func (o *CatalogsFeedValidationErrors) SetREQUIRED_COLUMNS_MISSING(v int32) {
	o.REQUIRED_COLUMNS_MISSING = &v
}

// GetDUPLICATE_PRODUCTS returns the DUPLICATE_PRODUCTS field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetDUPLICATE_PRODUCTS() int32 {
	if o == nil || IsNil(o.DUPLICATE_PRODUCTS) {
		var ret int32
		return ret
	}
	return *o.DUPLICATE_PRODUCTS
}

// GetDUPLICATE_PRODUCTSOk returns a tuple with the DUPLICATE_PRODUCTS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetDUPLICATE_PRODUCTSOk() (*int32, bool) {
	if o == nil || IsNil(o.DUPLICATE_PRODUCTS) {
		return nil, false
	}
	return o.DUPLICATE_PRODUCTS, true
}

// HasDUPLICATE_PRODUCTS returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasDUPLICATE_PRODUCTS() bool {
	if o != nil && !IsNil(o.DUPLICATE_PRODUCTS) {
		return true
	}

	return false
}

// SetDUPLICATE_PRODUCTS gets a reference to the given int32 and assigns it to the DUPLICATE_PRODUCTS field.
func (o *CatalogsFeedValidationErrors) SetDUPLICATE_PRODUCTS(v int32) {
	o.DUPLICATE_PRODUCTS = &v
}

// GetIMAGE_LINK_INVALID returns the IMAGE_LINK_INVALID field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetIMAGE_LINK_INVALID() int32 {
	if o == nil || IsNil(o.IMAGE_LINK_INVALID) {
		var ret int32
		return ret
	}
	return *o.IMAGE_LINK_INVALID
}

// GetIMAGE_LINK_INVALIDOk returns a tuple with the IMAGE_LINK_INVALID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetIMAGE_LINK_INVALIDOk() (*int32, bool) {
	if o == nil || IsNil(o.IMAGE_LINK_INVALID) {
		return nil, false
	}
	return o.IMAGE_LINK_INVALID, true
}

// HasIMAGE_LINK_INVALID returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasIMAGE_LINK_INVALID() bool {
	if o != nil && !IsNil(o.IMAGE_LINK_INVALID) {
		return true
	}

	return false
}

// SetIMAGE_LINK_INVALID gets a reference to the given int32 and assigns it to the IMAGE_LINK_INVALID field.
func (o *CatalogsFeedValidationErrors) SetIMAGE_LINK_INVALID(v int32) {
	o.IMAGE_LINK_INVALID = &v
}

// GetITEMID_MISSING returns the ITEMID_MISSING field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetITEMID_MISSING() int32 {
	if o == nil || IsNil(o.ITEMID_MISSING) {
		var ret int32
		return ret
	}
	return *o.ITEMID_MISSING
}

// GetITEMID_MISSINGOk returns a tuple with the ITEMID_MISSING field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetITEMID_MISSINGOk() (*int32, bool) {
	if o == nil || IsNil(o.ITEMID_MISSING) {
		return nil, false
	}
	return o.ITEMID_MISSING, true
}

// HasITEMID_MISSING returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasITEMID_MISSING() bool {
	if o != nil && !IsNil(o.ITEMID_MISSING) {
		return true
	}

	return false
}

// SetITEMID_MISSING gets a reference to the given int32 and assigns it to the ITEMID_MISSING field.
func (o *CatalogsFeedValidationErrors) SetITEMID_MISSING(v int32) {
	o.ITEMID_MISSING = &v
}

// GetTITLE_MISSING returns the TITLE_MISSING field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetTITLE_MISSING() int32 {
	if o == nil || IsNil(o.TITLE_MISSING) {
		var ret int32
		return ret
	}
	return *o.TITLE_MISSING
}

// GetTITLE_MISSINGOk returns a tuple with the TITLE_MISSING field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetTITLE_MISSINGOk() (*int32, bool) {
	if o == nil || IsNil(o.TITLE_MISSING) {
		return nil, false
	}
	return o.TITLE_MISSING, true
}

// HasTITLE_MISSING returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasTITLE_MISSING() bool {
	if o != nil && !IsNil(o.TITLE_MISSING) {
		return true
	}

	return false
}

// SetTITLE_MISSING gets a reference to the given int32 and assigns it to the TITLE_MISSING field.
func (o *CatalogsFeedValidationErrors) SetTITLE_MISSING(v int32) {
	o.TITLE_MISSING = &v
}

// GetDESCRIPTION_MISSING returns the DESCRIPTION_MISSING field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetDESCRIPTION_MISSING() int32 {
	if o == nil || IsNil(o.DESCRIPTION_MISSING) {
		var ret int32
		return ret
	}
	return *o.DESCRIPTION_MISSING
}

// GetDESCRIPTION_MISSINGOk returns a tuple with the DESCRIPTION_MISSING field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetDESCRIPTION_MISSINGOk() (*int32, bool) {
	if o == nil || IsNil(o.DESCRIPTION_MISSING) {
		return nil, false
	}
	return o.DESCRIPTION_MISSING, true
}

// HasDESCRIPTION_MISSING returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasDESCRIPTION_MISSING() bool {
	if o != nil && !IsNil(o.DESCRIPTION_MISSING) {
		return true
	}

	return false
}

// SetDESCRIPTION_MISSING gets a reference to the given int32 and assigns it to the DESCRIPTION_MISSING field.
func (o *CatalogsFeedValidationErrors) SetDESCRIPTION_MISSING(v int32) {
	o.DESCRIPTION_MISSING = &v
}

// GetPRODUCT_LINK_MISSING returns the PRODUCT_LINK_MISSING field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetPRODUCT_LINK_MISSING() int32 {
	if o == nil || IsNil(o.PRODUCT_LINK_MISSING) {
		var ret int32
		return ret
	}
	return *o.PRODUCT_LINK_MISSING
}

// GetPRODUCT_LINK_MISSINGOk returns a tuple with the PRODUCT_LINK_MISSING field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetPRODUCT_LINK_MISSINGOk() (*int32, bool) {
	if o == nil || IsNil(o.PRODUCT_LINK_MISSING) {
		return nil, false
	}
	return o.PRODUCT_LINK_MISSING, true
}

// HasPRODUCT_LINK_MISSING returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasPRODUCT_LINK_MISSING() bool {
	if o != nil && !IsNil(o.PRODUCT_LINK_MISSING) {
		return true
	}

	return false
}

// SetPRODUCT_LINK_MISSING gets a reference to the given int32 and assigns it to the PRODUCT_LINK_MISSING field.
func (o *CatalogsFeedValidationErrors) SetPRODUCT_LINK_MISSING(v int32) {
	o.PRODUCT_LINK_MISSING = &v
}

// GetIMAGE_LINK_MISSING returns the IMAGE_LINK_MISSING field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetIMAGE_LINK_MISSING() int32 {
	if o == nil || IsNil(o.IMAGE_LINK_MISSING) {
		var ret int32
		return ret
	}
	return *o.IMAGE_LINK_MISSING
}

// GetIMAGE_LINK_MISSINGOk returns a tuple with the IMAGE_LINK_MISSING field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetIMAGE_LINK_MISSINGOk() (*int32, bool) {
	if o == nil || IsNil(o.IMAGE_LINK_MISSING) {
		return nil, false
	}
	return o.IMAGE_LINK_MISSING, true
}

// HasIMAGE_LINK_MISSING returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasIMAGE_LINK_MISSING() bool {
	if o != nil && !IsNil(o.IMAGE_LINK_MISSING) {
		return true
	}

	return false
}

// SetIMAGE_LINK_MISSING gets a reference to the given int32 and assigns it to the IMAGE_LINK_MISSING field.
func (o *CatalogsFeedValidationErrors) SetIMAGE_LINK_MISSING(v int32) {
	o.IMAGE_LINK_MISSING = &v
}

// GetAVAILABILITY_INVALID returns the AVAILABILITY_INVALID field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetAVAILABILITY_INVALID() int32 {
	if o == nil || IsNil(o.AVAILABILITY_INVALID) {
		var ret int32
		return ret
	}
	return *o.AVAILABILITY_INVALID
}

// GetAVAILABILITY_INVALIDOk returns a tuple with the AVAILABILITY_INVALID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetAVAILABILITY_INVALIDOk() (*int32, bool) {
	if o == nil || IsNil(o.AVAILABILITY_INVALID) {
		return nil, false
	}
	return o.AVAILABILITY_INVALID, true
}

// HasAVAILABILITY_INVALID returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasAVAILABILITY_INVALID() bool {
	if o != nil && !IsNil(o.AVAILABILITY_INVALID) {
		return true
	}

	return false
}

// SetAVAILABILITY_INVALID gets a reference to the given int32 and assigns it to the AVAILABILITY_INVALID field.
func (o *CatalogsFeedValidationErrors) SetAVAILABILITY_INVALID(v int32) {
	o.AVAILABILITY_INVALID = &v
}

// GetPRODUCT_PRICE_INVALID returns the PRODUCT_PRICE_INVALID field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetPRODUCT_PRICE_INVALID() int32 {
	if o == nil || IsNil(o.PRODUCT_PRICE_INVALID) {
		var ret int32
		return ret
	}
	return *o.PRODUCT_PRICE_INVALID
}

// GetPRODUCT_PRICE_INVALIDOk returns a tuple with the PRODUCT_PRICE_INVALID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetPRODUCT_PRICE_INVALIDOk() (*int32, bool) {
	if o == nil || IsNil(o.PRODUCT_PRICE_INVALID) {
		return nil, false
	}
	return o.PRODUCT_PRICE_INVALID, true
}

// HasPRODUCT_PRICE_INVALID returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasPRODUCT_PRICE_INVALID() bool {
	if o != nil && !IsNil(o.PRODUCT_PRICE_INVALID) {
		return true
	}

	return false
}

// SetPRODUCT_PRICE_INVALID gets a reference to the given int32 and assigns it to the PRODUCT_PRICE_INVALID field.
func (o *CatalogsFeedValidationErrors) SetPRODUCT_PRICE_INVALID(v int32) {
	o.PRODUCT_PRICE_INVALID = &v
}

// GetLINK_FORMAT_INVALID returns the LINK_FORMAT_INVALID field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetLINK_FORMAT_INVALID() int32 {
	if o == nil || IsNil(o.LINK_FORMAT_INVALID) {
		var ret int32
		return ret
	}
	return *o.LINK_FORMAT_INVALID
}

// GetLINK_FORMAT_INVALIDOk returns a tuple with the LINK_FORMAT_INVALID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetLINK_FORMAT_INVALIDOk() (*int32, bool) {
	if o == nil || IsNil(o.LINK_FORMAT_INVALID) {
		return nil, false
	}
	return o.LINK_FORMAT_INVALID, true
}

// HasLINK_FORMAT_INVALID returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasLINK_FORMAT_INVALID() bool {
	if o != nil && !IsNil(o.LINK_FORMAT_INVALID) {
		return true
	}

	return false
}

// SetLINK_FORMAT_INVALID gets a reference to the given int32 and assigns it to the LINK_FORMAT_INVALID field.
func (o *CatalogsFeedValidationErrors) SetLINK_FORMAT_INVALID(v int32) {
	o.LINK_FORMAT_INVALID = &v
}

// GetPARSE_LINE_ERROR returns the PARSE_LINE_ERROR field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetPARSE_LINE_ERROR() int32 {
	if o == nil || IsNil(o.PARSE_LINE_ERROR) {
		var ret int32
		return ret
	}
	return *o.PARSE_LINE_ERROR
}

// GetPARSE_LINE_ERROROk returns a tuple with the PARSE_LINE_ERROR field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetPARSE_LINE_ERROROk() (*int32, bool) {
	if o == nil || IsNil(o.PARSE_LINE_ERROR) {
		return nil, false
	}
	return o.PARSE_LINE_ERROR, true
}

// HasPARSE_LINE_ERROR returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasPARSE_LINE_ERROR() bool {
	if o != nil && !IsNil(o.PARSE_LINE_ERROR) {
		return true
	}

	return false
}

// SetPARSE_LINE_ERROR gets a reference to the given int32 and assigns it to the PARSE_LINE_ERROR field.
func (o *CatalogsFeedValidationErrors) SetPARSE_LINE_ERROR(v int32) {
	o.PARSE_LINE_ERROR = &v
}

// GetADWORDS_FORMAT_INVALID returns the ADWORDS_FORMAT_INVALID field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetADWORDS_FORMAT_INVALID() int32 {
	if o == nil || IsNil(o.ADWORDS_FORMAT_INVALID) {
		var ret int32
		return ret
	}
	return *o.ADWORDS_FORMAT_INVALID
}

// GetADWORDS_FORMAT_INVALIDOk returns a tuple with the ADWORDS_FORMAT_INVALID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetADWORDS_FORMAT_INVALIDOk() (*int32, bool) {
	if o == nil || IsNil(o.ADWORDS_FORMAT_INVALID) {
		return nil, false
	}
	return o.ADWORDS_FORMAT_INVALID, true
}

// HasADWORDS_FORMAT_INVALID returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasADWORDS_FORMAT_INVALID() bool {
	if o != nil && !IsNil(o.ADWORDS_FORMAT_INVALID) {
		return true
	}

	return false
}

// SetADWORDS_FORMAT_INVALID gets a reference to the given int32 and assigns it to the ADWORDS_FORMAT_INVALID field.
func (o *CatalogsFeedValidationErrors) SetADWORDS_FORMAT_INVALID(v int32) {
	o.ADWORDS_FORMAT_INVALID = &v
}

// GetINTERNAL_SERVICE_ERROR returns the INTERNAL_SERVICE_ERROR field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetINTERNAL_SERVICE_ERROR() int32 {
	if o == nil || IsNil(o.INTERNAL_SERVICE_ERROR) {
		var ret int32
		return ret
	}
	return *o.INTERNAL_SERVICE_ERROR
}

// GetINTERNAL_SERVICE_ERROROk returns a tuple with the INTERNAL_SERVICE_ERROR field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetINTERNAL_SERVICE_ERROROk() (*int32, bool) {
	if o == nil || IsNil(o.INTERNAL_SERVICE_ERROR) {
		return nil, false
	}
	return o.INTERNAL_SERVICE_ERROR, true
}

// HasINTERNAL_SERVICE_ERROR returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasINTERNAL_SERVICE_ERROR() bool {
	if o != nil && !IsNil(o.INTERNAL_SERVICE_ERROR) {
		return true
	}

	return false
}

// SetINTERNAL_SERVICE_ERROR gets a reference to the given int32 and assigns it to the INTERNAL_SERVICE_ERROR field.
func (o *CatalogsFeedValidationErrors) SetINTERNAL_SERVICE_ERROR(v int32) {
	o.INTERNAL_SERVICE_ERROR = &v
}

// GetNO_VERIFIED_DOMAIN returns the NO_VERIFIED_DOMAIN field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetNO_VERIFIED_DOMAIN() int32 {
	if o == nil || IsNil(o.NO_VERIFIED_DOMAIN) {
		var ret int32
		return ret
	}
	return *o.NO_VERIFIED_DOMAIN
}

// GetNO_VERIFIED_DOMAINOk returns a tuple with the NO_VERIFIED_DOMAIN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetNO_VERIFIED_DOMAINOk() (*int32, bool) {
	if o == nil || IsNil(o.NO_VERIFIED_DOMAIN) {
		return nil, false
	}
	return o.NO_VERIFIED_DOMAIN, true
}

// HasNO_VERIFIED_DOMAIN returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasNO_VERIFIED_DOMAIN() bool {
	if o != nil && !IsNil(o.NO_VERIFIED_DOMAIN) {
		return true
	}

	return false
}

// SetNO_VERIFIED_DOMAIN gets a reference to the given int32 and assigns it to the NO_VERIFIED_DOMAIN field.
func (o *CatalogsFeedValidationErrors) SetNO_VERIFIED_DOMAIN(v int32) {
	o.NO_VERIFIED_DOMAIN = &v
}

// GetADULT_INVALID returns the ADULT_INVALID field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetADULT_INVALID() int32 {
	if o == nil || IsNil(o.ADULT_INVALID) {
		var ret int32
		return ret
	}
	return *o.ADULT_INVALID
}

// GetADULT_INVALIDOk returns a tuple with the ADULT_INVALID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetADULT_INVALIDOk() (*int32, bool) {
	if o == nil || IsNil(o.ADULT_INVALID) {
		return nil, false
	}
	return o.ADULT_INVALID, true
}

// HasADULT_INVALID returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasADULT_INVALID() bool {
	if o != nil && !IsNil(o.ADULT_INVALID) {
		return true
	}

	return false
}

// SetADULT_INVALID gets a reference to the given int32 and assigns it to the ADULT_INVALID field.
func (o *CatalogsFeedValidationErrors) SetADULT_INVALID(v int32) {
	o.ADULT_INVALID = &v
}

// GetIMAGE_LINK_LENGTH_TOO_LONG returns the IMAGE_LINK_LENGTH_TOO_LONG field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetIMAGE_LINK_LENGTH_TOO_LONG() int32 {
	if o == nil || IsNil(o.IMAGE_LINK_LENGTH_TOO_LONG) {
		var ret int32
		return ret
	}
	return *o.IMAGE_LINK_LENGTH_TOO_LONG
}

// GetIMAGE_LINK_LENGTH_TOO_LONGOk returns a tuple with the IMAGE_LINK_LENGTH_TOO_LONG field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetIMAGE_LINK_LENGTH_TOO_LONGOk() (*int32, bool) {
	if o == nil || IsNil(o.IMAGE_LINK_LENGTH_TOO_LONG) {
		return nil, false
	}
	return o.IMAGE_LINK_LENGTH_TOO_LONG, true
}

// HasIMAGE_LINK_LENGTH_TOO_LONG returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasIMAGE_LINK_LENGTH_TOO_LONG() bool {
	if o != nil && !IsNil(o.IMAGE_LINK_LENGTH_TOO_LONG) {
		return true
	}

	return false
}

// SetIMAGE_LINK_LENGTH_TOO_LONG gets a reference to the given int32 and assigns it to the IMAGE_LINK_LENGTH_TOO_LONG field.
func (o *CatalogsFeedValidationErrors) SetIMAGE_LINK_LENGTH_TOO_LONG(v int32) {
	o.IMAGE_LINK_LENGTH_TOO_LONG = &v
}

// GetINVALID_DOMAIN returns the INVALID_DOMAIN field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetINVALID_DOMAIN() int32 {
	if o == nil || IsNil(o.INVALID_DOMAIN) {
		var ret int32
		return ret
	}
	return *o.INVALID_DOMAIN
}

// GetINVALID_DOMAINOk returns a tuple with the INVALID_DOMAIN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetINVALID_DOMAINOk() (*int32, bool) {
	if o == nil || IsNil(o.INVALID_DOMAIN) {
		return nil, false
	}
	return o.INVALID_DOMAIN, true
}

// HasINVALID_DOMAIN returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasINVALID_DOMAIN() bool {
	if o != nil && !IsNil(o.INVALID_DOMAIN) {
		return true
	}

	return false
}

// SetINVALID_DOMAIN gets a reference to the given int32 and assigns it to the INVALID_DOMAIN field.
func (o *CatalogsFeedValidationErrors) SetINVALID_DOMAIN(v int32) {
	o.INVALID_DOMAIN = &v
}

// GetFEED_LENGTH_TOO_LONG returns the FEED_LENGTH_TOO_LONG field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetFEED_LENGTH_TOO_LONG() int32 {
	if o == nil || IsNil(o.FEED_LENGTH_TOO_LONG) {
		var ret int32
		return ret
	}
	return *o.FEED_LENGTH_TOO_LONG
}

// GetFEED_LENGTH_TOO_LONGOk returns a tuple with the FEED_LENGTH_TOO_LONG field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetFEED_LENGTH_TOO_LONGOk() (*int32, bool) {
	if o == nil || IsNil(o.FEED_LENGTH_TOO_LONG) {
		return nil, false
	}
	return o.FEED_LENGTH_TOO_LONG, true
}

// HasFEED_LENGTH_TOO_LONG returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasFEED_LENGTH_TOO_LONG() bool {
	if o != nil && !IsNil(o.FEED_LENGTH_TOO_LONG) {
		return true
	}

	return false
}

// SetFEED_LENGTH_TOO_LONG gets a reference to the given int32 and assigns it to the FEED_LENGTH_TOO_LONG field.
func (o *CatalogsFeedValidationErrors) SetFEED_LENGTH_TOO_LONG(v int32) {
	o.FEED_LENGTH_TOO_LONG = &v
}

// GetLINK_LENGTH_TOO_LONG returns the LINK_LENGTH_TOO_LONG field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetLINK_LENGTH_TOO_LONG() int32 {
	if o == nil || IsNil(o.LINK_LENGTH_TOO_LONG) {
		var ret int32
		return ret
	}
	return *o.LINK_LENGTH_TOO_LONG
}

// GetLINK_LENGTH_TOO_LONGOk returns a tuple with the LINK_LENGTH_TOO_LONG field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetLINK_LENGTH_TOO_LONGOk() (*int32, bool) {
	if o == nil || IsNil(o.LINK_LENGTH_TOO_LONG) {
		return nil, false
	}
	return o.LINK_LENGTH_TOO_LONG, true
}

// HasLINK_LENGTH_TOO_LONG returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasLINK_LENGTH_TOO_LONG() bool {
	if o != nil && !IsNil(o.LINK_LENGTH_TOO_LONG) {
		return true
	}

	return false
}

// SetLINK_LENGTH_TOO_LONG gets a reference to the given int32 and assigns it to the LINK_LENGTH_TOO_LONG field.
func (o *CatalogsFeedValidationErrors) SetLINK_LENGTH_TOO_LONG(v int32) {
	o.LINK_LENGTH_TOO_LONG = &v
}

// GetMALFORMED_XML returns the MALFORMED_XML field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetMALFORMED_XML() int32 {
	if o == nil || IsNil(o.MALFORMED_XML) {
		var ret int32
		return ret
	}
	return *o.MALFORMED_XML
}

// GetMALFORMED_XMLOk returns a tuple with the MALFORMED_XML field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetMALFORMED_XMLOk() (*int32, bool) {
	if o == nil || IsNil(o.MALFORMED_XML) {
		return nil, false
	}
	return o.MALFORMED_XML, true
}

// HasMALFORMED_XML returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasMALFORMED_XML() bool {
	if o != nil && !IsNil(o.MALFORMED_XML) {
		return true
	}

	return false
}

// SetMALFORMED_XML gets a reference to the given int32 and assigns it to the MALFORMED_XML field.
func (o *CatalogsFeedValidationErrors) SetMALFORMED_XML(v int32) {
	o.MALFORMED_XML = &v
}

// GetPRICE_MISSING returns the PRICE_MISSING field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetPRICE_MISSING() int32 {
	if o == nil || IsNil(o.PRICE_MISSING) {
		var ret int32
		return ret
	}
	return *o.PRICE_MISSING
}

// GetPRICE_MISSINGOk returns a tuple with the PRICE_MISSING field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetPRICE_MISSINGOk() (*int32, bool) {
	if o == nil || IsNil(o.PRICE_MISSING) {
		return nil, false
	}
	return o.PRICE_MISSING, true
}

// HasPRICE_MISSING returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasPRICE_MISSING() bool {
	if o != nil && !IsNil(o.PRICE_MISSING) {
		return true
	}

	return false
}

// SetPRICE_MISSING gets a reference to the given int32 and assigns it to the PRICE_MISSING field.
func (o *CatalogsFeedValidationErrors) SetPRICE_MISSING(v int32) {
	o.PRICE_MISSING = &v
}

// GetFEED_TOO_SMALL returns the FEED_TOO_SMALL field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetFEED_TOO_SMALL() int32 {
	if o == nil || IsNil(o.FEED_TOO_SMALL) {
		var ret int32
		return ret
	}
	return *o.FEED_TOO_SMALL
}

// GetFEED_TOO_SMALLOk returns a tuple with the FEED_TOO_SMALL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetFEED_TOO_SMALLOk() (*int32, bool) {
	if o == nil || IsNil(o.FEED_TOO_SMALL) {
		return nil, false
	}
	return o.FEED_TOO_SMALL, true
}

// HasFEED_TOO_SMALL returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasFEED_TOO_SMALL() bool {
	if o != nil && !IsNil(o.FEED_TOO_SMALL) {
		return true
	}

	return false
}

// SetFEED_TOO_SMALL gets a reference to the given int32 and assigns it to the FEED_TOO_SMALL field.
func (o *CatalogsFeedValidationErrors) SetFEED_TOO_SMALL(v int32) {
	o.FEED_TOO_SMALL = &v
}

// GetMAX_ITEMS_PER_ITEM_GROUP_EXCEEDED returns the MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetMAX_ITEMS_PER_ITEM_GROUP_EXCEEDED() int32 {
	if o == nil || IsNil(o.MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED) {
		var ret int32
		return ret
	}
	return *o.MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED
}

// GetMAX_ITEMS_PER_ITEM_GROUP_EXCEEDEDOk returns a tuple with the MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetMAX_ITEMS_PER_ITEM_GROUP_EXCEEDEDOk() (*int32, bool) {
	if o == nil || IsNil(o.MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED) {
		return nil, false
	}
	return o.MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED, true
}

// HasMAX_ITEMS_PER_ITEM_GROUP_EXCEEDED returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasMAX_ITEMS_PER_ITEM_GROUP_EXCEEDED() bool {
	if o != nil && !IsNil(o.MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED) {
		return true
	}

	return false
}

// SetMAX_ITEMS_PER_ITEM_GROUP_EXCEEDED gets a reference to the given int32 and assigns it to the MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED field.
func (o *CatalogsFeedValidationErrors) SetMAX_ITEMS_PER_ITEM_GROUP_EXCEEDED(v int32) {
	o.MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED = &v
}

// GetITEM_MAIN_IMAGE_DOWNLOAD_FAILURE returns the ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetITEM_MAIN_IMAGE_DOWNLOAD_FAILURE() int32 {
	if o == nil || IsNil(o.ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE) {
		var ret int32
		return ret
	}
	return *o.ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE
}

// GetITEM_MAIN_IMAGE_DOWNLOAD_FAILUREOk returns a tuple with the ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetITEM_MAIN_IMAGE_DOWNLOAD_FAILUREOk() (*int32, bool) {
	if o == nil || IsNil(o.ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE) {
		return nil, false
	}
	return o.ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE, true
}

// HasITEM_MAIN_IMAGE_DOWNLOAD_FAILURE returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasITEM_MAIN_IMAGE_DOWNLOAD_FAILURE() bool {
	if o != nil && !IsNil(o.ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE) {
		return true
	}

	return false
}

// SetITEM_MAIN_IMAGE_DOWNLOAD_FAILURE gets a reference to the given int32 and assigns it to the ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE field.
func (o *CatalogsFeedValidationErrors) SetITEM_MAIN_IMAGE_DOWNLOAD_FAILURE(v int32) {
	o.ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE = &v
}

// GetPINJOIN_CONTENT_UNSAFE returns the PINJOIN_CONTENT_UNSAFE field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetPINJOIN_CONTENT_UNSAFE() int32 {
	if o == nil || IsNil(o.PINJOIN_CONTENT_UNSAFE) {
		var ret int32
		return ret
	}
	return *o.PINJOIN_CONTENT_UNSAFE
}

// GetPINJOIN_CONTENT_UNSAFEOk returns a tuple with the PINJOIN_CONTENT_UNSAFE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetPINJOIN_CONTENT_UNSAFEOk() (*int32, bool) {
	if o == nil || IsNil(o.PINJOIN_CONTENT_UNSAFE) {
		return nil, false
	}
	return o.PINJOIN_CONTENT_UNSAFE, true
}

// HasPINJOIN_CONTENT_UNSAFE returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasPINJOIN_CONTENT_UNSAFE() bool {
	if o != nil && !IsNil(o.PINJOIN_CONTENT_UNSAFE) {
		return true
	}

	return false
}

// SetPINJOIN_CONTENT_UNSAFE gets a reference to the given int32 and assigns it to the PINJOIN_CONTENT_UNSAFE field.
func (o *CatalogsFeedValidationErrors) SetPINJOIN_CONTENT_UNSAFE(v int32) {
	o.PINJOIN_CONTENT_UNSAFE = &v
}

// GetBLOCKLISTED_IMAGE_SIGNATURE returns the BLOCKLISTED_IMAGE_SIGNATURE field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetBLOCKLISTED_IMAGE_SIGNATURE() int32 {
	if o == nil || IsNil(o.BLOCKLISTED_IMAGE_SIGNATURE) {
		var ret int32
		return ret
	}
	return *o.BLOCKLISTED_IMAGE_SIGNATURE
}

// GetBLOCKLISTED_IMAGE_SIGNATUREOk returns a tuple with the BLOCKLISTED_IMAGE_SIGNATURE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetBLOCKLISTED_IMAGE_SIGNATUREOk() (*int32, bool) {
	if o == nil || IsNil(o.BLOCKLISTED_IMAGE_SIGNATURE) {
		return nil, false
	}
	return o.BLOCKLISTED_IMAGE_SIGNATURE, true
}

// HasBLOCKLISTED_IMAGE_SIGNATURE returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasBLOCKLISTED_IMAGE_SIGNATURE() bool {
	if o != nil && !IsNil(o.BLOCKLISTED_IMAGE_SIGNATURE) {
		return true
	}

	return false
}

// SetBLOCKLISTED_IMAGE_SIGNATURE gets a reference to the given int32 and assigns it to the BLOCKLISTED_IMAGE_SIGNATURE field.
func (o *CatalogsFeedValidationErrors) SetBLOCKLISTED_IMAGE_SIGNATURE(v int32) {
	o.BLOCKLISTED_IMAGE_SIGNATURE = &v
}

// GetLIST_PRICE_INVALID returns the LIST_PRICE_INVALID field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetLIST_PRICE_INVALID() int32 {
	if o == nil || IsNil(o.LIST_PRICE_INVALID) {
		var ret int32
		return ret
	}
	return *o.LIST_PRICE_INVALID
}

// GetLIST_PRICE_INVALIDOk returns a tuple with the LIST_PRICE_INVALID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetLIST_PRICE_INVALIDOk() (*int32, bool) {
	if o == nil || IsNil(o.LIST_PRICE_INVALID) {
		return nil, false
	}
	return o.LIST_PRICE_INVALID, true
}

// HasLIST_PRICE_INVALID returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasLIST_PRICE_INVALID() bool {
	if o != nil && !IsNil(o.LIST_PRICE_INVALID) {
		return true
	}

	return false
}

// SetLIST_PRICE_INVALID gets a reference to the given int32 and assigns it to the LIST_PRICE_INVALID field.
func (o *CatalogsFeedValidationErrors) SetLIST_PRICE_INVALID(v int32) {
	o.LIST_PRICE_INVALID = &v
}

// GetPRICE_CANNOT_BE_DETERMINED returns the PRICE_CANNOT_BE_DETERMINED field value if set, zero value otherwise.
func (o *CatalogsFeedValidationErrors) GetPRICE_CANNOT_BE_DETERMINED() int32 {
	if o == nil || IsNil(o.PRICE_CANNOT_BE_DETERMINED) {
		var ret int32
		return ret
	}
	return *o.PRICE_CANNOT_BE_DETERMINED
}

// GetPRICE_CANNOT_BE_DETERMINEDOk returns a tuple with the PRICE_CANNOT_BE_DETERMINED field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedValidationErrors) GetPRICE_CANNOT_BE_DETERMINEDOk() (*int32, bool) {
	if o == nil || IsNil(o.PRICE_CANNOT_BE_DETERMINED) {
		return nil, false
	}
	return o.PRICE_CANNOT_BE_DETERMINED, true
}

// HasPRICE_CANNOT_BE_DETERMINED returns a boolean if a field has been set.
func (o *CatalogsFeedValidationErrors) HasPRICE_CANNOT_BE_DETERMINED() bool {
	if o != nil && !IsNil(o.PRICE_CANNOT_BE_DETERMINED) {
		return true
	}

	return false
}

// SetPRICE_CANNOT_BE_DETERMINED gets a reference to the given int32 and assigns it to the PRICE_CANNOT_BE_DETERMINED field.
func (o *CatalogsFeedValidationErrors) SetPRICE_CANNOT_BE_DETERMINED(v int32) {
	o.PRICE_CANNOT_BE_DETERMINED = &v
}

func (o CatalogsFeedValidationErrors) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogsFeedValidationErrors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FETCH_ERROR) {
		toSerialize["FETCH_ERROR"] = o.FETCH_ERROR
	}
	if !IsNil(o.FETCH_INACTIVE_FEED_ERROR) {
		toSerialize["FETCH_INACTIVE_FEED_ERROR"] = o.FETCH_INACTIVE_FEED_ERROR
	}
	if !IsNil(o.ENCODING_ERROR) {
		toSerialize["ENCODING_ERROR"] = o.ENCODING_ERROR
	}
	if !IsNil(o.DELIMITER_ERROR) {
		toSerialize["DELIMITER_ERROR"] = o.DELIMITER_ERROR
	}
	if !IsNil(o.REQUIRED_COLUMNS_MISSING) {
		toSerialize["REQUIRED_COLUMNS_MISSING"] = o.REQUIRED_COLUMNS_MISSING
	}
	if !IsNil(o.DUPLICATE_PRODUCTS) {
		toSerialize["DUPLICATE_PRODUCTS"] = o.DUPLICATE_PRODUCTS
	}
	if !IsNil(o.IMAGE_LINK_INVALID) {
		toSerialize["IMAGE_LINK_INVALID"] = o.IMAGE_LINK_INVALID
	}
	if !IsNil(o.ITEMID_MISSING) {
		toSerialize["ITEMID_MISSING"] = o.ITEMID_MISSING
	}
	if !IsNil(o.TITLE_MISSING) {
		toSerialize["TITLE_MISSING"] = o.TITLE_MISSING
	}
	if !IsNil(o.DESCRIPTION_MISSING) {
		toSerialize["DESCRIPTION_MISSING"] = o.DESCRIPTION_MISSING
	}
	if !IsNil(o.PRODUCT_LINK_MISSING) {
		toSerialize["PRODUCT_LINK_MISSING"] = o.PRODUCT_LINK_MISSING
	}
	if !IsNil(o.IMAGE_LINK_MISSING) {
		toSerialize["IMAGE_LINK_MISSING"] = o.IMAGE_LINK_MISSING
	}
	if !IsNil(o.AVAILABILITY_INVALID) {
		toSerialize["AVAILABILITY_INVALID"] = o.AVAILABILITY_INVALID
	}
	if !IsNil(o.PRODUCT_PRICE_INVALID) {
		toSerialize["PRODUCT_PRICE_INVALID"] = o.PRODUCT_PRICE_INVALID
	}
	if !IsNil(o.LINK_FORMAT_INVALID) {
		toSerialize["LINK_FORMAT_INVALID"] = o.LINK_FORMAT_INVALID
	}
	if !IsNil(o.PARSE_LINE_ERROR) {
		toSerialize["PARSE_LINE_ERROR"] = o.PARSE_LINE_ERROR
	}
	if !IsNil(o.ADWORDS_FORMAT_INVALID) {
		toSerialize["ADWORDS_FORMAT_INVALID"] = o.ADWORDS_FORMAT_INVALID
	}
	if !IsNil(o.INTERNAL_SERVICE_ERROR) {
		toSerialize["INTERNAL_SERVICE_ERROR"] = o.INTERNAL_SERVICE_ERROR
	}
	if !IsNil(o.NO_VERIFIED_DOMAIN) {
		toSerialize["NO_VERIFIED_DOMAIN"] = o.NO_VERIFIED_DOMAIN
	}
	if !IsNil(o.ADULT_INVALID) {
		toSerialize["ADULT_INVALID"] = o.ADULT_INVALID
	}
	if !IsNil(o.IMAGE_LINK_LENGTH_TOO_LONG) {
		toSerialize["IMAGE_LINK_LENGTH_TOO_LONG"] = o.IMAGE_LINK_LENGTH_TOO_LONG
	}
	if !IsNil(o.INVALID_DOMAIN) {
		toSerialize["INVALID_DOMAIN"] = o.INVALID_DOMAIN
	}
	if !IsNil(o.FEED_LENGTH_TOO_LONG) {
		toSerialize["FEED_LENGTH_TOO_LONG"] = o.FEED_LENGTH_TOO_LONG
	}
	if !IsNil(o.LINK_LENGTH_TOO_LONG) {
		toSerialize["LINK_LENGTH_TOO_LONG"] = o.LINK_LENGTH_TOO_LONG
	}
	if !IsNil(o.MALFORMED_XML) {
		toSerialize["MALFORMED_XML"] = o.MALFORMED_XML
	}
	if !IsNil(o.PRICE_MISSING) {
		toSerialize["PRICE_MISSING"] = o.PRICE_MISSING
	}
	if !IsNil(o.FEED_TOO_SMALL) {
		toSerialize["FEED_TOO_SMALL"] = o.FEED_TOO_SMALL
	}
	if !IsNil(o.MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED) {
		toSerialize["MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED"] = o.MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED
	}
	if !IsNil(o.ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE) {
		toSerialize["ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE"] = o.ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE
	}
	if !IsNil(o.PINJOIN_CONTENT_UNSAFE) {
		toSerialize["PINJOIN_CONTENT_UNSAFE"] = o.PINJOIN_CONTENT_UNSAFE
	}
	if !IsNil(o.BLOCKLISTED_IMAGE_SIGNATURE) {
		toSerialize["BLOCKLISTED_IMAGE_SIGNATURE"] = o.BLOCKLISTED_IMAGE_SIGNATURE
	}
	if !IsNil(o.LIST_PRICE_INVALID) {
		toSerialize["LIST_PRICE_INVALID"] = o.LIST_PRICE_INVALID
	}
	if !IsNil(o.PRICE_CANNOT_BE_DETERMINED) {
		toSerialize["PRICE_CANNOT_BE_DETERMINED"] = o.PRICE_CANNOT_BE_DETERMINED
	}
	return toSerialize, nil
}

type NullableCatalogsFeedValidationErrors struct {
	value *CatalogsFeedValidationErrors
	isSet bool
}

func (v NullableCatalogsFeedValidationErrors) Get() *CatalogsFeedValidationErrors {
	return v.value
}

func (v *NullableCatalogsFeedValidationErrors) Set(val *CatalogsFeedValidationErrors) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogsFeedValidationErrors) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogsFeedValidationErrors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogsFeedValidationErrors(val *CatalogsFeedValidationErrors) *NullableCatalogsFeedValidationErrors {
	return &NullableCatalogsFeedValidationErrors{value: val, isSet: true}
}

func (v NullableCatalogsFeedValidationErrors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogsFeedValidationErrors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


