/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateMemberBusinessRoleBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateMemberBusinessRoleBody{}

// UpdateMemberBusinessRoleBody Single instance of a business member to have its role updated
type UpdateMemberBusinessRoleBody struct {
	BusinessRole BusinessRoleForMembers `json:"business_role"`
	// Unique identifier of the member
	MemberId string `json:"member_id" validate:"regexp=^\\\\d+$"`
}

type _UpdateMemberBusinessRoleBody UpdateMemberBusinessRoleBody

// NewUpdateMemberBusinessRoleBody instantiates a new UpdateMemberBusinessRoleBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateMemberBusinessRoleBody(businessRole BusinessRoleForMembers, memberId string) *UpdateMemberBusinessRoleBody {
	this := UpdateMemberBusinessRoleBody{}
	this.BusinessRole = businessRole
	this.MemberId = memberId
	return &this
}

// NewUpdateMemberBusinessRoleBodyWithDefaults instantiates a new UpdateMemberBusinessRoleBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateMemberBusinessRoleBodyWithDefaults() *UpdateMemberBusinessRoleBody {
	this := UpdateMemberBusinessRoleBody{}
	return &this
}

// GetBusinessRole returns the BusinessRole field value
func (o *UpdateMemberBusinessRoleBody) GetBusinessRole() BusinessRoleForMembers {
	if o == nil {
		var ret BusinessRoleForMembers
		return ret
	}

	return o.BusinessRole
}

// GetBusinessRoleOk returns a tuple with the BusinessRole field value
// and a boolean to check if the value has been set.
func (o *UpdateMemberBusinessRoleBody) GetBusinessRoleOk() (*BusinessRoleForMembers, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BusinessRole, true
}

// SetBusinessRole sets field value
func (o *UpdateMemberBusinessRoleBody) SetBusinessRole(v BusinessRoleForMembers) {
	o.BusinessRole = v
}

// GetMemberId returns the MemberId field value
func (o *UpdateMemberBusinessRoleBody) GetMemberId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MemberId
}

// GetMemberIdOk returns a tuple with the MemberId field value
// and a boolean to check if the value has been set.
func (o *UpdateMemberBusinessRoleBody) GetMemberIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MemberId, true
}

// SetMemberId sets field value
func (o *UpdateMemberBusinessRoleBody) SetMemberId(v string) {
	o.MemberId = v
}

func (o UpdateMemberBusinessRoleBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateMemberBusinessRoleBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["business_role"] = o.BusinessRole
	toSerialize["member_id"] = o.MemberId
	return toSerialize, nil
}

func (o *UpdateMemberBusinessRoleBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"business_role",
		"member_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateMemberBusinessRoleBody := _UpdateMemberBusinessRoleBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateMemberBusinessRoleBody)

	if err != nil {
		return err
	}

	*o = UpdateMemberBusinessRoleBody(varUpdateMemberBusinessRoleBody)

	return err
}

type NullableUpdateMemberBusinessRoleBody struct {
	value *UpdateMemberBusinessRoleBody
	isSet bool
}

func (v NullableUpdateMemberBusinessRoleBody) Get() *UpdateMemberBusinessRoleBody {
	return v.value
}

func (v *NullableUpdateMemberBusinessRoleBody) Set(val *UpdateMemberBusinessRoleBody) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateMemberBusinessRoleBody) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateMemberBusinessRoleBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateMemberBusinessRoleBody(val *UpdateMemberBusinessRoleBody) *NullableUpdateMemberBusinessRoleBody {
	return &NullableUpdateMemberBusinessRoleBody{value: val, isSet: true}
}

func (v NullableUpdateMemberBusinessRoleBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateMemberBusinessRoleBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


