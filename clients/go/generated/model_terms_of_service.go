/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TermsOfService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TermsOfService{}

// TermsOfService struct for TermsOfService
type TermsOfService struct {
	// The ID of the terms of service
	Id *string `json:"id,omitempty"`
	// The terms of service content
	Html NullableString `json:"html,omitempty"`
	// Whether the ad account has accepted terms of service.
	HasAccepted *bool `json:"has_accepted,omitempty"`
	// The ID of the ad account.
	AdAccountId *string `json:"ad_account_id,omitempty"`
}

// NewTermsOfService instantiates a new TermsOfService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTermsOfService() *TermsOfService {
	this := TermsOfService{}
	return &this
}

// NewTermsOfServiceWithDefaults instantiates a new TermsOfService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTermsOfServiceWithDefaults() *TermsOfService {
	this := TermsOfService{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TermsOfService) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TermsOfService) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TermsOfService) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TermsOfService) SetId(v string) {
	o.Id = &v
}

// GetHtml returns the Html field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TermsOfService) GetHtml() string {
	if o == nil || IsNil(o.Html.Get()) {
		var ret string
		return ret
	}
	return *o.Html.Get()
}

// GetHtmlOk returns a tuple with the Html field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TermsOfService) GetHtmlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Html.Get(), o.Html.IsSet()
}

// HasHtml returns a boolean if a field has been set.
func (o *TermsOfService) HasHtml() bool {
	if o != nil && o.Html.IsSet() {
		return true
	}

	return false
}

// SetHtml gets a reference to the given NullableString and assigns it to the Html field.
func (o *TermsOfService) SetHtml(v string) {
	o.Html.Set(&v)
}
// SetHtmlNil sets the value for Html to be an explicit nil
func (o *TermsOfService) SetHtmlNil() {
	o.Html.Set(nil)
}

// UnsetHtml ensures that no value is present for Html, not even an explicit nil
func (o *TermsOfService) UnsetHtml() {
	o.Html.Unset()
}

// GetHasAccepted returns the HasAccepted field value if set, zero value otherwise.
func (o *TermsOfService) GetHasAccepted() bool {
	if o == nil || IsNil(o.HasAccepted) {
		var ret bool
		return ret
	}
	return *o.HasAccepted
}

// GetHasAcceptedOk returns a tuple with the HasAccepted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TermsOfService) GetHasAcceptedOk() (*bool, bool) {
	if o == nil || IsNil(o.HasAccepted) {
		return nil, false
	}
	return o.HasAccepted, true
}

// HasHasAccepted returns a boolean if a field has been set.
func (o *TermsOfService) HasHasAccepted() bool {
	if o != nil && !IsNil(o.HasAccepted) {
		return true
	}

	return false
}

// SetHasAccepted gets a reference to the given bool and assigns it to the HasAccepted field.
func (o *TermsOfService) SetHasAccepted(v bool) {
	o.HasAccepted = &v
}

// GetAdAccountId returns the AdAccountId field value if set, zero value otherwise.
func (o *TermsOfService) GetAdAccountId() string {
	if o == nil || IsNil(o.AdAccountId) {
		var ret string
		return ret
	}
	return *o.AdAccountId
}

// GetAdAccountIdOk returns a tuple with the AdAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TermsOfService) GetAdAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AdAccountId) {
		return nil, false
	}
	return o.AdAccountId, true
}

// HasAdAccountId returns a boolean if a field has been set.
func (o *TermsOfService) HasAdAccountId() bool {
	if o != nil && !IsNil(o.AdAccountId) {
		return true
	}

	return false
}

// SetAdAccountId gets a reference to the given string and assigns it to the AdAccountId field.
func (o *TermsOfService) SetAdAccountId(v string) {
	o.AdAccountId = &v
}

func (o TermsOfService) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TermsOfService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Html.IsSet() {
		toSerialize["html"] = o.Html.Get()
	}
	if !IsNil(o.HasAccepted) {
		toSerialize["has_accepted"] = o.HasAccepted
	}
	if !IsNil(o.AdAccountId) {
		toSerialize["ad_account_id"] = o.AdAccountId
	}
	return toSerialize, nil
}

type NullableTermsOfService struct {
	value *TermsOfService
	isSet bool
}

func (v NullableTermsOfService) Get() *TermsOfService {
	return v.value
}

func (v *NullableTermsOfService) Set(val *TermsOfService) {
	v.value = val
	v.isSet = true
}

func (v NullableTermsOfService) IsSet() bool {
	return v.isSet
}

func (v *NullableTermsOfService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTermsOfService(val *TermsOfService) *NullableTermsOfService {
	return &NullableTermsOfService{value: val, isSet: true}
}

func (v NullableTermsOfService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTermsOfService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


