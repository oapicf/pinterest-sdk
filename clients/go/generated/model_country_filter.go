/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CountryFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CountryFilter{}

// CountryFilter struct for CountryFilter
type CountryFilter struct {
	COUNTRY CatalogsProductGroupMultipleCountriesCriteria `json:"COUNTRY"`
}

type _CountryFilter CountryFilter

// NewCountryFilter instantiates a new CountryFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountryFilter(cOUNTRY CatalogsProductGroupMultipleCountriesCriteria) *CountryFilter {
	this := CountryFilter{}
	this.COUNTRY = cOUNTRY
	return &this
}

// NewCountryFilterWithDefaults instantiates a new CountryFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountryFilterWithDefaults() *CountryFilter {
	this := CountryFilter{}
	return &this
}

// GetCOUNTRY returns the COUNTRY field value
func (o *CountryFilter) GetCOUNTRY() CatalogsProductGroupMultipleCountriesCriteria {
	if o == nil {
		var ret CatalogsProductGroupMultipleCountriesCriteria
		return ret
	}

	return o.COUNTRY
}

// GetCOUNTRYOk returns a tuple with the COUNTRY field value
// and a boolean to check if the value has been set.
func (o *CountryFilter) GetCOUNTRYOk() (CatalogsProductGroupMultipleCountriesCriteria, bool) {
	if o == nil {
		return CatalogsProductGroupMultipleCountriesCriteria{}, false
	}
	return o.COUNTRY, true
}

// SetCOUNTRY sets field value
func (o *CountryFilter) SetCOUNTRY(v CatalogsProductGroupMultipleCountriesCriteria) {
	o.COUNTRY = v
}

func (o CountryFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CountryFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["COUNTRY"] = o.COUNTRY
	return toSerialize, nil
}

func (o *CountryFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"COUNTRY",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCountryFilter := _CountryFilter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCountryFilter)

	if err != nil {
		return err
	}

	*o = CountryFilter(varCountryFilter)

	return err
}

type NullableCountryFilter struct {
	value *CountryFilter
	isSet bool
}

func (v NullableCountryFilter) Get() *CountryFilter {
	return v.value
}

func (v *NullableCountryFilter) Set(val *CountryFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableCountryFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableCountryFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountryFilter(val *CountryFilter) *NullableCountryFilter {
	return &NullableCountryFilter{value: val, isSet: true}
}

func (v NullableCountryFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountryFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


