/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConversionEventsDataInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConversionEventsDataInner{}

// ConversionEventsDataInner struct for ConversionEventsDataInner
type ConversionEventsDataInner struct {
	// <p>The type of the user event. Please use the right event_name otherwise the event won't be accepted and show up correctly in reports.   <ul>   <li><code>add_to_cart</code></li>   <li><code>checkout</code></li>   <li><code>custom</code></li>   <li><code>lead</code></li>   <li><code>page_visit</code></li>   <li><code>search</code></li>   <li><code>signup</code></li>   <li><code>view_category</code></li>   <li><code>watch_video</code></li>   </ul> </p> 
	EventName string `json:"event_name"`
	// <p>   The source indicating where the conversion event occurred.   <ul>     <li><code>app_android</code></li>     <li><code>app_ios</code></li>     <li><code>web</code></li>     <li><code>offline</code></li>   </ul> </p> 
	ActionSource string `json:"action_source"`
	// The time when the event happened. Unix timestamp in seconds.
	EventTime int64 `json:"event_time"`
	// A unique id string that identifies this event and can be used for deduping between events ingested via both the conversion API and Pinterest tracking. Without this, event's data is likely to be double counted and will cause report metric inflation. Third-party vendors make sure this field is updated on both Pinterest tag and Conversions API side before rolling out template for Conversions API.
	EventId string `json:"event_id"`
	// URL of the web conversion event.
	EventSourceUrl NullableString `json:"event_source_url,omitempty"`
	// When action_source is web or offline, it defines whether the user has opted out of tracking for web conversion events. While when action_source is app_android or app_ios, it defines whether the user has enabled Limit Ad Tracking on their iOS device, or opted out of Ads Personalization on their Android device.
	OptOut *bool `json:"opt_out,omitempty"`
	// The third party partner name responsible to send the event to Conversions API on behalf of the advertiser. The naming convention is \"ss-partnername\" lowercase. E.g ‘ss-shopify’
	PartnerName NullableString `json:"partner_name,omitempty"`
	UserData ConversionEventsUserData `json:"user_data"`
	CustomData *ConversionEventsDataInnerCustomData `json:"custom_data,omitempty"`
	// The app store app ID.
	AppId NullableString `json:"app_id,omitempty"`
	// Name of the app.
	AppName NullableString `json:"app_name,omitempty"`
	// Version of the app.
	AppVersion NullableString `json:"app_version,omitempty"`
	// Brand of the user device.
	DeviceBrand NullableString `json:"device_brand,omitempty"`
	// User device's mobile carrier.
	DeviceCarrier NullableString `json:"device_carrier,omitempty"`
	// Model of the user device.
	DeviceModel NullableString `json:"device_model,omitempty"`
	// Type of the user device.
	DeviceType NullableString `json:"device_type,omitempty"`
	// Version of the device operating system.
	OsVersion NullableString `json:"os_version,omitempty"`
	// Whether the event occurred when the user device was connected to wifi.
	Wifi *bool `json:"wifi,omitempty"`
	// Two-character ISO-639-1 language code indicating the user's language.
	Language NullableString `json:"language,omitempty"`
}

type _ConversionEventsDataInner ConversionEventsDataInner

// NewConversionEventsDataInner instantiates a new ConversionEventsDataInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConversionEventsDataInner(eventName string, actionSource string, eventTime int64, eventId string, userData ConversionEventsUserData) *ConversionEventsDataInner {
	this := ConversionEventsDataInner{}
	this.EventName = eventName
	this.ActionSource = actionSource
	this.EventTime = eventTime
	this.EventId = eventId
	this.UserData = userData
	return &this
}

// NewConversionEventsDataInnerWithDefaults instantiates a new ConversionEventsDataInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConversionEventsDataInnerWithDefaults() *ConversionEventsDataInner {
	this := ConversionEventsDataInner{}
	return &this
}

// GetEventName returns the EventName field value
func (o *ConversionEventsDataInner) GetEventName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value
// and a boolean to check if the value has been set.
func (o *ConversionEventsDataInner) GetEventNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventName, true
}

// SetEventName sets field value
func (o *ConversionEventsDataInner) SetEventName(v string) {
	o.EventName = v
}

// GetActionSource returns the ActionSource field value
func (o *ConversionEventsDataInner) GetActionSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActionSource
}

// GetActionSourceOk returns a tuple with the ActionSource field value
// and a boolean to check if the value has been set.
func (o *ConversionEventsDataInner) GetActionSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActionSource, true
}

// SetActionSource sets field value
func (o *ConversionEventsDataInner) SetActionSource(v string) {
	o.ActionSource = v
}

// GetEventTime returns the EventTime field value
func (o *ConversionEventsDataInner) GetEventTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EventTime
}

// GetEventTimeOk returns a tuple with the EventTime field value
// and a boolean to check if the value has been set.
func (o *ConversionEventsDataInner) GetEventTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventTime, true
}

// SetEventTime sets field value
func (o *ConversionEventsDataInner) SetEventTime(v int64) {
	o.EventTime = v
}

// GetEventId returns the EventId field value
func (o *ConversionEventsDataInner) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *ConversionEventsDataInner) GetEventIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *ConversionEventsDataInner) SetEventId(v string) {
	o.EventId = v
}

// GetEventSourceUrl returns the EventSourceUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConversionEventsDataInner) GetEventSourceUrl() string {
	if o == nil || IsNil(o.EventSourceUrl.Get()) {
		var ret string
		return ret
	}
	return *o.EventSourceUrl.Get()
}

// GetEventSourceUrlOk returns a tuple with the EventSourceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConversionEventsDataInner) GetEventSourceUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventSourceUrl.Get(), o.EventSourceUrl.IsSet()
}

// HasEventSourceUrl returns a boolean if a field has been set.
func (o *ConversionEventsDataInner) HasEventSourceUrl() bool {
	if o != nil && o.EventSourceUrl.IsSet() {
		return true
	}

	return false
}

// SetEventSourceUrl gets a reference to the given NullableString and assigns it to the EventSourceUrl field.
func (o *ConversionEventsDataInner) SetEventSourceUrl(v string) {
	o.EventSourceUrl.Set(&v)
}
// SetEventSourceUrlNil sets the value for EventSourceUrl to be an explicit nil
func (o *ConversionEventsDataInner) SetEventSourceUrlNil() {
	o.EventSourceUrl.Set(nil)
}

// UnsetEventSourceUrl ensures that no value is present for EventSourceUrl, not even an explicit nil
func (o *ConversionEventsDataInner) UnsetEventSourceUrl() {
	o.EventSourceUrl.Unset()
}

// GetOptOut returns the OptOut field value if set, zero value otherwise.
func (o *ConversionEventsDataInner) GetOptOut() bool {
	if o == nil || IsNil(o.OptOut) {
		var ret bool
		return ret
	}
	return *o.OptOut
}

// GetOptOutOk returns a tuple with the OptOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionEventsDataInner) GetOptOutOk() (*bool, bool) {
	if o == nil || IsNil(o.OptOut) {
		return nil, false
	}
	return o.OptOut, true
}

// HasOptOut returns a boolean if a field has been set.
func (o *ConversionEventsDataInner) HasOptOut() bool {
	if o != nil && !IsNil(o.OptOut) {
		return true
	}

	return false
}

// SetOptOut gets a reference to the given bool and assigns it to the OptOut field.
func (o *ConversionEventsDataInner) SetOptOut(v bool) {
	o.OptOut = &v
}

// GetPartnerName returns the PartnerName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConversionEventsDataInner) GetPartnerName() string {
	if o == nil || IsNil(o.PartnerName.Get()) {
		var ret string
		return ret
	}
	return *o.PartnerName.Get()
}

// GetPartnerNameOk returns a tuple with the PartnerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConversionEventsDataInner) GetPartnerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PartnerName.Get(), o.PartnerName.IsSet()
}

// HasPartnerName returns a boolean if a field has been set.
func (o *ConversionEventsDataInner) HasPartnerName() bool {
	if o != nil && o.PartnerName.IsSet() {
		return true
	}

	return false
}

// SetPartnerName gets a reference to the given NullableString and assigns it to the PartnerName field.
func (o *ConversionEventsDataInner) SetPartnerName(v string) {
	o.PartnerName.Set(&v)
}
// SetPartnerNameNil sets the value for PartnerName to be an explicit nil
func (o *ConversionEventsDataInner) SetPartnerNameNil() {
	o.PartnerName.Set(nil)
}

// UnsetPartnerName ensures that no value is present for PartnerName, not even an explicit nil
func (o *ConversionEventsDataInner) UnsetPartnerName() {
	o.PartnerName.Unset()
}

// GetUserData returns the UserData field value
func (o *ConversionEventsDataInner) GetUserData() ConversionEventsUserData {
	if o == nil {
		var ret ConversionEventsUserData
		return ret
	}

	return o.UserData
}

// GetUserDataOk returns a tuple with the UserData field value
// and a boolean to check if the value has been set.
func (o *ConversionEventsDataInner) GetUserDataOk() (*ConversionEventsUserData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserData, true
}

// SetUserData sets field value
func (o *ConversionEventsDataInner) SetUserData(v ConversionEventsUserData) {
	o.UserData = v
}

// GetCustomData returns the CustomData field value if set, zero value otherwise.
func (o *ConversionEventsDataInner) GetCustomData() ConversionEventsDataInnerCustomData {
	if o == nil || IsNil(o.CustomData) {
		var ret ConversionEventsDataInnerCustomData
		return ret
	}
	return *o.CustomData
}

// GetCustomDataOk returns a tuple with the CustomData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionEventsDataInner) GetCustomDataOk() (*ConversionEventsDataInnerCustomData, bool) {
	if o == nil || IsNil(o.CustomData) {
		return nil, false
	}
	return o.CustomData, true
}

// HasCustomData returns a boolean if a field has been set.
func (o *ConversionEventsDataInner) HasCustomData() bool {
	if o != nil && !IsNil(o.CustomData) {
		return true
	}

	return false
}

// SetCustomData gets a reference to the given ConversionEventsDataInnerCustomData and assigns it to the CustomData field.
func (o *ConversionEventsDataInner) SetCustomData(v ConversionEventsDataInnerCustomData) {
	o.CustomData = &v
}

// GetAppId returns the AppId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConversionEventsDataInner) GetAppId() string {
	if o == nil || IsNil(o.AppId.Get()) {
		var ret string
		return ret
	}
	return *o.AppId.Get()
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConversionEventsDataInner) GetAppIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppId.Get(), o.AppId.IsSet()
}

// HasAppId returns a boolean if a field has been set.
func (o *ConversionEventsDataInner) HasAppId() bool {
	if o != nil && o.AppId.IsSet() {
		return true
	}

	return false
}

// SetAppId gets a reference to the given NullableString and assigns it to the AppId field.
func (o *ConversionEventsDataInner) SetAppId(v string) {
	o.AppId.Set(&v)
}
// SetAppIdNil sets the value for AppId to be an explicit nil
func (o *ConversionEventsDataInner) SetAppIdNil() {
	o.AppId.Set(nil)
}

// UnsetAppId ensures that no value is present for AppId, not even an explicit nil
func (o *ConversionEventsDataInner) UnsetAppId() {
	o.AppId.Unset()
}

// GetAppName returns the AppName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConversionEventsDataInner) GetAppName() string {
	if o == nil || IsNil(o.AppName.Get()) {
		var ret string
		return ret
	}
	return *o.AppName.Get()
}

// GetAppNameOk returns a tuple with the AppName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConversionEventsDataInner) GetAppNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppName.Get(), o.AppName.IsSet()
}

// HasAppName returns a boolean if a field has been set.
func (o *ConversionEventsDataInner) HasAppName() bool {
	if o != nil && o.AppName.IsSet() {
		return true
	}

	return false
}

// SetAppName gets a reference to the given NullableString and assigns it to the AppName field.
func (o *ConversionEventsDataInner) SetAppName(v string) {
	o.AppName.Set(&v)
}
// SetAppNameNil sets the value for AppName to be an explicit nil
func (o *ConversionEventsDataInner) SetAppNameNil() {
	o.AppName.Set(nil)
}

// UnsetAppName ensures that no value is present for AppName, not even an explicit nil
func (o *ConversionEventsDataInner) UnsetAppName() {
	o.AppName.Unset()
}

// GetAppVersion returns the AppVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConversionEventsDataInner) GetAppVersion() string {
	if o == nil || IsNil(o.AppVersion.Get()) {
		var ret string
		return ret
	}
	return *o.AppVersion.Get()
}

// GetAppVersionOk returns a tuple with the AppVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConversionEventsDataInner) GetAppVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppVersion.Get(), o.AppVersion.IsSet()
}

// HasAppVersion returns a boolean if a field has been set.
func (o *ConversionEventsDataInner) HasAppVersion() bool {
	if o != nil && o.AppVersion.IsSet() {
		return true
	}

	return false
}

// SetAppVersion gets a reference to the given NullableString and assigns it to the AppVersion field.
func (o *ConversionEventsDataInner) SetAppVersion(v string) {
	o.AppVersion.Set(&v)
}
// SetAppVersionNil sets the value for AppVersion to be an explicit nil
func (o *ConversionEventsDataInner) SetAppVersionNil() {
	o.AppVersion.Set(nil)
}

// UnsetAppVersion ensures that no value is present for AppVersion, not even an explicit nil
func (o *ConversionEventsDataInner) UnsetAppVersion() {
	o.AppVersion.Unset()
}

// GetDeviceBrand returns the DeviceBrand field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConversionEventsDataInner) GetDeviceBrand() string {
	if o == nil || IsNil(o.DeviceBrand.Get()) {
		var ret string
		return ret
	}
	return *o.DeviceBrand.Get()
}

// GetDeviceBrandOk returns a tuple with the DeviceBrand field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConversionEventsDataInner) GetDeviceBrandOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeviceBrand.Get(), o.DeviceBrand.IsSet()
}

// HasDeviceBrand returns a boolean if a field has been set.
func (o *ConversionEventsDataInner) HasDeviceBrand() bool {
	if o != nil && o.DeviceBrand.IsSet() {
		return true
	}

	return false
}

// SetDeviceBrand gets a reference to the given NullableString and assigns it to the DeviceBrand field.
func (o *ConversionEventsDataInner) SetDeviceBrand(v string) {
	o.DeviceBrand.Set(&v)
}
// SetDeviceBrandNil sets the value for DeviceBrand to be an explicit nil
func (o *ConversionEventsDataInner) SetDeviceBrandNil() {
	o.DeviceBrand.Set(nil)
}

// UnsetDeviceBrand ensures that no value is present for DeviceBrand, not even an explicit nil
func (o *ConversionEventsDataInner) UnsetDeviceBrand() {
	o.DeviceBrand.Unset()
}

// GetDeviceCarrier returns the DeviceCarrier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConversionEventsDataInner) GetDeviceCarrier() string {
	if o == nil || IsNil(o.DeviceCarrier.Get()) {
		var ret string
		return ret
	}
	return *o.DeviceCarrier.Get()
}

// GetDeviceCarrierOk returns a tuple with the DeviceCarrier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConversionEventsDataInner) GetDeviceCarrierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeviceCarrier.Get(), o.DeviceCarrier.IsSet()
}

// HasDeviceCarrier returns a boolean if a field has been set.
func (o *ConversionEventsDataInner) HasDeviceCarrier() bool {
	if o != nil && o.DeviceCarrier.IsSet() {
		return true
	}

	return false
}

// SetDeviceCarrier gets a reference to the given NullableString and assigns it to the DeviceCarrier field.
func (o *ConversionEventsDataInner) SetDeviceCarrier(v string) {
	o.DeviceCarrier.Set(&v)
}
// SetDeviceCarrierNil sets the value for DeviceCarrier to be an explicit nil
func (o *ConversionEventsDataInner) SetDeviceCarrierNil() {
	o.DeviceCarrier.Set(nil)
}

// UnsetDeviceCarrier ensures that no value is present for DeviceCarrier, not even an explicit nil
func (o *ConversionEventsDataInner) UnsetDeviceCarrier() {
	o.DeviceCarrier.Unset()
}

// GetDeviceModel returns the DeviceModel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConversionEventsDataInner) GetDeviceModel() string {
	if o == nil || IsNil(o.DeviceModel.Get()) {
		var ret string
		return ret
	}
	return *o.DeviceModel.Get()
}

// GetDeviceModelOk returns a tuple with the DeviceModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConversionEventsDataInner) GetDeviceModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeviceModel.Get(), o.DeviceModel.IsSet()
}

// HasDeviceModel returns a boolean if a field has been set.
func (o *ConversionEventsDataInner) HasDeviceModel() bool {
	if o != nil && o.DeviceModel.IsSet() {
		return true
	}

	return false
}

// SetDeviceModel gets a reference to the given NullableString and assigns it to the DeviceModel field.
func (o *ConversionEventsDataInner) SetDeviceModel(v string) {
	o.DeviceModel.Set(&v)
}
// SetDeviceModelNil sets the value for DeviceModel to be an explicit nil
func (o *ConversionEventsDataInner) SetDeviceModelNil() {
	o.DeviceModel.Set(nil)
}

// UnsetDeviceModel ensures that no value is present for DeviceModel, not even an explicit nil
func (o *ConversionEventsDataInner) UnsetDeviceModel() {
	o.DeviceModel.Unset()
}

// GetDeviceType returns the DeviceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConversionEventsDataInner) GetDeviceType() string {
	if o == nil || IsNil(o.DeviceType.Get()) {
		var ret string
		return ret
	}
	return *o.DeviceType.Get()
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConversionEventsDataInner) GetDeviceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeviceType.Get(), o.DeviceType.IsSet()
}

// HasDeviceType returns a boolean if a field has been set.
func (o *ConversionEventsDataInner) HasDeviceType() bool {
	if o != nil && o.DeviceType.IsSet() {
		return true
	}

	return false
}

// SetDeviceType gets a reference to the given NullableString and assigns it to the DeviceType field.
func (o *ConversionEventsDataInner) SetDeviceType(v string) {
	o.DeviceType.Set(&v)
}
// SetDeviceTypeNil sets the value for DeviceType to be an explicit nil
func (o *ConversionEventsDataInner) SetDeviceTypeNil() {
	o.DeviceType.Set(nil)
}

// UnsetDeviceType ensures that no value is present for DeviceType, not even an explicit nil
func (o *ConversionEventsDataInner) UnsetDeviceType() {
	o.DeviceType.Unset()
}

// GetOsVersion returns the OsVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConversionEventsDataInner) GetOsVersion() string {
	if o == nil || IsNil(o.OsVersion.Get()) {
		var ret string
		return ret
	}
	return *o.OsVersion.Get()
}

// GetOsVersionOk returns a tuple with the OsVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConversionEventsDataInner) GetOsVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OsVersion.Get(), o.OsVersion.IsSet()
}

// HasOsVersion returns a boolean if a field has been set.
func (o *ConversionEventsDataInner) HasOsVersion() bool {
	if o != nil && o.OsVersion.IsSet() {
		return true
	}

	return false
}

// SetOsVersion gets a reference to the given NullableString and assigns it to the OsVersion field.
func (o *ConversionEventsDataInner) SetOsVersion(v string) {
	o.OsVersion.Set(&v)
}
// SetOsVersionNil sets the value for OsVersion to be an explicit nil
func (o *ConversionEventsDataInner) SetOsVersionNil() {
	o.OsVersion.Set(nil)
}

// UnsetOsVersion ensures that no value is present for OsVersion, not even an explicit nil
func (o *ConversionEventsDataInner) UnsetOsVersion() {
	o.OsVersion.Unset()
}

// GetWifi returns the Wifi field value if set, zero value otherwise.
func (o *ConversionEventsDataInner) GetWifi() bool {
	if o == nil || IsNil(o.Wifi) {
		var ret bool
		return ret
	}
	return *o.Wifi
}

// GetWifiOk returns a tuple with the Wifi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversionEventsDataInner) GetWifiOk() (*bool, bool) {
	if o == nil || IsNil(o.Wifi) {
		return nil, false
	}
	return o.Wifi, true
}

// HasWifi returns a boolean if a field has been set.
func (o *ConversionEventsDataInner) HasWifi() bool {
	if o != nil && !IsNil(o.Wifi) {
		return true
	}

	return false
}

// SetWifi gets a reference to the given bool and assigns it to the Wifi field.
func (o *ConversionEventsDataInner) SetWifi(v bool) {
	o.Wifi = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConversionEventsDataInner) GetLanguage() string {
	if o == nil || IsNil(o.Language.Get()) {
		var ret string
		return ret
	}
	return *o.Language.Get()
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConversionEventsDataInner) GetLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Language.Get(), o.Language.IsSet()
}

// HasLanguage returns a boolean if a field has been set.
func (o *ConversionEventsDataInner) HasLanguage() bool {
	if o != nil && o.Language.IsSet() {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given NullableString and assigns it to the Language field.
func (o *ConversionEventsDataInner) SetLanguage(v string) {
	o.Language.Set(&v)
}
// SetLanguageNil sets the value for Language to be an explicit nil
func (o *ConversionEventsDataInner) SetLanguageNil() {
	o.Language.Set(nil)
}

// UnsetLanguage ensures that no value is present for Language, not even an explicit nil
func (o *ConversionEventsDataInner) UnsetLanguage() {
	o.Language.Unset()
}

func (o ConversionEventsDataInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConversionEventsDataInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event_name"] = o.EventName
	toSerialize["action_source"] = o.ActionSource
	toSerialize["event_time"] = o.EventTime
	toSerialize["event_id"] = o.EventId
	if o.EventSourceUrl.IsSet() {
		toSerialize["event_source_url"] = o.EventSourceUrl.Get()
	}
	if !IsNil(o.OptOut) {
		toSerialize["opt_out"] = o.OptOut
	}
	if o.PartnerName.IsSet() {
		toSerialize["partner_name"] = o.PartnerName.Get()
	}
	toSerialize["user_data"] = o.UserData
	if !IsNil(o.CustomData) {
		toSerialize["custom_data"] = o.CustomData
	}
	if o.AppId.IsSet() {
		toSerialize["app_id"] = o.AppId.Get()
	}
	if o.AppName.IsSet() {
		toSerialize["app_name"] = o.AppName.Get()
	}
	if o.AppVersion.IsSet() {
		toSerialize["app_version"] = o.AppVersion.Get()
	}
	if o.DeviceBrand.IsSet() {
		toSerialize["device_brand"] = o.DeviceBrand.Get()
	}
	if o.DeviceCarrier.IsSet() {
		toSerialize["device_carrier"] = o.DeviceCarrier.Get()
	}
	if o.DeviceModel.IsSet() {
		toSerialize["device_model"] = o.DeviceModel.Get()
	}
	if o.DeviceType.IsSet() {
		toSerialize["device_type"] = o.DeviceType.Get()
	}
	if o.OsVersion.IsSet() {
		toSerialize["os_version"] = o.OsVersion.Get()
	}
	if !IsNil(o.Wifi) {
		toSerialize["wifi"] = o.Wifi
	}
	if o.Language.IsSet() {
		toSerialize["language"] = o.Language.Get()
	}
	return toSerialize, nil
}

func (o *ConversionEventsDataInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event_name",
		"action_source",
		"event_time",
		"event_id",
		"user_data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConversionEventsDataInner := _ConversionEventsDataInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConversionEventsDataInner)

	if err != nil {
		return err
	}

	*o = ConversionEventsDataInner(varConversionEventsDataInner)

	return err
}

type NullableConversionEventsDataInner struct {
	value *ConversionEventsDataInner
	isSet bool
}

func (v NullableConversionEventsDataInner) Get() *ConversionEventsDataInner {
	return v.value
}

func (v *NullableConversionEventsDataInner) Set(val *ConversionEventsDataInner) {
	v.value = val
	v.isSet = true
}

func (v NullableConversionEventsDataInner) IsSet() bool {
	return v.isSet
}

func (v *NullableConversionEventsDataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversionEventsDataInner(val *ConversionEventsDataInner) *NullableConversionEventsDataInner {
	return &NullableConversionEventsDataInner{value: val, isSet: true}
}

func (v NullableConversionEventsDataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversionEventsDataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


