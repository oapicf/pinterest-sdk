/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TrackingUrls type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackingUrls{}

// TrackingUrls Third-party tracking URLs. Up to three tracking URLs - with a max length of 2,000 - are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. For more information, see <a href=\"https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\" target=\"_blank\">Third-party and dynamic tracking</a>.
type TrackingUrls struct {
	Impression []string `json:"impression,omitempty"`
	Click []string `json:"click,omitempty"`
	Engagement []string `json:"engagement,omitempty"`
	BuyableButton []string `json:"buyable_button,omitempty"`
	AudienceVerification []string `json:"audience_verification,omitempty"`
}

// NewTrackingUrls instantiates a new TrackingUrls object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackingUrls() *TrackingUrls {
	this := TrackingUrls{}
	return &this
}

// NewTrackingUrlsWithDefaults instantiates a new TrackingUrls object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackingUrlsWithDefaults() *TrackingUrls {
	this := TrackingUrls{}
	return &this
}

// GetImpression returns the Impression field value if set, zero value otherwise.
func (o *TrackingUrls) GetImpression() []string {
	if o == nil || IsNil(o.Impression) {
		var ret []string
		return ret
	}
	return o.Impression
}

// GetImpressionOk returns a tuple with the Impression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingUrls) GetImpressionOk() ([]string, bool) {
	if o == nil || IsNil(o.Impression) {
		return nil, false
	}
	return o.Impression, true
}

// HasImpression returns a boolean if a field has been set.
func (o *TrackingUrls) HasImpression() bool {
	if o != nil && !IsNil(o.Impression) {
		return true
	}

	return false
}

// SetImpression gets a reference to the given []string and assigns it to the Impression field.
func (o *TrackingUrls) SetImpression(v []string) {
	o.Impression = v
}

// GetClick returns the Click field value if set, zero value otherwise.
func (o *TrackingUrls) GetClick() []string {
	if o == nil || IsNil(o.Click) {
		var ret []string
		return ret
	}
	return o.Click
}

// GetClickOk returns a tuple with the Click field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingUrls) GetClickOk() ([]string, bool) {
	if o == nil || IsNil(o.Click) {
		return nil, false
	}
	return o.Click, true
}

// HasClick returns a boolean if a field has been set.
func (o *TrackingUrls) HasClick() bool {
	if o != nil && !IsNil(o.Click) {
		return true
	}

	return false
}

// SetClick gets a reference to the given []string and assigns it to the Click field.
func (o *TrackingUrls) SetClick(v []string) {
	o.Click = v
}

// GetEngagement returns the Engagement field value if set, zero value otherwise.
func (o *TrackingUrls) GetEngagement() []string {
	if o == nil || IsNil(o.Engagement) {
		var ret []string
		return ret
	}
	return o.Engagement
}

// GetEngagementOk returns a tuple with the Engagement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingUrls) GetEngagementOk() ([]string, bool) {
	if o == nil || IsNil(o.Engagement) {
		return nil, false
	}
	return o.Engagement, true
}

// HasEngagement returns a boolean if a field has been set.
func (o *TrackingUrls) HasEngagement() bool {
	if o != nil && !IsNil(o.Engagement) {
		return true
	}

	return false
}

// SetEngagement gets a reference to the given []string and assigns it to the Engagement field.
func (o *TrackingUrls) SetEngagement(v []string) {
	o.Engagement = v
}

// GetBuyableButton returns the BuyableButton field value if set, zero value otherwise.
func (o *TrackingUrls) GetBuyableButton() []string {
	if o == nil || IsNil(o.BuyableButton) {
		var ret []string
		return ret
	}
	return o.BuyableButton
}

// GetBuyableButtonOk returns a tuple with the BuyableButton field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingUrls) GetBuyableButtonOk() ([]string, bool) {
	if o == nil || IsNil(o.BuyableButton) {
		return nil, false
	}
	return o.BuyableButton, true
}

// HasBuyableButton returns a boolean if a field has been set.
func (o *TrackingUrls) HasBuyableButton() bool {
	if o != nil && !IsNil(o.BuyableButton) {
		return true
	}

	return false
}

// SetBuyableButton gets a reference to the given []string and assigns it to the BuyableButton field.
func (o *TrackingUrls) SetBuyableButton(v []string) {
	o.BuyableButton = v
}

// GetAudienceVerification returns the AudienceVerification field value if set, zero value otherwise.
func (o *TrackingUrls) GetAudienceVerification() []string {
	if o == nil || IsNil(o.AudienceVerification) {
		var ret []string
		return ret
	}
	return o.AudienceVerification
}

// GetAudienceVerificationOk returns a tuple with the AudienceVerification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingUrls) GetAudienceVerificationOk() ([]string, bool) {
	if o == nil || IsNil(o.AudienceVerification) {
		return nil, false
	}
	return o.AudienceVerification, true
}

// HasAudienceVerification returns a boolean if a field has been set.
func (o *TrackingUrls) HasAudienceVerification() bool {
	if o != nil && !IsNil(o.AudienceVerification) {
		return true
	}

	return false
}

// SetAudienceVerification gets a reference to the given []string and assigns it to the AudienceVerification field.
func (o *TrackingUrls) SetAudienceVerification(v []string) {
	o.AudienceVerification = v
}

func (o TrackingUrls) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackingUrls) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Impression) {
		toSerialize["impression"] = o.Impression
	}
	if !IsNil(o.Click) {
		toSerialize["click"] = o.Click
	}
	if !IsNil(o.Engagement) {
		toSerialize["engagement"] = o.Engagement
	}
	if !IsNil(o.BuyableButton) {
		toSerialize["buyable_button"] = o.BuyableButton
	}
	if !IsNil(o.AudienceVerification) {
		toSerialize["audience_verification"] = o.AudienceVerification
	}
	return toSerialize, nil
}

type NullableTrackingUrls struct {
	value *TrackingUrls
	isSet bool
}

func (v NullableTrackingUrls) Get() *TrackingUrls {
	return v.value
}

func (v *NullableTrackingUrls) Set(val *TrackingUrls) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackingUrls) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackingUrls) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackingUrls(val *TrackingUrls) *NullableTrackingUrls {
	return &NullableTrackingUrls{value: val, isSet: true}
}

func (v NullableTrackingUrls) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackingUrls) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


