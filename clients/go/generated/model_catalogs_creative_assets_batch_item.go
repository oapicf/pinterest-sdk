/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the CatalogsCreativeAssetsBatchItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogsCreativeAssetsBatchItem{}

// CatalogsCreativeAssetsBatchItem Creative assets batch item
type CatalogsCreativeAssetsBatchItem struct {
	CatalogsCreateCreativeAssetsItem *CatalogsCreateCreativeAssetsItem
	CatalogsDeleteCreativeAssetsItem *CatalogsDeleteCreativeAssetsItem
	CatalogsUpdateCreativeAssetsItem *CatalogsUpdateCreativeAssetsItem
	CatalogsUpsertCreativeAssetsItem *CatalogsUpsertCreativeAssetsItem
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *CatalogsCreativeAssetsBatchItem) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'CREATE'
	if jsonDict["operation"] == "CREATE" {
		// try to unmarshal JSON data into CatalogsCreateCreativeAssetsItem
		err = json.Unmarshal(data, &dst.CatalogsCreateCreativeAssetsItem);
		if err == nil {
			jsonCatalogsCreateCreativeAssetsItem, _ := json.Marshal(dst.CatalogsCreateCreativeAssetsItem)
			if string(jsonCatalogsCreateCreativeAssetsItem) == "{}" { // empty struct
				dst.CatalogsCreateCreativeAssetsItem = nil
			} else {
				return nil // data stored in dst.CatalogsCreateCreativeAssetsItem, return on the first match
			}
		} else {
			dst.CatalogsCreateCreativeAssetsItem = nil
		}
	}

	// check if the discriminator value is 'DELETE'
	if jsonDict["operation"] == "DELETE" {
		// try to unmarshal JSON data into CatalogsDeleteCreativeAssetsItem
		err = json.Unmarshal(data, &dst.CatalogsDeleteCreativeAssetsItem);
		if err == nil {
			jsonCatalogsDeleteCreativeAssetsItem, _ := json.Marshal(dst.CatalogsDeleteCreativeAssetsItem)
			if string(jsonCatalogsDeleteCreativeAssetsItem) == "{}" { // empty struct
				dst.CatalogsDeleteCreativeAssetsItem = nil
			} else {
				return nil // data stored in dst.CatalogsDeleteCreativeAssetsItem, return on the first match
			}
		} else {
			dst.CatalogsDeleteCreativeAssetsItem = nil
		}
	}

	// check if the discriminator value is 'UPDATE'
	if jsonDict["operation"] == "UPDATE" {
		// try to unmarshal JSON data into CatalogsUpdateCreativeAssetsItem
		err = json.Unmarshal(data, &dst.CatalogsUpdateCreativeAssetsItem);
		if err == nil {
			jsonCatalogsUpdateCreativeAssetsItem, _ := json.Marshal(dst.CatalogsUpdateCreativeAssetsItem)
			if string(jsonCatalogsUpdateCreativeAssetsItem) == "{}" { // empty struct
				dst.CatalogsUpdateCreativeAssetsItem = nil
			} else {
				return nil // data stored in dst.CatalogsUpdateCreativeAssetsItem, return on the first match
			}
		} else {
			dst.CatalogsUpdateCreativeAssetsItem = nil
		}
	}

	// check if the discriminator value is 'UPSERT'
	if jsonDict["operation"] == "UPSERT" {
		// try to unmarshal JSON data into CatalogsUpsertCreativeAssetsItem
		err = json.Unmarshal(data, &dst.CatalogsUpsertCreativeAssetsItem);
		if err == nil {
			jsonCatalogsUpsertCreativeAssetsItem, _ := json.Marshal(dst.CatalogsUpsertCreativeAssetsItem)
			if string(jsonCatalogsUpsertCreativeAssetsItem) == "{}" { // empty struct
				dst.CatalogsUpsertCreativeAssetsItem = nil
			} else {
				return nil // data stored in dst.CatalogsUpsertCreativeAssetsItem, return on the first match
			}
		} else {
			dst.CatalogsUpsertCreativeAssetsItem = nil
		}
	}

	// check if the discriminator value is 'CatalogsCreateCreativeAssetsItem'
	if jsonDict["operation"] == "CatalogsCreateCreativeAssetsItem" {
		// try to unmarshal JSON data into CatalogsCreateCreativeAssetsItem
		err = json.Unmarshal(data, &dst.CatalogsCreateCreativeAssetsItem);
		if err == nil {
			jsonCatalogsCreateCreativeAssetsItem, _ := json.Marshal(dst.CatalogsCreateCreativeAssetsItem)
			if string(jsonCatalogsCreateCreativeAssetsItem) == "{}" { // empty struct
				dst.CatalogsCreateCreativeAssetsItem = nil
			} else {
				return nil // data stored in dst.CatalogsCreateCreativeAssetsItem, return on the first match
			}
		} else {
			dst.CatalogsCreateCreativeAssetsItem = nil
		}
	}

	// check if the discriminator value is 'CatalogsDeleteCreativeAssetsItem'
	if jsonDict["operation"] == "CatalogsDeleteCreativeAssetsItem" {
		// try to unmarshal JSON data into CatalogsDeleteCreativeAssetsItem
		err = json.Unmarshal(data, &dst.CatalogsDeleteCreativeAssetsItem);
		if err == nil {
			jsonCatalogsDeleteCreativeAssetsItem, _ := json.Marshal(dst.CatalogsDeleteCreativeAssetsItem)
			if string(jsonCatalogsDeleteCreativeAssetsItem) == "{}" { // empty struct
				dst.CatalogsDeleteCreativeAssetsItem = nil
			} else {
				return nil // data stored in dst.CatalogsDeleteCreativeAssetsItem, return on the first match
			}
		} else {
			dst.CatalogsDeleteCreativeAssetsItem = nil
		}
	}

	// check if the discriminator value is 'CatalogsUpdateCreativeAssetsItem'
	if jsonDict["operation"] == "CatalogsUpdateCreativeAssetsItem" {
		// try to unmarshal JSON data into CatalogsUpdateCreativeAssetsItem
		err = json.Unmarshal(data, &dst.CatalogsUpdateCreativeAssetsItem);
		if err == nil {
			jsonCatalogsUpdateCreativeAssetsItem, _ := json.Marshal(dst.CatalogsUpdateCreativeAssetsItem)
			if string(jsonCatalogsUpdateCreativeAssetsItem) == "{}" { // empty struct
				dst.CatalogsUpdateCreativeAssetsItem = nil
			} else {
				return nil // data stored in dst.CatalogsUpdateCreativeAssetsItem, return on the first match
			}
		} else {
			dst.CatalogsUpdateCreativeAssetsItem = nil
		}
	}

	// check if the discriminator value is 'CatalogsUpsertCreativeAssetsItem'
	if jsonDict["operation"] == "CatalogsUpsertCreativeAssetsItem" {
		// try to unmarshal JSON data into CatalogsUpsertCreativeAssetsItem
		err = json.Unmarshal(data, &dst.CatalogsUpsertCreativeAssetsItem);
		if err == nil {
			jsonCatalogsUpsertCreativeAssetsItem, _ := json.Marshal(dst.CatalogsUpsertCreativeAssetsItem)
			if string(jsonCatalogsUpsertCreativeAssetsItem) == "{}" { // empty struct
				dst.CatalogsUpsertCreativeAssetsItem = nil
			} else {
				return nil // data stored in dst.CatalogsUpsertCreativeAssetsItem, return on the first match
			}
		} else {
			dst.CatalogsUpsertCreativeAssetsItem = nil
		}
	}

	// try to unmarshal JSON data into CatalogsCreateCreativeAssetsItem
	err = json.Unmarshal(data, &dst.CatalogsCreateCreativeAssetsItem);
	if err == nil {
		jsonCatalogsCreateCreativeAssetsItem, _ := json.Marshal(dst.CatalogsCreateCreativeAssetsItem)
		if string(jsonCatalogsCreateCreativeAssetsItem) == "{}" { // empty struct
			dst.CatalogsCreateCreativeAssetsItem = nil
		} else {
			return nil // data stored in dst.CatalogsCreateCreativeAssetsItem, return on the first match
		}
	} else {
		dst.CatalogsCreateCreativeAssetsItem = nil
	}

	// try to unmarshal JSON data into CatalogsDeleteCreativeAssetsItem
	err = json.Unmarshal(data, &dst.CatalogsDeleteCreativeAssetsItem);
	if err == nil {
		jsonCatalogsDeleteCreativeAssetsItem, _ := json.Marshal(dst.CatalogsDeleteCreativeAssetsItem)
		if string(jsonCatalogsDeleteCreativeAssetsItem) == "{}" { // empty struct
			dst.CatalogsDeleteCreativeAssetsItem = nil
		} else {
			return nil // data stored in dst.CatalogsDeleteCreativeAssetsItem, return on the first match
		}
	} else {
		dst.CatalogsDeleteCreativeAssetsItem = nil
	}

	// try to unmarshal JSON data into CatalogsUpdateCreativeAssetsItem
	err = json.Unmarshal(data, &dst.CatalogsUpdateCreativeAssetsItem);
	if err == nil {
		jsonCatalogsUpdateCreativeAssetsItem, _ := json.Marshal(dst.CatalogsUpdateCreativeAssetsItem)
		if string(jsonCatalogsUpdateCreativeAssetsItem) == "{}" { // empty struct
			dst.CatalogsUpdateCreativeAssetsItem = nil
		} else {
			return nil // data stored in dst.CatalogsUpdateCreativeAssetsItem, return on the first match
		}
	} else {
		dst.CatalogsUpdateCreativeAssetsItem = nil
	}

	// try to unmarshal JSON data into CatalogsUpsertCreativeAssetsItem
	err = json.Unmarshal(data, &dst.CatalogsUpsertCreativeAssetsItem);
	if err == nil {
		jsonCatalogsUpsertCreativeAssetsItem, _ := json.Marshal(dst.CatalogsUpsertCreativeAssetsItem)
		if string(jsonCatalogsUpsertCreativeAssetsItem) == "{}" { // empty struct
			dst.CatalogsUpsertCreativeAssetsItem = nil
		} else {
			return nil // data stored in dst.CatalogsUpsertCreativeAssetsItem, return on the first match
		}
	} else {
		dst.CatalogsUpsertCreativeAssetsItem = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(CatalogsCreativeAssetsBatchItem)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *CatalogsCreativeAssetsBatchItem) MarshalJSON() ([]byte, error) {
	if src.CatalogsCreateCreativeAssetsItem != nil {
		return json.Marshal(&src.CatalogsCreateCreativeAssetsItem)
	}

	if src.CatalogsDeleteCreativeAssetsItem != nil {
		return json.Marshal(&src.CatalogsDeleteCreativeAssetsItem)
	}

	if src.CatalogsUpdateCreativeAssetsItem != nil {
		return json.Marshal(&src.CatalogsUpdateCreativeAssetsItem)
	}

	if src.CatalogsUpsertCreativeAssetsItem != nil {
		return json.Marshal(&src.CatalogsUpsertCreativeAssetsItem)
	}

	return nil, nil // no data in anyOf schemas
}

func (src CatalogsCreativeAssetsBatchItem) ToMap() (map[string]interface{}, error) {
	if src.CatalogsCreateCreativeAssetsItem != nil {
		return src.CatalogsCreateCreativeAssetsItem.ToMap()
	}

	if src.CatalogsDeleteCreativeAssetsItem != nil {
		return src.CatalogsDeleteCreativeAssetsItem.ToMap()
	}

	if src.CatalogsUpdateCreativeAssetsItem != nil {
		return src.CatalogsUpdateCreativeAssetsItem.ToMap()
	}

	if src.CatalogsUpsertCreativeAssetsItem != nil {
		return src.CatalogsUpsertCreativeAssetsItem.ToMap()
	}

    return nil, nil // no data in anyOf schemas
}

type NullableCatalogsCreativeAssetsBatchItem struct {
	value *CatalogsCreativeAssetsBatchItem
	isSet bool
}

func (v NullableCatalogsCreativeAssetsBatchItem) Get() *CatalogsCreativeAssetsBatchItem {
	return v.value
}

func (v *NullableCatalogsCreativeAssetsBatchItem) Set(val *CatalogsCreativeAssetsBatchItem) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogsCreativeAssetsBatchItem) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogsCreativeAssetsBatchItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogsCreativeAssetsBatchItem(val *CatalogsCreativeAssetsBatchItem) *NullableCatalogsCreativeAssetsBatchItem {
	return &NullableCatalogsCreativeAssetsBatchItem{value: val, isSet: true}
}

func (v NullableCatalogsCreativeAssetsBatchItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogsCreativeAssetsBatchItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


