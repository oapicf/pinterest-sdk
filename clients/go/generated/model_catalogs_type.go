/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CatalogsType Type of the catalog entity.
type CatalogsType string

// List of CatalogsType
const (
	RETAIL CatalogsType = "RETAIL"
	HOTEL CatalogsType = "HOTEL"
	CREATIVE_ASSETS CatalogsType = "CREATIVE_ASSETS"
)

// All allowed values of CatalogsType enum
var AllowedCatalogsTypeEnumValues = []CatalogsType{
	"RETAIL",
	"HOTEL",
	"CREATIVE_ASSETS",
}

func (v *CatalogsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CatalogsType(value)
	for _, existing := range AllowedCatalogsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CatalogsType", value)
}

// NewCatalogsTypeFromValue returns a pointer to a valid CatalogsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCatalogsTypeFromValue(v string) (*CatalogsType, error) {
	ev := CatalogsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CatalogsType: valid values are %v", v, AllowedCatalogsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CatalogsType) IsValid() bool {
	for _, existing := range AllowedCatalogsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CatalogsType value
func (v CatalogsType) Ptr() *CatalogsType {
	return &v
}

type NullableCatalogsType struct {
	value *CatalogsType
	isSet bool
}

func (v NullableCatalogsType) Get() *CatalogsType {
	return v.value
}

func (v *NullableCatalogsType) Set(val *CatalogsType) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogsType) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogsType(val *CatalogsType) *NullableCatalogsType {
	return &NullableCatalogsType{value: val, isSet: true}
}

func (v NullableCatalogsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

