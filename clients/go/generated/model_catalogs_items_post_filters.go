/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CatalogsItemsPostFilters - struct for CatalogsItemsPostFilters
type CatalogsItemsPostFilters struct {
	CatalogsCreativeAssetsItemsPostFilter *CatalogsCreativeAssetsItemsPostFilter
	CatalogsHotelItemsPostFilter *CatalogsHotelItemsPostFilter
	CatalogsRetailItemsPostFilter *CatalogsRetailItemsPostFilter
}

// CatalogsCreativeAssetsItemsPostFilterAsCatalogsItemsPostFilters is a convenience function that returns CatalogsCreativeAssetsItemsPostFilter wrapped in CatalogsItemsPostFilters
func CatalogsCreativeAssetsItemsPostFilterAsCatalogsItemsPostFilters(v *CatalogsCreativeAssetsItemsPostFilter) CatalogsItemsPostFilters {
	return CatalogsItemsPostFilters{
		CatalogsCreativeAssetsItemsPostFilter: v,
	}
}

// CatalogsHotelItemsPostFilterAsCatalogsItemsPostFilters is a convenience function that returns CatalogsHotelItemsPostFilter wrapped in CatalogsItemsPostFilters
func CatalogsHotelItemsPostFilterAsCatalogsItemsPostFilters(v *CatalogsHotelItemsPostFilter) CatalogsItemsPostFilters {
	return CatalogsItemsPostFilters{
		CatalogsHotelItemsPostFilter: v,
	}
}

// CatalogsRetailItemsPostFilterAsCatalogsItemsPostFilters is a convenience function that returns CatalogsRetailItemsPostFilter wrapped in CatalogsItemsPostFilters
func CatalogsRetailItemsPostFilterAsCatalogsItemsPostFilters(v *CatalogsRetailItemsPostFilter) CatalogsItemsPostFilters {
	return CatalogsItemsPostFilters{
		CatalogsRetailItemsPostFilter: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CatalogsItemsPostFilters) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CatalogsCreativeAssetsItemsPostFilter
	err = newStrictDecoder(data).Decode(&dst.CatalogsCreativeAssetsItemsPostFilter)
	if err == nil {
		jsonCatalogsCreativeAssetsItemsPostFilter, _ := json.Marshal(dst.CatalogsCreativeAssetsItemsPostFilter)
		if string(jsonCatalogsCreativeAssetsItemsPostFilter) == "{}" { // empty struct
			dst.CatalogsCreativeAssetsItemsPostFilter = nil
		} else {
			if err = validator.Validate(dst.CatalogsCreativeAssetsItemsPostFilter); err != nil {
				dst.CatalogsCreativeAssetsItemsPostFilter = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogsCreativeAssetsItemsPostFilter = nil
	}

	// try to unmarshal data into CatalogsHotelItemsPostFilter
	err = newStrictDecoder(data).Decode(&dst.CatalogsHotelItemsPostFilter)
	if err == nil {
		jsonCatalogsHotelItemsPostFilter, _ := json.Marshal(dst.CatalogsHotelItemsPostFilter)
		if string(jsonCatalogsHotelItemsPostFilter) == "{}" { // empty struct
			dst.CatalogsHotelItemsPostFilter = nil
		} else {
			if err = validator.Validate(dst.CatalogsHotelItemsPostFilter); err != nil {
				dst.CatalogsHotelItemsPostFilter = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogsHotelItemsPostFilter = nil
	}

	// try to unmarshal data into CatalogsRetailItemsPostFilter
	err = newStrictDecoder(data).Decode(&dst.CatalogsRetailItemsPostFilter)
	if err == nil {
		jsonCatalogsRetailItemsPostFilter, _ := json.Marshal(dst.CatalogsRetailItemsPostFilter)
		if string(jsonCatalogsRetailItemsPostFilter) == "{}" { // empty struct
			dst.CatalogsRetailItemsPostFilter = nil
		} else {
			if err = validator.Validate(dst.CatalogsRetailItemsPostFilter); err != nil {
				dst.CatalogsRetailItemsPostFilter = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogsRetailItemsPostFilter = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CatalogsCreativeAssetsItemsPostFilter = nil
		dst.CatalogsHotelItemsPostFilter = nil
		dst.CatalogsRetailItemsPostFilter = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CatalogsItemsPostFilters)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CatalogsItemsPostFilters)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CatalogsItemsPostFilters) MarshalJSON() ([]byte, error) {
	if src.CatalogsCreativeAssetsItemsPostFilter != nil {
		return json.Marshal(&src.CatalogsCreativeAssetsItemsPostFilter)
	}

	if src.CatalogsHotelItemsPostFilter != nil {
		return json.Marshal(&src.CatalogsHotelItemsPostFilter)
	}

	if src.CatalogsRetailItemsPostFilter != nil {
		return json.Marshal(&src.CatalogsRetailItemsPostFilter)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CatalogsItemsPostFilters) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CatalogsCreativeAssetsItemsPostFilter != nil {
		return obj.CatalogsCreativeAssetsItemsPostFilter
	}

	if obj.CatalogsHotelItemsPostFilter != nil {
		return obj.CatalogsHotelItemsPostFilter
	}

	if obj.CatalogsRetailItemsPostFilter != nil {
		return obj.CatalogsRetailItemsPostFilter
	}

	// all schemas are nil
	return nil
}

type NullableCatalogsItemsPostFilters struct {
	value *CatalogsItemsPostFilters
	isSet bool
}

func (v NullableCatalogsItemsPostFilters) Get() *CatalogsItemsPostFilters {
	return v.value
}

func (v *NullableCatalogsItemsPostFilters) Set(val *CatalogsItemsPostFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogsItemsPostFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogsItemsPostFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogsItemsPostFilters(val *CatalogsItemsPostFilters) *NullableCatalogsItemsPostFilters {
	return &NullableCatalogsItemsPostFilters{value: val, isSet: true}
}

func (v NullableCatalogsItemsPostFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogsItemsPostFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


