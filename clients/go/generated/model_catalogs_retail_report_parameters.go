/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogsRetailReportParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogsRetailReportParameters{}

// CatalogsRetailReportParameters Parameters for retail report
type CatalogsRetailReportParameters struct {
	CatalogType string `json:"catalog_type"`
	Report CatalogsHotelReportParametersReport `json:"report"`
}

type _CatalogsRetailReportParameters CatalogsRetailReportParameters

// NewCatalogsRetailReportParameters instantiates a new CatalogsRetailReportParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogsRetailReportParameters(catalogType string, report CatalogsHotelReportParametersReport) *CatalogsRetailReportParameters {
	this := CatalogsRetailReportParameters{}
	this.CatalogType = catalogType
	this.Report = report
	return &this
}

// NewCatalogsRetailReportParametersWithDefaults instantiates a new CatalogsRetailReportParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogsRetailReportParametersWithDefaults() *CatalogsRetailReportParameters {
	this := CatalogsRetailReportParameters{}
	return &this
}

// GetCatalogType returns the CatalogType field value
func (o *CatalogsRetailReportParameters) GetCatalogType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CatalogType
}

// GetCatalogTypeOk returns a tuple with the CatalogType field value
// and a boolean to check if the value has been set.
func (o *CatalogsRetailReportParameters) GetCatalogTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CatalogType, true
}

// SetCatalogType sets field value
func (o *CatalogsRetailReportParameters) SetCatalogType(v string) {
	o.CatalogType = v
}

// GetReport returns the Report field value
func (o *CatalogsRetailReportParameters) GetReport() CatalogsHotelReportParametersReport {
	if o == nil {
		var ret CatalogsHotelReportParametersReport
		return ret
	}

	return o.Report
}

// GetReportOk returns a tuple with the Report field value
// and a boolean to check if the value has been set.
func (o *CatalogsRetailReportParameters) GetReportOk() (*CatalogsHotelReportParametersReport, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Report, true
}

// SetReport sets field value
func (o *CatalogsRetailReportParameters) SetReport(v CatalogsHotelReportParametersReport) {
	o.Report = v
}

func (o CatalogsRetailReportParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogsRetailReportParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["catalog_type"] = o.CatalogType
	toSerialize["report"] = o.Report
	return toSerialize, nil
}

func (o *CatalogsRetailReportParameters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"catalog_type",
		"report",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogsRetailReportParameters := _CatalogsRetailReportParameters{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogsRetailReportParameters)

	if err != nil {
		return err
	}

	*o = CatalogsRetailReportParameters(varCatalogsRetailReportParameters)

	return err
}

type NullableCatalogsRetailReportParameters struct {
	value *CatalogsRetailReportParameters
	isSet bool
}

func (v NullableCatalogsRetailReportParameters) Get() *CatalogsRetailReportParameters {
	return v.value
}

func (v *NullableCatalogsRetailReportParameters) Set(val *CatalogsRetailReportParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogsRetailReportParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogsRetailReportParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogsRetailReportParameters(val *CatalogsRetailReportParameters) *NullableCatalogsRetailReportParameters {
	return &NullableCatalogsRetailReportParameters{value: val, isSet: true}
}

func (v NullableCatalogsRetailReportParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogsRetailReportParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


